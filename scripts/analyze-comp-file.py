#!/usr/bin/python3

"""Analyzes a .comp file generated by decls2comp.py & prints out interesting properties about it."""

import re
import sys
from pathlib import Path

ppt_name_re = re.compile(r":::")

with Path(sys.argv[1]).open() as f:
    all_lines = [line.strip() for line in f]

# Key: program point name
# Value: a list where each element is the size of a comparability set
#        for that ppt
ppt_info_dict = {}

# The current program point we are analyzing
cur_ppt = None

# Initialize this to an empty list and append on the size of the
# comparability sets for each line you encounter in the program point.
cur_ppt_set_sizes: list[int] = []

# Initialize ppt_info_dict
for line in all_lines:
    # We hit a program point name, so calculate stuff
    # for the previous program point
    if ppt_name_re.search(line):
        # Special case for the first program point reached
        if not cur_ppt:
            cur_ppt = line

        # Normally, throw all of the data about the previous program
        # point into ppt_info_dict and update cur_ppt
        else:
            ppt_info_dict[cur_ppt] = cur_ppt_set_sizes
            cur_ppt = line

        cur_ppt_set_sizes = []

    # (Ignore blank lines) ... we hit a space-delimited list of
    # comparable variables
    elif line:
        # Size of comparability set for that line (mostly gonna be 1)
        cur_ppt_set_sizes.append(len(line.split()))


# Now ppt_info_dict should be initialized with all numerical data.
# We can now crunch numbers and produce useful-looking results

sum_of_avgs = 0.0
num_ppts = len(list(ppt_info_dict.keys()))

total_square_vars = 0
total_vars = 0

total_square_vars_no_comp = 0

for ppt, comp_set_sizes_at_ppt in ppt_info_dict.items():  # noqa: B007 PERF102
    total_vars_at_ppt = sum(comp_set_sizes_at_ppt)
    square_vars_at_ppt = sum((i * i) for i in comp_set_sizes_at_ppt)

    if total_vars_at_ppt > 0:
        avg_for_ppt = float(square_vars_at_ppt) / float(total_vars_at_ppt)
    else:
        avg_for_ppt = 0

    sum_of_avgs += avg_for_ppt

    total_square_vars += square_vars_at_ppt
    total_vars += total_vars_at_ppt

    total_square_vars_no_comp += total_vars_at_ppt * total_vars_at_ppt

#    print ppt
#    print "Total # vars:     ", total_vars_at_ppt
#    print "Average set size: ", avg_for_ppt


# print
# print "Unweighted average:", ((sum_of_avgs) / float(num_ppts))
print("Weighted average:", (float(total_square_vars) / float(total_vars)))
print("Avg. (No comparability):", (float(total_square_vars_no_comp) / float(total_vars)))
