# This is a -*- makefile -*-, Emacs

# Forked from $INV/tests/kvasir-tests/Makefile.common
#   Don't compare .decls since comparability numbers might change;
#   Instead, compare the .comp files generated by decls2comp.py (PG)

ifeq ($(shell uname -m),x86_64)
VALGRIND_ARCH := amd64
else
VALGRIND_ARCH := x86
endif

CC := gcc
CXX := g++
CFLAGS := -gdwarf-2
VALGRIND = ${DAIKONDIR}/fjalar/valgrind/inst/bin/valgrind
KVASIR_SKIN = ${DAIKONDIR}/fjalar/valgrind/inst/lib/valgrind/fjalar-$(VALGRIND_ARCH)-linux
KVASIR_SCRIPT = ${DAIKONDIR}/scripts/kvasir-dtrace
KVASIR_OPTIONS := $(KVASIR_OPTIONS) --decls-file=daikon-output/$(NAME).decls
KVASIR_DYNCOMP_OPTIONS := $(KVASIR_OPTIONS) --with-dyncomp
CLEAN_OUTPUT := ../clean-output.pl
DECLS_2_COMP ?= decls2comp.py
RUN_MANY := ../run-many.pl
DTRACE_DIFF ?= dtrace-diff.pl
INCLUDES ?=
LIBS ?=
LIBFLAGS ?=
BEFORE_RUN ?= @:
AFTER_RUN ?= @:
DAIKON := java -Xmx768m -XX:MaxPermSize=768M daikon.Daikon --no_text_output --no_show_progress --config_option daikon.Daikon.disable_derived_variables=true --config_option daikon.DynamicConstants.OneOf_only=true
PRINT_INV := java -Xmx768m -XX:MaxPermSize=768M daikon.PrintInvariants
default: summary

ifdef COMPRESS_DTRACE
export DTRACEGZIP := 1
DTRACE_EXT := .dtrace.gz
DTRACE_GOAL_EXT := .goal.gz
ZCAT := zcat
else
DTRACE_EXT := .dtrace
DTRACE_GOAL_EXT := .goal
ZCAT := cat
endif

ifdef CPLUSPLUS
C_EXT ?= cc
COMPILER := $(CXX)
else
C_EXT ?= c
COMPILER := $(CC)
endif

SOURCES ?= $(NAME).$(C_EXT)

ifndef CUSTOM_BUILD
$(NAME): $(SOURCES) $(LIBS) $(INCLUDES)
	$(COMPILER) $(CFLAGS) $(DEFINES) $(SOURCES) -o $@ $(LIBFLAGS)
endif

.PRECIOUS: %.decls %$(DTRACE_EXT) %$(DTRACE_EXT).diff %.comp %comp.diff

daikon-output/$(NAME).decls: ran-kvasir
	@

daikon-output/$(NAME)$(DTRACE_EXT): ran-kvasir
	@

$(NAME).out: ran-kvasir
	@

$(NAME).comp: ran-kvasir
	@

daikon-output/$(NAME).inv.gz: daikon-output/$(NAME).decls \
                              daikon-output/$(NAME)$(DTRACE_EXT)
	$(DAIKON) $^ -o daikon-output/$(NAME).inv.gz

daikon-output/$(NAME).invs.txt: daikon-output/$(NAME).inv.gz
	$(PRINT_INV) $< >$@


ifdef TESTS_SCRIPT
ran-kvasir: $(NAME) $(KVASIR_SCRIPT) $(VALGRIND) $(KVASIR_SKIN) $(TESTS_SCRIPT)
	rm -f daikon-output/$(NAME)$(DTRACE_EXT)
	$(BEFORE_RUN)
	DTRACEAPPEND=1 perl $(RUN_MANY) $(KVASIR_SCRIPT) <$(TESTS_SCRIPT) >$(NAME).out
	$(AFTER_RUN)
	cat /dev/null $(EXTRA_OUTPUTS) >>$(NAME).out
	perl -i $(CLEAN_OUTPUT) $(NAME).out
	touch $@
else
ran-kvasir: $(NAME) $(KVASIR_SCRIPT) $(VALGRIND) $(KVASIR_SKIN)
	$(BEFORE_RUN)
	$(KVASIR_SCRIPT) $(KVASIR_DYNCOMP_OPTIONS) ./$(NAME) $(PROGRAM_ARGS) >$(NAME).out 2>&1
	$(AFTER_RUN)
	cat /dev/null $(EXTRA_OUTPUTS) >>$(NAME).out
	perl -i $(CLEAN_OUTPUT) $(NAME).out
	$(DECLS_2_COMP) daikon-output/$(NAME).decls > $(NAME).comp
	touch $@
endif

$(NAME).counts: daikon-output/$(NAME)$(DTRACE_EXT)
	$(ZCAT) $< | dtrace-count.pl >$@

counts: $(NAME).counts

invs: $(NAME).inv.gz

$(NAME).inv.gz: daikon-output/$(NAME).decls daikon-output/$(NAME)$(DTRACE_EXT)
	$(DAIKON) $^ -o $@

#$(NAME).decls.diff: daikon-output/$(NAME).decls $(NAME).decls.goal
#	-diff -u $(NAME).decls.goal daikon-output/$(NAME).decls > $@ 2>&1

$(NAME).counts.diff: $(NAME).counts $(NAME).counts.goal
	-diff -u $(NAME).counts.goal $(NAME).counts > $@ 2>&1

$(NAME).dtrace.diff: daikon-output/$(NAME).decls \
                     daikon-output/$(NAME)$(DTRACE_EXT) \
                     $(NAME).dtrace$(DTRACE_GOAL_EXT)
	-$(DTRACE_DIFF) daikon-output/$(NAME).decls $(NAME).dtrace$(DTRACE_GOAL_EXT) daikon-output/$(NAME)$(DTRACE_EXT) >$@ 2>&1

#%.out.diff: %.out %.out.goal
#	-diff --text -u $<.goal $< >$@ 2>&1

$(NAME).invs.diff: daikon-output/$(NAME).invs.txt $(NAME).invs.goal
	-diff --text -F::: -u $(NAME).invs.goal daikon-output/$(NAME).invs.txt >$@ 2>&1

%.comp.diff: %.comp %.comp.goal
	-diff --text -u $<.goal $< >$@ 2>&1

DIFF_FILES := $(NAME).comp.diff $(NAME).dtrace.diff $(NAME).counts.diff
INV_DIFFS := $(NAME).invs.diff

diffs: $(DIFF_FILES)

diffs-w-daikon: diffs $(INV_DIFFS)

summary: diffs
	@echo -e "\t["$$(basename `pwd`)"]"
	@for file in $(DIFF_FILES); do \
	  if [ -s $$file ]; then \
	    echo "FAILED  $$file"; \
	  else \
	    echo "OK      $$file"; \
	  fi; \
	done

summary-w-daikon: diffs-w-daikon
	@echo -e "\t["$$(basename `pwd`)"]"
	@for file in $(DIFF_FILES) $(INV_DIFFS); do \
	  if [ -s $$file ]; then \
	    echo "FAILED  $$file"; \
	  else \
	    echo "OK      $$file"; \
	  fi; \
	done

clean:
	rm -rf $(NAME) $(NAME).*.diff $(NAME).out daikon-output ran-kvasir $(EXTRA_JUNK) $(EXTRA_OUTPUTS) $(NAME).inv.gz $(NAME).comp

update-out-goals: $(NAME).out
	cp $(NAME).out $(NAME).out.goal

update-count-goals: $(NAME).counts
	cp $(NAME).counts $(NAME).counts.goal

#update-decls-goals: daikon-output/$(NAME).decls
#	cp daikon-output/$(NAME).decls $(NAME).decls.goal

update-dtrace-goals: daikon-output/$(NAME)$(DTRACE_EXT)
	cp daikon-output/$(NAME)$(DTRACE_EXT) $(NAME).dtrace$(DTRACE_GOAL_EXT)

update-inv-goals: daikon-output/$(NAME).invs.txt
	cp daikon-output/$(NAME).invs.txt $(NAME).invs.goal

update-comp-goals: $(NAME).comp
	cp $(NAME).comp $(NAME).comp.goal

update-goals: update-count-goals update-dtrace-goals update-comp-goals
