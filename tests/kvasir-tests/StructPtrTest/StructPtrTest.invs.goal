===========================================================================
..barMaps():::ENTER
m has only one value
m.mapName == "tiles map"
m.numTiles == 5
m.tiles has only one value
m.tiles[] contains no nulls and has only one value, of length 5
m.tiles[].a == [1, 2, 3, 4, 5]
m.tiles[].b == [first, second, third, fourth, fifth]
m.tiles[].c == [10, 20, 30, 40, 50]
===========================================================================
..barMaps():::EXIT
m.mapName == orig(m.mapName)
m.numTiles == orig(m.numTiles)
m.tiles == orig(m.tiles)
m.tiles[] == orig(m.tiles[])
m.tiles[].a == orig(m.tiles[].a)
m.tiles[].c == orig(m.tiles[].c)
m.mapName == "tiles map"
m.numTiles == 5
m.tiles has only one value
m.tiles[] contains no nulls and has only one value, of length 5
m.tiles[].a == [1, 2, 3, 4, 5]
m.tiles[].b == [first, second, third, fourth, fifth]
m.tiles[].c == [10, 20, 30, 40, 50]
return == 300
===========================================================================
..bazMapPtr():::ENTER
m has only one value
m[] contains no nulls and has only one value, of length 1
m[].mapName == [tiles map]
m[].numTiles == [5]
m[].tiles contains no nulls and has only one value, of length 1
m[].tiles->a == [1]
m[].tiles->b == [first]
m[].tiles->c == [10]
m[].tiles[0] contains no nulls and has only one value, of length 1
===========================================================================
..bazMapPtr():::EXIT
m[] == orig(m[])
m[].numTiles == orig(m[].numTiles)
m[].tiles == orig(m[].tiles)
m[].tiles->a == orig(m[].tiles->a)
m[].tiles->c == orig(m[].tiles->c)
m[].tiles[0] == orig(m[].tiles[0])
m[] contains no nulls and has only one value, of length 1
m[].mapName == [tiles map]
m[].numTiles == [5]
m[].tiles contains no nulls and has only one value, of length 1
m[].tiles->a == [1]
m[].tiles->b == [first]
m[].tiles->c == [10]
m[].tiles[0] contains no nulls and has only one value, of length 1
return == 500
===========================================================================
..fooTiles():::ENTER
t[i].a != i
===========================================================================
..fooTiles():::EXIT
t[] == orig(t[])
t[].a == orig(t[].a)
t[].c == orig(t[].c)
return == 100
t[i].a != i
===========================================================================
..main():::EXIT
return == 0
