===========================================================================
..main():::ENTER
::junk has only one value
::junk.baz_int == 0
::junk.baz_str == ""
===========================================================================
..main():::EXIT
::junk == orig(::junk)
::junk.baz_int == orig(::junk.baz_int)
::junk.baz_str == orig(::junk.baz_str)
::junk has only one value
::junk.baz_int == 0
::junk.baz_str == ""
return == 0
===========================================================================
..normal_view():::ENTER
::junk has only one value
::junk.baz_int == 0
::junk.baz_str == ""
f has only one value
f->foo_baz has only one value
f->foo_baz->baz_int == 103083
f->foo_baz->baz_str == "TEN_BYTES"
f->foo_baz[0] has only one value
f->foo_double == 2.718
f->foo_int == 42
f->foo_str == "f->foo_str"
f[0] has only one value
===========================================================================
..normal_view():::EXIT
::junk == orig(::junk)
::junk.baz_int == orig(::junk.baz_int)
::junk.baz_str == orig(::junk.baz_str)
f->foo_baz == orig(f->foo_baz)
f->foo_baz->baz_int == orig(f->foo_baz->baz_int)
f->foo_baz->baz_str == orig(f->foo_baz->baz_str)
f->foo_baz[0] == orig(f->foo_baz[0])
f->foo_double == orig(f->foo_double)
f->foo_int == orig(f->foo_int)
f->foo_str == orig(f->foo_str)
f[0] == orig(f[0])
::junk has only one value
::junk.baz_int == 0
::junk.baz_str == ""
f->foo_baz has only one value
f->foo_baz->baz_int == 103083
f->foo_baz->baz_str == "TEN_BYTES"
f->foo_baz[0] has only one value
f->foo_double == 2.718
f->foo_int == 42
f->foo_str == "f->foo_str"
f[0] has only one value
===========================================================================
..view_bar():::ENTER
::junk has only one value
::junk.baz_int == 0
::junk.baz_str == ""
b has only one value
b->bar_int == 123456
b[0] has only one value
===========================================================================
..view_bar():::EXIT
::junk == orig(::junk)
::junk.baz_int == orig(::junk.baz_int)
::junk.baz_str == orig(::junk.baz_str)
b->bar_int == orig(b->bar_int)
b[0] == orig(b[0])
::junk has only one value
::junk.baz_int == 0
::junk.baz_str == ""
b->bar_int == 123456
b[0] has only one value
===========================================================================
..view_bar_as_foo():::ENTER
::junk has only one value
::junk.baz_int == 0
::junk.baz_str == ""
bar_as_foo has only one value
bar_as_foo->foo_baz has only one value
bar_as_foo->foo_baz->baz_int == 103083
bar_as_foo->foo_baz->baz_str == "TEN_BYTES"
bar_as_foo->foo_baz[0] has only one value
bar_as_foo->foo_double == 2.718
bar_as_foo->foo_int == 42
bar_as_foo->foo_str == "f->foo_str"
bar_as_foo[0] has only one value
===========================================================================
..view_bar_as_foo():::EXIT
::junk == orig(::junk)
::junk.baz_int == orig(::junk.baz_int)
::junk.baz_str == orig(::junk.baz_str)
bar_as_foo->foo_baz == orig(bar_as_foo->foo_baz)
bar_as_foo->foo_baz->baz_int == orig(bar_as_foo->foo_baz->baz_int)
bar_as_foo->foo_baz->baz_str == orig(bar_as_foo->foo_baz->baz_str)
bar_as_foo->foo_baz[0] == orig(bar_as_foo->foo_baz[0])
bar_as_foo->foo_double == orig(bar_as_foo->foo_double)
bar_as_foo->foo_int == orig(bar_as_foo->foo_int)
bar_as_foo->foo_str == orig(bar_as_foo->foo_str)
bar_as_foo[0] == orig(bar_as_foo[0])
::junk has only one value
::junk.baz_int == 0
::junk.baz_str == ""
bar_as_foo->foo_baz has only one value
bar_as_foo->foo_baz->baz_int == 103083
bar_as_foo->foo_baz->baz_str == "TEN_BYTES"
bar_as_foo->foo_baz[0] has only one value
bar_as_foo->foo_double == 2.718
bar_as_foo->foo_int == 42
bar_as_foo->foo_str == "f->foo_str"
bar_as_foo[0] has only one value
===========================================================================
..view_foo():::ENTER
::junk has only one value
::junk.baz_int == 0
::junk.baz_str == ""
f has only one value
f->foo_baz has only one value
f->foo_baz->baz_int == 103083
f->foo_baz->baz_str == "TEN_BYTES"
f->foo_baz[0] has only one value
f->foo_double == 2.718
f->foo_int == 42
f->foo_str == "f->foo_str"
f[0] has only one value
===========================================================================
..view_foo():::EXIT
::junk == orig(::junk)
::junk.baz_int == orig(::junk.baz_int)
::junk.baz_str == orig(::junk.baz_str)
f->foo_baz == orig(f->foo_baz)
f->foo_baz->baz_int == orig(f->foo_baz->baz_int)
f->foo_baz->baz_str == orig(f->foo_baz->baz_str)
f->foo_baz[0] == orig(f->foo_baz[0])
f->foo_double == orig(f->foo_double)
f->foo_int == orig(f->foo_int)
f->foo_str == orig(f->foo_str)
f[0] == orig(f[0])
::junk has only one value
::junk.baz_int == 0
::junk.baz_str == ""
f->foo_baz has only one value
f->foo_baz->baz_int == 103083
f->foo_baz->baz_str == "TEN_BYTES"
f->foo_baz[0] has only one value
f->foo_double == 2.718
f->foo_int == 42
f->foo_str == "f->foo_str"
f[0] has only one value
===========================================================================
..view_foo_and_bar():::ENTER
::junk has only one value
::junk.baz_int == 0
::junk.baz_str == ""
b has only one value
b->bar_int == 123456
b[0] has only one value
f has only one value
f->foo_baz has only one value
f->foo_baz->baz_int == 103083
f->foo_baz->baz_str == "TEN_BYTES"
f->foo_baz[0] has only one value
f->foo_double == 2.718
f->foo_int == 42
f->foo_str == "f->foo_str"
f[0] has only one value
===========================================================================
..view_foo_and_bar():::EXIT
::junk == orig(::junk)
::junk.baz_int == orig(::junk.baz_int)
::junk.baz_str == orig(::junk.baz_str)
b->bar_int == orig(b->bar_int)
b[0] == orig(b[0])
f->foo_baz == orig(f->foo_baz)
f->foo_baz->baz_int == orig(f->foo_baz->baz_int)
f->foo_baz->baz_str == orig(f->foo_baz->baz_str)
f->foo_baz[0] == orig(f->foo_baz[0])
f->foo_double == orig(f->foo_double)
f->foo_int == orig(f->foo_int)
f->foo_str == orig(f->foo_str)
f[0] == orig(f[0])
::junk has only one value
::junk.baz_int == 0
::junk.baz_str == ""
b->bar_int == 123456
b[0] has only one value
f->foo_baz has only one value
f->foo_baz->baz_int == 103083
f->foo_baz->baz_str == "TEN_BYTES"
f->foo_baz[0] has only one value
f->foo_double == 2.718
f->foo_int == 42
f->foo_str == "f->foo_str"
f[0] has only one value
