===========================================================================
..main():::EXIT
return == 0
===========================================================================
Link:::OBJECT
this->next[].next->next->data elements one of { "First line", "Second line", "Uno" }
===========================================================================
Link.initialize(char*, Stack::Link*):::ENTER
Stack::numStacksCreated one of { 1, 2 }
nxt[].next->next->data elements one of { "First line", "Second line", "Uno" }
nxt[].next->next->next->data == [First line]
nxt[].next->next->next->data elements == "First line"
nxt[].next->next->next->next == [null]
nxt[].next->next->next->next elements == null
nxt[].next->next->next[0] contains no nulls and has only one value, of length 1
nxt[].next->next->next[0] elements has only one value
===========================================================================
Link.initialize(char*, Stack::Link*):::EXIT
Stack::numStacksCreated == orig(Stack::numStacksCreated)
Stack::publicNumLinksCreated == orig(Stack::publicNumLinksCreated)
nxt[] == orig(nxt[])
nxt[].next == this->next[].next
nxt[].next == orig(nxt[].next)
nxt[].next->next == this->next[].next->next
nxt[].next->next == orig(nxt[].next->next)
nxt[].next->next->next == this->next[].next->next->next
nxt[].next->next->next == orig(nxt[].next->next->next)
nxt[].next->next->next->next == orig(nxt[].next->next->next->next)
nxt[].next->next->next[0] == orig(nxt[].next->next->next[0])
nxt[].next->next[0] == orig(nxt[].next->next[0])
nxt[].next[0] == orig(nxt[].next[0])
this->data == orig(dat)
this->next == orig(nxt)
Stack::numStacksCreated one of { 1, 2 }
nxt[].next->next->data elements one of { "First line", "Second line", "Uno" }
nxt[].next->next->next->data == [First line]
nxt[].next->next->next->data elements == "First line"
nxt[].next->next->next->next == [null]
nxt[].next->next->next->next elements == null
nxt[].next->next->next[0] contains no nulls and has only one value, of length 1
nxt[].next->next->next[0] elements has only one value
this->next[].next->next->next[0] contains no nulls and has only one value, of length 1
this->next[].next->next->next[0] elements has only one value
===========================================================================
Stack:::OBJECT
this->head[] elements != null
this->myName one of { "My first stack", "My second stack" }
===========================================================================
Stack.Stack(char*):::ENTER
Stack::numStacksCreated one of { 0, 1 }
Stack::publicNumLinksCreated one of { 0, 5 }
name one of { "My first stack", "My second stack" }
===========================================================================
Stack.Stack(char*):::EXIT
Stack::publicNumLinksCreated == orig(Stack::publicNumLinksCreated)
this->myName == orig(name)
Stack::numStacksCreated one of { 1, 2 }
Stack::publicNumLinksCreated one of { 0, 5 }
this->head == null
this->numElements == 0
===========================================================================
Stack.getName():::ENTER
Stack::numStacksCreated one of { 1, 2 }
Stack::publicNumLinksCreated one of { 5, 9 }
this->head[].data elements one of { "Cuatro", "Fifth line" }
this->head[].data one of { [Cuatro], [Fifth line] }
this->head[].next->data elements one of { "Fourth line", "Tres" }
this->head[].next->data one of { [Fourth line], [Tres] }
this->head[].next->next->data elements one of { "Dos", "Third line" }
this->head[].next->next->data one of { [Dos], [Third line] }
this->numElements one of { 4, 5 }
===========================================================================
Stack.getName():::EXIT
Stack::numStacksCreated == orig(Stack::numStacksCreated)
Stack::publicNumLinksCreated == orig(Stack::publicNumLinksCreated)
return == this->myName
return == orig(this->myName)
this->head == orig(this->head)
this->head[] == orig(this->head[])
this->head[].next == orig(this->head[].next)
this->head[].next->next == orig(this->head[].next->next)
this->head[].next->next->next == orig(this->head[].next->next->next)
this->head[].next->next->next[0] == orig(this->head[].next->next->next[0])
this->head[].next->next[0] == orig(this->head[].next->next[0])
this->head[].next[0] == orig(this->head[].next[0])
this->numElements == orig(this->numElements)
this[0] == orig(this[0])
Stack::numStacksCreated one of { 1, 2 }
Stack::publicNumLinksCreated one of { 5, 9 }
return one of { "My first stack", "My second stack" }
this->head[].data elements one of { "Cuatro", "Fifth line" }
this->head[].data one of { [Cuatro], [Fifth line] }
this->head[].next->data elements one of { "Fourth line", "Tres" }
this->head[].next->data one of { [Fourth line], [Tres] }
this->head[].next->next->data elements one of { "Dos", "Third line" }
this->head[].next->next->data one of { [Dos], [Third line] }
this->numElements one of { 4, 5 }
===========================================================================
Stack.getNumStacksCreated():::ENTER
Stack::numStacksCreated one of { 1, 2 }
Stack::publicNumLinksCreated one of { 5, 9 }
===========================================================================
Stack.getNumStacksCreated():::EXIT
Stack::numStacksCreated == return
Stack::numStacksCreated == orig(Stack::numStacksCreated)
Stack::publicNumLinksCreated == orig(Stack::publicNumLinksCreated)
Stack::numStacksCreated one of { 1, 2 }
Stack::publicNumLinksCreated one of { 5, 9 }
===========================================================================
Stack.pop():::ENTER
Stack::numStacksCreated one of { 1, 2 }
Stack::publicNumLinksCreated one of { 5, 9 }
===========================================================================
Stack.pop():::EXIT
Stack::numStacksCreated == orig(Stack::numStacksCreated)
Stack::publicNumLinksCreated == orig(Stack::publicNumLinksCreated)
this->head[].next == orig(this->head[].next->next)
this->head[].next->next == orig(this->head[].next->next->next)
this->myName == orig(this->myName)
this[0] == orig(this[0])
Stack::numStacksCreated one of { 1, 2 }
Stack::publicNumLinksCreated one of { 5, 9 }
this->head[].next->next->data elements one of { "First line", "Second line", "Uno" }
this->head[].next->next->next[0] contains no nulls and has only one value, of length 1
this->head[].next->next->next[0] elements has only one value
this->numElements >= 0
return in orig(this->head[].data)
orig(this->head[].next) elements == this->head
this->head in orig(this->head[].next)
this->head[] - orig(this->head[]) + 80 == 0
this->head[].next[0] - orig(this->head[].next[0]) + 80 == 0
(orig(this->numElements) == 0) ==> (this->numElements == 0)
this->numElements <= orig(this->numElements)
===========================================================================
Stack.privateStuff():::ENTER
Stack::numStacksCreated one of { 1, 2 }
Stack::publicNumLinksCreated one of { 5, 9 }
this->head[].data elements one of { "Cuatro", "Fifth line" }
this->head[].data one of { [Cuatro], [Fifth line] }
this->head[].next->data elements one of { "Fourth line", "Tres" }
this->head[].next->data one of { [Fourth line], [Tres] }
this->head[].next->next->data elements one of { "Dos", "Third line" }
this->head[].next->next->data one of { [Dos], [Third line] }
this->numElements one of { 4, 5 }
===========================================================================
Stack.privateStuff():::EXIT
Stack::numStacksCreated == orig(Stack::numStacksCreated)
Stack::publicNumLinksCreated == orig(Stack::publicNumLinksCreated)
this->head == orig(this->head)
this->head[] == orig(this->head[])
this->head[].next == orig(this->head[].next)
this->head[].next->next == orig(this->head[].next->next)
this->head[].next->next->next == orig(this->head[].next->next->next)
this->head[].next->next->next[0] == orig(this->head[].next->next->next[0])
this->head[].next->next[0] == orig(this->head[].next->next[0])
this->head[].next[0] == orig(this->head[].next[0])
this->myName == orig(this->myName)
this->numElements == orig(this->numElements)
this[0] == orig(this[0])
Stack::numStacksCreated one of { 1, 2 }
Stack::publicNumLinksCreated one of { 5, 9 }
return == 42
this->head[].data elements one of { "Cuatro", "Fifth line" }
this->head[].data one of { [Cuatro], [Fifth line] }
this->head[].next->data elements one of { "Fourth line", "Tres" }
this->head[].next->data one of { [Fourth line], [Tres] }
this->head[].next->next->data elements one of { "Dos", "Third line" }
this->head[].next->next->data one of { [Dos], [Third line] }
this->numElements one of { 4, 5 }
===========================================================================
Stack.push(char*):::ENTER
Stack::numStacksCreated one of { 1, 2 }
this->head[].next->next->data elements one of { "First line", "Second line", "Uno" }
this->head[].next->next->next[0] contains no nulls and has only one value, of length 1
this->head[].next->next->next[0] elements has only one value
===========================================================================
Stack.push(char*):::EXIT
Stack::numStacksCreated == orig(Stack::numStacksCreated)
this->head[].next->next == orig(this->head[].next)
this->head[].next->next->next == orig(this->head[].next->next)
this->myName == orig(this->myName)
this[0] == orig(this[0])
Stack::numStacksCreated one of { 1, 2 }
Stack::publicNumLinksCreated - orig(Stack::publicNumLinksCreated) - 1 == 0
this->head[] - orig(this->head[]) - 80 == 0
orig(dat) in this->head[].data
orig(this->head) in this->head[].next
this->head[].next elements == orig(this->head)
this->head[].next[0] - orig(this->head[].next[0]) - 80 == 0
this->numElements - orig(this->numElements) - 1 == 0
===========================================================================
Stack.~Stack():::ENTER
Stack::numStacksCreated == 2
Stack::publicNumLinksCreated == 9
this->head == null
this->numElements == 0
===========================================================================
Stack.~Stack():::EXIT
Stack::numStacksCreated == orig(Stack::numStacksCreated)
Stack::publicNumLinksCreated == orig(Stack::publicNumLinksCreated)
this->head == orig(this->head)
this->numElements == orig(this->numElements)
this[0] == orig(this[0])
Stack::numStacksCreated == 2
Stack::publicNumLinksCreated == 9
this->head == null
this->numElements == 0
