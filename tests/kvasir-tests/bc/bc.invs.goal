===========================================================================
..addbyte():::ENTER
byte >= 0
===========================================================================
..addbyte():::EXIT
===========================================================================
..assign():::ENTER
c_code one of { 0, 1 }
===========================================================================
..assign():::EXIT
===========================================================================
..auto_var():::ENTER
===========================================================================
..auto_var():::EXIT
===========================================================================
..bc_compare():::ENTER
n1->n_len == n2->n_len
n1->n_ptr == n1->n_value
n1->n_scale == n2->n_scale
n1->n_sign == n2->n_sign
n1->n_len one of { 1, 2 }
n1->n_ptr == "\002"
n1->n_refs one of { 1, 4, 5 }
n1->n_scale == 0
n1->n_sign == 0
n2->n_ptr == ""
n2->n_refs one of { 1, 5, 18 }
===========================================================================
..bc_compare():::EXIT
n1->n_len == n2->n_len
n1->n_len == orig(n1->n_len)
n1->n_len == orig(n2->n_len)
n1->n_ptr == n1->n_value
n1->n_ptr == orig(n1->n_ptr)
n1->n_ptr == orig(n1->n_value)
n1->n_refs == orig(n1->n_refs)
n1->n_scale == n2->n_scale
n1->n_scale == orig(n1->n_scale)
n1->n_scale == orig(n2->n_scale)
n1->n_sign == n2->n_sign
n1->n_sign == orig(n1->n_sign)
n1->n_sign == orig(n2->n_sign)
n1[0] == orig(n1[0])
n2->n_refs == orig(n2->n_refs)
n2[0] == orig(n2[0])
n1->n_len one of { 1, 2 }
n1->n_ptr == "\002"
n1->n_refs one of { 1, 4, 5 }
n1->n_scale == 0
n1->n_sign == 0
n2->n_ptr == ""
n2->n_refs one of { 1, 5, 18 }
return one of { -1, 0, 1 }
===========================================================================
..bc_copy_num():::ENTER
num->n_ptr == num->n_value
num != null
num->n_len == 1
num->n_next has only one value
num->n_next[] contains no nulls and has only one value, of length 1
num->n_next[] elements has only one value
num->n_next[].n_len == [1]
num->n_next[].n_len elements == 1
num->n_next[].n_next == [null]
num->n_next[].n_next elements == null
num->n_next[].n_refs == [0]
num->n_next[].n_refs elements == 0
num->n_next[i].n_refs == i
num->n_next[].n_scale == [20]
num->n_next[].n_scale elements == 20
num->n_next[].n_sign == [0]
num->n_next[].n_sign elements == 0
num->n_next[i].n_sign == i
num->n_ptr == ""
num->n_refs >= 1
num->n_scale one of { 0, 20 }
num->n_sign == 0
num->n_value == ""
num[0] != null
num->n_len in num->n_next[].n_len
num->n_next[].n_len elements == num->n_len
num->n_len != num->n_scale
num->n_next[].n_len elements == num->n_refs
num->n_refs in num->n_next[].n_len
num->n_next[].n_scale elements == num->n_scale
num->n_scale in num->n_next[].n_scale
num->n_next[].n_sign elements == num->n_sign
num->n_sign in num->n_next[].n_sign
===========================================================================
..bc_copy_num():::EXIT
num->n_len == return->n_len
num->n_len == orig(num->n_len)
num->n_next == return->n_next
num->n_next == orig(num->n_next)
num->n_next[] == orig(num->n_next[])
num->n_next[].n_len == return->n_next[].n_len
num->n_next[].n_len == orig(num->n_next[].n_len)
num->n_next[].n_next == return->n_next[].n_next
num->n_next[].n_next == orig(num->n_next[].n_next)
num->n_next[].n_refs == return->n_next[].n_refs
num->n_next[].n_refs == orig(num->n_next[].n_refs)
num->n_next[].n_scale == return->n_next[].n_scale
num->n_next[].n_scale == orig(num->n_next[].n_scale)
num->n_next[].n_sign == orig(num->n_next[].n_sign)
num->n_ptr == num->n_value
num->n_ptr == return->n_ptr
num->n_ptr == orig(num->n_ptr)
num->n_refs == return->n_refs
num->n_scale == return->n_scale
num->n_scale == orig(num->n_scale)
num->n_sign == return->n_sign
num->n_sign == orig(num->n_sign)
num->n_value == return->n_value
num->n_value == orig(num->n_value)
num[0] == return[0]
num[0] == orig(num[0])
return == orig(num)
num->n_len == 1
num->n_next has only one value
num->n_next[] contains no nulls and has only one value, of length 1
num->n_next[] elements has only one value
num->n_next[].n_len == [1]
num->n_next[].n_len elements == 1
num->n_next[].n_next == [null]
num->n_next[].n_next elements == null
num->n_next[].n_refs == [0]
num->n_next[].n_refs elements == 0
num->n_next[i].n_refs == i
num->n_next[].n_scale == [20]
num->n_next[].n_scale elements == 20
num->n_next[].n_sign == [0]
num->n_next[].n_sign elements == 0
num->n_next[i].n_sign == i
num->n_ptr == ""
num->n_refs >= 2
num->n_scale one of { 0, 20 }
num->n_sign == 0
num->n_value == ""
num[0] != null
return != null
return->n_next[] contains no nulls and has only one value, of length 1
return->n_next[] elements has only one value
return->n_next[].n_sign == [0]
return->n_next[].n_sign elements == 0
return->n_next[i].n_sign == i
num->n_len in num->n_next[].n_len
num->n_next[].n_len elements == num->n_len
num->n_len != num->n_scale
num->n_next[].n_len elements == orig(num->n_refs)
orig(num->n_refs) in num->n_next[].n_len
num->n_next[].n_scale elements == num->n_scale
num->n_scale in num->n_next[].n_scale
num->n_next[].n_sign elements == num->n_sign
num->n_sign in num->n_next[].n_sign
num->n_refs - orig(num->n_refs) - 1 == 0
num->n_sign in return->n_next[].n_sign
return->n_next[].n_sign elements == num->n_sign
===========================================================================
..bc_divide():::ENTER
n1->n_len == n2->n_len
n1->n_len == quot[0]->n_len
n1->n_ptr == n1->n_value
n1->n_ptr == quot[0]->n_ptr
n1->n_ptr == quot[0]->n_value
n1->n_sign == n2->n_sign
n1->n_sign == quot[0]->n_sign
n2->n_scale == quot[0]->n_scale
n1 has only one value
n1->n_len == 1
n1->n_next has only one value
n1->n_next[] contains no nulls and has only one value, of length 1
n1->n_next[].n_len == [2]
n1->n_next[].n_next == [null]
n1->n_next[].n_refs == [0]
n1->n_next[].n_scale == [0]
n1->n_next[].n_sign == [0]
n1->n_ptr == ""
n1->n_refs == 1
n1->n_scale == 25
n1->n_sign == 0
n1[0] has only one value
n2 has only one value
n2->n_refs == 4
n2->n_scale == 0
n2[0] has only one value
quot has only one value
quot[0] has only one value
quot[0]->n_refs == 17
quot[0][0] has only one value
scale == 20
===========================================================================
..bc_divide():::EXIT
n1->n_len == n2->n_len
n1->n_len == quot[0]->n_len
n1->n_len == orig(n1->n_len)
n1->n_len == orig(n2->n_len)
n1->n_len == orig(quot[0]->n_len)
n1->n_next == orig(n1->n_next)
n1->n_next[] == orig(n1->n_next[])
n1->n_next[].n_next == orig(n1->n_next[].n_next)
n1->n_next[].n_refs == orig(n1->n_next[].n_refs)
n1->n_next[].n_sign == orig(n1->n_next[].n_sign)
n1->n_ptr == n1->n_value
n1->n_ptr == quot[0]->n_ptr
n1->n_ptr == quot[0]->n_value
n1->n_ptr == orig(n1->n_ptr)
n1->n_ptr == orig(n1->n_value)
n1->n_ptr == orig(quot[0]->n_ptr)
n1->n_ptr == orig(quot[0]->n_value)
n1->n_refs == orig(n1->n_refs)
n1->n_scale == orig(n1->n_scale)
n1->n_sign == n2->n_sign
n1->n_sign == quot[0]->n_sign
n1->n_sign == orig(n1->n_sign)
n1->n_sign == orig(n2->n_sign)
n1->n_sign == orig(quot[0]->n_sign)
n1[0] == orig(n1[0])
n2->n_refs == orig(n2->n_refs)
n2->n_scale == orig(n2->n_scale)
n2->n_scale == orig(quot[0]->n_scale)
n2[0] == orig(n2[0])
quot[0]->n_scale == orig(scale)
n1->n_len == 1
n1->n_next has only one value
n1->n_next[] contains no nulls and has only one value, of length 1
n1->n_next[].n_len == [1]
n1->n_next[].n_next == [null]
n1->n_next[].n_refs == [0]
n1->n_next[].n_scale == [20]
n1->n_next[].n_sign == [0]
n1->n_ptr == ""
n1->n_refs == 1
n1->n_scale == 25
n1->n_sign == 0
n1[0] has only one value
n2->n_refs == 4
n2->n_scale == 0
n2[0] has only one value
quot[0] has only one value
quot[0]->n_refs == 1
quot[0][0] has only one value
return == 0
===========================================================================
..bc_free_num():::ENTER
num[0]->n_ptr == num[0]->n_value
num != null
num[0] != null
num[0]->n_len one of { 1, 2 }
num[0]->n_next[] contains no nulls and has only one value, of length 1
num[0]->n_next[] elements has only one value
num[0]->n_next[].n_len == [1]
num[0]->n_next[].n_len elements == 1
num[0]->n_next[].n_next == [null]
num[0]->n_next[].n_next elements == null
num[0]->n_next[].n_refs == [0]
num[0]->n_next[].n_refs elements == 0
num[0]->n_next[i].n_refs == i
num[0]->n_next[].n_scale == [20]
num[0]->n_next[].n_scale elements == 20
num[0]->n_next[].n_sign == [0]
num[0]->n_next[].n_sign elements == 0
num[0]->n_next[i].n_sign == i
num[0]->n_ptr one of { "", "\002" }
num[0]->n_refs >= 1
num[0]->n_scale one of { 0, 20, 25 }
num[0]->n_sign == 0
num[0]->n_value one of { "", "\002" }
num[0][0] != null
num[0]->n_len in num[0]->n_next[].n_len
num[0]->n_next[].n_len elements == num[0]->n_len
num[0]->n_len != num[0]->n_scale
num[0]->n_scale % num[0]->n_len == 0
num[0]->n_next[].n_sign elements == num[0]->n_sign
num[0]->n_sign in num[0]->n_next[].n_sign
===========================================================================
..bc_free_num():::EXIT
num[0] == null
num[0] in orig(num[0]->n_next[].n_next)
orig(num[0]->n_next[].n_next) elements == num[0]
===========================================================================
..bc_init_num():::ENTER
num[0]->n_ptr == num[0]->n_value
num != null
num[0]->n_len == 1
num[0]->n_next has only one value
num[0]->n_next[] contains no nulls and has only one value, of length 1
num[0]->n_next[] elements has only one value
num[0]->n_next[].n_len == [1]
num[0]->n_next[].n_len elements == 1
num[0]->n_next[].n_next == [null]
num[0]->n_next[].n_next elements == null
num[0]->n_next[].n_refs == [0]
num[0]->n_next[].n_refs elements == 0
num[0]->n_next[i].n_refs == i
num[0]->n_next[].n_scale == [20]
num[0]->n_next[].n_scale elements == 20
num[0]->n_next[].n_sign == [0]
num[0]->n_next[].n_sign elements == 0
num[0]->n_next[i].n_sign == i
num[0]->n_ptr == ""
num[0]->n_refs one of { 1, 2 }
num[0]->n_scale one of { 0, 20 }
num[0]->n_sign == 0
num[0]->n_value == ""
num[0]->n_len in num[0]->n_next[].n_len
num[0]->n_next[].n_len elements == num[0]->n_len
num[0]->n_next[].n_len elements == num[0]->n_refs
num[0]->n_refs in num[0]->n_next[].n_len
num[0]->n_next[].n_scale elements == num[0]->n_scale
num[0]->n_scale in num[0]->n_next[].n_scale
num[0]->n_next[].n_sign elements == num[0]->n_sign
num[0]->n_sign in num[0]->n_next[].n_sign
===========================================================================
..bc_init_num():::EXIT
num[0]->n_len == orig(num[0]->n_len)
num[0]->n_ptr == num[0]->n_value
num[0]->n_ptr == orig(num[0]->n_ptr)
num[0]->n_ptr == orig(num[0]->n_value)
num[0]->n_sign == orig(num[0]->n_sign)
num[0] has only one value
num[0]->n_len == 1
num[0]->n_ptr == ""
num[0]->n_scale == 0
num[0]->n_sign == 0
num[0][0] has only one value
num[0]->n_len in orig(num[0]->n_next[].n_len)
orig(num[0]->n_next[].n_len) elements == num[0]->n_len
num[0]->n_scale in orig(num[0]->n_next[].n_refs)
orig(num[0]->n_next[].n_refs) elements == num[0]->n_scale
num[0]->n_sign in orig(num[0]->n_next[].n_sign)
orig(num[0]->n_next[].n_sign) elements == num[0]->n_sign
===========================================================================
..bc_int2num():::ENTER
num[0]->n_ptr == num[0]->n_value
num has only one value
num[0] has only one value
num[0]->n_len == 1
num[0]->n_ptr == ""
num[0]->n_refs == 18
num[0]->n_scale == 0
num[0]->n_sign == 0
num[0][0] has only one value
val == 20
===========================================================================
..bc_int2num():::EXIT
num[0]->n_ptr == num[0]->n_value
num[0]->n_scale == orig(num[0]->n_scale)
num[0]->n_sign == orig(num[0]->n_sign)
num[0] has only one value
num[0]->n_len == 2
num[0]->n_ptr == "\002"
num[0]->n_refs == 1
num[0]->n_scale == 0
num[0]->n_sign == 0
num[0][0] has only one value
===========================================================================
..bc_is_neg():::ENTER
num->n_ptr == num->n_value
num has only one value
num->n_len == 2
num->n_ptr == "\002"
num->n_refs == 1
num->n_scale == 0
num->n_sign == 0
num[0] has only one value
===========================================================================
..bc_is_neg():::EXIT
num->n_len == orig(num->n_len)
num->n_ptr == num->n_value
num->n_ptr == orig(num->n_ptr)
num->n_ptr == orig(num->n_value)
num->n_refs == orig(num->n_refs)
num->n_scale == orig(num->n_scale)
num->n_sign == orig(num->n_sign)
num[0] == orig(num[0])
num->n_len == 2
num->n_ptr == "\002"
num->n_refs == 1
num->n_scale == 0
num->n_sign == 0
num[0] has only one value
return == 0
===========================================================================
..bc_is_zero():::ENTER
num->n_ptr == num->n_value
num->n_len one of { 1, 2 }
num->n_next has only one value
num->n_next[] contains no nulls and has only one value, of length 1
num->n_next[] elements has only one value
num->n_next[].n_len == [1]
num->n_next[].n_len elements == 1
num->n_next[].n_next == [null]
num->n_next[].n_next elements == null
num->n_next[].n_refs == [0]
num->n_next[].n_refs elements == 0
num->n_next[i].n_refs == i
num->n_next[].n_scale == [20]
num->n_next[].n_scale elements == 20
num->n_next[].n_sign == [0]
num->n_next[].n_sign elements == 0
num->n_next[i].n_sign == i
num->n_ptr one of { "", "\002" }
num->n_refs one of { 1, 4, 18 }
num->n_scale one of { 0, 20 }
num->n_sign == 0
num->n_value one of { "", "\002" }
num->n_len in num->n_next[].n_len
num->n_next[].n_len elements == num->n_len
num->n_len != num->n_scale
num->n_next[].n_len elements == num->n_refs
num->n_refs in num->n_next[].n_len
num->n_next[].n_scale elements == num->n_scale
num->n_scale in num->n_next[].n_scale
num->n_next[].n_sign elements == num->n_sign
num->n_sign in num->n_next[].n_sign
===========================================================================
..bc_is_zero():::EXIT
num->n_len == orig(num->n_len)
num->n_next == orig(num->n_next)
num->n_next[] == orig(num->n_next[])
num->n_next[].n_len == orig(num->n_next[].n_len)
num->n_next[].n_next == orig(num->n_next[].n_next)
num->n_next[].n_refs == orig(num->n_next[].n_refs)
num->n_next[].n_scale == orig(num->n_next[].n_scale)
num->n_next[].n_sign == orig(num->n_next[].n_sign)
num->n_ptr == num->n_value
num->n_ptr == orig(num->n_ptr)
num->n_refs == orig(num->n_refs)
num->n_scale == orig(num->n_scale)
num->n_sign == orig(num->n_sign)
num->n_value == orig(num->n_value)
num[0] == orig(num[0])
num->n_len one of { 1, 2 }
num->n_next has only one value
num->n_next[] contains no nulls and has only one value, of length 1
num->n_next[] elements has only one value
num->n_next[].n_len == [1]
num->n_next[].n_len elements == 1
num->n_next[].n_next == [null]
num->n_next[].n_next elements == null
num->n_next[].n_refs == [0]
num->n_next[].n_refs elements == 0
num->n_next[i].n_refs == i
num->n_next[].n_scale == [20]
num->n_next[].n_scale elements == 20
num->n_next[].n_sign == [0]
num->n_next[].n_sign elements == 0
num->n_next[i].n_sign == i
num->n_ptr one of { "", "\002" }
num->n_refs one of { 1, 4, 18 }
num->n_scale one of { 0, 20 }
num->n_sign == 0
num->n_value one of { "", "\002" }
return one of { 0, 1 }
num->n_len in num->n_next[].n_len
num->n_next[].n_len elements == num->n_len
num->n_len != num->n_scale
num->n_next[].n_len elements == num->n_refs
num->n_refs in num->n_next[].n_len
num->n_next[].n_refs elements == return
return in num->n_next[].n_refs
num->n_next[].n_scale elements == num->n_scale
num->n_scale in num->n_next[].n_scale
num->n_next[].n_sign elements == num->n_sign
num->n_sign in num->n_next[].n_sign
===========================================================================
..bc_malloc():::ENTER
size >= 2
===========================================================================
..bc_malloc():::EXIT
===========================================================================
..bc_multiply():::ENTER
n1->n_len == n2->n_len
n1->n_len == prod[0]->n_len
n1->n_scale == prod[0]->n_scale
n2->n_ptr == n2->n_value
n2->n_ptr == prod[0]->n_ptr
n2->n_ptr == prod[0]->n_value
n2->n_scale == scale
n1 has only one value
n1->n_len == 1
n1->n_next == null
n1->n_refs == 1
n1->n_scale == 0
n1->n_sign == 0
n1[0] has only one value
n2 has only one value
n2->n_ptr == ""
n2->n_refs == 1
n2->n_sign == 0
n2[0] has only one value
prod has only one value
prod[0] has only one value
prod[0]->n_refs == 9
prod[0]->n_sign == 0
prod[0][0] has only one value
scale == 20
===========================================================================
..bc_multiply():::EXIT
n1->n_len == n2->n_len
n1->n_len == prod[0]->n_len
n1->n_len == orig(n1->n_len)
n1->n_len == orig(n2->n_len)
n1->n_len == orig(prod[0]->n_len)
n1->n_next == orig(n1->n_next)
n1->n_refs == orig(n1->n_refs)
n1->n_scale == orig(n1->n_scale)
n1->n_scale == orig(prod[0]->n_scale)
n1->n_sign == orig(n1->n_sign)
n1[0] == orig(n1[0])
n2->n_ptr == n2->n_value
n2->n_ptr == prod[0]->n_ptr
n2->n_ptr == orig(n2->n_ptr)
n2->n_ptr == orig(n2->n_value)
n2->n_ptr == orig(prod[0]->n_ptr)
n2->n_ptr == orig(prod[0]->n_value)
n2->n_refs == orig(n2->n_refs)
n2->n_scale == prod[0]->n_scale
n2->n_scale == orig(n2->n_scale)
n2->n_scale == orig(scale)
n2->n_sign == orig(n2->n_sign)
n2[0] == orig(n2[0])
prod[0]->n_sign == orig(prod[0]->n_sign)
n1->n_len == 1
n1->n_next == null
n1->n_refs == 1
n1->n_scale == 0
n1->n_sign == 0
n1[0] has only one value
n2->n_ptr == ""
n2->n_refs == 1
n2->n_scale == 20
n2->n_sign == 0
n2[0] has only one value
prod[0] has only one value
prod[0]->n_next has only one value
prod[0]->n_next[] contains no nulls and has only one value, of length 1
prod[0]->n_next[].n_len == [1]
prod[0]->n_next[].n_next == [null]
prod[0]->n_next[].n_refs == [0]
prod[0]->n_next[].n_scale == [20]
prod[0]->n_next[].n_sign == [0]
prod[0]->n_refs == 1
prod[0]->n_sign == 0
prod[0][0] has only one value
===========================================================================
..bc_new_num():::ENTER
length one of { 1, 2, 23 }
scale one of { 0, 20, 25 }
length != scale
scale % length == 0
===========================================================================
..bc_new_num():::EXIT
return->n_len == orig(length)
return->n_ptr == return->n_value
return->n_scale == orig(scale)
return->n_len one of { 1, 2, 23 }
return->n_next[] contains no nulls and has only one value, of length 1
return->n_next[] elements has only one value
return->n_next[].n_len elements one of { 1, 2 }
return->n_next[].n_len one of { [1], [2] }
return->n_next[].n_next == [null]
return->n_next[].n_next elements == null
return->n_next[].n_refs == [0]
return->n_next[].n_refs elements == 0
return->n_next[i].n_refs == i
return->n_next[].n_scale elements one of { 0, 20 }
return->n_next[].n_scale one of { [0], [20] }
return->n_next[].n_sign == [0]
return->n_next[].n_sign elements == 0
return->n_next[i].n_sign == i
return->n_ptr == ""
return->n_refs == 1
return->n_scale one of { 0, 20, 25 }
return->n_sign == 0
return->n_len != return->n_scale
return->n_scale % return->n_len == 0
return->n_next[].n_sign elements == return->n_sign
return->n_sign in return->n_next[].n_sign
===========================================================================
..bc_num2long():::ENTER
num->n_ptr == num->n_value
num has only one value
num->n_len == 2
num->n_ptr == "\002"
num->n_refs == 1
num->n_scale == 0
num->n_sign == 0
num[0] has only one value
===========================================================================
..bc_num2long():::EXIT
num->n_len == orig(num->n_len)
num->n_ptr == num->n_value
num->n_ptr == orig(num->n_ptr)
num->n_ptr == orig(num->n_value)
num->n_refs == orig(num->n_refs)
num->n_scale == orig(num->n_scale)
num->n_sign == orig(num->n_sign)
num[0] == orig(num[0])
num->n_len == 2
num->n_ptr == "\002"
num->n_refs == 1
num->n_scale == 0
num->n_sign == 0
num[0] has only one value
return == 20
===========================================================================
..bc_out_num():::ENTER
leading_zero == 0
num has only one value
num->n_len == 1
num->n_next has only one value
num->n_next[] contains no nulls and has only one value, of length 1
num->n_next[].n_len == [1]
num->n_next[].n_next == [null]
num->n_next[].n_refs == [0]
num->n_next[].n_scale == [20]
num->n_next[].n_sign == [0]
num->n_ptr == ""
num->n_refs == 1
num->n_scale == 20
num->n_sign == 0
num[0] has only one value
o_base == 10
out_char has only one value
===========================================================================
..bc_out_num():::EXIT
num->n_len == orig(num->n_len)
num->n_next == orig(num->n_next)
num->n_next[] == orig(num->n_next[])
num->n_next[].n_len == orig(num->n_next[].n_len)
num->n_next[].n_next == orig(num->n_next[].n_next)
num->n_next[].n_refs == orig(num->n_next[].n_refs)
num->n_next[].n_scale == orig(num->n_next[].n_scale)
num->n_next[].n_sign == orig(num->n_next[].n_sign)
num->n_ptr == orig(num->n_ptr)
num->n_refs == orig(num->n_refs)
num->n_scale == orig(num->n_scale)
num->n_sign == orig(num->n_sign)
num[0] == orig(num[0])
num->n_len == 1
num->n_next has only one value
num->n_next[] contains no nulls and has only one value, of length 1
num->n_next[].n_len == [1]
num->n_next[].n_next == [null]
num->n_next[].n_refs == [0]
num->n_next[].n_scale == [20]
num->n_next[].n_sign == [0]
num->n_ptr == ""
num->n_refs == 1
num->n_scale == 20
num->n_sign == 0
num[0] has only one value
===========================================================================
..byte():::ENTER
pc != null
pc->pc_addr >= 0
pc->pc_func one of { 0, 4 }
pc[0] != null
===========================================================================
..byte():::EXIT
pc->pc_func == orig(pc->pc_func)
pc[0] == orig(pc[0])
pc->pc_addr >= 1
pc->pc_func one of { 0, 4 }
pc[0] != null
return >= 0
pc->pc_addr - orig(pc->pc_addr) - 1 == 0
===========================================================================
..call_str():::ENTER
args has only one value
args->arg_is_var == 0
args->av_name == 0
args->next == null
args[0] has only one value
===========================================================================
..call_str():::EXIT
args->arg_is_var == orig(args->arg_is_var)
args->av_name == orig(args->av_name)
args->next == orig(args->next)
args[0] == orig(args[0])
args->arg_is_var == 0
args->av_name == 0
args->next == null
args[0] has only one value
return == "0"
===========================================================================
..check_stack():::ENTER
depth == 2
===========================================================================
..check_stack():::EXIT
return == 1
===========================================================================
..clear_func():::ENTER
func >= 0
===========================================================================
..clear_func():::EXIT
===========================================================================
..def_label():::ENTER
lab >= 1
===========================================================================
..def_label():::EXIT
===========================================================================
..find_id():::ENTER
tree->a_name == 0
tree->balance one of { 0, 1 }
tree->f_name one of { 1, 2, 4 }
tree->id one of { "a", "e", "l" }
tree->left[] contains no nulls and has only one value, of length 1
tree->left[] elements has only one value
tree->left[].a_name == [0]
tree->left[].a_name elements == 0
tree->left[i].a_name == i
tree->left[].balance elements one of { 0, 1 }
tree->left[].balance one of { [0], [1] }
tree->left[].f_name == [4]
tree->left[].f_name elements == 4
tree->left[].id == [a]
tree->left[].id elements == "a"
tree->left[].left == [null]
tree->left[].left elements == null
tree->left[].right[0] contains no nulls and has only one value, of length 1
tree->left[].right[0] elements has only one value
tree->left[].v_name == [0]
tree->left[].v_name elements == 0
tree->left[i].v_name == i
tree->v_name == 0
tree->a_name in tree->left[].a_name
tree->left[].a_name elements == tree->a_name
tree->a_name in tree->left[].v_name
tree->left[].v_name elements == tree->a_name
tree->balance in tree->left[].a_name
tree->left[].a_name elements == tree->balance
tree->balance in tree->left[].v_name
tree->left[].v_name elements == tree->balance
tree->left[].a_name elements == tree->v_name
tree->v_name in tree->left[].a_name
tree->left[].v_name elements == tree->v_name
tree->v_name in tree->left[].v_name
===========================================================================
..find_id():::EXIT
return->a_name == tree->a_name
return->id == orig(id)
return->v_name == tree->v_name
tree->a_name == orig(tree->a_name)
tree->balance == orig(tree->balance)
tree->f_name == orig(tree->f_name)
tree->id == orig(tree->id)
tree->left == orig(tree->left)
tree->left[] == orig(tree->left[])
tree->left[].a_name == orig(tree->left[].a_name)
tree->left[].balance == orig(tree->left[].balance)
tree->left[].f_name == orig(tree->left[].f_name)
tree->left[].left == orig(tree->left[].left)
tree->left[].right == orig(tree->left[].right)
tree->left[].right[0] == orig(tree->left[].right[0])
tree->left[].v_name == orig(tree->left[].v_name)
tree->right == orig(tree->right)
tree->right[] == orig(tree->right[])
tree->v_name == orig(tree->v_name)
tree[0] == orig(tree[0])
return->a_name == 0
return->balance == 1
return->f_name == 4
return->id == "a"
return->left == null
return->right has only one value
return->right[] contains no nulls and has only one value, of length 1
return->right[] elements has only one value
return->v_name == 0
return[0] has only one value
tree->a_name == 0
tree->balance one of { 0, 1 }
tree->f_name one of { 1, 2, 4 }
tree->id one of { "a", "e", "l" }
tree->left[] contains no nulls and has only one value, of length 1
tree->left[] elements has only one value
tree->left[].a_name == [0]
tree->left[].a_name elements == 0
tree->left[i].a_name == i
tree->left[].balance elements one of { 0, 1 }
tree->left[].balance one of { [0], [1] }
tree->left[].f_name == [4]
tree->left[].f_name elements == 4
tree->left[].id == [a]
tree->left[].id elements == "a"
tree->left[].left == [null]
tree->left[].left elements == null
tree->left[].right[0] contains no nulls and has only one value, of length 1
tree->left[].right[0] elements has only one value
tree->left[].v_name == [0]
tree->left[].v_name elements == 0
tree->left[i].v_name == i
tree->v_name == 0
return->a_name in tree->left[].a_name
tree->left[].a_name elements == return->a_name
return->a_name in tree->left[].v_name
tree->left[].v_name elements == return->a_name
return->balance in tree->left[].balance
tree->left[].balance elements == return->balance
return->f_name in tree->left[].f_name
tree->left[].f_name elements == return->f_name
return->id in tree->left[].id
return->left in tree->left[].left
tree->left[].left elements == return->left
return->right in tree->left[].right
tree->left[].right elements == return->right
return->v_name in tree->left[].a_name
tree->left[].a_name elements == return->v_name
return->v_name in tree->left[].v_name
tree->left[].v_name elements == return->v_name
return[0] in tree->left[]
tree->left[] elements == return[0]
tree->a_name in tree->left[].a_name
tree->left[].a_name elements == tree->a_name
tree->a_name in tree->left[].v_name
tree->left[].v_name elements == tree->a_name
tree->balance in tree->left[].a_name
tree->left[].a_name elements == tree->balance
tree->balance in tree->left[].v_name
tree->left[].v_name elements == tree->balance
tree->left[].a_name elements == tree->v_name
tree->v_name in tree->left[].a_name
tree->left[].v_name elements == tree->v_name
tree->v_name in tree->left[].v_name
===========================================================================
..fpop():::EXIT
return one of { 0, 8, 10 }
===========================================================================
..fpush():::ENTER
val one of { 0, 8, 10 }
===========================================================================
..fpush():::EXIT
===========================================================================
..free_args():::ENTER
args has only one value
args->arg_is_var == 0
args->av_name == 0
args->next == null
args[0] has only one value
===========================================================================
..free_args():::EXIT
===========================================================================
..generate():::ENTER
===========================================================================
..generate():::EXIT
===========================================================================
..get_var():::ENTER
var_name one of { 4, 11 }
===========================================================================
..get_var():::EXIT
return->v_next == null
return->v_value has only one value
return->v_value[] contains no nulls and has only one value, of length 1
return->v_value[].n_len == [1]
return->v_value[].n_ptr == []
return->v_value[].n_refs elements one of { 10, 18 }
return->v_value[].n_refs one of { [10], [18] }
return->v_value[].n_scale == [0]
return->v_value[].n_sign == [0]
===========================================================================
..insert_id_rec():::ENTER
new_id->a_name == root[0]->a_name
new_id->v_name == root[0]->v_name
new_id != null
new_id->a_name == 0
new_id->f_name == 0
new_id->v_name == 0
new_id[0] != null
root != null
root[0]->a_name == 0
root[0]->balance one of { 0, 1 }
root[0]->f_name one of { 1, 2, 4 }
root[0]->id one of { "a", "e", "l" }
root[0]->left[] contains no nulls and has only one value, of length 1
root[0]->left[] elements has only one value
root[0]->left[].a_name == [0]
root[0]->left[].a_name elements == 0
root[0]->left[i].a_name == i
root[0]->left[].balance elements one of { 0, 1 }
root[0]->left[].balance one of { [0], [1] }
root[0]->left[].f_name == [4]
root[0]->left[].f_name elements == 4
root[0]->left[].id == [a]
root[0]->left[].id elements == "a"
root[0]->left[].left == [null]
root[0]->left[].left elements == null
root[0]->left[].right[0] contains no nulls and has only one value, of length 1
root[0]->left[].right[0] elements has only one value
root[0]->left[].v_name == [0]
root[0]->left[].v_name elements == 0
root[0]->left[i].v_name == i
root[0]->v_name == 0
new_id->a_name in root[0]->left[].a_name
root[0]->left[].a_name elements == new_id->a_name
new_id->a_name in root[0]->left[].v_name
root[0]->left[].v_name elements == new_id->a_name
new_id->f_name < root[0]->f_name
new_id->f_name in root[0]->left[].a_name
root[0]->left[].a_name elements == new_id->f_name
new_id->f_name in root[0]->left[].v_name
root[0]->left[].v_name elements == new_id->f_name
new_id->id != root[0]->id
new_id->v_name in root[0]->left[].a_name
root[0]->left[].a_name elements == new_id->v_name
new_id->v_name in root[0]->left[].v_name
root[0]->left[].v_name elements == new_id->v_name
root[0]->a_name in root[0]->left[].a_name
root[0]->left[].a_name elements == root[0]->a_name
root[0]->a_name in root[0]->left[].v_name
root[0]->left[].v_name elements == root[0]->a_name
root[0]->balance in root[0]->left[].a_name
root[0]->left[].a_name elements == root[0]->balance
root[0]->balance in root[0]->left[].v_name
root[0]->left[].v_name elements == root[0]->balance
root[0]->left[].a_name elements == root[0]->v_name
root[0]->v_name in root[0]->left[].a_name
root[0]->left[].v_name elements == root[0]->v_name
root[0]->v_name in root[0]->left[].v_name
===========================================================================
..insert_id_rec():::EXIT
new_id->a_name == root[0]->a_name
new_id->a_name == orig(new_id->a_name)
new_id->a_name == orig(root[0]->a_name)
new_id->f_name == orig(new_id->f_name)
new_id->id == orig(new_id->id)
new_id->left == new_id->right
new_id->v_name == root[0]->v_name
new_id->v_name == orig(new_id->v_name)
new_id->v_name == orig(root[0]->v_name)
new_id[0] == orig(new_id[0])
root[0]->f_name == orig(root[0]->f_name)
root[0]->id == orig(root[0]->id)
root[0]->left[].id == orig(root[0]->left[].id)
root[0][0] == orig(root[0][0])
new_id->a_name == 0
new_id->balance == 0
new_id->f_name == 0
new_id->left == null
new_id->v_name == 0
new_id[0] != null
return one of { 0, 1 }
root[0] != null
root[0]->balance one of { 0, 1 }
root[0]->f_name >= 0
root[0]->left[].a_name == [0]
root[0]->left[].a_name elements == 0
root[0]->left[i].a_name == i
root[0]->left[].balance elements one of { 0, 1 }
root[0]->left[].balance one of { [0], [1] }
root[0]->left[].f_name elements one of { 0, 4 }
root[0]->left[].f_name one of { [0], [4] }
root[0]->left[].id elements one of { "a", "j" }
root[0]->left[].id one of { [a], [j] }
root[0]->left[].left == [null]
root[0]->left[].left elements == null
root[0]->left[].right[0] contains no nulls and has only one value, of length 1
root[0]->left[].right[0] elements has only one value
root[0]->left[].v_name == [0]
root[0]->left[].v_name elements == 0
root[0]->left[i].v_name == i
root[0][0] != null
new_id->a_name in root[0]->left[].a_name
new_id->a_name in root[0]->left[].v_name
new_id->a_name in orig(root[0]->left[].a_name)
new_id->a_name in orig(root[0]->left[].v_name)
new_id->balance <= root[0]->balance
new_id->balance in root[0]->left[].a_name
new_id->balance in root[0]->left[].v_name
new_id->balance <= orig(root[0]->balance)
new_id->balance in orig(root[0]->left[].a_name)
new_id->balance in orig(root[0]->left[].v_name)
new_id->f_name <= root[0]->f_name
new_id->f_name in root[0]->left[].a_name
new_id->f_name in root[0]->left[].v_name
new_id->f_name < orig(root[0]->f_name)
new_id->f_name in orig(root[0]->left[].a_name)
new_id->f_name in orig(root[0]->left[].v_name)
new_id->id != orig(root[0]->id)
new_id->left in root[0]->left[].left
new_id->left in orig(root[0]->left[].left)
new_id->v_name in root[0]->left[].a_name
new_id->v_name in root[0]->left[].v_name
new_id->v_name in orig(root[0]->left[].a_name)
new_id->v_name in orig(root[0]->left[].v_name)
return in root[0]->left[].a_name
return in root[0]->left[].v_name
return in orig(root[0]->left[].a_name)
return in orig(root[0]->left[].v_name)
root[0]->balance in root[0]->left[].a_name
root[0]->balance in root[0]->left[].v_name
root[0]->balance in orig(root[0]->left[].a_name)
root[0]->balance in orig(root[0]->left[].v_name)
root[0]->left[] == orig(root[0]->left[]) (elementwise)
root[0]->left[] is the reverse of orig(root[0]->left[])
orig(root[0]->a_name) in root[0]->left[].a_name
root[0]->left[].a_name == orig(root[0]->left[].a_name) (elementwise)
root[0]->left[].a_name is the reverse of orig(root[0]->left[].a_name)
orig(root[0]->v_name) in root[0]->left[].a_name
root[0]->left[].f_name == orig(root[0]->left[].f_name) (elementwise)
root[0]->left[].f_name is the reverse of orig(root[0]->left[].f_name)
root[0]->left[].id == orig(root[0]->left[].id) (elementwise)
root[0]->left[].left == orig(root[0]->left[].left) (elementwise)
root[0]->left[].left is the reverse of orig(root[0]->left[].left)
root[0]->left[].right[0] == orig(root[0]->left[].right[0]) (elementwise)
root[0]->left[].right[0] is the reverse of orig(root[0]->left[].right[0])
orig(root[0]->a_name) in root[0]->left[].v_name
root[0]->left[].v_name == orig(root[0]->left[].v_name) (elementwise)
root[0]->left[].v_name is the reverse of orig(root[0]->left[].v_name)
orig(root[0]->v_name) in root[0]->left[].v_name
root[0]->right[] == orig(root[0]->right[]) (elementwise)
root[0]->right[] is the reverse of orig(root[0]->right[])
===========================================================================
..load_code():::ENTER
===========================================================================
..load_code():::EXIT
===========================================================================
..load_var():::ENTER
var_name one of { 2, 5, 11 }
===========================================================================
..load_var():::EXIT
===========================================================================
..long_val():::ENTER
str != null
===========================================================================
..long_val():::EXIT
return >= 0
str[0] != orig(str[0])
===========================================================================
..lookup():::ENTER
namekind == 2
===========================================================================
..lookup():::EXIT
===========================================================================
..new_yy_file():::ENTER
file has only one value
===========================================================================
..new_yy_file():::EXIT
===========================================================================
..nextarg():::ENTER
args->arg_is_var == is_var
args->arg_is_var == 0
args->next[] elements != null
args->next[].arg_is_var == [0]
args->next[].arg_is_var elements == 0
args->next[i].arg_is_var == i
args->next[i].av_name > i
args->next[].next->arg_is_var == [0]
args->next[].next->arg_is_var elements == 0
args->next[i].next->arg_is_var == i
args->next[i].next->av_name > i
args->next[].next->next[0] elements != null
args->next[].next[0] elements != null
args[0] != null
is_var == 0
args->arg_is_var in args->next[].arg_is_var
args->next[].av_name elements > args->arg_is_var
args->arg_is_var in args->next[].next->arg_is_var
args->next[].next->av_name elements > args->arg_is_var
(args->av_name >> val == 0)
(val == 0) ==> (args->av_name == 0)
(val >> args->av_name == 0)
args->av_name != val
args->next[].arg_is_var == args->next[].next->arg_is_var (elementwise)
args->next[].arg_is_var is the reverse of args->next[].next->arg_is_var
is_var in args->next[].arg_is_var
args->next[].av_name elements > is_var
is_var in args->next[].next->arg_is_var
args->next[].next->av_name elements > is_var
===========================================================================
..nextarg():::EXIT
args->arg_is_var == return->arg_is_var
args->arg_is_var == orig(args->arg_is_var)
args->av_name == orig(args->av_name)
args->next == orig(args->next)
args->next[] == orig(args->next[])
args->next[].arg_is_var == return->next[].next->arg_is_var
args->next[].arg_is_var == orig(args->next[].arg_is_var)
args->next[].av_name == return->next[].next->av_name
args->next[].av_name == orig(args->next[].av_name)
args->next[].next == return->next[].next->next
args->next[].next == orig(args->next[].next)
args->next[].next->arg_is_var == orig(args->next[].next->arg_is_var)
args->next[].next->av_name == orig(args->next[].next->av_name)
args->next[].next->next == orig(args->next[].next->next)
args->next[].next->next[0] == orig(args->next[].next->next[0])
args->next[].next[0] == orig(args->next[].next[0])
args[0] == orig(args[0])
return->arg_is_var == orig(is_var)
return->av_name == orig(val)
return->next == orig(args)
args->arg_is_var == 0
args->next[] elements != null
args->next[].arg_is_var == [0]
args->next[].arg_is_var elements == 0
args->next[i].arg_is_var == i
args->next[i].av_name > i
args->next[].next->arg_is_var == [0]
args->next[].next->arg_is_var elements == 0
args->next[i].next->arg_is_var == i
args->next[i].next->av_name > i
args->next[].next->next[0] elements != null
args->next[].next[0] elements != null
args[0] != null
return != null
return->arg_is_var == 0
return->next[] elements != null
return->next[].arg_is_var == [0]
return->next[].arg_is_var elements == 0
return->next[i].arg_is_var == i
return->next[i].av_name > i
return->next[].next->next[0] elements != null
return->next[].next[0] elements != null
return[0] != null
args->arg_is_var in args->next[].arg_is_var
args->next[].av_name elements > args->arg_is_var
args->arg_is_var in args->next[].next->arg_is_var
args->next[].next->av_name elements > args->arg_is_var
args->arg_is_var in return->next[].arg_is_var
return->next[].av_name elements > args->arg_is_var
(args->av_name >> return->av_name == 0)
(return->av_name == 0) ==> (args->av_name == 0)
(return->av_name >> args->av_name == 0)
args->av_name != return->av_name
args->av_name in return->next[].av_name
return->next[].av_name elements == args->av_name
args->next in return->next[].next
return->next[].next elements == args->next
args->next[].arg_is_var == args->next[].next->arg_is_var (elementwise)
args->next[].arg_is_var is the reverse of args->next[].next->arg_is_var
return->arg_is_var in args->next[].arg_is_var
args->next[].arg_is_var == return->next[].arg_is_var (elementwise)
args->next[].arg_is_var is the reverse of return->next[].arg_is_var
args->next[].av_name elements > return->arg_is_var
return->arg_is_var in args->next[].next->arg_is_var
args->next[].next->arg_is_var == return->next[].arg_is_var (elementwise)
args->next[].next->arg_is_var is the reverse of return->next[].arg_is_var
args->next[].next->av_name elements > return->arg_is_var
args[0] in return->next[]
return->next[] elements == args[0]
return->arg_is_var in return->next[].arg_is_var
return->next[].av_name elements > return->arg_is_var
===========================================================================
..open_new_file():::EXIT
return == 1
===========================================================================
..out_char():::ENTER
===========================================================================
..out_char():::EXIT
===========================================================================
..parse_args():::ENTER
argc == 3
argv has only one value
argv[0] == "./bc"
===========================================================================
..parse_args():::EXIT
argv[0] == orig(argv[0])
argv[0] == "./bc"
===========================================================================
..pop_vars():::ENTER
list->arg_is_var == 0
list->av_name one of { 5, 14 }
list->next[] contains no nulls and has only one value, of length 1
list->next[] elements has only one value
list->next[].arg_is_var == [0]
list->next[].arg_is_var elements == 0
list->next[i].arg_is_var == i
list->next[].av_name == [13]
list->next[].av_name elements == 13
list->next[].next contains no nulls and has only one value, of length 1
list->next[].next elements has only one value
list->next[].next->arg_is_var == [0]
list->next[].next->arg_is_var elements == 0
list->next[i].next->arg_is_var == i
list->next[].next->av_name == [15]
list->next[].next->av_name elements == 15
list->next[].next->next contains no nulls and has only one value, of length 1
list->next[].next->next elements has only one value
list->next[].next->next[0] contains no nulls and has only one value, of length 1
list->next[].next->next[0] elements has only one value
list->next[].next[0] contains no nulls and has only one value, of length 1
list->next[].next[0] elements has only one value
list->arg_is_var in list->next[].arg_is_var
list->next[].arg_is_var elements == list->arg_is_var
list->arg_is_var in list->next[].next->arg_is_var
list->next[].next->arg_is_var elements == list->arg_is_var
===========================================================================
..pop_vars():::EXIT
list->arg_is_var == orig(list->arg_is_var)
list->av_name == orig(list->av_name)
list->next == orig(list->next)
list->next[] == orig(list->next[])
list->next[].arg_is_var == orig(list->next[].arg_is_var)
list->next[].av_name == orig(list->next[].av_name)
list->next[].next == orig(list->next[].next)
list->next[].next->arg_is_var == orig(list->next[].next->arg_is_var)
list->next[].next->av_name == orig(list->next[].next->av_name)
list->next[].next->next == orig(list->next[].next->next)
list->next[].next->next[0] == orig(list->next[].next->next[0])
list->next[].next[0] == orig(list->next[].next[0])
list[0] == orig(list[0])
list->arg_is_var == 0
list->av_name one of { 5, 14 }
list->next[] contains no nulls and has only one value, of length 1
list->next[] elements has only one value
list->next[].arg_is_var == [0]
list->next[].arg_is_var elements == 0
list->next[i].arg_is_var == i
list->next[].av_name == [13]
list->next[].av_name elements == 13
list->next[].next contains no nulls and has only one value, of length 1
list->next[].next elements has only one value
list->next[].next->arg_is_var == [0]
list->next[].next->arg_is_var elements == 0
list->next[i].next->arg_is_var == i
list->next[].next->av_name == [15]
list->next[].next->av_name elements == 15
list->next[].next->next contains no nulls and has only one value, of length 1
list->next[].next->next elements has only one value
list->next[].next->next[0] contains no nulls and has only one value, of length 1
list->next[].next->next[0] elements has only one value
list->next[].next[0] contains no nulls and has only one value, of length 1
list->next[].next[0] elements has only one value
list->arg_is_var in list->next[].arg_is_var
list->next[].arg_is_var elements == list->arg_is_var
list->arg_is_var in list->next[].next->arg_is_var
list->next[].next->arg_is_var elements == list->arg_is_var
===========================================================================
..process_params():::ENTER
func == 4
pc has only one value
pc->pc_addr == 6
pc->pc_func == 0
pc[0] has only one value
===========================================================================
..process_params():::EXIT
pc->pc_func == orig(pc->pc_func)
pc[0] == orig(pc[0])
pc->pc_addr == 8
pc->pc_func == 0
pc[0] has only one value
===========================================================================
..push_b10_const():::ENTER
pc has only one value
pc->pc_addr one of { 1, 32, 40 }
pc->pc_func one of { 0, 4 }
pc[0] has only one value
===========================================================================
..push_b10_const():::EXIT
pc->pc_func == orig(pc->pc_func)
pc[0] == orig(pc[0])
pc->pc_func one of { 0, 4 }
pc[0] has only one value
===========================================================================
..push_copy():::ENTER
num->n_ptr == num->n_value
num->n_len == 1
num->n_ptr == ""
num->n_scale == 0
num->n_sign == 0
===========================================================================
..push_copy():::EXIT
num->n_len == orig(num->n_len)
num->n_ptr == num->n_value
num->n_ptr == orig(num->n_ptr)
num->n_ptr == orig(num->n_value)
num->n_scale == orig(num->n_scale)
num->n_sign == orig(num->n_sign)
num[0] == orig(num[0])
num->n_len == 1
num->n_ptr == ""
num->n_scale == 0
num->n_sign == 0
num->n_refs - orig(num->n_refs) - 1 == 0
===========================================================================
..push_num():::ENTER
num->n_ptr == num->n_value
num->n_len one of { 1, 2 }
num->n_next[] contains no nulls and has only one value, of length 1
num->n_next[] elements has only one value
num->n_next[].n_len elements one of { 1, 2 }
num->n_next[].n_len one of { [1], [2] }
num->n_next[].n_next == [null]
num->n_next[].n_next elements == null
num->n_next[].n_refs == [0]
num->n_next[].n_refs elements == 0
num->n_next[i].n_refs == i
num->n_next[].n_scale elements one of { 0, 20 }
num->n_next[].n_scale one of { [0], [20] }
num->n_next[].n_sign == [0]
num->n_next[].n_sign elements == 0
num->n_next[i].n_sign == i
num->n_ptr one of { "", "\002" }
num->n_refs == 1
num->n_scale one of { 0, 20, 25 }
num->n_sign == 0
num->n_value one of { "", "\002" }
num->n_scale % num->n_len == 0
num->n_next[].n_sign elements == num->n_sign
num->n_sign in num->n_next[].n_sign
===========================================================================
..push_num():::EXIT
num->n_len == orig(num->n_len)
num->n_next == orig(num->n_next)
num->n_next[] == orig(num->n_next[])
num->n_next[].n_len == orig(num->n_next[].n_len)
num->n_next[].n_next == orig(num->n_next[].n_next)
num->n_next[].n_refs == orig(num->n_next[].n_refs)
num->n_next[].n_scale == orig(num->n_next[].n_scale)
num->n_next[].n_sign == orig(num->n_next[].n_sign)
num->n_ptr == num->n_value
num->n_ptr == orig(num->n_ptr)
num->n_refs == orig(num->n_refs)
num->n_scale == orig(num->n_scale)
num->n_sign == orig(num->n_sign)
num->n_value == orig(num->n_value)
num[0] == orig(num[0])
num->n_len one of { 1, 2 }
num->n_next[] contains no nulls and has only one value, of length 1
num->n_next[] elements has only one value
num->n_next[].n_len elements one of { 1, 2 }
num->n_next[].n_len one of { [1], [2] }
num->n_next[].n_next == [null]
num->n_next[].n_next elements == null
num->n_next[].n_refs == [0]
num->n_next[].n_refs elements == 0
num->n_next[i].n_refs == i
num->n_next[].n_scale elements one of { 0, 20 }
num->n_next[].n_scale one of { [0], [20] }
num->n_next[].n_sign == [0]
num->n_next[].n_sign elements == 0
num->n_next[i].n_sign == i
num->n_ptr one of { "", "\002" }
num->n_refs == 1
num->n_scale one of { 0, 20, 25 }
num->n_sign == 0
num->n_value one of { "", "\002" }
num->n_scale % num->n_len == 0
num->n_next[].n_sign elements == num->n_sign
num->n_sign in num->n_next[].n_sign
===========================================================================
..store_var():::ENTER
var_name one of { 2, 4, 11 }
===========================================================================
..store_var():::EXIT
===========================================================================
..strcopyof():::ENTER
===========================================================================
..strcopyof():::EXIT
return == orig(str)
===========================================================================
..yy_create_buffer():::ENTER
file has only one value
size == 16384
===========================================================================
..yy_create_buffer():::EXIT
return->yy_buf_pos == return->yy_ch_buf
return->yy_input_file == orig(file)
return has only one value
return->yy_at_bol == 1
return->yy_buf_pos == ""
return->yy_buf_size == 16384
return->yy_buffer_status == 0
return->yy_fill_buffer == 1
return->yy_input_file has only one value
return->yy_is_interactive == 0
return->yy_is_our_buffer == 1
return->yy_n_chars == 0
return[0] has only one value
===========================================================================
..yy_flush_buffer():::ENTER
b has only one value
b->yy_buf_size == 16384
b->yy_is_our_buffer == 1
===========================================================================
..yy_flush_buffer():::EXIT
b->yy_buf_pos == b->yy_ch_buf
b->yy_buf_size == orig(b->yy_buf_size)
b->yy_is_our_buffer == orig(b->yy_is_our_buffer)
b->yy_at_bol == 1
b->yy_buf_pos == ""
b->yy_buf_size == 16384
b->yy_buffer_status == 0
b->yy_is_our_buffer == 1
b->yy_n_chars == 0
===========================================================================
..yy_init_buffer():::ENTER
b has only one value
b->yy_buf_size == 16384
b->yy_is_our_buffer == 1
file has only one value
===========================================================================
..yy_init_buffer():::EXIT
b->yy_buf_pos == b->yy_ch_buf
b->yy_buf_size == orig(b->yy_buf_size)
b->yy_input_file == orig(file)
b->yy_is_our_buffer == orig(b->yy_is_our_buffer)
b->yy_at_bol == 1
b->yy_buf_pos == ""
b->yy_buf_size == 16384
b->yy_buffer_status == 0
b->yy_fill_buffer == 1
b->yy_input_file has only one value
b->yy_is_interactive == 0
b->yy_is_our_buffer == 1
b->yy_n_chars == 0
b[0] has only one value
===========================================================================
..yylex():::EXIT
===========================================================================
number.c._bc_do_compare():::ENTER
n1->n_len == n2->n_len
n1->n_ptr == n1->n_value
n1->n_scale == n2->n_scale
n1->n_sign == n2->n_sign
ignore_last == 0
n1->n_len one of { 1, 2 }
n1->n_ptr == "\002"
n1->n_refs one of { 1, 4, 5 }
n1->n_scale == 0
n1->n_sign == 0
n2->n_ptr == ""
n2->n_refs one of { 1, 5, 18 }
use_sign == 1
===========================================================================
number.c._bc_do_compare():::EXIT
n1->n_len == n2->n_len
n1->n_len == orig(n1->n_len)
n1->n_len == orig(n2->n_len)
n1->n_ptr == n1->n_value
n1->n_ptr == orig(n1->n_ptr)
n1->n_ptr == orig(n1->n_value)
n1->n_refs == orig(n1->n_refs)
n1->n_scale == n2->n_scale
n1->n_scale == orig(n1->n_scale)
n1->n_scale == orig(n2->n_scale)
n1->n_sign == n2->n_sign
n1->n_sign == orig(n1->n_sign)
n1->n_sign == orig(n2->n_sign)
n1[0] == orig(n1[0])
n2->n_refs == orig(n2->n_refs)
n2[0] == orig(n2[0])
n1->n_len one of { 1, 2 }
n1->n_ptr == "\002"
n1->n_refs one of { 1, 4, 5 }
n1->n_scale == 0
n1->n_sign == 0
n2->n_ptr == ""
n2->n_refs one of { 1, 5, 18 }
return one of { -1, 0, 1 }
===========================================================================
number.c._bc_rec_mul():::ENTER
full_scale == v->n_scale
u->n_len == ulen
ulen == v->n_len
v->n_ptr == v->n_value
full_scale == 20
prod has only one value
u has only one value
u->n_next == null
u->n_refs == 1
u->n_scale == 0
u->n_sign == 0
u[0] has only one value
ulen == 1
v has only one value
v->n_ptr == ""
v->n_refs == 1
v->n_sign == 0
v[0] has only one value
vlen == 21
===========================================================================
number.c._bc_rec_mul():::EXIT
prod[0]->n_ptr == v->n_ptr
prod[0]->n_scale == u->n_scale
prod[0]->n_value == v->n_ptr
u->n_len == v->n_len
u->n_len == orig(u->n_len)
u->n_len == orig(ulen)
u->n_len == orig(v->n_len)
u->n_next == orig(u->n_next)
u->n_refs == orig(u->n_refs)
u->n_scale == orig(u->n_scale)
u->n_sign == orig(u->n_sign)
u[0] == orig(u[0])
v->n_ptr == v->n_value
v->n_ptr == orig(v->n_ptr)
v->n_ptr == orig(v->n_value)
v->n_refs == orig(v->n_refs)
v->n_scale == orig(full_scale)
v->n_scale == orig(v->n_scale)
v->n_sign == orig(v->n_sign)
v[0] == orig(v[0])
prod[0] has only one value
prod[0]->n_len == 23
prod[0]->n_next has only one value
prod[0]->n_next[] contains no nulls and has only one value, of length 1
prod[0]->n_next[].n_len == [1]
prod[0]->n_next[].n_next == [null]
prod[0]->n_next[].n_refs == [0]
prod[0]->n_next[].n_scale == [20]
prod[0]->n_next[].n_sign == [0]
prod[0]->n_refs == 1
prod[0]->n_sign == 0
prod[0][0] has only one value
u->n_len == 1
u->n_next == null
u->n_refs == 1
u->n_scale == 0
u->n_sign == 0
u[0] has only one value
v->n_ptr == ""
v->n_refs == 1
v->n_scale == 20
v->n_sign == 0
v[0] has only one value
===========================================================================
number.c._bc_rm_leading_zeros():::ENTER
num->n_ptr == num->n_value
num->n_len one of { 1, 3 }
num->n_next has only one value
num->n_next[] contains no nulls and has only one value, of length 1
num->n_next[] elements has only one value
num->n_next[].n_len == [1]
num->n_next[].n_len elements == 1
num->n_next[].n_next == [null]
num->n_next[].n_next elements == null
num->n_next[].n_refs == [0]
num->n_next[].n_refs elements == 0
num->n_next[i].n_refs == i
num->n_next[].n_scale == [20]
num->n_next[].n_scale elements == 20
num->n_next[].n_sign == [0]
num->n_next[].n_sign elements == 0
num->n_next[i].n_sign == i
num->n_ptr == ""
num->n_refs == 1
num->n_scale == 20
num->n_sign == 0
num->n_next[].n_len elements == num->n_refs
num->n_refs in num->n_next[].n_len
num->n_next[].n_scale elements == num->n_scale
num->n_scale in num->n_next[].n_scale
num->n_next[].n_sign elements == num->n_sign
num->n_sign in num->n_next[].n_sign
===========================================================================
number.c._bc_rm_leading_zeros():::EXIT
num->n_next == orig(num->n_next)
num->n_next[] == orig(num->n_next[])
num->n_next[].n_len == orig(num->n_next[].n_len)
num->n_next[].n_next == orig(num->n_next[].n_next)
num->n_next[].n_refs == orig(num->n_next[].n_refs)
num->n_next[].n_scale == orig(num->n_next[].n_scale)
num->n_next[].n_sign == orig(num->n_next[].n_sign)
num->n_ptr == num->n_value
num->n_ptr == orig(num->n_ptr)
num->n_ptr == orig(num->n_value)
num->n_refs == orig(num->n_refs)
num->n_scale == orig(num->n_scale)
num->n_sign == orig(num->n_sign)
num[0] == orig(num[0])
num->n_len == 1
num->n_next has only one value
num->n_next[] contains no nulls and has only one value, of length 1
num->n_next[] elements has only one value
num->n_next[].n_len == [1]
num->n_next[].n_len elements == 1
num->n_next[].n_next == [null]
num->n_next[].n_next elements == null
num->n_next[].n_refs == [0]
num->n_next[].n_refs elements == 0
num->n_next[i].n_refs == i
num->n_next[].n_scale == [20]
num->n_next[].n_scale elements == 20
num->n_next[].n_sign == [0]
num->n_next[].n_sign elements == 0
num->n_next[i].n_sign == i
num->n_ptr == ""
num->n_refs == 1
num->n_scale == 20
num->n_sign == 0
num->n_value == ""
num->n_len in num->n_next[].n_len
num->n_next[].n_len elements == num->n_len
num->n_next[].n_len elements == num->n_refs
num->n_refs in num->n_next[].n_len
num->n_next[].n_scale elements == num->n_scale
num->n_scale in num->n_next[].n_scale
num->n_next[].n_sign elements == num->n_sign
num->n_sign in num->n_next[].n_sign
===========================================================================
number.c._bc_simp_mul():::ENTER
full_scale == n2->n_scale
n1->n_len == n1len
n1len == n2->n_len
n2->n_ptr == n2->n_value
full_scale == 20
n1 has only one value
n1->n_next == null
n1->n_refs == 1
n1->n_scale == 0
n1->n_sign == 0
n1[0] has only one value
n1len == 1
n2 has only one value
n2->n_ptr == ""
n2->n_refs == 1
n2->n_sign == 0
n2[0] has only one value
n2len == 21
prod has only one value
===========================================================================
number.c._bc_simp_mul():::EXIT
n1->n_len == n2->n_len
n1->n_len == orig(n1->n_len)
n1->n_len == orig(n1len)
n1->n_len == orig(n2->n_len)
n1->n_next == orig(n1->n_next)
n1->n_refs == orig(n1->n_refs)
n1->n_scale == prod[0]->n_scale
n1->n_scale == orig(n1->n_scale)
n1->n_sign == orig(n1->n_sign)
n1[0] == orig(n1[0])
n2->n_ptr == n2->n_value
n2->n_ptr == prod[0]->n_ptr
n2->n_ptr == prod[0]->n_value
n2->n_ptr == orig(n2->n_ptr)
n2->n_ptr == orig(n2->n_value)
n2->n_refs == orig(n2->n_refs)
n2->n_scale == orig(full_scale)
n2->n_scale == orig(n2->n_scale)
n2->n_sign == orig(n2->n_sign)
n2[0] == orig(n2[0])
n1->n_len == 1
n1->n_next == null
n1->n_refs == 1
n1->n_scale == 0
n1->n_sign == 0
n1[0] has only one value
n2->n_ptr == ""
n2->n_refs == 1
n2->n_scale == 20
n2->n_sign == 0
n2[0] has only one value
prod[0] has only one value
prod[0]->n_len == 23
prod[0]->n_next has only one value
prod[0]->n_next[] contains no nulls and has only one value, of length 1
prod[0]->n_next[].n_len == [1]
prod[0]->n_next[].n_next == [null]
prod[0]->n_next[].n_refs == [0]
prod[0]->n_next[].n_scale == [20]
prod[0]->n_next[].n_sign == [0]
prod[0]->n_refs == 1
prod[0]->n_sign == 0
prod[0][0] has only one value
===========================================================================
number.c._one_mult():::ENTER
num != null
num[0] one of { 0, 1, 5 }
result != null
result[0] one of { 0, 1, 5 }
size one of { 1, 27 }
(size >> digit == 0)
(num[0] == 0) ==> (result[0] == 0)
num[0] >= result[0]
result[0] is a bitwise subset of num[0]
===========================================================================
number.c._one_mult():::EXIT
num[0] one of { 0, 5 }
result[0] one of { 0, 5 }
num[0] >= result[0]
(num[0] == 0) ==> (orig(num[0]) == 0)
(orig(num[0]) == 0) ==> (num[0] == 0)
num[0] >= orig(num[0])
orig(num[0]) is a bitwise subset of num[0]
(num[0] == 0) ==> (orig(result[0]) == 0)
num[0] >= orig(result[0])
orig(result[0]) is a bitwise subset of num[0]
(orig(num[0]) == 0) ==> (result[0] == 0)
num[0] == (java.lang.Math.max(result[0], orig(num[0])))
num[0] == (result[0] | orig(num[0]))
orig(num[0]) == (org.plumelib.util.MathPlume.gcd(num[0], orig(result[0])))
===========================================================================
scan.c.yy_flex_alloc():::ENTER
size one of { 56, 16386 }
===========================================================================
scan.c.yy_flex_alloc():::EXIT
===========================================================================
scan.c.yy_get_next_buffer():::EXIT
return == 0
===========================================================================
scan.c.yy_get_previous_state():::EXIT
return == 1
