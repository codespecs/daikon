===========================================================================
..addstr():::ENTER
maxset == 100
size(j[]) == 1
c != size(j[])
c >= size(j[])-1
j[] elements < maxset
j[] elements >= size(j[])-1
===========================================================================
..addstr():::EXIT
return == 1
j[return..] == []
j[] elements >= return
j[] - orig(j[]) - 1 == 0
j[] elements < orig(maxset)
j[] elements >= orig(size(j[]))
j[] elements == j[return-1]
j[] elements > orig(j[post(return)-1])
return <= j[return-1]
orig(c) >= size(j[])-1
orig(c) != j[return-1]
orig(c) != orig(j[post(return)-1])
orig(j[]) elements >= size(j[])-1
orig(j[]) elements < j[return-1]
orig(j[]) elements == orig(j[post(return)-1])
orig(maxset) > j[return-1]
orig(maxset) > orig(j[post(return)-1])
size(j[])-1 <= orig(j[post(return)-1])
orig(size(j[])) <= j[return-1]
j[return-1] - orig(j[post(return)-1]) - 1 == 0
return == (org.plumelib.util.MathPlume.gcd(j[return-1], orig(j[post(return)-1])))
orig(size(j[])) == (org.plumelib.util.MathPlume.gcd(j[return-1], orig(j[post(return)-1])))
===========================================================================
..amatch():::ENTER
j == 0
lin one of { "UW=Fq9MPD@sF6X@g|76zA\":NFc_4vtv%>/L>/W\n", "j+X+RpIPzC8;tLH#@;j+X+RpIPzC8;tLH#@;\n" }
offset >= 0
pat == "cX"
lin != pat
===========================================================================
..amatch():::EXIT
return != 0
return >= -1
return != orig(offset)
===========================================================================
..change():::ENTER
pat == "cX"
sub == "NEW"
===========================================================================
..change():::EXIT
===========================================================================
..esc():::ENTER
i[] elements one of { 0, 1, 2 }
i[] one of { [0], [1], [2] }
s one of { "NEW", "X" }
size(i[]) == 1
===========================================================================
..esc():::EXIT
i[] == orig(i[])
i[] elements one of { 0, 1, 2 }
i[] one of { [0], [1], [2] }
===========================================================================
..getpat():::ENTER
arg == "X"
===========================================================================
..getpat():::EXIT
return == 1
===========================================================================
..getsub():::ENTER
arg == "NEW"
===========================================================================
..getsub():::EXIT
return == 1
===========================================================================
..in_pat_set():::ENTER
c == 99
===========================================================================
..in_pat_set():::EXIT
return == 1
===========================================================================
..main():::ENTER
argc == 3
argv has only one value
argv[] == [./replace]
size(argv[]) == 1
===========================================================================
..main():::EXIT
argv[] == [./replace]
return == 0
===========================================================================
..makepat():::ENTER
arg == "X"
delim == 0
start == 0
===========================================================================
..makepat():::EXIT
return == 1
===========================================================================
..makesub():::ENTER
arg == "NEW"
delim == 0
from == 0
===========================================================================
..makesub():::EXIT
return == 3
===========================================================================
..my_getline():::ENTER
maxsize == 100
s one of { "UW=Fq9MPD@sF6X@g|76zA\":NFc_4vtv%>/L>/W\n", "j+X+RpIPzC8;tLH#@;j+X+RpIPzC8;tLH#@;\n" }
===========================================================================
..my_getline():::EXIT
return one of { 0, 1 }
===========================================================================
..omatch():::ENTER
i has only one value
i[i] >= i
j == 0
lin one of { "UW=Fq9MPD@sF6X@g|76zA\":NFc_4vtv%>/L>/W\n", "j+X+RpIPzC8;tLH#@;j+X+RpIPzC8;tLH#@;\n" }
pat == "cX"
size(i[]) == 1
i[j+1..] == []
i[] elements >= j
i[] elements >= size(i[])-1
i[] elements == i[j]
j <= i[j]
lin != pat
size(i[])-1 <= i[j]
===========================================================================
..omatch():::EXIT
i[return..] == orig(i[post(return)..])
i[i] >= i
return one of { 0, 1 }
i[0..return-1] elements one of { 3, 14, 21 }
i[orig(j)+1..] == []
orig(i[0..post(return)-1]) elements one of { 2, 13, 20 }
i[] elements >= return
i[] elements >= orig(j)
i[] elements >= size(i[])-1
i[] elements == i[orig(j)]
i[] elements >= orig(i[j])
orig(i[]) elements >= return
return >= size(i[])-1
return <= orig(size(i[]))
i[0..return-1] elements > return
(i[orig(j)] == 0) ==> (return == 0)
return <= i[orig(j)]
orig(i[0..post(return)-1]) elements > return
(orig(i[j]) == 0) ==> (return == 0)
return <= orig(i[j])
orig(i[]) elements >= size(i[])-1
orig(i[]) elements <= i[orig(j)]
i[0..return-1] elements > orig(j)
orig(j) <= i[orig(j)]
orig(i[0..post(return)-1]) elements > orig(j)
size(i[])-1 <= i[orig(j)]
size(i[])-1 <= orig(i[j])
i[0..return-1] elements > orig(size(i[]))
orig(i[0..post(return)-1]) elements > orig(size(i[]))
i[0..return-1] elements > orig(i[j])
orig(i[0..post(return)-1]) elements < i[orig(j)]
(i[orig(j)] == 0) ==> (orig(i[j]) == 0)
(i[orig(j)] >> orig(i[j]) == 0)
(orig(i[j]) == 0) ==> (i[orig(j)] == 0)
return - i[orig(j)] + orig(i[j]) == 0
===========================================================================
..patsize():::ENTER
n == 0
pat == "cX"
===========================================================================
..patsize():::EXIT
return == 2
===========================================================================
..putsub():::ENTER
lin one of { "UW=Fq9MPD@sF6X@g|76zA\":NFc_4vtv%>/L>/W\n", "j+X+RpIPzC8;tLH#@;j+X+RpIPzC8;tLH#@;\n" }
s1 one of { 2, 13, 20 }
s2 one of { 3, 14, 21 }
sub == "NEW"
(s2 >> s1 == 0)
===========================================================================
..putsub():::EXIT
===========================================================================
..subline():::ENTER
lin one of { "UW=Fq9MPD@sF6X@g|76zA\":NFc_4vtv%>/L>/W\n", "j+X+RpIPzC8;tLH#@;j+X+RpIPzC8;tLH#@;\n" }
pat == "cX"
sub == "NEW"
===========================================================================
..subline():::EXIT
