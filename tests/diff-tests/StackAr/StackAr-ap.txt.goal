<DataStructures.StackAr:::OBJECT>
  <size(this.theArray[]) == size(this.theArray[]) {0-}, size(this.theArray[]) == size(this.theArray[]) {0-}> (Bin,SJJ)
  <size(this.theArray[])-1 == size(this.theArray[])-1 {0-}, size(this.theArray[])-1 == size(this.theArray[])-1 {0-}> (Bin,SJJ)
  <this.theArray == this.theArray {0-}, this.theArray == this.theArray {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack-1] == this.theArray[this.topOfStack-1] {0-}, this.theArray[this.topOfStack-1] == this.theArray[this.topOfStack-1] {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack] == this.theArray[this.topOfStack] {0-}, this.theArray[this.topOfStack] == this.theArray[this.topOfStack] {0-}> (Bin,SJJ)
  <this.topOfStack == this.topOfStack {0-}, this.topOfStack == this.topOfStack {0-}> (Bin,SJJ)
  <size(this.theArray[]) >= size(this.theArray[]) {0.0001-}, size(this.theArray[]) >= size(this.theArray[]) {0.0019-}> (Bin,SJJ)
  <size(this.theArray[]) >= size(this.theArray[])-1 {0.0001-}, size(this.theArray[]) >= size(this.theArray[])-1 {0.0001-}> (Bin,SJJ)
  <size(this.theArray[])-1 >= size(this.theArray[])-1 {0.0001-}, size(this.theArray[])-1 >= size(this.theArray[])-1 {0.0019-}> (Bin,SJJ)
  <this.topOfStack >= this.topOfStack {0.0001-}, this.topOfStack >= this.topOfStack {0.0019-}> (Bin,SJJ)
  <size(this.theArray[]) > size(this.theArray[])-1 {0.0001-}, size(this.theArray[]) > size(this.theArray[])-1 {0.0001-}> (Bin,SJJ)
  <size(this.theArray[]) <= size(this.theArray[]) {0.0001-}, size(this.theArray[]) <= size(this.theArray[]) {0.0019-}> (Bin,SJJ)
  <size(this.theArray[])-1 <= size(this.theArray[])-1 {0.0001-}, size(this.theArray[])-1 <= size(this.theArray[])-1 {0.0019-}> (Bin,SJJ)
  <this.topOfStack <= size(this.theArray[]) {0.0001-}, this.topOfStack <= size(this.theArray[]) {0.0001-}> (Bin,SJJ)
  <this.topOfStack <= size(this.theArray[])-1 {0.0001+}, this.topOfStack <= size(this.theArray[])-1 {0.0001+}> (Bin,SJJ)
  <this.topOfStack <= this.topOfStack {0.0001-}, this.topOfStack <= this.topOfStack {0.0019-}> (Bin,SJJ)
  <this.topOfStack < size(this.theArray[]) {0.0001-}, this.topOfStack < size(this.theArray[]) {0.0001-}> (Bin,SJJ)
  <size(this.theArray[]) != size(this.theArray[])-1 {0.0001-}, size(this.theArray[]) != size(this.theArray[])-1 {0.0001-}> (Bin,SJJ)
  <this.topOfStack != size(this.theArray[]) {0.0001-}, this.topOfStack != size(this.theArray[]) {0.0001-}> (Bin,SJJ)
  <this.topOfStack == this.topOfStack {0-}, this.topOfStack == this.topOfStack {0-}> (Bin,SJJ)
  <this.theArray[0..this.topOfStack-1] == this.theArray[0..this.topOfStack-1] (elementwise) {0-}, this.theArray[0..this.topOfStack-1] == this.theArray[0..this.topOfStack-1] (elementwise) {0-}> (Bin,SJJ)
  <this.theArray[0..this.topOfStack] == this.theArray[0..this.topOfStack] (elementwise) {0-}, this.theArray[0..this.topOfStack] == this.theArray[0..this.topOfStack] (elementwise) {0-}> (Bin,SJJ)
  <this.theArray[] == this.theArray[] (elementwise) {0-}, this.theArray[] == this.theArray[] (elementwise) {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack+1..] == this.theArray[this.topOfStack+1..] (elementwise) {0-}, this.theArray[this.topOfStack+1..] == this.theArray[this.topOfStack+1..] (elementwise) {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack..] == this.theArray[this.topOfStack..] (elementwise) {0-}, this.theArray[this.topOfStack..] == this.theArray[this.topOfStack..] (elementwise) {0-}> (Bin,SJJ)
  <this.theArray[0..this.topOfStack-1] == this.theArray[0..this.topOfStack-1] {0-}, this.theArray[0..this.topOfStack-1] == this.theArray[0..this.topOfStack-1] {0-}> (Bin,SJJ)
  <this.theArray[0..this.topOfStack] == this.theArray[0..this.topOfStack] {0-}, this.theArray[0..this.topOfStack] == this.theArray[0..this.topOfStack] {0-}> (Bin,SJJ)
  <this.theArray[] == this.theArray[] {0-}, this.theArray[] == this.theArray[] {0-}> (Bin,SJJ)
  <Too few samples for linear relation: 0 * Slice{Add{+1}[Field{topOfStack}[this]],}[Elements[Field{theArray}[this]]] == 0 * Slice{Add{+1}[Field{topOfStack}[this]],}[Elements[Field{theArray}[this]]] + 0 {1-}, Too few samples for linear relation: 0 * Slice{Add{+1}[Field{topOfStack}[this]],}[Elements[Field{theArray}[this]]] == 0 * Slice{Add{+1}[Field{topOfStack}[this]],}[Elements[Field{theArray}[this]]] + 0 {1-}> (Bin,SUU)
  <this.theArray[this.topOfStack..] == this.theArray[this.topOfStack..] {0-}, this.theArray[this.topOfStack..] == this.theArray[this.topOfStack..] {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack+1..] is the reverse of this.theArray[this.topOfStack+1..] {0-}, this.theArray[this.topOfStack+1..] is the reverse of this.theArray[this.topOfStack+1..] {0-}> (Bin,SJJ)
  <this.theArray[0..this.topOfStack-1] == this.theArray[0..this.topOfStack-1] {0-}, this.theArray[0..this.topOfStack-1] == this.theArray[0..this.topOfStack-1] {0-}> (Bin,SJJ)
  <this.theArray[0..this.topOfStack] == this.theArray[0..this.topOfStack] {0-}, this.theArray[0..this.topOfStack] == this.theArray[0..this.topOfStack] {0-}> (Bin,SJJ)
  <this.theArray[] == this.theArray[] {0-}, this.theArray[] == this.theArray[] {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack+1..] == this.theArray[this.topOfStack+1..] {0-}, this.theArray[this.topOfStack+1..] == this.theArray[this.topOfStack+1..] {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack..] == this.theArray[this.topOfStack..] {0-}, this.theArray[this.topOfStack..] == this.theArray[this.topOfStack..] {0-}> (Bin,SJJ)
  <this.theArray[] is a {sub,super}sequence of this.theArray[] {1-}, this.theArray[] is a {sub,super}sequence of this.theArray[] {1-}> (Bin,SUU)
  <this.theArray.class == this.theArray.class {0-}, this.theArray.class == this.theArray.class {0-}> (Bin,SJJ)
  <size(this.theArray[]) == java.lang.Math.max(size(this.theArray[]), size(this.theArray[])) {3-}, size(this.theArray[]) == java.lang.Math.max(size(this.theArray[]), size(this.theArray[])) {3-}> (Ter,SUU)
  <size(this.theArray[]) == java.lang.Math.max(size(this.theArray[]), size(this.theArray[])) {3-}, size(this.theArray[]) == java.lang.Math.max(size(this.theArray[]), size(this.theArray[])) {3-}> (Ter,SUU)
  <size(this.theArray[]) == java.lang.Math.max(size(this.theArray[]), size(this.theArray[])) {3-}, size(this.theArray[]) == java.lang.Math.max(size(this.theArray[]), size(this.theArray[])) {3-}> (Ter,SUU)
  <size(this.theArray[]) == java.lang.Math.min(size(this.theArray[]), size(this.theArray[])) {3-}, size(this.theArray[]) == java.lang.Math.min(size(this.theArray[]), size(this.theArray[])) {3-}> (Ter,SUU)
  <size(this.theArray[]) == java.lang.Math.min(size(this.theArray[]), size(this.theArray[])) {3-}, size(this.theArray[]) == java.lang.Math.min(size(this.theArray[]), size(this.theArray[])) {3-}> (Ter,SUU)
  <size(this.theArray[]) == java.lang.Math.min(size(this.theArray[]), size(this.theArray[])) {3-}, size(this.theArray[]) == java.lang.Math.min(size(this.theArray[]), size(this.theArray[])) {3-}> (Ter,SUU)
  <size(this.theArray[]) == size(this.theArray[]) & size(this.theArray[]) {3-}, size(this.theArray[]) == size(this.theArray[]) & size(this.theArray[]) {3-}> (Ter,SUU)
  <size(this.theArray[]) == size(this.theArray[]) & size(this.theArray[]) {3-}, size(this.theArray[]) == size(this.theArray[]) & size(this.theArray[]) {3-}> (Ter,SUU)
  <size(this.theArray[]) == size(this.theArray[]) & size(this.theArray[]) {3-}, size(this.theArray[]) == size(this.theArray[]) & size(this.theArray[]) {3-}> (Ter,SUU)
  <size(this.theArray[]) == size(this.theArray[]) | size(this.theArray[]) {3-}, size(this.theArray[]) == size(this.theArray[]) | size(this.theArray[]) {3-}> (Ter,SUU)
  <size(this.theArray[]) == size(this.theArray[]) | size(this.theArray[]) {3-}, size(this.theArray[]) == size(this.theArray[]) | size(this.theArray[]) {3-}> (Ter,SUU)
  <size(this.theArray[]) == size(this.theArray[]) | size(this.theArray[]) {3-}, size(this.theArray[]) == size(this.theArray[]) | size(this.theArray[]) {3-}> (Ter,SUU)
  <size(this.theArray[]) == org.plumelib.util.MathPlume.gcd(size(this.theArray[]), size(this.theArray[])) {3-}, size(this.theArray[]) == org.plumelib.util.MathPlume.gcd(size(this.theArray[]), size(this.theArray[])) {3-}> (Ter,SUU)
  <size(this.theArray[]) == org.plumelib.util.MathPlume.gcd(size(this.theArray[]), size(this.theArray[])) {3-}, size(this.theArray[]) == org.plumelib.util.MathPlume.gcd(size(this.theArray[]), size(this.theArray[])) {3-}> (Ter,SUU)
  <size(this.theArray[]) == org.plumelib.util.MathPlume.gcd(size(this.theArray[]), size(this.theArray[])) {3-}, size(this.theArray[]) == org.plumelib.util.MathPlume.gcd(size(this.theArray[]), size(this.theArray[])) {3-}> (Ter,SUU)
  <size(this.theArray[]) == java.lang.Math.max(size(this.theArray[])-1, size(this.theArray[])) {0.5-}, size(this.theArray[]) == java.lang.Math.max(size(this.theArray[]), size(this.theArray[])-1) {0-}> (Ter,SUJ)
  <null, size(this.theArray[]) == java.lang.Math.max(size(this.theArray[]), size(this.theArray[])-1) {0-}> (Ter,MJ)
  <size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[])-1, size(this.theArray[])) {0.25-}, size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[]), size(this.theArray[])-1) {0-}> (Ter,SUJ)
  <null, size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[]), size(this.theArray[])-1) {0-}> (Ter,MJ)
  <null, size(this.theArray[])-1 == size(this.theArray[])-1 % size(this.theArray[]) {0-}> (Ter,MJ)
  <null, size(this.theArray[])-1 == size(this.theArray[])-1 % size(this.theArray[]) {0-}> (Ter,MJ)
  <size(this.theArray[])-1 == java.lang.Math.max(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == java.lang.Math.max(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == java.lang.Math.max(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == java.lang.Math.max(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == java.lang.Math.max(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == java.lang.Math.max(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == size(this.theArray[])-1 & size(this.theArray[])-1 {3-}, size(this.theArray[])-1 == size(this.theArray[])-1 & size(this.theArray[])-1 {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == size(this.theArray[])-1 & size(this.theArray[])-1 {3-}, size(this.theArray[])-1 == size(this.theArray[])-1 & size(this.theArray[])-1 {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == size(this.theArray[])-1 & size(this.theArray[])-1 {3-}, size(this.theArray[])-1 == size(this.theArray[])-1 & size(this.theArray[])-1 {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == size(this.theArray[])-1 | size(this.theArray[])-1 {3-}, size(this.theArray[])-1 == size(this.theArray[])-1 | size(this.theArray[])-1 {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == size(this.theArray[])-1 | size(this.theArray[])-1 {3-}, size(this.theArray[])-1 == size(this.theArray[])-1 | size(this.theArray[])-1 {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == size(this.theArray[])-1 | size(this.theArray[])-1 {3-}, size(this.theArray[])-1 == size(this.theArray[])-1 | size(this.theArray[])-1 {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == org.plumelib.util.MathPlume.gcd(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == org.plumelib.util.MathPlume.gcd(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == org.plumelib.util.MathPlume.gcd(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == org.plumelib.util.MathPlume.gcd(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == org.plumelib.util.MathPlume.gcd(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == org.plumelib.util.MathPlume.gcd(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[]) == java.lang.Math.max(this.topOfStack, size(this.theArray[])) {0-}, size(this.theArray[]) == java.lang.Math.max(this.topOfStack, size(this.theArray[])) {0-}> (Ter,SJJ)
  <size(this.theArray[]) == java.lang.Math.max(this.topOfStack, size(this.theArray[])) {0-}, size(this.theArray[]) == java.lang.Math.max(this.topOfStack, size(this.theArray[])) {0-}> (Ter,SJJ)
  <size(this.theArray[])-1 == java.lang.Math.max(this.topOfStack, size(this.theArray[])-1) {0-}, size(this.theArray[])-1 == java.lang.Math.max(this.topOfStack, size(this.theArray[])-1) {0-}> (Ter,SJJ)
  <size(this.theArray[])-1 == java.lang.Math.max(this.topOfStack, size(this.theArray[])-1) {0-}, size(this.theArray[])-1 == java.lang.Math.max(this.topOfStack, size(this.theArray[])-1) {0-}> (Ter,SJJ)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])) {0.25-}, this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])) {0-}> (Ter,SUJ)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])) {0.25-}, this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])) {0-}> (Ter,SUJ)
  <null, this.topOfStack == this.topOfStack % size(this.theArray[]) {0-}> (Ter,MJ)
  <null, this.topOfStack == this.topOfStack % size(this.theArray[]) {0-}> (Ter,MJ)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])-1) {0.5-}, this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])-1) {0-}> (Ter,SUJ)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])-1) {0.5-}, this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])-1) {0-}> (Ter,SUJ)
  <this.topOfStack == java.lang.Math.max(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == java.lang.Math.max(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <this.topOfStack == java.lang.Math.max(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == java.lang.Math.max(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <this.topOfStack == java.lang.Math.max(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == java.lang.Math.max(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == java.lang.Math.min(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == java.lang.Math.min(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == java.lang.Math.min(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <this.topOfStack == this.topOfStack & this.topOfStack {3-}, this.topOfStack == this.topOfStack & this.topOfStack {3-}> (Ter,SUU)
  <this.topOfStack == this.topOfStack & this.topOfStack {3-}, this.topOfStack == this.topOfStack & this.topOfStack {3-}> (Ter,SUU)
  <this.topOfStack == this.topOfStack & this.topOfStack {3-}, this.topOfStack == this.topOfStack & this.topOfStack {3-}> (Ter,SUU)
  <this.topOfStack == this.topOfStack | this.topOfStack {3-}, this.topOfStack == this.topOfStack | this.topOfStack {3-}> (Ter,SUU)
  <this.topOfStack == this.topOfStack | this.topOfStack {3-}, this.topOfStack == this.topOfStack | this.topOfStack {3-}> (Ter,SUU)
  <this.topOfStack == this.topOfStack | this.topOfStack {3-}, this.topOfStack == this.topOfStack | this.topOfStack {3-}> (Ter,SUU)
  <this.topOfStack == org.plumelib.util.MathPlume.gcd(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == org.plumelib.util.MathPlume.gcd(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <this.topOfStack == org.plumelib.util.MathPlume.gcd(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == org.plumelib.util.MathPlume.gcd(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <this.topOfStack == org.plumelib.util.MathPlume.gcd(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == org.plumelib.util.MathPlume.gcd(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == 2 * size(this.theArray[]) - size(this.theArray[]) - 1 {0-}, null> (Ter,JM)
  <size(this.theArray[])-1 == 0.5 * size(this.theArray[]) + 0.5 * size(this.theArray[])-1 - 0.5 {0-}, null> (Ter,JM)
  <size(this.theArray[]) >= 0 {0-}, size(this.theArray[]) >= 2 {0.8465-}> (UInt,DJU)
  <this.topOfStack >= -1 {0+}, this.topOfStack >= -1 {0+}> (U!Int,SJJ)
  <null, size(this.theArray[]) != 0 {1-}> (UInt,MU)
  <null, size(this.theArray[])-1 != 0 {1-}> (UInt,MU)
  <this.theArray != null {0.0001+}, this.theArray != null {0.0001+}> (UInt,SJJ)
  <this.theArray[this.topOfStack-1] != null {0.0001-}, this.theArray[this.topOfStack-1] != null {0.0001-}> (UInt,SJJ)
  <this.theArray[this.topOfStack] != null {0.0001-}, this.theArray[this.topOfStack] != null {0.0001-}> (UInt,SJJ)
  <size(this.theArray[]) <= 20 {0-}, size(this.theArray[]) <= 15 {0.0248-}> (U!Int,DJU)
  <this.topOfStack <= 19 {0.6706-}, this.topOfStack <= 14 {0.7586-}> (U!Int,DUU)
  <this.theArray[0..this.topOfStack-1] elements != null {0.0001-}, this.theArray[0..this.topOfStack-1] elements != null {0.0001-}> (UInt,SJJ)
  <this.theArray[0..this.topOfStack] elements != null {0.0001+}, this.theArray[0..this.topOfStack] elements != null {0.0001+}> (UInt,SJJ)
  <this.theArray[this.topOfStack+1..] elements == null {0+}, this.theArray[this.topOfStack+1..] elements == null {0+}> (UInt,SJJ)
  <this.theArray[this.topOfStack+1..] elements are equal {0-}, this.theArray[this.topOfStack+1..] elements are equal {0-}> (UInt,SJJ)
  <null, this.theArray[0..this.topOfStack-1] contains no duplicates {0.0001-}> (UInt,MJ)
  <null, this.theArray[0..this.topOfStack] contains no duplicates {0.0001+}> (UInt,MJ)
  <this.theArray.class == "[Ljava.lang.Object;" {0+}, this.theArray.class == "[Ljava.lang.Object;" {0+}> (UInt,SJJ)
<DataStructures.StackAr.<init>(I)V:::ENTER>
  <capacity == capacity {0-}, capacity == capacity {0-}> (Bin,SJJ)
  <capacity >= capacity {0.8864-}, capacity >= capacity {0.951-}> (Bin,SUU)
  <capacity <= capacity {0.8864-}, capacity <= capacity {0.951-}> (Bin,SUU)
  <capacity == capacity {0-}, capacity == capacity {0-}> (Bin,SJJ)
  <capacity == capacity & capacity {3-}, capacity == capacity & capacity {3-}> (Ter,SUU)
  <capacity == capacity & capacity {3-}, capacity == capacity & capacity {3-}> (Ter,SUU)
  <capacity == capacity & capacity {3-}, capacity == capacity & capacity {3-}> (Ter,SUU)
  <capacity == capacity | capacity {3-}, capacity == capacity | capacity {3-}> (Ter,SUU)
  <capacity == capacity | capacity {3-}, capacity == capacity | capacity {3-}> (Ter,SUU)
  <capacity == capacity | capacity {3-}, capacity == capacity | capacity {3-}> (Ter,SUU)
  <capacity == java.lang.Math.max(capacity, capacity) {3-}, capacity == java.lang.Math.max(capacity, capacity) {3-}> (Ter,SUU)
  <capacity == java.lang.Math.max(capacity, capacity) {3-}, capacity == java.lang.Math.max(capacity, capacity) {3-}> (Ter,SUU)
  <capacity == java.lang.Math.max(capacity, capacity) {3-}, capacity == java.lang.Math.max(capacity, capacity) {3-}> (Ter,SUU)
  <capacity == java.lang.Math.min(capacity, capacity) {3-}, capacity == java.lang.Math.min(capacity, capacity) {3-}> (Ter,SUU)
  <capacity == java.lang.Math.min(capacity, capacity) {3-}, capacity == java.lang.Math.min(capacity, capacity) {3-}> (Ter,SUU)
  <capacity == java.lang.Math.min(capacity, capacity) {3-}, capacity == java.lang.Math.min(capacity, capacity) {3-}> (Ter,SUU)
  <capacity == org.plumelib.util.MathPlume.gcd(capacity, capacity) {3-}, capacity == org.plumelib.util.MathPlume.gcd(capacity, capacity) {3-}> (Ter,SUU)
  <capacity == org.plumelib.util.MathPlume.gcd(capacity, capacity) {3-}, capacity == org.plumelib.util.MathPlume.gcd(capacity, capacity) {3-}> (Ter,SUU)
  <capacity == org.plumelib.util.MathPlume.gcd(capacity, capacity) {3-}, capacity == org.plumelib.util.MathPlume.gcd(capacity, capacity) {3-}> (Ter,SUU)
  <capacity >= 0 {0+}, capacity >= 2 {1-}> (UInt,DJU)
  <null, capacity != 0 {1-}> (UInt,MU)
  <capacity <= 20 {0.7308-}, capacity <= 15 {1-}> (U!Int,DUU)
<DataStructures.StackAr.<init>(I)V:::EXIT>
  <this.theArray[capacity-1] in this.theArray[] {0-}, this.theArray[capacity-1] in this.theArray[] {0-}> (Bin,SJJ)
  <this.theArray[capacity] in this.theArray[] {0-}, this.theArray[capacity] in this.theArray[] {0-}> (Bin,SJJ)
  <this.theArray[capacity-1] in this.theArray[capacity+1..] {0-}, this.theArray[capacity-1] in this.theArray[capacity+1..] {0-}> (Bin,SJJ)
  <this.theArray[capacity] in this.theArray[capacity+1..] {0-}, this.theArray[capacity] in this.theArray[capacity+1..] {0-}> (Bin,SJJ)
  <this.theArray[capacity] in this.theArray[capacity..] {0-}, this.theArray[capacity] in this.theArray[capacity..] {0-}> (Bin,SJJ)
  <this.theArray[] elements == this.theArray[capacity-1] {0+}, this.theArray[] elements == this.theArray[capacity-1] {0+}> (Bin,SJJ)
  <this.theArray[] elements ?cmp? this.theArray[capacity] {1-}, this.theArray[] elements ?cmp? this.theArray[capacity] {1-}> (Bin,SUU)
  <this.theArray[capacity+1..] elements ?cmp? this.theArray[capacity-1] {1-}, this.theArray[capacity+1..] elements ?cmp? this.theArray[capacity-1] {1-}> (Bin,SUU)
  <this.theArray[capacity..] elements ?cmp? this.theArray[capacity-1] {1-}, this.theArray[capacity..] elements ?cmp? this.theArray[capacity-1] {1-}> (Bin,SUU)
  <this.theArray[capacity+1..] elements ?cmp? this.theArray[capacity] {1-}, this.theArray[capacity+1..] elements ?cmp? this.theArray[capacity] {1-}> (Bin,SUU)
  <this.theArray[capacity..] elements ?cmp? this.theArray[capacity] {1-}, this.theArray[capacity..] elements ?cmp? this.theArray[capacity] {1-}> (Bin,SUU)
  <capacity == capacity {0-}, capacity == capacity {0-}> (Bin,SJJ)
  <capacity == orig(capacity) {0+}, capacity == orig(capacity) {0+}> (Bin,SJJ)
  <capacity == size(this.theArray[]) {0+}, capacity == size(this.theArray[]) {0+}> (Bin,SJJ)
  <size(this.theArray[])-1 == size(this.theArray[])-1 {0-}, size(this.theArray[])-1 == size(this.theArray[])-1 {0-}> (Bin,SJJ)
  <this.theArray == this.theArray {0-}, this.theArray == this.theArray {0-}> (Bin,SJJ)
  <this.theArray[capacity-1] == this.theArray[capacity-1] {0-}, this.theArray[capacity-1] == this.theArray[capacity-1] {0-}> (Bin,SJJ)
  <this.theArray[capacity-1] == this.theArray[orig(capacity)-1] {0+}, this.theArray[capacity-1] == this.theArray[orig(capacity)-1] {0+}> (Bin,SJJ)
  <this.theArray[capacity] == this.theArray[capacity-1] {1-}, this.theArray[capacity] == this.theArray[capacity-1] {1-}> (Bin,SUU)
  <this.theArray[capacity] == this.theArray[capacity] {1-}, this.theArray[capacity] == this.theArray[capacity] {1-}> (Bin,SUU)
  <this.topOfStack == this.topOfStack {0-}, this.topOfStack == this.topOfStack {0-}> (Bin,SJJ)
  <capacity >= capacity {0.8864-}, capacity >= capacity {0.951-}> (Bin,SUU)
  <capacity >= size(this.theArray[])-1 {0.1108-}, capacity >= size(this.theArray[])-1 {0.0594-}> (Bin,SUU)
  <capacity >= this.topOfStack {0.0554-}, capacity >= this.topOfStack {0.0297-}> (Bin,SUU)
  <size(this.theArray[])-1 >= size(this.theArray[])-1 {0.8864-}, size(this.theArray[])-1 >= size(this.theArray[])-1 {0.951-}> (Bin,SUU)
  <this.topOfStack >= this.topOfStack {0.8864-}, this.topOfStack >= this.topOfStack {0.951-}> (Bin,SUU)
  <capacity > size(this.theArray[])-1 {0.1108-}, capacity > size(this.theArray[])-1 {0.0594-}> (Bin,SUU)
  <capacity > this.topOfStack {0.0554-}, capacity > this.topOfStack {0.0297-}> (Bin,SUU)
  <capacity <= capacity {0.8864-}, capacity <= capacity {0.951-}> (Bin,SUU)
  <size(this.theArray[])-1 <= size(this.theArray[])-1 {0.8864-}, size(this.theArray[])-1 <= size(this.theArray[])-1 {0.951-}> (Bin,SUU)
  <this.topOfStack <= size(this.theArray[])-1 {0.1108-}, this.topOfStack <= size(this.theArray[])-1 {0.0297-}> (Bin,SUU)
  <this.topOfStack <= this.topOfStack {0.8864-}, this.topOfStack <= this.topOfStack {0.951-}> (Bin,SUU)
  <null, this.topOfStack < size(this.theArray[])-1 {0.0297-}> (Bin,MU)
  <capacity != size(this.theArray[])-1 {0.1108-}, capacity != size(this.theArray[])-1 {0.0594-}> (Bin,SUU)
  <capacity != this.topOfStack {0.0554-}, capacity != this.topOfStack {0.0297-}> (Bin,SUU)
  <null, this.topOfStack != size(this.theArray[])-1 {0.0297-}> (Bin,MU)
  <capacity == capacity {0-}, capacity == capacity {0-}> (Bin,SJJ)
  <size(this.theArray[])-1 == capacity - 1 {0-}, size(this.theArray[])-1 == capacity - 1 {0-}> (Bin,SJJ)
  <Too few samples for linear relation: 0 * Field{topOfStack}[this] == 0 * Field{topOfStack}[this] + 0 {1-}, Too few samples for linear relation: 0 * Field{topOfStack}[this] == 0 * Field{topOfStack}[this] + 0 {1-}> (Bin,SUU)
  <this.theArray[] == ~this.theArray[capacity+1..] {1-}, this.theArray[] == ~this.theArray[capacity+1..] {1-}> (Bin,SUU)
  <this.theArray[capacity+1..] == ~this.theArray[] {1-}, this.theArray[capacity+1..] == ~this.theArray[] {1-}> (Bin,SUU)
  <this.theArray[capacity+1..] == ~this.theArray[capacity+1..] {1-}, this.theArray[capacity+1..] == ~this.theArray[capacity+1..] {1-}> (Bin,SUU)
  <this.theArray[capacity+1..] == ~this.theArray[capacity+1..] {1-}, this.theArray[capacity+1..] == ~this.theArray[capacity+1..] {1-}> (Bin,SUU)
  <this.theArray[capacity+1..] == ~this.theArray[capacity..] {1-}, this.theArray[capacity+1..] == ~this.theArray[capacity..] {1-}> (Bin,SUU)
  <this.theArray[capacity..] == ~this.theArray[capacity+1..] {1-}, this.theArray[capacity..] == ~this.theArray[capacity+1..] {1-}> (Bin,SUU)
  <this.theArray[capacity..] == ~this.theArray[capacity..] {1-}, this.theArray[capacity..] == ~this.theArray[capacity..] {1-}> (Bin,SUU)
  <this.theArray[capacity..] == ~this.theArray[capacity..] {1-}, this.theArray[capacity..] == ~this.theArray[capacity..] {1-}> (Bin,SUU)
  <this.theArray[] == this.theArray[] (elementwise) {0-}, this.theArray[] == this.theArray[] (elementwise) {0-}> (Bin,SJJ)
  <this.theArray[] ?cmp? this.theArray[capacity+1..] (elementwise) {1-}, this.theArray[] ?cmp? this.theArray[capacity+1..] (elementwise) {1-}> (Bin,SUU)
  <this.theArray[capacity+1..] ?cmp? this.theArray[capacity+1..] (elementwise) {1-}, this.theArray[capacity+1..] ?cmp? this.theArray[capacity+1..] (elementwise) {1-}> (Bin,SUU)
  <this.theArray[capacity..] ?cmp? this.theArray[capacity+1..] (elementwise) {1-}, this.theArray[capacity..] ?cmp? this.theArray[capacity+1..] (elementwise) {1-}> (Bin,SUU)
  <this.theArray[capacity..] ?cmp? this.theArray[capacity..] (elementwise) {1-}, this.theArray[capacity..] ?cmp? this.theArray[capacity..] (elementwise) {1-}> (Bin,SUU)
  <Too few samples for linear relation: 0 * Elements[Field{theArray}[this]] == 0 * Elements[Field{theArray}[this]] + 0 {1-}, Too few samples for linear relation: 0 * Elements[Field{theArray}[this]] == 0 * Elements[Field{theArray}[this]] + 0 {1-}> (Bin,SUU)
  <Too few samples for linear relation: 0 * Slice{Add{+1}[capacity],}[Elements[Field{theArray}[this]]] == 0 * Elements[Field{theArray}[this]] + 0 {1-}, Too few samples for linear relation: 0 * Slice{Add{+1}[capacity],}[Elements[Field{theArray}[this]]] == 0 * Elements[Field{theArray}[this]] + 0 {1-}> (Bin,SUU)
  <Too few samples for linear relation: 0 * Slice{Add{+1}[capacity],}[Elements[Field{theArray}[this]]] == 0 * Slice{Add{+1}[capacity],}[Elements[Field{theArray}[this]]] + 0 {1-}, Too few samples for linear relation: 0 * Slice{Add{+1}[capacity],}[Elements[Field{theArray}[this]]] == 0 * Slice{Add{+1}[capacity],}[Elements[Field{theArray}[this]]] + 0 {1-}> (Bin,SUU)
  <Too few samples for linear relation: 0 * Slice{Add{+1}[capacity],}[Elements[Field{theArray}[this]]] == 0 * Slice{capacity,}[Elements[Field{theArray}[this]]] + 0 {1-}, Too few samples for linear relation: 0 * Slice{Add{+1}[capacity],}[Elements[Field{theArray}[this]]] == 0 * Slice{capacity,}[Elements[Field{theArray}[this]]] + 0 {1-}> (Bin,SUU)
  <Too few samples for linear relation: 0 * Slice{capacity,}[Elements[Field{theArray}[this]]] == 0 * Slice{capacity,}[Elements[Field{theArray}[this]]] + 0 {1-}, Too few samples for linear relation: 0 * Slice{capacity,}[Elements[Field{theArray}[this]]] == 0 * Slice{capacity,}[Elements[Field{theArray}[this]]] + 0 {1-}> (Bin,SUU)
  <this.theArray[] is the reverse of this.theArray[] {0-}, this.theArray[] is the reverse of this.theArray[] {0-}> (Bin,SJJ)
  <this.theArray[] is the reverse of this.theArray[capacity+1..] {0-}, this.theArray[] is the reverse of this.theArray[capacity+1..] {0-}> (Bin,SJJ)
  <this.theArray[capacity+1..] is the reverse of this.theArray[capacity+1..] {0-}, this.theArray[capacity+1..] is the reverse of this.theArray[capacity+1..] {0-}> (Bin,SJJ)
  <this.theArray[capacity..] is the reverse of this.theArray[capacity+1..] {0-}, this.theArray[capacity..] is the reverse of this.theArray[capacity+1..] {0-}> (Bin,SJJ)
  <this.theArray[capacity..] is the reverse of this.theArray[capacity..] {0-}, this.theArray[capacity..] is the reverse of this.theArray[capacity..] {0-}> (Bin,SJJ)
  <this.theArray[] == this.theArray[0..capacity-1] {0-}, this.theArray[] == this.theArray[0..capacity-1] {0-}> (Bin,SJJ)
  <this.theArray[] == this.theArray[0..orig(capacity)-1] {0-}, this.theArray[] == this.theArray[0..orig(capacity)-1] {0-}> (Bin,SJJ)
  <this.theArray[] == this.theArray[] {0-}, this.theArray[] == this.theArray[] {0-}> (Bin,SJJ)
  <this.theArray[] ?cmp? this.theArray[capacity+1..] (lexically) {1-}, this.theArray[] ?cmp? this.theArray[capacity+1..] (lexically) {1-}> (Bin,SUU)
  <this.theArray[] == this.theArray[this.topOfStack+1..] {0-}, this.theArray[] == this.theArray[this.topOfStack+1..] {0-}> (Bin,SJJ)
  <this.theArray[capacity+1..] ?cmp? this.theArray[capacity+1..] (lexically) {1-}, this.theArray[capacity+1..] ?cmp? this.theArray[capacity+1..] (lexically) {1-}> (Bin,SUU)
  <this.theArray[capacity..] == this.theArray[0..this.topOfStack] {0-}, this.theArray[capacity..] == this.theArray[0..this.topOfStack] {0-}> (Bin,SJJ)
  <this.theArray[capacity..] ?cmp? this.theArray[capacity+1..] (lexically) {1-}, this.theArray[capacity..] ?cmp? this.theArray[capacity+1..] (lexically) {1-}> (Bin,SUU)
  <this.theArray[capacity..] == this.theArray[capacity..] {0-}, this.theArray[capacity..] == this.theArray[capacity..] {0-}> (Bin,SJJ)
  <this.theArray[capacity..] == this.theArray[orig(capacity)..] {0-}, this.theArray[capacity..] == this.theArray[orig(capacity)..] {0-}> (Bin,SJJ)
  <this.theArray[] is a {sub,super}sequence of this.theArray[] {1-}, this.theArray[] is a {sub,super}sequence of this.theArray[] {1-}> (Bin,SUU)
  <this.theArray[] is a {sub,super}sequence of this.theArray[capacity+1..] {1-}, this.theArray[] is a {sub,super}sequence of this.theArray[capacity+1..] {1-}> (Bin,SUU)
  <this.theArray[capacity..] is a subsequence of this.theArray[] {0-}, this.theArray[capacity..] is a subsequence of this.theArray[] {0-}> (Bin,SJJ)
  <this.theArray[capacity+1..] is a {sub,super}sequence of this.theArray[capacity+1..] {1-}, this.theArray[capacity+1..] is a {sub,super}sequence of this.theArray[capacity+1..] {1-}> (Bin,SUU)
  <this.theArray[capacity..] is a {sub,super}sequence of this.theArray[capacity+1..] {1-}, this.theArray[capacity..] is a {sub,super}sequence of this.theArray[capacity+1..] {1-}> (Bin,SUU)
  <this.theArray[capacity..] is a {sub,super}sequence of this.theArray[capacity..] {1-}, this.theArray[capacity..] is a {sub,super}sequence of this.theArray[capacity..] {1-}> (Bin,SUU)
  <this.theArray.class == this.theArray.class {0-}, this.theArray.class == this.theArray.class {0-}> (Bin,SJJ)
  <capacity == capacity & capacity {3-}, capacity == capacity & capacity {3-}> (Ter,SUU)
  <capacity == capacity & capacity {3-}, capacity == capacity & capacity {3-}> (Ter,SUU)
  <capacity == capacity & capacity {3-}, capacity == capacity & capacity {3-}> (Ter,SUU)
  <capacity == capacity | capacity {3-}, capacity == capacity | capacity {3-}> (Ter,SUU)
  <capacity == capacity | capacity {3-}, capacity == capacity | capacity {3-}> (Ter,SUU)
  <capacity == capacity | capacity {3-}, capacity == capacity | capacity {3-}> (Ter,SUU)
  <capacity == java.lang.Math.max(capacity, capacity) {3-}, capacity == java.lang.Math.max(capacity, capacity) {3-}> (Ter,SUU)
  <capacity == java.lang.Math.max(capacity, capacity) {3-}, capacity == java.lang.Math.max(capacity, capacity) {3-}> (Ter,SUU)
  <capacity == java.lang.Math.max(capacity, capacity) {3-}, capacity == java.lang.Math.max(capacity, capacity) {3-}> (Ter,SUU)
  <capacity == java.lang.Math.min(capacity, capacity) {3-}, capacity == java.lang.Math.min(capacity, capacity) {3-}> (Ter,SUU)
  <capacity == java.lang.Math.min(capacity, capacity) {3-}, capacity == java.lang.Math.min(capacity, capacity) {3-}> (Ter,SUU)
  <capacity == java.lang.Math.min(capacity, capacity) {3-}, capacity == java.lang.Math.min(capacity, capacity) {3-}> (Ter,SUU)
  <capacity == org.plumelib.util.MathPlume.gcd(capacity, capacity) {3-}, capacity == org.plumelib.util.MathPlume.gcd(capacity, capacity) {3-}> (Ter,SUU)
  <capacity == org.plumelib.util.MathPlume.gcd(capacity, capacity) {3-}, capacity == org.plumelib.util.MathPlume.gcd(capacity, capacity) {3-}> (Ter,SUU)
  <capacity == org.plumelib.util.MathPlume.gcd(capacity, capacity) {3-}, capacity == org.plumelib.util.MathPlume.gcd(capacity, capacity) {3-}> (Ter,SUU)
  <capacity == java.lang.Math.max(capacity, size(this.theArray[])-1) {0.5-}, capacity == java.lang.Math.max(capacity, size(this.theArray[])-1) {0-}> (Ter,SUJ)
  <capacity == java.lang.Math.max(capacity, size(this.theArray[])-1) {0.5-}, capacity == java.lang.Math.max(capacity, size(this.theArray[])-1) {0-}> (Ter,SUJ)
  <capacity == capacity & this.topOfStack {1-}, capacity == capacity & this.topOfStack {1-}> (Ter,SUU)
  <capacity == capacity & this.topOfStack {1-}, capacity == capacity & this.topOfStack {1-}> (Ter,SUU)
  <capacity == java.lang.Math.max(capacity, this.topOfStack) {1-}, capacity == java.lang.Math.max(capacity, this.topOfStack) {1-}> (Ter,SUU)
  <capacity == java.lang.Math.max(capacity, this.topOfStack) {1-}, capacity == java.lang.Math.max(capacity, this.topOfStack) {1-}> (Ter,SUU)
  <size(this.theArray[])-1 == java.lang.Math.min(capacity, size(this.theArray[])-1) {0.25-}, size(this.theArray[])-1 == java.lang.Math.min(capacity, size(this.theArray[])-1) {0-}> (Ter,SUJ)
  <size(this.theArray[])-1 == java.lang.Math.min(capacity, size(this.theArray[])-1) {0.25-}, size(this.theArray[])-1 == java.lang.Math.min(capacity, size(this.theArray[])-1) {0-}> (Ter,SUJ)
  <null, size(this.theArray[])-1 == size(this.theArray[])-1 % capacity {0-}> (Ter,MJ)
  <null, size(this.theArray[])-1 == size(this.theArray[])-1 % capacity {0-}> (Ter,MJ)
  <this.topOfStack == capacity | this.topOfStack {0.25-}, this.topOfStack == capacity | this.topOfStack {0-}> (Ter,SUJ)
  <this.topOfStack == capacity | this.topOfStack {0.25-}, this.topOfStack == capacity | this.topOfStack {0-}> (Ter,SUJ)
  <this.topOfStack == java.lang.Math.min(capacity, this.topOfStack) {0.25-}, this.topOfStack == java.lang.Math.min(capacity, this.topOfStack) {0-}> (Ter,SUJ)
  <this.topOfStack == java.lang.Math.min(capacity, this.topOfStack) {0.25-}, this.topOfStack == java.lang.Math.min(capacity, this.topOfStack) {0-}> (Ter,SUJ)
  <this.topOfStack == this.topOfStack >> capacity {0.25-}, this.topOfStack == this.topOfStack % capacity {0-}> (Ter,DUJ)
  <this.topOfStack == this.topOfStack >> capacity {0.25-}, this.topOfStack == this.topOfStack % capacity {0-}> (Ter,DUJ)
  <this.topOfStack == org.plumelib.util.MathPlume.gcd(capacity, this.topOfStack) {0.25-}, this.topOfStack == this.topOfStack >> capacity {0-}> (Ter,DUJ)
  <this.topOfStack == org.plumelib.util.MathPlume.gcd(capacity, this.topOfStack) {0.25-}, this.topOfStack == this.topOfStack >> capacity {0-}> (Ter,DUJ)
  <null, this.topOfStack == org.plumelib.util.MathPlume.gcd(capacity, this.topOfStack) {0-}> (Ter,MJ)
  <null, this.topOfStack == org.plumelib.util.MathPlume.gcd(capacity, this.topOfStack) {0-}> (Ter,MJ)
  <size(this.theArray[])-1 == java.lang.Math.max(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == java.lang.Math.max(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == java.lang.Math.max(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == java.lang.Math.max(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == java.lang.Math.max(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == java.lang.Math.max(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == size(this.theArray[])-1 & size(this.theArray[])-1 {3-}, size(this.theArray[])-1 == size(this.theArray[])-1 & size(this.theArray[])-1 {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == size(this.theArray[])-1 & size(this.theArray[])-1 {3-}, size(this.theArray[])-1 == size(this.theArray[])-1 & size(this.theArray[])-1 {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == size(this.theArray[])-1 & size(this.theArray[])-1 {3-}, size(this.theArray[])-1 == size(this.theArray[])-1 & size(this.theArray[])-1 {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == size(this.theArray[])-1 | size(this.theArray[])-1 {3-}, size(this.theArray[])-1 == size(this.theArray[])-1 | size(this.theArray[])-1 {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == size(this.theArray[])-1 | size(this.theArray[])-1 {3-}, size(this.theArray[])-1 == size(this.theArray[])-1 | size(this.theArray[])-1 {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == size(this.theArray[])-1 | size(this.theArray[])-1 {3-}, size(this.theArray[])-1 == size(this.theArray[])-1 | size(this.theArray[])-1 {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == org.plumelib.util.MathPlume.gcd(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == org.plumelib.util.MathPlume.gcd(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == org.plumelib.util.MathPlume.gcd(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == org.plumelib.util.MathPlume.gcd(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == org.plumelib.util.MathPlume.gcd(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == org.plumelib.util.MathPlume.gcd(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == java.lang.Math.max(this.topOfStack, size(this.theArray[])-1) {1-}, size(this.theArray[])-1 == java.lang.Math.max(this.topOfStack, size(this.theArray[])-1) {1-}> (Ter,SUU)
  <size(this.theArray[])-1 == java.lang.Math.max(this.topOfStack, size(this.theArray[])-1) {1-}, size(this.theArray[])-1 == java.lang.Math.max(this.topOfStack, size(this.theArray[])-1) {1-}> (Ter,SUU)
  <size(this.theArray[])-1 == this.topOfStack & size(this.theArray[])-1 {1-}, size(this.theArray[])-1 == this.topOfStack & size(this.theArray[])-1 {1-}> (Ter,SUU)
  <size(this.theArray[])-1 == this.topOfStack & size(this.theArray[])-1 {1-}, size(this.theArray[])-1 == this.topOfStack & size(this.theArray[])-1 {1-}> (Ter,SUU)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])-1) {0.5-}, this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])-1) {0-}> (Ter,SUJ)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])-1) {0.5-}, this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])-1) {0-}> (Ter,SUJ)
  <this.topOfStack == this.topOfStack >> size(this.theArray[])-1 {0.5-}, this.topOfStack == this.topOfStack >> size(this.theArray[])-1 {0-}> (Ter,SUJ)
  <this.topOfStack == this.topOfStack >> size(this.theArray[])-1 {0.5-}, this.topOfStack == this.topOfStack >> size(this.theArray[])-1 {0-}> (Ter,SUJ)
  <this.topOfStack == this.topOfStack | size(this.theArray[])-1 {0.5-}, this.topOfStack == this.topOfStack | size(this.theArray[])-1 {0-}> (Ter,SUJ)
  <this.topOfStack == this.topOfStack | size(this.theArray[])-1 {0.5-}, this.topOfStack == this.topOfStack | size(this.theArray[])-1 {0-}> (Ter,SUJ)
  <this.topOfStack == java.lang.Math.max(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == java.lang.Math.max(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <this.topOfStack == java.lang.Math.max(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == java.lang.Math.max(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <this.topOfStack == java.lang.Math.max(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == java.lang.Math.max(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == java.lang.Math.min(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == java.lang.Math.min(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == java.lang.Math.min(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <this.topOfStack == this.topOfStack & this.topOfStack {3-}, this.topOfStack == this.topOfStack & this.topOfStack {3-}> (Ter,SUU)
  <this.topOfStack == this.topOfStack & this.topOfStack {3-}, this.topOfStack == this.topOfStack & this.topOfStack {3-}> (Ter,SUU)
  <this.topOfStack == this.topOfStack & this.topOfStack {3-}, this.topOfStack == this.topOfStack & this.topOfStack {3-}> (Ter,SUU)
  <this.topOfStack == this.topOfStack >> this.topOfStack {3-}, this.topOfStack == this.topOfStack >> this.topOfStack {3-}> (Ter,SUU)
  <this.topOfStack == this.topOfStack >> this.topOfStack {3-}, this.topOfStack == this.topOfStack >> this.topOfStack {3-}> (Ter,SUU)
  <this.topOfStack == this.topOfStack >> this.topOfStack {3-}, this.topOfStack == this.topOfStack >> this.topOfStack {3-}> (Ter,SUU)
  <this.topOfStack == this.topOfStack >> this.topOfStack {3-}, this.topOfStack == this.topOfStack >> this.topOfStack {3-}> (Ter,SUU)
  <this.topOfStack == this.topOfStack >> this.topOfStack {3-}, this.topOfStack == this.topOfStack >> this.topOfStack {3-}> (Ter,SUU)
  <this.topOfStack == this.topOfStack >> this.topOfStack {3-}, this.topOfStack == this.topOfStack >> this.topOfStack {3-}> (Ter,SUU)
  <this.topOfStack == this.topOfStack | this.topOfStack {3-}, this.topOfStack == this.topOfStack | this.topOfStack {3-}> (Ter,SUU)
  <this.topOfStack == this.topOfStack | this.topOfStack {3-}, this.topOfStack == this.topOfStack | this.topOfStack {3-}> (Ter,SUU)
  <this.topOfStack == this.topOfStack | this.topOfStack {3-}, this.topOfStack == this.topOfStack | this.topOfStack {3-}> (Ter,SUU)
  <this.topOfStack == org.plumelib.util.MathPlume.gcd(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == org.plumelib.util.MathPlume.gcd(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <this.topOfStack == org.plumelib.util.MathPlume.gcd(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == org.plumelib.util.MathPlume.gcd(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <this.topOfStack == org.plumelib.util.MathPlume.gcd(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == org.plumelib.util.MathPlume.gcd(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <Too few samples for linear relation: 0 * Field{topOfStack}[this] == 0 * Field{topOfStack}[this] + 0 * Field{topOfStack}[this] + 0 {1-}, Too few samples for linear relation: 0 * Field{topOfStack}[this] == 0 * Field{topOfStack}[this] + 0 * Field{topOfStack}[this] + 0 {1-}> (Ter,SUU)
  <capacity >= 0 {0-}, capacity >= 2 {1-}> (UInt,DJU)
  <this.topOfStack >= -1 {0.8136-}, this.topOfStack >= -1 {0.8333-}> (U!Int,SUU)
  <null, capacity != 0 {1-}> (UInt,MU)
  <null, size(this.theArray[])-1 != 0 {1-}> (UInt,MU)
  <this.theArray != null {0.0077+}, this.theArray != null {0.1317-}> (UInt,SJU)
  <this.theArray[capacity] != null {1-}, this.theArray[capacity] != null {1-}> (UInt,SUU)
  <this.topOfStack != 0 {1-}, this.topOfStack != 0 {1-}> (UInt,SUU)
  <this.theArray[capacity-1] == null {0-}, this.theArray[capacity-1] == null {0-}> (UInt,SJJ)
  <this.theArray[capacity] one of {  } {1-}, this.theArray[capacity] one of {  } {1-}> (UInt,SUU)
  <this.topOfStack == -1 {0+}, this.topOfStack == -1 {0+}> (UInt,SJJ)
  <capacity <= 20 {0.7308-}, capacity <= 15 {1-}> (U!Int,DUU)
  <this.topOfStack <= -1 {0.8136-}, this.topOfStack <= -1 {0.8333-}> (U!Int,SUU)
  <this.theArray[capacity+1..] elements != null {1-}, this.theArray[capacity+1..] elements != null {1-}> (UInt,SUU)
  <this.theArray[capacity..] elements != null {0.0077+}, this.theArray[capacity..] elements != null {0.1317-}> (UInt,SJU)
  <this.theArray[] elements == null {0+}, this.theArray[] elements == null {0+}> (UInt,SJJ)
  <this.theArray[capacity+1..] elements one of {  } {1-}, this.theArray[capacity+1..] elements one of {  } {1-}> (UInt,SUU)
  <this.theArray[capacity..] elements one of {  } {1-}, this.theArray[capacity..] elements one of {  } {1-}> (UInt,SUU)
  <this.theArray[] elements are equal {0-}, this.theArray[] elements are equal {0-}> (UInt,SJJ)
  <this.theArray[capacity+1..] elements are equal {1-}, this.theArray[capacity+1..] elements are equal {1-}> (UInt,SUU)
  <this.theArray[capacity..] elements are equal {0-}, this.theArray[capacity..] elements are equal {0-}> (UInt,SJJ)
  <this.theArray[capacity+1..] contains no duplicates {1-}, this.theArray[capacity+1..] contains no duplicates {1-}> (UInt,SUU)
  <this.theArray[capacity..] contains no duplicates {1-}, this.theArray[capacity..] contains no duplicates {1-}> (UInt,SUU)
  <this.theArray[capacity+1..] one of {  } {1-}, this.theArray[capacity+1..] one of {  } {1-}> (UInt,SUU)
  <null, this.theArray[capacity..] == [] {0+}> (UInt,MJ)
  <this.theArray.class == "[Ljava.lang.Object;" {0+}, this.theArray.class == "[Ljava.lang.Object;" {0+}> (UInt,SJJ)
  <this.theArray[].class elements == null {0+}, this.theArray[].class elements == null {0+}> (UInt,SJJ)
<DataStructures.StackAr.<init>(I)V:::EXIT33>
  <null, this.theArray[capacity-1] in this.theArray[] {0-}> (Bin,MJ)
  <null, this.theArray[] elements == this.theArray[capacity-1] {0+}> (Bin,MJ)
  <null, this.theArray[capacity..] elements ?cmp? this.theArray[capacity-1] {1-}> (Bin,MU)
  <capacity == capacity {0-}, capacity == capacity {0-}> (Bin,SJJ)
  <size(this.theArray[])-1 == size(this.theArray[])-1 {0-}, size(this.theArray[])-1 == size(this.theArray[])-1 {0-}> (Bin,SJJ)
  <this.theArray == this.theArray {0-}, this.theArray == this.theArray {0-}> (Bin,SJJ)
  <null, this.theArray[capacity-1] == this.theArray[capacity-1] {0-}> (Bin,MJ)
  <this.topOfStack == this.topOfStack {0-}, this.topOfStack == this.topOfStack {0-}> (Bin,SJJ)
  <capacity >= capacity {0.8864-}, capacity >= capacity {0.951-}> (Bin,SUU)
  <capacity >= size(this.theArray[])-1 {0.1108-}, capacity >= size(this.theArray[])-1 {0.0594-}> (Bin,SUU)
  <capacity >= this.topOfStack {0.0554-}, capacity >= this.topOfStack {0.0297-}> (Bin,SUU)
  <size(this.theArray[])-1 >= size(this.theArray[])-1 {0.8864-}, size(this.theArray[])-1 >= size(this.theArray[])-1 {0.951-}> (Bin,SUU)
  <this.topOfStack >= this.topOfStack {0.8864-}, this.topOfStack >= this.topOfStack {0.951-}> (Bin,SUU)
  <capacity > size(this.theArray[])-1 {0.1108-}, capacity > size(this.theArray[])-1 {0.0594-}> (Bin,SUU)
  <capacity > this.topOfStack {0.0554-}, capacity > this.topOfStack {0.0297-}> (Bin,SUU)
  <capacity <= capacity {0.8864-}, capacity <= capacity {0.951-}> (Bin,SUU)
  <size(this.theArray[])-1 <= size(this.theArray[])-1 {0.8864-}, size(this.theArray[])-1 <= size(this.theArray[])-1 {0.951-}> (Bin,SUU)
  <this.topOfStack <= size(this.theArray[])-1 {0.1108-}, this.topOfStack <= size(this.theArray[])-1 {0.0297-}> (Bin,SUU)
  <this.topOfStack <= this.topOfStack {0.8864-}, this.topOfStack <= this.topOfStack {0.951-}> (Bin,SUU)
  <null, this.topOfStack < size(this.theArray[])-1 {0.0297-}> (Bin,MU)
  <capacity != size(this.theArray[])-1 {0.1108-}, capacity != size(this.theArray[])-1 {0.0594-}> (Bin,SUU)
  <capacity != this.topOfStack {0.0554-}, capacity != this.topOfStack {0.0297-}> (Bin,SUU)
  <null, this.topOfStack != size(this.theArray[])-1 {0.0297-}> (Bin,MU)
  <capacity == capacity {0-}, capacity == capacity {0-}> (Bin,SJJ)
  <size(this.theArray[])-1 == capacity - 1 {0-}, size(this.theArray[])-1 == capacity - 1 {0-}> (Bin,SJJ)
  <Too few samples for linear relation: 0 * Field{topOfStack}[this] == 0 * Field{topOfStack}[this] + 0 {1-}, Too few samples for linear relation: 0 * Field{topOfStack}[this] == 0 * Field{topOfStack}[this] + 0 {1-}> (Bin,SUU)
  <this.theArray[capacity..] == ~this.theArray[capacity..] {1-}, this.theArray[capacity..] == ~this.theArray[capacity..] {1-}> (Bin,SUU)
  <this.theArray[capacity..] == ~this.theArray[capacity..] {1-}, this.theArray[capacity..] == ~this.theArray[capacity..] {1-}> (Bin,SUU)
  <this.theArray[] == this.theArray[] (elementwise) {0-}, this.theArray[] == this.theArray[] (elementwise) {0-}> (Bin,SJJ)
  <this.theArray[capacity..] ?cmp? this.theArray[capacity..] (elementwise) {1-}, this.theArray[capacity..] ?cmp? this.theArray[capacity..] (elementwise) {1-}> (Bin,SUU)
  <Too few samples for linear relation: 0 * Elements[Field{theArray}[this]] == 0 * Elements[Field{theArray}[this]] + 0 {1-}, Too few samples for linear relation: 0 * Elements[Field{theArray}[this]] == 0 * Elements[Field{theArray}[this]] + 0 {1-}> (Bin,SUU)
  <Too few samples for linear relation: 0 * Slice{capacity,}[Elements[Field{theArray}[this]]] == 0 * Slice{capacity,}[Elements[Field{theArray}[this]]] + 0 {1-}, Too few samples for linear relation: 0 * Slice{capacity,}[Elements[Field{theArray}[this]]] == 0 * Slice{capacity,}[Elements[Field{theArray}[this]]] + 0 {1-}> (Bin,SUU)
  <this.theArray[] is the reverse of this.theArray[] {0-}, this.theArray[] is the reverse of this.theArray[] {0-}> (Bin,SJJ)
  <this.theArray[capacity..] is the reverse of this.theArray[capacity..] {0-}, this.theArray[capacity..] is the reverse of this.theArray[capacity..] {0-}> (Bin,SJJ)
  <this.theArray[] == this.theArray[] {0-}, this.theArray[] == this.theArray[] {0-}> (Bin,SJJ)
  <this.theArray[capacity..] == this.theArray[capacity..] {0-}, this.theArray[capacity..] == this.theArray[capacity..] {0-}> (Bin,SJJ)
  <this.theArray[] is a {sub,super}sequence of this.theArray[] {1-}, this.theArray[] is a {sub,super}sequence of this.theArray[] {1-}> (Bin,SUU)
  <this.theArray[capacity..] is a subsequence of this.theArray[] {0-}, this.theArray[capacity..] is a subsequence of this.theArray[] {0-}> (Bin,SJJ)
  <this.theArray[capacity..] is a {sub,super}sequence of this.theArray[capacity..] {1-}, this.theArray[capacity..] is a {sub,super}sequence of this.theArray[capacity..] {1-}> (Bin,SUU)
  <this.theArray.class == this.theArray.class {0-}, this.theArray.class == this.theArray.class {0-}> (Bin,SJJ)
  <capacity == capacity & capacity {3-}, capacity == capacity & capacity {3-}> (Ter,SUU)
  <capacity == capacity & capacity {3-}, capacity == capacity & capacity {3-}> (Ter,SUU)
  <capacity == capacity & capacity {3-}, capacity == capacity & capacity {3-}> (Ter,SUU)
  <capacity == capacity | capacity {3-}, capacity == capacity | capacity {3-}> (Ter,SUU)
  <capacity == capacity | capacity {3-}, capacity == capacity | capacity {3-}> (Ter,SUU)
  <capacity == capacity | capacity {3-}, capacity == capacity | capacity {3-}> (Ter,SUU)
  <capacity == java.lang.Math.max(capacity, capacity) {3-}, capacity == java.lang.Math.max(capacity, capacity) {3-}> (Ter,SUU)
  <capacity == java.lang.Math.max(capacity, capacity) {3-}, capacity == java.lang.Math.max(capacity, capacity) {3-}> (Ter,SUU)
  <capacity == java.lang.Math.max(capacity, capacity) {3-}, capacity == java.lang.Math.max(capacity, capacity) {3-}> (Ter,SUU)
  <capacity == java.lang.Math.min(capacity, capacity) {3-}, capacity == java.lang.Math.min(capacity, capacity) {3-}> (Ter,SUU)
  <capacity == java.lang.Math.min(capacity, capacity) {3-}, capacity == java.lang.Math.min(capacity, capacity) {3-}> (Ter,SUU)
  <capacity == java.lang.Math.min(capacity, capacity) {3-}, capacity == java.lang.Math.min(capacity, capacity) {3-}> (Ter,SUU)
  <capacity == org.plumelib.util.MathPlume.gcd(capacity, capacity) {3-}, capacity == org.plumelib.util.MathPlume.gcd(capacity, capacity) {3-}> (Ter,SUU)
  <capacity == org.plumelib.util.MathPlume.gcd(capacity, capacity) {3-}, capacity == org.plumelib.util.MathPlume.gcd(capacity, capacity) {3-}> (Ter,SUU)
  <capacity == org.plumelib.util.MathPlume.gcd(capacity, capacity) {3-}, capacity == org.plumelib.util.MathPlume.gcd(capacity, capacity) {3-}> (Ter,SUU)
  <capacity == java.lang.Math.max(capacity, size(this.theArray[])-1) {0.5-}, capacity == java.lang.Math.max(capacity, size(this.theArray[])-1) {0-}> (Ter,SUJ)
  <capacity == java.lang.Math.max(capacity, size(this.theArray[])-1) {0.5-}, capacity == java.lang.Math.max(capacity, size(this.theArray[])-1) {0-}> (Ter,SUJ)
  <capacity == capacity & this.topOfStack {1-}, capacity == capacity & this.topOfStack {1-}> (Ter,SUU)
  <capacity == capacity & this.topOfStack {1-}, capacity == capacity & this.topOfStack {1-}> (Ter,SUU)
  <capacity == java.lang.Math.max(capacity, this.topOfStack) {1-}, capacity == java.lang.Math.max(capacity, this.topOfStack) {1-}> (Ter,SUU)
  <capacity == java.lang.Math.max(capacity, this.topOfStack) {1-}, capacity == java.lang.Math.max(capacity, this.topOfStack) {1-}> (Ter,SUU)
  <size(this.theArray[])-1 == java.lang.Math.min(capacity, size(this.theArray[])-1) {0.25-}, size(this.theArray[])-1 == java.lang.Math.min(capacity, size(this.theArray[])-1) {0-}> (Ter,SUJ)
  <size(this.theArray[])-1 == java.lang.Math.min(capacity, size(this.theArray[])-1) {0.25-}, size(this.theArray[])-1 == java.lang.Math.min(capacity, size(this.theArray[])-1) {0-}> (Ter,SUJ)
  <null, size(this.theArray[])-1 == size(this.theArray[])-1 % capacity {0-}> (Ter,MJ)
  <null, size(this.theArray[])-1 == size(this.theArray[])-1 % capacity {0-}> (Ter,MJ)
  <this.topOfStack == capacity | this.topOfStack {0.25-}, this.topOfStack == capacity | this.topOfStack {0-}> (Ter,SUJ)
  <this.topOfStack == capacity | this.topOfStack {0.25-}, this.topOfStack == capacity | this.topOfStack {0-}> (Ter,SUJ)
  <this.topOfStack == java.lang.Math.min(capacity, this.topOfStack) {0.25-}, this.topOfStack == java.lang.Math.min(capacity, this.topOfStack) {0-}> (Ter,SUJ)
  <this.topOfStack == java.lang.Math.min(capacity, this.topOfStack) {0.25-}, this.topOfStack == java.lang.Math.min(capacity, this.topOfStack) {0-}> (Ter,SUJ)
  <this.topOfStack == this.topOfStack >> capacity {0.25-}, this.topOfStack == this.topOfStack % capacity {0-}> (Ter,DUJ)
  <this.topOfStack == this.topOfStack >> capacity {0.25-}, this.topOfStack == this.topOfStack % capacity {0-}> (Ter,DUJ)
  <this.topOfStack == org.plumelib.util.MathPlume.gcd(capacity, this.topOfStack) {0.25-}, this.topOfStack == this.topOfStack >> capacity {0-}> (Ter,DUJ)
  <this.topOfStack == org.plumelib.util.MathPlume.gcd(capacity, this.topOfStack) {0.25-}, this.topOfStack == this.topOfStack >> capacity {0-}> (Ter,DUJ)
  <null, this.topOfStack == org.plumelib.util.MathPlume.gcd(capacity, this.topOfStack) {0-}> (Ter,MJ)
  <null, this.topOfStack == org.plumelib.util.MathPlume.gcd(capacity, this.topOfStack) {0-}> (Ter,MJ)
  <size(this.theArray[])-1 == java.lang.Math.max(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == java.lang.Math.max(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == java.lang.Math.max(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == java.lang.Math.max(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == java.lang.Math.max(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == java.lang.Math.max(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == size(this.theArray[])-1 & size(this.theArray[])-1 {3-}, size(this.theArray[])-1 == size(this.theArray[])-1 & size(this.theArray[])-1 {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == size(this.theArray[])-1 & size(this.theArray[])-1 {3-}, size(this.theArray[])-1 == size(this.theArray[])-1 & size(this.theArray[])-1 {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == size(this.theArray[])-1 & size(this.theArray[])-1 {3-}, size(this.theArray[])-1 == size(this.theArray[])-1 & size(this.theArray[])-1 {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == size(this.theArray[])-1 | size(this.theArray[])-1 {3-}, size(this.theArray[])-1 == size(this.theArray[])-1 | size(this.theArray[])-1 {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == size(this.theArray[])-1 | size(this.theArray[])-1 {3-}, size(this.theArray[])-1 == size(this.theArray[])-1 | size(this.theArray[])-1 {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == size(this.theArray[])-1 | size(this.theArray[])-1 {3-}, size(this.theArray[])-1 == size(this.theArray[])-1 | size(this.theArray[])-1 {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == org.plumelib.util.MathPlume.gcd(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == org.plumelib.util.MathPlume.gcd(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == org.plumelib.util.MathPlume.gcd(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == org.plumelib.util.MathPlume.gcd(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == org.plumelib.util.MathPlume.gcd(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == org.plumelib.util.MathPlume.gcd(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == java.lang.Math.max(this.topOfStack, size(this.theArray[])-1) {1-}, size(this.theArray[])-1 == java.lang.Math.max(this.topOfStack, size(this.theArray[])-1) {1-}> (Ter,SUU)
  <size(this.theArray[])-1 == java.lang.Math.max(this.topOfStack, size(this.theArray[])-1) {1-}, size(this.theArray[])-1 == java.lang.Math.max(this.topOfStack, size(this.theArray[])-1) {1-}> (Ter,SUU)
  <size(this.theArray[])-1 == this.topOfStack & size(this.theArray[])-1 {1-}, size(this.theArray[])-1 == this.topOfStack & size(this.theArray[])-1 {1-}> (Ter,SUU)
  <size(this.theArray[])-1 == this.topOfStack & size(this.theArray[])-1 {1-}, size(this.theArray[])-1 == this.topOfStack & size(this.theArray[])-1 {1-}> (Ter,SUU)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])-1) {0.5-}, this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])-1) {0-}> (Ter,SUJ)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])-1) {0.5-}, this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])-1) {0-}> (Ter,SUJ)
  <this.topOfStack == this.topOfStack >> size(this.theArray[])-1 {0.5-}, this.topOfStack == this.topOfStack >> size(this.theArray[])-1 {0-}> (Ter,SUJ)
  <this.topOfStack == this.topOfStack >> size(this.theArray[])-1 {0.5-}, this.topOfStack == this.topOfStack >> size(this.theArray[])-1 {0-}> (Ter,SUJ)
  <this.topOfStack == this.topOfStack | size(this.theArray[])-1 {0.5-}, this.topOfStack == this.topOfStack | size(this.theArray[])-1 {0-}> (Ter,SUJ)
  <this.topOfStack == this.topOfStack | size(this.theArray[])-1 {0.5-}, this.topOfStack == this.topOfStack | size(this.theArray[])-1 {0-}> (Ter,SUJ)
  <this.topOfStack == java.lang.Math.max(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == java.lang.Math.max(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <this.topOfStack == java.lang.Math.max(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == java.lang.Math.max(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <this.topOfStack == java.lang.Math.max(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == java.lang.Math.max(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == java.lang.Math.min(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == java.lang.Math.min(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == java.lang.Math.min(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <this.topOfStack == this.topOfStack & this.topOfStack {3-}, this.topOfStack == this.topOfStack & this.topOfStack {3-}> (Ter,SUU)
  <this.topOfStack == this.topOfStack & this.topOfStack {3-}, this.topOfStack == this.topOfStack & this.topOfStack {3-}> (Ter,SUU)
  <this.topOfStack == this.topOfStack & this.topOfStack {3-}, this.topOfStack == this.topOfStack & this.topOfStack {3-}> (Ter,SUU)
  <this.topOfStack == this.topOfStack >> this.topOfStack {3-}, this.topOfStack == this.topOfStack >> this.topOfStack {3-}> (Ter,SUU)
  <this.topOfStack == this.topOfStack >> this.topOfStack {3-}, this.topOfStack == this.topOfStack >> this.topOfStack {3-}> (Ter,SUU)
  <this.topOfStack == this.topOfStack >> this.topOfStack {3-}, this.topOfStack == this.topOfStack >> this.topOfStack {3-}> (Ter,SUU)
  <this.topOfStack == this.topOfStack >> this.topOfStack {3-}, this.topOfStack == this.topOfStack >> this.topOfStack {3-}> (Ter,SUU)
  <this.topOfStack == this.topOfStack >> this.topOfStack {3-}, this.topOfStack == this.topOfStack >> this.topOfStack {3-}> (Ter,SUU)
  <this.topOfStack == this.topOfStack >> this.topOfStack {3-}, this.topOfStack == this.topOfStack >> this.topOfStack {3-}> (Ter,SUU)
  <this.topOfStack == this.topOfStack | this.topOfStack {3-}, this.topOfStack == this.topOfStack | this.topOfStack {3-}> (Ter,SUU)
  <this.topOfStack == this.topOfStack | this.topOfStack {3-}, this.topOfStack == this.topOfStack | this.topOfStack {3-}> (Ter,SUU)
  <this.topOfStack == this.topOfStack | this.topOfStack {3-}, this.topOfStack == this.topOfStack | this.topOfStack {3-}> (Ter,SUU)
  <this.topOfStack == org.plumelib.util.MathPlume.gcd(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == org.plumelib.util.MathPlume.gcd(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <this.topOfStack == org.plumelib.util.MathPlume.gcd(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == org.plumelib.util.MathPlume.gcd(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <this.topOfStack == org.plumelib.util.MathPlume.gcd(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == org.plumelib.util.MathPlume.gcd(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <Too few samples for linear relation: 0 * Field{topOfStack}[this] == 0 * Field{topOfStack}[this] + 0 * Field{topOfStack}[this] + 0 {1-}, Too few samples for linear relation: 0 * Field{topOfStack}[this] == 0 * Field{topOfStack}[this] + 0 * Field{topOfStack}[this] + 0 {1-}> (Ter,SUU)
  <capacity >= 0 {0-}, capacity >= 2 {1-}> (UInt,DJU)
  <this.topOfStack >= -1 {0.8136-}, this.topOfStack >= -1 {0.8333-}> (U!Int,SUU)
  <null, capacity != 0 {1-}> (UInt,MU)
  <null, size(this.theArray[])-1 != 0 {1-}> (UInt,MU)
  <this.theArray != null {0.0077+}, this.theArray != null {0.1317-}> (UInt,SJU)
  <this.topOfStack != 0 {1-}, this.topOfStack != 0 {1-}> (UInt,SUU)
  <null, this.theArray[capacity-1] == null {0-}> (UInt,MJ)
  <this.topOfStack == -1 {0+}, this.topOfStack == -1 {0+}> (UInt,SJJ)
  <capacity <= 20 {0.7308-}, capacity <= 15 {1-}> (U!Int,DUU)
  <this.topOfStack <= -1 {0.8136-}, this.topOfStack <= -1 {0.8333-}> (U!Int,SUU)
  <this.theArray[capacity..] elements != null {0.0077+}, this.theArray[capacity..] elements != null {0.1317-}> (UInt,SJU)
  <this.theArray[] elements == null {0+}, this.theArray[] elements == null {0+}> (UInt,SJJ)
  <this.theArray[capacity..] elements one of {  } {1-}, this.theArray[capacity..] elements one of {  } {1-}> (UInt,SUU)
  <this.theArray[] elements are equal {0-}, this.theArray[] elements are equal {0-}> (UInt,SJJ)
  <this.theArray[capacity..] elements are equal {0-}, this.theArray[capacity..] elements are equal {0-}> (UInt,SJJ)
  <this.theArray[capacity..] contains no duplicates {1-}, this.theArray[capacity..] contains no duplicates {1-}> (UInt,SUU)
  <null, this.theArray[capacity..] == [] {0+}> (UInt,MJ)
  <this.theArray.class == "[Ljava.lang.Object;" {0+}, this.theArray.class == "[Ljava.lang.Object;" {0+}> (UInt,SJJ)
  <this.theArray[].class elements == null {0+}, this.theArray[].class elements == null {0+}> (UInt,SJJ)
<DataStructures.StackAr.isEmpty()Z:::ENTER>
  <size(this.theArray[]) == size(this.theArray[]) {0-}, size(this.theArray[]) == size(this.theArray[]) {0-}> (Bin,SJJ)
  <size(this.theArray[])-1 == size(this.theArray[])-1 {0-}, size(this.theArray[])-1 == size(this.theArray[])-1 {0-}> (Bin,SJJ)
  <this.theArray == this.theArray {0-}, this.theArray == this.theArray {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack-1] == this.theArray[this.topOfStack-1] {0-}, this.theArray[this.topOfStack-1] == this.theArray[this.topOfStack-1] {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack] == this.theArray[this.topOfStack] {0-}, this.theArray[this.topOfStack] == this.theArray[this.topOfStack] {0-}> (Bin,SJJ)
  <this.topOfStack == this.topOfStack {0-}, this.topOfStack == this.topOfStack {0-}> (Bin,SJJ)
  <size(this.theArray[]) >= size(this.theArray[]) {0.0335-}, size(this.theArray[]) >= size(this.theArray[]) {0.2549-}> (Bin,SUU)
  <size(this.theArray[]) >= size(this.theArray[])-1 {0.0042-}, size(this.theArray[]) >= size(this.theArray[])-1 {0.0159-}> (Bin,SJU)
  <size(this.theArray[])-1 >= size(this.theArray[])-1 {0.0335-}, size(this.theArray[])-1 >= size(this.theArray[])-1 {0.2549-}> (Bin,SUU)
  <this.topOfStack >= this.topOfStack {0.0335-}, this.topOfStack >= this.topOfStack {0.2549-}> (Bin,SUU)
  <size(this.theArray[]) > size(this.theArray[])-1 {0.0042-}, size(this.theArray[]) > size(this.theArray[])-1 {0.0159-}> (Bin,SJU)
  <size(this.theArray[]) <= size(this.theArray[]) {0.0335-}, size(this.theArray[]) <= size(this.theArray[]) {0.2549-}> (Bin,SUU)
  <size(this.theArray[])-1 <= size(this.theArray[])-1 {0.0335-}, size(this.theArray[])-1 <= size(this.theArray[])-1 {0.2549-}> (Bin,SUU)
  <this.topOfStack <= size(this.theArray[]) {0.0001-}, this.topOfStack <= size(this.theArray[]) {0.001-}> (Bin,SJJ)
  <this.topOfStack <= size(this.theArray[])-1 {0.0001+}, this.topOfStack <= size(this.theArray[])-1 {0.001+}> (Bin,SJJ)
  <this.topOfStack <= this.topOfStack {0.0335-}, this.topOfStack <= this.topOfStack {0.2549-}> (Bin,SUU)
  <this.topOfStack < size(this.theArray[]) {0.0001-}, this.topOfStack < size(this.theArray[]) {0.001-}> (Bin,SJJ)
  <size(this.theArray[]) != size(this.theArray[])-1 {0.0042-}, size(this.theArray[]) != size(this.theArray[])-1 {0.0159-}> (Bin,SJU)
  <this.topOfStack != size(this.theArray[]) {0.0001-}, this.topOfStack != size(this.theArray[]) {0.001-}> (Bin,SJJ)
  <this.topOfStack == this.topOfStack {0-}, this.topOfStack == this.topOfStack {0-}> (Bin,SJJ)
  <this.theArray[0..this.topOfStack-1] == this.theArray[0..this.topOfStack-1] (elementwise) {0-}, this.theArray[0..this.topOfStack-1] == this.theArray[0..this.topOfStack-1] (elementwise) {0-}> (Bin,SJJ)
  <this.theArray[0..this.topOfStack] == this.theArray[0..this.topOfStack] (elementwise) {0-}, this.theArray[0..this.topOfStack] == this.theArray[0..this.topOfStack] (elementwise) {0-}> (Bin,SJJ)
  <this.theArray[] == this.theArray[] (elementwise) {0-}, this.theArray[] == this.theArray[] (elementwise) {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack+1..] == this.theArray[this.topOfStack+1..] (elementwise) {0-}, this.theArray[this.topOfStack+1..] == this.theArray[this.topOfStack+1..] (elementwise) {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack..] == this.theArray[this.topOfStack..] (elementwise) {0-}, this.theArray[this.topOfStack..] == this.theArray[this.topOfStack..] (elementwise) {0-}> (Bin,SJJ)
  <this.theArray[0..this.topOfStack-1] == this.theArray[0..this.topOfStack-1] {0-}, this.theArray[0..this.topOfStack-1] == this.theArray[0..this.topOfStack-1] {0-}> (Bin,SJJ)
  <this.theArray[0..this.topOfStack] == this.theArray[0..this.topOfStack] {0-}, this.theArray[0..this.topOfStack] == this.theArray[0..this.topOfStack] {0-}> (Bin,SJJ)
  <this.theArray[] == this.theArray[] {0-}, this.theArray[] == this.theArray[] {0-}> (Bin,SJJ)
  <Too few samples for linear relation: 0 * Slice{Add{+1}[Field{topOfStack}[this]],}[Elements[Field{theArray}[this]]] == 0 * Slice{Add{+1}[Field{topOfStack}[this]],}[Elements[Field{theArray}[this]]] + 0 {1-}, Too few samples for linear relation: 0 * Slice{Add{+1}[Field{topOfStack}[this]],}[Elements[Field{theArray}[this]]] == 0 * Slice{Add{+1}[Field{topOfStack}[this]],}[Elements[Field{theArray}[this]]] + 0 {1-}> (Bin,SUU)
  <this.theArray[this.topOfStack..] == this.theArray[this.topOfStack..] {0-}, this.theArray[this.topOfStack..] == this.theArray[this.topOfStack..] {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack+1..] is the reverse of this.theArray[this.topOfStack+1..] {0-}, this.theArray[this.topOfStack+1..] is the reverse of this.theArray[this.topOfStack+1..] {0-}> (Bin,SJJ)
  <this.theArray[0..this.topOfStack-1] == this.theArray[0..this.topOfStack-1] {0-}, this.theArray[0..this.topOfStack-1] == this.theArray[0..this.topOfStack-1] {0-}> (Bin,SJJ)
  <this.theArray[0..this.topOfStack] == this.theArray[0..this.topOfStack] {0-}, this.theArray[0..this.topOfStack] == this.theArray[0..this.topOfStack] {0-}> (Bin,SJJ)
  <this.theArray[] == this.theArray[] {0-}, this.theArray[] == this.theArray[] {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack+1..] == this.theArray[this.topOfStack+1..] {0-}, this.theArray[this.topOfStack+1..] == this.theArray[this.topOfStack+1..] {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack..] == this.theArray[this.topOfStack..] {0-}, this.theArray[this.topOfStack..] == this.theArray[this.topOfStack..] {0-}> (Bin,SJJ)
  <this.theArray[] is a {sub,super}sequence of this.theArray[] {1-}, this.theArray[] is a {sub,super}sequence of this.theArray[] {1-}> (Bin,SUU)
  <this.theArray.class == this.theArray.class {0-}, this.theArray.class == this.theArray.class {0-}> (Bin,SJJ)
  <size(this.theArray[]) == java.lang.Math.max(size(this.theArray[]), size(this.theArray[])) {3-}, size(this.theArray[]) == java.lang.Math.max(size(this.theArray[]), size(this.theArray[])) {3-}> (Ter,SUU)
  <size(this.theArray[]) == java.lang.Math.max(size(this.theArray[]), size(this.theArray[])) {3-}, size(this.theArray[]) == java.lang.Math.max(size(this.theArray[]), size(this.theArray[])) {3-}> (Ter,SUU)
  <size(this.theArray[]) == java.lang.Math.max(size(this.theArray[]), size(this.theArray[])) {3-}, size(this.theArray[]) == java.lang.Math.max(size(this.theArray[]), size(this.theArray[])) {3-}> (Ter,SUU)
  <size(this.theArray[]) == java.lang.Math.min(size(this.theArray[]), size(this.theArray[])) {3-}, size(this.theArray[]) == java.lang.Math.min(size(this.theArray[]), size(this.theArray[])) {3-}> (Ter,SUU)
  <size(this.theArray[]) == java.lang.Math.min(size(this.theArray[]), size(this.theArray[])) {3-}, size(this.theArray[]) == java.lang.Math.min(size(this.theArray[]), size(this.theArray[])) {3-}> (Ter,SUU)
  <size(this.theArray[]) == java.lang.Math.min(size(this.theArray[]), size(this.theArray[])) {3-}, size(this.theArray[]) == java.lang.Math.min(size(this.theArray[]), size(this.theArray[])) {3-}> (Ter,SUU)
  <size(this.theArray[]) == size(this.theArray[]) & size(this.theArray[]) {3-}, size(this.theArray[]) == size(this.theArray[]) & size(this.theArray[]) {3-}> (Ter,SUU)
  <size(this.theArray[]) == size(this.theArray[]) & size(this.theArray[]) {3-}, size(this.theArray[]) == size(this.theArray[]) & size(this.theArray[]) {3-}> (Ter,SUU)
  <size(this.theArray[]) == size(this.theArray[]) & size(this.theArray[]) {3-}, size(this.theArray[]) == size(this.theArray[]) & size(this.theArray[]) {3-}> (Ter,SUU)
  <size(this.theArray[]) == size(this.theArray[]) | size(this.theArray[]) {3-}, size(this.theArray[]) == size(this.theArray[]) | size(this.theArray[]) {3-}> (Ter,SUU)
  <size(this.theArray[]) == size(this.theArray[]) | size(this.theArray[]) {3-}, size(this.theArray[]) == size(this.theArray[]) | size(this.theArray[]) {3-}> (Ter,SUU)
  <size(this.theArray[]) == size(this.theArray[]) | size(this.theArray[]) {3-}, size(this.theArray[]) == size(this.theArray[]) | size(this.theArray[]) {3-}> (Ter,SUU)
  <size(this.theArray[]) == org.plumelib.util.MathPlume.gcd(size(this.theArray[]), size(this.theArray[])) {3-}, size(this.theArray[]) == org.plumelib.util.MathPlume.gcd(size(this.theArray[]), size(this.theArray[])) {3-}> (Ter,SUU)
  <size(this.theArray[]) == org.plumelib.util.MathPlume.gcd(size(this.theArray[]), size(this.theArray[])) {3-}, size(this.theArray[]) == org.plumelib.util.MathPlume.gcd(size(this.theArray[]), size(this.theArray[])) {3-}> (Ter,SUU)
  <size(this.theArray[]) == org.plumelib.util.MathPlume.gcd(size(this.theArray[]), size(this.theArray[])) {3-}, size(this.theArray[]) == org.plumelib.util.MathPlume.gcd(size(this.theArray[]), size(this.theArray[])) {3-}> (Ter,SUU)
  <size(this.theArray[]) == java.lang.Math.max(size(this.theArray[])-1, size(this.theArray[])) {0.5-}, size(this.theArray[]) == java.lang.Math.max(size(this.theArray[])-1, size(this.theArray[])) {0-}> (Ter,SUJ)
  <size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[])-1, size(this.theArray[])) {0.25-}, size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[])-1, size(this.theArray[])) {0-}> (Ter,SUJ)
  <null, size(this.theArray[])-1 == size(this.theArray[])-1 % size(this.theArray[]) {0-}> (Ter,MJ)
  <size(this.theArray[])-1 == java.lang.Math.max(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == java.lang.Math.max(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == java.lang.Math.max(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == java.lang.Math.max(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == java.lang.Math.max(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == java.lang.Math.max(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == size(this.theArray[])-1 & size(this.theArray[])-1 {3-}, size(this.theArray[])-1 == size(this.theArray[])-1 & size(this.theArray[])-1 {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == size(this.theArray[])-1 & size(this.theArray[])-1 {3-}, size(this.theArray[])-1 == size(this.theArray[])-1 & size(this.theArray[])-1 {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == size(this.theArray[])-1 & size(this.theArray[])-1 {3-}, size(this.theArray[])-1 == size(this.theArray[])-1 & size(this.theArray[])-1 {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == size(this.theArray[])-1 | size(this.theArray[])-1 {3-}, size(this.theArray[])-1 == size(this.theArray[])-1 | size(this.theArray[])-1 {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == size(this.theArray[])-1 | size(this.theArray[])-1 {3-}, size(this.theArray[])-1 == size(this.theArray[])-1 | size(this.theArray[])-1 {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == size(this.theArray[])-1 | size(this.theArray[])-1 {3-}, size(this.theArray[])-1 == size(this.theArray[])-1 | size(this.theArray[])-1 {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == org.plumelib.util.MathPlume.gcd(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == org.plumelib.util.MathPlume.gcd(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == org.plumelib.util.MathPlume.gcd(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == org.plumelib.util.MathPlume.gcd(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == org.plumelib.util.MathPlume.gcd(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == org.plumelib.util.MathPlume.gcd(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[]) == java.lang.Math.max(this.topOfStack, size(this.theArray[])) {0-}, size(this.theArray[]) == java.lang.Math.max(this.topOfStack, size(this.theArray[])) {0-}> (Ter,SJJ)
  <size(this.theArray[]) == java.lang.Math.max(this.topOfStack, size(this.theArray[])) {0-}, size(this.theArray[]) == java.lang.Math.max(this.topOfStack, size(this.theArray[])) {0-}> (Ter,SJJ)
  <size(this.theArray[])-1 == java.lang.Math.max(this.topOfStack, size(this.theArray[])-1) {0-}, size(this.theArray[])-1 == java.lang.Math.max(this.topOfStack, size(this.theArray[])-1) {0-}> (Ter,SJJ)
  <size(this.theArray[])-1 == java.lang.Math.max(this.topOfStack, size(this.theArray[])-1) {0-}, size(this.theArray[])-1 == java.lang.Math.max(this.topOfStack, size(this.theArray[])-1) {0-}> (Ter,SJJ)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])) {0.25-}, this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])) {0-}> (Ter,SUJ)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])) {0.25-}, this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])) {0-}> (Ter,SUJ)
  <null, this.topOfStack == this.topOfStack % size(this.theArray[]) {0-}> (Ter,MJ)
  <null, this.topOfStack == this.topOfStack % size(this.theArray[]) {0-}> (Ter,MJ)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])-1) {0.5-}, this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])-1) {0-}> (Ter,SUJ)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])-1) {0.5-}, this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])-1) {0-}> (Ter,SUJ)
  <this.topOfStack == java.lang.Math.max(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == java.lang.Math.max(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <this.topOfStack == java.lang.Math.max(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == java.lang.Math.max(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <this.topOfStack == java.lang.Math.max(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == java.lang.Math.max(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == java.lang.Math.min(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == java.lang.Math.min(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == java.lang.Math.min(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <this.topOfStack == this.topOfStack & this.topOfStack {3-}, this.topOfStack == this.topOfStack & this.topOfStack {3-}> (Ter,SUU)
  <this.topOfStack == this.topOfStack & this.topOfStack {3-}, this.topOfStack == this.topOfStack & this.topOfStack {3-}> (Ter,SUU)
  <this.topOfStack == this.topOfStack & this.topOfStack {3-}, this.topOfStack == this.topOfStack & this.topOfStack {3-}> (Ter,SUU)
  <this.topOfStack == this.topOfStack | this.topOfStack {3-}, this.topOfStack == this.topOfStack | this.topOfStack {3-}> (Ter,SUU)
  <this.topOfStack == this.topOfStack | this.topOfStack {3-}, this.topOfStack == this.topOfStack | this.topOfStack {3-}> (Ter,SUU)
  <this.topOfStack == this.topOfStack | this.topOfStack {3-}, this.topOfStack == this.topOfStack | this.topOfStack {3-}> (Ter,SUU)
  <this.topOfStack == org.plumelib.util.MathPlume.gcd(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == org.plumelib.util.MathPlume.gcd(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <this.topOfStack == org.plumelib.util.MathPlume.gcd(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == org.plumelib.util.MathPlume.gcd(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <this.topOfStack == org.plumelib.util.MathPlume.gcd(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == org.plumelib.util.MathPlume.gcd(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == 2 * size(this.theArray[]) - size(this.theArray[]) - 1 {0-}, size(this.theArray[])-1 == 2 * size(this.theArray[]) - size(this.theArray[]) - 1 {0-}> (Ter,SJJ)
  <size(this.theArray[])-1 == 0.5 * size(this.theArray[]) + 0.5 * size(this.theArray[])-1 - 0.5 {0-}, size(this.theArray[])-1 == 0.5 * size(this.theArray[]) + 0.5 * size(this.theArray[])-1 - 0.5 {0-}> (Ter,SJJ)
  <size(this.theArray[]) >= 0 {0-}, size(this.theArray[]) >= 2 {0.8529-}> (UInt,DJU)
  <this.topOfStack >= -1 {0+}, this.topOfStack >= -1 {0+}> (U!Int,SJJ)
  <null, size(this.theArray[]) != 0 {1-}> (UInt,MU)
  <null, size(this.theArray[])-1 != 0 {1-}> (UInt,MU)
  <this.theArray != null {0.0001+}, this.theArray != null {0.0001+}> (UInt,SJJ)
  <this.theArray[this.topOfStack-1] != null {0.0001-}, this.theArray[this.topOfStack-1] != null {0.0001-}> (UInt,SJJ)
  <this.theArray[this.topOfStack] != null {0.0001-}, this.theArray[this.topOfStack] != null {0.0001-}> (UInt,SJJ)
  <size(this.theArray[]) <= 20 {0-}, size(this.theArray[]) <= 15 {0.033-}> (U!Int,DJU)
  <this.topOfStack <= 19 {0.5886-}, this.topOfStack <= 14 {0.767-}> (U!Int,DUU)
  <this.theArray[0..this.topOfStack-1] elements != null {0.0001-}, this.theArray[0..this.topOfStack-1] elements != null {0.0001-}> (UInt,SJJ)
  <this.theArray[0..this.topOfStack] elements != null {0.0001+}, this.theArray[0..this.topOfStack] elements != null {0.0001+}> (UInt,SJJ)
  <this.theArray[this.topOfStack+1..] elements == null {0+}, this.theArray[this.topOfStack+1..] elements == null {0+}> (UInt,SJJ)
  <this.theArray[this.topOfStack+1..] elements are equal {0-}, this.theArray[this.topOfStack+1..] elements are equal {0-}> (UInt,SJJ)
  <null, this.theArray[0..this.topOfStack-1] contains no duplicates {0.0001-}> (UInt,MJ)
  <null, this.theArray[0..this.topOfStack] contains no duplicates {0.0001+}> (UInt,MJ)
  <this.theArray.class == "[Ljava.lang.Object;" {0+}, this.theArray.class == "[Ljava.lang.Object;" {0+}> (UInt,SJJ)
<DataStructures.StackAr.isEmpty()Z:::EXIT>
  <this.theArray[this.topOfStack-1] in this.theArray[] {0-}, this.theArray[this.topOfStack-1] in this.theArray[] {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack] in this.theArray[] {0-}, this.theArray[this.topOfStack] in this.theArray[] {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack-1] in this.theArray[0..this.topOfStack-1] {0-}, this.theArray[this.topOfStack-1] in this.theArray[0..this.topOfStack-1] {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack-1] in this.theArray[0..this.topOfStack] {0-}, this.theArray[this.topOfStack-1] in this.theArray[0..this.topOfStack] {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack] in this.theArray[0..this.topOfStack] {0-}, this.theArray[this.topOfStack] in this.theArray[0..this.topOfStack] {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack] in this.theArray[this.topOfStack..] {0-}, this.theArray[this.topOfStack] in this.theArray[this.topOfStack..] {0-}> (Bin,SJJ)
  <return == return {0-}, return == return {0-}> (Bin,SJJ)
  <size(this.theArray[]) == orig(size(this.theArray[])) {0+}, size(this.theArray[]) == orig(size(this.theArray[])) {0+}> (Bin,SJJ)
  <size(this.theArray[]) == size(this.theArray[]) {0-}, size(this.theArray[]) == size(this.theArray[]) {0-}> (Bin,SJJ)
  <size(this.theArray[])-1 == orig(size(this.theArray[]))-1 {0-}, size(this.theArray[])-1 == orig(size(this.theArray[]))-1 {0-}> (Bin,SJJ)
  <size(this.theArray[])-1 == size(this.theArray[])-1 {0-}, size(this.theArray[])-1 == size(this.theArray[])-1 {0-}> (Bin,SJJ)
  <this.theArray == orig(this.theArray) {0+}, this.theArray == orig(this.theArray) {0+}> (Bin,SJJ)
  <this.theArray == this.theArray {0-}, this.theArray == this.theArray {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack-1] == orig(this.theArray[post(this.topOfStack-1)]) {0+}, this.theArray[this.topOfStack-1] == orig(this.theArray[post(this.topOfStack-1)]) {0+}> (Bin,SJJ)
  <this.theArray[this.topOfStack-1] == orig(this.theArray[this.topOfStack-1]) {0+}, this.theArray[this.topOfStack-1] == orig(this.theArray[this.topOfStack-1]) {0+}> (Bin,SJJ)
  <this.theArray[this.topOfStack-1] == this.theArray[orig(this.topOfStack)-1] {0+}, this.theArray[this.topOfStack-1] == this.theArray[orig(this.topOfStack)-1] {0+}> (Bin,SJJ)
  <this.theArray[this.topOfStack-1] == this.theArray[this.topOfStack-1] {0-}, this.theArray[this.topOfStack-1] == this.theArray[this.topOfStack-1] {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack] == orig(this.theArray[post(this.topOfStack)]) {0+}, this.theArray[this.topOfStack] == orig(this.theArray[post(this.topOfStack)]) {0+}> (Bin,SJJ)
  <this.theArray[this.topOfStack] == orig(this.theArray[this.topOfStack]) {0+}, this.theArray[this.topOfStack] == orig(this.theArray[this.topOfStack]) {0+}> (Bin,SJJ)
  <this.theArray[this.topOfStack] == this.theArray[orig(this.topOfStack)] {0+}, this.theArray[this.topOfStack] == this.theArray[orig(this.topOfStack)] {0+}> (Bin,SJJ)
  <this.theArray[this.topOfStack] == this.theArray[this.topOfStack] {0-}, this.theArray[this.topOfStack] == this.theArray[this.topOfStack] {0-}> (Bin,SJJ)
  <this.topOfStack == orig(this.topOfStack) {0+}, this.topOfStack == orig(this.topOfStack) {0+}> (Bin,SJJ)
  <this.topOfStack == this.topOfStack {0-}, this.topOfStack == this.topOfStack {0-}> (Bin,SJJ)
  <size(this.theArray[]) >= size(this.theArray[]) {0.0335-}, size(this.theArray[]) >= size(this.theArray[]) {0.2549-}> (Bin,SUU)
  <size(this.theArray[]) >= size(this.theArray[])-1 {0.0042-}, size(this.theArray[]) >= size(this.theArray[])-1 {0.0159-}> (Bin,SJU)
  <size(this.theArray[])-1 >= size(this.theArray[])-1 {0.0335-}, size(this.theArray[])-1 >= size(this.theArray[])-1 {0.2549-}> (Bin,SUU)
  <this.topOfStack >= this.topOfStack {0.0335-}, this.topOfStack >= this.topOfStack {0.2549-}> (Bin,SUU)
  <size(this.theArray[]) > size(this.theArray[])-1 {0.0042-}, size(this.theArray[]) > size(this.theArray[])-1 {0.0159-}> (Bin,SJU)
  <size(this.theArray[]) <= size(this.theArray[]) {0.0335-}, size(this.theArray[]) <= size(this.theArray[]) {0.2549-}> (Bin,SUU)
  <size(this.theArray[])-1 <= size(this.theArray[])-1 {0.0335-}, size(this.theArray[])-1 <= size(this.theArray[])-1 {0.2549-}> (Bin,SUU)
  <this.topOfStack <= size(this.theArray[]) {0.0001-}, this.topOfStack <= size(this.theArray[]) {0.001-}> (Bin,SJJ)
  <this.topOfStack <= size(this.theArray[])-1 {0.0001+}, this.topOfStack <= size(this.theArray[])-1 {0.001+}> (Bin,SJJ)
  <this.topOfStack <= this.topOfStack {0.0335-}, this.topOfStack <= this.topOfStack {0.2549-}> (Bin,SUU)
  <this.topOfStack < size(this.theArray[]) {0.0001-}, this.topOfStack < size(this.theArray[]) {0.001-}> (Bin,SJJ)
  <size(this.theArray[]) != size(this.theArray[])-1 {0.0042-}, size(this.theArray[]) != size(this.theArray[])-1 {0.0159-}> (Bin,SJU)
  <this.topOfStack != size(this.theArray[]) {0.0001-}, this.topOfStack != size(this.theArray[]) {0.001-}> (Bin,SJJ)
  <size(this.theArray[]) == size(this.theArray[]) {0-}, size(this.theArray[]) == size(this.theArray[]) {0-}> (Bin,SJJ)
  <size(this.theArray[])-1 == size(this.theArray[]) - 1 {0-}, size(this.theArray[])-1 == size(this.theArray[]) - 1 {0-}> (Bin,SJJ)
  <size(this.theArray[])-1 == size(this.theArray[])-1 {0-}, size(this.theArray[])-1 == size(this.theArray[])-1 {0-}> (Bin,SJJ)
  <this.topOfStack == this.topOfStack {0-}, this.topOfStack == this.topOfStack {0-}> (Bin,SJJ)
  <this.theArray[0..this.topOfStack-1] == this.theArray[0..this.topOfStack-1] (elementwise) {0-}, this.theArray[0..this.topOfStack-1] == this.theArray[0..this.topOfStack-1] (elementwise) {0-}> (Bin,SJJ)
  <this.theArray[0..this.topOfStack] == this.theArray[0..this.topOfStack] (elementwise) {0-}, this.theArray[0..this.topOfStack] == this.theArray[0..this.topOfStack] (elementwise) {0-}> (Bin,SJJ)
  <this.theArray[] == this.theArray[] (elementwise) {0-}, this.theArray[] == this.theArray[] (elementwise) {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack+1..] == this.theArray[this.topOfStack+1..] (elementwise) {0-}, this.theArray[this.topOfStack+1..] == this.theArray[this.topOfStack+1..] (elementwise) {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack..] == this.theArray[this.topOfStack..] (elementwise) {0-}, this.theArray[this.topOfStack..] == this.theArray[this.topOfStack..] (elementwise) {0-}> (Bin,SJJ)
  <this.theArray[0..this.topOfStack-1] == this.theArray[0..this.topOfStack-1] {0-}, this.theArray[0..this.topOfStack-1] == this.theArray[0..this.topOfStack-1] {0-}> (Bin,SJJ)
  <this.theArray[0..this.topOfStack] == this.theArray[0..this.topOfStack] {0-}, this.theArray[0..this.topOfStack] == this.theArray[0..this.topOfStack] {0-}> (Bin,SJJ)
  <this.theArray[] == this.theArray[] {0-}, this.theArray[] == this.theArray[] {0-}> (Bin,SJJ)
  <Too few samples for linear relation: 0 * Slice{Add{+1}[Field{topOfStack}[this]],}[Elements[Field{theArray}[this]]] == 0 * Slice{Add{+1}[Field{topOfStack}[this]],}[Elements[Field{theArray}[this]]] + 0 {1-}, Too few samples for linear relation: 0 * Slice{Add{+1}[Field{topOfStack}[this]],}[Elements[Field{theArray}[this]]] == 0 * Slice{Add{+1}[Field{topOfStack}[this]],}[Elements[Field{theArray}[this]]] + 0 {1-}> (Bin,SUU)
  <this.theArray[this.topOfStack..] == this.theArray[this.topOfStack..] {0-}, this.theArray[this.topOfStack..] == this.theArray[this.topOfStack..] {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack+1..] is the reverse of this.theArray[this.topOfStack+1..] {0-}, this.theArray[this.topOfStack+1..] is the reverse of this.theArray[this.topOfStack+1..] {0-}> (Bin,SJJ)
  <this.theArray[0..this.topOfStack-1] == orig(this.theArray[0..post(this.topOfStack-1)]) {0-}, this.theArray[0..this.topOfStack-1] == orig(this.theArray[0..post(this.topOfStack-1)]) {0-}> (Bin,SJJ)
  <this.theArray[0..this.topOfStack-1] == orig(this.theArray[0..this.topOfStack-1]) {0-}, this.theArray[0..this.topOfStack-1] == orig(this.theArray[0..this.topOfStack-1]) {0-}> (Bin,SJJ)
  <this.theArray[0..this.topOfStack-1] == this.theArray[0..orig(this.topOfStack)-1] {0-}, this.theArray[0..this.topOfStack-1] == this.theArray[0..orig(this.topOfStack)-1] {0-}> (Bin,SJJ)
  <this.theArray[0..this.topOfStack-1] == this.theArray[0..this.topOfStack-1] {0-}, this.theArray[0..this.topOfStack-1] == this.theArray[0..this.topOfStack-1] {0-}> (Bin,SJJ)
  <this.theArray[0..this.topOfStack] == orig(this.theArray[0..post(this.topOfStack)]) {0-}, this.theArray[0..this.topOfStack] == orig(this.theArray[0..post(this.topOfStack)]) {0-}> (Bin,SJJ)
  <this.theArray[0..this.topOfStack] == orig(this.theArray[0..this.topOfStack]) {0-}, this.theArray[0..this.topOfStack] == orig(this.theArray[0..this.topOfStack]) {0-}> (Bin,SJJ)
  <this.theArray[0..this.topOfStack] == this.theArray[0..orig(this.topOfStack)] {0-}, this.theArray[0..this.topOfStack] == this.theArray[0..orig(this.topOfStack)] {0-}> (Bin,SJJ)
  <this.theArray[0..this.topOfStack] == this.theArray[0..this.topOfStack] {0-}, this.theArray[0..this.topOfStack] == this.theArray[0..this.topOfStack] {0-}> (Bin,SJJ)
  <this.theArray[] == orig(this.theArray[]) {0+}, this.theArray[] == orig(this.theArray[]) {0+}> (Bin,SJJ)
  <this.theArray[] == this.theArray[] {0-}, this.theArray[] == this.theArray[] {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack+1..] == orig(this.theArray[post(this.topOfStack+1)..]) {0-}, this.theArray[this.topOfStack+1..] == orig(this.theArray[post(this.topOfStack+1)..]) {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack+1..] == orig(this.theArray[this.topOfStack+1..]) {0-}, this.theArray[this.topOfStack+1..] == orig(this.theArray[this.topOfStack+1..]) {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack+1..] == this.theArray[orig(this.topOfStack)+1..] {0-}, this.theArray[this.topOfStack+1..] == this.theArray[orig(this.topOfStack)+1..] {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack+1..] == this.theArray[this.topOfStack+1..] {0-}, this.theArray[this.topOfStack+1..] == this.theArray[this.topOfStack+1..] {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack..] == orig(this.theArray[post(this.topOfStack)..]) {0-}, this.theArray[this.topOfStack..] == orig(this.theArray[post(this.topOfStack)..]) {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack..] == orig(this.theArray[this.topOfStack..]) {0-}, this.theArray[this.topOfStack..] == orig(this.theArray[this.topOfStack..]) {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack..] == this.theArray[orig(this.topOfStack)..] {0-}, this.theArray[this.topOfStack..] == this.theArray[orig(this.topOfStack)..] {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack..] == this.theArray[this.topOfStack..] {0-}, this.theArray[this.topOfStack..] == this.theArray[this.topOfStack..] {0-}> (Bin,SJJ)
  <this.theArray[0..this.topOfStack-1] is a {sub,super}sequence of this.theArray[0..this.topOfStack-1] {1-}, this.theArray[0..this.topOfStack-1] is a {sub,super}sequence of this.theArray[0..this.topOfStack-1] {1-}> (Bin,SUU)
  <this.theArray[0..this.topOfStack-1] is a subsequence of this.theArray[0..this.topOfStack] {0-}, this.theArray[0..this.topOfStack-1] is a subsequence of this.theArray[0..this.topOfStack] {0-}> (Bin,SJJ)
  <this.theArray[0..this.topOfStack] is a {sub,super}sequence of this.theArray[0..this.topOfStack] {1-}, this.theArray[0..this.topOfStack] is a {sub,super}sequence of this.theArray[0..this.topOfStack] {1-}> (Bin,SUU)
  <this.theArray[0..this.topOfStack-1] is a subsequence of this.theArray[] {0-}, this.theArray[0..this.topOfStack-1] is a subsequence of this.theArray[] {0-}> (Bin,SJJ)
  <this.theArray[0..this.topOfStack] is a subsequence of this.theArray[] {0-}, this.theArray[0..this.topOfStack] is a subsequence of this.theArray[] {0-}> (Bin,SJJ)
  <this.theArray[] is a {sub,super}sequence of this.theArray[] {1-}, this.theArray[] is a {sub,super}sequence of this.theArray[] {1-}> (Bin,SUU)
  <this.theArray[this.topOfStack+1..] is a subsequence of this.theArray[] {0-}, this.theArray[this.topOfStack+1..] is a subsequence of this.theArray[] {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack..] is a subsequence of this.theArray[] {0-}, this.theArray[this.topOfStack..] is a subsequence of this.theArray[] {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack+1..] is a {sub,super}sequence of this.theArray[this.topOfStack+1..] {1-}, this.theArray[this.topOfStack+1..] is a {sub,super}sequence of this.theArray[this.topOfStack+1..] {1-}> (Bin,SUU)
  <this.theArray[this.topOfStack+1..] is a subsequence of this.theArray[this.topOfStack..] {0-}, this.theArray[this.topOfStack+1..] is a subsequence of this.theArray[this.topOfStack..] {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack..] is a {sub,super}sequence of this.theArray[this.topOfStack..] {1-}, this.theArray[this.topOfStack..] is a {sub,super}sequence of this.theArray[this.topOfStack..] {1-}> (Bin,SUU)
  <this.theArray.class == orig(this.theArray.class) {0+}, this.theArray.class == orig(this.theArray.class) {0+}> (Bin,SJJ)
  <this.theArray.class == this.theArray.class {0-}, this.theArray.class == this.theArray.class {0-}> (Bin,SJJ)
  <size(this.theArray[]) == java.lang.Math.max(size(this.theArray[]), size(this.theArray[])) {3-}, size(this.theArray[]) == java.lang.Math.max(size(this.theArray[]), size(this.theArray[])) {3-}> (Ter,SUU)
  <size(this.theArray[]) == java.lang.Math.max(size(this.theArray[]), size(this.theArray[])) {3-}, size(this.theArray[]) == java.lang.Math.max(size(this.theArray[]), size(this.theArray[])) {3-}> (Ter,SUU)
  <size(this.theArray[]) == java.lang.Math.max(size(this.theArray[]), size(this.theArray[])) {3-}, size(this.theArray[]) == java.lang.Math.max(size(this.theArray[]), size(this.theArray[])) {3-}> (Ter,SUU)
  <size(this.theArray[]) == java.lang.Math.min(size(this.theArray[]), size(this.theArray[])) {3-}, size(this.theArray[]) == java.lang.Math.min(size(this.theArray[]), size(this.theArray[])) {3-}> (Ter,SUU)
  <size(this.theArray[]) == java.lang.Math.min(size(this.theArray[]), size(this.theArray[])) {3-}, size(this.theArray[]) == java.lang.Math.min(size(this.theArray[]), size(this.theArray[])) {3-}> (Ter,SUU)
  <size(this.theArray[]) == java.lang.Math.min(size(this.theArray[]), size(this.theArray[])) {3-}, size(this.theArray[]) == java.lang.Math.min(size(this.theArray[]), size(this.theArray[])) {3-}> (Ter,SUU)
  <size(this.theArray[]) == size(this.theArray[]) & size(this.theArray[]) {3-}, size(this.theArray[]) == size(this.theArray[]) & size(this.theArray[]) {3-}> (Ter,SUU)
  <size(this.theArray[]) == size(this.theArray[]) & size(this.theArray[]) {3-}, size(this.theArray[]) == size(this.theArray[]) & size(this.theArray[]) {3-}> (Ter,SUU)
  <size(this.theArray[]) == size(this.theArray[]) & size(this.theArray[]) {3-}, size(this.theArray[]) == size(this.theArray[]) & size(this.theArray[]) {3-}> (Ter,SUU)
  <size(this.theArray[]) == size(this.theArray[]) | size(this.theArray[]) {3-}, size(this.theArray[]) == size(this.theArray[]) | size(this.theArray[]) {3-}> (Ter,SUU)
  <size(this.theArray[]) == size(this.theArray[]) | size(this.theArray[]) {3-}, size(this.theArray[]) == size(this.theArray[]) | size(this.theArray[]) {3-}> (Ter,SUU)
  <size(this.theArray[]) == size(this.theArray[]) | size(this.theArray[]) {3-}, size(this.theArray[]) == size(this.theArray[]) | size(this.theArray[]) {3-}> (Ter,SUU)
  <size(this.theArray[]) == org.plumelib.util.MathPlume.gcd(size(this.theArray[]), size(this.theArray[])) {3-}, size(this.theArray[]) == org.plumelib.util.MathPlume.gcd(size(this.theArray[]), size(this.theArray[])) {3-}> (Ter,SUU)
  <size(this.theArray[]) == org.plumelib.util.MathPlume.gcd(size(this.theArray[]), size(this.theArray[])) {3-}, size(this.theArray[]) == org.plumelib.util.MathPlume.gcd(size(this.theArray[]), size(this.theArray[])) {3-}> (Ter,SUU)
  <size(this.theArray[]) == org.plumelib.util.MathPlume.gcd(size(this.theArray[]), size(this.theArray[])) {3-}, size(this.theArray[]) == org.plumelib.util.MathPlume.gcd(size(this.theArray[]), size(this.theArray[])) {3-}> (Ter,SUU)
  <size(this.theArray[]) == java.lang.Math.max(size(this.theArray[])-1, size(this.theArray[])) {0.5-}, size(this.theArray[]) == java.lang.Math.max(size(this.theArray[])-1, size(this.theArray[])) {0-}> (Ter,SUJ)
  <size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[])-1, size(this.theArray[])) {0.25-}, size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[])-1, size(this.theArray[])) {0-}> (Ter,SUJ)
  <null, size(this.theArray[])-1 == size(this.theArray[])-1 % size(this.theArray[]) {0-}> (Ter,MJ)
  <size(this.theArray[])-1 == java.lang.Math.max(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == java.lang.Math.max(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == java.lang.Math.max(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == java.lang.Math.max(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == java.lang.Math.max(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == java.lang.Math.max(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == size(this.theArray[])-1 & size(this.theArray[])-1 {3-}, size(this.theArray[])-1 == size(this.theArray[])-1 & size(this.theArray[])-1 {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == size(this.theArray[])-1 & size(this.theArray[])-1 {3-}, size(this.theArray[])-1 == size(this.theArray[])-1 & size(this.theArray[])-1 {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == size(this.theArray[])-1 & size(this.theArray[])-1 {3-}, size(this.theArray[])-1 == size(this.theArray[])-1 & size(this.theArray[])-1 {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == size(this.theArray[])-1 | size(this.theArray[])-1 {3-}, size(this.theArray[])-1 == size(this.theArray[])-1 | size(this.theArray[])-1 {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == size(this.theArray[])-1 | size(this.theArray[])-1 {3-}, size(this.theArray[])-1 == size(this.theArray[])-1 | size(this.theArray[])-1 {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == size(this.theArray[])-1 | size(this.theArray[])-1 {3-}, size(this.theArray[])-1 == size(this.theArray[])-1 | size(this.theArray[])-1 {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == org.plumelib.util.MathPlume.gcd(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == org.plumelib.util.MathPlume.gcd(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == org.plumelib.util.MathPlume.gcd(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == org.plumelib.util.MathPlume.gcd(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == org.plumelib.util.MathPlume.gcd(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == org.plumelib.util.MathPlume.gcd(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[]) == java.lang.Math.max(this.topOfStack, size(this.theArray[])) {0-}, size(this.theArray[]) == java.lang.Math.max(this.topOfStack, size(this.theArray[])) {0-}> (Ter,SJJ)
  <size(this.theArray[]) == java.lang.Math.max(this.topOfStack, size(this.theArray[])) {0-}, size(this.theArray[]) == java.lang.Math.max(this.topOfStack, size(this.theArray[])) {0-}> (Ter,SJJ)
  <size(this.theArray[])-1 == java.lang.Math.max(this.topOfStack, size(this.theArray[])-1) {0-}, size(this.theArray[])-1 == java.lang.Math.max(this.topOfStack, size(this.theArray[])-1) {0-}> (Ter,SJJ)
  <size(this.theArray[])-1 == java.lang.Math.max(this.topOfStack, size(this.theArray[])-1) {0-}, size(this.theArray[])-1 == java.lang.Math.max(this.topOfStack, size(this.theArray[])-1) {0-}> (Ter,SJJ)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])) {0.25-}, this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])) {0-}> (Ter,SUJ)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])) {0.25-}, this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])) {0-}> (Ter,SUJ)
  <null, this.topOfStack == this.topOfStack % size(this.theArray[]) {0-}> (Ter,MJ)
  <null, this.topOfStack == this.topOfStack % size(this.theArray[]) {0-}> (Ter,MJ)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])-1) {0.5-}, this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])-1) {0-}> (Ter,SUJ)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])-1) {0.5-}, this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])-1) {0-}> (Ter,SUJ)
  <this.topOfStack == java.lang.Math.max(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == java.lang.Math.max(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <this.topOfStack == java.lang.Math.max(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == java.lang.Math.max(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <this.topOfStack == java.lang.Math.max(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == java.lang.Math.max(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == java.lang.Math.min(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == java.lang.Math.min(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == java.lang.Math.min(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <this.topOfStack == this.topOfStack & this.topOfStack {3-}, this.topOfStack == this.topOfStack & this.topOfStack {3-}> (Ter,SUU)
  <this.topOfStack == this.topOfStack & this.topOfStack {3-}, this.topOfStack == this.topOfStack & this.topOfStack {3-}> (Ter,SUU)
  <this.topOfStack == this.topOfStack & this.topOfStack {3-}, this.topOfStack == this.topOfStack & this.topOfStack {3-}> (Ter,SUU)
  <this.topOfStack == this.topOfStack | this.topOfStack {3-}, this.topOfStack == this.topOfStack | this.topOfStack {3-}> (Ter,SUU)
  <this.topOfStack == this.topOfStack | this.topOfStack {3-}, this.topOfStack == this.topOfStack | this.topOfStack {3-}> (Ter,SUU)
  <this.topOfStack == this.topOfStack | this.topOfStack {3-}, this.topOfStack == this.topOfStack | this.topOfStack {3-}> (Ter,SUU)
  <this.topOfStack == org.plumelib.util.MathPlume.gcd(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == org.plumelib.util.MathPlume.gcd(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <this.topOfStack == org.plumelib.util.MathPlume.gcd(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == org.plumelib.util.MathPlume.gcd(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <this.topOfStack == org.plumelib.util.MathPlume.gcd(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == org.plumelib.util.MathPlume.gcd(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == 2 * size(this.theArray[]) - size(this.theArray[]) - 1 {0-}, size(this.theArray[])-1 == 2 * size(this.theArray[]) - size(this.theArray[]) - 1 {0-}> (Ter,SJJ)
  <size(this.theArray[])-1 == 0.5 * size(this.theArray[]) + 0.5 * size(this.theArray[])-1 - 0.5 {0-}, size(this.theArray[])-1 == 0.5 * size(this.theArray[]) + 0.5 * size(this.theArray[])-1 - 0.5 {0-}> (Ter,SJJ)
  <size(this.theArray[]) >= 0 {0-}, size(this.theArray[]) >= 2 {0.8529-}> (UInt,DJU)
  <size(this.theArray[])-1 >= -1 {0-}, size(this.theArray[])-1 >= 1 {0.8529-}> (UInt,DJU)
  <this.topOfStack >= -1 {0+}, this.topOfStack >= -1 {0+}> (U!Int,SJJ)
  <null, size(this.theArray[]) != 0 {1-}> (UInt,MU)
  <null, size(this.theArray[])-1 != 0 {1-}> (UInt,MU)
  <this.theArray != null {0.0001+}, this.theArray != null {0.0001+}> (UInt,SJJ)
  <this.theArray[this.topOfStack-1] != null {0.0001-}, this.theArray[this.topOfStack-1] != null {0.0001-}> (UInt,SJJ)
  <this.theArray[this.topOfStack] != null {0.0001-}, this.theArray[this.topOfStack] != null {0.0001-}> (UInt,SJJ)
  <size(this.theArray[]) <= 20 {0-}, size(this.theArray[]) <= 15 {0.033-}> (U!Int,DJU)
  <size(this.theArray[])-1 <= 19 {0-}, size(this.theArray[])-1 <= 14 {0.033-}> (U!Int,DJU)
  <this.topOfStack <= 19 {0.5886-}, this.topOfStack <= 14 {0.767-}> (U!Int,DUU)
  <this.theArray[0..this.topOfStack-1] elements != null {0.0001-}, this.theArray[0..this.topOfStack-1] elements != null {0.0001-}> (UInt,SJJ)
  <this.theArray[0..this.topOfStack] elements != null {0.0001+}, this.theArray[0..this.topOfStack] elements != null {0.0001+}> (UInt,SJJ)
  <this.theArray[this.topOfStack+1..] elements == null {0+}, this.theArray[this.topOfStack+1..] elements == null {0+}> (UInt,SJJ)
  <this.theArray[this.topOfStack+1..] elements are equal {0-}, this.theArray[this.topOfStack+1..] elements are equal {0-}> (UInt,SJJ)
  <null, this.theArray[0..this.topOfStack-1] contains no duplicates {0.0001-}> (UInt,MJ)
  <null, this.theArray[0..this.topOfStack] contains no duplicates {0.0001+}> (UInt,MJ)
  <this.theArray.class == "[Ljava.lang.Object;" {0+}, this.theArray.class == "[Ljava.lang.Object;" {0+}> (UInt,SJJ)
<DataStructures.StackAr.isEmpty()Z:::EXIT41>
  <return == return {0-}, return == return {0-}> (Bin,SJJ)
  <size(this.theArray[]) == size(this.theArray[]) {0-}, size(this.theArray[]) == size(this.theArray[]) {0-}> (Bin,SJJ)
  <size(this.theArray[])-1 == size(this.theArray[])-1 {0-}, size(this.theArray[])-1 == size(this.theArray[])-1 {0-}> (Bin,SJJ)
  <this.theArray == this.theArray {0-}, this.theArray == this.theArray {0-}> (Bin,SJJ)
  <this.topOfStack == this.topOfStack {0-}, this.topOfStack == this.topOfStack {0-}> (Bin,SJJ)
  <size(this.theArray[]) >= size(this.theArray[]) {0.0335-}, size(this.theArray[]) >= size(this.theArray[]) {0.2549-}> (Bin,SUU)
  <size(this.theArray[]) >= size(this.theArray[])-1 {0.0042-}, size(this.theArray[]) >= size(this.theArray[])-1 {0.0159-}> (Bin,SJU)
  <size(this.theArray[])-1 >= size(this.theArray[])-1 {0.0335-}, size(this.theArray[])-1 >= size(this.theArray[])-1 {0.2549-}> (Bin,SUU)
  <this.topOfStack >= this.topOfStack {0.0335-}, this.topOfStack >= this.topOfStack {0.2549-}> (Bin,SUU)
  <size(this.theArray[]) > size(this.theArray[])-1 {0.0042-}, size(this.theArray[]) > size(this.theArray[])-1 {0.0159-}> (Bin,SJU)
  <size(this.theArray[]) <= size(this.theArray[]) {0.0335-}, size(this.theArray[]) <= size(this.theArray[]) {0.2549-}> (Bin,SUU)
  <size(this.theArray[])-1 <= size(this.theArray[])-1 {0.0335-}, size(this.theArray[])-1 <= size(this.theArray[])-1 {0.2549-}> (Bin,SUU)
  <this.topOfStack <= size(this.theArray[]) {0.0001-}, this.topOfStack <= size(this.theArray[]) {0.001-}> (Bin,SJJ)
  <this.topOfStack <= size(this.theArray[])-1 {0.0001+}, this.topOfStack <= size(this.theArray[])-1 {0.001+}> (Bin,SJJ)
  <this.topOfStack <= this.topOfStack {0.0335-}, this.topOfStack <= this.topOfStack {0.2549-}> (Bin,SUU)
  <this.topOfStack < size(this.theArray[]) {0.0001-}, this.topOfStack < size(this.theArray[]) {0.001-}> (Bin,SJJ)
  <size(this.theArray[]) != size(this.theArray[])-1 {0.0042-}, size(this.theArray[]) != size(this.theArray[])-1 {0.0159-}> (Bin,SJU)
  <this.topOfStack != size(this.theArray[]) {0.0001-}, this.topOfStack != size(this.theArray[]) {0.001-}> (Bin,SJJ)
  <size(this.theArray[]) == size(this.theArray[]) {0-}, size(this.theArray[]) == size(this.theArray[]) {0-}> (Bin,SJJ)
  <size(this.theArray[])-1 == size(this.theArray[]) - 1 {0-}, size(this.theArray[])-1 == size(this.theArray[]) - 1 {0-}> (Bin,SJJ)
  <size(this.theArray[])-1 == size(this.theArray[])-1 {0-}, size(this.theArray[])-1 == size(this.theArray[])-1 {0-}> (Bin,SJJ)
  <this.topOfStack == this.topOfStack {0-}, this.topOfStack == this.topOfStack {0-}> (Bin,SJJ)
  <this.theArray[0..this.topOfStack] == this.theArray[0..this.topOfStack] (elementwise) {0-}, this.theArray[0..this.topOfStack] == this.theArray[0..this.topOfStack] (elementwise) {0-}> (Bin,SJJ)
  <this.theArray[] == this.theArray[] (elementwise) {0-}, this.theArray[] == this.theArray[] (elementwise) {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack+1..] == this.theArray[this.topOfStack+1..] (elementwise) {0-}, this.theArray[this.topOfStack+1..] == this.theArray[this.topOfStack+1..] (elementwise) {0-}> (Bin,SJJ)
  <this.theArray[0..this.topOfStack] == this.theArray[0..this.topOfStack] {0-}, this.theArray[0..this.topOfStack] == this.theArray[0..this.topOfStack] {0-}> (Bin,SJJ)
  <this.theArray[] == this.theArray[] {0-}, this.theArray[] == this.theArray[] {0-}> (Bin,SJJ)
  <Too few samples for linear relation: 0 * Slice{Add{+1}[Field{topOfStack}[this]],}[Elements[Field{theArray}[this]]] == 0 * Slice{Add{+1}[Field{topOfStack}[this]],}[Elements[Field{theArray}[this]]] + 0 {1-}, Too few samples for linear relation: 0 * Slice{Add{+1}[Field{topOfStack}[this]],}[Elements[Field{theArray}[this]]] == 0 * Slice{Add{+1}[Field{topOfStack}[this]],}[Elements[Field{theArray}[this]]] + 0 {1-}> (Bin,SUU)
  <this.theArray[this.topOfStack+1..] is the reverse of this.theArray[this.topOfStack+1..] {0-}, this.theArray[this.topOfStack+1..] is the reverse of this.theArray[this.topOfStack+1..] {0-}> (Bin,SJJ)
  <this.theArray[0..this.topOfStack] == this.theArray[0..this.topOfStack] {0-}, this.theArray[0..this.topOfStack] == this.theArray[0..this.topOfStack] {0-}> (Bin,SJJ)
  <this.theArray[] == this.theArray[] {0-}, this.theArray[] == this.theArray[] {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack+1..] == this.theArray[this.topOfStack+1..] {0-}, this.theArray[this.topOfStack+1..] == this.theArray[this.topOfStack+1..] {0-}> (Bin,SJJ)
  <this.theArray[0..this.topOfStack] is a {sub,super}sequence of this.theArray[0..this.topOfStack] {1-}, this.theArray[0..this.topOfStack] is a {sub,super}sequence of this.theArray[0..this.topOfStack] {1-}> (Bin,SUU)
  <this.theArray[0..this.topOfStack] is a subsequence of this.theArray[] {0-}, this.theArray[0..this.topOfStack] is a subsequence of this.theArray[] {0-}> (Bin,SJJ)
  <this.theArray[] is a {sub,super}sequence of this.theArray[] {1-}, this.theArray[] is a {sub,super}sequence of this.theArray[] {1-}> (Bin,SUU)
  <this.theArray[this.topOfStack+1..] is a subsequence of this.theArray[] {0-}, this.theArray[this.topOfStack+1..] is a subsequence of this.theArray[] {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack+1..] is a {sub,super}sequence of this.theArray[this.topOfStack+1..] {1-}, this.theArray[this.topOfStack+1..] is a {sub,super}sequence of this.theArray[this.topOfStack+1..] {1-}> (Bin,SUU)
  <this.theArray.class == this.theArray.class {0-}, this.theArray.class == this.theArray.class {0-}> (Bin,SJJ)
  <size(this.theArray[]) == java.lang.Math.max(size(this.theArray[]), size(this.theArray[])) {3-}, size(this.theArray[]) == java.lang.Math.max(size(this.theArray[]), size(this.theArray[])) {3-}> (Ter,SUU)
  <size(this.theArray[]) == java.lang.Math.max(size(this.theArray[]), size(this.theArray[])) {3-}, size(this.theArray[]) == java.lang.Math.max(size(this.theArray[]), size(this.theArray[])) {3-}> (Ter,SUU)
  <size(this.theArray[]) == java.lang.Math.max(size(this.theArray[]), size(this.theArray[])) {3-}, size(this.theArray[]) == java.lang.Math.max(size(this.theArray[]), size(this.theArray[])) {3-}> (Ter,SUU)
  <size(this.theArray[]) == java.lang.Math.min(size(this.theArray[]), size(this.theArray[])) {3-}, size(this.theArray[]) == java.lang.Math.min(size(this.theArray[]), size(this.theArray[])) {3-}> (Ter,SUU)
  <size(this.theArray[]) == java.lang.Math.min(size(this.theArray[]), size(this.theArray[])) {3-}, size(this.theArray[]) == java.lang.Math.min(size(this.theArray[]), size(this.theArray[])) {3-}> (Ter,SUU)
  <size(this.theArray[]) == java.lang.Math.min(size(this.theArray[]), size(this.theArray[])) {3-}, size(this.theArray[]) == java.lang.Math.min(size(this.theArray[]), size(this.theArray[])) {3-}> (Ter,SUU)
  <size(this.theArray[]) == size(this.theArray[]) & size(this.theArray[]) {3-}, size(this.theArray[]) == size(this.theArray[]) & size(this.theArray[]) {3-}> (Ter,SUU)
  <size(this.theArray[]) == size(this.theArray[]) & size(this.theArray[]) {3-}, size(this.theArray[]) == size(this.theArray[]) & size(this.theArray[]) {3-}> (Ter,SUU)
  <size(this.theArray[]) == size(this.theArray[]) & size(this.theArray[]) {3-}, size(this.theArray[]) == size(this.theArray[]) & size(this.theArray[]) {3-}> (Ter,SUU)
  <size(this.theArray[]) == size(this.theArray[]) | size(this.theArray[]) {3-}, size(this.theArray[]) == size(this.theArray[]) | size(this.theArray[]) {3-}> (Ter,SUU)
  <size(this.theArray[]) == size(this.theArray[]) | size(this.theArray[]) {3-}, size(this.theArray[]) == size(this.theArray[]) | size(this.theArray[]) {3-}> (Ter,SUU)
  <size(this.theArray[]) == size(this.theArray[]) | size(this.theArray[]) {3-}, size(this.theArray[]) == size(this.theArray[]) | size(this.theArray[]) {3-}> (Ter,SUU)
  <size(this.theArray[]) == org.plumelib.util.MathPlume.gcd(size(this.theArray[]), size(this.theArray[])) {3-}, size(this.theArray[]) == org.plumelib.util.MathPlume.gcd(size(this.theArray[]), size(this.theArray[])) {3-}> (Ter,SUU)
  <size(this.theArray[]) == org.plumelib.util.MathPlume.gcd(size(this.theArray[]), size(this.theArray[])) {3-}, size(this.theArray[]) == org.plumelib.util.MathPlume.gcd(size(this.theArray[]), size(this.theArray[])) {3-}> (Ter,SUU)
  <size(this.theArray[]) == org.plumelib.util.MathPlume.gcd(size(this.theArray[]), size(this.theArray[])) {3-}, size(this.theArray[]) == org.plumelib.util.MathPlume.gcd(size(this.theArray[]), size(this.theArray[])) {3-}> (Ter,SUU)
  <size(this.theArray[]) == java.lang.Math.max(size(this.theArray[])-1, size(this.theArray[])) {0.5-}, size(this.theArray[]) == java.lang.Math.max(size(this.theArray[])-1, size(this.theArray[])) {0-}> (Ter,SUJ)
  <size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[])-1, size(this.theArray[])) {0.25-}, size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[])-1, size(this.theArray[])) {0-}> (Ter,SUJ)
  <null, size(this.theArray[])-1 == size(this.theArray[])-1 % size(this.theArray[]) {0-}> (Ter,MJ)
  <size(this.theArray[])-1 == java.lang.Math.max(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == java.lang.Math.max(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == java.lang.Math.max(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == java.lang.Math.max(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == java.lang.Math.max(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == java.lang.Math.max(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == size(this.theArray[])-1 & size(this.theArray[])-1 {3-}, size(this.theArray[])-1 == size(this.theArray[])-1 & size(this.theArray[])-1 {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == size(this.theArray[])-1 & size(this.theArray[])-1 {3-}, size(this.theArray[])-1 == size(this.theArray[])-1 & size(this.theArray[])-1 {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == size(this.theArray[])-1 & size(this.theArray[])-1 {3-}, size(this.theArray[])-1 == size(this.theArray[])-1 & size(this.theArray[])-1 {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == size(this.theArray[])-1 | size(this.theArray[])-1 {3-}, size(this.theArray[])-1 == size(this.theArray[])-1 | size(this.theArray[])-1 {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == size(this.theArray[])-1 | size(this.theArray[])-1 {3-}, size(this.theArray[])-1 == size(this.theArray[])-1 | size(this.theArray[])-1 {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == size(this.theArray[])-1 | size(this.theArray[])-1 {3-}, size(this.theArray[])-1 == size(this.theArray[])-1 | size(this.theArray[])-1 {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == org.plumelib.util.MathPlume.gcd(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == org.plumelib.util.MathPlume.gcd(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == org.plumelib.util.MathPlume.gcd(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == org.plumelib.util.MathPlume.gcd(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == org.plumelib.util.MathPlume.gcd(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == org.plumelib.util.MathPlume.gcd(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[]) == java.lang.Math.max(this.topOfStack, size(this.theArray[])) {0-}, size(this.theArray[]) == java.lang.Math.max(this.topOfStack, size(this.theArray[])) {0-}> (Ter,SJJ)
  <size(this.theArray[]) == java.lang.Math.max(this.topOfStack, size(this.theArray[])) {0-}, size(this.theArray[]) == java.lang.Math.max(this.topOfStack, size(this.theArray[])) {0-}> (Ter,SJJ)
  <size(this.theArray[])-1 == java.lang.Math.max(this.topOfStack, size(this.theArray[])-1) {0-}, size(this.theArray[])-1 == java.lang.Math.max(this.topOfStack, size(this.theArray[])-1) {0-}> (Ter,SJJ)
  <size(this.theArray[])-1 == java.lang.Math.max(this.topOfStack, size(this.theArray[])-1) {0-}, size(this.theArray[])-1 == java.lang.Math.max(this.topOfStack, size(this.theArray[])-1) {0-}> (Ter,SJJ)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])) {0.25-}, this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])) {0-}> (Ter,SUJ)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])) {0.25-}, this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])) {0-}> (Ter,SUJ)
  <null, this.topOfStack == this.topOfStack % size(this.theArray[]) {0-}> (Ter,MJ)
  <null, this.topOfStack == this.topOfStack % size(this.theArray[]) {0-}> (Ter,MJ)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])-1) {0.5-}, this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])-1) {0-}> (Ter,SUJ)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])-1) {0.5-}, this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])-1) {0-}> (Ter,SUJ)
  <this.topOfStack == java.lang.Math.max(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == java.lang.Math.max(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <this.topOfStack == java.lang.Math.max(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == java.lang.Math.max(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <this.topOfStack == java.lang.Math.max(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == java.lang.Math.max(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == java.lang.Math.min(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == java.lang.Math.min(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == java.lang.Math.min(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <this.topOfStack == this.topOfStack & this.topOfStack {3-}, this.topOfStack == this.topOfStack & this.topOfStack {3-}> (Ter,SUU)
  <this.topOfStack == this.topOfStack & this.topOfStack {3-}, this.topOfStack == this.topOfStack & this.topOfStack {3-}> (Ter,SUU)
  <this.topOfStack == this.topOfStack & this.topOfStack {3-}, this.topOfStack == this.topOfStack & this.topOfStack {3-}> (Ter,SUU)
  <this.topOfStack == this.topOfStack | this.topOfStack {3-}, this.topOfStack == this.topOfStack | this.topOfStack {3-}> (Ter,SUU)
  <this.topOfStack == this.topOfStack | this.topOfStack {3-}, this.topOfStack == this.topOfStack | this.topOfStack {3-}> (Ter,SUU)
  <this.topOfStack == this.topOfStack | this.topOfStack {3-}, this.topOfStack == this.topOfStack | this.topOfStack {3-}> (Ter,SUU)
  <this.topOfStack == org.plumelib.util.MathPlume.gcd(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == org.plumelib.util.MathPlume.gcd(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <this.topOfStack == org.plumelib.util.MathPlume.gcd(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == org.plumelib.util.MathPlume.gcd(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <this.topOfStack == org.plumelib.util.MathPlume.gcd(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == org.plumelib.util.MathPlume.gcd(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == 2 * size(this.theArray[]) - size(this.theArray[]) - 1 {0-}, size(this.theArray[])-1 == 2 * size(this.theArray[]) - size(this.theArray[]) - 1 {0-}> (Ter,SJJ)
  <size(this.theArray[])-1 == 0.5 * size(this.theArray[]) + 0.5 * size(this.theArray[])-1 - 0.5 {0-}, size(this.theArray[])-1 == 0.5 * size(this.theArray[]) + 0.5 * size(this.theArray[])-1 - 0.5 {0-}> (Ter,SJJ)
  <size(this.theArray[]) >= 0 {0-}, size(this.theArray[]) >= 2 {0.8529-}> (UInt,DJU)
  <size(this.theArray[])-1 >= -1 {0-}, size(this.theArray[])-1 >= 1 {0.8529-}> (UInt,DJU)
  <this.topOfStack >= -1 {0+}, this.topOfStack >= -1 {0+}> (U!Int,SJJ)
  <null, size(this.theArray[]) != 0 {1-}> (UInt,MU)
  <null, size(this.theArray[])-1 != 0 {1-}> (UInt,MU)
  <this.theArray != null {0.0001+}, this.theArray != null {0.0001+}> (UInt,SJJ)
  <size(this.theArray[]) <= 20 {0-}, size(this.theArray[]) <= 15 {0.033-}> (U!Int,DJU)
  <size(this.theArray[])-1 <= 19 {0-}, size(this.theArray[])-1 <= 14 {0.033-}> (U!Int,DJU)
  <this.topOfStack <= 19 {0.5886-}, this.topOfStack <= 14 {0.767-}> (U!Int,DUU)
  <this.theArray[0..this.topOfStack] elements != null {0.0001+}, this.theArray[0..this.topOfStack] elements != null {0.0001+}> (UInt,SJJ)
  <this.theArray[this.topOfStack+1..] elements == null {0+}, this.theArray[this.topOfStack+1..] elements == null {0+}> (UInt,SJJ)
  <this.theArray[this.topOfStack+1..] elements are equal {0-}, this.theArray[this.topOfStack+1..] elements are equal {0-}> (UInt,SJJ)
  <null, this.theArray[0..this.topOfStack] contains no duplicates {0.0001+}> (UInt,MJ)
  <this.theArray.class == "[Ljava.lang.Object;" {0+}, this.theArray.class == "[Ljava.lang.Object;" {0+}> (UInt,SJJ)
<DataStructures.StackAr.isFull()Z:::ENTER>
  <size(this.theArray[]) == size(this.theArray[]) {0-}, size(this.theArray[]) == size(this.theArray[]) {0-}> (Bin,SJJ)
  <size(this.theArray[])-1 == size(this.theArray[])-1 {0-}, size(this.theArray[])-1 == size(this.theArray[])-1 {0-}> (Bin,SJJ)
  <this.theArray == this.theArray {0-}, this.theArray == this.theArray {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack-1] == this.theArray[this.topOfStack-1] {0-}, this.theArray[this.topOfStack-1] == this.theArray[this.topOfStack-1] {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack] == this.theArray[this.topOfStack] {0-}, this.theArray[this.topOfStack] == this.theArray[this.topOfStack] {0-}> (Bin,SJJ)
  <this.topOfStack == this.topOfStack {0-}, this.topOfStack == this.topOfStack {0-}> (Bin,SJJ)
  <size(this.theArray[]) >= size(this.theArray[]) {0.1905-}, size(this.theArray[]) >= size(this.theArray[]) {0.6557-}> (Bin,SUU)
  <size(this.theArray[]) >= size(this.theArray[])-1 {0.0238-}, size(this.theArray[]) >= size(this.theArray[])-1 {0.041-}> (Bin,SUU)
  <size(this.theArray[])-1 >= size(this.theArray[])-1 {0.1905-}, size(this.theArray[])-1 >= size(this.theArray[])-1 {0.6557-}> (Bin,SUU)
  <this.topOfStack >= this.topOfStack {0.1905-}, this.topOfStack >= this.topOfStack {0.6557-}> (Bin,SUU)
  <size(this.theArray[]) > size(this.theArray[])-1 {0.0238-}, size(this.theArray[]) > size(this.theArray[])-1 {0.041-}> (Bin,SUU)
  <size(this.theArray[]) <= size(this.theArray[]) {0.1905-}, size(this.theArray[]) <= size(this.theArray[]) {0.6557-}> (Bin,SUU)
  <size(this.theArray[])-1 <= size(this.theArray[])-1 {0.1905-}, size(this.theArray[])-1 <= size(this.theArray[])-1 {0.6557-}> (Bin,SUU)
  <this.topOfStack <= size(this.theArray[]) {0.0007-}, this.topOfStack <= size(this.theArray[]) {0.0026-}> (Bin,SJJ)
  <this.topOfStack <= size(this.theArray[])-1 {0.0007+}, this.topOfStack <= size(this.theArray[])-1 {0.0026-}> (Bin,SJJ)
  <this.topOfStack <= this.topOfStack {0.1905-}, this.topOfStack <= this.topOfStack {0.6557-}> (Bin,SUU)
  <this.topOfStack < size(this.theArray[]) {0.0007-}, this.topOfStack < size(this.theArray[]) {0.0026-}> (Bin,SJJ)
  <null, this.topOfStack < size(this.theArray[])-1 {0.0026+}> (Bin,MJ)
  <size(this.theArray[]) != size(this.theArray[])-1 {0.0238-}, size(this.theArray[]) != size(this.theArray[])-1 {0.041-}> (Bin,SUU)
  <this.topOfStack != size(this.theArray[]) {0.0007-}, this.topOfStack != size(this.theArray[]) {0.0026-}> (Bin,SJJ)
  <null, this.topOfStack != size(this.theArray[])-1 {0.0026-}> (Bin,MJ)
  <this.topOfStack == this.topOfStack {0-}, this.topOfStack == this.topOfStack {0-}> (Bin,SJJ)
  <this.theArray[0..this.topOfStack-1] == this.theArray[0..this.topOfStack-1] (elementwise) {0-}, this.theArray[0..this.topOfStack-1] == this.theArray[0..this.topOfStack-1] (elementwise) {0-}> (Bin,SJJ)
  <this.theArray[0..this.topOfStack] == this.theArray[0..this.topOfStack] (elementwise) {0-}, this.theArray[0..this.topOfStack] == this.theArray[0..this.topOfStack] (elementwise) {0-}> (Bin,SJJ)
  <this.theArray[] == this.theArray[] (elementwise) {0-}, this.theArray[] == this.theArray[] (elementwise) {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack+1..] == this.theArray[this.topOfStack+1..] (elementwise) {0-}, this.theArray[this.topOfStack+1..] == this.theArray[this.topOfStack+1..] (elementwise) {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack..] == this.theArray[this.topOfStack..] (elementwise) {0-}, this.theArray[this.topOfStack..] == this.theArray[this.topOfStack..] (elementwise) {0-}> (Bin,SJJ)
  <this.theArray[0..this.topOfStack-1] == this.theArray[0..this.topOfStack-1] {0-}, this.theArray[0..this.topOfStack-1] == this.theArray[0..this.topOfStack-1] {0-}> (Bin,SJJ)
  <this.theArray[0..this.topOfStack] == this.theArray[0..this.topOfStack] {0-}, this.theArray[0..this.topOfStack] == this.theArray[0..this.topOfStack] {0-}> (Bin,SJJ)
  <this.theArray[] == this.theArray[] {0-}, this.theArray[] == this.theArray[] {0-}> (Bin,SJJ)
  <Too few samples for linear relation: 0 * Slice{Add{+1}[Field{topOfStack}[this]],}[Elements[Field{theArray}[this]]] == 0 * Slice{Add{+1}[Field{topOfStack}[this]],}[Elements[Field{theArray}[this]]] + 0 {1-}, Too few samples for linear relation: 0 * Slice{Add{+1}[Field{topOfStack}[this]],}[Elements[Field{theArray}[this]]] == 0 * Slice{Add{+1}[Field{topOfStack}[this]],}[Elements[Field{theArray}[this]]] + 0 {1-}> (Bin,SUU)
  <this.theArray[this.topOfStack..] == this.theArray[this.topOfStack..] {0-}, this.theArray[this.topOfStack..] == this.theArray[this.topOfStack..] {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack+1..] is the reverse of this.theArray[this.topOfStack+1..] {0-}, this.theArray[this.topOfStack+1..] is the reverse of this.theArray[this.topOfStack+1..] {0-}> (Bin,SJJ)
  <this.theArray[0..this.topOfStack-1] == this.theArray[0..this.topOfStack-1] {0-}, this.theArray[0..this.topOfStack-1] == this.theArray[0..this.topOfStack-1] {0-}> (Bin,SJJ)
  <this.theArray[0..this.topOfStack] == this.theArray[0..this.topOfStack] {0-}, this.theArray[0..this.topOfStack] == this.theArray[0..this.topOfStack] {0-}> (Bin,SJJ)
  <this.theArray[] == this.theArray[] {0-}, this.theArray[] == this.theArray[] {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack+1..] == this.theArray[this.topOfStack+1..] {0-}, this.theArray[this.topOfStack+1..] == this.theArray[this.topOfStack+1..] {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack..] == this.theArray[this.topOfStack..] {0-}, this.theArray[this.topOfStack..] == this.theArray[this.topOfStack..] {0-}> (Bin,SJJ)
  <this.theArray[] is a {sub,super}sequence of this.theArray[] {1-}, this.theArray[] is a {sub,super}sequence of this.theArray[] {1-}> (Bin,SUU)
  <this.theArray.class == this.theArray.class {0-}, this.theArray.class == this.theArray.class {0-}> (Bin,SJJ)
  <size(this.theArray[]) == java.lang.Math.max(size(this.theArray[]), size(this.theArray[])) {3-}, size(this.theArray[]) == java.lang.Math.max(size(this.theArray[]), size(this.theArray[])) {3-}> (Ter,SUU)
  <size(this.theArray[]) == java.lang.Math.max(size(this.theArray[]), size(this.theArray[])) {3-}, size(this.theArray[]) == java.lang.Math.max(size(this.theArray[]), size(this.theArray[])) {3-}> (Ter,SUU)
  <size(this.theArray[]) == java.lang.Math.max(size(this.theArray[]), size(this.theArray[])) {3-}, size(this.theArray[]) == java.lang.Math.max(size(this.theArray[]), size(this.theArray[])) {3-}> (Ter,SUU)
  <size(this.theArray[]) == java.lang.Math.min(size(this.theArray[]), size(this.theArray[])) {3-}, size(this.theArray[]) == java.lang.Math.min(size(this.theArray[]), size(this.theArray[])) {3-}> (Ter,SUU)
  <size(this.theArray[]) == java.lang.Math.min(size(this.theArray[]), size(this.theArray[])) {3-}, size(this.theArray[]) == java.lang.Math.min(size(this.theArray[]), size(this.theArray[])) {3-}> (Ter,SUU)
  <size(this.theArray[]) == java.lang.Math.min(size(this.theArray[]), size(this.theArray[])) {3-}, size(this.theArray[]) == java.lang.Math.min(size(this.theArray[]), size(this.theArray[])) {3-}> (Ter,SUU)
  <size(this.theArray[]) == size(this.theArray[]) & size(this.theArray[]) {3-}, size(this.theArray[]) == size(this.theArray[]) & size(this.theArray[]) {3-}> (Ter,SUU)
  <size(this.theArray[]) == size(this.theArray[]) & size(this.theArray[]) {3-}, size(this.theArray[]) == size(this.theArray[]) & size(this.theArray[]) {3-}> (Ter,SUU)
  <size(this.theArray[]) == size(this.theArray[]) & size(this.theArray[]) {3-}, size(this.theArray[]) == size(this.theArray[]) & size(this.theArray[]) {3-}> (Ter,SUU)
  <size(this.theArray[]) == size(this.theArray[]) | size(this.theArray[]) {3-}, size(this.theArray[]) == size(this.theArray[]) | size(this.theArray[]) {3-}> (Ter,SUU)
  <size(this.theArray[]) == size(this.theArray[]) | size(this.theArray[]) {3-}, size(this.theArray[]) == size(this.theArray[]) | size(this.theArray[]) {3-}> (Ter,SUU)
  <size(this.theArray[]) == size(this.theArray[]) | size(this.theArray[]) {3-}, size(this.theArray[]) == size(this.theArray[]) | size(this.theArray[]) {3-}> (Ter,SUU)
  <size(this.theArray[]) == org.plumelib.util.MathPlume.gcd(size(this.theArray[]), size(this.theArray[])) {3-}, size(this.theArray[]) == org.plumelib.util.MathPlume.gcd(size(this.theArray[]), size(this.theArray[])) {3-}> (Ter,SUU)
  <size(this.theArray[]) == org.plumelib.util.MathPlume.gcd(size(this.theArray[]), size(this.theArray[])) {3-}, size(this.theArray[]) == org.plumelib.util.MathPlume.gcd(size(this.theArray[]), size(this.theArray[])) {3-}> (Ter,SUU)
  <size(this.theArray[]) == org.plumelib.util.MathPlume.gcd(size(this.theArray[]), size(this.theArray[])) {3-}, size(this.theArray[]) == org.plumelib.util.MathPlume.gcd(size(this.theArray[]), size(this.theArray[])) {3-}> (Ter,SUU)
  <size(this.theArray[]) == java.lang.Math.max(size(this.theArray[])-1, size(this.theArray[])) {0.5-}, size(this.theArray[]) == java.lang.Math.max(size(this.theArray[]), size(this.theArray[])-1) {0-}> (Ter,SUJ)
  <null, size(this.theArray[]) == java.lang.Math.max(size(this.theArray[]), size(this.theArray[])-1) {0-}> (Ter,MJ)
  <size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[])-1, size(this.theArray[])) {0.25-}, size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[]), size(this.theArray[])-1) {0-}> (Ter,SUJ)
  <null, size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[]), size(this.theArray[])-1) {0-}> (Ter,MJ)
  <null, size(this.theArray[])-1 == size(this.theArray[])-1 % size(this.theArray[]) {0-}> (Ter,MJ)
  <null, size(this.theArray[])-1 == size(this.theArray[])-1 % size(this.theArray[]) {0-}> (Ter,MJ)
  <size(this.theArray[])-1 == java.lang.Math.max(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == java.lang.Math.max(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == java.lang.Math.max(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == java.lang.Math.max(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == java.lang.Math.max(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == java.lang.Math.max(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == size(this.theArray[])-1 & size(this.theArray[])-1 {3-}, size(this.theArray[])-1 == size(this.theArray[])-1 & size(this.theArray[])-1 {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == size(this.theArray[])-1 & size(this.theArray[])-1 {3-}, size(this.theArray[])-1 == size(this.theArray[])-1 & size(this.theArray[])-1 {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == size(this.theArray[])-1 & size(this.theArray[])-1 {3-}, size(this.theArray[])-1 == size(this.theArray[])-1 & size(this.theArray[])-1 {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == size(this.theArray[])-1 | size(this.theArray[])-1 {3-}, size(this.theArray[])-1 == size(this.theArray[])-1 | size(this.theArray[])-1 {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == size(this.theArray[])-1 | size(this.theArray[])-1 {3-}, size(this.theArray[])-1 == size(this.theArray[])-1 | size(this.theArray[])-1 {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == size(this.theArray[])-1 | size(this.theArray[])-1 {3-}, size(this.theArray[])-1 == size(this.theArray[])-1 | size(this.theArray[])-1 {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == org.plumelib.util.MathPlume.gcd(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == org.plumelib.util.MathPlume.gcd(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == org.plumelib.util.MathPlume.gcd(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == org.plumelib.util.MathPlume.gcd(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == org.plumelib.util.MathPlume.gcd(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == org.plumelib.util.MathPlume.gcd(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[]) == java.lang.Math.max(this.topOfStack, size(this.theArray[])) {0-}, size(this.theArray[]) == java.lang.Math.max(this.topOfStack, size(this.theArray[])) {0-}> (Ter,SJJ)
  <size(this.theArray[]) == java.lang.Math.max(this.topOfStack, size(this.theArray[])) {0-}, size(this.theArray[]) == java.lang.Math.max(this.topOfStack, size(this.theArray[])) {0-}> (Ter,SJJ)
  <size(this.theArray[])-1 == java.lang.Math.max(this.topOfStack, size(this.theArray[])-1) {0-}, size(this.theArray[])-1 == java.lang.Math.max(this.topOfStack, size(this.theArray[])-1) {0-}> (Ter,SJJ)
  <size(this.theArray[])-1 == java.lang.Math.max(this.topOfStack, size(this.theArray[])-1) {0-}, size(this.theArray[])-1 == java.lang.Math.max(this.topOfStack, size(this.theArray[])-1) {0-}> (Ter,SJJ)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])) {0.25-}, this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])) {0-}> (Ter,SUJ)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])) {0.25-}, this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])) {0-}> (Ter,SUJ)
  <null, this.topOfStack == this.topOfStack % size(this.theArray[]) {0-}> (Ter,MJ)
  <null, this.topOfStack == this.topOfStack % size(this.theArray[]) {0-}> (Ter,MJ)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])-1) {0.5-}, this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])-1) {0-}> (Ter,SUJ)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])-1) {0.5-}, this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])-1) {0-}> (Ter,SUJ)
  <this.topOfStack == java.lang.Math.max(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == java.lang.Math.max(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <this.topOfStack == java.lang.Math.max(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == java.lang.Math.max(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <this.topOfStack == java.lang.Math.max(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == java.lang.Math.max(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == java.lang.Math.min(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == java.lang.Math.min(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == java.lang.Math.min(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <this.topOfStack == this.topOfStack & this.topOfStack {3-}, this.topOfStack == this.topOfStack & this.topOfStack {3-}> (Ter,SUU)
  <this.topOfStack == this.topOfStack & this.topOfStack {3-}, this.topOfStack == this.topOfStack & this.topOfStack {3-}> (Ter,SUU)
  <this.topOfStack == this.topOfStack & this.topOfStack {3-}, this.topOfStack == this.topOfStack & this.topOfStack {3-}> (Ter,SUU)
  <this.topOfStack == this.topOfStack | this.topOfStack {3-}, this.topOfStack == this.topOfStack | this.topOfStack {3-}> (Ter,SUU)
  <this.topOfStack == this.topOfStack | this.topOfStack {3-}, this.topOfStack == this.topOfStack | this.topOfStack {3-}> (Ter,SUU)
  <this.topOfStack == this.topOfStack | this.topOfStack {3-}, this.topOfStack == this.topOfStack | this.topOfStack {3-}> (Ter,SUU)
  <this.topOfStack == org.plumelib.util.MathPlume.gcd(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == org.plumelib.util.MathPlume.gcd(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <this.topOfStack == org.plumelib.util.MathPlume.gcd(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == org.plumelib.util.MathPlume.gcd(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <this.topOfStack == org.plumelib.util.MathPlume.gcd(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == org.plumelib.util.MathPlume.gcd(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == 2 * size(this.theArray[]) - size(this.theArray[]) - 1 {0-}, null> (Ter,JM)
  <size(this.theArray[])-1 == 0.5 * size(this.theArray[]) + 0.5 * size(this.theArray[])-1 - 0.5 {0-}, null> (Ter,JM)
  <size(this.theArray[]) >= 0 {0-}, size(this.theArray[]) >= 2 {0.9643-}> (UInt,DJU)
  <this.topOfStack >= -1 {0+}, this.topOfStack >= -1 {0+}> (U!Int,SJJ)
  <null, size(this.theArray[]) != 0 {1-}> (UInt,MU)
  <null, size(this.theArray[])-1 != 0 {1-}> (UInt,MU)
  <this.theArray != null {0.0001+}, this.theArray != null {0.0001+}> (UInt,SJJ)
  <this.theArray[this.topOfStack-1] != null {0.0001-}, this.theArray[this.topOfStack-1] != null {0.0001-}> (UInt,SJJ)
  <this.theArray[this.topOfStack] != null {0.0001-}, this.theArray[this.topOfStack] != null {0.0001-}> (UInt,SJJ)
  <size(this.theArray[]) <= 20 {0-}, size(this.theArray[]) <= 15 {0-}> (U!Int,DJJ)
  <this.topOfStack <= 19 {1-}, this.topOfStack <= 13 {1-}> (U!Int,DUU)
  <this.theArray[0..this.topOfStack-1] elements != null {0.0001-}, this.theArray[0..this.topOfStack-1] elements != null {0.0001-}> (UInt,SJJ)
  <this.theArray[0..this.topOfStack] elements != null {0.0001+}, this.theArray[0..this.topOfStack] elements != null {0.0001+}> (UInt,SJJ)
  <this.theArray[this.topOfStack+1..] elements == null {0+}, this.theArray[this.topOfStack+1..] elements == null {0+}> (UInt,SJJ)
  <this.theArray[this.topOfStack+1..] elements are equal {0-}, this.theArray[this.topOfStack+1..] elements are equal {0-}> (UInt,SJJ)
  <null, this.theArray[0..this.topOfStack-1] contains no duplicates {0.0523-}> (UInt,MU)
  <null, this.theArray[0..this.topOfStack] contains no duplicates {0.0343-}> (UInt,MU)
  <this.theArray.class == "[Ljava.lang.Object;" {0+}, this.theArray.class == "[Ljava.lang.Object;" {0+}> (UInt,SJJ)
<DataStructures.StackAr.isFull()Z:::EXIT>
  <this.theArray[this.topOfStack-1] in this.theArray[] {0-}, this.theArray[this.topOfStack-1] in this.theArray[] {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack] in this.theArray[] {0-}, this.theArray[this.topOfStack] in this.theArray[] {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack-1] in this.theArray[0..this.topOfStack-1] {0-}, this.theArray[this.topOfStack-1] in this.theArray[0..this.topOfStack-1] {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack-1] in this.theArray[0..this.topOfStack] {0-}, this.theArray[this.topOfStack-1] in this.theArray[0..this.topOfStack] {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack] in this.theArray[0..this.topOfStack] {0-}, this.theArray[this.topOfStack] in this.theArray[0..this.topOfStack] {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack] in this.theArray[this.topOfStack..] {0-}, this.theArray[this.topOfStack] in this.theArray[this.topOfStack..] {0-}> (Bin,SJJ)
  <return == return {0-}, return == return {0-}> (Bin,SJJ)
  <size(this.theArray[]) == orig(size(this.theArray[])) {0+}, size(this.theArray[]) == orig(size(this.theArray[])) {0+}> (Bin,SJJ)
  <size(this.theArray[]) == size(this.theArray[]) {0-}, size(this.theArray[]) == size(this.theArray[]) {0-}> (Bin,SJJ)
  <size(this.theArray[])-1 == orig(size(this.theArray[]))-1 {0-}, size(this.theArray[])-1 == orig(size(this.theArray[]))-1 {0-}> (Bin,SJJ)
  <size(this.theArray[])-1 == size(this.theArray[])-1 {0-}, size(this.theArray[])-1 == size(this.theArray[])-1 {0-}> (Bin,SJJ)
  <this.theArray == orig(this.theArray) {0+}, this.theArray == orig(this.theArray) {0+}> (Bin,SJJ)
  <this.theArray == this.theArray {0-}, this.theArray == this.theArray {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack-1] == orig(this.theArray[post(this.topOfStack-1)]) {0+}, this.theArray[this.topOfStack-1] == orig(this.theArray[post(this.topOfStack-1)]) {0+}> (Bin,SJJ)
  <this.theArray[this.topOfStack-1] == orig(this.theArray[this.topOfStack-1]) {0+}, this.theArray[this.topOfStack-1] == orig(this.theArray[this.topOfStack-1]) {0+}> (Bin,SJJ)
  <this.theArray[this.topOfStack-1] == this.theArray[orig(this.topOfStack)-1] {0+}, this.theArray[this.topOfStack-1] == this.theArray[orig(this.topOfStack)-1] {0+}> (Bin,SJJ)
  <this.theArray[this.topOfStack-1] == this.theArray[this.topOfStack-1] {0-}, this.theArray[this.topOfStack-1] == this.theArray[this.topOfStack-1] {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack] == orig(this.theArray[post(this.topOfStack)]) {0+}, this.theArray[this.topOfStack] == orig(this.theArray[post(this.topOfStack)]) {0+}> (Bin,SJJ)
  <this.theArray[this.topOfStack] == orig(this.theArray[this.topOfStack]) {0+}, this.theArray[this.topOfStack] == orig(this.theArray[this.topOfStack]) {0+}> (Bin,SJJ)
  <this.theArray[this.topOfStack] == this.theArray[orig(this.topOfStack)] {0+}, this.theArray[this.topOfStack] == this.theArray[orig(this.topOfStack)] {0+}> (Bin,SJJ)
  <this.theArray[this.topOfStack] == this.theArray[this.topOfStack] {0-}, this.theArray[this.topOfStack] == this.theArray[this.topOfStack] {0-}> (Bin,SJJ)
  <this.topOfStack == orig(this.topOfStack) {0+}, this.topOfStack == orig(this.topOfStack) {0+}> (Bin,SJJ)
  <this.topOfStack == this.topOfStack {0-}, this.topOfStack == this.topOfStack {0-}> (Bin,SJJ)
  <size(this.theArray[]) >= size(this.theArray[]) {0.1905-}, size(this.theArray[]) >= size(this.theArray[]) {0.6557-}> (Bin,SUU)
  <size(this.theArray[]) >= size(this.theArray[])-1 {0.0238-}, size(this.theArray[]) >= size(this.theArray[])-1 {0.041-}> (Bin,SUU)
  <size(this.theArray[])-1 >= size(this.theArray[])-1 {0.1905-}, size(this.theArray[])-1 >= size(this.theArray[])-1 {0.6557-}> (Bin,SUU)
  <this.topOfStack >= this.topOfStack {0.1905-}, this.topOfStack >= this.topOfStack {0.6557-}> (Bin,SUU)
  <size(this.theArray[]) > size(this.theArray[])-1 {0.0238-}, size(this.theArray[]) > size(this.theArray[])-1 {0.041-}> (Bin,SUU)
  <size(this.theArray[]) <= size(this.theArray[]) {0.1905-}, size(this.theArray[]) <= size(this.theArray[]) {0.6557-}> (Bin,SUU)
  <size(this.theArray[])-1 <= size(this.theArray[])-1 {0.1905-}, size(this.theArray[])-1 <= size(this.theArray[])-1 {0.6557-}> (Bin,SUU)
  <this.topOfStack <= size(this.theArray[]) {0.0007-}, this.topOfStack <= size(this.theArray[]) {0.0026-}> (Bin,SJJ)
  <this.topOfStack <= size(this.theArray[])-1 {0.0007+}, this.topOfStack <= size(this.theArray[])-1 {0.0026-}> (Bin,SJJ)
  <this.topOfStack <= this.topOfStack {0.1905-}, this.topOfStack <= this.topOfStack {0.6557-}> (Bin,SUU)
  <this.topOfStack < size(this.theArray[]) {0.0007-}, this.topOfStack < size(this.theArray[]) {0.0026-}> (Bin,SJJ)
  <null, this.topOfStack < size(this.theArray[])-1 {0.0026+}> (Bin,MJ)
  <size(this.theArray[]) != size(this.theArray[])-1 {0.0238-}, size(this.theArray[]) != size(this.theArray[])-1 {0.041-}> (Bin,SUU)
  <this.topOfStack != size(this.theArray[]) {0.0007-}, this.topOfStack != size(this.theArray[]) {0.0026-}> (Bin,SJJ)
  <null, this.topOfStack != size(this.theArray[])-1 {0.0026-}> (Bin,MJ)
  <size(this.theArray[]) == size(this.theArray[]) {0-}, size(this.theArray[]) == size(this.theArray[]) {0-}> (Bin,SJJ)
  <size(this.theArray[])-1 == size(this.theArray[]) - 1 {0-}, size(this.theArray[])-1 == size(this.theArray[]) - 1 {0-}> (Bin,SJJ)
  <size(this.theArray[])-1 == size(this.theArray[])-1 {0-}, size(this.theArray[])-1 == size(this.theArray[])-1 {0-}> (Bin,SJJ)
  <this.topOfStack == this.topOfStack {0-}, this.topOfStack == this.topOfStack {0-}> (Bin,SJJ)
  <this.theArray[0..this.topOfStack-1] == this.theArray[0..this.topOfStack-1] (elementwise) {0-}, this.theArray[0..this.topOfStack-1] == this.theArray[0..this.topOfStack-1] (elementwise) {0-}> (Bin,SJJ)
  <this.theArray[0..this.topOfStack] == this.theArray[0..this.topOfStack] (elementwise) {0-}, this.theArray[0..this.topOfStack] == this.theArray[0..this.topOfStack] (elementwise) {0-}> (Bin,SJJ)
  <this.theArray[] == this.theArray[] (elementwise) {0-}, this.theArray[] == this.theArray[] (elementwise) {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack+1..] == this.theArray[this.topOfStack+1..] (elementwise) {0-}, this.theArray[this.topOfStack+1..] == this.theArray[this.topOfStack+1..] (elementwise) {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack..] == this.theArray[this.topOfStack..] (elementwise) {0-}, this.theArray[this.topOfStack..] == this.theArray[this.topOfStack..] (elementwise) {0-}> (Bin,SJJ)
  <this.theArray[0..this.topOfStack-1] == this.theArray[0..this.topOfStack-1] {0-}, this.theArray[0..this.topOfStack-1] == this.theArray[0..this.topOfStack-1] {0-}> (Bin,SJJ)
  <this.theArray[0..this.topOfStack] == this.theArray[0..this.topOfStack] {0-}, this.theArray[0..this.topOfStack] == this.theArray[0..this.topOfStack] {0-}> (Bin,SJJ)
  <this.theArray[] == this.theArray[] {0-}, this.theArray[] == this.theArray[] {0-}> (Bin,SJJ)
  <Too few samples for linear relation: 0 * Slice{Add{+1}[Field{topOfStack}[this]],}[Elements[Field{theArray}[this]]] == 0 * Slice{Add{+1}[Field{topOfStack}[this]],}[Elements[Field{theArray}[this]]] + 0 {1-}, Too few samples for linear relation: 0 * Slice{Add{+1}[Field{topOfStack}[this]],}[Elements[Field{theArray}[this]]] == 0 * Slice{Add{+1}[Field{topOfStack}[this]],}[Elements[Field{theArray}[this]]] + 0 {1-}> (Bin,SUU)
  <this.theArray[this.topOfStack..] == this.theArray[this.topOfStack..] {0-}, this.theArray[this.topOfStack..] == this.theArray[this.topOfStack..] {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack+1..] is the reverse of this.theArray[this.topOfStack+1..] {0-}, this.theArray[this.topOfStack+1..] is the reverse of this.theArray[this.topOfStack+1..] {0-}> (Bin,SJJ)
  <this.theArray[0..this.topOfStack-1] == orig(this.theArray[0..post(this.topOfStack-1)]) {0-}, this.theArray[0..this.topOfStack-1] == orig(this.theArray[0..post(this.topOfStack-1)]) {0-}> (Bin,SJJ)
  <this.theArray[0..this.topOfStack-1] == orig(this.theArray[0..this.topOfStack-1]) {0-}, this.theArray[0..this.topOfStack-1] == orig(this.theArray[0..this.topOfStack-1]) {0-}> (Bin,SJJ)
  <this.theArray[0..this.topOfStack-1] == this.theArray[0..orig(this.topOfStack)-1] {0-}, this.theArray[0..this.topOfStack-1] == this.theArray[0..orig(this.topOfStack)-1] {0-}> (Bin,SJJ)
  <this.theArray[0..this.topOfStack-1] == this.theArray[0..this.topOfStack-1] {0-}, this.theArray[0..this.topOfStack-1] == this.theArray[0..this.topOfStack-1] {0-}> (Bin,SJJ)
  <this.theArray[0..this.topOfStack] == orig(this.theArray[0..post(this.topOfStack)]) {0-}, this.theArray[0..this.topOfStack] == orig(this.theArray[0..post(this.topOfStack)]) {0-}> (Bin,SJJ)
  <this.theArray[0..this.topOfStack] == orig(this.theArray[0..this.topOfStack]) {0-}, this.theArray[0..this.topOfStack] == orig(this.theArray[0..this.topOfStack]) {0-}> (Bin,SJJ)
  <this.theArray[0..this.topOfStack] == this.theArray[0..orig(this.topOfStack)] {0-}, this.theArray[0..this.topOfStack] == this.theArray[0..orig(this.topOfStack)] {0-}> (Bin,SJJ)
  <this.theArray[0..this.topOfStack] == this.theArray[0..this.topOfStack] {0-}, this.theArray[0..this.topOfStack] == this.theArray[0..this.topOfStack] {0-}> (Bin,SJJ)
  <this.theArray[] == orig(this.theArray[]) {0+}, this.theArray[] == orig(this.theArray[]) {0+}> (Bin,SJJ)
  <this.theArray[] == this.theArray[] {0-}, this.theArray[] == this.theArray[] {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack+1..] == orig(this.theArray[post(this.topOfStack+1)..]) {0-}, this.theArray[this.topOfStack+1..] == orig(this.theArray[post(this.topOfStack+1)..]) {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack+1..] == orig(this.theArray[this.topOfStack+1..]) {0-}, this.theArray[this.topOfStack+1..] == orig(this.theArray[this.topOfStack+1..]) {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack+1..] == this.theArray[orig(this.topOfStack)+1..] {0-}, this.theArray[this.topOfStack+1..] == this.theArray[orig(this.topOfStack)+1..] {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack+1..] == this.theArray[this.topOfStack+1..] {0-}, this.theArray[this.topOfStack+1..] == this.theArray[this.topOfStack+1..] {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack..] == orig(this.theArray[post(this.topOfStack)..]) {0-}, this.theArray[this.topOfStack..] == orig(this.theArray[post(this.topOfStack)..]) {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack..] == orig(this.theArray[this.topOfStack..]) {0-}, this.theArray[this.topOfStack..] == orig(this.theArray[this.topOfStack..]) {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack..] == this.theArray[orig(this.topOfStack)..] {0-}, this.theArray[this.topOfStack..] == this.theArray[orig(this.topOfStack)..] {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack..] == this.theArray[this.topOfStack..] {0-}, this.theArray[this.topOfStack..] == this.theArray[this.topOfStack..] {0-}> (Bin,SJJ)
  <this.theArray[0..this.topOfStack-1] is a {sub,super}sequence of this.theArray[0..this.topOfStack-1] {1-}, this.theArray[0..this.topOfStack-1] is a {sub,super}sequence of this.theArray[0..this.topOfStack-1] {1-}> (Bin,SUU)
  <this.theArray[0..this.topOfStack-1] is a subsequence of this.theArray[0..this.topOfStack] {0-}, this.theArray[0..this.topOfStack-1] is a subsequence of this.theArray[0..this.topOfStack] {0-}> (Bin,SJJ)
  <this.theArray[0..this.topOfStack] is a {sub,super}sequence of this.theArray[0..this.topOfStack] {1-}, this.theArray[0..this.topOfStack] is a {sub,super}sequence of this.theArray[0..this.topOfStack] {1-}> (Bin,SUU)
  <this.theArray[0..this.topOfStack-1] is a subsequence of this.theArray[] {0-}, this.theArray[0..this.topOfStack-1] is a subsequence of this.theArray[] {0-}> (Bin,SJJ)
  <this.theArray[0..this.topOfStack] is a subsequence of this.theArray[] {0-}, this.theArray[0..this.topOfStack] is a subsequence of this.theArray[] {0-}> (Bin,SJJ)
  <this.theArray[] is a {sub,super}sequence of this.theArray[] {1-}, this.theArray[] is a {sub,super}sequence of this.theArray[] {1-}> (Bin,SUU)
  <this.theArray[this.topOfStack+1..] is a subsequence of this.theArray[] {0-}, this.theArray[this.topOfStack+1..] is a subsequence of this.theArray[] {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack..] is a subsequence of this.theArray[] {0-}, this.theArray[this.topOfStack..] is a subsequence of this.theArray[] {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack+1..] is a {sub,super}sequence of this.theArray[this.topOfStack+1..] {1-}, this.theArray[this.topOfStack+1..] is a {sub,super}sequence of this.theArray[this.topOfStack+1..] {1-}> (Bin,SUU)
  <this.theArray[this.topOfStack+1..] is a subsequence of this.theArray[this.topOfStack..] {0-}, this.theArray[this.topOfStack+1..] is a subsequence of this.theArray[this.topOfStack..] {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack..] is a {sub,super}sequence of this.theArray[this.topOfStack..] {1-}, this.theArray[this.topOfStack..] is a {sub,super}sequence of this.theArray[this.topOfStack..] {1-}> (Bin,SUU)
  <this.theArray.class == orig(this.theArray.class) {0+}, this.theArray.class == orig(this.theArray.class) {0+}> (Bin,SJJ)
  <this.theArray.class == this.theArray.class {0-}, this.theArray.class == this.theArray.class {0-}> (Bin,SJJ)
  <size(this.theArray[]) == java.lang.Math.max(size(this.theArray[]), size(this.theArray[])) {3-}, size(this.theArray[]) == java.lang.Math.max(size(this.theArray[]), size(this.theArray[])) {3-}> (Ter,SUU)
  <size(this.theArray[]) == java.lang.Math.max(size(this.theArray[]), size(this.theArray[])) {3-}, size(this.theArray[]) == java.lang.Math.max(size(this.theArray[]), size(this.theArray[])) {3-}> (Ter,SUU)
  <size(this.theArray[]) == java.lang.Math.max(size(this.theArray[]), size(this.theArray[])) {3-}, size(this.theArray[]) == java.lang.Math.max(size(this.theArray[]), size(this.theArray[])) {3-}> (Ter,SUU)
  <size(this.theArray[]) == java.lang.Math.min(size(this.theArray[]), size(this.theArray[])) {3-}, size(this.theArray[]) == java.lang.Math.min(size(this.theArray[]), size(this.theArray[])) {3-}> (Ter,SUU)
  <size(this.theArray[]) == java.lang.Math.min(size(this.theArray[]), size(this.theArray[])) {3-}, size(this.theArray[]) == java.lang.Math.min(size(this.theArray[]), size(this.theArray[])) {3-}> (Ter,SUU)
  <size(this.theArray[]) == java.lang.Math.min(size(this.theArray[]), size(this.theArray[])) {3-}, size(this.theArray[]) == java.lang.Math.min(size(this.theArray[]), size(this.theArray[])) {3-}> (Ter,SUU)
  <size(this.theArray[]) == size(this.theArray[]) & size(this.theArray[]) {3-}, size(this.theArray[]) == size(this.theArray[]) & size(this.theArray[]) {3-}> (Ter,SUU)
  <size(this.theArray[]) == size(this.theArray[]) & size(this.theArray[]) {3-}, size(this.theArray[]) == size(this.theArray[]) & size(this.theArray[]) {3-}> (Ter,SUU)
  <size(this.theArray[]) == size(this.theArray[]) & size(this.theArray[]) {3-}, size(this.theArray[]) == size(this.theArray[]) & size(this.theArray[]) {3-}> (Ter,SUU)
  <size(this.theArray[]) == size(this.theArray[]) | size(this.theArray[]) {3-}, size(this.theArray[]) == size(this.theArray[]) | size(this.theArray[]) {3-}> (Ter,SUU)
  <size(this.theArray[]) == size(this.theArray[]) | size(this.theArray[]) {3-}, size(this.theArray[]) == size(this.theArray[]) | size(this.theArray[]) {3-}> (Ter,SUU)
  <size(this.theArray[]) == size(this.theArray[]) | size(this.theArray[]) {3-}, size(this.theArray[]) == size(this.theArray[]) | size(this.theArray[]) {3-}> (Ter,SUU)
  <size(this.theArray[]) == org.plumelib.util.MathPlume.gcd(size(this.theArray[]), size(this.theArray[])) {3-}, size(this.theArray[]) == org.plumelib.util.MathPlume.gcd(size(this.theArray[]), size(this.theArray[])) {3-}> (Ter,SUU)
  <size(this.theArray[]) == org.plumelib.util.MathPlume.gcd(size(this.theArray[]), size(this.theArray[])) {3-}, size(this.theArray[]) == org.plumelib.util.MathPlume.gcd(size(this.theArray[]), size(this.theArray[])) {3-}> (Ter,SUU)
  <size(this.theArray[]) == org.plumelib.util.MathPlume.gcd(size(this.theArray[]), size(this.theArray[])) {3-}, size(this.theArray[]) == org.plumelib.util.MathPlume.gcd(size(this.theArray[]), size(this.theArray[])) {3-}> (Ter,SUU)
  <size(this.theArray[]) == java.lang.Math.max(size(this.theArray[])-1, size(this.theArray[])) {0.5-}, size(this.theArray[]) == java.lang.Math.max(size(this.theArray[]), size(this.theArray[])-1) {0-}> (Ter,SUJ)
  <null, size(this.theArray[]) == java.lang.Math.max(size(this.theArray[]), size(this.theArray[])-1) {0-}> (Ter,MJ)
  <size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[])-1, size(this.theArray[])) {0.25-}, size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[]), size(this.theArray[])-1) {0-}> (Ter,SUJ)
  <null, size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[]), size(this.theArray[])-1) {0-}> (Ter,MJ)
  <null, size(this.theArray[])-1 == size(this.theArray[])-1 % size(this.theArray[]) {0-}> (Ter,MJ)
  <null, size(this.theArray[])-1 == size(this.theArray[])-1 % size(this.theArray[]) {0-}> (Ter,MJ)
  <size(this.theArray[])-1 == java.lang.Math.max(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == java.lang.Math.max(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == java.lang.Math.max(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == java.lang.Math.max(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == java.lang.Math.max(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == java.lang.Math.max(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == size(this.theArray[])-1 & size(this.theArray[])-1 {3-}, size(this.theArray[])-1 == size(this.theArray[])-1 & size(this.theArray[])-1 {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == size(this.theArray[])-1 & size(this.theArray[])-1 {3-}, size(this.theArray[])-1 == size(this.theArray[])-1 & size(this.theArray[])-1 {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == size(this.theArray[])-1 & size(this.theArray[])-1 {3-}, size(this.theArray[])-1 == size(this.theArray[])-1 & size(this.theArray[])-1 {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == size(this.theArray[])-1 | size(this.theArray[])-1 {3-}, size(this.theArray[])-1 == size(this.theArray[])-1 | size(this.theArray[])-1 {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == size(this.theArray[])-1 | size(this.theArray[])-1 {3-}, size(this.theArray[])-1 == size(this.theArray[])-1 | size(this.theArray[])-1 {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == size(this.theArray[])-1 | size(this.theArray[])-1 {3-}, size(this.theArray[])-1 == size(this.theArray[])-1 | size(this.theArray[])-1 {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == org.plumelib.util.MathPlume.gcd(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == org.plumelib.util.MathPlume.gcd(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == org.plumelib.util.MathPlume.gcd(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == org.plumelib.util.MathPlume.gcd(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == org.plumelib.util.MathPlume.gcd(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == org.plumelib.util.MathPlume.gcd(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[]) == java.lang.Math.max(this.topOfStack, size(this.theArray[])) {0-}, size(this.theArray[]) == java.lang.Math.max(this.topOfStack, size(this.theArray[])) {0-}> (Ter,SJJ)
  <size(this.theArray[]) == java.lang.Math.max(this.topOfStack, size(this.theArray[])) {0-}, size(this.theArray[]) == java.lang.Math.max(this.topOfStack, size(this.theArray[])) {0-}> (Ter,SJJ)
  <size(this.theArray[])-1 == java.lang.Math.max(this.topOfStack, size(this.theArray[])-1) {0-}, size(this.theArray[])-1 == java.lang.Math.max(this.topOfStack, size(this.theArray[])-1) {0-}> (Ter,SJJ)
  <size(this.theArray[])-1 == java.lang.Math.max(this.topOfStack, size(this.theArray[])-1) {0-}, size(this.theArray[])-1 == java.lang.Math.max(this.topOfStack, size(this.theArray[])-1) {0-}> (Ter,SJJ)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])) {0.25-}, this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])) {0-}> (Ter,SUJ)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])) {0.25-}, this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])) {0-}> (Ter,SUJ)
  <null, this.topOfStack == this.topOfStack % size(this.theArray[]) {0-}> (Ter,MJ)
  <null, this.topOfStack == this.topOfStack % size(this.theArray[]) {0-}> (Ter,MJ)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])-1) {0.5-}, this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])-1) {0-}> (Ter,SUJ)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])-1) {0.5-}, this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])-1) {0-}> (Ter,SUJ)
  <this.topOfStack == java.lang.Math.max(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == java.lang.Math.max(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <this.topOfStack == java.lang.Math.max(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == java.lang.Math.max(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <this.topOfStack == java.lang.Math.max(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == java.lang.Math.max(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == java.lang.Math.min(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == java.lang.Math.min(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == java.lang.Math.min(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <this.topOfStack == this.topOfStack & this.topOfStack {3-}, this.topOfStack == this.topOfStack & this.topOfStack {3-}> (Ter,SUU)
  <this.topOfStack == this.topOfStack & this.topOfStack {3-}, this.topOfStack == this.topOfStack & this.topOfStack {3-}> (Ter,SUU)
  <this.topOfStack == this.topOfStack & this.topOfStack {3-}, this.topOfStack == this.topOfStack & this.topOfStack {3-}> (Ter,SUU)
  <this.topOfStack == this.topOfStack | this.topOfStack {3-}, this.topOfStack == this.topOfStack | this.topOfStack {3-}> (Ter,SUU)
  <this.topOfStack == this.topOfStack | this.topOfStack {3-}, this.topOfStack == this.topOfStack | this.topOfStack {3-}> (Ter,SUU)
  <this.topOfStack == this.topOfStack | this.topOfStack {3-}, this.topOfStack == this.topOfStack | this.topOfStack {3-}> (Ter,SUU)
  <this.topOfStack == org.plumelib.util.MathPlume.gcd(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == org.plumelib.util.MathPlume.gcd(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <this.topOfStack == org.plumelib.util.MathPlume.gcd(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == org.plumelib.util.MathPlume.gcd(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <this.topOfStack == org.plumelib.util.MathPlume.gcd(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == org.plumelib.util.MathPlume.gcd(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == 2 * size(this.theArray[]) - size(this.theArray[]) - 1 {0-}, null> (Ter,JM)
  <size(this.theArray[])-1 == 0.5 * size(this.theArray[]) + 0.5 * size(this.theArray[])-1 - 0.5 {0-}, null> (Ter,JM)
  <size(this.theArray[]) >= 0 {0-}, size(this.theArray[]) >= 2 {0.9643-}> (UInt,DJU)
  <size(this.theArray[])-1 >= -1 {0-}, size(this.theArray[])-1 >= 1 {0.9643-}> (UInt,DJU)
  <this.topOfStack >= -1 {0+}, this.topOfStack >= -1 {0+}> (U!Int,SJJ)
  <null, size(this.theArray[]) != 0 {1-}> (UInt,MU)
  <null, size(this.theArray[])-1 != 0 {1-}> (UInt,MU)
  <this.theArray != null {0.0001+}, this.theArray != null {0.0001+}> (UInt,SJJ)
  <this.theArray[this.topOfStack-1] != null {0.0001-}, this.theArray[this.topOfStack-1] != null {0.0001-}> (UInt,SJJ)
  <this.theArray[this.topOfStack] != null {0.0001-}, this.theArray[this.topOfStack] != null {0.0001-}> (UInt,SJJ)
  <null, return == false {0+}> (UInt,MJ)
  <size(this.theArray[]) <= 20 {0-}, size(this.theArray[]) <= 15 {0-}> (U!Int,DJJ)
  <size(this.theArray[])-1 <= 19 {0-}, size(this.theArray[])-1 <= 14 {0-}> (U!Int,DJJ)
  <this.topOfStack <= 19 {1-}, this.topOfStack <= 13 {1-}> (U!Int,DUU)
  <this.theArray[0..this.topOfStack-1] elements != null {0.0001-}, this.theArray[0..this.topOfStack-1] elements != null {0.0001-}> (UInt,SJJ)
  <this.theArray[0..this.topOfStack] elements != null {0.0001+}, this.theArray[0..this.topOfStack] elements != null {0.0001+}> (UInt,SJJ)
  <this.theArray[this.topOfStack+1..] elements == null {0+}, this.theArray[this.topOfStack+1..] elements == null {0+}> (UInt,SJJ)
  <this.theArray[this.topOfStack+1..] elements are equal {0-}, this.theArray[this.topOfStack+1..] elements are equal {0-}> (UInt,SJJ)
  <null, this.theArray[0..this.topOfStack-1] contains no duplicates {0.0523-}> (UInt,MU)
  <null, this.theArray[0..this.topOfStack] contains no duplicates {0.0343-}> (UInt,MU)
  <this.theArray.class == "[Ljava.lang.Object;" {0+}, this.theArray.class == "[Ljava.lang.Object;" {0+}> (UInt,SJJ)
<DataStructures.StackAr.isFull()Z:::EXIT50>
  <return == return {0-}, return == return {0-}> (Bin,SJJ)
  <size(this.theArray[]) == size(this.theArray[]) {0-}, size(this.theArray[]) == size(this.theArray[]) {0-}> (Bin,SJJ)
  <size(this.theArray[])-1 == size(this.theArray[])-1 {0-}, size(this.theArray[])-1 == size(this.theArray[])-1 {0-}> (Bin,SJJ)
  <this.theArray == this.theArray {0-}, this.theArray == this.theArray {0-}> (Bin,SJJ)
  <this.topOfStack == this.topOfStack {0-}, this.topOfStack == this.topOfStack {0-}> (Bin,SJJ)
  <size(this.theArray[]) >= size(this.theArray[]) {0.1905-}, size(this.theArray[]) >= size(this.theArray[]) {0.6557-}> (Bin,SUU)
  <size(this.theArray[]) >= size(this.theArray[])-1 {0.0238-}, size(this.theArray[]) >= size(this.theArray[])-1 {0.041-}> (Bin,SUU)
  <size(this.theArray[])-1 >= size(this.theArray[])-1 {0.1905-}, size(this.theArray[])-1 >= size(this.theArray[])-1 {0.6557-}> (Bin,SUU)
  <this.topOfStack >= this.topOfStack {0.1905-}, this.topOfStack >= this.topOfStack {0.6557-}> (Bin,SUU)
  <size(this.theArray[]) > size(this.theArray[])-1 {0.0238-}, size(this.theArray[]) > size(this.theArray[])-1 {0.041-}> (Bin,SUU)
  <size(this.theArray[]) <= size(this.theArray[]) {0.1905-}, size(this.theArray[]) <= size(this.theArray[]) {0.6557-}> (Bin,SUU)
  <size(this.theArray[])-1 <= size(this.theArray[])-1 {0.1905-}, size(this.theArray[])-1 <= size(this.theArray[])-1 {0.6557-}> (Bin,SUU)
  <this.topOfStack <= size(this.theArray[]) {0.0007-}, this.topOfStack <= size(this.theArray[]) {0.0026-}> (Bin,SJJ)
  <this.topOfStack <= size(this.theArray[])-1 {0.0007+}, this.topOfStack <= size(this.theArray[])-1 {0.0026-}> (Bin,SJJ)
  <this.topOfStack <= this.topOfStack {0.1905-}, this.topOfStack <= this.topOfStack {0.6557-}> (Bin,SUU)
  <this.topOfStack < size(this.theArray[]) {0.0007-}, this.topOfStack < size(this.theArray[]) {0.0026-}> (Bin,SJJ)
  <null, this.topOfStack < size(this.theArray[])-1 {0.0026+}> (Bin,MJ)
  <size(this.theArray[]) != size(this.theArray[])-1 {0.0238-}, size(this.theArray[]) != size(this.theArray[])-1 {0.041-}> (Bin,SUU)
  <this.topOfStack != size(this.theArray[]) {0.0007-}, this.topOfStack != size(this.theArray[]) {0.0026-}> (Bin,SJJ)
  <null, this.topOfStack != size(this.theArray[])-1 {0.0026-}> (Bin,MJ)
  <size(this.theArray[]) == size(this.theArray[]) {0-}, size(this.theArray[]) == size(this.theArray[]) {0-}> (Bin,SJJ)
  <size(this.theArray[])-1 == size(this.theArray[]) - 1 {0-}, size(this.theArray[])-1 == size(this.theArray[]) - 1 {0-}> (Bin,SJJ)
  <size(this.theArray[])-1 == size(this.theArray[])-1 {0-}, size(this.theArray[])-1 == size(this.theArray[])-1 {0-}> (Bin,SJJ)
  <this.topOfStack == this.topOfStack {0-}, this.topOfStack == this.topOfStack {0-}> (Bin,SJJ)
  <this.theArray[0..this.topOfStack] == this.theArray[0..this.topOfStack] (elementwise) {0-}, this.theArray[0..this.topOfStack] == this.theArray[0..this.topOfStack] (elementwise) {0-}> (Bin,SJJ)
  <this.theArray[] == this.theArray[] (elementwise) {0-}, this.theArray[] == this.theArray[] (elementwise) {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack+1..] == this.theArray[this.topOfStack+1..] (elementwise) {0-}, this.theArray[this.topOfStack+1..] == this.theArray[this.topOfStack+1..] (elementwise) {0-}> (Bin,SJJ)
  <this.theArray[0..this.topOfStack] == this.theArray[0..this.topOfStack] {0-}, this.theArray[0..this.topOfStack] == this.theArray[0..this.topOfStack] {0-}> (Bin,SJJ)
  <this.theArray[] == this.theArray[] {0-}, this.theArray[] == this.theArray[] {0-}> (Bin,SJJ)
  <Too few samples for linear relation: 0 * Slice{Add{+1}[Field{topOfStack}[this]],}[Elements[Field{theArray}[this]]] == 0 * Slice{Add{+1}[Field{topOfStack}[this]],}[Elements[Field{theArray}[this]]] + 0 {1-}, Too few samples for linear relation: 0 * Slice{Add{+1}[Field{topOfStack}[this]],}[Elements[Field{theArray}[this]]] == 0 * Slice{Add{+1}[Field{topOfStack}[this]],}[Elements[Field{theArray}[this]]] + 0 {1-}> (Bin,SUU)
  <this.theArray[this.topOfStack+1..] is the reverse of this.theArray[this.topOfStack+1..] {0-}, this.theArray[this.topOfStack+1..] is the reverse of this.theArray[this.topOfStack+1..] {0-}> (Bin,SJJ)
  <this.theArray[0..this.topOfStack] == this.theArray[0..this.topOfStack] {0-}, this.theArray[0..this.topOfStack] == this.theArray[0..this.topOfStack] {0-}> (Bin,SJJ)
  <this.theArray[] == this.theArray[] {0-}, this.theArray[] == this.theArray[] {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack+1..] == this.theArray[this.topOfStack+1..] {0-}, this.theArray[this.topOfStack+1..] == this.theArray[this.topOfStack+1..] {0-}> (Bin,SJJ)
  <this.theArray[0..this.topOfStack] is a {sub,super}sequence of this.theArray[0..this.topOfStack] {1-}, this.theArray[0..this.topOfStack] is a {sub,super}sequence of this.theArray[0..this.topOfStack] {1-}> (Bin,SUU)
  <this.theArray[0..this.topOfStack] is a subsequence of this.theArray[] {0-}, this.theArray[0..this.topOfStack] is a subsequence of this.theArray[] {0-}> (Bin,SJJ)
  <this.theArray[] is a {sub,super}sequence of this.theArray[] {1-}, this.theArray[] is a {sub,super}sequence of this.theArray[] {1-}> (Bin,SUU)
  <this.theArray[this.topOfStack+1..] is a subsequence of this.theArray[] {0-}, this.theArray[this.topOfStack+1..] is a subsequence of this.theArray[] {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack+1..] is a {sub,super}sequence of this.theArray[this.topOfStack+1..] {1-}, this.theArray[this.topOfStack+1..] is a {sub,super}sequence of this.theArray[this.topOfStack+1..] {1-}> (Bin,SUU)
  <this.theArray.class == this.theArray.class {0-}, this.theArray.class == this.theArray.class {0-}> (Bin,SJJ)
  <size(this.theArray[]) == java.lang.Math.max(size(this.theArray[]), size(this.theArray[])) {3-}, size(this.theArray[]) == java.lang.Math.max(size(this.theArray[]), size(this.theArray[])) {3-}> (Ter,SUU)
  <size(this.theArray[]) == java.lang.Math.max(size(this.theArray[]), size(this.theArray[])) {3-}, size(this.theArray[]) == java.lang.Math.max(size(this.theArray[]), size(this.theArray[])) {3-}> (Ter,SUU)
  <size(this.theArray[]) == java.lang.Math.max(size(this.theArray[]), size(this.theArray[])) {3-}, size(this.theArray[]) == java.lang.Math.max(size(this.theArray[]), size(this.theArray[])) {3-}> (Ter,SUU)
  <size(this.theArray[]) == java.lang.Math.min(size(this.theArray[]), size(this.theArray[])) {3-}, size(this.theArray[]) == java.lang.Math.min(size(this.theArray[]), size(this.theArray[])) {3-}> (Ter,SUU)
  <size(this.theArray[]) == java.lang.Math.min(size(this.theArray[]), size(this.theArray[])) {3-}, size(this.theArray[]) == java.lang.Math.min(size(this.theArray[]), size(this.theArray[])) {3-}> (Ter,SUU)
  <size(this.theArray[]) == java.lang.Math.min(size(this.theArray[]), size(this.theArray[])) {3-}, size(this.theArray[]) == java.lang.Math.min(size(this.theArray[]), size(this.theArray[])) {3-}> (Ter,SUU)
  <size(this.theArray[]) == size(this.theArray[]) & size(this.theArray[]) {3-}, size(this.theArray[]) == size(this.theArray[]) & size(this.theArray[]) {3-}> (Ter,SUU)
  <size(this.theArray[]) == size(this.theArray[]) & size(this.theArray[]) {3-}, size(this.theArray[]) == size(this.theArray[]) & size(this.theArray[]) {3-}> (Ter,SUU)
  <size(this.theArray[]) == size(this.theArray[]) & size(this.theArray[]) {3-}, size(this.theArray[]) == size(this.theArray[]) & size(this.theArray[]) {3-}> (Ter,SUU)
  <size(this.theArray[]) == size(this.theArray[]) | size(this.theArray[]) {3-}, size(this.theArray[]) == size(this.theArray[]) | size(this.theArray[]) {3-}> (Ter,SUU)
  <size(this.theArray[]) == size(this.theArray[]) | size(this.theArray[]) {3-}, size(this.theArray[]) == size(this.theArray[]) | size(this.theArray[]) {3-}> (Ter,SUU)
  <size(this.theArray[]) == size(this.theArray[]) | size(this.theArray[]) {3-}, size(this.theArray[]) == size(this.theArray[]) | size(this.theArray[]) {3-}> (Ter,SUU)
  <size(this.theArray[]) == org.plumelib.util.MathPlume.gcd(size(this.theArray[]), size(this.theArray[])) {3-}, size(this.theArray[]) == org.plumelib.util.MathPlume.gcd(size(this.theArray[]), size(this.theArray[])) {3-}> (Ter,SUU)
  <size(this.theArray[]) == org.plumelib.util.MathPlume.gcd(size(this.theArray[]), size(this.theArray[])) {3-}, size(this.theArray[]) == org.plumelib.util.MathPlume.gcd(size(this.theArray[]), size(this.theArray[])) {3-}> (Ter,SUU)
  <size(this.theArray[]) == org.plumelib.util.MathPlume.gcd(size(this.theArray[]), size(this.theArray[])) {3-}, size(this.theArray[]) == org.plumelib.util.MathPlume.gcd(size(this.theArray[]), size(this.theArray[])) {3-}> (Ter,SUU)
  <size(this.theArray[]) == java.lang.Math.max(size(this.theArray[])-1, size(this.theArray[])) {0.5-}, size(this.theArray[]) == java.lang.Math.max(size(this.theArray[]), size(this.theArray[])-1) {0-}> (Ter,SUJ)
  <null, size(this.theArray[]) == java.lang.Math.max(size(this.theArray[]), size(this.theArray[])-1) {0-}> (Ter,MJ)
  <size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[])-1, size(this.theArray[])) {0.25-}, size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[]), size(this.theArray[])-1) {0-}> (Ter,SUJ)
  <null, size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[]), size(this.theArray[])-1) {0-}> (Ter,MJ)
  <null, size(this.theArray[])-1 == size(this.theArray[])-1 % size(this.theArray[]) {0-}> (Ter,MJ)
  <null, size(this.theArray[])-1 == size(this.theArray[])-1 % size(this.theArray[]) {0-}> (Ter,MJ)
  <size(this.theArray[])-1 == java.lang.Math.max(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == java.lang.Math.max(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == java.lang.Math.max(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == java.lang.Math.max(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == java.lang.Math.max(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == java.lang.Math.max(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == size(this.theArray[])-1 & size(this.theArray[])-1 {3-}, size(this.theArray[])-1 == size(this.theArray[])-1 & size(this.theArray[])-1 {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == size(this.theArray[])-1 & size(this.theArray[])-1 {3-}, size(this.theArray[])-1 == size(this.theArray[])-1 & size(this.theArray[])-1 {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == size(this.theArray[])-1 & size(this.theArray[])-1 {3-}, size(this.theArray[])-1 == size(this.theArray[])-1 & size(this.theArray[])-1 {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == size(this.theArray[])-1 | size(this.theArray[])-1 {3-}, size(this.theArray[])-1 == size(this.theArray[])-1 | size(this.theArray[])-1 {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == size(this.theArray[])-1 | size(this.theArray[])-1 {3-}, size(this.theArray[])-1 == size(this.theArray[])-1 | size(this.theArray[])-1 {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == size(this.theArray[])-1 | size(this.theArray[])-1 {3-}, size(this.theArray[])-1 == size(this.theArray[])-1 | size(this.theArray[])-1 {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == org.plumelib.util.MathPlume.gcd(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == org.plumelib.util.MathPlume.gcd(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == org.plumelib.util.MathPlume.gcd(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == org.plumelib.util.MathPlume.gcd(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == org.plumelib.util.MathPlume.gcd(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == org.plumelib.util.MathPlume.gcd(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[]) == java.lang.Math.max(this.topOfStack, size(this.theArray[])) {0-}, size(this.theArray[]) == java.lang.Math.max(this.topOfStack, size(this.theArray[])) {0-}> (Ter,SJJ)
  <size(this.theArray[]) == java.lang.Math.max(this.topOfStack, size(this.theArray[])) {0-}, size(this.theArray[]) == java.lang.Math.max(this.topOfStack, size(this.theArray[])) {0-}> (Ter,SJJ)
  <size(this.theArray[])-1 == java.lang.Math.max(this.topOfStack, size(this.theArray[])-1) {0-}, size(this.theArray[])-1 == java.lang.Math.max(this.topOfStack, size(this.theArray[])-1) {0-}> (Ter,SJJ)
  <size(this.theArray[])-1 == java.lang.Math.max(this.topOfStack, size(this.theArray[])-1) {0-}, size(this.theArray[])-1 == java.lang.Math.max(this.topOfStack, size(this.theArray[])-1) {0-}> (Ter,SJJ)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])) {0.25-}, this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])) {0-}> (Ter,SUJ)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])) {0.25-}, this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])) {0-}> (Ter,SUJ)
  <null, this.topOfStack == this.topOfStack % size(this.theArray[]) {0-}> (Ter,MJ)
  <null, this.topOfStack == this.topOfStack % size(this.theArray[]) {0-}> (Ter,MJ)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])-1) {0.5-}, this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])-1) {0-}> (Ter,SUJ)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])-1) {0.5-}, this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])-1) {0-}> (Ter,SUJ)
  <this.topOfStack == java.lang.Math.max(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == java.lang.Math.max(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <this.topOfStack == java.lang.Math.max(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == java.lang.Math.max(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <this.topOfStack == java.lang.Math.max(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == java.lang.Math.max(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == java.lang.Math.min(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == java.lang.Math.min(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == java.lang.Math.min(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <this.topOfStack == this.topOfStack & this.topOfStack {3-}, this.topOfStack == this.topOfStack & this.topOfStack {3-}> (Ter,SUU)
  <this.topOfStack == this.topOfStack & this.topOfStack {3-}, this.topOfStack == this.topOfStack & this.topOfStack {3-}> (Ter,SUU)
  <this.topOfStack == this.topOfStack & this.topOfStack {3-}, this.topOfStack == this.topOfStack & this.topOfStack {3-}> (Ter,SUU)
  <this.topOfStack == this.topOfStack | this.topOfStack {3-}, this.topOfStack == this.topOfStack | this.topOfStack {3-}> (Ter,SUU)
  <this.topOfStack == this.topOfStack | this.topOfStack {3-}, this.topOfStack == this.topOfStack | this.topOfStack {3-}> (Ter,SUU)
  <this.topOfStack == this.topOfStack | this.topOfStack {3-}, this.topOfStack == this.topOfStack | this.topOfStack {3-}> (Ter,SUU)
  <this.topOfStack == org.plumelib.util.MathPlume.gcd(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == org.plumelib.util.MathPlume.gcd(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <this.topOfStack == org.plumelib.util.MathPlume.gcd(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == org.plumelib.util.MathPlume.gcd(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <this.topOfStack == org.plumelib.util.MathPlume.gcd(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == org.plumelib.util.MathPlume.gcd(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == 2 * size(this.theArray[]) - size(this.theArray[]) - 1 {0-}, null> (Ter,JM)
  <size(this.theArray[])-1 == 0.5 * size(this.theArray[]) + 0.5 * size(this.theArray[])-1 - 0.5 {0-}, null> (Ter,JM)
  <size(this.theArray[]) >= 0 {0-}, size(this.theArray[]) >= 2 {0.9643-}> (UInt,DJU)
  <size(this.theArray[])-1 >= -1 {0-}, size(this.theArray[])-1 >= 1 {0.9643-}> (UInt,DJU)
  <this.topOfStack >= -1 {0+}, this.topOfStack >= -1 {0+}> (U!Int,SJJ)
  <null, size(this.theArray[]) != 0 {1-}> (UInt,MU)
  <null, size(this.theArray[])-1 != 0 {1-}> (UInt,MU)
  <this.theArray != null {0.0001+}, this.theArray != null {0.0001+}> (UInt,SJJ)
  <null, return == false {0+}> (UInt,MJ)
  <size(this.theArray[]) <= 20 {0-}, size(this.theArray[]) <= 15 {0-}> (U!Int,DJJ)
  <size(this.theArray[])-1 <= 19 {0-}, size(this.theArray[])-1 <= 14 {0-}> (U!Int,DJJ)
  <this.topOfStack <= 19 {1-}, this.topOfStack <= 13 {1-}> (U!Int,DUU)
  <this.theArray[0..this.topOfStack] elements != null {0.0001+}, this.theArray[0..this.topOfStack] elements != null {0.0001+}> (UInt,SJJ)
  <this.theArray[this.topOfStack+1..] elements == null {0+}, this.theArray[this.topOfStack+1..] elements == null {0+}> (UInt,SJJ)
  <this.theArray[this.topOfStack+1..] elements are equal {0-}, this.theArray[this.topOfStack+1..] elements are equal {0-}> (UInt,SJJ)
  <null, this.theArray[0..this.topOfStack] contains no duplicates {0.0343-}> (UInt,MU)
  <this.theArray.class == "[Ljava.lang.Object;" {0+}, this.theArray.class == "[Ljava.lang.Object;" {0+}> (UInt,SJJ)
<DataStructures.StackAr.makeEmpty()V:::ENTER>
  <null, this.theArray[this.topOfStack] in this.theArray[] {0-}> (Bin,MJ)
  <this.theArray[this.topOfStack-1] in this.theArray[this.topOfStack..] {0-}, null> (Bin,JM)
  <null, this.theArray[] elements ?cmp? this.theArray[this.topOfStack] {1-}> (Bin,MU)
  <this.theArray[0..this.topOfStack-1] elements == this.theArray[this.topOfStack-1] {0-}, null> (Bin,JM)
  <this.theArray[0..this.topOfStack] elements == this.theArray[this.topOfStack-1] {0-}, null> (Bin,JM)
  <this.theArray[0..this.topOfStack-1] elements == this.theArray[this.topOfStack] {0-}, null> (Bin,JM)
  <this.theArray[0..this.topOfStack] elements == this.theArray[this.topOfStack] {0-}, null> (Bin,JM)
  <null, this.topOfStack == ~this.topOfStack {1-}> (Bin,MU)
  <size(this.theArray[]) == size(this.theArray[]) {0-}, null> (Bin,JM)
  <size(this.theArray[])-1 == size(this.theArray[])-1 {0-}, null> (Bin,JM)
  <this.theArray == this.theArray {0-}, null> (Bin,JM)
  <this.theArray[this.topOfStack-1] == this.theArray[this.topOfStack-1] {0-}, null> (Bin,JM)
  <this.theArray[this.topOfStack] == this.theArray[this.topOfStack-1] {0+}, null> (Bin,JM)
  <this.theArray[this.topOfStack] == this.theArray[this.topOfStack] {0-}, this.theArray[this.topOfStack] == this.theArray[this.topOfStack] {1-}> (Bin,SJU)
  <this.topOfStack == this.topOfStack {0-}, this.topOfStack == this.topOfStack {1-}> (Bin,SJU)
  <size(this.theArray[]) >= size(this.theArray[]) {0.9227-}, null> (Bin,UM)
  <size(this.theArray[]) >= size(this.theArray[])-1 {0.1153-}, null> (Bin,UM)
  <size(this.theArray[])-1 >= size(this.theArray[])-1 {0.9227-}, null> (Bin,UM)
  <this.topOfStack >= this.topOfStack {0.9227-}, this.topOfStack >= this.topOfStack {1-}> (Bin,SUU)
  <size(this.theArray[]) > size(this.theArray[])-1 {0.1153-}, null> (Bin,UM)
  <null, this.topOfStack > this.topOfStack {1-}> (Bin,MU)
  <size(this.theArray[]) <= size(this.theArray[]) {0.9227-}, null> (Bin,UM)
  <size(this.theArray[])-1 <= size(this.theArray[])-1 {0.9227-}, null> (Bin,UM)
  <this.topOfStack <= size(this.theArray[]) {0.0072-}, null> (Bin,JM)
  <this.topOfStack <= size(this.theArray[])-1 {0.0288-}, null> (Bin,UM)
  <this.topOfStack <= this.topOfStack {0.9227-}, this.topOfStack <= this.topOfStack {1-}> (Bin,SUU)
  <this.topOfStack < size(this.theArray[]) {0.0072-}, null> (Bin,JM)
  <null, this.topOfStack < this.topOfStack {1-}> (Bin,MU)
  <size(this.theArray[]) != size(this.theArray[])-1 {0.1153-}, null> (Bin,UM)
  <this.topOfStack != size(this.theArray[]) {0.0072-}, null> (Bin,JM)
  <null, this.topOfStack != this.topOfStack {1-}> (Bin,MU)
  <this.topOfStack == this.topOfStack {0-}, this.topOfStack == - this.topOfStack + 3 {0.3333-}> (Bin,DJU)
  <null, this.theArray[] == ~this.theArray[] {1-}> (Bin,MU)
  <this.theArray[0..this.topOfStack-1] == this.theArray[0..this.topOfStack-1] (elementwise) {0-}, null> (Bin,JM)
  <this.theArray[0..this.topOfStack] == this.theArray[0..this.topOfStack] (elementwise) {0-}, null> (Bin,JM)
  <this.theArray[] == this.theArray[] (elementwise) {0-}, this.theArray[] ?cmp? this.theArray[] (elementwise) {1-}> (Bin,DJU)
  <this.theArray[this.topOfStack+1..] == this.theArray[this.topOfStack+1..] (elementwise) {0-}, null> (Bin,JM)
  <this.theArray[this.topOfStack..] == this.theArray[this.topOfStack..] (elementwise) {0-}, null> (Bin,JM)
  <Too few samples for linear relation: 0 * Slice{,Add{-1}[Field{topOfStack}[this]]}[Elements[Field{theArray}[this]]] == 0 * Slice{,Add{-1}[Field{topOfStack}[this]]}[Elements[Field{theArray}[this]]] + 0 {0.3333-}, null> (Bin,UM)
  <this.theArray[0..this.topOfStack] == this.theArray[0..this.topOfStack] {0-}, null> (Bin,JM)
  <this.theArray[] == this.theArray[] {0-}, Too few samples for linear relation: 0 * Elements[Field{theArray}[this]] == 0 * Elements[Field{theArray}[this]] + 0 {1-}> (Bin,DJU)
  <Too few samples for linear relation: 0 * Slice{Add{+1}[Field{topOfStack}[this]],}[Elements[Field{theArray}[this]]] == 0 * Slice{Add{+1}[Field{topOfStack}[this]],}[Elements[Field{theArray}[this]]] + 0 {1-}, null> (Bin,UM)
  <this.theArray[this.topOfStack..] == this.theArray[this.topOfStack..] {0-}, null> (Bin,JM)
  <this.theArray[0..this.topOfStack-1] is the reverse of this.theArray[0..this.topOfStack-1] {0-}, null> (Bin,JM)
  <this.theArray[0..this.topOfStack] is the reverse of this.theArray[0..this.topOfStack] {0-}, null> (Bin,JM)
  <null, this.theArray[] is the reverse of this.theArray[] {0-}> (Bin,MJ)
  <this.theArray[this.topOfStack+1..] is the reverse of this.theArray[this.topOfStack+1..] {0-}, null> (Bin,JM)
  <this.theArray[0..this.topOfStack-1] == this.theArray[0..this.topOfStack-1] {0-}, null> (Bin,JM)
  <this.theArray[0..this.topOfStack] == this.theArray[0..this.topOfStack] {0-}, null> (Bin,JM)
  <this.theArray[] == this.theArray[] {0-}, this.theArray[] ?cmp? this.theArray[] (lexically) {1-}> (Bin,DJU)
  <this.theArray[this.topOfStack+1..] == this.theArray[this.topOfStack+1..] {0-}, null> (Bin,JM)
  <this.theArray[this.topOfStack..] == this.theArray[this.topOfStack..] {0-}, null> (Bin,JM)
  <this.theArray[] is a {sub,super}sequence of this.theArray[] {1-}, this.theArray[] is a {sub,super}sequence of this.theArray[] {1-}> (Bin,SUU)
  <this.theArray.class == this.theArray.class {0-}, this.theArray.class ?cmp? this.theArray.class {1-}> (Bin,DJU)
  <size(this.theArray[]) == java.lang.Math.max(size(this.theArray[]), size(this.theArray[])) {3-}, null> (Ter,UM)
  <size(this.theArray[]) == java.lang.Math.max(size(this.theArray[]), size(this.theArray[])) {3-}, null> (Ter,UM)
  <size(this.theArray[]) == java.lang.Math.max(size(this.theArray[]), size(this.theArray[])) {3-}, null> (Ter,UM)
  <size(this.theArray[]) == java.lang.Math.min(size(this.theArray[]), size(this.theArray[])) {3-}, null> (Ter,UM)
  <size(this.theArray[]) == java.lang.Math.min(size(this.theArray[]), size(this.theArray[])) {3-}, null> (Ter,UM)
  <size(this.theArray[]) == java.lang.Math.min(size(this.theArray[]), size(this.theArray[])) {3-}, null> (Ter,UM)
  <size(this.theArray[]) == size(this.theArray[]) & size(this.theArray[]) {3-}, null> (Ter,UM)
  <size(this.theArray[]) == size(this.theArray[]) & size(this.theArray[]) {3-}, null> (Ter,UM)
  <size(this.theArray[]) == size(this.theArray[]) & size(this.theArray[]) {3-}, null> (Ter,UM)
  <size(this.theArray[]) == size(this.theArray[]) | size(this.theArray[]) {3-}, null> (Ter,UM)
  <size(this.theArray[]) == size(this.theArray[]) | size(this.theArray[]) {3-}, null> (Ter,UM)
  <size(this.theArray[]) == size(this.theArray[]) | size(this.theArray[]) {3-}, null> (Ter,UM)
  <size(this.theArray[]) == org.plumelib.util.MathPlume.gcd(size(this.theArray[]), size(this.theArray[])) {3-}, null> (Ter,UM)
  <size(this.theArray[]) == org.plumelib.util.MathPlume.gcd(size(this.theArray[]), size(this.theArray[])) {3-}, null> (Ter,UM)
  <size(this.theArray[]) == org.plumelib.util.MathPlume.gcd(size(this.theArray[]), size(this.theArray[])) {3-}, null> (Ter,UM)
  <size(this.theArray[]) == java.lang.Math.max(size(this.theArray[]), size(this.theArray[])-1) {0.5-}, null> (Ter,UM)
  <size(this.theArray[]) == java.lang.Math.max(size(this.theArray[]), size(this.theArray[])-1) {0.5-}, null> (Ter,UM)
  <size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[]), size(this.theArray[])-1) {0.25-}, null> (Ter,UM)
  <size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[]), size(this.theArray[])-1) {0.25-}, null> (Ter,UM)
  <size(this.theArray[])-1 == size(this.theArray[])-1 % size(this.theArray[]) {0.25-}, null> (Ter,UM)
  <size(this.theArray[])-1 == size(this.theArray[])-1 % size(this.theArray[]) {0.25-}, null> (Ter,UM)
  <size(this.theArray[])-1 == java.lang.Math.max(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, null> (Ter,UM)
  <size(this.theArray[])-1 == java.lang.Math.max(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, null> (Ter,UM)
  <size(this.theArray[])-1 == java.lang.Math.max(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, null> (Ter,UM)
  <size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, null> (Ter,UM)
  <size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, null> (Ter,UM)
  <size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, null> (Ter,UM)
  <size(this.theArray[])-1 == size(this.theArray[])-1 & size(this.theArray[])-1 {3-}, null> (Ter,UM)
  <size(this.theArray[])-1 == size(this.theArray[])-1 & size(this.theArray[])-1 {3-}, null> (Ter,UM)
  <size(this.theArray[])-1 == size(this.theArray[])-1 & size(this.theArray[])-1 {3-}, null> (Ter,UM)
  <size(this.theArray[])-1 == size(this.theArray[])-1 | size(this.theArray[])-1 {3-}, null> (Ter,UM)
  <size(this.theArray[])-1 == size(this.theArray[])-1 | size(this.theArray[])-1 {3-}, null> (Ter,UM)
  <size(this.theArray[])-1 == size(this.theArray[])-1 | size(this.theArray[])-1 {3-}, null> (Ter,UM)
  <size(this.theArray[])-1 == org.plumelib.util.MathPlume.gcd(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, null> (Ter,UM)
  <size(this.theArray[])-1 == org.plumelib.util.MathPlume.gcd(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, null> (Ter,UM)
  <size(this.theArray[])-1 == org.plumelib.util.MathPlume.gcd(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, null> (Ter,UM)
  <size(this.theArray[]) == java.lang.Math.max(this.topOfStack, size(this.theArray[])) {0.5-}, null> (Ter,UM)
  <size(this.theArray[]) == java.lang.Math.max(this.topOfStack, size(this.theArray[])) {0.5-}, null> (Ter,UM)
  <size(this.theArray[])-1 == java.lang.Math.max(this.topOfStack, size(this.theArray[])-1) {0.5-}, null> (Ter,UM)
  <size(this.theArray[])-1 == java.lang.Math.max(this.topOfStack, size(this.theArray[])-1) {0.5-}, null> (Ter,UM)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])) {0.25-}, null> (Ter,UM)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])) {0.25-}, null> (Ter,UM)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])-1) {0.5-}, null> (Ter,UM)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])-1) {0.5-}, null> (Ter,UM)
  <this.topOfStack == java.lang.Math.max(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == this.topOfStack * this.topOfStack {3-}> (Ter,DUU)
  <this.topOfStack == java.lang.Math.max(this.topOfStack, this.topOfStack) {3-}, null> (Ter,UM)
  <this.topOfStack == java.lang.Math.max(this.topOfStack, this.topOfStack) {3-}, null> (Ter,UM)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, this.topOfStack) {3-}, null> (Ter,UM)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, this.topOfStack) {3-}, null> (Ter,UM)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, this.topOfStack) {3-}, null> (Ter,UM)
  <this.topOfStack == this.topOfStack & this.topOfStack {3-}, null> (Ter,UM)
  <this.topOfStack == this.topOfStack & this.topOfStack {3-}, null> (Ter,UM)
  <this.topOfStack == this.topOfStack & this.topOfStack {3-}, null> (Ter,UM)
  <this.topOfStack == this.topOfStack | this.topOfStack {3-}, null> (Ter,UM)
  <this.topOfStack == this.topOfStack | this.topOfStack {3-}, null> (Ter,UM)
  <this.topOfStack == this.topOfStack | this.topOfStack {3-}, null> (Ter,UM)
  <this.topOfStack == org.plumelib.util.MathPlume.gcd(this.topOfStack, this.topOfStack) {3-}, null> (Ter,UM)
  <this.topOfStack == org.plumelib.util.MathPlume.gcd(this.topOfStack, this.topOfStack) {3-}, null> (Ter,UM)
  <this.topOfStack == org.plumelib.util.MathPlume.gcd(this.topOfStack, this.topOfStack) {3-}, null> (Ter,UM)
  <Too few samples for linear relation: 0 * SizeOf[Elements[Field{theArray}[this]]] == 0 * SizeOf[Elements[Field{theArray}[this]]] + 0 * SizeOf[Elements[Field{theArray}[this]]] + 0 {0.25-}, null> (Ter,UM)
  <Too few samples for linear relation: 0 * Add{-1}[SizeOf[Elements[Field{theArray}[this]]]] == 0 * SizeOf[Elements[Field{theArray}[this]]] + 0 * SizeOf[Elements[Field{theArray}[this]]] + 0 {0.25-}, null> (Ter,UM)
  <Too few samples for linear relation: 0 * Add{-1}[SizeOf[Elements[Field{theArray}[this]]]] == 0 * SizeOf[Elements[Field{theArray}[this]]] + 0 * Add{-1}[SizeOf[Elements[Field{theArray}[this]]]] + 0 {0.25-}, null> (Ter,UM)
  <Too few samples for linear relation: 0 * Add{-1}[SizeOf[Elements[Field{theArray}[this]]]] == 0 * Add{-1}[SizeOf[Elements[Field{theArray}[this]]]] + 0 * Add{-1}[SizeOf[Elements[Field{theArray}[this]]]] + 0 {0.25-}, null> (Ter,UM)
  <null, this.topOfStack == - Infinity * this.topOfStack + Infinity * this.topOfStack + NaN {0-}> (Ter,MJ)
  <size(this.theArray[]) >= 1 {0.5-}, null> (UInt,UM)
  <this.topOfStack >= -1 {0+}, this.topOfStack >= 9223372036854775807 {1-}> (U!Int,DJU)
  <size(this.theArray[]) != 0 {1-}, null> (UInt,UM)
  <this.theArray != null {0.039-}, null> (UInt,UM)
  <this.theArray[this.topOfStack-1] != null {0.2963-}, null> (UInt,UM)
  <this.theArray[this.topOfStack] != null {0.1975-}, null> (UInt,UM)
  <null, this.topOfStack != 0 {1-}> (UInt,MU)
  <null, this.theArray one of {  } {1-}> (UInt,MU)
  <null, this.theArray[this.topOfStack] one of {  } {1-}> (UInt,MU)
  <null, this.topOfStack one of {  } {1-}> (UInt,MU)
  <size(this.theArray[]) <= 20 {0.5-}, null> (U!Int,UM)
  <this.topOfStack <= 10 {1-}, this.topOfStack <= -9223372036854775808 {1-}> (U!Int,DUU)
  <this.theArray[0..this.topOfStack-1] elements != null {0.1975-}, null> (UInt,UM)
  <this.theArray[0..this.topOfStack] elements != null {0.039-}, null> (UInt,UM)
  <null, this.theArray[] elements != null {1-}> (UInt,MU)
  <null, this.theArray[] elements one of {  } {1-}> (UInt,MU)
  <this.theArray[this.topOfStack+1..] elements == null {0+}, null> (UInt,JM)
  <this.theArray[0..this.topOfStack-1] elements are equal {0-}, null> (UInt,JM)
  <this.theArray[0..this.topOfStack] elements are equal {0+}, null> (UInt,JM)
  <null, this.theArray[] elements are equal {1-}> (UInt,MU)
  <this.theArray[this.topOfStack+1..] elements are equal {0-}, null> (UInt,JM)
  <null, this.theArray[] contains no duplicates {1-}> (UInt,MU)
  <null, this.theArray[] one of {  } {1-}> (UInt,MU)
  <this.theArray.class == "[Ljava.lang.Object;" {0+}, this.theArray.class one of {  } {1-}> (UInt,DJU)
  <null, this.theArray[].class elements one of {  } {1-}> (UInt,MU)
  <null, this.theArray[].class one of {  } {1-}> (UInt,MU)
<DataStructures.StackAr.makeEmpty()V:::EXIT>
  <orig(this.theArray[this.topOfStack-1]) in orig(this.theArray[]) {0-}, null> (Bin,JM)
  <orig(this.theArray[this.topOfStack]) in orig(this.theArray[]) {0-}, null> (Bin,JM)
  <this.theArray[this.topOfStack] in orig(this.theArray[]) {0-}, null> (Bin,JM)
  <orig(this.theArray[this.topOfStack-1]) in orig(this.theArray[this.topOfStack..]) {0-}, null> (Bin,JM)
  <this.theArray[orig(this.topOfStack)-1] in this.theArray[] {0-}, null> (Bin,JM)
  <this.theArray[orig(this.topOfStack)] in this.theArray[] {0-}, null> (Bin,JM)
  <this.theArray[this.topOfStack] in this.theArray[] {0-}, this.theArray[this.topOfStack] in this.theArray[] {0-}> (Bin,SJJ)
  <this.theArray[orig(this.topOfStack)-1] in this.theArray[orig(this.topOfStack)..] {0-}, null> (Bin,JM)
  <orig(this.theArray[this.topOfStack-1]) in this.theArray[this.topOfStack..] {0-}, null> (Bin,JM)
  <orig(this.theArray[this.topOfStack]) in this.theArray[this.topOfStack..] {0-}, null> (Bin,JM)
  <this.theArray[orig(this.topOfStack)-1] in this.theArray[this.topOfStack..] {0-}, null> (Bin,JM)
  <this.theArray[orig(this.topOfStack)] in this.theArray[this.topOfStack..] {0-}, null> (Bin,JM)
  <this.theArray[this.topOfStack] in orig(this.theArray[0..this.topOfStack-1]) {0-}, null> (Bin,JM)
  <this.theArray[this.topOfStack] in orig(this.theArray[0..this.topOfStack]) {0-}, null> (Bin,JM)
  <this.theArray[this.topOfStack] in orig(this.theArray[this.topOfStack..]) {0-}, null> (Bin,JM)
  <this.theArray[this.topOfStack] in this.theArray[0..orig(this.topOfStack)-1] {0-}, null> (Bin,JM)
  <this.theArray[this.topOfStack] in this.theArray[0..orig(this.topOfStack)] {0-}, null> (Bin,JM)
  <this.theArray[this.topOfStack] in this.theArray[0..this.topOfStack] {0-}, null> (Bin,JM)
  <this.theArray[this.topOfStack] in this.theArray[orig(this.topOfStack)+1..] {0-}, null> (Bin,JM)
  <this.theArray[this.topOfStack] in this.theArray[orig(this.topOfStack)..] {0-}, null> (Bin,JM)
  <this.theArray[this.topOfStack] in this.theArray[this.topOfStack..] {0-}, null> (Bin,JM)
  <orig(this.theArray[]) elements ?cmp? this.theArray[this.topOfStack] {1-}, null> (Bin,UM)
  <orig(this.theArray[0..this.topOfStack-1]) elements == orig(this.theArray[this.topOfStack-1]) {0-}, null> (Bin,JM)
  <orig(this.theArray[0..this.topOfStack]) elements == orig(this.theArray[this.topOfStack-1]) {0-}, null> (Bin,JM)
  <orig(this.theArray[0..this.topOfStack-1]) elements == orig(this.theArray[this.topOfStack]) {0-}, null> (Bin,JM)
  <orig(this.theArray[0..this.topOfStack]) elements == orig(this.theArray[this.topOfStack]) {0-}, null> (Bin,JM)
  <this.theArray[0..this.topOfStack] elements ?cmp? orig(this.theArray[this.topOfStack-1]) {1-}, null> (Bin,UM)
  <this.theArray[0..this.topOfStack] elements ?cmp? orig(this.theArray[this.topOfStack]) {1-}, null> (Bin,UM)
  <this.theArray[0..this.topOfStack] elements ?cmp? this.theArray[orig(this.topOfStack)-1] {1-}, null> (Bin,UM)
  <this.theArray[0..this.topOfStack] elements ?cmp? this.theArray[orig(this.topOfStack)] {1-}, null> (Bin,UM)
  <this.theArray[] elements == this.theArray[orig(this.topOfStack)-1] {0-}, null> (Bin,JM)
  <this.theArray[] elements == this.theArray[orig(this.topOfStack)] {0-}, null> (Bin,JM)
  <this.theArray[] elements ?cmp? this.theArray[this.topOfStack] {1-}, this.theArray[] elements ?cmp? this.theArray[this.topOfStack] {1-}> (Bin,SUU)
  <this.theArray[0..orig(this.topOfStack)-1] elements == this.theArray[orig(this.topOfStack)-1] {0-}, null> (Bin,JM)
  <this.theArray[0..orig(this.topOfStack)] elements == this.theArray[orig(this.topOfStack)-1] {0-}, null> (Bin,JM)
  <this.theArray[orig(this.topOfStack)+1..] elements == this.theArray[orig(this.topOfStack)-1] {0-}, null> (Bin,JM)
  <this.theArray[orig(this.topOfStack)..] elements == this.theArray[orig(this.topOfStack)-1] {0-}, null> (Bin,JM)
  <this.theArray[0..orig(this.topOfStack)-1] elements == this.theArray[orig(this.topOfStack)] {0-}, null> (Bin,JM)
  <this.theArray[0..orig(this.topOfStack)] elements == this.theArray[orig(this.topOfStack)] {0-}, null> (Bin,JM)
  <this.theArray[orig(this.topOfStack)+1..] elements == this.theArray[orig(this.topOfStack)] {0-}, null> (Bin,JM)
  <this.theArray[orig(this.topOfStack)..] elements == this.theArray[orig(this.topOfStack)] {0-}, null> (Bin,JM)
  <this.theArray[this.topOfStack..] elements ?cmp? orig(this.theArray[this.topOfStack-1]) {1-}, null> (Bin,UM)
  <this.theArray[this.topOfStack..] elements ?cmp? orig(this.theArray[this.topOfStack]) {1-}, null> (Bin,UM)
  <this.theArray[this.topOfStack..] elements ?cmp? this.theArray[orig(this.topOfStack)-1] {1-}, null> (Bin,UM)
  <this.theArray[this.topOfStack..] elements ?cmp? this.theArray[orig(this.topOfStack)] {1-}, null> (Bin,UM)
  <orig(this.theArray[0..this.topOfStack-1]) elements ?cmp? this.theArray[this.topOfStack] {1-}, null> (Bin,UM)
  <orig(this.theArray[0..this.topOfStack]) elements ?cmp? this.theArray[this.topOfStack] {1-}, null> (Bin,UM)
  <orig(this.theArray[this.topOfStack..]) elements ?cmp? this.theArray[this.topOfStack] {1-}, null> (Bin,UM)
  <this.theArray[0..orig(this.topOfStack)-1] elements ?cmp? this.theArray[this.topOfStack] {1-}, null> (Bin,UM)
  <this.theArray[0..orig(this.topOfStack)] elements ?cmp? this.theArray[this.topOfStack] {1-}, null> (Bin,UM)
  <this.theArray[0..this.topOfStack] elements ?cmp? this.theArray[this.topOfStack] {1-}, null> (Bin,UM)
  <this.theArray[orig(this.topOfStack)+1..] elements ?cmp? this.theArray[this.topOfStack] {1-}, null> (Bin,UM)
  <this.theArray[orig(this.topOfStack)..] elements ?cmp? this.theArray[this.topOfStack] {1-}, null> (Bin,UM)
  <this.theArray[this.topOfStack..] elements ?cmp? this.theArray[this.topOfStack] {1-}, null> (Bin,UM)
  <null, this.topOfStack == ~this.topOfStack {1-}> (Bin,MU)
  <orig(this.theArray[this.topOfStack-1]) == orig(this.theArray[this.topOfStack-1]) {0-}, null> (Bin,JM)
  <orig(this.theArray[this.topOfStack]) == orig(this.theArray[this.topOfStack-1]) {0+}, null> (Bin,JM)
  <orig(this.theArray[this.topOfStack]) == orig(this.theArray[this.topOfStack]) {0-}, null> (Bin,JM)
  <orig(this.topOfStack) == orig(this.topOfStack) {0-}, null> (Bin,JM)
  <size(this.theArray[]) == orig(size(this.theArray[])) {0+}, null> (Bin,JM)
  <size(this.theArray[]) == size(this.theArray[]) {0-}, null> (Bin,JM)
  <size(this.theArray[])-1 == orig(size(this.theArray[]))-1 {0-}, null> (Bin,JM)
  <size(this.theArray[])-1 == size(this.theArray[])-1 {0-}, null> (Bin,JM)
  <this.theArray == orig(this.theArray) {0+}, null> (Bin,JM)
  <this.theArray == this.theArray {0-}, null> (Bin,JM)
  <this.theArray[orig(this.topOfStack)-1] == this.theArray[orig(this.topOfStack)-1] {0-}, null> (Bin,JM)
  <this.theArray[orig(this.topOfStack)] == this.theArray[orig(this.topOfStack)-1] {0+}, null> (Bin,JM)
  <this.theArray[orig(this.topOfStack)] == this.theArray[orig(this.topOfStack)] {0-}, null> (Bin,JM)
  <this.theArray[this.topOfStack] == orig(this.theArray[this.topOfStack-1]) {1-}, null> (Bin,UM)
  <this.theArray[this.topOfStack] == orig(this.theArray[this.topOfStack]) {1-}, null> (Bin,UM)
  <this.theArray[this.topOfStack] == this.theArray[orig(this.topOfStack)-1] {1-}, null> (Bin,UM)
  <this.theArray[this.topOfStack] == this.theArray[orig(this.topOfStack)] {1-}, null> (Bin,UM)
  <this.theArray[this.topOfStack] == this.theArray[this.topOfStack] {1-}, this.theArray[this.topOfStack] == this.theArray[this.topOfStack] {1-}> (Bin,SUU)
  <this.topOfStack == this.topOfStack {0-}, this.topOfStack == this.topOfStack {1-}> (Bin,SJU)
  <orig(this.topOfStack) >= orig(this.topOfStack) {0.9227-}, null> (Bin,UM)
  <size(this.theArray[]) >= size(this.theArray[]) {0.9227-}, null> (Bin,UM)
  <size(this.theArray[]) >= size(this.theArray[])-1 {0.1153-}, null> (Bin,UM)
  <size(this.theArray[])-1 >= size(this.theArray[])-1 {0.9227-}, null> (Bin,UM)
  <this.topOfStack >= this.topOfStack {0.9227-}, this.topOfStack >= this.topOfStack {1-}> (Bin,SUU)
  <size(this.theArray[]) > size(this.theArray[])-1 {0.1153-}, null> (Bin,UM)
  <null, this.topOfStack > this.topOfStack {1-}> (Bin,MU)
  <orig(this.topOfStack) <= orig(this.topOfStack) {0.9227-}, null> (Bin,UM)
  <orig(this.topOfStack) <= size(this.theArray[]) {0.0072-}, null> (Bin,JM)
  <orig(this.topOfStack) <= size(this.theArray[])-1 {0.0288-}, null> (Bin,UM)
  <size(this.theArray[]) <= size(this.theArray[]) {0.9227-}, null> (Bin,UM)
  <size(this.theArray[])-1 <= size(this.theArray[])-1 {0.9227-}, null> (Bin,UM)
  <this.topOfStack <= orig(this.topOfStack) {0.1153-}, null> (Bin,UM)
  <this.topOfStack <= size(this.theArray[]) {0.0577-}, null> (Bin,UM)
  <this.topOfStack <= size(this.theArray[])-1 {0.1153-}, null> (Bin,UM)
  <this.topOfStack <= this.topOfStack {0.9227-}, this.topOfStack <= this.topOfStack {1-}> (Bin,SUU)
  <orig(this.topOfStack) < size(this.theArray[]) {0.0072-}, null> (Bin,JM)
  <this.topOfStack < size(this.theArray[]) {0.0577-}, null> (Bin,UM)
  <this.topOfStack < size(this.theArray[])-1 {0.1153-}, null> (Bin,UM)
  <null, this.topOfStack < this.topOfStack {1-}> (Bin,MU)
  <orig(this.topOfStack) != size(this.theArray[]) {0.0072-}, null> (Bin,JM)
  <size(this.theArray[]) != size(this.theArray[])-1 {0.1153-}, null> (Bin,UM)
  <this.topOfStack != size(this.theArray[]) {0.0577-}, null> (Bin,UM)
  <this.topOfStack != size(this.theArray[])-1 {0.1153-}, null> (Bin,UM)
  <null, this.topOfStack != this.topOfStack {1-}> (Bin,MU)
  <orig(this.topOfStack) == orig(this.topOfStack) {0-}, null> (Bin,JM)
  <size(this.theArray[]) == size(this.theArray[]) {0-}, null> (Bin,JM)
  <size(this.theArray[])-1 == size(this.theArray[]) - 1 {0-}, null> (Bin,JM)
  <size(this.theArray[])-1 == size(this.theArray[])-1 {0-}, null> (Bin,JM)
  <Too few samples for linear relation: 0 * Field{topOfStack}[this] == 0 * Field{topOfStack}[this] + 0 {1-}, this.topOfStack == - this.topOfStack + 3 {0.3333-}> (Bin,SUU)
  <orig(this.theArray[]) == ~this.theArray[this.topOfStack..] {1-}, null> (Bin,UM)
  <this.theArray[this.topOfStack..] == ~orig(this.theArray[]) {1-}, null> (Bin,UM)
  <this.theArray[0..this.topOfStack] == ~this.theArray[0..this.topOfStack] {1-}, null> (Bin,UM)
  <this.theArray[0..this.topOfStack] == ~this.theArray[0..this.topOfStack] {1-}, null> (Bin,UM)
  <null, this.theArray[] == ~this.theArray[] {1-}> (Bin,MU)
  <this.theArray[] == ~this.theArray[this.topOfStack..] {1-}, null> (Bin,UM)
  <this.theArray[this.topOfStack..] == ~this.theArray[] {1-}, null> (Bin,UM)
  <orig(this.theArray[0..this.topOfStack-1]) == ~this.theArray[this.topOfStack..] {1-}, null> (Bin,UM)
  <this.theArray[this.topOfStack..] == ~orig(this.theArray[0..this.topOfStack-1]) {1-}, null> (Bin,UM)
  <orig(this.theArray[0..this.topOfStack]) == ~this.theArray[this.topOfStack..] {1-}, null> (Bin,UM)
  <this.theArray[this.topOfStack..] == ~orig(this.theArray[0..this.topOfStack]) {1-}, null> (Bin,UM)
  <orig(this.theArray[this.topOfStack..]) == ~this.theArray[this.topOfStack..] {1-}, null> (Bin,UM)
  <this.theArray[this.topOfStack..] == ~orig(this.theArray[this.topOfStack..]) {1-}, null> (Bin,UM)
  <this.theArray[0..orig(this.topOfStack)-1] == ~this.theArray[this.topOfStack..] {1-}, null> (Bin,UM)
  <this.theArray[this.topOfStack..] == ~this.theArray[0..orig(this.topOfStack)-1] {1-}, null> (Bin,UM)
  <this.theArray[0..orig(this.topOfStack)] == ~this.theArray[this.topOfStack..] {1-}, null> (Bin,UM)
  <this.theArray[this.topOfStack..] == ~this.theArray[0..orig(this.topOfStack)] {1-}, null> (Bin,UM)
  <this.theArray[0..this.topOfStack] == ~this.theArray[this.topOfStack..] {1-}, null> (Bin,UM)
  <this.theArray[this.topOfStack..] == ~this.theArray[0..this.topOfStack] {1-}, null> (Bin,UM)
  <this.theArray[orig(this.topOfStack)+1..] == ~this.theArray[this.topOfStack..] {1-}, null> (Bin,UM)
  <this.theArray[this.topOfStack..] == ~this.theArray[orig(this.topOfStack)+1..] {1-}, null> (Bin,UM)
  <this.theArray[orig(this.topOfStack)..] == ~this.theArray[this.topOfStack..] {1-}, null> (Bin,UM)
  <this.theArray[this.topOfStack..] == ~this.theArray[orig(this.topOfStack)..] {1-}, null> (Bin,UM)
  <this.theArray[this.topOfStack..] == ~this.theArray[this.topOfStack..] {1-}, null> (Bin,UM)
  <this.theArray[this.topOfStack..] == ~this.theArray[this.topOfStack..] {1-}, null> (Bin,UM)
  <orig(this.theArray[0..this.topOfStack-1]) == orig(this.theArray[0..this.topOfStack-1]) (elementwise) {0-}, null> (Bin,JM)
  <orig(this.theArray[0..this.topOfStack]) == orig(this.theArray[0..this.topOfStack]) (elementwise) {0-}, null> (Bin,JM)
  <orig(this.theArray[]) == orig(this.theArray[]) (elementwise) {0-}, null> (Bin,JM)
  <orig(this.theArray[]) ?cmp? this.theArray[this.topOfStack..] (elementwise) {1-}, null> (Bin,UM)
  <orig(this.theArray[this.topOfStack..]) == orig(this.theArray[this.topOfStack..]) (elementwise) {0-}, null> (Bin,JM)
  <this.theArray[0..orig(this.topOfStack)-1] == this.theArray[0..orig(this.topOfStack)-1] (elementwise) {0-}, null> (Bin,JM)
  <this.theArray[0..orig(this.topOfStack)] == this.theArray[0..orig(this.topOfStack)] (elementwise) {0-}, null> (Bin,JM)
  <this.theArray[0..this.topOfStack] ?cmp? this.theArray[0..this.topOfStack] (elementwise) {1-}, null> (Bin,UM)
  <this.theArray[] == this.theArray[] (elementwise) {0-}, this.theArray[] ?cmp? this.theArray[] (elementwise) {1-}> (Bin,DJU)
  <this.theArray[] ?cmp? this.theArray[this.topOfStack..] (elementwise) {1-}, null> (Bin,UM)
  <this.theArray[orig(this.topOfStack)+1..] == this.theArray[orig(this.topOfStack)+1..] (elementwise) {0-}, null> (Bin,JM)
  <this.theArray[orig(this.topOfStack)..] == this.theArray[orig(this.topOfStack)..] (elementwise) {0-}, null> (Bin,JM)
  <this.theArray[this.topOfStack..] ?cmp? orig(this.theArray[0..this.topOfStack-1]) (elementwise) {1-}, null> (Bin,UM)
  <this.theArray[this.topOfStack..] ?cmp? orig(this.theArray[0..this.topOfStack]) (elementwise) {1-}, null> (Bin,UM)
  <this.theArray[this.topOfStack..] ?cmp? orig(this.theArray[this.topOfStack..]) (elementwise) {1-}, null> (Bin,UM)
  <this.theArray[this.topOfStack..] ?cmp? this.theArray[0..orig(this.topOfStack)-1] (elementwise) {1-}, null> (Bin,UM)
  <this.theArray[this.topOfStack..] ?cmp? this.theArray[0..orig(this.topOfStack)] (elementwise) {1-}, null> (Bin,UM)
  <this.theArray[this.topOfStack..] ?cmp? this.theArray[0..this.topOfStack] (elementwise) {1-}, null> (Bin,UM)
  <this.theArray[this.topOfStack..] ?cmp? this.theArray[orig(this.topOfStack)+1..] (elementwise) {1-}, null> (Bin,UM)
  <this.theArray[this.topOfStack..] ?cmp? this.theArray[orig(this.topOfStack)..] (elementwise) {1-}, null> (Bin,UM)
  <this.theArray[this.topOfStack..] ?cmp? this.theArray[this.topOfStack..] (elementwise) {1-}, null> (Bin,UM)
  <Too few samples for linear relation: 0 * Prestate[Slice{,Add{-1}[Field{topOfStack}[this]]}[Elements[Field{theArray}[this]]]] == 0 * Prestate[Slice{,Add{-1}[Field{topOfStack}[this]]}[Elements[Field{theArray}[this]]]] + 0 {0.3333-}, null> (Bin,UM)
  <orig(this.theArray[0..this.topOfStack]) == orig(this.theArray[0..this.topOfStack]) {0-}, null> (Bin,JM)
  <orig(this.theArray[]) == orig(this.theArray[]) {0-}, null> (Bin,JM)
  <Too few samples for linear relation: 0 * Slice{Field{topOfStack}[this],}[Elements[Field{theArray}[this]]] == 0 * Prestate[Elements[Field{theArray}[this]]] + 0 {1-}, null> (Bin,UM)
  <orig(this.theArray[this.topOfStack..]) == orig(this.theArray[this.topOfStack..]) {0-}, null> (Bin,JM)
  <Too few samples for linear relation: 0 * Prestate[Slice{,Add{-1}[Field{topOfStack}[this]]}[Elements[Field{theArray}[this]]]] == 0 * Slice{,Add{-1}[Prestate[Field{topOfStack}[this]]]}[Elements[Field{theArray}[this]]] + 0 {0.3333-}, null> (Bin,UM)
  <Too few samples for linear relation: 0 * Slice{,Add{-1}[Prestate[Field{topOfStack}[this]]]}[Elements[Field{theArray}[this]]] == 0 * Slice{,Add{-1}[Prestate[Field{topOfStack}[this]]]}[Elements[Field{theArray}[this]]] + 0 {1-}, null> (Bin,UM)
  <Too few samples for linear relation: 0 * Slice{,Prestate[Field{topOfStack}[this]]}[Elements[Field{theArray}[this]]] == 0 * Slice{,Prestate[Field{topOfStack}[this]]}[Elements[Field{theArray}[this]]] + 0 {1-}, null> (Bin,UM)
  <Too few samples for linear relation: 0 * Slice{,Field{topOfStack}[this]}[Elements[Field{theArray}[this]]] == 0 * Slice{,Field{topOfStack}[this]}[Elements[Field{theArray}[this]]] + 0 {1-}, null> (Bin,UM)
  <Too few samples for linear relation: 0 * Elements[Field{theArray}[this]] == 0 * Elements[Field{theArray}[this]] + 0 {1-}, Too few samples for linear relation: 0 * Elements[Field{theArray}[this]] == 0 * Elements[Field{theArray}[this]] + 0 {1-}> (Bin,SUU)
  <Too few samples for linear relation: 0 * Slice{Field{topOfStack}[this],}[Elements[Field{theArray}[this]]] == 0 * Elements[Field{theArray}[this]] + 0 {1-}, null> (Bin,UM)
  <Too few samples for linear relation: 0 * Slice{Add{+1}[Prestate[Field{topOfStack}[this]]],}[Elements[Field{theArray}[this]]] == 0 * Slice{Add{+1}[Prestate[Field{topOfStack}[this]]],}[Elements[Field{theArray}[this]]] + 0 {1-}, null> (Bin,UM)
  <Too few samples for linear relation: 0 * Slice{Prestate[Field{topOfStack}[this]],}[Elements[Field{theArray}[this]]] == 0 * Slice{Prestate[Field{topOfStack}[this]],}[Elements[Field{theArray}[this]]] + 0 {1-}, null> (Bin,UM)
  <Too few samples for linear relation: 0 * Prestate[Slice{,Add{-1}[Field{topOfStack}[this]]}[Elements[Field{theArray}[this]]]] == 0 * Slice{Field{topOfStack}[this],}[Elements[Field{theArray}[this]]] + 0 {1-}, null> (Bin,UM)
  <Too few samples for linear relation: 0 * Prestate[Slice{,Field{topOfStack}[this]}[Elements[Field{theArray}[this]]]] == 0 * Slice{Field{topOfStack}[this],}[Elements[Field{theArray}[this]]] + 0 {1-}, null> (Bin,UM)
  <Too few samples for linear relation: 0 * Prestate[Slice{Field{topOfStack}[this],}[Elements[Field{theArray}[this]]]] == 0 * Slice{Field{topOfStack}[this],}[Elements[Field{theArray}[this]]] + 0 {1-}, null> (Bin,UM)
  <Too few samples for linear relation: 0 * Slice{,Add{-1}[Prestate[Field{topOfStack}[this]]]}[Elements[Field{theArray}[this]]] == 0 * Slice{Field{topOfStack}[this],}[Elements[Field{theArray}[this]]] + 0 {1-}, null> (Bin,UM)
  <Too few samples for linear relation: 0 * Slice{,Prestate[Field{topOfStack}[this]]}[Elements[Field{theArray}[this]]] == 0 * Slice{Field{topOfStack}[this],}[Elements[Field{theArray}[this]]] + 0 {1-}, null> (Bin,UM)
  <Too few samples for linear relation: 0 * Slice{,Field{topOfStack}[this]}[Elements[Field{theArray}[this]]] == 0 * Slice{Field{topOfStack}[this],}[Elements[Field{theArray}[this]]] + 0 {1-}, null> (Bin,UM)
  <Too few samples for linear relation: 0 * Slice{Add{+1}[Prestate[Field{topOfStack}[this]]],}[Elements[Field{theArray}[this]]] == 0 * Slice{Field{topOfStack}[this],}[Elements[Field{theArray}[this]]] + 0 {1-}, null> (Bin,UM)
  <Too few samples for linear relation: 0 * Slice{Prestate[Field{topOfStack}[this]],}[Elements[Field{theArray}[this]]] == 0 * Slice{Field{topOfStack}[this],}[Elements[Field{theArray}[this]]] + 0 {1-}, null> (Bin,UM)
  <Too few samples for linear relation: 0 * Slice{Field{topOfStack}[this],}[Elements[Field{theArray}[this]]] == 0 * Slice{Field{topOfStack}[this],}[Elements[Field{theArray}[this]]] + 0 {1-}, null> (Bin,UM)
  <orig(this.theArray[0..this.topOfStack-1]) is the reverse of orig(this.theArray[0..this.topOfStack-1]) {0-}, null> (Bin,JM)
  <orig(this.theArray[0..this.topOfStack]) is the reverse of orig(this.theArray[0..this.topOfStack]) {0-}, null> (Bin,JM)
  <orig(this.theArray[]) is the reverse of this.theArray[this.topOfStack..] {0-}, null> (Bin,JM)
  <this.theArray[0..orig(this.topOfStack)-1] is the reverse of this.theArray[0..orig(this.topOfStack)-1] {0-}, null> (Bin,JM)
  <this.theArray[0..orig(this.topOfStack)] is the reverse of this.theArray[0..orig(this.topOfStack)] {0-}, null> (Bin,JM)
  <this.theArray[0..this.topOfStack] is the reverse of this.theArray[0..this.topOfStack] {0-}, null> (Bin,JM)
  <this.theArray[] is the reverse of this.theArray[] {0-}, this.theArray[] is the reverse of this.theArray[] {0-}> (Bin,SJJ)
  <this.theArray[] is the reverse of this.theArray[this.topOfStack..] {0-}, null> (Bin,JM)
  <this.theArray[orig(this.topOfStack)+1..] is the reverse of this.theArray[orig(this.topOfStack)+1..] {0-}, null> (Bin,JM)
  <this.theArray[orig(this.topOfStack)..] is the reverse of this.theArray[orig(this.topOfStack)..] {0-}, null> (Bin,JM)
  <this.theArray[this.topOfStack..] is the reverse of orig(this.theArray[0..this.topOfStack-1]) {0-}, null> (Bin,JM)
  <this.theArray[this.topOfStack..] is the reverse of orig(this.theArray[0..this.topOfStack]) {0-}, null> (Bin,JM)
  <this.theArray[this.topOfStack..] is the reverse of orig(this.theArray[this.topOfStack..]) {0-}, null> (Bin,JM)
  <this.theArray[this.topOfStack..] is the reverse of this.theArray[0..orig(this.topOfStack)-1] {0-}, null> (Bin,JM)
  <this.theArray[this.topOfStack..] is the reverse of this.theArray[0..orig(this.topOfStack)] {0-}, null> (Bin,JM)
  <this.theArray[this.topOfStack..] is the reverse of this.theArray[0..this.topOfStack] {0-}, null> (Bin,JM)
  <this.theArray[this.topOfStack..] is the reverse of this.theArray[orig(this.topOfStack)+1..] {0-}, null> (Bin,JM)
  <this.theArray[this.topOfStack..] is the reverse of this.theArray[orig(this.topOfStack)..] {0-}, null> (Bin,JM)
  <this.theArray[this.topOfStack..] is the reverse of this.theArray[this.topOfStack..] {0-}, null> (Bin,JM)
  <orig(this.theArray[0..this.topOfStack-1]) == orig(this.theArray[0..this.topOfStack-1]) {0-}, null> (Bin,JM)
  <orig(this.theArray[0..this.topOfStack]) == orig(this.theArray[0..this.topOfStack]) {0-}, null> (Bin,JM)
  <orig(this.theArray[]) == orig(this.theArray[]) {0-}, null> (Bin,JM)
  <orig(this.theArray[]) == orig(this.theArray[post(this.topOfStack+1)..]) {0-}, null> (Bin,JM)
  <orig(this.theArray[]) ?cmp? this.theArray[this.topOfStack..] (lexically) {1-}, null> (Bin,UM)
  <orig(this.theArray[this.topOfStack..]) == orig(this.theArray[this.topOfStack..]) {0-}, null> (Bin,JM)
  <this.theArray[0..orig(this.topOfStack)-1] == this.theArray[0..orig(this.topOfStack)-1] {0-}, null> (Bin,JM)
  <this.theArray[0..orig(this.topOfStack)] == this.theArray[0..orig(this.topOfStack)] {0-}, null> (Bin,JM)
  <this.theArray[0..this.topOfStack] == orig(this.theArray[0..post(this.topOfStack)]) {0-}, null> (Bin,JM)
  <this.theArray[0..this.topOfStack] == this.theArray[0..this.topOfStack] {0-}, null> (Bin,JM)
  <this.theArray[] == this.theArray[] {0-}, this.theArray[] ?cmp? this.theArray[] (lexically) {1-}> (Bin,DJU)
  <this.theArray[] == this.theArray[this.topOfStack+1..] {0-}, null> (Bin,JM)
  <this.theArray[] ?cmp? this.theArray[this.topOfStack..] (lexically) {1-}, null> (Bin,UM)
  <this.theArray[orig(this.topOfStack)+1..] == orig(this.theArray[this.topOfStack+1..]) {0+}, null> (Bin,JM)
  <this.theArray[orig(this.topOfStack)+1..] == this.theArray[orig(this.topOfStack)+1..] {0-}, null> (Bin,JM)
  <this.theArray[orig(this.topOfStack)..] == this.theArray[orig(this.topOfStack)..] {0-}, null> (Bin,JM)
  <this.theArray[this.topOfStack..] ?cmp? orig(this.theArray[0..this.topOfStack-1]) (lexically) {1-}, null> (Bin,UM)
  <this.theArray[this.topOfStack..] ?cmp? orig(this.theArray[0..this.topOfStack]) (lexically) {1-}, null> (Bin,UM)
  <this.theArray[this.topOfStack..] ?cmp? orig(this.theArray[this.topOfStack..]) (lexically) {1-}, null> (Bin,UM)
  <this.theArray[this.topOfStack..] ?cmp? this.theArray[0..orig(this.topOfStack)-1] (lexically) {1-}, null> (Bin,UM)
  <this.theArray[this.topOfStack..] ?cmp? this.theArray[0..orig(this.topOfStack)] (lexically) {1-}, null> (Bin,UM)
  <this.theArray[this.topOfStack..] ?cmp? this.theArray[0..this.topOfStack] (lexically) {1-}, null> (Bin,UM)
  <this.theArray[this.topOfStack..] ?cmp? this.theArray[orig(this.topOfStack)+1..] (lexically) {1-}, null> (Bin,UM)
  <this.theArray[this.topOfStack..] ?cmp? this.theArray[orig(this.topOfStack)..] (lexically) {1-}, null> (Bin,UM)
  <this.theArray[this.topOfStack..] ?cmp? this.theArray[this.topOfStack..] (lexically) {1-}, null> (Bin,UM)
  <orig(this.theArray[0..this.topOfStack-1]) is a subsequence of orig(this.theArray[]) {0-}, null> (Bin,JM)
  <orig(this.theArray[0..this.topOfStack]) is a subsequence of orig(this.theArray[]) {0-}, null> (Bin,JM)
  <orig(this.theArray[]) is a {sub,super}sequence of orig(this.theArray[]) {1-}, null> (Bin,UM)
  <orig(this.theArray[this.topOfStack..]) is a subsequence of orig(this.theArray[]) {0-}, null> (Bin,JM)
  <this.theArray[0..this.topOfStack] is a subsequence of orig(this.theArray[]) {0-}, null> (Bin,JM)
  <this.theArray[orig(this.topOfStack)+1..] is a subsequence of orig(this.theArray[]) {0-}, null> (Bin,JM)
  <orig(this.theArray[]) is a {sub,super}sequence of this.theArray[this.topOfStack..] {1-}, null> (Bin,UM)
  <this.theArray[0..this.topOfStack] is a subsequence of orig(this.theArray[0..this.topOfStack-1]) {0-}, null> (Bin,JM)
  <this.theArray[0..this.topOfStack] is a subsequence of orig(this.theArray[0..this.topOfStack]) {0-}, null> (Bin,JM)
  <this.theArray[0..this.topOfStack] is a subsequence of orig(this.theArray[this.topOfStack..]) {0-}, null> (Bin,JM)
  <this.theArray[0..this.topOfStack] is a subsequence of this.theArray[0..orig(this.topOfStack)-1] {0-}, null> (Bin,JM)
  <this.theArray[0..this.topOfStack] is a subsequence of this.theArray[0..orig(this.topOfStack)] {0-}, null> (Bin,JM)
  <this.theArray[0..this.topOfStack] is a {sub,super}sequence of this.theArray[0..this.topOfStack] {1-}, null> (Bin,UM)
  <this.theArray[0..this.topOfStack] is a subsequence of this.theArray[orig(this.topOfStack)+1..] {0-}, null> (Bin,JM)
  <this.theArray[0..this.topOfStack] is a subsequence of this.theArray[orig(this.topOfStack)..] {0-}, null> (Bin,JM)
  <this.theArray[0..orig(this.topOfStack)-1] is a subsequence of this.theArray[] {0-}, null> (Bin,JM)
  <this.theArray[0..orig(this.topOfStack)] is a subsequence of this.theArray[] {0-}, null> (Bin,JM)
  <this.theArray[0..this.topOfStack] is a subsequence of this.theArray[] {0-}, null> (Bin,JM)
  <this.theArray[] is a {sub,super}sequence of this.theArray[] {1-}, this.theArray[] is a {sub,super}sequence of this.theArray[] {1-}> (Bin,SUU)
  <this.theArray[orig(this.topOfStack)+1..] is a subsequence of this.theArray[] {0-}, null> (Bin,JM)
  <this.theArray[orig(this.topOfStack)..] is a subsequence of this.theArray[] {0-}, null> (Bin,JM)
  <this.theArray[] is a {sub,super}sequence of this.theArray[this.topOfStack..] {1-}, null> (Bin,UM)
  <this.theArray[orig(this.topOfStack)+1..] is a subsequence of orig(this.theArray[this.topOfStack..]) {0-}, null> (Bin,JM)
  <this.theArray[orig(this.topOfStack)+1..] is a subsequence of this.theArray[0..orig(this.topOfStack)-1] {0-}, null> (Bin,JM)
  <this.theArray[orig(this.topOfStack)+1..] is a {sub,super}sequence of this.theArray[orig(this.topOfStack)+1..] {1-}, null> (Bin,UM)
  <this.theArray[orig(this.topOfStack)+1..] is a subsequence of this.theArray[orig(this.topOfStack)..] {0-}, null> (Bin,JM)
  <this.theArray[this.topOfStack..] is a {sub,super}sequence of orig(this.theArray[0..this.topOfStack-1]) {1-}, null> (Bin,UM)
  <this.theArray[this.topOfStack..] is a {sub,super}sequence of orig(this.theArray[0..this.topOfStack]) {1-}, null> (Bin,UM)
  <this.theArray[this.topOfStack..] is a {sub,super}sequence of orig(this.theArray[this.topOfStack..]) {1-}, null> (Bin,UM)
  <this.theArray[this.topOfStack..] is a {sub,super}sequence of this.theArray[0..orig(this.topOfStack)-1] {1-}, null> (Bin,UM)
  <this.theArray[this.topOfStack..] is a {sub,super}sequence of this.theArray[0..orig(this.topOfStack)] {1-}, null> (Bin,UM)
  <this.theArray[this.topOfStack..] is a {sub,super}sequence of this.theArray[0..this.topOfStack] {1-}, null> (Bin,UM)
  <this.theArray[this.topOfStack..] is a {sub,super}sequence of this.theArray[orig(this.topOfStack)+1..] {1-}, null> (Bin,UM)
  <this.theArray[this.topOfStack..] is a {sub,super}sequence of this.theArray[orig(this.topOfStack)..] {1-}, null> (Bin,UM)
  <this.theArray[this.topOfStack..] is a {sub,super}sequence of this.theArray[this.topOfStack..] {1-}, null> (Bin,UM)
  <this.theArray.class == orig(this.theArray.class) {0+}, null> (Bin,JM)
  <this.theArray.class == this.theArray.class {0-}, this.theArray.class ?cmp? this.theArray.class {1-}> (Bin,DJU)
  <orig(this.topOfStack) == java.lang.Math.max(orig(this.topOfStack), orig(this.topOfStack)) {3-}, null> (Ter,UM)
  <orig(this.topOfStack) == java.lang.Math.max(orig(this.topOfStack), orig(this.topOfStack)) {3-}, null> (Ter,UM)
  <orig(this.topOfStack) == java.lang.Math.max(orig(this.topOfStack), orig(this.topOfStack)) {3-}, null> (Ter,UM)
  <orig(this.topOfStack) == java.lang.Math.min(orig(this.topOfStack), orig(this.topOfStack)) {3-}, null> (Ter,UM)
  <orig(this.topOfStack) == java.lang.Math.min(orig(this.topOfStack), orig(this.topOfStack)) {3-}, null> (Ter,UM)
  <orig(this.topOfStack) == java.lang.Math.min(orig(this.topOfStack), orig(this.topOfStack)) {3-}, null> (Ter,UM)
  <orig(this.topOfStack) == orig(this.topOfStack) & orig(this.topOfStack) {3-}, null> (Ter,UM)
  <orig(this.topOfStack) == orig(this.topOfStack) & orig(this.topOfStack) {3-}, null> (Ter,UM)
  <orig(this.topOfStack) == orig(this.topOfStack) & orig(this.topOfStack) {3-}, null> (Ter,UM)
  <orig(this.topOfStack) == orig(this.topOfStack) | orig(this.topOfStack) {3-}, null> (Ter,UM)
  <orig(this.topOfStack) == orig(this.topOfStack) | orig(this.topOfStack) {3-}, null> (Ter,UM)
  <orig(this.topOfStack) == orig(this.topOfStack) | orig(this.topOfStack) {3-}, null> (Ter,UM)
  <orig(this.topOfStack) == org.plumelib.util.MathPlume.gcd(orig(this.topOfStack), orig(this.topOfStack)) {3-}, null> (Ter,UM)
  <orig(this.topOfStack) == org.plumelib.util.MathPlume.gcd(orig(this.topOfStack), orig(this.topOfStack)) {3-}, null> (Ter,UM)
  <orig(this.topOfStack) == org.plumelib.util.MathPlume.gcd(orig(this.topOfStack), orig(this.topOfStack)) {3-}, null> (Ter,UM)
  <orig(this.topOfStack) == java.lang.Math.min(orig(this.topOfStack), size(this.theArray[])) {0.25-}, null> (Ter,UM)
  <orig(this.topOfStack) == java.lang.Math.min(orig(this.topOfStack), size(this.theArray[])) {0.25-}, null> (Ter,UM)
  <orig(this.topOfStack) == java.lang.Math.min(orig(this.topOfStack), size(this.theArray[])-1) {0.5-}, null> (Ter,UM)
  <orig(this.topOfStack) == java.lang.Math.min(orig(this.topOfStack), size(this.theArray[])-1) {0.5-}, null> (Ter,UM)
  <size(this.theArray[]) == java.lang.Math.max(orig(this.topOfStack), size(this.theArray[])) {0.5-}, null> (Ter,UM)
  <size(this.theArray[]) == java.lang.Math.max(orig(this.topOfStack), size(this.theArray[])) {0.5-}, null> (Ter,UM)
  <size(this.theArray[])-1 == java.lang.Math.max(orig(this.topOfStack), size(this.theArray[])-1) {0.5-}, null> (Ter,UM)
  <size(this.theArray[])-1 == java.lang.Math.max(orig(this.topOfStack), size(this.theArray[])-1) {0.5-}, null> (Ter,UM)
  <size(this.theArray[]) == java.lang.Math.max(size(this.theArray[]), size(this.theArray[])) {3-}, null> (Ter,UM)
  <size(this.theArray[]) == java.lang.Math.max(size(this.theArray[]), size(this.theArray[])) {3-}, null> (Ter,UM)
  <size(this.theArray[]) == java.lang.Math.max(size(this.theArray[]), size(this.theArray[])) {3-}, null> (Ter,UM)
  <size(this.theArray[]) == java.lang.Math.min(size(this.theArray[]), size(this.theArray[])) {3-}, null> (Ter,UM)
  <size(this.theArray[]) == java.lang.Math.min(size(this.theArray[]), size(this.theArray[])) {3-}, null> (Ter,UM)
  <size(this.theArray[]) == java.lang.Math.min(size(this.theArray[]), size(this.theArray[])) {3-}, null> (Ter,UM)
  <size(this.theArray[]) == size(this.theArray[]) & size(this.theArray[]) {3-}, null> (Ter,UM)
  <size(this.theArray[]) == size(this.theArray[]) & size(this.theArray[]) {3-}, null> (Ter,UM)
  <size(this.theArray[]) == size(this.theArray[]) & size(this.theArray[]) {3-}, null> (Ter,UM)
  <size(this.theArray[]) == size(this.theArray[]) | size(this.theArray[]) {3-}, null> (Ter,UM)
  <size(this.theArray[]) == size(this.theArray[]) | size(this.theArray[]) {3-}, null> (Ter,UM)
  <size(this.theArray[]) == size(this.theArray[]) | size(this.theArray[]) {3-}, null> (Ter,UM)
  <size(this.theArray[]) == org.plumelib.util.MathPlume.gcd(size(this.theArray[]), size(this.theArray[])) {3-}, null> (Ter,UM)
  <size(this.theArray[]) == org.plumelib.util.MathPlume.gcd(size(this.theArray[]), size(this.theArray[])) {3-}, null> (Ter,UM)
  <size(this.theArray[]) == org.plumelib.util.MathPlume.gcd(size(this.theArray[]), size(this.theArray[])) {3-}, null> (Ter,UM)
  <size(this.theArray[]) == java.lang.Math.max(size(this.theArray[]), size(this.theArray[])-1) {0.5-}, null> (Ter,UM)
  <size(this.theArray[]) == java.lang.Math.max(size(this.theArray[]), size(this.theArray[])-1) {0.5-}, null> (Ter,UM)
  <size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[]), size(this.theArray[])-1) {0.25-}, null> (Ter,UM)
  <size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[]), size(this.theArray[])-1) {0.25-}, null> (Ter,UM)
  <size(this.theArray[])-1 == size(this.theArray[])-1 % size(this.theArray[]) {0.25-}, null> (Ter,UM)
  <size(this.theArray[])-1 == size(this.theArray[])-1 % size(this.theArray[]) {0.25-}, null> (Ter,UM)
  <size(this.theArray[])-1 == java.lang.Math.max(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, null> (Ter,UM)
  <size(this.theArray[])-1 == java.lang.Math.max(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, null> (Ter,UM)
  <size(this.theArray[])-1 == java.lang.Math.max(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, null> (Ter,UM)
  <size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, null> (Ter,UM)
  <size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, null> (Ter,UM)
  <size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, null> (Ter,UM)
  <size(this.theArray[])-1 == size(this.theArray[])-1 & size(this.theArray[])-1 {3-}, null> (Ter,UM)
  <size(this.theArray[])-1 == size(this.theArray[])-1 & size(this.theArray[])-1 {3-}, null> (Ter,UM)
  <size(this.theArray[])-1 == size(this.theArray[])-1 & size(this.theArray[])-1 {3-}, null> (Ter,UM)
  <size(this.theArray[])-1 == size(this.theArray[])-1 | size(this.theArray[])-1 {3-}, null> (Ter,UM)
  <size(this.theArray[])-1 == size(this.theArray[])-1 | size(this.theArray[])-1 {3-}, null> (Ter,UM)
  <size(this.theArray[])-1 == size(this.theArray[])-1 | size(this.theArray[])-1 {3-}, null> (Ter,UM)
  <size(this.theArray[])-1 == org.plumelib.util.MathPlume.gcd(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, null> (Ter,UM)
  <size(this.theArray[])-1 == org.plumelib.util.MathPlume.gcd(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, null> (Ter,UM)
  <size(this.theArray[])-1 == org.plumelib.util.MathPlume.gcd(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, null> (Ter,UM)
  <orig(this.topOfStack) == java.lang.Math.max(this.topOfStack, orig(this.topOfStack)) {1-}, null> (Ter,UM)
  <orig(this.topOfStack) == java.lang.Math.max(this.topOfStack, orig(this.topOfStack)) {1-}, null> (Ter,UM)
  <orig(this.topOfStack) == this.topOfStack & orig(this.topOfStack) {1-}, null> (Ter,UM)
  <orig(this.topOfStack) == this.topOfStack & orig(this.topOfStack) {1-}, null> (Ter,UM)
  <size(this.theArray[]) == java.lang.Math.max(this.topOfStack, size(this.theArray[])) {1-}, null> (Ter,UM)
  <size(this.theArray[]) == java.lang.Math.max(this.topOfStack, size(this.theArray[])) {1-}, null> (Ter,UM)
  <size(this.theArray[]) == this.topOfStack & size(this.theArray[]) {1-}, null> (Ter,UM)
  <size(this.theArray[]) == this.topOfStack & size(this.theArray[]) {1-}, null> (Ter,UM)
  <size(this.theArray[])-1 == java.lang.Math.max(this.topOfStack, size(this.theArray[])-1) {1-}, null> (Ter,UM)
  <size(this.theArray[])-1 == java.lang.Math.max(this.topOfStack, size(this.theArray[])-1) {1-}, null> (Ter,UM)
  <size(this.theArray[])-1 == this.topOfStack & size(this.theArray[])-1 {1-}, null> (Ter,UM)
  <size(this.theArray[])-1 == this.topOfStack & size(this.theArray[])-1 {1-}, null> (Ter,UM)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, orig(this.topOfStack)) {0.5-}, null> (Ter,UM)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, orig(this.topOfStack)) {0.5-}, null> (Ter,UM)
  <this.topOfStack == this.topOfStack >> orig(this.topOfStack) {0.5-}, null> (Ter,UM)
  <this.topOfStack == this.topOfStack >> orig(this.topOfStack) {0.5-}, null> (Ter,UM)
  <this.topOfStack == this.topOfStack | orig(this.topOfStack) {0.5-}, null> (Ter,UM)
  <this.topOfStack == this.topOfStack | orig(this.topOfStack) {0.5-}, null> (Ter,UM)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])) {0.25-}, null> (Ter,UM)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])) {0.25-}, null> (Ter,UM)
  <this.topOfStack == this.topOfStack >> size(this.theArray[]) {0.25-}, null> (Ter,UM)
  <this.topOfStack == this.topOfStack >> size(this.theArray[]) {0.25-}, null> (Ter,UM)
  <this.topOfStack == this.topOfStack | size(this.theArray[]) {0.25-}, null> (Ter,UM)
  <this.topOfStack == this.topOfStack | size(this.theArray[]) {0.25-}, null> (Ter,UM)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])-1) {0.5-}, null> (Ter,UM)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])-1) {0.5-}, null> (Ter,UM)
  <this.topOfStack == this.topOfStack >> size(this.theArray[])-1 {0.5-}, null> (Ter,UM)
  <this.topOfStack == this.topOfStack >> size(this.theArray[])-1 {0.5-}, null> (Ter,UM)
  <this.topOfStack == this.topOfStack | size(this.theArray[])-1 {0.5-}, null> (Ter,UM)
  <this.topOfStack == this.topOfStack | size(this.theArray[])-1 {0.5-}, null> (Ter,UM)
  <this.topOfStack == java.lang.Math.max(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == this.topOfStack * this.topOfStack {3-}> (Ter,DUU)
  <this.topOfStack == java.lang.Math.max(this.topOfStack, this.topOfStack) {3-}, null> (Ter,UM)
  <this.topOfStack == java.lang.Math.max(this.topOfStack, this.topOfStack) {3-}, null> (Ter,UM)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, this.topOfStack) {3-}, null> (Ter,UM)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, this.topOfStack) {3-}, null> (Ter,UM)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, this.topOfStack) {3-}, null> (Ter,UM)
  <this.topOfStack == this.topOfStack & this.topOfStack {3-}, null> (Ter,UM)
  <this.topOfStack == this.topOfStack & this.topOfStack {3-}, null> (Ter,UM)
  <this.topOfStack == this.topOfStack & this.topOfStack {3-}, null> (Ter,UM)
  <this.topOfStack == this.topOfStack >> this.topOfStack {3-}, null> (Ter,UM)
  <this.topOfStack == this.topOfStack >> this.topOfStack {3-}, null> (Ter,UM)
  <this.topOfStack == this.topOfStack >> this.topOfStack {3-}, null> (Ter,UM)
  <this.topOfStack == this.topOfStack >> this.topOfStack {3-}, null> (Ter,UM)
  <this.topOfStack == this.topOfStack >> this.topOfStack {3-}, null> (Ter,UM)
  <this.topOfStack == this.topOfStack >> this.topOfStack {3-}, null> (Ter,UM)
  <this.topOfStack == this.topOfStack | this.topOfStack {3-}, null> (Ter,UM)
  <this.topOfStack == this.topOfStack | this.topOfStack {3-}, null> (Ter,UM)
  <this.topOfStack == this.topOfStack | this.topOfStack {3-}, null> (Ter,UM)
  <this.topOfStack == org.plumelib.util.MathPlume.gcd(this.topOfStack, this.topOfStack) {3-}, null> (Ter,UM)
  <this.topOfStack == org.plumelib.util.MathPlume.gcd(this.topOfStack, this.topOfStack) {3-}, null> (Ter,UM)
  <this.topOfStack == org.plumelib.util.MathPlume.gcd(this.topOfStack, this.topOfStack) {3-}, null> (Ter,UM)
  <Too few samples for linear relation: 0 * SizeOf[Elements[Field{theArray}[this]]] == 0 * SizeOf[Elements[Field{theArray}[this]]] + 0 * SizeOf[Elements[Field{theArray}[this]]] + 0 {0.25-}, null> (Ter,UM)
  <Too few samples for linear relation: 0 * Add{-1}[SizeOf[Elements[Field{theArray}[this]]]] == 0 * SizeOf[Elements[Field{theArray}[this]]] + 0 * SizeOf[Elements[Field{theArray}[this]]] + 0 {0.25-}, null> (Ter,UM)
  <Too few samples for linear relation: 0 * Add{-1}[SizeOf[Elements[Field{theArray}[this]]]] == 0 * SizeOf[Elements[Field{theArray}[this]]] + 0 * Add{-1}[SizeOf[Elements[Field{theArray}[this]]]] + 0 {0.25-}, null> (Ter,UM)
  <Too few samples for linear relation: 0 * Add{-1}[SizeOf[Elements[Field{theArray}[this]]]] == 0 * Add{-1}[SizeOf[Elements[Field{theArray}[this]]]] + 0 * Add{-1}[SizeOf[Elements[Field{theArray}[this]]]] + 0 {0.25-}, null> (Ter,UM)
  <Too few samples for linear relation: 0 * SizeOf[Elements[Field{theArray}[this]]] == 0 * Field{topOfStack}[this] + 0 * SizeOf[Elements[Field{theArray}[this]]] + 0 {0.25-}, null> (Ter,UM)
  <Too few samples for linear relation: 0 * Add{-1}[SizeOf[Elements[Field{theArray}[this]]]] == 0 * Field{topOfStack}[this] + 0 * SizeOf[Elements[Field{theArray}[this]]] + 0 {0.25-}, null> (Ter,UM)
  <Too few samples for linear relation: 0 * Add{-1}[SizeOf[Elements[Field{theArray}[this]]]] == 0 * Field{topOfStack}[this] + 0 * Add{-1}[SizeOf[Elements[Field{theArray}[this]]]] + 0 {0.25-}, null> (Ter,UM)
  <Too few samples for linear relation: 0 * SizeOf[Elements[Field{theArray}[this]]] == 0 * Field{topOfStack}[this] + 0 * Field{topOfStack}[this] + 0 {0.25-}, null> (Ter,UM)
  <Too few samples for linear relation: 0 * Add{-1}[SizeOf[Elements[Field{theArray}[this]]]] == 0 * Field{topOfStack}[this] + 0 * Field{topOfStack}[this] + 0 {0.25-}, null> (Ter,UM)
  <Too few samples for linear relation: 0 * Field{topOfStack}[this] == 0 * Field{topOfStack}[this] + 0 * Field{topOfStack}[this] + 0 {1-}, this.topOfStack == - Infinity * this.topOfStack + Infinity * this.topOfStack + NaN {0-}> (Ter,SUJ)
  <orig(this.topOfStack) >= -1 {0+}, null> (U!Int,JM)
  <size(this.theArray[]) >= 1 {0.5-}, null> (UInt,UM)
  <size(this.theArray[])-1 >= 0 {0.5-}, null> (UInt,UM)
  <this.topOfStack >= -1 {0.8205-}, this.topOfStack >= 9223372036854775807 {1-}> (U!Int,DUU)
  <orig(this.theArray[this.topOfStack-1]) != null {0.2963-}, null> (UInt,UM)
  <orig(this.theArray[this.topOfStack]) != null {0.1975-}, null> (UInt,UM)
  <size(this.theArray[]) != 0 {1-}, null> (UInt,UM)
  <this.theArray != null {0.039-}, null> (UInt,UM)
  <this.theArray[this.topOfStack] != null {1-}, null> (UInt,UM)
  <this.topOfStack != 0 {1-}, this.topOfStack != 0 {1-}> (UInt,SUU)
  <null, this.theArray one of {  } {1-}> (UInt,MU)
  <this.theArray[orig(this.topOfStack)-1] == null {0-}, null> (UInt,JM)
  <this.theArray[orig(this.topOfStack)] == null {0-}, null> (UInt,JM)
  <this.theArray[this.topOfStack] one of {  } {1-}, this.theArray[this.topOfStack] one of {  } {1-}> (UInt,SUU)
  <this.topOfStack == -1 {0+}, this.topOfStack one of {  } {1-}> (UInt,DJU)
  <orig(this.topOfStack) <= 10 {1-}, null> (U!Int,UM)
  <size(this.theArray[]) <= 20 {0.5-}, null> (U!Int,UM)
  <size(this.theArray[])-1 <= 19 {0.5-}, null> (U!Int,UM)
  <this.topOfStack <= -1 {0.8205-}, this.topOfStack <= -9223372036854775808 {1-}> (U!Int,DUU)
  <orig(this.theArray[0..this.topOfStack-1]) elements != null {0.1975-}, null> (UInt,UM)
  <orig(this.theArray[0..this.topOfStack]) elements != null {0.039-}, null> (UInt,UM)
  <this.theArray[0..this.topOfStack] elements != null {0.039-}, null> (UInt,UM)
  <null, this.theArray[] elements != null {1-}> (UInt,MU)
  <this.theArray[this.topOfStack..] elements != null {1-}, null> (UInt,UM)
  <this.theArray[0..orig(this.topOfStack)-1] elements == null {0-}, null> (UInt,JM)
  <this.theArray[0..orig(this.topOfStack)] elements == null {0-}, null> (UInt,JM)
  <this.theArray[0..this.topOfStack] elements one of {  } {1-}, null> (UInt,UM)
  <this.theArray[] elements == null {0+}, this.theArray[] elements one of {  } {1-}> (UInt,DJU)
  <this.theArray[orig(this.topOfStack)+1..] elements == null {0-}, null> (UInt,JM)
  <this.theArray[orig(this.topOfStack)..] elements == null {0-}, null> (UInt,JM)
  <this.theArray[this.topOfStack..] elements one of {  } {1-}, null> (UInt,UM)
  <orig(this.theArray[0..this.topOfStack-1]) elements are equal {0-}, null> (UInt,JM)
  <orig(this.theArray[0..this.topOfStack]) elements are equal {0+}, null> (UInt,JM)
  <this.theArray[0..orig(this.topOfStack)-1] elements are equal {0-}, null> (UInt,JM)
  <this.theArray[0..orig(this.topOfStack)] elements are equal {0-}, null> (UInt,JM)
  <this.theArray[0..this.topOfStack] elements are equal {0-}, null> (UInt,JM)
  <this.theArray[] elements are equal {0-}, this.theArray[] elements are equal {1-}> (UInt,SJU)
  <this.theArray[orig(this.topOfStack)+1..] elements are equal {0-}, null> (UInt,JM)
  <this.theArray[orig(this.topOfStack)..] elements are equal {0-}, null> (UInt,JM)
  <this.theArray[this.topOfStack..] elements are equal {1-}, null> (UInt,UM)
  <this.theArray[0..this.topOfStack] contains no duplicates {1-}, null> (UInt,UM)
  <null, this.theArray[] contains no duplicates {1-}> (UInt,MU)
  <this.theArray[this.topOfStack..] contains no duplicates {1-}, null> (UInt,UM)
  <this.theArray[0..this.topOfStack] == [] {0+}, null> (UInt,JM)
  <null, this.theArray[] one of {  } {1-}> (UInt,MU)
  <this.theArray[this.topOfStack..] one of {  } {1-}, null> (UInt,UM)
  <this.theArray.class == "[Ljava.lang.Object;" {0+}, this.theArray.class one of {  } {1-}> (UInt,DJU)
  <this.theArray[].class elements == null {0+}, this.theArray[].class elements one of {  } {1-}> (UInt,DJU)
  <null, this.theArray[].class one of {  } {1-}> (UInt,MU)
<DataStructures.StackAr.makeEmpty()V:::EXIT61>
  <orig(this.topOfStack) == orig(this.topOfStack) {0-}, null> (Bin,JM)
  <size(this.theArray[]) == size(this.theArray[]) {0-}, null> (Bin,JM)
  <size(this.theArray[])-1 == size(this.theArray[])-1 {0-}, null> (Bin,JM)
  <this.theArray == this.theArray {0-}, null> (Bin,JM)
  <this.topOfStack == this.topOfStack {0-}, null> (Bin,JM)
  <orig(this.topOfStack) >= orig(this.topOfStack) {0.9227-}, null> (Bin,UM)
  <size(this.theArray[]) >= size(this.theArray[]) {0.9227-}, null> (Bin,UM)
  <size(this.theArray[]) >= size(this.theArray[])-1 {0.1153-}, null> (Bin,UM)
  <size(this.theArray[])-1 >= size(this.theArray[])-1 {0.9227-}, null> (Bin,UM)
  <this.topOfStack >= this.topOfStack {0.9227-}, null> (Bin,UM)
  <size(this.theArray[]) > size(this.theArray[])-1 {0.1153-}, null> (Bin,UM)
  <orig(this.topOfStack) <= orig(this.topOfStack) {0.9227-}, null> (Bin,UM)
  <orig(this.topOfStack) <= size(this.theArray[]) {0.0072-}, null> (Bin,JM)
  <orig(this.topOfStack) <= size(this.theArray[])-1 {0.0288-}, null> (Bin,UM)
  <size(this.theArray[]) <= size(this.theArray[]) {0.9227-}, null> (Bin,UM)
  <size(this.theArray[])-1 <= size(this.theArray[])-1 {0.9227-}, null> (Bin,UM)
  <this.topOfStack <= orig(this.topOfStack) {0.1153-}, null> (Bin,UM)
  <this.topOfStack <= size(this.theArray[]) {0.0577-}, null> (Bin,UM)
  <this.topOfStack <= size(this.theArray[])-1 {0.1153-}, null> (Bin,UM)
  <this.topOfStack <= this.topOfStack {0.9227-}, null> (Bin,UM)
  <orig(this.topOfStack) < size(this.theArray[]) {0.0072-}, null> (Bin,JM)
  <this.topOfStack < size(this.theArray[]) {0.0577-}, null> (Bin,UM)
  <this.topOfStack < size(this.theArray[])-1 {0.1153-}, null> (Bin,UM)
  <orig(this.topOfStack) != size(this.theArray[]) {0.0072-}, null> (Bin,JM)
  <size(this.theArray[]) != size(this.theArray[])-1 {0.1153-}, null> (Bin,UM)
  <this.topOfStack != size(this.theArray[]) {0.0577-}, null> (Bin,UM)
  <this.topOfStack != size(this.theArray[])-1 {0.1153-}, null> (Bin,UM)
  <orig(this.topOfStack) == orig(this.topOfStack) {0-}, null> (Bin,JM)
  <size(this.theArray[]) == size(this.theArray[]) {0-}, null> (Bin,JM)
  <size(this.theArray[])-1 == size(this.theArray[]) - 1 {0-}, null> (Bin,JM)
  <size(this.theArray[])-1 == size(this.theArray[])-1 {0-}, null> (Bin,JM)
  <Too few samples for linear relation: 0 * Field{topOfStack}[this] == 0 * Field{topOfStack}[this] + 0 {1-}, null> (Bin,UM)
  <this.theArray[0..this.topOfStack] == ~this.theArray[0..this.topOfStack] {1-}, null> (Bin,UM)
  <this.theArray[0..this.topOfStack] == ~this.theArray[0..this.topOfStack] {1-}, null> (Bin,UM)
  <orig(this.theArray[0..this.topOfStack]) == orig(this.theArray[0..this.topOfStack]) (elementwise) {0-}, null> (Bin,JM)
  <orig(this.theArray[]) == orig(this.theArray[]) (elementwise) {0-}, null> (Bin,JM)
  <this.theArray[0..orig(this.topOfStack)] == this.theArray[0..orig(this.topOfStack)] (elementwise) {0-}, null> (Bin,JM)
  <this.theArray[0..this.topOfStack] ?cmp? this.theArray[0..this.topOfStack] (elementwise) {1-}, null> (Bin,UM)
  <this.theArray[] == this.theArray[] (elementwise) {0-}, null> (Bin,JM)
  <this.theArray[orig(this.topOfStack)+1..] == this.theArray[orig(this.topOfStack)+1..] (elementwise) {0-}, null> (Bin,JM)
  <orig(this.theArray[0..this.topOfStack]) == orig(this.theArray[0..this.topOfStack]) {0-}, null> (Bin,JM)
  <orig(this.theArray[]) == orig(this.theArray[]) {0-}, null> (Bin,JM)
  <Too few samples for linear relation: 0 * Slice{,Prestate[Field{topOfStack}[this]]}[Elements[Field{theArray}[this]]] == 0 * Slice{,Prestate[Field{topOfStack}[this]]}[Elements[Field{theArray}[this]]] + 0 {1-}, null> (Bin,UM)
  <Too few samples for linear relation: 0 * Slice{,Field{topOfStack}[this]}[Elements[Field{theArray}[this]]] == 0 * Slice{,Field{topOfStack}[this]}[Elements[Field{theArray}[this]]] + 0 {1-}, null> (Bin,UM)
  <Too few samples for linear relation: 0 * Elements[Field{theArray}[this]] == 0 * Elements[Field{theArray}[this]] + 0 {1-}, null> (Bin,UM)
  <Too few samples for linear relation: 0 * Slice{Add{+1}[Prestate[Field{topOfStack}[this]]],}[Elements[Field{theArray}[this]]] == 0 * Slice{Add{+1}[Prestate[Field{topOfStack}[this]]],}[Elements[Field{theArray}[this]]] + 0 {1-}, null> (Bin,UM)
  <orig(this.theArray[0..this.topOfStack]) is the reverse of orig(this.theArray[0..this.topOfStack]) {0-}, null> (Bin,JM)
  <this.theArray[0..orig(this.topOfStack)] is the reverse of this.theArray[0..orig(this.topOfStack)] {0-}, null> (Bin,JM)
  <this.theArray[0..this.topOfStack] is the reverse of this.theArray[0..this.topOfStack] {0-}, null> (Bin,JM)
  <this.theArray[] is the reverse of this.theArray[] {0-}, null> (Bin,JM)
  <this.theArray[orig(this.topOfStack)+1..] is the reverse of this.theArray[orig(this.topOfStack)+1..] {0-}, null> (Bin,JM)
  <orig(this.theArray[0..this.topOfStack]) == orig(this.theArray[0..this.topOfStack]) {0-}, null> (Bin,JM)
  <orig(this.theArray[]) == orig(this.theArray[]) {0-}, null> (Bin,JM)
  <this.theArray[0..orig(this.topOfStack)] == this.theArray[0..orig(this.topOfStack)] {0-}, null> (Bin,JM)
  <this.theArray[0..this.topOfStack] == this.theArray[0..this.topOfStack] {0-}, null> (Bin,JM)
  <this.theArray[] == this.theArray[] {0-}, null> (Bin,JM)
  <this.theArray[orig(this.topOfStack)+1..] == this.theArray[orig(this.topOfStack)+1..] {0-}, null> (Bin,JM)
  <orig(this.theArray[0..this.topOfStack]) is a subsequence of orig(this.theArray[]) {0-}, null> (Bin,JM)
  <orig(this.theArray[]) is a {sub,super}sequence of orig(this.theArray[]) {1-}, null> (Bin,UM)
  <this.theArray[0..this.topOfStack] is a subsequence of orig(this.theArray[]) {0-}, null> (Bin,JM)
  <this.theArray[orig(this.topOfStack)+1..] is a subsequence of orig(this.theArray[]) {0-}, null> (Bin,JM)
  <this.theArray[0..this.topOfStack] is a subsequence of orig(this.theArray[0..this.topOfStack]) {0-}, null> (Bin,JM)
  <this.theArray[0..this.topOfStack] is a subsequence of this.theArray[0..orig(this.topOfStack)] {0-}, null> (Bin,JM)
  <this.theArray[0..this.topOfStack] is a {sub,super}sequence of this.theArray[0..this.topOfStack] {1-}, null> (Bin,UM)
  <this.theArray[0..this.topOfStack] is a subsequence of this.theArray[orig(this.topOfStack)+1..] {0-}, null> (Bin,JM)
  <this.theArray[0..orig(this.topOfStack)] is a subsequence of this.theArray[] {0-}, null> (Bin,JM)
  <this.theArray[0..this.topOfStack] is a subsequence of this.theArray[] {0-}, null> (Bin,JM)
  <this.theArray[] is a {sub,super}sequence of this.theArray[] {1-}, null> (Bin,UM)
  <this.theArray[orig(this.topOfStack)+1..] is a subsequence of this.theArray[] {0-}, null> (Bin,JM)
  <this.theArray[orig(this.topOfStack)+1..] is a {sub,super}sequence of this.theArray[orig(this.topOfStack)+1..] {1-}, null> (Bin,UM)
  <this.theArray.class == this.theArray.class {0-}, null> (Bin,JM)
  <orig(this.topOfStack) == java.lang.Math.max(orig(this.topOfStack), orig(this.topOfStack)) {3-}, null> (Ter,UM)
  <orig(this.topOfStack) == java.lang.Math.max(orig(this.topOfStack), orig(this.topOfStack)) {3-}, null> (Ter,UM)
  <orig(this.topOfStack) == java.lang.Math.max(orig(this.topOfStack), orig(this.topOfStack)) {3-}, null> (Ter,UM)
  <orig(this.topOfStack) == java.lang.Math.min(orig(this.topOfStack), orig(this.topOfStack)) {3-}, null> (Ter,UM)
  <orig(this.topOfStack) == java.lang.Math.min(orig(this.topOfStack), orig(this.topOfStack)) {3-}, null> (Ter,UM)
  <orig(this.topOfStack) == java.lang.Math.min(orig(this.topOfStack), orig(this.topOfStack)) {3-}, null> (Ter,UM)
  <orig(this.topOfStack) == orig(this.topOfStack) & orig(this.topOfStack) {3-}, null> (Ter,UM)
  <orig(this.topOfStack) == orig(this.topOfStack) & orig(this.topOfStack) {3-}, null> (Ter,UM)
  <orig(this.topOfStack) == orig(this.topOfStack) & orig(this.topOfStack) {3-}, null> (Ter,UM)
  <orig(this.topOfStack) == orig(this.topOfStack) | orig(this.topOfStack) {3-}, null> (Ter,UM)
  <orig(this.topOfStack) == orig(this.topOfStack) | orig(this.topOfStack) {3-}, null> (Ter,UM)
  <orig(this.topOfStack) == orig(this.topOfStack) | orig(this.topOfStack) {3-}, null> (Ter,UM)
  <orig(this.topOfStack) == org.plumelib.util.MathPlume.gcd(orig(this.topOfStack), orig(this.topOfStack)) {3-}, null> (Ter,UM)
  <orig(this.topOfStack) == org.plumelib.util.MathPlume.gcd(orig(this.topOfStack), orig(this.topOfStack)) {3-}, null> (Ter,UM)
  <orig(this.topOfStack) == org.plumelib.util.MathPlume.gcd(orig(this.topOfStack), orig(this.topOfStack)) {3-}, null> (Ter,UM)
  <orig(this.topOfStack) == java.lang.Math.min(orig(this.topOfStack), size(this.theArray[])) {0.25-}, null> (Ter,UM)
  <orig(this.topOfStack) == java.lang.Math.min(orig(this.topOfStack), size(this.theArray[])) {0.25-}, null> (Ter,UM)
  <orig(this.topOfStack) == java.lang.Math.min(orig(this.topOfStack), size(this.theArray[])-1) {0.5-}, null> (Ter,UM)
  <orig(this.topOfStack) == java.lang.Math.min(orig(this.topOfStack), size(this.theArray[])-1) {0.5-}, null> (Ter,UM)
  <size(this.theArray[]) == java.lang.Math.max(orig(this.topOfStack), size(this.theArray[])) {0.5-}, null> (Ter,UM)
  <size(this.theArray[]) == java.lang.Math.max(orig(this.topOfStack), size(this.theArray[])) {0.5-}, null> (Ter,UM)
  <size(this.theArray[])-1 == java.lang.Math.max(orig(this.topOfStack), size(this.theArray[])-1) {0.5-}, null> (Ter,UM)
  <size(this.theArray[])-1 == java.lang.Math.max(orig(this.topOfStack), size(this.theArray[])-1) {0.5-}, null> (Ter,UM)
  <size(this.theArray[]) == java.lang.Math.max(size(this.theArray[]), size(this.theArray[])) {3-}, null> (Ter,UM)
  <size(this.theArray[]) == java.lang.Math.max(size(this.theArray[]), size(this.theArray[])) {3-}, null> (Ter,UM)
  <size(this.theArray[]) == java.lang.Math.max(size(this.theArray[]), size(this.theArray[])) {3-}, null> (Ter,UM)
  <size(this.theArray[]) == java.lang.Math.min(size(this.theArray[]), size(this.theArray[])) {3-}, null> (Ter,UM)
  <size(this.theArray[]) == java.lang.Math.min(size(this.theArray[]), size(this.theArray[])) {3-}, null> (Ter,UM)
  <size(this.theArray[]) == java.lang.Math.min(size(this.theArray[]), size(this.theArray[])) {3-}, null> (Ter,UM)
  <size(this.theArray[]) == size(this.theArray[]) & size(this.theArray[]) {3-}, null> (Ter,UM)
  <size(this.theArray[]) == size(this.theArray[]) & size(this.theArray[]) {3-}, null> (Ter,UM)
  <size(this.theArray[]) == size(this.theArray[]) & size(this.theArray[]) {3-}, null> (Ter,UM)
  <size(this.theArray[]) == size(this.theArray[]) | size(this.theArray[]) {3-}, null> (Ter,UM)
  <size(this.theArray[]) == size(this.theArray[]) | size(this.theArray[]) {3-}, null> (Ter,UM)
  <size(this.theArray[]) == size(this.theArray[]) | size(this.theArray[]) {3-}, null> (Ter,UM)
  <size(this.theArray[]) == org.plumelib.util.MathPlume.gcd(size(this.theArray[]), size(this.theArray[])) {3-}, null> (Ter,UM)
  <size(this.theArray[]) == org.plumelib.util.MathPlume.gcd(size(this.theArray[]), size(this.theArray[])) {3-}, null> (Ter,UM)
  <size(this.theArray[]) == org.plumelib.util.MathPlume.gcd(size(this.theArray[]), size(this.theArray[])) {3-}, null> (Ter,UM)
  <size(this.theArray[]) == java.lang.Math.max(size(this.theArray[]), size(this.theArray[])-1) {0.5-}, null> (Ter,UM)
  <size(this.theArray[]) == java.lang.Math.max(size(this.theArray[]), size(this.theArray[])-1) {0.5-}, null> (Ter,UM)
  <size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[]), size(this.theArray[])-1) {0.25-}, null> (Ter,UM)
  <size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[]), size(this.theArray[])-1) {0.25-}, null> (Ter,UM)
  <size(this.theArray[])-1 == size(this.theArray[])-1 % size(this.theArray[]) {0.25-}, null> (Ter,UM)
  <size(this.theArray[])-1 == size(this.theArray[])-1 % size(this.theArray[]) {0.25-}, null> (Ter,UM)
  <size(this.theArray[])-1 == java.lang.Math.max(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, null> (Ter,UM)
  <size(this.theArray[])-1 == java.lang.Math.max(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, null> (Ter,UM)
  <size(this.theArray[])-1 == java.lang.Math.max(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, null> (Ter,UM)
  <size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, null> (Ter,UM)
  <size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, null> (Ter,UM)
  <size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, null> (Ter,UM)
  <size(this.theArray[])-1 == size(this.theArray[])-1 & size(this.theArray[])-1 {3-}, null> (Ter,UM)
  <size(this.theArray[])-1 == size(this.theArray[])-1 & size(this.theArray[])-1 {3-}, null> (Ter,UM)
  <size(this.theArray[])-1 == size(this.theArray[])-1 & size(this.theArray[])-1 {3-}, null> (Ter,UM)
  <size(this.theArray[])-1 == size(this.theArray[])-1 | size(this.theArray[])-1 {3-}, null> (Ter,UM)
  <size(this.theArray[])-1 == size(this.theArray[])-1 | size(this.theArray[])-1 {3-}, null> (Ter,UM)
  <size(this.theArray[])-1 == size(this.theArray[])-1 | size(this.theArray[])-1 {3-}, null> (Ter,UM)
  <size(this.theArray[])-1 == org.plumelib.util.MathPlume.gcd(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, null> (Ter,UM)
  <size(this.theArray[])-1 == org.plumelib.util.MathPlume.gcd(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, null> (Ter,UM)
  <size(this.theArray[])-1 == org.plumelib.util.MathPlume.gcd(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, null> (Ter,UM)
  <orig(this.topOfStack) == java.lang.Math.max(this.topOfStack, orig(this.topOfStack)) {1-}, null> (Ter,UM)
  <orig(this.topOfStack) == java.lang.Math.max(this.topOfStack, orig(this.topOfStack)) {1-}, null> (Ter,UM)
  <orig(this.topOfStack) == this.topOfStack & orig(this.topOfStack) {1-}, null> (Ter,UM)
  <orig(this.topOfStack) == this.topOfStack & orig(this.topOfStack) {1-}, null> (Ter,UM)
  <size(this.theArray[]) == java.lang.Math.max(this.topOfStack, size(this.theArray[])) {1-}, null> (Ter,UM)
  <size(this.theArray[]) == java.lang.Math.max(this.topOfStack, size(this.theArray[])) {1-}, null> (Ter,UM)
  <size(this.theArray[]) == this.topOfStack & size(this.theArray[]) {1-}, null> (Ter,UM)
  <size(this.theArray[]) == this.topOfStack & size(this.theArray[]) {1-}, null> (Ter,UM)
  <size(this.theArray[])-1 == java.lang.Math.max(this.topOfStack, size(this.theArray[])-1) {1-}, null> (Ter,UM)
  <size(this.theArray[])-1 == java.lang.Math.max(this.topOfStack, size(this.theArray[])-1) {1-}, null> (Ter,UM)
  <size(this.theArray[])-1 == this.topOfStack & size(this.theArray[])-1 {1-}, null> (Ter,UM)
  <size(this.theArray[])-1 == this.topOfStack & size(this.theArray[])-1 {1-}, null> (Ter,UM)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, orig(this.topOfStack)) {0.5-}, null> (Ter,UM)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, orig(this.topOfStack)) {0.5-}, null> (Ter,UM)
  <this.topOfStack == this.topOfStack >> orig(this.topOfStack) {0.5-}, null> (Ter,UM)
  <this.topOfStack == this.topOfStack >> orig(this.topOfStack) {0.5-}, null> (Ter,UM)
  <this.topOfStack == this.topOfStack | orig(this.topOfStack) {0.5-}, null> (Ter,UM)
  <this.topOfStack == this.topOfStack | orig(this.topOfStack) {0.5-}, null> (Ter,UM)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])) {0.25-}, null> (Ter,UM)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])) {0.25-}, null> (Ter,UM)
  <this.topOfStack == this.topOfStack >> size(this.theArray[]) {0.25-}, null> (Ter,UM)
  <this.topOfStack == this.topOfStack >> size(this.theArray[]) {0.25-}, null> (Ter,UM)
  <this.topOfStack == this.topOfStack | size(this.theArray[]) {0.25-}, null> (Ter,UM)
  <this.topOfStack == this.topOfStack | size(this.theArray[]) {0.25-}, null> (Ter,UM)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])-1) {0.5-}, null> (Ter,UM)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])-1) {0.5-}, null> (Ter,UM)
  <this.topOfStack == this.topOfStack >> size(this.theArray[])-1 {0.5-}, null> (Ter,UM)
  <this.topOfStack == this.topOfStack >> size(this.theArray[])-1 {0.5-}, null> (Ter,UM)
  <this.topOfStack == this.topOfStack | size(this.theArray[])-1 {0.5-}, null> (Ter,UM)
  <this.topOfStack == this.topOfStack | size(this.theArray[])-1 {0.5-}, null> (Ter,UM)
  <this.topOfStack == java.lang.Math.max(this.topOfStack, this.topOfStack) {3-}, null> (Ter,UM)
  <this.topOfStack == java.lang.Math.max(this.topOfStack, this.topOfStack) {3-}, null> (Ter,UM)
  <this.topOfStack == java.lang.Math.max(this.topOfStack, this.topOfStack) {3-}, null> (Ter,UM)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, this.topOfStack) {3-}, null> (Ter,UM)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, this.topOfStack) {3-}, null> (Ter,UM)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, this.topOfStack) {3-}, null> (Ter,UM)
  <this.topOfStack == this.topOfStack & this.topOfStack {3-}, null> (Ter,UM)
  <this.topOfStack == this.topOfStack & this.topOfStack {3-}, null> (Ter,UM)
  <this.topOfStack == this.topOfStack & this.topOfStack {3-}, null> (Ter,UM)
  <this.topOfStack == this.topOfStack >> this.topOfStack {3-}, null> (Ter,UM)
  <this.topOfStack == this.topOfStack >> this.topOfStack {3-}, null> (Ter,UM)
  <this.topOfStack == this.topOfStack >> this.topOfStack {3-}, null> (Ter,UM)
  <this.topOfStack == this.topOfStack >> this.topOfStack {3-}, null> (Ter,UM)
  <this.topOfStack == this.topOfStack >> this.topOfStack {3-}, null> (Ter,UM)
  <this.topOfStack == this.topOfStack >> this.topOfStack {3-}, null> (Ter,UM)
  <this.topOfStack == this.topOfStack | this.topOfStack {3-}, null> (Ter,UM)
  <this.topOfStack == this.topOfStack | this.topOfStack {3-}, null> (Ter,UM)
  <this.topOfStack == this.topOfStack | this.topOfStack {3-}, null> (Ter,UM)
  <this.topOfStack == org.plumelib.util.MathPlume.gcd(this.topOfStack, this.topOfStack) {3-}, null> (Ter,UM)
  <this.topOfStack == org.plumelib.util.MathPlume.gcd(this.topOfStack, this.topOfStack) {3-}, null> (Ter,UM)
  <this.topOfStack == org.plumelib.util.MathPlume.gcd(this.topOfStack, this.topOfStack) {3-}, null> (Ter,UM)
  <Too few samples for linear relation: 0 * SizeOf[Elements[Field{theArray}[this]]] == 0 * SizeOf[Elements[Field{theArray}[this]]] + 0 * SizeOf[Elements[Field{theArray}[this]]] + 0 {0.25-}, null> (Ter,UM)
  <Too few samples for linear relation: 0 * Add{-1}[SizeOf[Elements[Field{theArray}[this]]]] == 0 * SizeOf[Elements[Field{theArray}[this]]] + 0 * SizeOf[Elements[Field{theArray}[this]]] + 0 {0.25-}, null> (Ter,UM)
  <Too few samples for linear relation: 0 * Add{-1}[SizeOf[Elements[Field{theArray}[this]]]] == 0 * SizeOf[Elements[Field{theArray}[this]]] + 0 * Add{-1}[SizeOf[Elements[Field{theArray}[this]]]] + 0 {0.25-}, null> (Ter,UM)
  <Too few samples for linear relation: 0 * Add{-1}[SizeOf[Elements[Field{theArray}[this]]]] == 0 * Add{-1}[SizeOf[Elements[Field{theArray}[this]]]] + 0 * Add{-1}[SizeOf[Elements[Field{theArray}[this]]]] + 0 {0.25-}, null> (Ter,UM)
  <Too few samples for linear relation: 0 * SizeOf[Elements[Field{theArray}[this]]] == 0 * Field{topOfStack}[this] + 0 * SizeOf[Elements[Field{theArray}[this]]] + 0 {0.25-}, null> (Ter,UM)
  <Too few samples for linear relation: 0 * Add{-1}[SizeOf[Elements[Field{theArray}[this]]]] == 0 * Field{topOfStack}[this] + 0 * SizeOf[Elements[Field{theArray}[this]]] + 0 {0.25-}, null> (Ter,UM)
  <Too few samples for linear relation: 0 * Add{-1}[SizeOf[Elements[Field{theArray}[this]]]] == 0 * Field{topOfStack}[this] + 0 * Add{-1}[SizeOf[Elements[Field{theArray}[this]]]] + 0 {0.25-}, null> (Ter,UM)
  <Too few samples for linear relation: 0 * SizeOf[Elements[Field{theArray}[this]]] == 0 * Field{topOfStack}[this] + 0 * Field{topOfStack}[this] + 0 {0.25-}, null> (Ter,UM)
  <Too few samples for linear relation: 0 * Add{-1}[SizeOf[Elements[Field{theArray}[this]]]] == 0 * Field{topOfStack}[this] + 0 * Field{topOfStack}[this] + 0 {0.25-}, null> (Ter,UM)
  <Too few samples for linear relation: 0 * Field{topOfStack}[this] == 0 * Field{topOfStack}[this] + 0 * Field{topOfStack}[this] + 0 {1-}, null> (Ter,UM)
  <orig(this.topOfStack) >= -1 {0+}, null> (U!Int,JM)
  <size(this.theArray[]) >= 1 {0.5-}, null> (UInt,UM)
  <size(this.theArray[])-1 >= 0 {0.5-}, null> (UInt,UM)
  <this.topOfStack >= -1 {0.8205-}, null> (U!Int,UM)
  <size(this.theArray[]) != 0 {1-}, null> (UInt,UM)
  <this.theArray != null {0.039-}, null> (UInt,UM)
  <this.topOfStack != 0 {1-}, null> (UInt,UM)
  <this.topOfStack == -1 {0+}, null> (UInt,JM)
  <orig(this.topOfStack) <= 10 {1-}, null> (U!Int,UM)
  <size(this.theArray[]) <= 20 {0.5-}, null> (U!Int,UM)
  <size(this.theArray[])-1 <= 19 {0.5-}, null> (U!Int,UM)
  <this.topOfStack <= -1 {0.8205-}, null> (U!Int,UM)
  <orig(this.theArray[0..this.topOfStack]) elements != null {0.039-}, null> (UInt,UM)
  <this.theArray[0..this.topOfStack] elements != null {0.039-}, null> (UInt,UM)
  <this.theArray[0..orig(this.topOfStack)] elements == null {0-}, null> (UInt,JM)
  <this.theArray[0..this.topOfStack] elements one of {  } {1-}, null> (UInt,UM)
  <this.theArray[] elements == null {0+}, null> (UInt,JM)
  <this.theArray[orig(this.topOfStack)+1..] elements == null {0-}, null> (UInt,JM)
  <orig(this.theArray[0..this.topOfStack]) elements are equal {0+}, null> (UInt,JM)
  <this.theArray[0..orig(this.topOfStack)] elements are equal {0-}, null> (UInt,JM)
  <this.theArray[0..this.topOfStack] elements are equal {0-}, null> (UInt,JM)
  <this.theArray[] elements are equal {0-}, null> (UInt,JM)
  <this.theArray[orig(this.topOfStack)+1..] elements are equal {0-}, null> (UInt,JM)
  <this.theArray[0..this.topOfStack] contains no duplicates {1-}, null> (UInt,UM)
  <this.theArray[0..this.topOfStack] == [] {0+}, null> (UInt,JM)
  <this.theArray.class == "[Ljava.lang.Object;" {0+}, null> (UInt,JM)
  <this.theArray[].class elements == null {0+}, null> (UInt,JM)
<DataStructures.StackAr.pop()V:::ENTER>
  <this.theArray[this.topOfStack] in this.theArray[] {0-}, this.theArray[this.topOfStack] in this.theArray[] {0-}> (Bin,SJJ)
  <this.theArray[] elements ?cmp? this.theArray[this.topOfStack] {1-}, this.theArray[] elements ?cmp? this.theArray[this.topOfStack] {1-}> (Bin,SUU)
  <this.topOfStack == ~this.topOfStack {1-}, this.topOfStack == ~this.topOfStack {1-}> (Bin,SUU)
  <this.theArray[this.topOfStack] == this.theArray[this.topOfStack] {1-}, this.theArray[this.topOfStack] == this.theArray[this.topOfStack] {1-}> (Bin,SUU)
  <this.topOfStack == this.topOfStack {1-}, this.topOfStack == this.topOfStack {1-}> (Bin,SUU)
  <this.topOfStack >= this.topOfStack {1-}, this.topOfStack >= this.topOfStack {1-}> (Bin,SUU)
  <this.topOfStack > this.topOfStack {1-}, this.topOfStack > this.topOfStack {1-}> (Bin,SUU)
  <null, this.topOfStack <= this.topOfStack {1-}> (Bin,MU)
  <this.topOfStack < this.topOfStack {1-}, this.topOfStack < this.topOfStack {1-}> (Bin,SUU)
  <this.topOfStack != this.topOfStack {1-}, this.topOfStack != this.topOfStack {1-}> (Bin,SUU)
  <Too few samples for linear relation: 0 * Field{topOfStack}[this] == 0 * Field{topOfStack}[this] + 0 {0.3333-}, this.topOfStack == - this.topOfStack + 3 {0.3333-}> (Bin,SUU)
  <this.theArray[] == ~this.theArray[] {1-}, this.theArray[] == ~this.theArray[] {1-}> (Bin,SUU)
  <this.theArray[] ?cmp? this.theArray[] (elementwise) {1-}, this.theArray[] ?cmp? this.theArray[] (elementwise) {1-}> (Bin,SUU)
  <Too few samples for linear relation: 0 * Elements[Field{theArray}[this]] == 0 * Elements[Field{theArray}[this]] + 0 {1-}, Too few samples for linear relation: 0 * Elements[Field{theArray}[this]] == 0 * Elements[Field{theArray}[this]] + 0 {1-}> (Bin,SUU)
  <this.theArray[] is the reverse of this.theArray[] {0-}, this.theArray[] is the reverse of this.theArray[] {0-}> (Bin,SJJ)
  <this.theArray[] ?cmp? this.theArray[] (lexically) {1-}, this.theArray[] ?cmp? this.theArray[] (lexically) {1-}> (Bin,SUU)
  <this.theArray[] is a {sub,super}sequence of this.theArray[] {1-}, this.theArray[] is a {sub,super}sequence of this.theArray[] {1-}> (Bin,SUU)
  <this.theArray.class ?cmp? this.theArray.class {1-}, this.theArray.class ?cmp? this.theArray.class {1-}> (Bin,SUU)
  <this.topOfStack == this.topOfStack * this.topOfStack {1-}, this.topOfStack == this.topOfStack * this.topOfStack {3-}> (Ter,SUU)
  <this.topOfStack == Infinity * this.topOfStack - Infinity * this.topOfStack + NaN {0-}, this.topOfStack == - Infinity * this.topOfStack + Infinity * this.topOfStack + NaN {0-}> (Ter,SJJ)
  <this.topOfStack >= 9223372036854775807 {1-}, this.topOfStack >= 9223372036854775807 {1-}> (U!Int,SUU)
  <this.topOfStack != 0 {1-}, this.topOfStack != 0 {1-}> (UInt,SUU)
  <this.theArray one of {  } {1-}, this.theArray one of {  } {1-}> (UInt,SUU)
  <this.theArray[this.topOfStack] one of {  } {1-}, this.theArray[this.topOfStack] one of {  } {1-}> (UInt,SUU)
  <this.topOfStack one of {  } {1-}, this.topOfStack one of {  } {1-}> (UInt,SUU)
  <this.topOfStack <= -9223372036854775808 {1-}, this.topOfStack <= -9223372036854775808 {1-}> (U!Int,SUU)
  <this.theArray[] elements != null {1-}, this.theArray[] elements != null {1-}> (UInt,SUU)
  <this.theArray[] elements one of {  } {1-}, this.theArray[] elements one of {  } {1-}> (UInt,SUU)
  <this.theArray[] elements are equal {1-}, this.theArray[] elements are equal {1-}> (UInt,SUU)
  <this.theArray[] contains no duplicates {1-}, this.theArray[] contains no duplicates {1-}> (UInt,SUU)
  <this.theArray[] one of {  } {1-}, this.theArray[] one of {  } {1-}> (UInt,SUU)
  <this.theArray.class one of {  } {1-}, this.theArray.class one of {  } {1-}> (UInt,SUU)
  <this.theArray[].class elements one of {  } {1-}, this.theArray[].class elements one of {  } {1-}> (UInt,SUU)
  <this.theArray[].class one of {  } {1-}, this.theArray[].class one of {  } {1-}> (UInt,SUU)
<DataStructures.StackAr.pop()V:::EXIT>
  <this.theArray[this.topOfStack] in this.theArray[] {0-}, this.theArray[this.topOfStack] in this.theArray[] {0-}> (Bin,SJJ)
  <this.theArray[] elements ?cmp? this.theArray[this.topOfStack] {1-}, this.theArray[] elements ?cmp? this.theArray[this.topOfStack] {1-}> (Bin,SUU)
  <this.topOfStack == ~this.topOfStack {1-}, this.topOfStack == ~this.topOfStack {1-}> (Bin,SUU)
  <this.theArray[this.topOfStack] == this.theArray[this.topOfStack] {1-}, this.theArray[this.topOfStack] == this.theArray[this.topOfStack] {1-}> (Bin,SUU)
  <this.topOfStack == this.topOfStack {1-}, this.topOfStack == this.topOfStack {1-}> (Bin,SUU)
  <this.topOfStack >= this.topOfStack {1-}, this.topOfStack >= this.topOfStack {1-}> (Bin,SUU)
  <this.topOfStack > this.topOfStack {1-}, this.topOfStack > this.topOfStack {1-}> (Bin,SUU)
  <null, this.topOfStack <= this.topOfStack {1-}> (Bin,MU)
  <this.topOfStack < this.topOfStack {1-}, this.topOfStack < this.topOfStack {1-}> (Bin,SUU)
  <this.topOfStack != this.topOfStack {1-}, this.topOfStack != this.topOfStack {1-}> (Bin,SUU)
  <Too few samples for linear relation: 0 * Field{topOfStack}[this] == 0 * Field{topOfStack}[this] + 0 {0.3333-}, this.topOfStack == - this.topOfStack + 3 {0.3333-}> (Bin,SUU)
  <this.theArray[] == ~this.theArray[] {1-}, this.theArray[] == ~this.theArray[] {1-}> (Bin,SUU)
  <this.theArray[] ?cmp? this.theArray[] (elementwise) {1-}, this.theArray[] ?cmp? this.theArray[] (elementwise) {1-}> (Bin,SUU)
  <Too few samples for linear relation: 0 * Elements[Field{theArray}[this]] == 0 * Elements[Field{theArray}[this]] + 0 {1-}, Too few samples for linear relation: 0 * Elements[Field{theArray}[this]] == 0 * Elements[Field{theArray}[this]] + 0 {1-}> (Bin,SUU)
  <this.theArray[] is the reverse of this.theArray[] {0-}, this.theArray[] is the reverse of this.theArray[] {0-}> (Bin,SJJ)
  <this.theArray[] ?cmp? this.theArray[] (lexically) {1-}, this.theArray[] ?cmp? this.theArray[] (lexically) {1-}> (Bin,SUU)
  <this.theArray[] is a {sub,super}sequence of this.theArray[] {1-}, this.theArray[] is a {sub,super}sequence of this.theArray[] {1-}> (Bin,SUU)
  <this.theArray.class ?cmp? this.theArray.class {1-}, this.theArray.class ?cmp? this.theArray.class {1-}> (Bin,SUU)
  <this.topOfStack == this.topOfStack * this.topOfStack {1-}, this.topOfStack == this.topOfStack * this.topOfStack {3-}> (Ter,SUU)
  <this.topOfStack == Infinity * this.topOfStack - Infinity * this.topOfStack + NaN {0-}, this.topOfStack == - Infinity * this.topOfStack + Infinity * this.topOfStack + NaN {0-}> (Ter,SJJ)
  <this.topOfStack >= 9223372036854775807 {1-}, this.topOfStack >= 9223372036854775807 {1-}> (U!Int,SUU)
  <this.topOfStack != 0 {1-}, this.topOfStack != 0 {1-}> (UInt,SUU)
  <this.theArray one of {  } {1-}, this.theArray one of {  } {1-}> (UInt,SUU)
  <this.theArray[this.topOfStack] one of {  } {1-}, this.theArray[this.topOfStack] one of {  } {1-}> (UInt,SUU)
  <this.topOfStack one of {  } {1-}, this.topOfStack one of {  } {1-}> (UInt,SUU)
  <this.topOfStack <= -9223372036854775808 {1-}, this.topOfStack <= -9223372036854775808 {1-}> (U!Int,SUU)
  <this.theArray[] elements != null {1-}, this.theArray[] elements != null {1-}> (UInt,SUU)
  <this.theArray[] elements one of {  } {1-}, this.theArray[] elements one of {  } {1-}> (UInt,SUU)
  <this.theArray[] elements are equal {1-}, this.theArray[] elements are equal {1-}> (UInt,SUU)
  <this.theArray[] contains no duplicates {1-}, this.theArray[] contains no duplicates {1-}> (UInt,SUU)
  <this.theArray[] one of {  } {1-}, this.theArray[] one of {  } {1-}> (UInt,SUU)
  <this.theArray.class one of {  } {1-}, this.theArray.class one of {  } {1-}> (UInt,SUU)
  <this.theArray[].class elements one of {  } {1-}, this.theArray[].class elements one of {  } {1-}> (UInt,SUU)
  <this.theArray[].class one of {  } {1-}, this.theArray[].class one of {  } {1-}> (UInt,SUU)
<DataStructures.StackAr.push(Ljava/lang/Object;)V:::ENTER>
  <size(this.theArray[]) == size(this.theArray[]) {0-}, size(this.theArray[]) == size(this.theArray[]) {0-}> (Bin,SJJ)
  <size(this.theArray[])-1 == size(this.theArray[])-1 {0-}, size(this.theArray[])-1 == size(this.theArray[])-1 {0-}> (Bin,SJJ)
  <this.theArray == this.theArray {0-}, this.theArray == this.theArray {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack-1] == this.theArray[this.topOfStack-1] {0-}, this.theArray[this.topOfStack-1] == this.theArray[this.topOfStack-1] {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack] == this.theArray[this.topOfStack] {0-}, this.theArray[this.topOfStack] == this.theArray[this.topOfStack] {0-}> (Bin,SJJ)
  <this.topOfStack == this.topOfStack {0-}, this.topOfStack == this.topOfStack {0-}> (Bin,SJJ)
  <x == x {0-}, x == x {0-}> (Bin,SJJ)
  <size(this.theArray[]) >= size(this.theArray[]) {0.587-}, size(this.theArray[]) >= size(this.theArray[]) {0.6557-}> (Bin,SUU)
  <size(this.theArray[]) >= size(this.theArray[])-1 {0.0734-}, size(this.theArray[]) >= size(this.theArray[])-1 {0.041-}> (Bin,SUU)
  <size(this.theArray[])-1 >= size(this.theArray[])-1 {0.587-}, size(this.theArray[])-1 >= size(this.theArray[])-1 {0.6557-}> (Bin,SUU)
  <this.topOfStack >= this.topOfStack {0.587-}, this.topOfStack >= this.topOfStack {0.6557-}> (Bin,SUU)
  <size(this.theArray[]) > size(this.theArray[])-1 {0.0734-}, size(this.theArray[]) > size(this.theArray[])-1 {0.041-}> (Bin,SUU)
  <size(this.theArray[]) <= size(this.theArray[]) {0.587-}, size(this.theArray[]) <= size(this.theArray[]) {0.6557-}> (Bin,SUU)
  <size(this.theArray[])-1 <= size(this.theArray[])-1 {0.587-}, size(this.theArray[])-1 <= size(this.theArray[])-1 {0.6557-}> (Bin,SUU)
  <this.topOfStack <= size(this.theArray[]) {0.0023-}, this.topOfStack <= size(this.theArray[]) {0.0026-}> (Bin,SJJ)
  <this.topOfStack <= size(this.theArray[])-1 {0.0023-}, this.topOfStack <= size(this.theArray[])-1 {0.0026-}> (Bin,SJJ)
  <this.topOfStack <= this.topOfStack {0.587-}, this.topOfStack <= this.topOfStack {0.6557-}> (Bin,SUU)
  <this.topOfStack < size(this.theArray[]) {0.0023-}, this.topOfStack < size(this.theArray[]) {0.0026-}> (Bin,SJJ)
  <this.topOfStack < size(this.theArray[])-1 {0.0023+}, this.topOfStack < size(this.theArray[])-1 {0.0026+}> (Bin,SJJ)
  <size(this.theArray[]) != size(this.theArray[])-1 {0.0734-}, size(this.theArray[]) != size(this.theArray[])-1 {0.041-}> (Bin,SUU)
  <this.topOfStack != size(this.theArray[]) {0.0023-}, this.topOfStack != size(this.theArray[]) {0.0026-}> (Bin,SJJ)
  <this.topOfStack != size(this.theArray[])-1 {0.0023-}, this.topOfStack != size(this.theArray[])-1 {0.0026-}> (Bin,SJJ)
  <this.topOfStack == this.topOfStack {0-}, this.topOfStack == this.topOfStack {0-}> (Bin,SJJ)
  <this.theArray[0..this.topOfStack-1] == this.theArray[0..this.topOfStack-1] (elementwise) {0-}, this.theArray[0..this.topOfStack-1] == this.theArray[0..this.topOfStack-1] (elementwise) {0-}> (Bin,SJJ)
  <this.theArray[0..this.topOfStack] == this.theArray[0..this.topOfStack] (elementwise) {0-}, this.theArray[0..this.topOfStack] == this.theArray[0..this.topOfStack] (elementwise) {0-}> (Bin,SJJ)
  <this.theArray[] == this.theArray[] (elementwise) {0-}, this.theArray[] == this.theArray[] (elementwise) {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack+1..] == this.theArray[this.topOfStack+1..] (elementwise) {0-}, this.theArray[this.topOfStack+1..] == this.theArray[this.topOfStack+1..] (elementwise) {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack..] == this.theArray[this.topOfStack..] (elementwise) {0-}, this.theArray[this.topOfStack..] == this.theArray[this.topOfStack..] (elementwise) {0-}> (Bin,SJJ)
  <this.theArray[0..this.topOfStack-1] == this.theArray[0..this.topOfStack-1] {0-}, this.theArray[0..this.topOfStack-1] == this.theArray[0..this.topOfStack-1] {0-}> (Bin,SJJ)
  <this.theArray[0..this.topOfStack] == this.theArray[0..this.topOfStack] {0-}, this.theArray[0..this.topOfStack] == this.theArray[0..this.topOfStack] {0-}> (Bin,SJJ)
  <this.theArray[] == this.theArray[] {0-}, this.theArray[] == this.theArray[] {0-}> (Bin,SJJ)
  <Too few samples for linear relation: 0 * Slice{Add{+1}[Field{topOfStack}[this]],}[Elements[Field{theArray}[this]]] == 0 * Slice{Add{+1}[Field{topOfStack}[this]],}[Elements[Field{theArray}[this]]] + 0 {1-}, Too few samples for linear relation: 0 * Slice{Add{+1}[Field{topOfStack}[this]],}[Elements[Field{theArray}[this]]] == 0 * Slice{Add{+1}[Field{topOfStack}[this]],}[Elements[Field{theArray}[this]]] + 0 {1-}> (Bin,SUU)
  <this.theArray[this.topOfStack..] == this.theArray[this.topOfStack..] {0-}, this.theArray[this.topOfStack..] == this.theArray[this.topOfStack..] {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack+1..] is the reverse of this.theArray[this.topOfStack+1..] {0-}, this.theArray[this.topOfStack+1..] is the reverse of this.theArray[this.topOfStack+1..] {0-}> (Bin,SJJ)
  <this.theArray[0..this.topOfStack-1] == this.theArray[0..this.topOfStack-1] {0-}, this.theArray[0..this.topOfStack-1] == this.theArray[0..this.topOfStack-1] {0-}> (Bin,SJJ)
  <this.theArray[0..this.topOfStack] == this.theArray[0..this.topOfStack] {0-}, this.theArray[0..this.topOfStack] == this.theArray[0..this.topOfStack] {0-}> (Bin,SJJ)
  <this.theArray[] == this.theArray[] {0-}, this.theArray[] == this.theArray[] {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack+1..] == this.theArray[this.topOfStack+1..] {0-}, this.theArray[this.topOfStack+1..] == this.theArray[this.topOfStack+1..] {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack..] == this.theArray[this.topOfStack..] {0-}, this.theArray[this.topOfStack..] == this.theArray[this.topOfStack..] {0-}> (Bin,SJJ)
  <this.theArray[] is a {sub,super}sequence of this.theArray[] {1-}, this.theArray[] is a {sub,super}sequence of this.theArray[] {1-}> (Bin,SUU)
  <this.theArray.class == this.theArray.class {0-}, this.theArray.class == this.theArray.class {0-}> (Bin,SJJ)
  <x.class == x.class {0-}, x.class == x.class {0-}> (Bin,SJJ)
  <size(this.theArray[]) == java.lang.Math.max(size(this.theArray[]), size(this.theArray[])) {3-}, size(this.theArray[]) == java.lang.Math.max(size(this.theArray[]), size(this.theArray[])) {3-}> (Ter,SUU)
  <size(this.theArray[]) == java.lang.Math.max(size(this.theArray[]), size(this.theArray[])) {3-}, size(this.theArray[]) == java.lang.Math.max(size(this.theArray[]), size(this.theArray[])) {3-}> (Ter,SUU)
  <size(this.theArray[]) == java.lang.Math.max(size(this.theArray[]), size(this.theArray[])) {3-}, size(this.theArray[]) == java.lang.Math.max(size(this.theArray[]), size(this.theArray[])) {3-}> (Ter,SUU)
  <size(this.theArray[]) == java.lang.Math.min(size(this.theArray[]), size(this.theArray[])) {3-}, size(this.theArray[]) == java.lang.Math.min(size(this.theArray[]), size(this.theArray[])) {3-}> (Ter,SUU)
  <size(this.theArray[]) == java.lang.Math.min(size(this.theArray[]), size(this.theArray[])) {3-}, size(this.theArray[]) == java.lang.Math.min(size(this.theArray[]), size(this.theArray[])) {3-}> (Ter,SUU)
  <size(this.theArray[]) == java.lang.Math.min(size(this.theArray[]), size(this.theArray[])) {3-}, size(this.theArray[]) == java.lang.Math.min(size(this.theArray[]), size(this.theArray[])) {3-}> (Ter,SUU)
  <size(this.theArray[]) == size(this.theArray[]) & size(this.theArray[]) {3-}, size(this.theArray[]) == size(this.theArray[]) & size(this.theArray[]) {3-}> (Ter,SUU)
  <size(this.theArray[]) == size(this.theArray[]) & size(this.theArray[]) {3-}, size(this.theArray[]) == size(this.theArray[]) & size(this.theArray[]) {3-}> (Ter,SUU)
  <size(this.theArray[]) == size(this.theArray[]) & size(this.theArray[]) {3-}, size(this.theArray[]) == size(this.theArray[]) & size(this.theArray[]) {3-}> (Ter,SUU)
  <size(this.theArray[]) == size(this.theArray[]) | size(this.theArray[]) {3-}, size(this.theArray[]) == size(this.theArray[]) | size(this.theArray[]) {3-}> (Ter,SUU)
  <size(this.theArray[]) == size(this.theArray[]) | size(this.theArray[]) {3-}, size(this.theArray[]) == size(this.theArray[]) | size(this.theArray[]) {3-}> (Ter,SUU)
  <size(this.theArray[]) == size(this.theArray[]) | size(this.theArray[]) {3-}, size(this.theArray[]) == size(this.theArray[]) | size(this.theArray[]) {3-}> (Ter,SUU)
  <size(this.theArray[]) == org.plumelib.util.MathPlume.gcd(size(this.theArray[]), size(this.theArray[])) {3-}, size(this.theArray[]) == org.plumelib.util.MathPlume.gcd(size(this.theArray[]), size(this.theArray[])) {3-}> (Ter,SUU)
  <size(this.theArray[]) == org.plumelib.util.MathPlume.gcd(size(this.theArray[]), size(this.theArray[])) {3-}, size(this.theArray[]) == org.plumelib.util.MathPlume.gcd(size(this.theArray[]), size(this.theArray[])) {3-}> (Ter,SUU)
  <size(this.theArray[]) == org.plumelib.util.MathPlume.gcd(size(this.theArray[]), size(this.theArray[])) {3-}, size(this.theArray[]) == org.plumelib.util.MathPlume.gcd(size(this.theArray[]), size(this.theArray[])) {3-}> (Ter,SUU)
  <size(this.theArray[]) == java.lang.Math.max(size(this.theArray[]), size(this.theArray[])-1) {0.5-}, size(this.theArray[]) == java.lang.Math.max(size(this.theArray[]), size(this.theArray[])-1) {0-}> (Ter,SUJ)
  <size(this.theArray[]) == java.lang.Math.max(size(this.theArray[]), size(this.theArray[])-1) {0.5-}, size(this.theArray[]) == java.lang.Math.max(size(this.theArray[]), size(this.theArray[])-1) {0-}> (Ter,SUJ)
  <size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[]), size(this.theArray[])-1) {0.25-}, size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[]), size(this.theArray[])-1) {0-}> (Ter,SUJ)
  <size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[]), size(this.theArray[])-1) {0.25-}, size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[]), size(this.theArray[])-1) {0-}> (Ter,SUJ)
  <size(this.theArray[])-1 == size(this.theArray[])-1 % size(this.theArray[]) {0.25-}, size(this.theArray[])-1 == size(this.theArray[])-1 % size(this.theArray[]) {0-}> (Ter,SUJ)
  <size(this.theArray[])-1 == size(this.theArray[])-1 % size(this.theArray[]) {0.25-}, size(this.theArray[])-1 == size(this.theArray[])-1 % size(this.theArray[]) {0-}> (Ter,SUJ)
  <size(this.theArray[])-1 == java.lang.Math.max(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == java.lang.Math.max(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == java.lang.Math.max(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == java.lang.Math.max(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == java.lang.Math.max(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == java.lang.Math.max(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == size(this.theArray[])-1 & size(this.theArray[])-1 {3-}, size(this.theArray[])-1 == size(this.theArray[])-1 & size(this.theArray[])-1 {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == size(this.theArray[])-1 & size(this.theArray[])-1 {3-}, size(this.theArray[])-1 == size(this.theArray[])-1 & size(this.theArray[])-1 {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == size(this.theArray[])-1 & size(this.theArray[])-1 {3-}, size(this.theArray[])-1 == size(this.theArray[])-1 & size(this.theArray[])-1 {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == size(this.theArray[])-1 | size(this.theArray[])-1 {3-}, size(this.theArray[])-1 == size(this.theArray[])-1 | size(this.theArray[])-1 {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == size(this.theArray[])-1 | size(this.theArray[])-1 {3-}, size(this.theArray[])-1 == size(this.theArray[])-1 | size(this.theArray[])-1 {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == size(this.theArray[])-1 | size(this.theArray[])-1 {3-}, size(this.theArray[])-1 == size(this.theArray[])-1 | size(this.theArray[])-1 {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == org.plumelib.util.MathPlume.gcd(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == org.plumelib.util.MathPlume.gcd(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == org.plumelib.util.MathPlume.gcd(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == org.plumelib.util.MathPlume.gcd(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == org.plumelib.util.MathPlume.gcd(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == org.plumelib.util.MathPlume.gcd(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[]) == java.lang.Math.max(this.topOfStack, size(this.theArray[])) {0-}, size(this.theArray[]) == java.lang.Math.max(this.topOfStack, size(this.theArray[])) {0-}> (Ter,SJJ)
  <size(this.theArray[]) == java.lang.Math.max(this.topOfStack, size(this.theArray[])) {0-}, size(this.theArray[]) == java.lang.Math.max(this.topOfStack, size(this.theArray[])) {0-}> (Ter,SJJ)
  <size(this.theArray[])-1 == java.lang.Math.max(this.topOfStack, size(this.theArray[])-1) {0-}, size(this.theArray[])-1 == java.lang.Math.max(this.topOfStack, size(this.theArray[])-1) {0-}> (Ter,SJJ)
  <size(this.theArray[])-1 == java.lang.Math.max(this.topOfStack, size(this.theArray[])-1) {0-}, size(this.theArray[])-1 == java.lang.Math.max(this.topOfStack, size(this.theArray[])-1) {0-}> (Ter,SJJ)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])) {0.25-}, this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])) {0-}> (Ter,SUJ)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])) {0.25-}, this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])) {0-}> (Ter,SUJ)
  <null, this.topOfStack == this.topOfStack % size(this.theArray[]) {0-}> (Ter,MJ)
  <null, this.topOfStack == this.topOfStack % size(this.theArray[]) {0-}> (Ter,MJ)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])-1) {0.5-}, this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])-1) {0-}> (Ter,SUJ)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])-1) {0.5-}, this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])-1) {0-}> (Ter,SUJ)
  <this.topOfStack == java.lang.Math.max(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == java.lang.Math.max(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <this.topOfStack == java.lang.Math.max(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == java.lang.Math.max(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <this.topOfStack == java.lang.Math.max(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == java.lang.Math.max(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == java.lang.Math.min(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == java.lang.Math.min(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == java.lang.Math.min(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <this.topOfStack == this.topOfStack & this.topOfStack {3-}, this.topOfStack == this.topOfStack & this.topOfStack {3-}> (Ter,SUU)
  <this.topOfStack == this.topOfStack & this.topOfStack {3-}, this.topOfStack == this.topOfStack & this.topOfStack {3-}> (Ter,SUU)
  <this.topOfStack == this.topOfStack & this.topOfStack {3-}, this.topOfStack == this.topOfStack & this.topOfStack {3-}> (Ter,SUU)
  <this.topOfStack == this.topOfStack | this.topOfStack {3-}, this.topOfStack == this.topOfStack | this.topOfStack {3-}> (Ter,SUU)
  <this.topOfStack == this.topOfStack | this.topOfStack {3-}, this.topOfStack == this.topOfStack | this.topOfStack {3-}> (Ter,SUU)
  <this.topOfStack == this.topOfStack | this.topOfStack {3-}, this.topOfStack == this.topOfStack | this.topOfStack {3-}> (Ter,SUU)
  <this.topOfStack == org.plumelib.util.MathPlume.gcd(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == org.plumelib.util.MathPlume.gcd(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <this.topOfStack == org.plumelib.util.MathPlume.gcd(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == org.plumelib.util.MathPlume.gcd(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <this.topOfStack == org.plumelib.util.MathPlume.gcd(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == org.plumelib.util.MathPlume.gcd(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <Too few samples for linear relation: 0 * SizeOf[Elements[Field{theArray}[this]]] == 0 * SizeOf[Elements[Field{theArray}[this]]] + 0 * SizeOf[Elements[Field{theArray}[this]]] + 0 {0.25-}, null> (Ter,UM)
  <Too few samples for linear relation: 0 * Add{-1}[SizeOf[Elements[Field{theArray}[this]]]] == 0 * SizeOf[Elements[Field{theArray}[this]]] + 0 * SizeOf[Elements[Field{theArray}[this]]] + 0 {0.25-}, null> (Ter,UM)
  <Too few samples for linear relation: 0 * Add{-1}[SizeOf[Elements[Field{theArray}[this]]]] == 0 * SizeOf[Elements[Field{theArray}[this]]] + 0 * Add{-1}[SizeOf[Elements[Field{theArray}[this]]]] + 0 {0.25-}, null> (Ter,UM)
  <Too few samples for linear relation: 0 * Add{-1}[SizeOf[Elements[Field{theArray}[this]]]] == 0 * Add{-1}[SizeOf[Elements[Field{theArray}[this]]]] + 0 * Add{-1}[SizeOf[Elements[Field{theArray}[this]]]] + 0 {0.25-}, null> (Ter,UM)
  <size(this.theArray[]) >= 1 {0.9592-}, size(this.theArray[]) >= 2 {0.9643-}> (UInt,DUU)
  <this.topOfStack >= -1 {0+}, this.topOfStack >= -1 {0+}> (U!Int,SJJ)
  <size(this.theArray[]) != 0 {1-}, size(this.theArray[]) != 0 {1-}> (UInt,SUU)
  <null, size(this.theArray[])-1 != 0 {1-}> (UInt,MU)
  <this.theArray != null {0.0001+}, this.theArray != null {0.0001+}> (UInt,SJJ)
  <this.theArray[this.topOfStack-1] != null {0.0001-}, this.theArray[this.topOfStack-1] != null {0.0001-}> (UInt,SJJ)
  <this.theArray[this.topOfStack] != null {0.0001-}, this.theArray[this.topOfStack] != null {0.0001-}> (UInt,SJJ)
  <x != null {0.0001+}, x != null {0.0001+}> (UInt,SJJ)
  <size(this.theArray[]) <= 20 {0-}, size(this.theArray[]) <= 15 {0-}> (U!Int,DJJ)
  <this.topOfStack <= 18 {1-}, this.topOfStack <= 13 {1-}> (U!Int,DUU)
  <this.theArray[0..this.topOfStack-1] elements != null {0.0001-}, this.theArray[0..this.topOfStack-1] elements != null {0.0001-}> (UInt,SJJ)
  <this.theArray[0..this.topOfStack] elements != null {0.0001+}, this.theArray[0..this.topOfStack] elements != null {0.0001+}> (UInt,SJJ)
  <this.theArray[this.topOfStack+1..] elements == null {0+}, this.theArray[this.topOfStack+1..] elements == null {0+}> (UInt,SJJ)
  <this.theArray[this.topOfStack+1..] elements are equal {0-}, this.theArray[this.topOfStack+1..] elements are equal {0-}> (UInt,SJJ)
  <null, this.theArray[0..this.topOfStack-1] contains no duplicates {0.0523-}> (UInt,MU)
  <null, this.theArray[0..this.topOfStack] contains no duplicates {0.0343-}> (UInt,MU)
  <this.theArray.class == "[Ljava.lang.Object;" {0+}, this.theArray.class == "[Ljava.lang.Object;" {0+}> (UInt,SJJ)
<DataStructures.StackAr.push(Ljava/lang/Object;)V:::EXIT>
  <this.theArray[orig(this.topOfStack)-1] in orig(this.theArray[]) {0-}, this.theArray[orig(this.topOfStack)-1] in orig(this.theArray[]) {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack-1] in orig(this.theArray[]) {0-}, this.theArray[this.topOfStack-1] in orig(this.theArray[]) {0-}> (Bin,SJJ)
  <orig(this.theArray[post(this.topOfStack)]) in orig(this.theArray[post(this.topOfStack)..]) {0-}, orig(this.theArray[post(this.topOfStack)]) in orig(this.theArray[post(this.topOfStack)..]) {0-}> (Bin,SJJ)
  <orig(this.theArray[post(this.topOfStack)]) in orig(this.theArray[this.topOfStack..]) {0+}, orig(this.theArray[post(this.topOfStack)]) in orig(this.theArray[this.topOfStack..]) {0+}> (Bin,SJJ)
  <this.theArray[orig(this.topOfStack)-1] in this.theArray[0..this.topOfStack-1] {0-}, this.theArray[orig(this.topOfStack)-1] in this.theArray[0..this.topOfStack-1] {0-}> (Bin,SJJ)
  <this.theArray[orig(this.topOfStack)-1] in this.theArray[0..this.topOfStack] {0+}, this.theArray[orig(this.topOfStack)-1] in this.theArray[0..this.topOfStack] {0+}> (Bin,SJJ)
  <this.theArray[orig(this.topOfStack)-1] in this.theArray[] {0-}, this.theArray[orig(this.topOfStack)-1] in this.theArray[] {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack-1] in this.theArray[] {0-}, this.theArray[this.topOfStack-1] in this.theArray[] {0-}> (Bin,SJJ)
  <this.theArray[orig(this.topOfStack)-1] in orig(this.theArray[0..post(this.topOfStack)]) {0+}, this.theArray[orig(this.topOfStack)-1] in orig(this.theArray[0..post(this.topOfStack)]) {0+}> (Bin,SJJ)
  <this.theArray[orig(this.topOfStack)-1] in this.theArray[0..orig(this.topOfStack)-1] {0-}, this.theArray[orig(this.topOfStack)-1] in this.theArray[0..orig(this.topOfStack)-1] {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack-1] in orig(this.theArray[0..post(this.topOfStack)]) {0-}, this.theArray[this.topOfStack-1] in orig(this.theArray[0..post(this.topOfStack)]) {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack-1] in orig(this.theArray[this.topOfStack..]) {0-}, this.theArray[this.topOfStack-1] in orig(this.theArray[this.topOfStack..]) {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack-1] in this.theArray[0..this.topOfStack-1] {0-}, this.theArray[this.topOfStack-1] in this.theArray[0..this.topOfStack-1] {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack-1] in this.theArray[0..this.topOfStack] {0-}, this.theArray[this.topOfStack-1] in this.theArray[0..this.topOfStack] {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack-1] in this.theArray[orig(this.topOfStack)..] {0-}, this.theArray[this.topOfStack-1] in this.theArray[orig(this.topOfStack)..] {0-}> (Bin,SJJ)
  <x in this.theArray[0..this.topOfStack] {0-}, x in this.theArray[0..this.topOfStack] {0-}> (Bin,SJJ)
  <x in this.theArray[] {0-}, x in this.theArray[] {0-}> (Bin,SJJ)
  <x in this.theArray[orig(this.topOfStack)..] {0+}, x in this.theArray[orig(this.topOfStack)..] {0+}> (Bin,SJJ)
  <x in this.theArray[this.topOfStack..] {0-}, x in this.theArray[this.topOfStack..] {0-}> (Bin,SJJ)
  <orig(this.theArray[post(this.topOfStack)..]) elements == orig(this.theArray[post(this.topOfStack)]) {0+}, orig(this.theArray[post(this.topOfStack)..]) elements == orig(this.theArray[post(this.topOfStack)]) {0+}> (Bin,SJJ)
  <this.theArray[this.topOfStack+1..] elements == orig(this.theArray[post(this.topOfStack)]) {0+}, this.theArray[this.topOfStack+1..] elements == orig(this.theArray[post(this.topOfStack)]) {0+}> (Bin,SJJ)
  <orig(this.theArray[post(this.topOfStack)]) == orig(this.theArray[post(this.topOfStack)]) {0-}, orig(this.theArray[post(this.topOfStack)]) == orig(this.theArray[post(this.topOfStack)]) {0-}> (Bin,SJJ)
  <orig(this.topOfStack) == orig(this.topOfStack) {0-}, orig(this.topOfStack) == orig(this.topOfStack) {0-}> (Bin,SJJ)
  <size(this.theArray[]) == orig(size(this.theArray[])) {0+}, size(this.theArray[]) == orig(size(this.theArray[])) {0+}> (Bin,SJJ)
  <size(this.theArray[]) == size(this.theArray[]) {0-}, size(this.theArray[]) == size(this.theArray[]) {0-}> (Bin,SJJ)
  <size(this.theArray[])-1 == orig(size(this.theArray[]))-1 {0-}, size(this.theArray[])-1 == orig(size(this.theArray[]))-1 {0-}> (Bin,SJJ)
  <size(this.theArray[])-1 == size(this.theArray[])-1 {0-}, size(this.theArray[])-1 == size(this.theArray[])-1 {0-}> (Bin,SJJ)
  <this.theArray == orig(this.theArray) {0+}, this.theArray == orig(this.theArray) {0+}> (Bin,SJJ)
  <this.theArray == this.theArray {0-}, this.theArray == this.theArray {0-}> (Bin,SJJ)
  <this.theArray[orig(this.topOfStack)-1] == orig(this.theArray[this.topOfStack-1]) {0+}, this.theArray[orig(this.topOfStack)-1] == orig(this.theArray[this.topOfStack-1]) {0+}> (Bin,SJJ)
  <this.theArray[orig(this.topOfStack)-1] == this.theArray[orig(this.topOfStack)-1] {0-}, this.theArray[orig(this.topOfStack)-1] == this.theArray[orig(this.topOfStack)-1] {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack-1] == orig(this.theArray[post(this.topOfStack-1)]) {0+}, this.theArray[this.topOfStack-1] == orig(this.theArray[post(this.topOfStack-1)]) {0+}> (Bin,SJJ)
  <this.theArray[this.topOfStack-1] == orig(this.theArray[this.topOfStack]) {0+}, this.theArray[this.topOfStack-1] == orig(this.theArray[this.topOfStack]) {0+}> (Bin,SJJ)
  <this.theArray[this.topOfStack-1] == this.theArray[orig(this.topOfStack)] {0+}, this.theArray[this.topOfStack-1] == this.theArray[orig(this.topOfStack)] {0+}> (Bin,SJJ)
  <this.theArray[this.topOfStack-1] == this.theArray[this.topOfStack-1] {0-}, this.theArray[this.topOfStack-1] == this.theArray[this.topOfStack-1] {0-}> (Bin,SJJ)
  <this.topOfStack == this.topOfStack {0-}, this.topOfStack == this.topOfStack {0-}> (Bin,SJJ)
  <x == orig(x) {0+}, x == orig(x) {0+}> (Bin,SJJ)
  <x == this.theArray[this.topOfStack] {0+}, x == this.theArray[this.topOfStack] {0+}> (Bin,SJJ)
  <x == x {0-}, x == x {0-}> (Bin,SJJ)
  <orig(this.topOfStack) >= orig(this.topOfStack) {0.587-}, orig(this.topOfStack) >= orig(this.topOfStack) {0.6557-}> (Bin,SUU)
  <size(this.theArray[]) >= size(this.theArray[]) {0.587-}, size(this.theArray[]) >= size(this.theArray[]) {0.6557-}> (Bin,SUU)
  <size(this.theArray[]) >= size(this.theArray[])-1 {0.1468-}, size(this.theArray[]) >= size(this.theArray[])-1 {0.041-}> (Bin,SUU)
  <size(this.theArray[])-1 >= size(this.theArray[])-1 {0.587-}, size(this.theArray[])-1 >= size(this.theArray[])-1 {0.6557-}> (Bin,SUU)
  <this.topOfStack >= orig(this.topOfStack) {0.0183-}, this.topOfStack >= orig(this.topOfStack) {0.041-}> (Bin,SUU)
  <this.topOfStack >= this.topOfStack {0.587-}, this.topOfStack >= this.topOfStack {0.6557-}> (Bin,SUU)
  <size(this.theArray[]) > size(this.theArray[])-1 {0.1468-}, size(this.theArray[]) > size(this.theArray[])-1 {0.041-}> (Bin,SUU)
  <this.topOfStack > orig(this.topOfStack) {0.0183-}, this.topOfStack > orig(this.topOfStack) {0.041-}> (Bin,SUU)
  <orig(this.topOfStack) <= orig(this.topOfStack) {0.587-}, orig(this.topOfStack) <= orig(this.topOfStack) {0.6557-}> (Bin,SUU)
  <orig(this.topOfStack) <= size(this.theArray[]) {0.0023-}, orig(this.topOfStack) <= size(this.theArray[]) {0.0026-}> (Bin,SJJ)
  <orig(this.topOfStack) <= size(this.theArray[])-1 {0.0023-}, orig(this.topOfStack) <= size(this.theArray[])-1 {0.0026-}> (Bin,SJJ)
  <size(this.theArray[]) <= size(this.theArray[]) {0.587-}, size(this.theArray[]) <= size(this.theArray[]) {0.6557-}> (Bin,SUU)
  <size(this.theArray[])-1 <= size(this.theArray[])-1 {0.587-}, size(this.theArray[])-1 <= size(this.theArray[])-1 {0.6557-}> (Bin,SUU)
  <this.topOfStack <= size(this.theArray[]) {0.0023-}, this.topOfStack <= size(this.theArray[]) {0.0026-}> (Bin,SJJ)
  <this.topOfStack <= size(this.theArray[])-1 {0.0023+}, this.topOfStack <= size(this.theArray[])-1 {0.0026+}> (Bin,SJJ)
  <this.topOfStack <= this.topOfStack {0.587-}, this.topOfStack <= this.topOfStack {0.6557-}> (Bin,SUU)
  <orig(this.topOfStack) < size(this.theArray[]) {0.0023-}, orig(this.topOfStack) < size(this.theArray[]) {0.0026-}> (Bin,SJJ)
  <orig(this.topOfStack) < size(this.theArray[])-1 {0.0023+}, orig(this.topOfStack) < size(this.theArray[])-1 {0.0026+}> (Bin,SJJ)
  <this.topOfStack < size(this.theArray[]) {0.0023-}, this.topOfStack < size(this.theArray[]) {0.0026-}> (Bin,SJJ)
  <orig(this.topOfStack) != size(this.theArray[]) {0.0023-}, orig(this.topOfStack) != size(this.theArray[]) {0.0026-}> (Bin,SJJ)
  <orig(this.topOfStack) != size(this.theArray[])-1 {0.0023-}, orig(this.topOfStack) != size(this.theArray[])-1 {0.0026-}> (Bin,SJJ)
  <size(this.theArray[]) != size(this.theArray[])-1 {0.0734-}, size(this.theArray[]) != size(this.theArray[])-1 {0.041-}> (Bin,SUU)
  <this.topOfStack != orig(this.topOfStack) {0.0183-}, this.topOfStack != orig(this.topOfStack) {0.041-}> (Bin,SUU)
  <this.topOfStack != size(this.theArray[]) {0.0023-}, this.topOfStack != size(this.theArray[]) {0.0026-}> (Bin,SJJ)
  <orig(this.topOfStack) == orig(this.topOfStack) {0-}, orig(this.topOfStack) == orig(this.topOfStack) {0-}> (Bin,SJJ)
  <size(this.theArray[]) == size(this.theArray[]) {0-}, size(this.theArray[]) == size(this.theArray[]) {0-}> (Bin,SJJ)
  <size(this.theArray[])-1 == size(this.theArray[]) - 1 {0-}, size(this.theArray[])-1 == size(this.theArray[]) - 1 {0-}> (Bin,SJJ)
  <size(this.theArray[])-1 == size(this.theArray[])-1 {0-}, size(this.theArray[])-1 == size(this.theArray[])-1 {0-}> (Bin,SJJ)
  <orig(this.topOfStack) == this.topOfStack - 1 {0+}, orig(this.topOfStack) == this.topOfStack - 1 {0+}> (Bin,SJJ)
  <this.topOfStack == this.topOfStack {0-}, this.topOfStack == this.topOfStack {0-}> (Bin,SJJ)
  <orig(this.theArray[0..post(this.topOfStack)]) == orig(this.theArray[0..post(this.topOfStack)]) (elementwise) {0-}, orig(this.theArray[0..post(this.topOfStack)]) == orig(this.theArray[0..post(this.topOfStack)]) (elementwise) {0-}> (Bin,SJJ)
  <orig(this.theArray[]) == orig(this.theArray[]) (elementwise) {0-}, orig(this.theArray[]) == orig(this.theArray[]) (elementwise) {0-}> (Bin,SJJ)
  <orig(this.theArray[post(this.topOfStack)..]) == orig(this.theArray[post(this.topOfStack)..]) (elementwise) {0-}, orig(this.theArray[post(this.topOfStack)..]) == orig(this.theArray[post(this.topOfStack)..]) (elementwise) {0-}> (Bin,SJJ)
  <orig(this.theArray[this.topOfStack..]) == orig(this.theArray[this.topOfStack..]) (elementwise) {0-}, orig(this.theArray[this.topOfStack..]) == orig(this.theArray[this.topOfStack..]) (elementwise) {0-}> (Bin,SJJ)
  <this.theArray[0..orig(this.topOfStack)-1] == this.theArray[0..orig(this.topOfStack)-1] (elementwise) {0-}, this.theArray[0..orig(this.topOfStack)-1] == this.theArray[0..orig(this.topOfStack)-1] (elementwise) {0-}> (Bin,SJJ)
  <this.theArray[0..this.topOfStack-1] == this.theArray[0..this.topOfStack-1] (elementwise) {0-}, this.theArray[0..this.topOfStack-1] == this.theArray[0..this.topOfStack-1] (elementwise) {0-}> (Bin,SJJ)
  <this.theArray[0..this.topOfStack] == this.theArray[0..this.topOfStack] (elementwise) {0-}, this.theArray[0..this.topOfStack] == this.theArray[0..this.topOfStack] (elementwise) {0-}> (Bin,SJJ)
  <this.theArray[] == this.theArray[] (elementwise) {0-}, this.theArray[] == this.theArray[] (elementwise) {0-}> (Bin,SJJ)
  <this.theArray[orig(this.topOfStack)..] == this.theArray[orig(this.topOfStack)..] (elementwise) {0-}, this.theArray[orig(this.topOfStack)..] == this.theArray[orig(this.topOfStack)..] (elementwise) {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack+1..] == this.theArray[this.topOfStack+1..] (elementwise) {0-}, this.theArray[this.topOfStack+1..] == this.theArray[this.topOfStack+1..] (elementwise) {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack..] == this.theArray[this.topOfStack..] (elementwise) {0-}, this.theArray[this.topOfStack..] == this.theArray[this.topOfStack..] (elementwise) {0-}> (Bin,SJJ)
  <orig(this.theArray[0..post(this.topOfStack)]) == orig(this.theArray[0..post(this.topOfStack)]) {0-}, orig(this.theArray[0..post(this.topOfStack)]) == orig(this.theArray[0..post(this.topOfStack)]) {0-}> (Bin,SJJ)
  <orig(this.theArray[]) == orig(this.theArray[]) {0-}, orig(this.theArray[]) == orig(this.theArray[]) {0-}> (Bin,SJJ)
  <Too few samples for linear relation: 0 * Prestate[Slice{Poststate[Field{topOfStack}[this]],}[Elements[Field{theArray}[this]]]] == 0 * Prestate[Slice{Poststate[Field{topOfStack}[this]],}[Elements[Field{theArray}[this]]]] + 0 {1-}, Too few samples for linear relation: 0 * Prestate[Slice{Poststate[Field{topOfStack}[this]],}[Elements[Field{theArray}[this]]]] == 0 * Prestate[Slice{Poststate[Field{topOfStack}[this]],}[Elements[Field{theArray}[this]]]] + 0 {1-}> (Bin,SUU)
  <orig(this.theArray[this.topOfStack..]) == orig(this.theArray[this.topOfStack..]) {0-}, orig(this.theArray[this.topOfStack..]) == orig(this.theArray[this.topOfStack..]) {0-}> (Bin,SJJ)
  <this.theArray[0..orig(this.topOfStack)-1] == this.theArray[0..orig(this.topOfStack)-1] {0-}, this.theArray[0..orig(this.topOfStack)-1] == this.theArray[0..orig(this.topOfStack)-1] {0-}> (Bin,SJJ)
  <this.theArray[0..this.topOfStack-1] == this.theArray[0..this.topOfStack-1] {0-}, this.theArray[0..this.topOfStack-1] == this.theArray[0..this.topOfStack-1] {0-}> (Bin,SJJ)
  <this.theArray[0..this.topOfStack] == this.theArray[0..this.topOfStack] {0-}, this.theArray[0..this.topOfStack] == this.theArray[0..this.topOfStack] {0-}> (Bin,SJJ)
  <this.theArray[] == this.theArray[] {0-}, this.theArray[] == this.theArray[] {0-}> (Bin,SJJ)
  <this.theArray[orig(this.topOfStack)..] == this.theArray[orig(this.topOfStack)..] {0-}, this.theArray[orig(this.topOfStack)..] == this.theArray[orig(this.topOfStack)..] {0-}> (Bin,SJJ)
  <Too few samples for linear relation: 0 * Slice{Add{+1}[Field{topOfStack}[this]],}[Elements[Field{theArray}[this]]] == 0 * Slice{Add{+1}[Field{topOfStack}[this]],}[Elements[Field{theArray}[this]]] + 0 {1-}, Too few samples for linear relation: 0 * Slice{Add{+1}[Field{topOfStack}[this]],}[Elements[Field{theArray}[this]]] == 0 * Slice{Add{+1}[Field{topOfStack}[this]],}[Elements[Field{theArray}[this]]] + 0 {1-}> (Bin,SUU)
  <this.theArray[this.topOfStack..] == this.theArray[this.topOfStack..] {0-}, this.theArray[this.topOfStack..] == this.theArray[this.topOfStack..] {0-}> (Bin,SJJ)
  <orig(this.theArray[post(this.topOfStack)..]) is the reverse of orig(this.theArray[post(this.topOfStack)..]) {0-}, orig(this.theArray[post(this.topOfStack)..]) is the reverse of orig(this.theArray[post(this.topOfStack)..]) {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack+1..] is the reverse of this.theArray[this.topOfStack+1..] {0-}, this.theArray[this.topOfStack+1..] is the reverse of this.theArray[this.topOfStack+1..] {0-}> (Bin,SJJ)
  <orig(this.theArray[0..post(this.topOfStack)]) == orig(this.theArray[0..post(this.topOfStack)]) {0-}, orig(this.theArray[0..post(this.topOfStack)]) == orig(this.theArray[0..post(this.topOfStack)]) {0-}> (Bin,SJJ)
  <orig(this.theArray[]) == orig(this.theArray[]) {0-}, orig(this.theArray[]) == orig(this.theArray[]) {0-}> (Bin,SJJ)
  <orig(this.theArray[post(this.topOfStack)..]) == orig(this.theArray[post(this.topOfStack)..]) {0-}, orig(this.theArray[post(this.topOfStack)..]) == orig(this.theArray[post(this.topOfStack)..]) {0-}> (Bin,SJJ)
  <orig(this.theArray[post(this.topOfStack)..]) == orig(this.theArray[this.topOfStack+1..]) {0-}, orig(this.theArray[post(this.topOfStack)..]) == orig(this.theArray[this.topOfStack+1..]) {0-}> (Bin,SJJ)
  <orig(this.theArray[this.topOfStack..]) == orig(this.theArray[this.topOfStack..]) {0-}, orig(this.theArray[this.topOfStack..]) == orig(this.theArray[this.topOfStack..]) {0-}> (Bin,SJJ)
  <this.theArray[0..orig(this.topOfStack)-1] == orig(this.theArray[0..this.topOfStack-1]) {0+}, this.theArray[0..orig(this.topOfStack)-1] == orig(this.theArray[0..this.topOfStack-1]) {0+}> (Bin,SJJ)
  <this.theArray[0..orig(this.topOfStack)-1] == this.theArray[0..orig(this.topOfStack)-1] {0-}, this.theArray[0..orig(this.topOfStack)-1] == this.theArray[0..orig(this.topOfStack)-1] {0-}> (Bin,SJJ)
  <this.theArray[0..this.topOfStack-1] == orig(this.theArray[0..post(this.topOfStack-1)]) {0+}, this.theArray[0..this.topOfStack-1] == orig(this.theArray[0..post(this.topOfStack-1)]) {0+}> (Bin,SJJ)
  <this.theArray[0..this.topOfStack-1] == orig(this.theArray[0..this.topOfStack]) {0+}, this.theArray[0..this.topOfStack-1] == orig(this.theArray[0..this.topOfStack]) {0+}> (Bin,SJJ)
  <this.theArray[0..this.topOfStack-1] == this.theArray[0..orig(this.topOfStack)] {0-}, this.theArray[0..this.topOfStack-1] == this.theArray[0..orig(this.topOfStack)] {0-}> (Bin,SJJ)
  <this.theArray[0..this.topOfStack-1] == this.theArray[0..this.topOfStack-1] {0-}, this.theArray[0..this.topOfStack-1] == this.theArray[0..this.topOfStack-1] {0-}> (Bin,SJJ)
  <this.theArray[0..this.topOfStack] == this.theArray[0..this.topOfStack] {0-}, this.theArray[0..this.topOfStack] == this.theArray[0..this.topOfStack] {0-}> (Bin,SJJ)
  <this.theArray[] == this.theArray[] {0-}, this.theArray[] == this.theArray[] {0-}> (Bin,SJJ)
  <this.theArray[orig(this.topOfStack)..] == this.theArray[orig(this.topOfStack)..] {0-}, this.theArray[orig(this.topOfStack)..] == this.theArray[orig(this.topOfStack)..] {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack+1..] == orig(this.theArray[post(this.topOfStack+1)..]) {0+}, this.theArray[this.topOfStack+1..] == orig(this.theArray[post(this.topOfStack+1)..]) {0+}> (Bin,SJJ)
  <this.theArray[this.topOfStack+1..] == this.theArray[this.topOfStack+1..] {0-}, this.theArray[this.topOfStack+1..] == this.theArray[this.topOfStack+1..] {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack..] == this.theArray[orig(this.topOfStack)+1..] {0-}, this.theArray[this.topOfStack..] == this.theArray[orig(this.topOfStack)+1..] {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack..] == this.theArray[this.topOfStack..] {0-}, this.theArray[this.topOfStack..] == this.theArray[this.topOfStack..] {0-}> (Bin,SJJ)
  <orig(this.theArray[]) is a {sub,super}sequence of orig(this.theArray[]) {1-}, orig(this.theArray[]) is a {sub,super}sequence of orig(this.theArray[]) {1-}> (Bin,SUU)
  <orig(this.theArray[post(this.topOfStack)..]) is a subsequence of orig(this.theArray[]) {0-}, orig(this.theArray[post(this.topOfStack)..]) is a subsequence of orig(this.theArray[]) {0-}> (Bin,SJJ)
  <this.theArray[0..orig(this.topOfStack)-1] is a subsequence of orig(this.theArray[]) {0-}, this.theArray[0..orig(this.topOfStack)-1] is a subsequence of orig(this.theArray[]) {0-}> (Bin,SJJ)
  <this.theArray[0..this.topOfStack-1] is a subsequence of orig(this.theArray[]) {0-}, this.theArray[0..this.topOfStack-1] is a subsequence of orig(this.theArray[]) {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack+1..] is a subsequence of orig(this.theArray[]) {0-}, this.theArray[this.topOfStack+1..] is a subsequence of orig(this.theArray[]) {0-}> (Bin,SJJ)
  <orig(this.theArray[post(this.topOfStack)..]) is a {sub,super}sequence of orig(this.theArray[post(this.topOfStack)..]) {1-}, orig(this.theArray[post(this.topOfStack)..]) is a {sub,super}sequence of orig(this.theArray[post(this.topOfStack)..]) {1-}> (Bin,SUU)
  <orig(this.theArray[post(this.topOfStack)..]) is a subsequence of orig(this.theArray[this.topOfStack..]) {0-}, orig(this.theArray[post(this.topOfStack)..]) is a subsequence of orig(this.theArray[this.topOfStack..]) {0-}> (Bin,SJJ)
  <this.theArray[0..orig(this.topOfStack)-1] is a subsequence of orig(this.theArray[0..post(this.topOfStack)]) {0-}, this.theArray[0..orig(this.topOfStack)-1] is a subsequence of orig(this.theArray[0..post(this.topOfStack)]) {0-}> (Bin,SJJ)
  <this.theArray[0..orig(this.topOfStack)-1] is a {sub,super}sequence of this.theArray[0..orig(this.topOfStack)-1] {1-}, this.theArray[0..orig(this.topOfStack)-1] is a {sub,super}sequence of this.theArray[0..orig(this.topOfStack)-1] {1-}> (Bin,SUU)
  <this.theArray[0..this.topOfStack-1] is a subsequence of orig(this.theArray[0..post(this.topOfStack)]) {0-}, this.theArray[0..this.topOfStack-1] is a subsequence of orig(this.theArray[0..post(this.topOfStack)]) {0-}> (Bin,SJJ)
  <this.theArray[0..orig(this.topOfStack)-1] is a subsequence of this.theArray[0..this.topOfStack-1] {0-}, this.theArray[0..orig(this.topOfStack)-1] is a subsequence of this.theArray[0..this.topOfStack-1] {0-}> (Bin,SJJ)
  <this.theArray[0..this.topOfStack-1] is a {sub,super}sequence of this.theArray[0..this.topOfStack-1] {1-}, this.theArray[0..this.topOfStack-1] is a {sub,super}sequence of this.theArray[0..this.topOfStack-1] {1-}> (Bin,SUU)
  <this.theArray[0..orig(this.topOfStack)-1] is a subsequence of this.theArray[0..this.topOfStack] {0-}, this.theArray[0..orig(this.topOfStack)-1] is a subsequence of this.theArray[0..this.topOfStack] {0-}> (Bin,SJJ)
  <this.theArray[0..this.topOfStack-1] is a subsequence of this.theArray[0..this.topOfStack] {0-}, this.theArray[0..this.topOfStack-1] is a subsequence of this.theArray[0..this.topOfStack] {0-}> (Bin,SJJ)
  <this.theArray[0..orig(this.topOfStack)-1] is a subsequence of this.theArray[] {0-}, this.theArray[0..orig(this.topOfStack)-1] is a subsequence of this.theArray[] {0-}> (Bin,SJJ)
  <this.theArray[0..this.topOfStack-1] is a subsequence of this.theArray[] {0-}, this.theArray[0..this.topOfStack-1] is a subsequence of this.theArray[] {0-}> (Bin,SJJ)
  <this.theArray[] is a {sub,super}sequence of this.theArray[] {1-}, this.theArray[] is a {sub,super}sequence of this.theArray[] {1-}> (Bin,SUU)
  <this.theArray[this.topOfStack+1..] is a subsequence of this.theArray[] {0-}, this.theArray[this.topOfStack+1..] is a subsequence of this.theArray[] {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack..] is a subsequence of this.theArray[] {0-}, this.theArray[this.topOfStack..] is a subsequence of this.theArray[] {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack+1..] is a subsequence of orig(this.theArray[post(this.topOfStack)..]) {0-}, this.theArray[this.topOfStack+1..] is a subsequence of orig(this.theArray[post(this.topOfStack)..]) {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack+1..] is a subsequence of orig(this.theArray[this.topOfStack..]) {0-}, this.theArray[this.topOfStack+1..] is a subsequence of orig(this.theArray[this.topOfStack..]) {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack+1..] is a subsequence of this.theArray[orig(this.topOfStack)..] {0-}, this.theArray[this.topOfStack+1..] is a subsequence of this.theArray[orig(this.topOfStack)..] {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack+1..] is a {sub,super}sequence of this.theArray[this.topOfStack+1..] {1-}, this.theArray[this.topOfStack+1..] is a {sub,super}sequence of this.theArray[this.topOfStack+1..] {1-}> (Bin,SUU)
  <this.theArray[this.topOfStack..] is a subsequence of this.theArray[orig(this.topOfStack)..] {0-}, this.theArray[this.topOfStack..] is a subsequence of this.theArray[orig(this.topOfStack)..] {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack+1..] is a subsequence of this.theArray[this.topOfStack..] {0-}, this.theArray[this.topOfStack+1..] is a subsequence of this.theArray[this.topOfStack..] {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack..] is a {sub,super}sequence of this.theArray[this.topOfStack..] {1-}, this.theArray[this.topOfStack..] is a {sub,super}sequence of this.theArray[this.topOfStack..] {1-}> (Bin,SUU)
  <this.theArray.class == orig(this.theArray.class) {0+}, this.theArray.class == orig(this.theArray.class) {0+}> (Bin,SJJ)
  <this.theArray.class == this.theArray.class {0-}, this.theArray.class == this.theArray.class {0-}> (Bin,SJJ)
  <x.class == orig(x.class) {0+}, x.class == orig(x.class) {0+}> (Bin,SJJ)
  <x.class == x.class {0-}, x.class == x.class {0-}> (Bin,SJJ)
  <orig(this.topOfStack) == java.lang.Math.max(orig(this.topOfStack), orig(this.topOfStack)) {3-}, orig(this.topOfStack) == java.lang.Math.max(orig(this.topOfStack), orig(this.topOfStack)) {3-}> (Ter,SUU)
  <orig(this.topOfStack) == java.lang.Math.max(orig(this.topOfStack), orig(this.topOfStack)) {3-}, orig(this.topOfStack) == java.lang.Math.max(orig(this.topOfStack), orig(this.topOfStack)) {3-}> (Ter,SUU)
  <orig(this.topOfStack) == java.lang.Math.max(orig(this.topOfStack), orig(this.topOfStack)) {3-}, orig(this.topOfStack) == java.lang.Math.max(orig(this.topOfStack), orig(this.topOfStack)) {3-}> (Ter,SUU)
  <orig(this.topOfStack) == java.lang.Math.min(orig(this.topOfStack), orig(this.topOfStack)) {3-}, orig(this.topOfStack) == java.lang.Math.min(orig(this.topOfStack), orig(this.topOfStack)) {3-}> (Ter,SUU)
  <orig(this.topOfStack) == java.lang.Math.min(orig(this.topOfStack), orig(this.topOfStack)) {3-}, orig(this.topOfStack) == java.lang.Math.min(orig(this.topOfStack), orig(this.topOfStack)) {3-}> (Ter,SUU)
  <orig(this.topOfStack) == java.lang.Math.min(orig(this.topOfStack), orig(this.topOfStack)) {3-}, orig(this.topOfStack) == java.lang.Math.min(orig(this.topOfStack), orig(this.topOfStack)) {3-}> (Ter,SUU)
  <orig(this.topOfStack) == orig(this.topOfStack) & orig(this.topOfStack) {3-}, orig(this.topOfStack) == orig(this.topOfStack) & orig(this.topOfStack) {3-}> (Ter,SUU)
  <orig(this.topOfStack) == orig(this.topOfStack) & orig(this.topOfStack) {3-}, orig(this.topOfStack) == orig(this.topOfStack) & orig(this.topOfStack) {3-}> (Ter,SUU)
  <orig(this.topOfStack) == orig(this.topOfStack) & orig(this.topOfStack) {3-}, orig(this.topOfStack) == orig(this.topOfStack) & orig(this.topOfStack) {3-}> (Ter,SUU)
  <orig(this.topOfStack) == orig(this.topOfStack) | orig(this.topOfStack) {3-}, orig(this.topOfStack) == orig(this.topOfStack) | orig(this.topOfStack) {3-}> (Ter,SUU)
  <orig(this.topOfStack) == orig(this.topOfStack) | orig(this.topOfStack) {3-}, orig(this.topOfStack) == orig(this.topOfStack) | orig(this.topOfStack) {3-}> (Ter,SUU)
  <orig(this.topOfStack) == orig(this.topOfStack) | orig(this.topOfStack) {3-}, orig(this.topOfStack) == orig(this.topOfStack) | orig(this.topOfStack) {3-}> (Ter,SUU)
  <orig(this.topOfStack) == org.plumelib.util.MathPlume.gcd(orig(this.topOfStack), orig(this.topOfStack)) {3-}, orig(this.topOfStack) == org.plumelib.util.MathPlume.gcd(orig(this.topOfStack), orig(this.topOfStack)) {3-}> (Ter,SUU)
  <orig(this.topOfStack) == org.plumelib.util.MathPlume.gcd(orig(this.topOfStack), orig(this.topOfStack)) {3-}, orig(this.topOfStack) == org.plumelib.util.MathPlume.gcd(orig(this.topOfStack), orig(this.topOfStack)) {3-}> (Ter,SUU)
  <orig(this.topOfStack) == org.plumelib.util.MathPlume.gcd(orig(this.topOfStack), orig(this.topOfStack)) {3-}, orig(this.topOfStack) == org.plumelib.util.MathPlume.gcd(orig(this.topOfStack), orig(this.topOfStack)) {3-}> (Ter,SUU)
  <orig(this.topOfStack) == java.lang.Math.min(orig(this.topOfStack), size(this.theArray[])) {0.25-}, orig(this.topOfStack) == java.lang.Math.min(orig(this.topOfStack), size(this.theArray[])) {0-}> (Ter,SUJ)
  <orig(this.topOfStack) == java.lang.Math.min(orig(this.topOfStack), size(this.theArray[])) {0.25-}, orig(this.topOfStack) == java.lang.Math.min(orig(this.topOfStack), size(this.theArray[])) {0-}> (Ter,SUJ)
  <null, orig(this.topOfStack) == orig(this.topOfStack) % size(this.theArray[]) {0-}> (Ter,MJ)
  <null, orig(this.topOfStack) == orig(this.topOfStack) % size(this.theArray[]) {0-}> (Ter,MJ)
  <orig(this.topOfStack) == java.lang.Math.min(size(this.theArray[])-1, orig(this.topOfStack)) {0.5-}, orig(this.topOfStack) == java.lang.Math.min(orig(this.topOfStack), size(this.theArray[])-1) {0-}> (Ter,SUJ)
  <null, orig(this.topOfStack) == java.lang.Math.min(orig(this.topOfStack), size(this.theArray[])-1) {0-}> (Ter,MJ)
  <size(this.theArray[]) == java.lang.Math.max(orig(this.topOfStack), size(this.theArray[])) {0-}, size(this.theArray[]) == java.lang.Math.max(orig(this.topOfStack), size(this.theArray[])) {0-}> (Ter,SJJ)
  <size(this.theArray[]) == java.lang.Math.max(orig(this.topOfStack), size(this.theArray[])) {0-}, size(this.theArray[]) == java.lang.Math.max(orig(this.topOfStack), size(this.theArray[])) {0-}> (Ter,SJJ)
  <size(this.theArray[])-1 == java.lang.Math.max(size(this.theArray[])-1, orig(this.topOfStack)) {0-}, size(this.theArray[])-1 == java.lang.Math.max(orig(this.topOfStack), size(this.theArray[])-1) {0-}> (Ter,SJJ)
  <null, size(this.theArray[])-1 == java.lang.Math.max(orig(this.topOfStack), size(this.theArray[])-1) {0-}> (Ter,MJ)
  <size(this.theArray[]) == java.lang.Math.max(size(this.theArray[]), size(this.theArray[])) {3-}, size(this.theArray[]) == java.lang.Math.max(size(this.theArray[]), size(this.theArray[])) {3-}> (Ter,SUU)
  <size(this.theArray[]) == java.lang.Math.max(size(this.theArray[]), size(this.theArray[])) {3-}, size(this.theArray[]) == java.lang.Math.max(size(this.theArray[]), size(this.theArray[])) {3-}> (Ter,SUU)
  <size(this.theArray[]) == java.lang.Math.max(size(this.theArray[]), size(this.theArray[])) {3-}, size(this.theArray[]) == java.lang.Math.max(size(this.theArray[]), size(this.theArray[])) {3-}> (Ter,SUU)
  <size(this.theArray[]) == java.lang.Math.min(size(this.theArray[]), size(this.theArray[])) {3-}, size(this.theArray[]) == java.lang.Math.min(size(this.theArray[]), size(this.theArray[])) {3-}> (Ter,SUU)
  <size(this.theArray[]) == java.lang.Math.min(size(this.theArray[]), size(this.theArray[])) {3-}, size(this.theArray[]) == java.lang.Math.min(size(this.theArray[]), size(this.theArray[])) {3-}> (Ter,SUU)
  <size(this.theArray[]) == java.lang.Math.min(size(this.theArray[]), size(this.theArray[])) {3-}, size(this.theArray[]) == java.lang.Math.min(size(this.theArray[]), size(this.theArray[])) {3-}> (Ter,SUU)
  <size(this.theArray[]) == size(this.theArray[]) & size(this.theArray[]) {3-}, size(this.theArray[]) == size(this.theArray[]) & size(this.theArray[]) {3-}> (Ter,SUU)
  <size(this.theArray[]) == size(this.theArray[]) & size(this.theArray[]) {3-}, size(this.theArray[]) == size(this.theArray[]) & size(this.theArray[]) {3-}> (Ter,SUU)
  <size(this.theArray[]) == size(this.theArray[]) & size(this.theArray[]) {3-}, size(this.theArray[]) == size(this.theArray[]) & size(this.theArray[]) {3-}> (Ter,SUU)
  <size(this.theArray[]) == size(this.theArray[]) | size(this.theArray[]) {3-}, size(this.theArray[]) == size(this.theArray[]) | size(this.theArray[]) {3-}> (Ter,SUU)
  <size(this.theArray[]) == size(this.theArray[]) | size(this.theArray[]) {3-}, size(this.theArray[]) == size(this.theArray[]) | size(this.theArray[]) {3-}> (Ter,SUU)
  <size(this.theArray[]) == size(this.theArray[]) | size(this.theArray[]) {3-}, size(this.theArray[]) == size(this.theArray[]) | size(this.theArray[]) {3-}> (Ter,SUU)
  <size(this.theArray[]) == org.plumelib.util.MathPlume.gcd(size(this.theArray[]), size(this.theArray[])) {3-}, size(this.theArray[]) == org.plumelib.util.MathPlume.gcd(size(this.theArray[]), size(this.theArray[])) {3-}> (Ter,SUU)
  <size(this.theArray[]) == org.plumelib.util.MathPlume.gcd(size(this.theArray[]), size(this.theArray[])) {3-}, size(this.theArray[]) == org.plumelib.util.MathPlume.gcd(size(this.theArray[]), size(this.theArray[])) {3-}> (Ter,SUU)
  <size(this.theArray[]) == org.plumelib.util.MathPlume.gcd(size(this.theArray[]), size(this.theArray[])) {3-}, size(this.theArray[]) == org.plumelib.util.MathPlume.gcd(size(this.theArray[]), size(this.theArray[])) {3-}> (Ter,SUU)
  <size(this.theArray[]) == java.lang.Math.max(size(this.theArray[])-1, size(this.theArray[])) {0.5-}, size(this.theArray[]) == java.lang.Math.max(size(this.theArray[]), size(this.theArray[])-1) {0-}> (Ter,SUJ)
  <null, size(this.theArray[]) == java.lang.Math.max(size(this.theArray[]), size(this.theArray[])-1) {0-}> (Ter,MJ)
  <size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[])-1, size(this.theArray[])) {0.25-}, size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[]), size(this.theArray[])-1) {0-}> (Ter,SUJ)
  <size(this.theArray[])-1 == size(this.theArray[])-1 % size(this.theArray[]) {0.25-}, size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[]), size(this.theArray[])-1) {0-}> (Ter,DUJ)
  <null, size(this.theArray[])-1 == size(this.theArray[])-1 % size(this.theArray[]) {0-}> (Ter,MJ)
  <null, size(this.theArray[])-1 == size(this.theArray[])-1 % size(this.theArray[]) {0-}> (Ter,MJ)
  <size(this.theArray[])-1 == java.lang.Math.max(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == java.lang.Math.max(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == java.lang.Math.max(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == java.lang.Math.max(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == java.lang.Math.max(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == java.lang.Math.max(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == size(this.theArray[])-1 & size(this.theArray[])-1 {3-}, size(this.theArray[])-1 == size(this.theArray[])-1 & size(this.theArray[])-1 {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == size(this.theArray[])-1 & size(this.theArray[])-1 {3-}, size(this.theArray[])-1 == size(this.theArray[])-1 & size(this.theArray[])-1 {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == size(this.theArray[])-1 & size(this.theArray[])-1 {3-}, size(this.theArray[])-1 == size(this.theArray[])-1 & size(this.theArray[])-1 {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == size(this.theArray[])-1 | size(this.theArray[])-1 {3-}, size(this.theArray[])-1 == size(this.theArray[])-1 | size(this.theArray[])-1 {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == size(this.theArray[])-1 | size(this.theArray[])-1 {3-}, size(this.theArray[])-1 == size(this.theArray[])-1 | size(this.theArray[])-1 {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == size(this.theArray[])-1 | size(this.theArray[])-1 {3-}, size(this.theArray[])-1 == size(this.theArray[])-1 | size(this.theArray[])-1 {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == org.plumelib.util.MathPlume.gcd(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == org.plumelib.util.MathPlume.gcd(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == org.plumelib.util.MathPlume.gcd(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == org.plumelib.util.MathPlume.gcd(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == org.plumelib.util.MathPlume.gcd(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == org.plumelib.util.MathPlume.gcd(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <orig(this.topOfStack) == java.lang.Math.min(this.topOfStack, orig(this.topOfStack)) {0-}, orig(this.topOfStack) == java.lang.Math.min(this.topOfStack, orig(this.topOfStack)) {0-}> (Ter,SJJ)
  <orig(this.topOfStack) == java.lang.Math.min(this.topOfStack, orig(this.topOfStack)) {0-}, orig(this.topOfStack) == java.lang.Math.min(this.topOfStack, orig(this.topOfStack)) {0-}> (Ter,SJJ)
  <size(this.theArray[]) == java.lang.Math.max(this.topOfStack, size(this.theArray[])) {0-}, size(this.theArray[]) == java.lang.Math.max(this.topOfStack, size(this.theArray[])) {0-}> (Ter,SJJ)
  <size(this.theArray[]) == java.lang.Math.max(this.topOfStack, size(this.theArray[])) {0-}, size(this.theArray[]) == java.lang.Math.max(this.topOfStack, size(this.theArray[])) {0-}> (Ter,SJJ)
  <size(this.theArray[])-1 == java.lang.Math.max(this.topOfStack, size(this.theArray[])-1) {0-}, size(this.theArray[])-1 == java.lang.Math.max(this.topOfStack, size(this.theArray[])-1) {0-}> (Ter,SJJ)
  <size(this.theArray[])-1 == java.lang.Math.max(this.topOfStack, size(this.theArray[])-1) {0-}, size(this.theArray[])-1 == java.lang.Math.max(this.topOfStack, size(this.theArray[])-1) {0-}> (Ter,SJJ)
  <this.topOfStack == java.lang.Math.max(this.topOfStack, orig(this.topOfStack)) {0-}, this.topOfStack == java.lang.Math.max(this.topOfStack, orig(this.topOfStack)) {0-}> (Ter,SJJ)
  <this.topOfStack == java.lang.Math.max(this.topOfStack, orig(this.topOfStack)) {0-}, this.topOfStack == java.lang.Math.max(this.topOfStack, orig(this.topOfStack)) {0-}> (Ter,SJJ)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])) {0.25-}, this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])) {0-}> (Ter,SUJ)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])) {0.25-}, this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])) {0-}> (Ter,SUJ)
  <this.topOfStack == this.topOfStack % size(this.theArray[]) {0.25-}, this.topOfStack == this.topOfStack % size(this.theArray[]) {0-}> (Ter,SUJ)
  <this.topOfStack == this.topOfStack % size(this.theArray[]) {0.25-}, this.topOfStack == this.topOfStack % size(this.theArray[]) {0-}> (Ter,SUJ)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])-1) {0.5-}, this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])-1) {0-}> (Ter,SUJ)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])-1) {0.5-}, this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])-1) {0-}> (Ter,SUJ)
  <this.topOfStack == java.lang.Math.max(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == java.lang.Math.max(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <this.topOfStack == java.lang.Math.max(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == java.lang.Math.max(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <this.topOfStack == java.lang.Math.max(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == java.lang.Math.max(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == java.lang.Math.min(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == java.lang.Math.min(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == java.lang.Math.min(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <this.topOfStack == this.topOfStack & this.topOfStack {3-}, this.topOfStack == this.topOfStack & this.topOfStack {3-}> (Ter,SUU)
  <this.topOfStack == this.topOfStack & this.topOfStack {3-}, this.topOfStack == this.topOfStack & this.topOfStack {3-}> (Ter,SUU)
  <this.topOfStack == this.topOfStack & this.topOfStack {3-}, this.topOfStack == this.topOfStack & this.topOfStack {3-}> (Ter,SUU)
  <this.topOfStack == this.topOfStack | this.topOfStack {3-}, this.topOfStack == this.topOfStack | this.topOfStack {3-}> (Ter,SUU)
  <this.topOfStack == this.topOfStack | this.topOfStack {3-}, this.topOfStack == this.topOfStack | this.topOfStack {3-}> (Ter,SUU)
  <this.topOfStack == this.topOfStack | this.topOfStack {3-}, this.topOfStack == this.topOfStack | this.topOfStack {3-}> (Ter,SUU)
  <this.topOfStack == org.plumelib.util.MathPlume.gcd(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == org.plumelib.util.MathPlume.gcd(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <this.topOfStack == org.plumelib.util.MathPlume.gcd(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == org.plumelib.util.MathPlume.gcd(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <this.topOfStack == org.plumelib.util.MathPlume.gcd(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == org.plumelib.util.MathPlume.gcd(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <Too few samples for linear relation: 0 * SizeOf[Elements[Field{theArray}[this]]] == 0 * SizeOf[Elements[Field{theArray}[this]]] + 0 * SizeOf[Elements[Field{theArray}[this]]] + 0 {0.25-}, null> (Ter,UM)
  <Too few samples for linear relation: 0 * Add{-1}[SizeOf[Elements[Field{theArray}[this]]]] == 0 * SizeOf[Elements[Field{theArray}[this]]] + 0 * SizeOf[Elements[Field{theArray}[this]]] + 0 {0.25-}, null> (Ter,UM)
  <Too few samples for linear relation: 0 * Add{-1}[SizeOf[Elements[Field{theArray}[this]]]] == 0 * SizeOf[Elements[Field{theArray}[this]]] + 0 * Add{-1}[SizeOf[Elements[Field{theArray}[this]]]] + 0 {0.25-}, null> (Ter,UM)
  <Too few samples for linear relation: 0 * Add{-1}[SizeOf[Elements[Field{theArray}[this]]]] == 0 * Add{-1}[SizeOf[Elements[Field{theArray}[this]]]] + 0 * Add{-1}[SizeOf[Elements[Field{theArray}[this]]]] + 0 {0.25-}, null> (Ter,UM)
  <orig(this.topOfStack) >= -1 {0+}, orig(this.topOfStack) >= -1 {0+}> (U!Int,SJJ)
  <size(this.theArray[]) >= 1 {0.9592-}, size(this.theArray[]) >= 2 {0.9643-}> (UInt,DUU)
  <size(this.theArray[])-1 >= 0 {0.697-}, size(this.theArray[])-1 >= 1 {0.9643-}> (UInt,DUU)
  <this.topOfStack >= 0 {0+}, this.topOfStack >= 0 {0+}> (UInt,SJJ)
  <size(this.theArray[]) != 0 {1-}, size(this.theArray[]) != 0 {1-}> (UInt,SUU)
  <null, size(this.theArray[])-1 != 0 {1-}> (UInt,MU)
  <this.theArray != null {0.0001+}, this.theArray != null {0.0001+}> (UInt,SJJ)
  <this.theArray[orig(this.topOfStack)-1] != null {0.0001-}, this.theArray[orig(this.topOfStack)-1] != null {0.0001-}> (UInt,SJJ)
  <this.theArray[this.topOfStack-1] != null {0.0001-}, this.theArray[this.topOfStack-1] != null {0.0001-}> (UInt,SJJ)
  <x != null {0.0001+}, x != null {0.0001+}> (UInt,SJJ)
  <orig(this.theArray[post(this.topOfStack)]) == null {0-}, orig(this.theArray[post(this.topOfStack)]) == null {0-}> (UInt,SJJ)
  <orig(this.topOfStack) <= 18 {1-}, orig(this.topOfStack) <= 13 {1-}> (U!Int,DUU)
  <size(this.theArray[]) <= 20 {0-}, size(this.theArray[]) <= 15 {0-}> (U!Int,DJJ)
  <size(this.theArray[])-1 <= 19 {0-}, size(this.theArray[])-1 <= 14 {0-}> (U!Int,DJJ)
  <this.topOfStack <= 19 {1-}, this.topOfStack <= 14 {1-}> (U!Int,DUU)
  <this.theArray[0..orig(this.topOfStack)-1] elements != null {0.0001-}, this.theArray[0..orig(this.topOfStack)-1] elements != null {0.0001-}> (UInt,SJJ)
  <this.theArray[0..this.topOfStack-1] elements != null {0.0001-}, this.theArray[0..this.topOfStack-1] elements != null {0.0001-}> (UInt,SJJ)
  <this.theArray[0..this.topOfStack] elements != null {0.0001+}, this.theArray[0..this.topOfStack] elements != null {0.0001+}> (UInt,SJJ)
  <orig(this.theArray[post(this.topOfStack)..]) elements == null {0+}, orig(this.theArray[post(this.topOfStack)..]) elements == null {0+}> (UInt,SJJ)
  <this.theArray[this.topOfStack+1..] elements == null {0-}, this.theArray[this.topOfStack+1..] elements == null {0-}> (UInt,SJJ)
  <orig(this.theArray[post(this.topOfStack)..]) elements are equal {0-}, orig(this.theArray[post(this.topOfStack)..]) elements are equal {0-}> (UInt,SJJ)
  <this.theArray[this.topOfStack+1..] elements are equal {0-}, this.theArray[this.topOfStack+1..] elements are equal {0-}> (UInt,SJJ)
  <null, orig(this.theArray[0..post(this.topOfStack)]) contains no duplicates {0.0203-}> (UInt,MU)
  <null, this.theArray[0..orig(this.topOfStack)-1] contains no duplicates {0.0523-}> (UInt,MU)
  <null, this.theArray[0..this.topOfStack-1] contains no duplicates {0.0343-}> (UInt,MU)
  <null, this.theArray[0..this.topOfStack] contains no duplicates {0.0203-}> (UInt,MU)
  <this.theArray.class == "[Ljava.lang.Object;" {0+}, this.theArray.class == "[Ljava.lang.Object;" {0+}> (UInt,SJJ)
<DataStructures.StackAr.push(Ljava/lang/Object;)V:::EXIT96>
  <orig(this.theArray[post(this.topOfStack)]) in orig(this.theArray[post(this.topOfStack)..]) {0-}, orig(this.theArray[post(this.topOfStack)]) in orig(this.theArray[post(this.topOfStack)..]) {0-}> (Bin,SJJ)
  <x in this.theArray[0..this.topOfStack] {0-}, x in this.theArray[0..this.topOfStack] {0-}> (Bin,SJJ)
  <x in this.theArray[] {0-}, x in this.theArray[] {0-}> (Bin,SJJ)
  <x in this.theArray[this.topOfStack..] {0-}, x in this.theArray[this.topOfStack..] {0-}> (Bin,SJJ)
  <orig(this.theArray[post(this.topOfStack)..]) elements == orig(this.theArray[post(this.topOfStack)]) {0+}, orig(this.theArray[post(this.topOfStack)..]) elements == orig(this.theArray[post(this.topOfStack)]) {0+}> (Bin,SJJ)
  <this.theArray[this.topOfStack+1..] elements == orig(this.theArray[post(this.topOfStack)]) {0+}, this.theArray[this.topOfStack+1..] elements == orig(this.theArray[post(this.topOfStack)]) {0+}> (Bin,SJJ)
  <orig(this.theArray[post(this.topOfStack)]) == orig(this.theArray[post(this.topOfStack)]) {0-}, orig(this.theArray[post(this.topOfStack)]) == orig(this.theArray[post(this.topOfStack)]) {0-}> (Bin,SJJ)
  <orig(this.topOfStack) == orig(this.topOfStack) {0-}, orig(this.topOfStack) == orig(this.topOfStack) {0-}> (Bin,SJJ)
  <size(this.theArray[]) == size(this.theArray[]) {0-}, size(this.theArray[]) == size(this.theArray[]) {0-}> (Bin,SJJ)
  <size(this.theArray[])-1 == size(this.theArray[])-1 {0-}, size(this.theArray[])-1 == size(this.theArray[])-1 {0-}> (Bin,SJJ)
  <this.theArray == this.theArray {0-}, this.theArray == this.theArray {0-}> (Bin,SJJ)
  <this.topOfStack == this.topOfStack {0-}, this.topOfStack == this.topOfStack {0-}> (Bin,SJJ)
  <x == x {0-}, x == x {0-}> (Bin,SJJ)
  <orig(this.topOfStack) >= orig(this.topOfStack) {0.587-}, orig(this.topOfStack) >= orig(this.topOfStack) {0.6557-}> (Bin,SUU)
  <size(this.theArray[]) >= size(this.theArray[]) {0.587-}, size(this.theArray[]) >= size(this.theArray[]) {0.6557-}> (Bin,SUU)
  <size(this.theArray[]) >= size(this.theArray[])-1 {0.1468-}, size(this.theArray[]) >= size(this.theArray[])-1 {0.041-}> (Bin,SUU)
  <size(this.theArray[])-1 >= size(this.theArray[])-1 {0.587-}, size(this.theArray[])-1 >= size(this.theArray[])-1 {0.6557-}> (Bin,SUU)
  <this.topOfStack >= orig(this.topOfStack) {0.0183-}, this.topOfStack >= orig(this.topOfStack) {0.041-}> (Bin,SUU)
  <this.topOfStack >= this.topOfStack {0.587-}, this.topOfStack >= this.topOfStack {0.6557-}> (Bin,SUU)
  <size(this.theArray[]) > size(this.theArray[])-1 {0.1468-}, size(this.theArray[]) > size(this.theArray[])-1 {0.041-}> (Bin,SUU)
  <this.topOfStack > orig(this.topOfStack) {0.0183-}, this.topOfStack > orig(this.topOfStack) {0.041-}> (Bin,SUU)
  <orig(this.topOfStack) <= orig(this.topOfStack) {0.587-}, orig(this.topOfStack) <= orig(this.topOfStack) {0.6557-}> (Bin,SUU)
  <orig(this.topOfStack) <= size(this.theArray[]) {0.0023-}, orig(this.topOfStack) <= size(this.theArray[]) {0.0026-}> (Bin,SJJ)
  <orig(this.topOfStack) <= size(this.theArray[])-1 {0.0023-}, orig(this.topOfStack) <= size(this.theArray[])-1 {0.0026-}> (Bin,SJJ)
  <size(this.theArray[]) <= size(this.theArray[]) {0.587-}, size(this.theArray[]) <= size(this.theArray[]) {0.6557-}> (Bin,SUU)
  <size(this.theArray[])-1 <= size(this.theArray[])-1 {0.587-}, size(this.theArray[])-1 <= size(this.theArray[])-1 {0.6557-}> (Bin,SUU)
  <this.topOfStack <= size(this.theArray[]) {0.0023-}, this.topOfStack <= size(this.theArray[]) {0.0026-}> (Bin,SJJ)
  <this.topOfStack <= size(this.theArray[])-1 {0.0023+}, this.topOfStack <= size(this.theArray[])-1 {0.0026+}> (Bin,SJJ)
  <this.topOfStack <= this.topOfStack {0.587-}, this.topOfStack <= this.topOfStack {0.6557-}> (Bin,SUU)
  <orig(this.topOfStack) < size(this.theArray[]) {0.0023-}, orig(this.topOfStack) < size(this.theArray[]) {0.0026-}> (Bin,SJJ)
  <orig(this.topOfStack) < size(this.theArray[])-1 {0.0023+}, orig(this.topOfStack) < size(this.theArray[])-1 {0.0026+}> (Bin,SJJ)
  <this.topOfStack < size(this.theArray[]) {0.0023-}, this.topOfStack < size(this.theArray[]) {0.0026-}> (Bin,SJJ)
  <orig(this.topOfStack) != size(this.theArray[]) {0.0023-}, orig(this.topOfStack) != size(this.theArray[]) {0.0026-}> (Bin,SJJ)
  <orig(this.topOfStack) != size(this.theArray[])-1 {0.0023-}, orig(this.topOfStack) != size(this.theArray[])-1 {0.0026-}> (Bin,SJJ)
  <size(this.theArray[]) != size(this.theArray[])-1 {0.0734-}, size(this.theArray[]) != size(this.theArray[])-1 {0.041-}> (Bin,SUU)
  <this.topOfStack != orig(this.topOfStack) {0.0183-}, this.topOfStack != orig(this.topOfStack) {0.041-}> (Bin,SUU)
  <this.topOfStack != size(this.theArray[]) {0.0023-}, this.topOfStack != size(this.theArray[]) {0.0026-}> (Bin,SJJ)
  <orig(this.topOfStack) == orig(this.topOfStack) {0-}, orig(this.topOfStack) == orig(this.topOfStack) {0-}> (Bin,SJJ)
  <size(this.theArray[]) == size(this.theArray[]) {0-}, size(this.theArray[]) == size(this.theArray[]) {0-}> (Bin,SJJ)
  <size(this.theArray[])-1 == size(this.theArray[]) - 1 {0-}, size(this.theArray[])-1 == size(this.theArray[]) - 1 {0-}> (Bin,SJJ)
  <size(this.theArray[])-1 == size(this.theArray[])-1 {0-}, size(this.theArray[])-1 == size(this.theArray[])-1 {0-}> (Bin,SJJ)
  <orig(this.topOfStack) == this.topOfStack - 1 {0+}, orig(this.topOfStack) == this.topOfStack - 1 {0+}> (Bin,SJJ)
  <this.topOfStack == this.topOfStack {0-}, this.topOfStack == this.topOfStack {0-}> (Bin,SJJ)
  <orig(this.theArray[0..post(this.topOfStack)]) == orig(this.theArray[0..post(this.topOfStack)]) (elementwise) {0-}, orig(this.theArray[0..post(this.topOfStack)]) == orig(this.theArray[0..post(this.topOfStack)]) (elementwise) {0-}> (Bin,SJJ)
  <orig(this.theArray[]) == orig(this.theArray[]) (elementwise) {0-}, orig(this.theArray[]) == orig(this.theArray[]) (elementwise) {0-}> (Bin,SJJ)
  <orig(this.theArray[post(this.topOfStack)..]) == orig(this.theArray[post(this.topOfStack)..]) (elementwise) {0-}, orig(this.theArray[post(this.topOfStack)..]) == orig(this.theArray[post(this.topOfStack)..]) (elementwise) {0-}> (Bin,SJJ)
  <this.theArray[0..this.topOfStack-1] == this.theArray[0..this.topOfStack-1] (elementwise) {0-}, this.theArray[0..this.topOfStack-1] == this.theArray[0..this.topOfStack-1] (elementwise) {0-}> (Bin,SJJ)
  <this.theArray[0..this.topOfStack] == this.theArray[0..this.topOfStack] (elementwise) {0-}, this.theArray[0..this.topOfStack] == this.theArray[0..this.topOfStack] (elementwise) {0-}> (Bin,SJJ)
  <this.theArray[] == this.theArray[] (elementwise) {0-}, this.theArray[] == this.theArray[] (elementwise) {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack+1..] == this.theArray[this.topOfStack+1..] (elementwise) {0-}, this.theArray[this.topOfStack+1..] == this.theArray[this.topOfStack+1..] (elementwise) {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack..] == this.theArray[this.topOfStack..] (elementwise) {0-}, this.theArray[this.topOfStack..] == this.theArray[this.topOfStack..] (elementwise) {0-}> (Bin,SJJ)
  <orig(this.theArray[0..post(this.topOfStack)]) == orig(this.theArray[0..post(this.topOfStack)]) {0-}, orig(this.theArray[0..post(this.topOfStack)]) == orig(this.theArray[0..post(this.topOfStack)]) {0-}> (Bin,SJJ)
  <orig(this.theArray[]) == orig(this.theArray[]) {0-}, orig(this.theArray[]) == orig(this.theArray[]) {0-}> (Bin,SJJ)
  <Too few samples for linear relation: 0 * Prestate[Slice{Poststate[Field{topOfStack}[this]],}[Elements[Field{theArray}[this]]]] == 0 * Prestate[Slice{Poststate[Field{topOfStack}[this]],}[Elements[Field{theArray}[this]]]] + 0 {1-}, Too few samples for linear relation: 0 * Prestate[Slice{Poststate[Field{topOfStack}[this]],}[Elements[Field{theArray}[this]]]] == 0 * Prestate[Slice{Poststate[Field{topOfStack}[this]],}[Elements[Field{theArray}[this]]]] + 0 {1-}> (Bin,SUU)
  <this.theArray[0..this.topOfStack-1] == this.theArray[0..this.topOfStack-1] {0-}, this.theArray[0..this.topOfStack-1] == this.theArray[0..this.topOfStack-1] {0-}> (Bin,SJJ)
  <this.theArray[0..this.topOfStack] == this.theArray[0..this.topOfStack] {0-}, this.theArray[0..this.topOfStack] == this.theArray[0..this.topOfStack] {0-}> (Bin,SJJ)
  <this.theArray[] == this.theArray[] {0-}, this.theArray[] == this.theArray[] {0-}> (Bin,SJJ)
  <Too few samples for linear relation: 0 * Slice{Add{+1}[Field{topOfStack}[this]],}[Elements[Field{theArray}[this]]] == 0 * Slice{Add{+1}[Field{topOfStack}[this]],}[Elements[Field{theArray}[this]]] + 0 {1-}, Too few samples for linear relation: 0 * Slice{Add{+1}[Field{topOfStack}[this]],}[Elements[Field{theArray}[this]]] == 0 * Slice{Add{+1}[Field{topOfStack}[this]],}[Elements[Field{theArray}[this]]] + 0 {1-}> (Bin,SUU)
  <this.theArray[this.topOfStack..] == this.theArray[this.topOfStack..] {0-}, this.theArray[this.topOfStack..] == this.theArray[this.topOfStack..] {0-}> (Bin,SJJ)
  <orig(this.theArray[post(this.topOfStack)..]) is the reverse of orig(this.theArray[post(this.topOfStack)..]) {0-}, orig(this.theArray[post(this.topOfStack)..]) is the reverse of orig(this.theArray[post(this.topOfStack)..]) {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack+1..] is the reverse of this.theArray[this.topOfStack+1..] {0-}, this.theArray[this.topOfStack+1..] is the reverse of this.theArray[this.topOfStack+1..] {0-}> (Bin,SJJ)
  <orig(this.theArray[0..post(this.topOfStack)]) == orig(this.theArray[0..post(this.topOfStack)]) {0-}, orig(this.theArray[0..post(this.topOfStack)]) == orig(this.theArray[0..post(this.topOfStack)]) {0-}> (Bin,SJJ)
  <orig(this.theArray[]) == orig(this.theArray[]) {0-}, orig(this.theArray[]) == orig(this.theArray[]) {0-}> (Bin,SJJ)
  <orig(this.theArray[post(this.topOfStack)..]) == orig(this.theArray[post(this.topOfStack)..]) {0-}, orig(this.theArray[post(this.topOfStack)..]) == orig(this.theArray[post(this.topOfStack)..]) {0-}> (Bin,SJJ)
  <this.theArray[0..this.topOfStack-1] == this.theArray[0..this.topOfStack-1] {0-}, this.theArray[0..this.topOfStack-1] == this.theArray[0..this.topOfStack-1] {0-}> (Bin,SJJ)
  <this.theArray[0..this.topOfStack] == this.theArray[0..this.topOfStack] {0-}, this.theArray[0..this.topOfStack] == this.theArray[0..this.topOfStack] {0-}> (Bin,SJJ)
  <this.theArray[] == this.theArray[] {0-}, this.theArray[] == this.theArray[] {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack+1..] == this.theArray[this.topOfStack+1..] {0-}, this.theArray[this.topOfStack+1..] == this.theArray[this.topOfStack+1..] {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack..] == this.theArray[this.topOfStack..] {0-}, this.theArray[this.topOfStack..] == this.theArray[this.topOfStack..] {0-}> (Bin,SJJ)
  <orig(this.theArray[]) is a {sub,super}sequence of orig(this.theArray[]) {1-}, orig(this.theArray[]) is a {sub,super}sequence of orig(this.theArray[]) {1-}> (Bin,SUU)
  <orig(this.theArray[post(this.topOfStack)..]) is a subsequence of orig(this.theArray[]) {0-}, orig(this.theArray[post(this.topOfStack)..]) is a subsequence of orig(this.theArray[]) {0-}> (Bin,SJJ)
  <this.theArray[0..this.topOfStack-1] is a subsequence of orig(this.theArray[]) {0-}, this.theArray[0..this.topOfStack-1] is a subsequence of orig(this.theArray[]) {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack+1..] is a subsequence of orig(this.theArray[]) {0-}, this.theArray[this.topOfStack+1..] is a subsequence of orig(this.theArray[]) {0-}> (Bin,SJJ)
  <orig(this.theArray[post(this.topOfStack)..]) is a {sub,super}sequence of orig(this.theArray[post(this.topOfStack)..]) {1-}, orig(this.theArray[post(this.topOfStack)..]) is a {sub,super}sequence of orig(this.theArray[post(this.topOfStack)..]) {1-}> (Bin,SUU)
  <this.theArray[0..this.topOfStack-1] is a subsequence of orig(this.theArray[0..post(this.topOfStack)]) {0-}, this.theArray[0..this.topOfStack-1] is a subsequence of orig(this.theArray[0..post(this.topOfStack)]) {0-}> (Bin,SJJ)
  <this.theArray[0..this.topOfStack-1] is a {sub,super}sequence of this.theArray[0..this.topOfStack-1] {1-}, this.theArray[0..this.topOfStack-1] is a {sub,super}sequence of this.theArray[0..this.topOfStack-1] {1-}> (Bin,SUU)
  <this.theArray[0..this.topOfStack-1] is a subsequence of this.theArray[0..this.topOfStack] {0-}, this.theArray[0..this.topOfStack-1] is a subsequence of this.theArray[0..this.topOfStack] {0-}> (Bin,SJJ)
  <this.theArray[0..this.topOfStack-1] is a subsequence of this.theArray[] {0-}, this.theArray[0..this.topOfStack-1] is a subsequence of this.theArray[] {0-}> (Bin,SJJ)
  <this.theArray[] is a {sub,super}sequence of this.theArray[] {1-}, this.theArray[] is a {sub,super}sequence of this.theArray[] {1-}> (Bin,SUU)
  <this.theArray[this.topOfStack+1..] is a subsequence of this.theArray[] {0-}, this.theArray[this.topOfStack+1..] is a subsequence of this.theArray[] {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack..] is a subsequence of this.theArray[] {0-}, this.theArray[this.topOfStack..] is a subsequence of this.theArray[] {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack+1..] is a subsequence of orig(this.theArray[post(this.topOfStack)..]) {0-}, this.theArray[this.topOfStack+1..] is a subsequence of orig(this.theArray[post(this.topOfStack)..]) {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack+1..] is a {sub,super}sequence of this.theArray[this.topOfStack+1..] {1-}, this.theArray[this.topOfStack+1..] is a {sub,super}sequence of this.theArray[this.topOfStack+1..] {1-}> (Bin,SUU)
  <this.theArray[this.topOfStack+1..] is a subsequence of this.theArray[this.topOfStack..] {0-}, this.theArray[this.topOfStack+1..] is a subsequence of this.theArray[this.topOfStack..] {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack..] is a {sub,super}sequence of this.theArray[this.topOfStack..] {1-}, this.theArray[this.topOfStack..] is a {sub,super}sequence of this.theArray[this.topOfStack..] {1-}> (Bin,SUU)
  <this.theArray.class == this.theArray.class {0-}, this.theArray.class == this.theArray.class {0-}> (Bin,SJJ)
  <x.class == x.class {0-}, x.class == x.class {0-}> (Bin,SJJ)
  <orig(this.topOfStack) == java.lang.Math.max(orig(this.topOfStack), orig(this.topOfStack)) {3-}, orig(this.topOfStack) == java.lang.Math.max(orig(this.topOfStack), orig(this.topOfStack)) {3-}> (Ter,SUU)
  <orig(this.topOfStack) == java.lang.Math.max(orig(this.topOfStack), orig(this.topOfStack)) {3-}, orig(this.topOfStack) == java.lang.Math.max(orig(this.topOfStack), orig(this.topOfStack)) {3-}> (Ter,SUU)
  <orig(this.topOfStack) == java.lang.Math.max(orig(this.topOfStack), orig(this.topOfStack)) {3-}, orig(this.topOfStack) == java.lang.Math.max(orig(this.topOfStack), orig(this.topOfStack)) {3-}> (Ter,SUU)
  <orig(this.topOfStack) == java.lang.Math.min(orig(this.topOfStack), orig(this.topOfStack)) {3-}, orig(this.topOfStack) == java.lang.Math.min(orig(this.topOfStack), orig(this.topOfStack)) {3-}> (Ter,SUU)
  <orig(this.topOfStack) == java.lang.Math.min(orig(this.topOfStack), orig(this.topOfStack)) {3-}, orig(this.topOfStack) == java.lang.Math.min(orig(this.topOfStack), orig(this.topOfStack)) {3-}> (Ter,SUU)
  <orig(this.topOfStack) == java.lang.Math.min(orig(this.topOfStack), orig(this.topOfStack)) {3-}, orig(this.topOfStack) == java.lang.Math.min(orig(this.topOfStack), orig(this.topOfStack)) {3-}> (Ter,SUU)
  <orig(this.topOfStack) == orig(this.topOfStack) & orig(this.topOfStack) {3-}, orig(this.topOfStack) == orig(this.topOfStack) & orig(this.topOfStack) {3-}> (Ter,SUU)
  <orig(this.topOfStack) == orig(this.topOfStack) & orig(this.topOfStack) {3-}, orig(this.topOfStack) == orig(this.topOfStack) & orig(this.topOfStack) {3-}> (Ter,SUU)
  <orig(this.topOfStack) == orig(this.topOfStack) & orig(this.topOfStack) {3-}, orig(this.topOfStack) == orig(this.topOfStack) & orig(this.topOfStack) {3-}> (Ter,SUU)
  <orig(this.topOfStack) == orig(this.topOfStack) | orig(this.topOfStack) {3-}, orig(this.topOfStack) == orig(this.topOfStack) | orig(this.topOfStack) {3-}> (Ter,SUU)
  <orig(this.topOfStack) == orig(this.topOfStack) | orig(this.topOfStack) {3-}, orig(this.topOfStack) == orig(this.topOfStack) | orig(this.topOfStack) {3-}> (Ter,SUU)
  <orig(this.topOfStack) == orig(this.topOfStack) | orig(this.topOfStack) {3-}, orig(this.topOfStack) == orig(this.topOfStack) | orig(this.topOfStack) {3-}> (Ter,SUU)
  <orig(this.topOfStack) == org.plumelib.util.MathPlume.gcd(orig(this.topOfStack), orig(this.topOfStack)) {3-}, orig(this.topOfStack) == org.plumelib.util.MathPlume.gcd(orig(this.topOfStack), orig(this.topOfStack)) {3-}> (Ter,SUU)
  <orig(this.topOfStack) == org.plumelib.util.MathPlume.gcd(orig(this.topOfStack), orig(this.topOfStack)) {3-}, orig(this.topOfStack) == org.plumelib.util.MathPlume.gcd(orig(this.topOfStack), orig(this.topOfStack)) {3-}> (Ter,SUU)
  <orig(this.topOfStack) == org.plumelib.util.MathPlume.gcd(orig(this.topOfStack), orig(this.topOfStack)) {3-}, orig(this.topOfStack) == org.plumelib.util.MathPlume.gcd(orig(this.topOfStack), orig(this.topOfStack)) {3-}> (Ter,SUU)
  <orig(this.topOfStack) == java.lang.Math.min(orig(this.topOfStack), size(this.theArray[])) {0.25-}, orig(this.topOfStack) == java.lang.Math.min(orig(this.topOfStack), size(this.theArray[])) {0-}> (Ter,SUJ)
  <orig(this.topOfStack) == java.lang.Math.min(orig(this.topOfStack), size(this.theArray[])) {0.25-}, orig(this.topOfStack) == java.lang.Math.min(orig(this.topOfStack), size(this.theArray[])) {0-}> (Ter,SUJ)
  <null, orig(this.topOfStack) == orig(this.topOfStack) % size(this.theArray[]) {0-}> (Ter,MJ)
  <null, orig(this.topOfStack) == orig(this.topOfStack) % size(this.theArray[]) {0-}> (Ter,MJ)
  <orig(this.topOfStack) == java.lang.Math.min(size(this.theArray[])-1, orig(this.topOfStack)) {0.5-}, orig(this.topOfStack) == java.lang.Math.min(orig(this.topOfStack), size(this.theArray[])-1) {0-}> (Ter,SUJ)
  <null, orig(this.topOfStack) == java.lang.Math.min(orig(this.topOfStack), size(this.theArray[])-1) {0-}> (Ter,MJ)
  <size(this.theArray[]) == java.lang.Math.max(orig(this.topOfStack), size(this.theArray[])) {0-}, size(this.theArray[]) == java.lang.Math.max(orig(this.topOfStack), size(this.theArray[])) {0-}> (Ter,SJJ)
  <size(this.theArray[]) == java.lang.Math.max(orig(this.topOfStack), size(this.theArray[])) {0-}, size(this.theArray[]) == java.lang.Math.max(orig(this.topOfStack), size(this.theArray[])) {0-}> (Ter,SJJ)
  <size(this.theArray[])-1 == java.lang.Math.max(size(this.theArray[])-1, orig(this.topOfStack)) {0-}, size(this.theArray[])-1 == java.lang.Math.max(orig(this.topOfStack), size(this.theArray[])-1) {0-}> (Ter,SJJ)
  <null, size(this.theArray[])-1 == java.lang.Math.max(orig(this.topOfStack), size(this.theArray[])-1) {0-}> (Ter,MJ)
  <size(this.theArray[]) == java.lang.Math.max(size(this.theArray[]), size(this.theArray[])) {3-}, size(this.theArray[]) == java.lang.Math.max(size(this.theArray[]), size(this.theArray[])) {3-}> (Ter,SUU)
  <size(this.theArray[]) == java.lang.Math.max(size(this.theArray[]), size(this.theArray[])) {3-}, size(this.theArray[]) == java.lang.Math.max(size(this.theArray[]), size(this.theArray[])) {3-}> (Ter,SUU)
  <size(this.theArray[]) == java.lang.Math.max(size(this.theArray[]), size(this.theArray[])) {3-}, size(this.theArray[]) == java.lang.Math.max(size(this.theArray[]), size(this.theArray[])) {3-}> (Ter,SUU)
  <size(this.theArray[]) == java.lang.Math.min(size(this.theArray[]), size(this.theArray[])) {3-}, size(this.theArray[]) == java.lang.Math.min(size(this.theArray[]), size(this.theArray[])) {3-}> (Ter,SUU)
  <size(this.theArray[]) == java.lang.Math.min(size(this.theArray[]), size(this.theArray[])) {3-}, size(this.theArray[]) == java.lang.Math.min(size(this.theArray[]), size(this.theArray[])) {3-}> (Ter,SUU)
  <size(this.theArray[]) == java.lang.Math.min(size(this.theArray[]), size(this.theArray[])) {3-}, size(this.theArray[]) == java.lang.Math.min(size(this.theArray[]), size(this.theArray[])) {3-}> (Ter,SUU)
  <size(this.theArray[]) == size(this.theArray[]) & size(this.theArray[]) {3-}, size(this.theArray[]) == size(this.theArray[]) & size(this.theArray[]) {3-}> (Ter,SUU)
  <size(this.theArray[]) == size(this.theArray[]) & size(this.theArray[]) {3-}, size(this.theArray[]) == size(this.theArray[]) & size(this.theArray[]) {3-}> (Ter,SUU)
  <size(this.theArray[]) == size(this.theArray[]) & size(this.theArray[]) {3-}, size(this.theArray[]) == size(this.theArray[]) & size(this.theArray[]) {3-}> (Ter,SUU)
  <size(this.theArray[]) == size(this.theArray[]) | size(this.theArray[]) {3-}, size(this.theArray[]) == size(this.theArray[]) | size(this.theArray[]) {3-}> (Ter,SUU)
  <size(this.theArray[]) == size(this.theArray[]) | size(this.theArray[]) {3-}, size(this.theArray[]) == size(this.theArray[]) | size(this.theArray[]) {3-}> (Ter,SUU)
  <size(this.theArray[]) == size(this.theArray[]) | size(this.theArray[]) {3-}, size(this.theArray[]) == size(this.theArray[]) | size(this.theArray[]) {3-}> (Ter,SUU)
  <size(this.theArray[]) == org.plumelib.util.MathPlume.gcd(size(this.theArray[]), size(this.theArray[])) {3-}, size(this.theArray[]) == org.plumelib.util.MathPlume.gcd(size(this.theArray[]), size(this.theArray[])) {3-}> (Ter,SUU)
  <size(this.theArray[]) == org.plumelib.util.MathPlume.gcd(size(this.theArray[]), size(this.theArray[])) {3-}, size(this.theArray[]) == org.plumelib.util.MathPlume.gcd(size(this.theArray[]), size(this.theArray[])) {3-}> (Ter,SUU)
  <size(this.theArray[]) == org.plumelib.util.MathPlume.gcd(size(this.theArray[]), size(this.theArray[])) {3-}, size(this.theArray[]) == org.plumelib.util.MathPlume.gcd(size(this.theArray[]), size(this.theArray[])) {3-}> (Ter,SUU)
  <size(this.theArray[]) == java.lang.Math.max(size(this.theArray[])-1, size(this.theArray[])) {0.5-}, size(this.theArray[]) == java.lang.Math.max(size(this.theArray[]), size(this.theArray[])-1) {0-}> (Ter,SUJ)
  <null, size(this.theArray[]) == java.lang.Math.max(size(this.theArray[]), size(this.theArray[])-1) {0-}> (Ter,MJ)
  <size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[])-1, size(this.theArray[])) {0.25-}, size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[]), size(this.theArray[])-1) {0-}> (Ter,SUJ)
  <size(this.theArray[])-1 == size(this.theArray[])-1 % size(this.theArray[]) {0.25-}, size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[]), size(this.theArray[])-1) {0-}> (Ter,DUJ)
  <null, size(this.theArray[])-1 == size(this.theArray[])-1 % size(this.theArray[]) {0-}> (Ter,MJ)
  <null, size(this.theArray[])-1 == size(this.theArray[])-1 % size(this.theArray[]) {0-}> (Ter,MJ)
  <size(this.theArray[])-1 == java.lang.Math.max(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == java.lang.Math.max(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == java.lang.Math.max(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == java.lang.Math.max(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == java.lang.Math.max(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == java.lang.Math.max(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == size(this.theArray[])-1 & size(this.theArray[])-1 {3-}, size(this.theArray[])-1 == size(this.theArray[])-1 & size(this.theArray[])-1 {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == size(this.theArray[])-1 & size(this.theArray[])-1 {3-}, size(this.theArray[])-1 == size(this.theArray[])-1 & size(this.theArray[])-1 {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == size(this.theArray[])-1 & size(this.theArray[])-1 {3-}, size(this.theArray[])-1 == size(this.theArray[])-1 & size(this.theArray[])-1 {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == size(this.theArray[])-1 | size(this.theArray[])-1 {3-}, size(this.theArray[])-1 == size(this.theArray[])-1 | size(this.theArray[])-1 {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == size(this.theArray[])-1 | size(this.theArray[])-1 {3-}, size(this.theArray[])-1 == size(this.theArray[])-1 | size(this.theArray[])-1 {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == size(this.theArray[])-1 | size(this.theArray[])-1 {3-}, size(this.theArray[])-1 == size(this.theArray[])-1 | size(this.theArray[])-1 {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == org.plumelib.util.MathPlume.gcd(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == org.plumelib.util.MathPlume.gcd(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == org.plumelib.util.MathPlume.gcd(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == org.plumelib.util.MathPlume.gcd(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == org.plumelib.util.MathPlume.gcd(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == org.plumelib.util.MathPlume.gcd(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <orig(this.topOfStack) == java.lang.Math.min(this.topOfStack, orig(this.topOfStack)) {0-}, orig(this.topOfStack) == java.lang.Math.min(this.topOfStack, orig(this.topOfStack)) {0-}> (Ter,SJJ)
  <orig(this.topOfStack) == java.lang.Math.min(this.topOfStack, orig(this.topOfStack)) {0-}, orig(this.topOfStack) == java.lang.Math.min(this.topOfStack, orig(this.topOfStack)) {0-}> (Ter,SJJ)
  <size(this.theArray[]) == java.lang.Math.max(this.topOfStack, size(this.theArray[])) {0-}, size(this.theArray[]) == java.lang.Math.max(this.topOfStack, size(this.theArray[])) {0-}> (Ter,SJJ)
  <size(this.theArray[]) == java.lang.Math.max(this.topOfStack, size(this.theArray[])) {0-}, size(this.theArray[]) == java.lang.Math.max(this.topOfStack, size(this.theArray[])) {0-}> (Ter,SJJ)
  <size(this.theArray[])-1 == java.lang.Math.max(this.topOfStack, size(this.theArray[])-1) {0-}, size(this.theArray[])-1 == java.lang.Math.max(this.topOfStack, size(this.theArray[])-1) {0-}> (Ter,SJJ)
  <size(this.theArray[])-1 == java.lang.Math.max(this.topOfStack, size(this.theArray[])-1) {0-}, size(this.theArray[])-1 == java.lang.Math.max(this.topOfStack, size(this.theArray[])-1) {0-}> (Ter,SJJ)
  <this.topOfStack == java.lang.Math.max(this.topOfStack, orig(this.topOfStack)) {0-}, this.topOfStack == java.lang.Math.max(this.topOfStack, orig(this.topOfStack)) {0-}> (Ter,SJJ)
  <this.topOfStack == java.lang.Math.max(this.topOfStack, orig(this.topOfStack)) {0-}, this.topOfStack == java.lang.Math.max(this.topOfStack, orig(this.topOfStack)) {0-}> (Ter,SJJ)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])) {0.25-}, this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])) {0-}> (Ter,SUJ)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])) {0.25-}, this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])) {0-}> (Ter,SUJ)
  <this.topOfStack == this.topOfStack % size(this.theArray[]) {0.25-}, this.topOfStack == this.topOfStack % size(this.theArray[]) {0-}> (Ter,SUJ)
  <this.topOfStack == this.topOfStack % size(this.theArray[]) {0.25-}, this.topOfStack == this.topOfStack % size(this.theArray[]) {0-}> (Ter,SUJ)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])-1) {0.5-}, this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])-1) {0-}> (Ter,SUJ)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])-1) {0.5-}, this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])-1) {0-}> (Ter,SUJ)
  <this.topOfStack == java.lang.Math.max(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == java.lang.Math.max(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <this.topOfStack == java.lang.Math.max(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == java.lang.Math.max(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <this.topOfStack == java.lang.Math.max(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == java.lang.Math.max(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == java.lang.Math.min(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == java.lang.Math.min(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == java.lang.Math.min(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <this.topOfStack == this.topOfStack & this.topOfStack {3-}, this.topOfStack == this.topOfStack & this.topOfStack {3-}> (Ter,SUU)
  <this.topOfStack == this.topOfStack & this.topOfStack {3-}, this.topOfStack == this.topOfStack & this.topOfStack {3-}> (Ter,SUU)
  <this.topOfStack == this.topOfStack & this.topOfStack {3-}, this.topOfStack == this.topOfStack & this.topOfStack {3-}> (Ter,SUU)
  <this.topOfStack == this.topOfStack | this.topOfStack {3-}, this.topOfStack == this.topOfStack | this.topOfStack {3-}> (Ter,SUU)
  <this.topOfStack == this.topOfStack | this.topOfStack {3-}, this.topOfStack == this.topOfStack | this.topOfStack {3-}> (Ter,SUU)
  <this.topOfStack == this.topOfStack | this.topOfStack {3-}, this.topOfStack == this.topOfStack | this.topOfStack {3-}> (Ter,SUU)
  <this.topOfStack == org.plumelib.util.MathPlume.gcd(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == org.plumelib.util.MathPlume.gcd(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <this.topOfStack == org.plumelib.util.MathPlume.gcd(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == org.plumelib.util.MathPlume.gcd(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <this.topOfStack == org.plumelib.util.MathPlume.gcd(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == org.plumelib.util.MathPlume.gcd(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <Too few samples for linear relation: 0 * SizeOf[Elements[Field{theArray}[this]]] == 0 * SizeOf[Elements[Field{theArray}[this]]] + 0 * SizeOf[Elements[Field{theArray}[this]]] + 0 {0.25-}, null> (Ter,UM)
  <Too few samples for linear relation: 0 * Add{-1}[SizeOf[Elements[Field{theArray}[this]]]] == 0 * SizeOf[Elements[Field{theArray}[this]]] + 0 * SizeOf[Elements[Field{theArray}[this]]] + 0 {0.25-}, null> (Ter,UM)
  <Too few samples for linear relation: 0 * Add{-1}[SizeOf[Elements[Field{theArray}[this]]]] == 0 * SizeOf[Elements[Field{theArray}[this]]] + 0 * Add{-1}[SizeOf[Elements[Field{theArray}[this]]]] + 0 {0.25-}, null> (Ter,UM)
  <Too few samples for linear relation: 0 * Add{-1}[SizeOf[Elements[Field{theArray}[this]]]] == 0 * Add{-1}[SizeOf[Elements[Field{theArray}[this]]]] + 0 * Add{-1}[SizeOf[Elements[Field{theArray}[this]]]] + 0 {0.25-}, null> (Ter,UM)
  <orig(this.topOfStack) >= -1 {0+}, orig(this.topOfStack) >= -1 {0+}> (U!Int,SJJ)
  <size(this.theArray[]) >= 1 {0.9592-}, size(this.theArray[]) >= 2 {0.9643-}> (UInt,DUU)
  <size(this.theArray[])-1 >= 0 {0.697-}, size(this.theArray[])-1 >= 1 {0.9643-}> (UInt,DUU)
  <this.topOfStack >= 0 {0+}, this.topOfStack >= 0 {0+}> (UInt,SJJ)
  <size(this.theArray[]) != 0 {1-}, size(this.theArray[]) != 0 {1-}> (UInt,SUU)
  <null, size(this.theArray[])-1 != 0 {1-}> (UInt,MU)
  <this.theArray != null {0.0001+}, this.theArray != null {0.0001+}> (UInt,SJJ)
  <x != null {0.0001+}, x != null {0.0001+}> (UInt,SJJ)
  <orig(this.theArray[post(this.topOfStack)]) == null {0-}, orig(this.theArray[post(this.topOfStack)]) == null {0-}> (UInt,SJJ)
  <orig(this.topOfStack) <= 18 {1-}, orig(this.topOfStack) <= 13 {1-}> (U!Int,DUU)
  <size(this.theArray[]) <= 20 {0-}, size(this.theArray[]) <= 15 {0-}> (U!Int,DJJ)
  <size(this.theArray[])-1 <= 19 {0-}, size(this.theArray[])-1 <= 14 {0-}> (U!Int,DJJ)
  <this.topOfStack <= 19 {1-}, this.topOfStack <= 14 {1-}> (U!Int,DUU)
  <this.theArray[0..this.topOfStack-1] elements != null {0.0001-}, this.theArray[0..this.topOfStack-1] elements != null {0.0001-}> (UInt,SJJ)
  <this.theArray[0..this.topOfStack] elements != null {0.0001+}, this.theArray[0..this.topOfStack] elements != null {0.0001+}> (UInt,SJJ)
  <orig(this.theArray[post(this.topOfStack)..]) elements == null {0+}, orig(this.theArray[post(this.topOfStack)..]) elements == null {0+}> (UInt,SJJ)
  <this.theArray[this.topOfStack+1..] elements == null {0-}, this.theArray[this.topOfStack+1..] elements == null {0-}> (UInt,SJJ)
  <orig(this.theArray[post(this.topOfStack)..]) elements are equal {0-}, orig(this.theArray[post(this.topOfStack)..]) elements are equal {0-}> (UInt,SJJ)
  <this.theArray[this.topOfStack+1..] elements are equal {0-}, this.theArray[this.topOfStack+1..] elements are equal {0-}> (UInt,SJJ)
  <null, orig(this.theArray[0..post(this.topOfStack)]) contains no duplicates {0.0203-}> (UInt,MU)
  <null, this.theArray[0..this.topOfStack-1] contains no duplicates {0.0343-}> (UInt,MU)
  <null, this.theArray[0..this.topOfStack] contains no duplicates {0.0203-}> (UInt,MU)
  <this.theArray.class == "[Ljava.lang.Object;" {0+}, this.theArray.class == "[Ljava.lang.Object;" {0+}> (UInt,SJJ)
<DataStructures.StackAr.top()Ljava/lang/Object;:::ENTER>
  <size(this.theArray[]) == size(this.theArray[]) {0-}, size(this.theArray[]) == size(this.theArray[]) {0-}> (Bin,SJJ)
  <size(this.theArray[])-1 == size(this.theArray[])-1 {0-}, size(this.theArray[])-1 == size(this.theArray[])-1 {0-}> (Bin,SJJ)
  <this.theArray == this.theArray {0-}, this.theArray == this.theArray {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack-1] == this.theArray[this.topOfStack-1] {0-}, this.theArray[this.topOfStack-1] == this.theArray[this.topOfStack-1] {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack] == this.theArray[this.topOfStack] {0-}, this.theArray[this.topOfStack] == this.theArray[this.topOfStack] {0-}> (Bin,SJJ)
  <this.topOfStack == this.topOfStack {0-}, this.topOfStack == this.topOfStack {0-}> (Bin,SJJ)
  <size(this.theArray[]) >= size(this.theArray[]) {0.2329-}, size(this.theArray[]) >= size(this.theArray[]) {0.6557-}> (Bin,SUU)
  <size(this.theArray[]) >= size(this.theArray[])-1 {0.0291-}, size(this.theArray[]) >= size(this.theArray[])-1 {0.041-}> (Bin,SUU)
  <size(this.theArray[])-1 >= size(this.theArray[])-1 {0.2329-}, size(this.theArray[])-1 >= size(this.theArray[])-1 {0.6557-}> (Bin,SUU)
  <this.topOfStack >= this.topOfStack {0.2329-}, this.topOfStack >= this.topOfStack {0.6557-}> (Bin,SUU)
  <size(this.theArray[]) > size(this.theArray[])-1 {0.0291-}, size(this.theArray[]) > size(this.theArray[])-1 {0.041-}> (Bin,SUU)
  <size(this.theArray[]) <= size(this.theArray[]) {0.2329-}, size(this.theArray[]) <= size(this.theArray[]) {0.6557-}> (Bin,SUU)
  <size(this.theArray[])-1 <= size(this.theArray[])-1 {0.2329-}, size(this.theArray[])-1 <= size(this.theArray[])-1 {0.6557-}> (Bin,SUU)
  <this.topOfStack <= size(this.theArray[]) {0.0009-}, this.topOfStack <= size(this.theArray[]) {0.0026-}> (Bin,SJJ)
  <this.topOfStack <= size(this.theArray[])-1 {0.0009+}, this.topOfStack <= size(this.theArray[])-1 {0.0026+}> (Bin,SJJ)
  <this.topOfStack <= this.topOfStack {0.2329-}, this.topOfStack <= this.topOfStack {0.6557-}> (Bin,SUU)
  <this.topOfStack < size(this.theArray[]) {0.0009-}, this.topOfStack < size(this.theArray[]) {0.0026-}> (Bin,SJJ)
  <size(this.theArray[]) != size(this.theArray[])-1 {0.0291-}, size(this.theArray[]) != size(this.theArray[])-1 {0.041-}> (Bin,SUU)
  <this.topOfStack != size(this.theArray[]) {0.0009-}, this.topOfStack != size(this.theArray[]) {0.0026-}> (Bin,SJJ)
  <this.topOfStack == this.topOfStack {0-}, this.topOfStack == this.topOfStack {0-}> (Bin,SJJ)
  <this.theArray[0..this.topOfStack-1] == this.theArray[0..this.topOfStack-1] (elementwise) {0-}, this.theArray[0..this.topOfStack-1] == this.theArray[0..this.topOfStack-1] (elementwise) {0-}> (Bin,SJJ)
  <this.theArray[0..this.topOfStack] == this.theArray[0..this.topOfStack] (elementwise) {0-}, this.theArray[0..this.topOfStack] == this.theArray[0..this.topOfStack] (elementwise) {0-}> (Bin,SJJ)
  <this.theArray[] == this.theArray[] (elementwise) {0-}, this.theArray[] == this.theArray[] (elementwise) {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack+1..] == this.theArray[this.topOfStack+1..] (elementwise) {0-}, this.theArray[this.topOfStack+1..] == this.theArray[this.topOfStack+1..] (elementwise) {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack..] == this.theArray[this.topOfStack..] (elementwise) {0-}, this.theArray[this.topOfStack..] == this.theArray[this.topOfStack..] (elementwise) {0-}> (Bin,SJJ)
  <this.theArray[0..this.topOfStack-1] == this.theArray[0..this.topOfStack-1] {0-}, this.theArray[0..this.topOfStack-1] == this.theArray[0..this.topOfStack-1] {0-}> (Bin,SJJ)
  <this.theArray[0..this.topOfStack] == this.theArray[0..this.topOfStack] {0-}, this.theArray[0..this.topOfStack] == this.theArray[0..this.topOfStack] {0-}> (Bin,SJJ)
  <this.theArray[] == this.theArray[] {0-}, this.theArray[] == this.theArray[] {0-}> (Bin,SJJ)
  <Too few samples for linear relation: 0 * Slice{Add{+1}[Field{topOfStack}[this]],}[Elements[Field{theArray}[this]]] == 0 * Slice{Add{+1}[Field{topOfStack}[this]],}[Elements[Field{theArray}[this]]] + 0 {1-}, Too few samples for linear relation: 0 * Slice{Add{+1}[Field{topOfStack}[this]],}[Elements[Field{theArray}[this]]] == 0 * Slice{Add{+1}[Field{topOfStack}[this]],}[Elements[Field{theArray}[this]]] + 0 {1-}> (Bin,SUU)
  <this.theArray[this.topOfStack..] == this.theArray[this.topOfStack..] {0-}, this.theArray[this.topOfStack..] == this.theArray[this.topOfStack..] {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack+1..] is the reverse of this.theArray[this.topOfStack+1..] {0-}, this.theArray[this.topOfStack+1..] is the reverse of this.theArray[this.topOfStack+1..] {0-}> (Bin,SJJ)
  <this.theArray[0..this.topOfStack-1] == this.theArray[0..this.topOfStack-1] {0-}, this.theArray[0..this.topOfStack-1] == this.theArray[0..this.topOfStack-1] {0-}> (Bin,SJJ)
  <this.theArray[0..this.topOfStack] == this.theArray[0..this.topOfStack] {0-}, this.theArray[0..this.topOfStack] == this.theArray[0..this.topOfStack] {0-}> (Bin,SJJ)
  <this.theArray[] == this.theArray[] {0-}, this.theArray[] == this.theArray[] {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack+1..] == this.theArray[this.topOfStack+1..] {0-}, this.theArray[this.topOfStack+1..] == this.theArray[this.topOfStack+1..] {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack..] == this.theArray[this.topOfStack..] {0-}, this.theArray[this.topOfStack..] == this.theArray[this.topOfStack..] {0-}> (Bin,SJJ)
  <this.theArray[] is a {sub,super}sequence of this.theArray[] {1-}, this.theArray[] is a {sub,super}sequence of this.theArray[] {1-}> (Bin,SUU)
  <this.theArray.class == this.theArray.class {0-}, this.theArray.class == this.theArray.class {0-}> (Bin,SJJ)
  <size(this.theArray[]) == java.lang.Math.max(size(this.theArray[]), size(this.theArray[])) {3-}, size(this.theArray[]) == java.lang.Math.max(size(this.theArray[]), size(this.theArray[])) {3-}> (Ter,SUU)
  <size(this.theArray[]) == java.lang.Math.max(size(this.theArray[]), size(this.theArray[])) {3-}, size(this.theArray[]) == java.lang.Math.max(size(this.theArray[]), size(this.theArray[])) {3-}> (Ter,SUU)
  <size(this.theArray[]) == java.lang.Math.max(size(this.theArray[]), size(this.theArray[])) {3-}, size(this.theArray[]) == java.lang.Math.max(size(this.theArray[]), size(this.theArray[])) {3-}> (Ter,SUU)
  <size(this.theArray[]) == java.lang.Math.min(size(this.theArray[]), size(this.theArray[])) {3-}, size(this.theArray[]) == java.lang.Math.min(size(this.theArray[]), size(this.theArray[])) {3-}> (Ter,SUU)
  <size(this.theArray[]) == java.lang.Math.min(size(this.theArray[]), size(this.theArray[])) {3-}, size(this.theArray[]) == java.lang.Math.min(size(this.theArray[]), size(this.theArray[])) {3-}> (Ter,SUU)
  <size(this.theArray[]) == java.lang.Math.min(size(this.theArray[]), size(this.theArray[])) {3-}, size(this.theArray[]) == java.lang.Math.min(size(this.theArray[]), size(this.theArray[])) {3-}> (Ter,SUU)
  <size(this.theArray[]) == size(this.theArray[]) & size(this.theArray[]) {3-}, size(this.theArray[]) == size(this.theArray[]) & size(this.theArray[]) {3-}> (Ter,SUU)
  <size(this.theArray[]) == size(this.theArray[]) & size(this.theArray[]) {3-}, size(this.theArray[]) == size(this.theArray[]) & size(this.theArray[]) {3-}> (Ter,SUU)
  <size(this.theArray[]) == size(this.theArray[]) & size(this.theArray[]) {3-}, size(this.theArray[]) == size(this.theArray[]) & size(this.theArray[]) {3-}> (Ter,SUU)
  <size(this.theArray[]) == size(this.theArray[]) | size(this.theArray[]) {3-}, size(this.theArray[]) == size(this.theArray[]) | size(this.theArray[]) {3-}> (Ter,SUU)
  <size(this.theArray[]) == size(this.theArray[]) | size(this.theArray[]) {3-}, size(this.theArray[]) == size(this.theArray[]) | size(this.theArray[]) {3-}> (Ter,SUU)
  <size(this.theArray[]) == size(this.theArray[]) | size(this.theArray[]) {3-}, size(this.theArray[]) == size(this.theArray[]) | size(this.theArray[]) {3-}> (Ter,SUU)
  <size(this.theArray[]) == org.plumelib.util.MathPlume.gcd(size(this.theArray[]), size(this.theArray[])) {3-}, size(this.theArray[]) == org.plumelib.util.MathPlume.gcd(size(this.theArray[]), size(this.theArray[])) {3-}> (Ter,SUU)
  <size(this.theArray[]) == org.plumelib.util.MathPlume.gcd(size(this.theArray[]), size(this.theArray[])) {3-}, size(this.theArray[]) == org.plumelib.util.MathPlume.gcd(size(this.theArray[]), size(this.theArray[])) {3-}> (Ter,SUU)
  <size(this.theArray[]) == org.plumelib.util.MathPlume.gcd(size(this.theArray[]), size(this.theArray[])) {3-}, size(this.theArray[]) == org.plumelib.util.MathPlume.gcd(size(this.theArray[]), size(this.theArray[])) {3-}> (Ter,SUU)
  <size(this.theArray[]) == java.lang.Math.max(size(this.theArray[])-1, size(this.theArray[])) {0.5-}, size(this.theArray[]) == java.lang.Math.max(size(this.theArray[])-1, size(this.theArray[])) {0-}> (Ter,SUJ)
  <size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[])-1, size(this.theArray[])) {0.25-}, size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[])-1, size(this.theArray[])) {0-}> (Ter,SUJ)
  <null, size(this.theArray[])-1 == size(this.theArray[])-1 % size(this.theArray[]) {0-}> (Ter,MJ)
  <size(this.theArray[])-1 == java.lang.Math.max(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == java.lang.Math.max(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == java.lang.Math.max(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == java.lang.Math.max(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == java.lang.Math.max(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == java.lang.Math.max(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == size(this.theArray[])-1 & size(this.theArray[])-1 {3-}, size(this.theArray[])-1 == size(this.theArray[])-1 & size(this.theArray[])-1 {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == size(this.theArray[])-1 & size(this.theArray[])-1 {3-}, size(this.theArray[])-1 == size(this.theArray[])-1 & size(this.theArray[])-1 {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == size(this.theArray[])-1 & size(this.theArray[])-1 {3-}, size(this.theArray[])-1 == size(this.theArray[])-1 & size(this.theArray[])-1 {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == size(this.theArray[])-1 | size(this.theArray[])-1 {3-}, size(this.theArray[])-1 == size(this.theArray[])-1 | size(this.theArray[])-1 {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == size(this.theArray[])-1 | size(this.theArray[])-1 {3-}, size(this.theArray[])-1 == size(this.theArray[])-1 | size(this.theArray[])-1 {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == size(this.theArray[])-1 | size(this.theArray[])-1 {3-}, size(this.theArray[])-1 == size(this.theArray[])-1 | size(this.theArray[])-1 {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == org.plumelib.util.MathPlume.gcd(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == org.plumelib.util.MathPlume.gcd(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == org.plumelib.util.MathPlume.gcd(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == org.plumelib.util.MathPlume.gcd(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == org.plumelib.util.MathPlume.gcd(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == org.plumelib.util.MathPlume.gcd(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[]) == java.lang.Math.max(this.topOfStack, size(this.theArray[])) {0-}, size(this.theArray[]) == java.lang.Math.max(this.topOfStack, size(this.theArray[])) {0-}> (Ter,SJJ)
  <size(this.theArray[]) == java.lang.Math.max(this.topOfStack, size(this.theArray[])) {0-}, size(this.theArray[]) == java.lang.Math.max(this.topOfStack, size(this.theArray[])) {0-}> (Ter,SJJ)
  <size(this.theArray[])-1 == java.lang.Math.max(this.topOfStack, size(this.theArray[])-1) {0-}, size(this.theArray[])-1 == java.lang.Math.max(this.topOfStack, size(this.theArray[])-1) {0-}> (Ter,SJJ)
  <size(this.theArray[])-1 == java.lang.Math.max(this.topOfStack, size(this.theArray[])-1) {0-}, size(this.theArray[])-1 == java.lang.Math.max(this.topOfStack, size(this.theArray[])-1) {0-}> (Ter,SJJ)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])) {0.25-}, this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])) {0-}> (Ter,SUJ)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])) {0.25-}, this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])) {0-}> (Ter,SUJ)
  <null, this.topOfStack == this.topOfStack % size(this.theArray[]) {0-}> (Ter,MJ)
  <null, this.topOfStack == this.topOfStack % size(this.theArray[]) {0-}> (Ter,MJ)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])-1) {0.5-}, this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])-1) {0-}> (Ter,SUJ)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])-1) {0.5-}, this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])-1) {0-}> (Ter,SUJ)
  <this.topOfStack == java.lang.Math.max(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == java.lang.Math.max(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <this.topOfStack == java.lang.Math.max(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == java.lang.Math.max(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <this.topOfStack == java.lang.Math.max(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == java.lang.Math.max(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == java.lang.Math.min(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == java.lang.Math.min(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == java.lang.Math.min(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <this.topOfStack == this.topOfStack & this.topOfStack {3-}, this.topOfStack == this.topOfStack & this.topOfStack {3-}> (Ter,SUU)
  <this.topOfStack == this.topOfStack & this.topOfStack {3-}, this.topOfStack == this.topOfStack & this.topOfStack {3-}> (Ter,SUU)
  <this.topOfStack == this.topOfStack & this.topOfStack {3-}, this.topOfStack == this.topOfStack & this.topOfStack {3-}> (Ter,SUU)
  <this.topOfStack == this.topOfStack | this.topOfStack {3-}, this.topOfStack == this.topOfStack | this.topOfStack {3-}> (Ter,SUU)
  <this.topOfStack == this.topOfStack | this.topOfStack {3-}, this.topOfStack == this.topOfStack | this.topOfStack {3-}> (Ter,SUU)
  <this.topOfStack == this.topOfStack | this.topOfStack {3-}, this.topOfStack == this.topOfStack | this.topOfStack {3-}> (Ter,SUU)
  <this.topOfStack == org.plumelib.util.MathPlume.gcd(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == org.plumelib.util.MathPlume.gcd(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <this.topOfStack == org.plumelib.util.MathPlume.gcd(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == org.plumelib.util.MathPlume.gcd(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <this.topOfStack == org.plumelib.util.MathPlume.gcd(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == org.plumelib.util.MathPlume.gcd(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == 2 * size(this.theArray[]) - size(this.theArray[]) - 1 {0-}, size(this.theArray[])-1 == 2 * size(this.theArray[]) - size(this.theArray[]) - 1 {0-}> (Ter,SJJ)
  <size(this.theArray[])-1 == 0.5 * size(this.theArray[]) + 0.5 * size(this.theArray[])-1 - 0.5 {0-}, size(this.theArray[])-1 == 0.5 * size(this.theArray[]) + 0.5 * size(this.theArray[])-1 - 0.5 {0-}> (Ter,SJJ)
  <size(this.theArray[]) >= 0 {0-}, size(this.theArray[]) >= 2 {0.9643-}> (UInt,DJU)
  <this.topOfStack >= -1 {0+}, this.topOfStack >= 0 {0+}> (UInt,DJJ)
  <null, size(this.theArray[]) != 0 {1-}> (UInt,MU)
  <null, size(this.theArray[])-1 != 0 {1-}> (UInt,MU)
  <this.theArray != null {0.0001+}, this.theArray != null {0.0001+}> (UInt,SJJ)
  <this.theArray[this.topOfStack-1] != null {0.0001-}, this.theArray[this.topOfStack-1] != null {0.0001-}> (UInt,SJJ)
  <this.theArray[this.topOfStack] != null {0.0001-}, this.theArray[this.topOfStack] != null {0.0001-}> (UInt,SJJ)
  <size(this.theArray[]) <= 20 {0-}, size(this.theArray[]) <= 15 {0-}> (U!Int,DJJ)
  <this.topOfStack <= 19 {0.8644-}, this.topOfStack <= 14 {1-}> (U!Int,DUU)
  <this.theArray[0..this.topOfStack-1] elements != null {0.0001-}, this.theArray[0..this.topOfStack-1] elements != null {0.0001-}> (UInt,SJJ)
  <this.theArray[0..this.topOfStack] elements != null {0.0001+}, this.theArray[0..this.topOfStack] elements != null {0.0001+}> (UInt,SJJ)
  <this.theArray[this.topOfStack+1..] elements == null {0+}, this.theArray[this.topOfStack+1..] elements == null {0+}> (UInt,SJJ)
  <this.theArray[this.topOfStack+1..] elements are equal {0-}, this.theArray[this.topOfStack+1..] elements are equal {0-}> (UInt,SJJ)
  <null, this.theArray[0..this.topOfStack-1] contains no duplicates {0.0343-}> (UInt,MU)
  <null, this.theArray[0..this.topOfStack] contains no duplicates {0.0203-}> (UInt,MU)
  <this.theArray.class == "[Ljava.lang.Object;" {0+}, this.theArray.class == "[Ljava.lang.Object;" {0+}> (UInt,SJJ)
<DataStructures.StackAr.top()Ljava/lang/Object;:::EXIT>
  <null, return in this.theArray[0..this.topOfStack] {0-}> (Bin,MJ)
  <null, return in this.theArray[] {0-}> (Bin,MJ)
  <return in this.theArray[this.topOfStack..] {0+}, return in this.theArray[this.topOfStack..] {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack-1] in this.theArray[] {0-}, this.theArray[this.topOfStack-1] in this.theArray[] {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack] in this.theArray[] {0-}, null> (Bin,JM)
  <this.theArray[this.topOfStack-1] in this.theArray[0..this.topOfStack-1] {0-}, this.theArray[this.topOfStack-1] in this.theArray[0..this.topOfStack-1] {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack-1] in this.theArray[0..this.topOfStack] {0-}, this.theArray[this.topOfStack-1] in this.theArray[0..this.topOfStack] {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack] in this.theArray[0..this.topOfStack] {0-}, null> (Bin,JM)
  <this.theArray[this.topOfStack] in this.theArray[this.topOfStack..] {0-}, null> (Bin,JM)
  <null, return == orig(this.theArray[post(this.topOfStack)]) {0+}> (Bin,MJ)
  <null, return == orig(this.theArray[this.topOfStack]) {0+}> (Bin,MJ)
  <return == return {0-}, return == return {0-}> (Bin,SJJ)
  <null, return == this.theArray[orig(this.topOfStack)] {0+}> (Bin,MJ)
  <return == this.theArray[this.topOfStack] {0+}, return == this.theArray[this.topOfStack] {0+}> (Bin,SJJ)
  <size(this.theArray[]) == orig(size(this.theArray[])) {0+}, size(this.theArray[]) == orig(size(this.theArray[])) {0+}> (Bin,SJJ)
  <size(this.theArray[]) == size(this.theArray[]) {0-}, size(this.theArray[]) == size(this.theArray[]) {0-}> (Bin,SJJ)
  <size(this.theArray[])-1 == orig(size(this.theArray[]))-1 {0-}, size(this.theArray[])-1 == orig(size(this.theArray[]))-1 {0-}> (Bin,SJJ)
  <size(this.theArray[])-1 == size(this.theArray[])-1 {0-}, size(this.theArray[])-1 == size(this.theArray[])-1 {0-}> (Bin,SJJ)
  <this.theArray == orig(this.theArray) {0+}, this.theArray == orig(this.theArray) {0+}> (Bin,SJJ)
  <this.theArray == this.theArray {0-}, this.theArray == this.theArray {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack-1] == orig(this.theArray[post(this.topOfStack-1)]) {0+}, this.theArray[this.topOfStack-1] == orig(this.theArray[post(this.topOfStack-1)]) {0+}> (Bin,SJJ)
  <this.theArray[this.topOfStack-1] == orig(this.theArray[this.topOfStack-1]) {0+}, this.theArray[this.topOfStack-1] == orig(this.theArray[this.topOfStack-1]) {0+}> (Bin,SJJ)
  <this.theArray[this.topOfStack-1] == this.theArray[orig(this.topOfStack)-1] {0+}, this.theArray[this.topOfStack-1] == this.theArray[orig(this.topOfStack)-1] {0+}> (Bin,SJJ)
  <this.theArray[this.topOfStack-1] == this.theArray[this.topOfStack-1] {0-}, this.theArray[this.topOfStack-1] == this.theArray[this.topOfStack-1] {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack] == orig(this.theArray[post(this.topOfStack)]) {0+}, null> (Bin,JM)
  <this.theArray[this.topOfStack] == orig(this.theArray[this.topOfStack]) {0+}, null> (Bin,JM)
  <this.theArray[this.topOfStack] == this.theArray[orig(this.topOfStack)] {0+}, null> (Bin,JM)
  <this.theArray[this.topOfStack] == this.theArray[this.topOfStack] {0-}, null> (Bin,JM)
  <this.topOfStack == orig(this.topOfStack) {0+}, this.topOfStack == orig(this.topOfStack) {0+}> (Bin,SJJ)
  <this.topOfStack == this.topOfStack {0-}, this.topOfStack == this.topOfStack {0-}> (Bin,SJJ)
  <size(this.theArray[]) >= size(this.theArray[]) {0.2329-}, size(this.theArray[]) >= size(this.theArray[]) {0.6557-}> (Bin,SUU)
  <size(this.theArray[]) >= size(this.theArray[])-1 {0.0291-}, size(this.theArray[]) >= size(this.theArray[])-1 {0.041-}> (Bin,SUU)
  <size(this.theArray[])-1 >= size(this.theArray[])-1 {0.2329-}, size(this.theArray[])-1 >= size(this.theArray[])-1 {0.6557-}> (Bin,SUU)
  <this.topOfStack >= this.topOfStack {0.2329-}, this.topOfStack >= this.topOfStack {0.6557-}> (Bin,SUU)
  <size(this.theArray[]) > size(this.theArray[])-1 {0.0291-}, size(this.theArray[]) > size(this.theArray[])-1 {0.041-}> (Bin,SUU)
  <size(this.theArray[]) <= size(this.theArray[]) {0.2329-}, size(this.theArray[]) <= size(this.theArray[]) {0.6557-}> (Bin,SUU)
  <size(this.theArray[])-1 <= size(this.theArray[])-1 {0.2329-}, size(this.theArray[])-1 <= size(this.theArray[])-1 {0.6557-}> (Bin,SUU)
  <this.topOfStack <= size(this.theArray[]) {0.0009-}, this.topOfStack <= size(this.theArray[]) {0.0026-}> (Bin,SJJ)
  <this.topOfStack <= size(this.theArray[])-1 {0.0009+}, this.topOfStack <= size(this.theArray[])-1 {0.0026+}> (Bin,SJJ)
  <this.topOfStack <= this.topOfStack {0.2329-}, this.topOfStack <= this.topOfStack {0.6557-}> (Bin,SUU)
  <this.topOfStack < size(this.theArray[]) {0.0009-}, this.topOfStack < size(this.theArray[]) {0.0026-}> (Bin,SJJ)
  <size(this.theArray[]) != size(this.theArray[])-1 {0.0291-}, size(this.theArray[]) != size(this.theArray[])-1 {0.041-}> (Bin,SUU)
  <this.topOfStack != size(this.theArray[]) {0.0009-}, this.topOfStack != size(this.theArray[]) {0.0026-}> (Bin,SJJ)
  <size(this.theArray[]) == size(this.theArray[]) {0-}, size(this.theArray[]) == size(this.theArray[]) {0-}> (Bin,SJJ)
  <size(this.theArray[])-1 == size(this.theArray[]) - 1 {0-}, size(this.theArray[])-1 == size(this.theArray[]) - 1 {0-}> (Bin,SJJ)
  <size(this.theArray[])-1 == size(this.theArray[])-1 {0-}, size(this.theArray[])-1 == size(this.theArray[])-1 {0-}> (Bin,SJJ)
  <this.topOfStack == this.topOfStack {0-}, this.topOfStack == this.topOfStack {0-}> (Bin,SJJ)
  <this.theArray[0..this.topOfStack-1] == this.theArray[0..this.topOfStack-1] (elementwise) {0-}, this.theArray[0..this.topOfStack-1] == this.theArray[0..this.topOfStack-1] (elementwise) {0-}> (Bin,SJJ)
  <this.theArray[0..this.topOfStack] == this.theArray[0..this.topOfStack] (elementwise) {0-}, this.theArray[0..this.topOfStack] == this.theArray[0..this.topOfStack] (elementwise) {0-}> (Bin,SJJ)
  <this.theArray[] == this.theArray[] (elementwise) {0-}, this.theArray[] == this.theArray[] (elementwise) {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack+1..] == this.theArray[this.topOfStack+1..] (elementwise) {0-}, this.theArray[this.topOfStack+1..] == this.theArray[this.topOfStack+1..] (elementwise) {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack..] == this.theArray[this.topOfStack..] (elementwise) {0-}, this.theArray[this.topOfStack..] == this.theArray[this.topOfStack..] (elementwise) {0-}> (Bin,SJJ)
  <this.theArray[0..this.topOfStack-1] == this.theArray[0..this.topOfStack-1] {0-}, this.theArray[0..this.topOfStack-1] == this.theArray[0..this.topOfStack-1] {0-}> (Bin,SJJ)
  <this.theArray[0..this.topOfStack] == this.theArray[0..this.topOfStack] {0-}, this.theArray[0..this.topOfStack] == this.theArray[0..this.topOfStack] {0-}> (Bin,SJJ)
  <this.theArray[] == this.theArray[] {0-}, this.theArray[] == this.theArray[] {0-}> (Bin,SJJ)
  <Too few samples for linear relation: 0 * Slice{Add{+1}[Field{topOfStack}[this]],}[Elements[Field{theArray}[this]]] == 0 * Slice{Add{+1}[Field{topOfStack}[this]],}[Elements[Field{theArray}[this]]] + 0 {1-}, Too few samples for linear relation: 0 * Slice{Add{+1}[Field{topOfStack}[this]],}[Elements[Field{theArray}[this]]] == 0 * Slice{Add{+1}[Field{topOfStack}[this]],}[Elements[Field{theArray}[this]]] + 0 {1-}> (Bin,SUU)
  <this.theArray[this.topOfStack..] == this.theArray[this.topOfStack..] {0-}, this.theArray[this.topOfStack..] == this.theArray[this.topOfStack..] {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack+1..] is the reverse of this.theArray[this.topOfStack+1..] {0-}, this.theArray[this.topOfStack+1..] is the reverse of this.theArray[this.topOfStack+1..] {0-}> (Bin,SJJ)
  <this.theArray[0..this.topOfStack-1] == orig(this.theArray[0..post(this.topOfStack-1)]) {0-}, this.theArray[0..this.topOfStack-1] == orig(this.theArray[0..post(this.topOfStack-1)]) {0-}> (Bin,SJJ)
  <this.theArray[0..this.topOfStack-1] == orig(this.theArray[0..this.topOfStack-1]) {0-}, this.theArray[0..this.topOfStack-1] == orig(this.theArray[0..this.topOfStack-1]) {0-}> (Bin,SJJ)
  <this.theArray[0..this.topOfStack-1] == this.theArray[0..orig(this.topOfStack)-1] {0-}, this.theArray[0..this.topOfStack-1] == this.theArray[0..orig(this.topOfStack)-1] {0-}> (Bin,SJJ)
  <this.theArray[0..this.topOfStack-1] == this.theArray[0..this.topOfStack-1] {0-}, this.theArray[0..this.topOfStack-1] == this.theArray[0..this.topOfStack-1] {0-}> (Bin,SJJ)
  <this.theArray[0..this.topOfStack] == orig(this.theArray[0..post(this.topOfStack)]) {0-}, this.theArray[0..this.topOfStack] == orig(this.theArray[0..post(this.topOfStack)]) {0-}> (Bin,SJJ)
  <this.theArray[0..this.topOfStack] == orig(this.theArray[0..this.topOfStack]) {0-}, this.theArray[0..this.topOfStack] == orig(this.theArray[0..this.topOfStack]) {0-}> (Bin,SJJ)
  <this.theArray[0..this.topOfStack] == this.theArray[0..orig(this.topOfStack)] {0-}, this.theArray[0..this.topOfStack] == this.theArray[0..orig(this.topOfStack)] {0-}> (Bin,SJJ)
  <this.theArray[0..this.topOfStack] == this.theArray[0..this.topOfStack] {0-}, this.theArray[0..this.topOfStack] == this.theArray[0..this.topOfStack] {0-}> (Bin,SJJ)
  <this.theArray[] == orig(this.theArray[]) {0+}, this.theArray[] == orig(this.theArray[]) {0+}> (Bin,SJJ)
  <this.theArray[] == this.theArray[] {0-}, this.theArray[] == this.theArray[] {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack+1..] == orig(this.theArray[post(this.topOfStack+1)..]) {0-}, this.theArray[this.topOfStack+1..] == orig(this.theArray[post(this.topOfStack+1)..]) {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack+1..] == orig(this.theArray[this.topOfStack+1..]) {0-}, this.theArray[this.topOfStack+1..] == orig(this.theArray[this.topOfStack+1..]) {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack+1..] == this.theArray[orig(this.topOfStack)+1..] {0-}, this.theArray[this.topOfStack+1..] == this.theArray[orig(this.topOfStack)+1..] {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack+1..] == this.theArray[this.topOfStack+1..] {0-}, this.theArray[this.topOfStack+1..] == this.theArray[this.topOfStack+1..] {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack..] == orig(this.theArray[post(this.topOfStack)..]) {0-}, this.theArray[this.topOfStack..] == orig(this.theArray[post(this.topOfStack)..]) {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack..] == orig(this.theArray[this.topOfStack..]) {0-}, this.theArray[this.topOfStack..] == orig(this.theArray[this.topOfStack..]) {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack..] == this.theArray[orig(this.topOfStack)..] {0-}, this.theArray[this.topOfStack..] == this.theArray[orig(this.topOfStack)..] {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack..] == this.theArray[this.topOfStack..] {0-}, this.theArray[this.topOfStack..] == this.theArray[this.topOfStack..] {0-}> (Bin,SJJ)
  <this.theArray[0..this.topOfStack-1] is a {sub,super}sequence of this.theArray[0..this.topOfStack-1] {1-}, this.theArray[0..this.topOfStack-1] is a {sub,super}sequence of this.theArray[0..this.topOfStack-1] {1-}> (Bin,SUU)
  <this.theArray[0..this.topOfStack-1] is a subsequence of this.theArray[0..this.topOfStack] {0-}, this.theArray[0..this.topOfStack-1] is a subsequence of this.theArray[0..this.topOfStack] {0-}> (Bin,SJJ)
  <this.theArray[0..this.topOfStack] is a {sub,super}sequence of this.theArray[0..this.topOfStack] {1-}, this.theArray[0..this.topOfStack] is a {sub,super}sequence of this.theArray[0..this.topOfStack] {1-}> (Bin,SUU)
  <this.theArray[0..this.topOfStack-1] is a subsequence of this.theArray[] {0-}, this.theArray[0..this.topOfStack-1] is a subsequence of this.theArray[] {0-}> (Bin,SJJ)
  <this.theArray[0..this.topOfStack] is a subsequence of this.theArray[] {0-}, this.theArray[0..this.topOfStack] is a subsequence of this.theArray[] {0-}> (Bin,SJJ)
  <this.theArray[] is a {sub,super}sequence of this.theArray[] {1-}, this.theArray[] is a {sub,super}sequence of this.theArray[] {1-}> (Bin,SUU)
  <this.theArray[this.topOfStack+1..] is a subsequence of this.theArray[] {0-}, this.theArray[this.topOfStack+1..] is a subsequence of this.theArray[] {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack..] is a subsequence of this.theArray[] {0-}, this.theArray[this.topOfStack..] is a subsequence of this.theArray[] {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack+1..] is a {sub,super}sequence of this.theArray[this.topOfStack+1..] {1-}, this.theArray[this.topOfStack+1..] is a {sub,super}sequence of this.theArray[this.topOfStack+1..] {1-}> (Bin,SUU)
  <this.theArray[this.topOfStack+1..] is a subsequence of this.theArray[this.topOfStack..] {0-}, this.theArray[this.topOfStack+1..] is a subsequence of this.theArray[this.topOfStack..] {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack..] is a {sub,super}sequence of this.theArray[this.topOfStack..] {1-}, this.theArray[this.topOfStack..] is a {sub,super}sequence of this.theArray[this.topOfStack..] {1-}> (Bin,SUU)
  <null, return.class == return.class {0-}> (Bin,MJ)
  <this.theArray.class == orig(this.theArray.class) {0+}, this.theArray.class == orig(this.theArray.class) {0+}> (Bin,SJJ)
  <this.theArray.class == this.theArray.class {0-}, this.theArray.class == this.theArray.class {0-}> (Bin,SJJ)
  <size(this.theArray[]) == java.lang.Math.max(size(this.theArray[]), size(this.theArray[])) {3-}, size(this.theArray[]) == java.lang.Math.max(size(this.theArray[]), size(this.theArray[])) {3-}> (Ter,SUU)
  <size(this.theArray[]) == java.lang.Math.max(size(this.theArray[]), size(this.theArray[])) {3-}, size(this.theArray[]) == java.lang.Math.max(size(this.theArray[]), size(this.theArray[])) {3-}> (Ter,SUU)
  <size(this.theArray[]) == java.lang.Math.max(size(this.theArray[]), size(this.theArray[])) {3-}, size(this.theArray[]) == java.lang.Math.max(size(this.theArray[]), size(this.theArray[])) {3-}> (Ter,SUU)
  <size(this.theArray[]) == java.lang.Math.min(size(this.theArray[]), size(this.theArray[])) {3-}, size(this.theArray[]) == java.lang.Math.min(size(this.theArray[]), size(this.theArray[])) {3-}> (Ter,SUU)
  <size(this.theArray[]) == java.lang.Math.min(size(this.theArray[]), size(this.theArray[])) {3-}, size(this.theArray[]) == java.lang.Math.min(size(this.theArray[]), size(this.theArray[])) {3-}> (Ter,SUU)
  <size(this.theArray[]) == java.lang.Math.min(size(this.theArray[]), size(this.theArray[])) {3-}, size(this.theArray[]) == java.lang.Math.min(size(this.theArray[]), size(this.theArray[])) {3-}> (Ter,SUU)
  <size(this.theArray[]) == size(this.theArray[]) & size(this.theArray[]) {3-}, size(this.theArray[]) == size(this.theArray[]) & size(this.theArray[]) {3-}> (Ter,SUU)
  <size(this.theArray[]) == size(this.theArray[]) & size(this.theArray[]) {3-}, size(this.theArray[]) == size(this.theArray[]) & size(this.theArray[]) {3-}> (Ter,SUU)
  <size(this.theArray[]) == size(this.theArray[]) & size(this.theArray[]) {3-}, size(this.theArray[]) == size(this.theArray[]) & size(this.theArray[]) {3-}> (Ter,SUU)
  <size(this.theArray[]) == size(this.theArray[]) | size(this.theArray[]) {3-}, size(this.theArray[]) == size(this.theArray[]) | size(this.theArray[]) {3-}> (Ter,SUU)
  <size(this.theArray[]) == size(this.theArray[]) | size(this.theArray[]) {3-}, size(this.theArray[]) == size(this.theArray[]) | size(this.theArray[]) {3-}> (Ter,SUU)
  <size(this.theArray[]) == size(this.theArray[]) | size(this.theArray[]) {3-}, size(this.theArray[]) == size(this.theArray[]) | size(this.theArray[]) {3-}> (Ter,SUU)
  <size(this.theArray[]) == org.plumelib.util.MathPlume.gcd(size(this.theArray[]), size(this.theArray[])) {3-}, size(this.theArray[]) == org.plumelib.util.MathPlume.gcd(size(this.theArray[]), size(this.theArray[])) {3-}> (Ter,SUU)
  <size(this.theArray[]) == org.plumelib.util.MathPlume.gcd(size(this.theArray[]), size(this.theArray[])) {3-}, size(this.theArray[]) == org.plumelib.util.MathPlume.gcd(size(this.theArray[]), size(this.theArray[])) {3-}> (Ter,SUU)
  <size(this.theArray[]) == org.plumelib.util.MathPlume.gcd(size(this.theArray[]), size(this.theArray[])) {3-}, size(this.theArray[]) == org.plumelib.util.MathPlume.gcd(size(this.theArray[]), size(this.theArray[])) {3-}> (Ter,SUU)
  <size(this.theArray[]) == java.lang.Math.max(size(this.theArray[])-1, size(this.theArray[])) {0.5-}, size(this.theArray[]) == java.lang.Math.max(size(this.theArray[])-1, size(this.theArray[])) {0-}> (Ter,SUJ)
  <size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[])-1, size(this.theArray[])) {0.25-}, size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[])-1, size(this.theArray[])) {0-}> (Ter,SUJ)
  <null, size(this.theArray[])-1 == size(this.theArray[])-1 % size(this.theArray[]) {0-}> (Ter,MJ)
  <size(this.theArray[])-1 == java.lang.Math.max(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == java.lang.Math.max(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == java.lang.Math.max(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == java.lang.Math.max(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == java.lang.Math.max(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == java.lang.Math.max(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == size(this.theArray[])-1 & size(this.theArray[])-1 {3-}, size(this.theArray[])-1 == size(this.theArray[])-1 & size(this.theArray[])-1 {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == size(this.theArray[])-1 & size(this.theArray[])-1 {3-}, size(this.theArray[])-1 == size(this.theArray[])-1 & size(this.theArray[])-1 {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == size(this.theArray[])-1 & size(this.theArray[])-1 {3-}, size(this.theArray[])-1 == size(this.theArray[])-1 & size(this.theArray[])-1 {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == size(this.theArray[])-1 | size(this.theArray[])-1 {3-}, size(this.theArray[])-1 == size(this.theArray[])-1 | size(this.theArray[])-1 {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == size(this.theArray[])-1 | size(this.theArray[])-1 {3-}, size(this.theArray[])-1 == size(this.theArray[])-1 | size(this.theArray[])-1 {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == size(this.theArray[])-1 | size(this.theArray[])-1 {3-}, size(this.theArray[])-1 == size(this.theArray[])-1 | size(this.theArray[])-1 {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == org.plumelib.util.MathPlume.gcd(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == org.plumelib.util.MathPlume.gcd(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == org.plumelib.util.MathPlume.gcd(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == org.plumelib.util.MathPlume.gcd(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == org.plumelib.util.MathPlume.gcd(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == org.plumelib.util.MathPlume.gcd(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[]) == java.lang.Math.max(this.topOfStack, size(this.theArray[])) {0-}, size(this.theArray[]) == java.lang.Math.max(this.topOfStack, size(this.theArray[])) {0-}> (Ter,SJJ)
  <size(this.theArray[]) == java.lang.Math.max(this.topOfStack, size(this.theArray[])) {0-}, size(this.theArray[]) == java.lang.Math.max(this.topOfStack, size(this.theArray[])) {0-}> (Ter,SJJ)
  <size(this.theArray[])-1 == java.lang.Math.max(this.topOfStack, size(this.theArray[])-1) {0-}, size(this.theArray[])-1 == java.lang.Math.max(this.topOfStack, size(this.theArray[])-1) {0-}> (Ter,SJJ)
  <size(this.theArray[])-1 == java.lang.Math.max(this.topOfStack, size(this.theArray[])-1) {0-}, size(this.theArray[])-1 == java.lang.Math.max(this.topOfStack, size(this.theArray[])-1) {0-}> (Ter,SJJ)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])) {0.25-}, this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])) {0-}> (Ter,SUJ)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])) {0.25-}, this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])) {0-}> (Ter,SUJ)
  <null, this.topOfStack == this.topOfStack % size(this.theArray[]) {0-}> (Ter,MJ)
  <null, this.topOfStack == this.topOfStack % size(this.theArray[]) {0-}> (Ter,MJ)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])-1) {0.5-}, this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])-1) {0-}> (Ter,SUJ)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])-1) {0.5-}, this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])-1) {0-}> (Ter,SUJ)
  <this.topOfStack == java.lang.Math.max(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == java.lang.Math.max(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <this.topOfStack == java.lang.Math.max(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == java.lang.Math.max(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <this.topOfStack == java.lang.Math.max(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == java.lang.Math.max(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == java.lang.Math.min(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == java.lang.Math.min(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == java.lang.Math.min(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <this.topOfStack == this.topOfStack & this.topOfStack {3-}, this.topOfStack == this.topOfStack & this.topOfStack {3-}> (Ter,SUU)
  <this.topOfStack == this.topOfStack & this.topOfStack {3-}, this.topOfStack == this.topOfStack & this.topOfStack {3-}> (Ter,SUU)
  <this.topOfStack == this.topOfStack & this.topOfStack {3-}, this.topOfStack == this.topOfStack & this.topOfStack {3-}> (Ter,SUU)
  <this.topOfStack == this.topOfStack | this.topOfStack {3-}, this.topOfStack == this.topOfStack | this.topOfStack {3-}> (Ter,SUU)
  <this.topOfStack == this.topOfStack | this.topOfStack {3-}, this.topOfStack == this.topOfStack | this.topOfStack {3-}> (Ter,SUU)
  <this.topOfStack == this.topOfStack | this.topOfStack {3-}, this.topOfStack == this.topOfStack | this.topOfStack {3-}> (Ter,SUU)
  <this.topOfStack == org.plumelib.util.MathPlume.gcd(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == org.plumelib.util.MathPlume.gcd(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <this.topOfStack == org.plumelib.util.MathPlume.gcd(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == org.plumelib.util.MathPlume.gcd(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <this.topOfStack == org.plumelib.util.MathPlume.gcd(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == org.plumelib.util.MathPlume.gcd(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == 2 * size(this.theArray[]) - size(this.theArray[]) - 1 {0-}, size(this.theArray[])-1 == 2 * size(this.theArray[]) - size(this.theArray[]) - 1 {0-}> (Ter,SJJ)
  <size(this.theArray[])-1 == 0.5 * size(this.theArray[]) + 0.5 * size(this.theArray[])-1 - 0.5 {0-}, size(this.theArray[])-1 == 0.5 * size(this.theArray[]) + 0.5 * size(this.theArray[])-1 - 0.5 {0-}> (Ter,SJJ)
  <size(this.theArray[]) >= 0 {0-}, size(this.theArray[]) >= 2 {0.9643-}> (UInt,DJU)
  <size(this.theArray[])-1 >= -1 {0-}, size(this.theArray[])-1 >= 1 {0.9643-}> (UInt,DJU)
  <this.topOfStack >= -1 {0+}, this.topOfStack >= 0 {0+}> (UInt,DJJ)
  <null, return != null {0.0001+}> (UInt,MJ)
  <null, size(this.theArray[]) != 0 {1-}> (UInt,MU)
  <null, size(this.theArray[])-1 != 0 {1-}> (UInt,MU)
  <this.theArray != null {0.0001+}, this.theArray != null {0.0001+}> (UInt,SJJ)
  <this.theArray[this.topOfStack-1] != null {0.0001-}, this.theArray[this.topOfStack-1] != null {0.0001-}> (UInt,SJJ)
  <this.theArray[this.topOfStack] != null {0.0001-}, null> (UInt,JM)
  <size(this.theArray[]) <= 20 {0-}, size(this.theArray[]) <= 15 {0-}> (U!Int,DJJ)
  <size(this.theArray[])-1 <= 19 {0-}, size(this.theArray[])-1 <= 14 {0-}> (U!Int,DJJ)
  <this.topOfStack <= 19 {0.8644-}, this.topOfStack <= 14 {1-}> (U!Int,DUU)
  <this.theArray[0..this.topOfStack-1] elements != null {0.0001-}, this.theArray[0..this.topOfStack-1] elements != null {0.0001-}> (UInt,SJJ)
  <this.theArray[0..this.topOfStack] elements != null {0.0001+}, this.theArray[0..this.topOfStack] elements != null {0.0001+}> (UInt,SJJ)
  <this.theArray[this.topOfStack+1..] elements == null {0+}, this.theArray[this.topOfStack+1..] elements == null {0+}> (UInt,SJJ)
  <this.theArray[this.topOfStack+1..] elements are equal {0-}, this.theArray[this.topOfStack+1..] elements are equal {0-}> (UInt,SJJ)
  <null, this.theArray[0..this.topOfStack-1] contains no duplicates {0.0343-}> (UInt,MU)
  <null, this.theArray[0..this.topOfStack] contains no duplicates {0.0203-}> (UInt,MU)
  <this.theArray.class == "[Ljava.lang.Object;" {0+}, this.theArray.class == "[Ljava.lang.Object;" {0+}> (UInt,SJJ)
<DataStructures.StackAr.top()Ljava/lang/Object;:::EXIT71>
  <null, return in this.theArray[] {0-}> (Bin,MJ)
  <this.theArray[0..this.topOfStack] elements ?cmp? return {1-}, null> (Bin,UM)
  <this.theArray[] elements == return {0+}, this.theArray[] elements ?cmp? return {1-}> (Bin,DJU)
  <null, this.topOfStack == ~this.topOfStack {1-}> (Bin,MU)
  <return == return {0-}, return == return {1-}> (Bin,SJU)
  <size(this.theArray[]) == size(this.theArray[]) {0-}, null> (Bin,JM)
  <size(this.theArray[])-1 == size(this.theArray[])-1 {0-}, null> (Bin,JM)
  <this.theArray == this.theArray {0-}, null> (Bin,JM)
  <this.topOfStack == this.topOfStack {0-}, this.topOfStack == this.topOfStack {1-}> (Bin,SJU)
  <size(this.theArray[]) >= size(this.theArray[]) {0.7397-}, null> (Bin,UM)
  <size(this.theArray[]) >= size(this.theArray[])-1 {0.0925-}, null> (Bin,UM)
  <size(this.theArray[])-1 >= size(this.theArray[])-1 {0.7397-}, null> (Bin,UM)
  <this.topOfStack >= this.topOfStack {0.7397-}, this.topOfStack >= this.topOfStack {1-}> (Bin,SUU)
  <size(this.theArray[]) > size(this.theArray[])-1 {0.0925-}, null> (Bin,UM)
  <null, this.topOfStack > this.topOfStack {1-}> (Bin,MU)
  <size(this.theArray[]) <= size(this.theArray[]) {0.7397-}, null> (Bin,UM)
  <size(this.theArray[])-1 <= size(this.theArray[])-1 {0.7397-}, null> (Bin,UM)
  <this.topOfStack <= size(this.theArray[]) {0.0462-}, null> (Bin,UM)
  <this.topOfStack <= size(this.theArray[])-1 {0.0925-}, null> (Bin,UM)
  <this.topOfStack <= this.topOfStack {0.7397-}, null> (Bin,UM)
  <this.topOfStack < size(this.theArray[]) {0.0462-}, null> (Bin,UM)
  <null, this.topOfStack < this.topOfStack {1-}> (Bin,MU)
  <size(this.theArray[]) != size(this.theArray[])-1 {0.0925-}, null> (Bin,UM)
  <this.topOfStack != size(this.theArray[]) {0.0462-}, null> (Bin,UM)
  <null, this.topOfStack != this.topOfStack {1-}> (Bin,MU)
  <size(this.theArray[]) == size(this.theArray[]) {0-}, null> (Bin,JM)
  <size(this.theArray[])-1 == size(this.theArray[]) - 1 {0-}, null> (Bin,JM)
  <size(this.theArray[])-1 == size(this.theArray[])-1 {0-}, null> (Bin,JM)
  <Too few samples for linear relation: 0 * Field{topOfStack}[this] == 0 * Field{topOfStack}[this] + 0 {1-}, this.topOfStack ==  + 1 {0.3333-}> (Bin,SUU)
  <this.theArray[0..this.topOfStack] == ~this.theArray[0..this.topOfStack] {1-}, null> (Bin,UM)
  <this.theArray[0..this.topOfStack] == ~this.theArray[0..this.topOfStack] {1-}, null> (Bin,UM)
  <null, this.theArray[] == ~this.theArray[] {1-}> (Bin,MU)
  <this.theArray[0..this.topOfStack] ?cmp? this.theArray[0..this.topOfStack] (elementwise) {1-}, null> (Bin,UM)
  <this.theArray[] == this.theArray[] (elementwise) {0-}, this.theArray[] ?cmp? this.theArray[] (elementwise) {1-}> (Bin,DJU)
  <Too few samples for linear relation: 0 * Slice{,Field{topOfStack}[this]}[Elements[Field{theArray}[this]]] == 0 * Slice{,Field{topOfStack}[this]}[Elements[Field{theArray}[this]]] + 0 {1-}, null> (Bin,UM)
  <Too few samples for linear relation: 0 * Elements[Field{theArray}[this]] == 0 * Elements[Field{theArray}[this]] + 0 {1-}, Too few samples for linear relation: 0 * Elements[Field{theArray}[this]] == 0 * Elements[Field{theArray}[this]] + 0 {1-}> (Bin,SUU)
  <this.theArray[0..this.topOfStack] is the reverse of this.theArray[0..this.topOfStack] {0-}, null> (Bin,JM)
  <this.theArray[] is the reverse of this.theArray[] {0-}, this.theArray[] is the reverse of this.theArray[] {0-}> (Bin,SJJ)
  <this.theArray[0..this.topOfStack] == this.theArray[0..this.topOfStack] {0-}, null> (Bin,JM)
  <this.theArray[] == orig(this.theArray[post(this.topOfStack+1)..]) {0+}, null> (Bin,JM)
  <this.theArray[] == orig(this.theArray[this.topOfStack+1..]) {0+}, null> (Bin,JM)
  <this.theArray[] == this.theArray[] {0-}, this.theArray[] ?cmp? this.theArray[] (lexically) {1-}> (Bin,DJU)
  <this.theArray[] == this.theArray[orig(this.topOfStack)+1..] {0-}, null> (Bin,JM)
  <this.theArray[] == this.theArray[this.topOfStack+1..] {0-}, null> (Bin,JM)
  <this.theArray[0..this.topOfStack] is a {sub,super}sequence of this.theArray[0..this.topOfStack] {1-}, null> (Bin,UM)
  <this.theArray[0..this.topOfStack] is a subsequence of this.theArray[] {0-}, null> (Bin,JM)
  <this.theArray[] is a {sub,super}sequence of this.theArray[] {1-}, this.theArray[] is a {sub,super}sequence of this.theArray[] {1-}> (Bin,SUU)
  <null, return.class ?cmp? return.class {1-}> (Bin,MU)
  <this.theArray.class == this.theArray.class {0-}, null> (Bin,JM)
  <size(this.theArray[]) == java.lang.Math.max(size(this.theArray[]), size(this.theArray[])) {3-}, null> (Ter,UM)
  <size(this.theArray[]) == java.lang.Math.max(size(this.theArray[]), size(this.theArray[])) {3-}, null> (Ter,UM)
  <size(this.theArray[]) == java.lang.Math.max(size(this.theArray[]), size(this.theArray[])) {3-}, null> (Ter,UM)
  <size(this.theArray[]) == java.lang.Math.min(size(this.theArray[]), size(this.theArray[])) {3-}, null> (Ter,UM)
  <size(this.theArray[]) == java.lang.Math.min(size(this.theArray[]), size(this.theArray[])) {3-}, null> (Ter,UM)
  <size(this.theArray[]) == java.lang.Math.min(size(this.theArray[]), size(this.theArray[])) {3-}, null> (Ter,UM)
  <size(this.theArray[]) == size(this.theArray[]) & size(this.theArray[]) {3-}, null> (Ter,UM)
  <size(this.theArray[]) == size(this.theArray[]) & size(this.theArray[]) {3-}, null> (Ter,UM)
  <size(this.theArray[]) == size(this.theArray[]) & size(this.theArray[]) {3-}, null> (Ter,UM)
  <size(this.theArray[]) == size(this.theArray[]) | size(this.theArray[]) {3-}, null> (Ter,UM)
  <size(this.theArray[]) == size(this.theArray[]) | size(this.theArray[]) {3-}, null> (Ter,UM)
  <size(this.theArray[]) == size(this.theArray[]) | size(this.theArray[]) {3-}, null> (Ter,UM)
  <size(this.theArray[]) == org.plumelib.util.MathPlume.gcd(size(this.theArray[]), size(this.theArray[])) {3-}, null> (Ter,UM)
  <size(this.theArray[]) == org.plumelib.util.MathPlume.gcd(size(this.theArray[]), size(this.theArray[])) {3-}, null> (Ter,UM)
  <size(this.theArray[]) == org.plumelib.util.MathPlume.gcd(size(this.theArray[]), size(this.theArray[])) {3-}, null> (Ter,UM)
  <size(this.theArray[]) == java.lang.Math.max(size(this.theArray[])-1, size(this.theArray[])) {0.5-}, null> (Ter,UM)
  <size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[])-1, size(this.theArray[])) {0.25-}, null> (Ter,UM)
  <size(this.theArray[])-1 == java.lang.Math.max(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, null> (Ter,UM)
  <size(this.theArray[])-1 == java.lang.Math.max(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, null> (Ter,UM)
  <size(this.theArray[])-1 == java.lang.Math.max(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, null> (Ter,UM)
  <size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, null> (Ter,UM)
  <size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, null> (Ter,UM)
  <size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, null> (Ter,UM)
  <size(this.theArray[])-1 == size(this.theArray[])-1 & size(this.theArray[])-1 {3-}, null> (Ter,UM)
  <size(this.theArray[])-1 == size(this.theArray[])-1 & size(this.theArray[])-1 {3-}, null> (Ter,UM)
  <size(this.theArray[])-1 == size(this.theArray[])-1 & size(this.theArray[])-1 {3-}, null> (Ter,UM)
  <size(this.theArray[])-1 == size(this.theArray[])-1 | size(this.theArray[])-1 {3-}, null> (Ter,UM)
  <size(this.theArray[])-1 == size(this.theArray[])-1 | size(this.theArray[])-1 {3-}, null> (Ter,UM)
  <size(this.theArray[])-1 == size(this.theArray[])-1 | size(this.theArray[])-1 {3-}, null> (Ter,UM)
  <size(this.theArray[])-1 == org.plumelib.util.MathPlume.gcd(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, null> (Ter,UM)
  <size(this.theArray[])-1 == org.plumelib.util.MathPlume.gcd(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, null> (Ter,UM)
  <size(this.theArray[])-1 == org.plumelib.util.MathPlume.gcd(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, null> (Ter,UM)
  <size(this.theArray[]) == java.lang.Math.max(this.topOfStack, size(this.theArray[])) {1-}, null> (Ter,UM)
  <size(this.theArray[]) == java.lang.Math.max(this.topOfStack, size(this.theArray[])) {1-}, null> (Ter,UM)
  <size(this.theArray[]) == this.topOfStack & size(this.theArray[]) {1-}, null> (Ter,UM)
  <size(this.theArray[]) == this.topOfStack & size(this.theArray[]) {1-}, null> (Ter,UM)
  <size(this.theArray[])-1 == java.lang.Math.max(this.topOfStack, size(this.theArray[])-1) {1-}, null> (Ter,UM)
  <size(this.theArray[])-1 == java.lang.Math.max(this.topOfStack, size(this.theArray[])-1) {1-}, null> (Ter,UM)
  <size(this.theArray[])-1 == this.topOfStack & size(this.theArray[])-1 {1-}, null> (Ter,UM)
  <size(this.theArray[])-1 == this.topOfStack & size(this.theArray[])-1 {1-}, null> (Ter,UM)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])) {0.25-}, null> (Ter,UM)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])) {0.25-}, null> (Ter,UM)
  <this.topOfStack == this.topOfStack >> size(this.theArray[]) {0.25-}, null> (Ter,UM)
  <this.topOfStack == this.topOfStack >> size(this.theArray[]) {0.25-}, null> (Ter,UM)
  <this.topOfStack == this.topOfStack | size(this.theArray[]) {0.25-}, null> (Ter,UM)
  <this.topOfStack == this.topOfStack | size(this.theArray[]) {0.25-}, null> (Ter,UM)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])-1) {0.5-}, null> (Ter,UM)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])-1) {0.5-}, null> (Ter,UM)
  <this.topOfStack == this.topOfStack >> size(this.theArray[])-1 {0.5-}, null> (Ter,UM)
  <this.topOfStack == this.topOfStack >> size(this.theArray[])-1 {0.5-}, null> (Ter,UM)
  <this.topOfStack == this.topOfStack | size(this.theArray[])-1 {0.5-}, null> (Ter,UM)
  <this.topOfStack == this.topOfStack | size(this.theArray[])-1 {0.5-}, null> (Ter,UM)
  <this.topOfStack == java.lang.Math.max(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == this.topOfStack ^ this.topOfStack {3-}> (Ter,DUU)
  <this.topOfStack == java.lang.Math.max(this.topOfStack, this.topOfStack) {3-}, null> (Ter,UM)
  <this.topOfStack == java.lang.Math.max(this.topOfStack, this.topOfStack) {3-}, null> (Ter,UM)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, this.topOfStack) {3-}, null> (Ter,UM)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, this.topOfStack) {3-}, null> (Ter,UM)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, this.topOfStack) {3-}, null> (Ter,UM)
  <this.topOfStack == this.topOfStack & this.topOfStack {3-}, null> (Ter,UM)
  <this.topOfStack == this.topOfStack & this.topOfStack {3-}, null> (Ter,UM)
  <this.topOfStack == this.topOfStack & this.topOfStack {3-}, null> (Ter,UM)
  <this.topOfStack == this.topOfStack >> this.topOfStack {3-}, null> (Ter,UM)
  <this.topOfStack == this.topOfStack >> this.topOfStack {3-}, null> (Ter,UM)
  <this.topOfStack == this.topOfStack >> this.topOfStack {3-}, null> (Ter,UM)
  <this.topOfStack == this.topOfStack >> this.topOfStack {3-}, null> (Ter,UM)
  <this.topOfStack == this.topOfStack >> this.topOfStack {3-}, null> (Ter,UM)
  <this.topOfStack == this.topOfStack >> this.topOfStack {3-}, null> (Ter,UM)
  <this.topOfStack == this.topOfStack | this.topOfStack {3-}, null> (Ter,UM)
  <this.topOfStack == this.topOfStack | this.topOfStack {3-}, null> (Ter,UM)
  <this.topOfStack == this.topOfStack | this.topOfStack {3-}, null> (Ter,UM)
  <this.topOfStack == org.plumelib.util.MathPlume.gcd(this.topOfStack, this.topOfStack) {3-}, null> (Ter,UM)
  <this.topOfStack == org.plumelib.util.MathPlume.gcd(this.topOfStack, this.topOfStack) {3-}, null> (Ter,UM)
  <this.topOfStack == org.plumelib.util.MathPlume.gcd(this.topOfStack, this.topOfStack) {3-}, null> (Ter,UM)
  <size(this.theArray[])-1 == 2 * size(this.theArray[]) - size(this.theArray[]) - 1 {0-}, null> (Ter,JM)
  <size(this.theArray[])-1 == 0.5 * size(this.theArray[]) + 0.5 * size(this.theArray[])-1 - 0.5 {0-}, null> (Ter,JM)
  <Too few samples for linear relation: 0 * Field{topOfStack}[this] == 0 * Field{topOfStack}[this] + 0 * Field{topOfStack}[this] + 0 {1-}, Too few samples for linear relation: 0 * Field{topOfStack}[this] == 0 * Field{topOfStack}[this] + 0 * Field{topOfStack}[this] + 0 {0-}> (Ter,SUJ)
  <size(this.theArray[]) >= 0 {0-}, null> (UInt,JM)
  <size(this.theArray[])-1 >= -1 {0-}, null> (U!Int,JM)
  <this.topOfStack >= -1 {0.8054-}, this.topOfStack >= 9223372036854775807 {1-}> (U!Int,DUU)
  <this.theArray != null {0.0001+}, null> (UInt,JM)
  <this.topOfStack != 0 {1-}, this.topOfStack != 0 {1-}> (UInt,SUU)
  <return == null {0+}, return one of {  } {1-}> (UInt,DJU)
  <null, this.theArray one of {  } {1-}> (UInt,MU)
  <this.topOfStack == -1 {0+}, this.topOfStack one of {  } {1-}> (UInt,DJU)
  <size(this.theArray[]) <= 20 {0.186-}, null> (U!Int,UM)
  <size(this.theArray[])-1 <= 19 {0.186-}, null> (U!Int,UM)
  <this.topOfStack <= -1 {0.8054-}, this.topOfStack <= -9223372036854775808 {1-}> (U!Int,DUU)
  <this.theArray[0..this.topOfStack] elements != null {0.0001+}, null> (UInt,JM)
  <null, this.theArray[] elements != null {1-}> (UInt,MU)
  <this.theArray[0..this.topOfStack] elements one of {  } {1-}, null> (UInt,UM)
  <this.theArray[] elements == null {0+}, this.theArray[] elements one of {  } {1-}> (UInt,DJU)
  <this.theArray[0..this.topOfStack] elements are equal {0-}, null> (UInt,JM)
  <this.theArray[] elements are equal {0-}, this.theArray[] elements are equal {1-}> (UInt,SJU)
  <this.theArray[0..this.topOfStack] contains no duplicates {1-}, null> (UInt,UM)
  <null, this.theArray[] contains no duplicates {0.81-}> (UInt,MU)
  <null, this.theArray[] one of {  } {1-}> (UInt,MU)
  <return.class == null {0+}, return.class one of {  } {1-}> (UInt,DJU)
  <this.theArray.class == "[Ljava.lang.Object;" {0+}, null> (UInt,JM)
  <this.theArray[].class elements == null {0+}, this.theArray[].class elements one of {  } {1-}> (UInt,DJU)
  <null, this.theArray[].class one of {  } {1-}> (UInt,MU)
<DataStructures.StackAr.top()Ljava/lang/Object;:::EXIT72>
  <return in this.theArray[0..this.topOfStack] {0-}, return in this.theArray[0..this.topOfStack] {0-}> (Bin,SJJ)
  <return in this.theArray[] {0-}, return in this.theArray[] {0-}> (Bin,SJJ)
  <return in this.theArray[this.topOfStack..] {0-}, return in this.theArray[this.topOfStack..] {0-}> (Bin,SJJ)
  <return == orig(this.theArray[post(this.topOfStack)]) {0+}, null> (Bin,JM)
  <return == orig(this.theArray[this.topOfStack]) {0+}, null> (Bin,JM)
  <return == return {0-}, return == return {0-}> (Bin,SJJ)
  <return == this.theArray[orig(this.topOfStack)] {0+}, null> (Bin,JM)
  <size(this.theArray[]) == size(this.theArray[]) {0-}, size(this.theArray[]) == size(this.theArray[]) {0-}> (Bin,SJJ)
  <size(this.theArray[])-1 == size(this.theArray[])-1 {0-}, size(this.theArray[])-1 == size(this.theArray[])-1 {0-}> (Bin,SJJ)
  <this.theArray == this.theArray {0-}, this.theArray == this.theArray {0-}> (Bin,SJJ)
  <this.topOfStack == this.topOfStack {0-}, this.topOfStack == this.topOfStack {0-}> (Bin,SJJ)
  <size(this.theArray[]) >= size(this.theArray[]) {0.3148-}, size(this.theArray[]) >= size(this.theArray[]) {0.6557-}> (Bin,SUU)
  <size(this.theArray[]) >= size(this.theArray[])-1 {0.0787-}, size(this.theArray[]) >= size(this.theArray[])-1 {0.041-}> (Bin,SUU)
  <size(this.theArray[])-1 >= size(this.theArray[])-1 {0.3148-}, size(this.theArray[])-1 >= size(this.theArray[])-1 {0.6557-}> (Bin,SUU)
  <this.topOfStack >= this.topOfStack {0.3148-}, this.topOfStack >= this.topOfStack {0.6557-}> (Bin,SUU)
  <size(this.theArray[]) > size(this.theArray[])-1 {0.0787-}, size(this.theArray[]) > size(this.theArray[])-1 {0.041-}> (Bin,SUU)
  <size(this.theArray[]) <= size(this.theArray[]) {0.3148-}, size(this.theArray[]) <= size(this.theArray[]) {0.6557-}> (Bin,SUU)
  <size(this.theArray[])-1 <= size(this.theArray[])-1 {0.3148-}, size(this.theArray[])-1 <= size(this.theArray[])-1 {0.6557-}> (Bin,SUU)
  <this.topOfStack <= size(this.theArray[]) {0.0012-}, this.topOfStack <= size(this.theArray[]) {0.0026-}> (Bin,SJJ)
  <this.topOfStack <= size(this.theArray[])-1 {0.0012+}, this.topOfStack <= size(this.theArray[])-1 {0.0026+}> (Bin,SJJ)
  <this.topOfStack <= this.topOfStack {0.3148-}, this.topOfStack <= this.topOfStack {0.6557-}> (Bin,SUU)
  <this.topOfStack < size(this.theArray[]) {0.0012-}, this.topOfStack < size(this.theArray[]) {0.0026-}> (Bin,SJJ)
  <size(this.theArray[]) != size(this.theArray[])-1 {0.0394-}, size(this.theArray[]) != size(this.theArray[])-1 {0.041-}> (Bin,SUU)
  <this.topOfStack != size(this.theArray[]) {0.0012-}, this.topOfStack != size(this.theArray[]) {0.0026-}> (Bin,SJJ)
  <size(this.theArray[]) == size(this.theArray[]) {0-}, size(this.theArray[]) == size(this.theArray[]) {0-}> (Bin,SJJ)
  <size(this.theArray[])-1 == size(this.theArray[]) - 1 {0-}, size(this.theArray[])-1 == size(this.theArray[]) - 1 {0-}> (Bin,SJJ)
  <size(this.theArray[])-1 == size(this.theArray[])-1 {0-}, size(this.theArray[])-1 == size(this.theArray[])-1 {0-}> (Bin,SJJ)
  <this.topOfStack == this.topOfStack {0-}, this.topOfStack == this.topOfStack {0-}> (Bin,SJJ)
  <this.theArray[0..this.topOfStack-1] == this.theArray[0..this.topOfStack-1] (elementwise) {0-}, this.theArray[0..this.topOfStack-1] == this.theArray[0..this.topOfStack-1] (elementwise) {0-}> (Bin,SJJ)
  <this.theArray[0..this.topOfStack] == this.theArray[0..this.topOfStack] (elementwise) {0-}, this.theArray[0..this.topOfStack] == this.theArray[0..this.topOfStack] (elementwise) {0-}> (Bin,SJJ)
  <this.theArray[] == this.theArray[] (elementwise) {0-}, this.theArray[] == this.theArray[] (elementwise) {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack+1..] == this.theArray[this.topOfStack+1..] (elementwise) {0-}, this.theArray[this.topOfStack+1..] == this.theArray[this.topOfStack+1..] (elementwise) {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack..] == this.theArray[this.topOfStack..] (elementwise) {0-}, this.theArray[this.topOfStack..] == this.theArray[this.topOfStack..] (elementwise) {0-}> (Bin,SJJ)
  <this.theArray[0..this.topOfStack-1] == this.theArray[0..this.topOfStack-1] {0-}, this.theArray[0..this.topOfStack-1] == this.theArray[0..this.topOfStack-1] {0-}> (Bin,SJJ)
  <this.theArray[0..this.topOfStack] == this.theArray[0..this.topOfStack] {0-}, this.theArray[0..this.topOfStack] == this.theArray[0..this.topOfStack] {0-}> (Bin,SJJ)
  <this.theArray[] == this.theArray[] {0-}, this.theArray[] == this.theArray[] {0-}> (Bin,SJJ)
  <Too few samples for linear relation: 0 * Slice{Add{+1}[Field{topOfStack}[this]],}[Elements[Field{theArray}[this]]] == 0 * Slice{Add{+1}[Field{topOfStack}[this]],}[Elements[Field{theArray}[this]]] + 0 {1-}, Too few samples for linear relation: 0 * Slice{Add{+1}[Field{topOfStack}[this]],}[Elements[Field{theArray}[this]]] == 0 * Slice{Add{+1}[Field{topOfStack}[this]],}[Elements[Field{theArray}[this]]] + 0 {1-}> (Bin,SUU)
  <this.theArray[this.topOfStack..] == this.theArray[this.topOfStack..] {0-}, this.theArray[this.topOfStack..] == this.theArray[this.topOfStack..] {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack+1..] is the reverse of this.theArray[this.topOfStack+1..] {0-}, this.theArray[this.topOfStack+1..] is the reverse of this.theArray[this.topOfStack+1..] {0-}> (Bin,SJJ)
  <this.theArray[0..this.topOfStack-1] == this.theArray[0..this.topOfStack-1] {0-}, this.theArray[0..this.topOfStack-1] == this.theArray[0..this.topOfStack-1] {0-}> (Bin,SJJ)
  <this.theArray[0..this.topOfStack] == this.theArray[0..this.topOfStack] {0-}, this.theArray[0..this.topOfStack] == this.theArray[0..this.topOfStack] {0-}> (Bin,SJJ)
  <this.theArray[] == this.theArray[] {0-}, this.theArray[] == this.theArray[] {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack+1..] == this.theArray[this.topOfStack+1..] {0-}, this.theArray[this.topOfStack+1..] == this.theArray[this.topOfStack+1..] {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack..] == this.theArray[this.topOfStack..] {0-}, this.theArray[this.topOfStack..] == this.theArray[this.topOfStack..] {0-}> (Bin,SJJ)
  <this.theArray[0..this.topOfStack-1] is a {sub,super}sequence of this.theArray[0..this.topOfStack-1] {1-}, this.theArray[0..this.topOfStack-1] is a {sub,super}sequence of this.theArray[0..this.topOfStack-1] {1-}> (Bin,SUU)
  <this.theArray[0..this.topOfStack-1] is a subsequence of this.theArray[0..this.topOfStack] {0-}, this.theArray[0..this.topOfStack-1] is a subsequence of this.theArray[0..this.topOfStack] {0-}> (Bin,SJJ)
  <this.theArray[0..this.topOfStack] is a {sub,super}sequence of this.theArray[0..this.topOfStack] {1-}, this.theArray[0..this.topOfStack] is a {sub,super}sequence of this.theArray[0..this.topOfStack] {1-}> (Bin,SUU)
  <this.theArray[0..this.topOfStack-1] is a subsequence of this.theArray[] {0-}, this.theArray[0..this.topOfStack-1] is a subsequence of this.theArray[] {0-}> (Bin,SJJ)
  <this.theArray[0..this.topOfStack] is a subsequence of this.theArray[] {0-}, this.theArray[0..this.topOfStack] is a subsequence of this.theArray[] {0-}> (Bin,SJJ)
  <this.theArray[] is a {sub,super}sequence of this.theArray[] {1-}, this.theArray[] is a {sub,super}sequence of this.theArray[] {1-}> (Bin,SUU)
  <this.theArray[this.topOfStack+1..] is a subsequence of this.theArray[] {0-}, this.theArray[this.topOfStack+1..] is a subsequence of this.theArray[] {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack..] is a subsequence of this.theArray[] {0-}, this.theArray[this.topOfStack..] is a subsequence of this.theArray[] {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack+1..] is a {sub,super}sequence of this.theArray[this.topOfStack+1..] {1-}, this.theArray[this.topOfStack+1..] is a {sub,super}sequence of this.theArray[this.topOfStack+1..] {1-}> (Bin,SUU)
  <this.theArray[this.topOfStack+1..] is a subsequence of this.theArray[this.topOfStack..] {0-}, this.theArray[this.topOfStack+1..] is a subsequence of this.theArray[this.topOfStack..] {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack..] is a {sub,super}sequence of this.theArray[this.topOfStack..] {1-}, this.theArray[this.topOfStack..] is a {sub,super}sequence of this.theArray[this.topOfStack..] {1-}> (Bin,SUU)
  <return.class == return.class {0-}, return.class == return.class {0-}> (Bin,SJJ)
  <this.theArray.class == this.theArray.class {0-}, this.theArray.class == this.theArray.class {0-}> (Bin,SJJ)
  <size(this.theArray[]) == java.lang.Math.max(size(this.theArray[]), size(this.theArray[])) {3-}, size(this.theArray[]) == java.lang.Math.max(size(this.theArray[]), size(this.theArray[])) {3-}> (Ter,SUU)
  <size(this.theArray[]) == java.lang.Math.max(size(this.theArray[]), size(this.theArray[])) {3-}, size(this.theArray[]) == java.lang.Math.max(size(this.theArray[]), size(this.theArray[])) {3-}> (Ter,SUU)
  <size(this.theArray[]) == java.lang.Math.max(size(this.theArray[]), size(this.theArray[])) {3-}, size(this.theArray[]) == java.lang.Math.max(size(this.theArray[]), size(this.theArray[])) {3-}> (Ter,SUU)
  <size(this.theArray[]) == java.lang.Math.min(size(this.theArray[]), size(this.theArray[])) {3-}, size(this.theArray[]) == java.lang.Math.min(size(this.theArray[]), size(this.theArray[])) {3-}> (Ter,SUU)
  <size(this.theArray[]) == java.lang.Math.min(size(this.theArray[]), size(this.theArray[])) {3-}, size(this.theArray[]) == java.lang.Math.min(size(this.theArray[]), size(this.theArray[])) {3-}> (Ter,SUU)
  <size(this.theArray[]) == java.lang.Math.min(size(this.theArray[]), size(this.theArray[])) {3-}, size(this.theArray[]) == java.lang.Math.min(size(this.theArray[]), size(this.theArray[])) {3-}> (Ter,SUU)
  <size(this.theArray[]) == size(this.theArray[]) & size(this.theArray[]) {3-}, size(this.theArray[]) == size(this.theArray[]) & size(this.theArray[]) {3-}> (Ter,SUU)
  <size(this.theArray[]) == size(this.theArray[]) & size(this.theArray[]) {3-}, size(this.theArray[]) == size(this.theArray[]) & size(this.theArray[]) {3-}> (Ter,SUU)
  <size(this.theArray[]) == size(this.theArray[]) & size(this.theArray[]) {3-}, size(this.theArray[]) == size(this.theArray[]) & size(this.theArray[]) {3-}> (Ter,SUU)
  <size(this.theArray[]) == size(this.theArray[]) | size(this.theArray[]) {3-}, size(this.theArray[]) == size(this.theArray[]) | size(this.theArray[]) {3-}> (Ter,SUU)
  <size(this.theArray[]) == size(this.theArray[]) | size(this.theArray[]) {3-}, size(this.theArray[]) == size(this.theArray[]) | size(this.theArray[]) {3-}> (Ter,SUU)
  <size(this.theArray[]) == size(this.theArray[]) | size(this.theArray[]) {3-}, size(this.theArray[]) == size(this.theArray[]) | size(this.theArray[]) {3-}> (Ter,SUU)
  <size(this.theArray[]) == org.plumelib.util.MathPlume.gcd(size(this.theArray[]), size(this.theArray[])) {3-}, size(this.theArray[]) == org.plumelib.util.MathPlume.gcd(size(this.theArray[]), size(this.theArray[])) {3-}> (Ter,SUU)
  <size(this.theArray[]) == org.plumelib.util.MathPlume.gcd(size(this.theArray[]), size(this.theArray[])) {3-}, size(this.theArray[]) == org.plumelib.util.MathPlume.gcd(size(this.theArray[]), size(this.theArray[])) {3-}> (Ter,SUU)
  <size(this.theArray[]) == org.plumelib.util.MathPlume.gcd(size(this.theArray[]), size(this.theArray[])) {3-}, size(this.theArray[]) == org.plumelib.util.MathPlume.gcd(size(this.theArray[]), size(this.theArray[])) {3-}> (Ter,SUU)
  <size(this.theArray[]) == java.lang.Math.max(size(this.theArray[])-1, size(this.theArray[])) {0.5-}, size(this.theArray[]) == java.lang.Math.max(size(this.theArray[])-1, size(this.theArray[])) {0-}> (Ter,SUJ)
  <size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[])-1, size(this.theArray[])) {0.25-}, size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[])-1, size(this.theArray[])) {0-}> (Ter,SUJ)
  <size(this.theArray[])-1 == size(this.theArray[])-1 % size(this.theArray[]) {0.25-}, size(this.theArray[])-1 == size(this.theArray[])-1 % size(this.theArray[]) {0-}> (Ter,SUJ)
  <size(this.theArray[])-1 == java.lang.Math.max(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == java.lang.Math.max(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == java.lang.Math.max(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == java.lang.Math.max(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == java.lang.Math.max(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == java.lang.Math.max(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == size(this.theArray[])-1 & size(this.theArray[])-1 {3-}, size(this.theArray[])-1 == size(this.theArray[])-1 & size(this.theArray[])-1 {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == size(this.theArray[])-1 & size(this.theArray[])-1 {3-}, size(this.theArray[])-1 == size(this.theArray[])-1 & size(this.theArray[])-1 {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == size(this.theArray[])-1 & size(this.theArray[])-1 {3-}, size(this.theArray[])-1 == size(this.theArray[])-1 & size(this.theArray[])-1 {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == size(this.theArray[])-1 | size(this.theArray[])-1 {3-}, size(this.theArray[])-1 == size(this.theArray[])-1 | size(this.theArray[])-1 {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == size(this.theArray[])-1 | size(this.theArray[])-1 {3-}, size(this.theArray[])-1 == size(this.theArray[])-1 | size(this.theArray[])-1 {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == size(this.theArray[])-1 | size(this.theArray[])-1 {3-}, size(this.theArray[])-1 == size(this.theArray[])-1 | size(this.theArray[])-1 {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == org.plumelib.util.MathPlume.gcd(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == org.plumelib.util.MathPlume.gcd(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == org.plumelib.util.MathPlume.gcd(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == org.plumelib.util.MathPlume.gcd(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == org.plumelib.util.MathPlume.gcd(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == org.plumelib.util.MathPlume.gcd(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[]) == java.lang.Math.max(this.topOfStack, size(this.theArray[])) {0-}, size(this.theArray[]) == java.lang.Math.max(this.topOfStack, size(this.theArray[])) {0-}> (Ter,SJJ)
  <size(this.theArray[]) == java.lang.Math.max(this.topOfStack, size(this.theArray[])) {0-}, size(this.theArray[]) == java.lang.Math.max(this.topOfStack, size(this.theArray[])) {0-}> (Ter,SJJ)
  <size(this.theArray[])-1 == java.lang.Math.max(this.topOfStack, size(this.theArray[])-1) {0-}, size(this.theArray[])-1 == java.lang.Math.max(this.topOfStack, size(this.theArray[])-1) {0-}> (Ter,SJJ)
  <size(this.theArray[])-1 == java.lang.Math.max(this.topOfStack, size(this.theArray[])-1) {0-}, size(this.theArray[])-1 == java.lang.Math.max(this.topOfStack, size(this.theArray[])-1) {0-}> (Ter,SJJ)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])) {0.25-}, this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])) {0-}> (Ter,SUJ)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])) {0.25-}, this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])) {0-}> (Ter,SUJ)
  <this.topOfStack == this.topOfStack % size(this.theArray[]) {0.25-}, this.topOfStack == this.topOfStack % size(this.theArray[]) {0-}> (Ter,SUJ)
  <this.topOfStack == this.topOfStack % size(this.theArray[]) {0.25-}, this.topOfStack == this.topOfStack % size(this.theArray[]) {0-}> (Ter,SUJ)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])-1) {0.5-}, this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])-1) {0-}> (Ter,SUJ)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])-1) {0.5-}, this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])-1) {0-}> (Ter,SUJ)
  <this.topOfStack == java.lang.Math.max(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == java.lang.Math.max(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <this.topOfStack == java.lang.Math.max(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == java.lang.Math.max(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <this.topOfStack == java.lang.Math.max(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == java.lang.Math.max(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == java.lang.Math.min(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == java.lang.Math.min(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == java.lang.Math.min(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <this.topOfStack == this.topOfStack & this.topOfStack {3-}, this.topOfStack == this.topOfStack & this.topOfStack {3-}> (Ter,SUU)
  <this.topOfStack == this.topOfStack & this.topOfStack {3-}, this.topOfStack == this.topOfStack & this.topOfStack {3-}> (Ter,SUU)
  <this.topOfStack == this.topOfStack & this.topOfStack {3-}, this.topOfStack == this.topOfStack & this.topOfStack {3-}> (Ter,SUU)
  <this.topOfStack == this.topOfStack | this.topOfStack {3-}, this.topOfStack == this.topOfStack | this.topOfStack {3-}> (Ter,SUU)
  <this.topOfStack == this.topOfStack | this.topOfStack {3-}, this.topOfStack == this.topOfStack | this.topOfStack {3-}> (Ter,SUU)
  <this.topOfStack == this.topOfStack | this.topOfStack {3-}, this.topOfStack == this.topOfStack | this.topOfStack {3-}> (Ter,SUU)
  <this.topOfStack == org.plumelib.util.MathPlume.gcd(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == org.plumelib.util.MathPlume.gcd(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <this.topOfStack == org.plumelib.util.MathPlume.gcd(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == org.plumelib.util.MathPlume.gcd(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <this.topOfStack == org.plumelib.util.MathPlume.gcd(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == org.plumelib.util.MathPlume.gcd(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <Too few samples for linear relation: 0 * SizeOf[Elements[Field{theArray}[this]]] == 0 * SizeOf[Elements[Field{theArray}[this]]] + 0 * SizeOf[Elements[Field{theArray}[this]]] + 0 {0.25-}, null> (Ter,UM)
  <Too few samples for linear relation: 0 * Add{-1}[SizeOf[Elements[Field{theArray}[this]]]] == 0 * SizeOf[Elements[Field{theArray}[this]]] + 0 * SizeOf[Elements[Field{theArray}[this]]] + 0 {0.25-}, size(this.theArray[])-1 == 2 * size(this.theArray[]) - size(this.theArray[]) - 1 {0-}> (Ter,DUJ)
  <Too few samples for linear relation: 0 * Add{-1}[SizeOf[Elements[Field{theArray}[this]]]] == 0 * SizeOf[Elements[Field{theArray}[this]]] + 0 * Add{-1}[SizeOf[Elements[Field{theArray}[this]]]] + 0 {0.25-}, size(this.theArray[])-1 == 0.5 * size(this.theArray[]) + 0.5 * size(this.theArray[])-1 - 0.5 {0-}> (Ter,DUJ)
  <Too few samples for linear relation: 0 * Add{-1}[SizeOf[Elements[Field{theArray}[this]]]] == 0 * Add{-1}[SizeOf[Elements[Field{theArray}[this]]]] + 0 * Add{-1}[SizeOf[Elements[Field{theArray}[this]]]] + 0 {0.25-}, null> (Ter,UM)
  <size(this.theArray[]) >= 1 {0.9279-}, size(this.theArray[]) >= 2 {0.9643-}> (UInt,DUU)
  <size(this.theArray[])-1 >= 0 {0.5789-}, size(this.theArray[])-1 >= 1 {0.9643-}> (UInt,DUU)
  <this.topOfStack >= 0 {0+}, this.topOfStack >= 0 {0+}> (UInt,SJJ)
  <return != null {0.0001+}, return != null {0.0001+}> (UInt,SJJ)
  <size(this.theArray[]) != 0 {1-}, size(this.theArray[]) != 0 {1-}> (UInt,SUU)
  <null, size(this.theArray[])-1 != 0 {1-}> (UInt,MU)
  <this.theArray != null {0.0001+}, this.theArray != null {0.0001+}> (UInt,SJJ)
  <size(this.theArray[]) <= 20 {0-}, size(this.theArray[]) <= 15 {0-}> (U!Int,DJJ)
  <size(this.theArray[])-1 <= 19 {0-}, size(this.theArray[])-1 <= 14 {0-}> (U!Int,DJJ)
  <this.topOfStack <= 19 {0.7333-}, this.topOfStack <= 14 {1-}> (U!Int,DUU)
  <this.theArray[0..this.topOfStack-1] elements != null {0.0001-}, this.theArray[0..this.topOfStack-1] elements != null {0.0001-}> (UInt,SJJ)
  <this.theArray[0..this.topOfStack] elements != null {0.0001+}, this.theArray[0..this.topOfStack] elements != null {0.0001+}> (UInt,SJJ)
  <this.theArray[this.topOfStack+1..] elements == null {0+}, this.theArray[this.topOfStack+1..] elements == null {0+}> (UInt,SJJ)
  <this.theArray[this.topOfStack+1..] elements are equal {0-}, this.theArray[this.topOfStack+1..] elements are equal {0-}> (UInt,SJJ)
  <null, this.theArray[0..this.topOfStack-1] contains no duplicates {0.0343-}> (UInt,MU)
  <null, this.theArray[0..this.topOfStack] contains no duplicates {0.0203-}> (UInt,MU)
  <this.theArray.class == "[Ljava.lang.Object;" {0+}, this.theArray.class == "[Ljava.lang.Object;" {0+}> (UInt,SJJ)
<DataStructures.StackAr.topAndPop()Ljava/lang/Object;:::ENTER>
  <size(this.theArray[]) == size(this.theArray[]) {0-}, size(this.theArray[]) == size(this.theArray[]) {0-}> (Bin,SJJ)
  <size(this.theArray[])-1 == size(this.theArray[])-1 {0-}, size(this.theArray[])-1 == size(this.theArray[])-1 {0-}> (Bin,SJJ)
  <this.theArray == this.theArray {0-}, this.theArray == this.theArray {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack-1] == this.theArray[this.topOfStack-1] {0-}, this.theArray[this.topOfStack-1] == this.theArray[this.topOfStack-1] {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack] == this.theArray[this.topOfStack] {0-}, this.theArray[this.topOfStack] == this.theArray[this.topOfStack] {0-}> (Bin,SJJ)
  <this.topOfStack == this.topOfStack {0-}, this.topOfStack == this.topOfStack {0-}> (Bin,SJJ)
  <size(this.theArray[]) >= size(this.theArray[]) {0.6426-}, size(this.theArray[]) >= size(this.theArray[]) {0.6235-}> (Bin,SUU)
  <size(this.theArray[]) >= size(this.theArray[])-1 {0.0803-}, size(this.theArray[]) >= size(this.theArray[])-1 {0.039-}> (Bin,SUU)
  <size(this.theArray[])-1 >= size(this.theArray[])-1 {0.6426-}, size(this.theArray[])-1 >= size(this.theArray[])-1 {0.6235-}> (Bin,SUU)
  <this.topOfStack >= this.topOfStack {0.6426-}, this.topOfStack >= this.topOfStack {0.6235-}> (Bin,SUU)
  <size(this.theArray[]) > size(this.theArray[])-1 {0.0803-}, size(this.theArray[]) > size(this.theArray[])-1 {0.039-}> (Bin,SUU)
  <size(this.theArray[]) <= size(this.theArray[]) {0.6426-}, size(this.theArray[]) <= size(this.theArray[]) {0.6235-}> (Bin,SUU)
  <size(this.theArray[])-1 <= size(this.theArray[])-1 {0.6426-}, size(this.theArray[])-1 <= size(this.theArray[])-1 {0.6235-}> (Bin,SUU)
  <this.topOfStack <= size(this.theArray[]) {0.0025-}, this.topOfStack <= size(this.theArray[]) {0.0024-}> (Bin,SJJ)
  <this.topOfStack <= size(this.theArray[])-1 {0.0025+}, this.topOfStack <= size(this.theArray[])-1 {0.0024+}> (Bin,SJJ)
  <this.topOfStack <= this.topOfStack {0.6426-}, this.topOfStack <= this.topOfStack {0.6235-}> (Bin,SUU)
  <this.topOfStack < size(this.theArray[]) {0.0025-}, this.topOfStack < size(this.theArray[]) {0.0024-}> (Bin,SJJ)
  <size(this.theArray[]) != size(this.theArray[])-1 {0.0803-}, size(this.theArray[]) != size(this.theArray[])-1 {0.039-}> (Bin,SUU)
  <this.topOfStack != size(this.theArray[]) {0.0025-}, this.topOfStack != size(this.theArray[]) {0.0024-}> (Bin,SJJ)
  <this.topOfStack == this.topOfStack {0-}, this.topOfStack == this.topOfStack {0-}> (Bin,SJJ)
  <this.theArray[0..this.topOfStack-1] == this.theArray[0..this.topOfStack-1] (elementwise) {0-}, this.theArray[0..this.topOfStack-1] == this.theArray[0..this.topOfStack-1] (elementwise) {0-}> (Bin,SJJ)
  <this.theArray[0..this.topOfStack] == this.theArray[0..this.topOfStack] (elementwise) {0-}, this.theArray[0..this.topOfStack] == this.theArray[0..this.topOfStack] (elementwise) {0-}> (Bin,SJJ)
  <this.theArray[] == this.theArray[] (elementwise) {0-}, this.theArray[] == this.theArray[] (elementwise) {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack+1..] == this.theArray[this.topOfStack+1..] (elementwise) {0-}, this.theArray[this.topOfStack+1..] == this.theArray[this.topOfStack+1..] (elementwise) {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack..] == this.theArray[this.topOfStack..] (elementwise) {0-}, this.theArray[this.topOfStack..] == this.theArray[this.topOfStack..] (elementwise) {0-}> (Bin,SJJ)
  <this.theArray[0..this.topOfStack-1] == this.theArray[0..this.topOfStack-1] {0-}, this.theArray[0..this.topOfStack-1] == this.theArray[0..this.topOfStack-1] {0-}> (Bin,SJJ)
  <this.theArray[0..this.topOfStack] == this.theArray[0..this.topOfStack] {0-}, this.theArray[0..this.topOfStack] == this.theArray[0..this.topOfStack] {0-}> (Bin,SJJ)
  <this.theArray[] == this.theArray[] {0-}, this.theArray[] == this.theArray[] {0-}> (Bin,SJJ)
  <Too few samples for linear relation: 0 * Slice{Add{+1}[Field{topOfStack}[this]],}[Elements[Field{theArray}[this]]] == 0 * Slice{Add{+1}[Field{topOfStack}[this]],}[Elements[Field{theArray}[this]]] + 0 {1-}, Too few samples for linear relation: 0 * Slice{Add{+1}[Field{topOfStack}[this]],}[Elements[Field{theArray}[this]]] == 0 * Slice{Add{+1}[Field{topOfStack}[this]],}[Elements[Field{theArray}[this]]] + 0 {1-}> (Bin,SUU)
  <this.theArray[this.topOfStack..] == this.theArray[this.topOfStack..] {0-}, this.theArray[this.topOfStack..] == this.theArray[this.topOfStack..] {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack+1..] is the reverse of this.theArray[this.topOfStack+1..] {0-}, this.theArray[this.topOfStack+1..] is the reverse of this.theArray[this.topOfStack+1..] {0-}> (Bin,SJJ)
  <this.theArray[0..this.topOfStack-1] == this.theArray[0..this.topOfStack-1] {0-}, this.theArray[0..this.topOfStack-1] == this.theArray[0..this.topOfStack-1] {0-}> (Bin,SJJ)
  <this.theArray[0..this.topOfStack] == this.theArray[0..this.topOfStack] {0-}, this.theArray[0..this.topOfStack] == this.theArray[0..this.topOfStack] {0-}> (Bin,SJJ)
  <this.theArray[] == this.theArray[] {0-}, this.theArray[] == this.theArray[] {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack+1..] == this.theArray[this.topOfStack+1..] {0-}, this.theArray[this.topOfStack+1..] == this.theArray[this.topOfStack+1..] {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack..] == this.theArray[this.topOfStack..] {0-}, this.theArray[this.topOfStack..] == this.theArray[this.topOfStack..] {0-}> (Bin,SJJ)
  <this.theArray[] is a {sub,super}sequence of this.theArray[] {1-}, this.theArray[] is a {sub,super}sequence of this.theArray[] {1-}> (Bin,SUU)
  <this.theArray.class == this.theArray.class {0-}, this.theArray.class == this.theArray.class {0-}> (Bin,SJJ)
  <size(this.theArray[]) == java.lang.Math.max(size(this.theArray[]), size(this.theArray[])) {3-}, size(this.theArray[]) == java.lang.Math.max(size(this.theArray[]), size(this.theArray[])) {3-}> (Ter,SUU)
  <size(this.theArray[]) == java.lang.Math.max(size(this.theArray[]), size(this.theArray[])) {3-}, size(this.theArray[]) == java.lang.Math.max(size(this.theArray[]), size(this.theArray[])) {3-}> (Ter,SUU)
  <size(this.theArray[]) == java.lang.Math.max(size(this.theArray[]), size(this.theArray[])) {3-}, size(this.theArray[]) == java.lang.Math.max(size(this.theArray[]), size(this.theArray[])) {3-}> (Ter,SUU)
  <size(this.theArray[]) == java.lang.Math.min(size(this.theArray[]), size(this.theArray[])) {3-}, size(this.theArray[]) == java.lang.Math.min(size(this.theArray[]), size(this.theArray[])) {3-}> (Ter,SUU)
  <size(this.theArray[]) == java.lang.Math.min(size(this.theArray[]), size(this.theArray[])) {3-}, size(this.theArray[]) == java.lang.Math.min(size(this.theArray[]), size(this.theArray[])) {3-}> (Ter,SUU)
  <size(this.theArray[]) == java.lang.Math.min(size(this.theArray[]), size(this.theArray[])) {3-}, size(this.theArray[]) == java.lang.Math.min(size(this.theArray[]), size(this.theArray[])) {3-}> (Ter,SUU)
  <size(this.theArray[]) == size(this.theArray[]) & size(this.theArray[]) {3-}, size(this.theArray[]) == size(this.theArray[]) & size(this.theArray[]) {3-}> (Ter,SUU)
  <size(this.theArray[]) == size(this.theArray[]) & size(this.theArray[]) {3-}, size(this.theArray[]) == size(this.theArray[]) & size(this.theArray[]) {3-}> (Ter,SUU)
  <size(this.theArray[]) == size(this.theArray[]) & size(this.theArray[]) {3-}, size(this.theArray[]) == size(this.theArray[]) & size(this.theArray[]) {3-}> (Ter,SUU)
  <size(this.theArray[]) == size(this.theArray[]) | size(this.theArray[]) {3-}, size(this.theArray[]) == size(this.theArray[]) | size(this.theArray[]) {3-}> (Ter,SUU)
  <size(this.theArray[]) == size(this.theArray[]) | size(this.theArray[]) {3-}, size(this.theArray[]) == size(this.theArray[]) | size(this.theArray[]) {3-}> (Ter,SUU)
  <size(this.theArray[]) == size(this.theArray[]) | size(this.theArray[]) {3-}, size(this.theArray[]) == size(this.theArray[]) | size(this.theArray[]) {3-}> (Ter,SUU)
  <size(this.theArray[]) == org.plumelib.util.MathPlume.gcd(size(this.theArray[]), size(this.theArray[])) {3-}, size(this.theArray[]) == org.plumelib.util.MathPlume.gcd(size(this.theArray[]), size(this.theArray[])) {3-}> (Ter,SUU)
  <size(this.theArray[]) == org.plumelib.util.MathPlume.gcd(size(this.theArray[]), size(this.theArray[])) {3-}, size(this.theArray[]) == org.plumelib.util.MathPlume.gcd(size(this.theArray[]), size(this.theArray[])) {3-}> (Ter,SUU)
  <size(this.theArray[]) == org.plumelib.util.MathPlume.gcd(size(this.theArray[]), size(this.theArray[])) {3-}, size(this.theArray[]) == org.plumelib.util.MathPlume.gcd(size(this.theArray[]), size(this.theArray[])) {3-}> (Ter,SUU)
  <size(this.theArray[]) == java.lang.Math.max(size(this.theArray[])-1, size(this.theArray[])) {0.5-}, size(this.theArray[]) == java.lang.Math.max(size(this.theArray[])-1, size(this.theArray[])) {0-}> (Ter,SUJ)
  <size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[])-1, size(this.theArray[])) {0.25-}, size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[])-1, size(this.theArray[])) {0-}> (Ter,SUJ)
  <null, size(this.theArray[])-1 == size(this.theArray[])-1 % size(this.theArray[]) {0-}> (Ter,MJ)
  <size(this.theArray[])-1 == java.lang.Math.max(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == java.lang.Math.max(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == java.lang.Math.max(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == java.lang.Math.max(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == java.lang.Math.max(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == java.lang.Math.max(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == size(this.theArray[])-1 & size(this.theArray[])-1 {3-}, size(this.theArray[])-1 == size(this.theArray[])-1 & size(this.theArray[])-1 {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == size(this.theArray[])-1 & size(this.theArray[])-1 {3-}, size(this.theArray[])-1 == size(this.theArray[])-1 & size(this.theArray[])-1 {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == size(this.theArray[])-1 & size(this.theArray[])-1 {3-}, size(this.theArray[])-1 == size(this.theArray[])-1 & size(this.theArray[])-1 {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == size(this.theArray[])-1 | size(this.theArray[])-1 {3-}, size(this.theArray[])-1 == size(this.theArray[])-1 | size(this.theArray[])-1 {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == size(this.theArray[])-1 | size(this.theArray[])-1 {3-}, size(this.theArray[])-1 == size(this.theArray[])-1 | size(this.theArray[])-1 {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == size(this.theArray[])-1 | size(this.theArray[])-1 {3-}, size(this.theArray[])-1 == size(this.theArray[])-1 | size(this.theArray[])-1 {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == org.plumelib.util.MathPlume.gcd(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == org.plumelib.util.MathPlume.gcd(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == org.plumelib.util.MathPlume.gcd(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == org.plumelib.util.MathPlume.gcd(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == org.plumelib.util.MathPlume.gcd(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == org.plumelib.util.MathPlume.gcd(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[]) == java.lang.Math.max(this.topOfStack, size(this.theArray[])) {0-}, size(this.theArray[]) == java.lang.Math.max(this.topOfStack, size(this.theArray[])) {0-}> (Ter,SJJ)
  <size(this.theArray[]) == java.lang.Math.max(this.topOfStack, size(this.theArray[])) {0-}, size(this.theArray[]) == java.lang.Math.max(this.topOfStack, size(this.theArray[])) {0-}> (Ter,SJJ)
  <size(this.theArray[])-1 == java.lang.Math.max(this.topOfStack, size(this.theArray[])-1) {0-}, size(this.theArray[])-1 == java.lang.Math.max(this.topOfStack, size(this.theArray[])-1) {0-}> (Ter,SJJ)
  <size(this.theArray[])-1 == java.lang.Math.max(this.topOfStack, size(this.theArray[])-1) {0-}, size(this.theArray[])-1 == java.lang.Math.max(this.topOfStack, size(this.theArray[])-1) {0-}> (Ter,SJJ)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])) {0.25-}, this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])) {0-}> (Ter,SUJ)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])) {0.25-}, this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])) {0-}> (Ter,SUJ)
  <null, this.topOfStack == this.topOfStack % size(this.theArray[]) {0-}> (Ter,MJ)
  <null, this.topOfStack == this.topOfStack % size(this.theArray[]) {0-}> (Ter,MJ)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])-1) {0.5-}, this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])-1) {0-}> (Ter,SUJ)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])-1) {0.5-}, this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])-1) {0-}> (Ter,SUJ)
  <this.topOfStack == java.lang.Math.max(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == java.lang.Math.max(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <this.topOfStack == java.lang.Math.max(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == java.lang.Math.max(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <this.topOfStack == java.lang.Math.max(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == java.lang.Math.max(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == java.lang.Math.min(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == java.lang.Math.min(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == java.lang.Math.min(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <this.topOfStack == this.topOfStack & this.topOfStack {3-}, this.topOfStack == this.topOfStack & this.topOfStack {3-}> (Ter,SUU)
  <this.topOfStack == this.topOfStack & this.topOfStack {3-}, this.topOfStack == this.topOfStack & this.topOfStack {3-}> (Ter,SUU)
  <this.topOfStack == this.topOfStack & this.topOfStack {3-}, this.topOfStack == this.topOfStack & this.topOfStack {3-}> (Ter,SUU)
  <this.topOfStack == this.topOfStack | this.topOfStack {3-}, this.topOfStack == this.topOfStack | this.topOfStack {3-}> (Ter,SUU)
  <this.topOfStack == this.topOfStack | this.topOfStack {3-}, this.topOfStack == this.topOfStack | this.topOfStack {3-}> (Ter,SUU)
  <this.topOfStack == this.topOfStack | this.topOfStack {3-}, this.topOfStack == this.topOfStack | this.topOfStack {3-}> (Ter,SUU)
  <this.topOfStack == org.plumelib.util.MathPlume.gcd(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == org.plumelib.util.MathPlume.gcd(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <this.topOfStack == org.plumelib.util.MathPlume.gcd(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == org.plumelib.util.MathPlume.gcd(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <this.topOfStack == org.plumelib.util.MathPlume.gcd(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == org.plumelib.util.MathPlume.gcd(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == 2 * size(this.theArray[]) - size(this.theArray[]) - 1 {0-}, size(this.theArray[])-1 == 2 * size(this.theArray[]) - size(this.theArray[]) - 1 {0-}> (Ter,SJJ)
  <size(this.theArray[])-1 == 0.5 * size(this.theArray[]) + 0.5 * size(this.theArray[])-1 - 0.5 {0-}, size(this.theArray[])-1 == 0.5 * size(this.theArray[]) + 0.5 * size(this.theArray[])-1 - 0.5 {0-}> (Ter,SJJ)
  <size(this.theArray[]) >= 0 {0-}, size(this.theArray[]) >= 2 {0.8733-}> (UInt,DJU)
  <this.topOfStack >= -1 {0+}, this.topOfStack >= -1 {0+}> (U!Int,SJJ)
  <null, size(this.theArray[]) != 0 {1-}> (UInt,MU)
  <null, size(this.theArray[])-1 != 0 {1-}> (UInt,MU)
  <this.theArray != null {0.0001+}, this.theArray != null {0.0001+}> (UInt,SJJ)
  <this.theArray[this.topOfStack-1] != null {0.0001-}, this.theArray[this.topOfStack-1] != null {0.0001-}> (UInt,SJJ)
  <this.theArray[this.topOfStack] != null {0.0001-}, this.theArray[this.topOfStack] != null {0.0001-}> (UInt,SJJ)
  <size(this.theArray[]) <= 20 {0-}, size(this.theArray[]) <= 15 {0.0498-}> (U!Int,DJU)
  <this.topOfStack <= 19 {1-}, this.topOfStack <= 14 {1-}> (U!Int,DUU)
  <this.theArray[0..this.topOfStack-1] elements != null {0.0001-}, this.theArray[0..this.topOfStack-1] elements != null {0.0001-}> (UInt,SJJ)
  <this.theArray[0..this.topOfStack] elements != null {0.0001+}, this.theArray[0..this.topOfStack] elements != null {0.0001+}> (UInt,SJJ)
  <this.theArray[this.topOfStack+1..] elements == null {0+}, this.theArray[this.topOfStack+1..] elements == null {0+}> (UInt,SJJ)
  <this.theArray[this.topOfStack+1..] elements are equal {0-}, this.theArray[this.topOfStack+1..] elements are equal {0-}> (UInt,SJJ)
  <this.theArray[0..this.topOfStack-1] contains no duplicates {0.0646-}, this.theArray[0..this.topOfStack-1] contains no duplicates {0.0343-}> (UInt,SUU)
  <this.theArray[0..this.topOfStack] contains no duplicates {0.0471-}, this.theArray[0..this.topOfStack] contains no duplicates {0.0203-}> (UInt,SUU)
  <this.theArray.class == "[Ljava.lang.Object;" {0+}, this.theArray.class == "[Ljava.lang.Object;" {0+}> (UInt,SJJ)
<DataStructures.StackAr.topAndPop()Ljava/lang/Object;:::EXIT>
  <this.theArray[this.topOfStack-1] in orig(this.theArray[]) {0-}, this.theArray[this.topOfStack-1] in orig(this.theArray[]) {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack] in orig(this.theArray[]) {0-}, this.theArray[this.topOfStack] in orig(this.theArray[]) {0-}> (Bin,SJJ)
  <orig(this.theArray[this.topOfStack]) in orig(this.theArray[post(this.topOfStack)..]) {0+}, orig(this.theArray[this.topOfStack]) in orig(this.theArray[post(this.topOfStack)..]) {0+}> (Bin,SJJ)
  <orig(this.theArray[this.topOfStack]) in orig(this.theArray[post(this.topOfStack+1)..]) {0+}, orig(this.theArray[this.topOfStack]) in orig(this.theArray[post(this.topOfStack+1)..]) {0+}> (Bin,SJJ)
  <null, return in orig(this.theArray[]) {0+}> (Bin,MJ)
  <return in orig(this.theArray[post(this.topOfStack)..]) {0+}, return in orig(this.theArray[post(this.topOfStack)..]) {0+}> (Bin,SJJ)
  <null, return in orig(this.theArray[post(this.topOfStack+1)..]) {0+}> (Bin,MJ)
  <return in orig(this.theArray[this.topOfStack..]) {0+}, return in orig(this.theArray[this.topOfStack..]) {0+}> (Bin,SJJ)
  <this.theArray[this.topOfStack-1] in this.theArray[] {0-}, this.theArray[this.topOfStack-1] in this.theArray[] {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack] in this.theArray[] {0-}, this.theArray[this.topOfStack] in this.theArray[] {0-}> (Bin,SJJ)
  <this.theArray[orig(this.topOfStack)] in this.theArray[this.topOfStack+1..] {0+}, this.theArray[orig(this.topOfStack)] in this.theArray[this.topOfStack+1..] {0+}> (Bin,SJJ)
  <this.theArray[this.topOfStack-1] in orig(this.theArray[0..this.topOfStack]) {0+}, this.theArray[this.topOfStack-1] in orig(this.theArray[0..this.topOfStack]) {0+}> (Bin,SJJ)
  <this.theArray[this.topOfStack-1] in this.theArray[0..orig(this.topOfStack)-1] {0+}, this.theArray[this.topOfStack-1] in this.theArray[0..orig(this.topOfStack)-1] {0+}> (Bin,SJJ)
  <this.theArray[this.topOfStack-1] in this.theArray[0..orig(this.topOfStack)] {0+}, this.theArray[this.topOfStack-1] in this.theArray[0..orig(this.topOfStack)] {0+}> (Bin,SJJ)
  <this.theArray[this.topOfStack-1] in this.theArray[0..this.topOfStack-1] {0-}, this.theArray[this.topOfStack-1] in this.theArray[0..this.topOfStack-1] {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack-1] in this.theArray[0..this.topOfStack] {0-}, this.theArray[this.topOfStack-1] in this.theArray[0..this.topOfStack] {0-}> (Bin,SJJ)
  <this.theArray[orig(this.topOfStack)] in this.theArray[this.topOfStack..] {0+}, this.theArray[orig(this.topOfStack)] in this.theArray[this.topOfStack..] {0+}> (Bin,SJJ)
  <this.theArray[this.topOfStack] in orig(this.theArray[0..this.topOfStack]) {0-}, this.theArray[this.topOfStack] in orig(this.theArray[0..this.topOfStack]) {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack] in orig(this.theArray[post(this.topOfStack)..]) {0-}, this.theArray[this.topOfStack] in orig(this.theArray[post(this.topOfStack)..]) {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack] in this.theArray[0..orig(this.topOfStack)-1] {0-}, this.theArray[this.topOfStack] in this.theArray[0..orig(this.topOfStack)-1] {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack] in this.theArray[0..orig(this.topOfStack)] {0-}, this.theArray[this.topOfStack] in this.theArray[0..orig(this.topOfStack)] {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack] in this.theArray[0..this.topOfStack] {0-}, this.theArray[this.topOfStack] in this.theArray[0..this.topOfStack] {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack] in this.theArray[this.topOfStack..] {0-}, this.theArray[this.topOfStack] in this.theArray[this.topOfStack..] {0-}> (Bin,SJJ)
  <this.theArray[orig(this.topOfStack)+1..] elements == this.theArray[orig(this.topOfStack)] {0-}, this.theArray[orig(this.topOfStack)+1..] elements == this.theArray[orig(this.topOfStack)] {0-}> (Bin,SJJ)
  <this.theArray[orig(this.topOfStack)..] elements == this.theArray[orig(this.topOfStack)] {0+}, this.theArray[orig(this.topOfStack)..] elements == this.theArray[orig(this.topOfStack)] {0+}> (Bin,SJJ)
  <this.theArray[this.topOfStack+1..] elements == this.theArray[orig(this.topOfStack)] {0+}, this.theArray[this.topOfStack+1..] elements == this.theArray[orig(this.topOfStack)] {0+}> (Bin,SJJ)
  <orig(this.theArray[this.topOfStack]) == orig(this.theArray[this.topOfStack]) {0-}, orig(this.theArray[this.topOfStack]) == orig(this.theArray[this.topOfStack]) {0-}> (Bin,SJJ)
  <orig(this.topOfStack) == orig(this.topOfStack) {0-}, orig(this.topOfStack) == orig(this.topOfStack) {0-}> (Bin,SJJ)
  <return == orig(this.theArray[this.topOfStack]) {0+}, return == orig(this.theArray[this.topOfStack]) {0+}> (Bin,SJJ)
  <return == return {0-}, return == return {0-}> (Bin,SJJ)
  <size(this.theArray[]) == orig(size(this.theArray[])) {0+}, size(this.theArray[]) == orig(size(this.theArray[])) {0+}> (Bin,SJJ)
  <size(this.theArray[]) == size(this.theArray[]) {0-}, size(this.theArray[]) == size(this.theArray[]) {0-}> (Bin,SJJ)
  <size(this.theArray[])-1 == orig(size(this.theArray[]))-1 {0-}, size(this.theArray[])-1 == orig(size(this.theArray[]))-1 {0-}> (Bin,SJJ)
  <size(this.theArray[])-1 == size(this.theArray[])-1 {0-}, size(this.theArray[])-1 == size(this.theArray[])-1 {0-}> (Bin,SJJ)
  <this.theArray == orig(this.theArray) {0+}, this.theArray == orig(this.theArray) {0+}> (Bin,SJJ)
  <this.theArray == this.theArray {0-}, this.theArray == this.theArray {0-}> (Bin,SJJ)
  <this.theArray[orig(this.topOfStack)] == this.theArray[orig(this.topOfStack)] {0-}, this.theArray[orig(this.topOfStack)] == this.theArray[orig(this.topOfStack)] {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack-1] == orig(this.theArray[post(this.topOfStack-1)]) {0+}, this.theArray[this.topOfStack-1] == orig(this.theArray[post(this.topOfStack-1)]) {0+}> (Bin,SJJ)
  <this.theArray[this.topOfStack-1] == this.theArray[this.topOfStack-1] {0-}, this.theArray[this.topOfStack-1] == this.theArray[this.topOfStack-1] {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack] == orig(this.theArray[post(this.topOfStack)]) {0+}, this.theArray[this.topOfStack] == orig(this.theArray[post(this.topOfStack)]) {0+}> (Bin,SJJ)
  <this.theArray[this.topOfStack] == orig(this.theArray[this.topOfStack-1]) {0+}, this.theArray[this.topOfStack] == orig(this.theArray[this.topOfStack-1]) {0+}> (Bin,SJJ)
  <this.theArray[this.topOfStack] == this.theArray[orig(this.topOfStack)-1] {0+}, this.theArray[this.topOfStack] == this.theArray[orig(this.topOfStack)-1] {0+}> (Bin,SJJ)
  <this.theArray[this.topOfStack] == this.theArray[this.topOfStack] {0-}, this.theArray[this.topOfStack] == this.theArray[this.topOfStack] {0-}> (Bin,SJJ)
  <this.topOfStack == this.topOfStack {0-}, this.topOfStack == this.topOfStack {0-}> (Bin,SJJ)
  <orig(this.topOfStack) >= orig(this.topOfStack) {0.6426-}, orig(this.topOfStack) >= orig(this.topOfStack) {0.6235-}> (Bin,SUU)
  <size(this.theArray[]) >= size(this.theArray[]) {0.6426-}, size(this.theArray[]) >= size(this.theArray[]) {0.6235-}> (Bin,SUU)
  <size(this.theArray[]) >= size(this.theArray[])-1 {0.0803-}, size(this.theArray[]) >= size(this.theArray[])-1 {0.039-}> (Bin,SUU)
  <size(this.theArray[])-1 >= size(this.theArray[])-1 {0.6426-}, size(this.theArray[])-1 >= size(this.theArray[])-1 {0.6235-}> (Bin,SUU)
  <this.topOfStack >= this.topOfStack {0.6426-}, this.topOfStack >= this.topOfStack {0.6235-}> (Bin,SUU)
  <size(this.theArray[]) > size(this.theArray[])-1 {0.0803-}, size(this.theArray[]) > size(this.theArray[])-1 {0.039-}> (Bin,SUU)
  <orig(this.topOfStack) <= orig(this.topOfStack) {0.6426-}, orig(this.topOfStack) <= orig(this.topOfStack) {0.6235-}> (Bin,SUU)
  <orig(this.topOfStack) <= size(this.theArray[]) {0.0025-}, orig(this.topOfStack) <= size(this.theArray[]) {0.0024-}> (Bin,SJJ)
  <orig(this.topOfStack) <= size(this.theArray[])-1 {0.0025+}, orig(this.topOfStack) <= size(this.theArray[])-1 {0.0024+}> (Bin,SJJ)
  <size(this.theArray[]) <= size(this.theArray[]) {0.6426-}, size(this.theArray[]) <= size(this.theArray[]) {0.6235-}> (Bin,SUU)
  <size(this.theArray[])-1 <= size(this.theArray[])-1 {0.6426-}, size(this.theArray[])-1 <= size(this.theArray[])-1 {0.6235-}> (Bin,SUU)
  <this.topOfStack <= orig(this.topOfStack) {0.0201-}, this.topOfStack <= orig(this.topOfStack) {0.039-}> (Bin,SUU)
  <this.topOfStack <= size(this.theArray[]) {0.0025-}, this.topOfStack <= size(this.theArray[]) {0.0024-}> (Bin,SJJ)
  <this.topOfStack <= size(this.theArray[])-1 {0.0025+}, this.topOfStack <= size(this.theArray[])-1 {0.0024-}> (Bin,SJJ)
  <this.topOfStack <= this.topOfStack {0.6426-}, this.topOfStack <= this.topOfStack {0.6235-}> (Bin,SUU)
  <orig(this.topOfStack) < size(this.theArray[]) {0.0025-}, orig(this.topOfStack) < size(this.theArray[]) {0.0024-}> (Bin,SJJ)
  <this.topOfStack < size(this.theArray[]) {0.0025-}, this.topOfStack < size(this.theArray[]) {0.0024-}> (Bin,SJJ)
  <null, this.topOfStack < size(this.theArray[])-1 {0.0024+}> (Bin,MJ)
  <orig(this.topOfStack) != size(this.theArray[]) {0.0025-}, orig(this.topOfStack) != size(this.theArray[]) {0.0024-}> (Bin,SJJ)
  <size(this.theArray[]) != size(this.theArray[])-1 {0.0803-}, size(this.theArray[]) != size(this.theArray[])-1 {0.039-}> (Bin,SUU)
  <this.topOfStack != size(this.theArray[]) {0.0025-}, this.topOfStack != size(this.theArray[]) {0.0024-}> (Bin,SJJ)
  <null, this.topOfStack != size(this.theArray[])-1 {0.0024-}> (Bin,MJ)
  <orig(this.topOfStack) == orig(this.topOfStack) {0-}, orig(this.topOfStack) == orig(this.topOfStack) {0-}> (Bin,SJJ)
  <size(this.theArray[]) == size(this.theArray[]) {0-}, size(this.theArray[]) == size(this.theArray[]) {0-}> (Bin,SJJ)
  <size(this.theArray[])-1 == size(this.theArray[]) - 1 {0-}, size(this.theArray[])-1 == size(this.theArray[]) - 1 {0-}> (Bin,SJJ)
  <size(this.theArray[])-1 == size(this.theArray[])-1 {0-}, size(this.theArray[])-1 == size(this.theArray[])-1 {0-}> (Bin,SJJ)
  <this.topOfStack == this.topOfStack {0-}, this.topOfStack == this.topOfStack {0-}> (Bin,SJJ)
  <orig(this.theArray[0..this.topOfStack]) == orig(this.theArray[0..this.topOfStack]) (elementwise) {0-}, orig(this.theArray[0..this.topOfStack]) == orig(this.theArray[0..this.topOfStack]) (elementwise) {0-}> (Bin,SJJ)
  <orig(this.theArray[]) == orig(this.theArray[]) (elementwise) {0-}, orig(this.theArray[]) == orig(this.theArray[]) (elementwise) {0-}> (Bin,SJJ)
  <orig(this.theArray[post(this.topOfStack)..]) == orig(this.theArray[post(this.topOfStack)..]) (elementwise) {0-}, orig(this.theArray[post(this.topOfStack)..]) == orig(this.theArray[post(this.topOfStack)..]) (elementwise) {0-}> (Bin,SJJ)
  <orig(this.theArray[post(this.topOfStack+1)..]) == orig(this.theArray[post(this.topOfStack+1)..]) (elementwise) {0-}, orig(this.theArray[post(this.topOfStack+1)..]) == orig(this.theArray[post(this.topOfStack+1)..]) (elementwise) {0-}> (Bin,SJJ)
  <orig(this.theArray[post(this.topOfStack+1)..]) == orig(this.theArray[this.topOfStack..]) (elementwise) {0+}, orig(this.theArray[post(this.topOfStack+1)..]) == orig(this.theArray[this.topOfStack..]) (elementwise) {0+}> (Bin,SJJ)
  <orig(this.theArray[this.topOfStack..]) == orig(this.theArray[this.topOfStack..]) (elementwise) {0-}, orig(this.theArray[this.topOfStack..]) == orig(this.theArray[this.topOfStack..]) (elementwise) {0-}> (Bin,SJJ)
  <this.theArray[0..orig(this.topOfStack)-1] == this.theArray[0..orig(this.topOfStack)-1] (elementwise) {0-}, this.theArray[0..orig(this.topOfStack)-1] == this.theArray[0..orig(this.topOfStack)-1] (elementwise) {0-}> (Bin,SJJ)
  <this.theArray[0..orig(this.topOfStack)] == this.theArray[0..orig(this.topOfStack)] (elementwise) {0-}, this.theArray[0..orig(this.topOfStack)] == this.theArray[0..orig(this.topOfStack)] (elementwise) {0-}> (Bin,SJJ)
  <this.theArray[0..this.topOfStack-1] == this.theArray[0..this.topOfStack-1] (elementwise) {0-}, this.theArray[0..this.topOfStack-1] == this.theArray[0..this.topOfStack-1] (elementwise) {0-}> (Bin,SJJ)
  <this.theArray[0..this.topOfStack] == this.theArray[0..orig(this.topOfStack)-1] (elementwise) {0+}, this.theArray[0..this.topOfStack] == this.theArray[0..orig(this.topOfStack)-1] (elementwise) {0+}> (Bin,SJJ)
  <this.theArray[0..this.topOfStack] == this.theArray[0..this.topOfStack] (elementwise) {0-}, this.theArray[0..this.topOfStack] == this.theArray[0..this.topOfStack] (elementwise) {0-}> (Bin,SJJ)
  <this.theArray[] == this.theArray[] (elementwise) {0-}, this.theArray[] == this.theArray[] (elementwise) {0-}> (Bin,SJJ)
  <this.theArray[orig(this.topOfStack)+1..] == this.theArray[orig(this.topOfStack)+1..] (elementwise) {0-}, this.theArray[orig(this.topOfStack)+1..] == this.theArray[orig(this.topOfStack)+1..] (elementwise) {0-}> (Bin,SJJ)
  <this.theArray[orig(this.topOfStack)..] == this.theArray[orig(this.topOfStack)..] (elementwise) {0-}, this.theArray[orig(this.topOfStack)..] == this.theArray[orig(this.topOfStack)..] (elementwise) {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack+1..] == this.theArray[orig(this.topOfStack)..] (elementwise) {0+}, this.theArray[this.topOfStack+1..] == this.theArray[orig(this.topOfStack)..] (elementwise) {0+}> (Bin,SJJ)
  <this.theArray[this.topOfStack+1..] == this.theArray[this.topOfStack+1..] (elementwise) {0-}, this.theArray[this.topOfStack+1..] == this.theArray[this.topOfStack+1..] (elementwise) {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack..] == this.theArray[this.topOfStack..] (elementwise) {0-}, this.theArray[this.topOfStack..] == this.theArray[this.topOfStack..] (elementwise) {0-}> (Bin,SJJ)
  <orig(this.theArray[0..this.topOfStack]) == orig(this.theArray[0..this.topOfStack]) {0-}, orig(this.theArray[0..this.topOfStack]) == orig(this.theArray[0..this.topOfStack]) {0-}> (Bin,SJJ)
  <orig(this.theArray[]) == orig(this.theArray[]) {0-}, orig(this.theArray[]) == orig(this.theArray[]) {0-}> (Bin,SJJ)
  <orig(this.theArray[post(this.topOfStack)..]) == orig(this.theArray[post(this.topOfStack)..]) {0-}, orig(this.theArray[post(this.topOfStack)..]) == orig(this.theArray[post(this.topOfStack)..]) {0-}> (Bin,SJJ)
  <orig(this.theArray[post(this.topOfStack+1)..]) == orig(this.theArray[post(this.topOfStack+1)..]) {0-}, orig(this.theArray[post(this.topOfStack+1)..]) == orig(this.theArray[post(this.topOfStack+1)..]) {0-}> (Bin,SJJ)
  <orig(this.theArray[this.topOfStack..]) == orig(this.theArray[post(this.topOfStack+1)..]) {0-}, orig(this.theArray[this.topOfStack..]) == orig(this.theArray[post(this.topOfStack+1)..]) {0-}> (Bin,SJJ)
  <orig(this.theArray[this.topOfStack..]) == orig(this.theArray[this.topOfStack..]) {0-}, orig(this.theArray[this.topOfStack..]) == orig(this.theArray[this.topOfStack..]) {0-}> (Bin,SJJ)
  <this.theArray[0..orig(this.topOfStack)-1] == this.theArray[0..orig(this.topOfStack)-1] {0-}, this.theArray[0..orig(this.topOfStack)-1] == this.theArray[0..orig(this.topOfStack)-1] {0-}> (Bin,SJJ)
  <this.theArray[0..orig(this.topOfStack)] == this.theArray[0..orig(this.topOfStack)] {0-}, this.theArray[0..orig(this.topOfStack)] == this.theArray[0..orig(this.topOfStack)] {0-}> (Bin,SJJ)
  <this.theArray[0..this.topOfStack-1] == this.theArray[0..this.topOfStack-1] {0-}, this.theArray[0..this.topOfStack-1] == this.theArray[0..this.topOfStack-1] {0-}> (Bin,SJJ)
  <this.theArray[0..orig(this.topOfStack)-1] == this.theArray[0..this.topOfStack] {0-}, this.theArray[0..orig(this.topOfStack)-1] == this.theArray[0..this.topOfStack] {0-}> (Bin,SJJ)
  <this.theArray[0..this.topOfStack] == this.theArray[0..this.topOfStack] {0-}, this.theArray[0..this.topOfStack] == this.theArray[0..this.topOfStack] {0-}> (Bin,SJJ)
  <this.theArray[] == this.theArray[] {0-}, this.theArray[] == this.theArray[] {0-}> (Bin,SJJ)
  <Too few samples for linear relation: 0 * Slice{Add{+1}[Prestate[Field{topOfStack}[this]]],}[Elements[Field{theArray}[this]]] == 0 * Slice{Add{+1}[Prestate[Field{topOfStack}[this]]],}[Elements[Field{theArray}[this]]] + 0 {1-}, Too few samples for linear relation: 0 * Slice{Add{+1}[Prestate[Field{topOfStack}[this]]],}[Elements[Field{theArray}[this]]] == 0 * Slice{Add{+1}[Prestate[Field{topOfStack}[this]]],}[Elements[Field{theArray}[this]]] + 0 {1-}> (Bin,SUU)
  <Too few samples for linear relation: 0 * Slice{Prestate[Field{topOfStack}[this]],}[Elements[Field{theArray}[this]]] == 0 * Slice{Prestate[Field{topOfStack}[this]],}[Elements[Field{theArray}[this]]] + 0 {1-}, Too few samples for linear relation: 0 * Slice{Prestate[Field{topOfStack}[this]],}[Elements[Field{theArray}[this]]] == 0 * Slice{Prestate[Field{topOfStack}[this]],}[Elements[Field{theArray}[this]]] + 0 {1-}> (Bin,SUU)
  <Too few samples for linear relation: 0 * Slice{Prestate[Field{topOfStack}[this]],}[Elements[Field{theArray}[this]]] == 0 * Slice{Add{+1}[Field{topOfStack}[this]],}[Elements[Field{theArray}[this]]] + 0 {1-}, Too few samples for linear relation: 0 * Slice{Prestate[Field{topOfStack}[this]],}[Elements[Field{theArray}[this]]] == 0 * Slice{Add{+1}[Field{topOfStack}[this]],}[Elements[Field{theArray}[this]]] + 0 {1-}> (Bin,SUU)
  <Too few samples for linear relation: 0 * Slice{Add{+1}[Field{topOfStack}[this]],}[Elements[Field{theArray}[this]]] == 0 * Slice{Add{+1}[Field{topOfStack}[this]],}[Elements[Field{theArray}[this]]] + 0 {1-}, Too few samples for linear relation: 0 * Slice{Add{+1}[Field{topOfStack}[this]],}[Elements[Field{theArray}[this]]] == 0 * Slice{Add{+1}[Field{topOfStack}[this]],}[Elements[Field{theArray}[this]]] + 0 {1-}> (Bin,SUU)
  <this.theArray[this.topOfStack..] == this.theArray[this.topOfStack..] {0-}, this.theArray[this.topOfStack..] == this.theArray[this.topOfStack..] {0-}> (Bin,SJJ)
  <this.theArray[orig(this.topOfStack)+1..] is the reverse of this.theArray[orig(this.topOfStack)+1..] {0-}, this.theArray[orig(this.topOfStack)+1..] is the reverse of this.theArray[orig(this.topOfStack)+1..] {0-}> (Bin,SJJ)
  <this.theArray[orig(this.topOfStack)..] is the reverse of this.theArray[orig(this.topOfStack)..] {0-}, this.theArray[orig(this.topOfStack)..] is the reverse of this.theArray[orig(this.topOfStack)..] {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack+1..] is the reverse of this.theArray[orig(this.topOfStack)..] {0+}, this.theArray[this.topOfStack+1..] is the reverse of this.theArray[orig(this.topOfStack)..] {0+}> (Bin,SJJ)
  <this.theArray[this.topOfStack+1..] is the reverse of this.theArray[this.topOfStack+1..] {0-}, this.theArray[this.topOfStack+1..] is the reverse of this.theArray[this.topOfStack+1..] {0-}> (Bin,SJJ)
  <orig(this.theArray[0..this.topOfStack]) == orig(this.theArray[0..this.topOfStack]) {0-}, orig(this.theArray[0..this.topOfStack]) == orig(this.theArray[0..this.topOfStack]) {0-}> (Bin,SJJ)
  <orig(this.theArray[]) == orig(this.theArray[]) {0-}, orig(this.theArray[]) == orig(this.theArray[]) {0-}> (Bin,SJJ)
  <orig(this.theArray[post(this.topOfStack)..]) == orig(this.theArray[post(this.topOfStack)..]) {0-}, orig(this.theArray[post(this.topOfStack)..]) == orig(this.theArray[post(this.topOfStack)..]) {0-}> (Bin,SJJ)
  <orig(this.theArray[post(this.topOfStack+1)..]) == orig(this.theArray[post(this.topOfStack+1)..]) {0-}, orig(this.theArray[post(this.topOfStack+1)..]) == orig(this.theArray[post(this.topOfStack+1)..]) {0-}> (Bin,SJJ)
  <orig(this.theArray[post(this.topOfStack+1)..]) == orig(this.theArray[this.topOfStack..]) {0-}, orig(this.theArray[post(this.topOfStack+1)..]) == orig(this.theArray[this.topOfStack..]) {0-}> (Bin,SJJ)
  <orig(this.theArray[this.topOfStack..]) == orig(this.theArray[this.topOfStack..]) {0-}, orig(this.theArray[this.topOfStack..]) == orig(this.theArray[this.topOfStack..]) {0-}> (Bin,SJJ)
  <this.theArray[0..orig(this.topOfStack)-1] == orig(this.theArray[0..this.topOfStack-1]) {0+}, this.theArray[0..orig(this.topOfStack)-1] == orig(this.theArray[0..this.topOfStack-1]) {0+}> (Bin,SJJ)
  <this.theArray[0..orig(this.topOfStack)-1] == this.theArray[0..orig(this.topOfStack)-1] {0-}, this.theArray[0..orig(this.topOfStack)-1] == this.theArray[0..orig(this.topOfStack)-1] {0-}> (Bin,SJJ)
  <this.theArray[0..orig(this.topOfStack)] == this.theArray[0..orig(this.topOfStack)] {0-}, this.theArray[0..orig(this.topOfStack)] == this.theArray[0..orig(this.topOfStack)] {0-}> (Bin,SJJ)
  <this.theArray[0..this.topOfStack-1] == orig(this.theArray[0..post(this.topOfStack-1)]) {0+}, this.theArray[0..this.topOfStack-1] == orig(this.theArray[0..post(this.topOfStack-1)]) {0+}> (Bin,SJJ)
  <this.theArray[0..this.topOfStack-1] == this.theArray[0..this.topOfStack-1] {0-}, this.theArray[0..this.topOfStack-1] == this.theArray[0..this.topOfStack-1] {0-}> (Bin,SJJ)
  <this.theArray[0..this.topOfStack] == orig(this.theArray[0..post(this.topOfStack)]) {0+}, this.theArray[0..this.topOfStack] == orig(this.theArray[0..post(this.topOfStack)]) {0+}> (Bin,SJJ)
  <this.theArray[0..this.topOfStack] == this.theArray[0..orig(this.topOfStack)-1] {0-}, this.theArray[0..this.topOfStack] == this.theArray[0..orig(this.topOfStack)-1] {0-}> (Bin,SJJ)
  <this.theArray[0..this.topOfStack] == this.theArray[0..this.topOfStack] {0-}, this.theArray[0..this.topOfStack] == this.theArray[0..this.topOfStack] {0-}> (Bin,SJJ)
  <this.theArray[] == this.theArray[] {0-}, this.theArray[] == this.theArray[] {0-}> (Bin,SJJ)
  <this.theArray[orig(this.topOfStack)+1..] == orig(this.theArray[this.topOfStack+1..]) {0+}, this.theArray[orig(this.topOfStack)+1..] == orig(this.theArray[this.topOfStack+1..]) {0+}> (Bin,SJJ)
  <this.theArray[orig(this.topOfStack)+1..] == this.theArray[orig(this.topOfStack)+1..] {0-}, this.theArray[orig(this.topOfStack)+1..] == this.theArray[orig(this.topOfStack)+1..] {0-}> (Bin,SJJ)
  <this.theArray[orig(this.topOfStack)..] == this.theArray[orig(this.topOfStack)..] {0-}, this.theArray[orig(this.topOfStack)..] == this.theArray[orig(this.topOfStack)..] {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack+1..] == this.theArray[orig(this.topOfStack)..] {0-}, this.theArray[this.topOfStack+1..] == this.theArray[orig(this.topOfStack)..] {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack+1..] == this.theArray[this.topOfStack+1..] {0-}, this.theArray[this.topOfStack+1..] == this.theArray[this.topOfStack+1..] {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack..] == this.theArray[this.topOfStack..] {0-}, this.theArray[this.topOfStack..] == this.theArray[this.topOfStack..] {0-}> (Bin,SJJ)
  <orig(this.theArray[]) is a {sub,super}sequence of orig(this.theArray[]) {1-}, orig(this.theArray[]) is a {sub,super}sequence of orig(this.theArray[]) {1-}> (Bin,SUU)
  <this.theArray[0..orig(this.topOfStack)-1] is a subsequence of orig(this.theArray[]) {0-}, this.theArray[0..orig(this.topOfStack)-1] is a subsequence of orig(this.theArray[]) {0-}> (Bin,SJJ)
  <this.theArray[0..this.topOfStack-1] is a subsequence of orig(this.theArray[]) {0-}, this.theArray[0..this.topOfStack-1] is a subsequence of orig(this.theArray[]) {0-}> (Bin,SJJ)
  <this.theArray[0..this.topOfStack] is a subsequence of orig(this.theArray[]) {0-}, this.theArray[0..this.topOfStack] is a subsequence of orig(this.theArray[]) {0-}> (Bin,SJJ)
  <this.theArray[orig(this.topOfStack)+1..] is a subsequence of orig(this.theArray[]) {0-}, this.theArray[orig(this.topOfStack)+1..] is a subsequence of orig(this.theArray[]) {0-}> (Bin,SJJ)
  <this.theArray[0..orig(this.topOfStack)-1] is a subsequence of orig(this.theArray[0..this.topOfStack]) {0-}, this.theArray[0..orig(this.topOfStack)-1] is a subsequence of orig(this.theArray[0..this.topOfStack]) {0-}> (Bin,SJJ)
  <this.theArray[0..orig(this.topOfStack)-1] is a {sub,super}sequence of this.theArray[0..orig(this.topOfStack)-1] {1-}, this.theArray[0..orig(this.topOfStack)-1] is a {sub,super}sequence of this.theArray[0..orig(this.topOfStack)-1] {1-}> (Bin,SUU)
  <this.theArray[0..orig(this.topOfStack)-1] is a subsequence of this.theArray[0..orig(this.topOfStack)] {0-}, this.theArray[0..orig(this.topOfStack)-1] is a subsequence of this.theArray[0..orig(this.topOfStack)] {0-}> (Bin,SJJ)
  <this.theArray[0..this.topOfStack-1] is a subsequence of orig(this.theArray[0..this.topOfStack]) {0-}, this.theArray[0..this.topOfStack-1] is a subsequence of orig(this.theArray[0..this.topOfStack]) {0-}> (Bin,SJJ)
  <this.theArray[0..this.topOfStack-1] is a subsequence of this.theArray[0..orig(this.topOfStack)-1] {0-}, this.theArray[0..this.topOfStack-1] is a subsequence of this.theArray[0..orig(this.topOfStack)-1] {0-}> (Bin,SJJ)
  <this.theArray[0..this.topOfStack-1] is a subsequence of this.theArray[0..orig(this.topOfStack)] {0-}, this.theArray[0..this.topOfStack-1] is a subsequence of this.theArray[0..orig(this.topOfStack)] {0-}> (Bin,SJJ)
  <this.theArray[0..this.topOfStack-1] is a {sub,super}sequence of this.theArray[0..this.topOfStack-1] {1-}, this.theArray[0..this.topOfStack-1] is a {sub,super}sequence of this.theArray[0..this.topOfStack-1] {1-}> (Bin,SUU)
  <this.theArray[0..this.topOfStack] is a subsequence of orig(this.theArray[0..this.topOfStack]) {0-}, this.theArray[0..this.topOfStack] is a subsequence of orig(this.theArray[0..this.topOfStack]) {0-}> (Bin,SJJ)
  <this.theArray[0..this.topOfStack] is a {sub,super}sequence of this.theArray[0..orig(this.topOfStack)-1] {1-}, this.theArray[0..this.topOfStack] is a {sub,super}sequence of this.theArray[0..orig(this.topOfStack)-1] {1-}> (Bin,SUU)
  <this.theArray[0..this.topOfStack] is a subsequence of this.theArray[0..orig(this.topOfStack)] {0-}, this.theArray[0..this.topOfStack] is a subsequence of this.theArray[0..orig(this.topOfStack)] {0-}> (Bin,SJJ)
  <this.theArray[0..this.topOfStack-1] is a subsequence of this.theArray[0..this.topOfStack] {0-}, this.theArray[0..this.topOfStack-1] is a subsequence of this.theArray[0..this.topOfStack] {0-}> (Bin,SJJ)
  <this.theArray[0..this.topOfStack] is a {sub,super}sequence of this.theArray[0..this.topOfStack] {1-}, this.theArray[0..this.topOfStack] is a {sub,super}sequence of this.theArray[0..this.topOfStack] {1-}> (Bin,SUU)
  <this.theArray[0..orig(this.topOfStack)-1] is a subsequence of this.theArray[] {0-}, this.theArray[0..orig(this.topOfStack)-1] is a subsequence of this.theArray[] {0-}> (Bin,SJJ)
  <this.theArray[0..this.topOfStack-1] is a subsequence of this.theArray[] {0-}, this.theArray[0..this.topOfStack-1] is a subsequence of this.theArray[] {0-}> (Bin,SJJ)
  <this.theArray[0..this.topOfStack] is a subsequence of this.theArray[] {0-}, this.theArray[0..this.topOfStack] is a subsequence of this.theArray[] {0-}> (Bin,SJJ)
  <this.theArray[] is a {sub,super}sequence of this.theArray[] {1-}, this.theArray[] is a {sub,super}sequence of this.theArray[] {1-}> (Bin,SUU)
  <this.theArray[orig(this.topOfStack)+1..] is a subsequence of this.theArray[] {0-}, this.theArray[orig(this.topOfStack)+1..] is a subsequence of this.theArray[] {0-}> (Bin,SJJ)
  <this.theArray[orig(this.topOfStack)+1..] is a subsequence of orig(this.theArray[post(this.topOfStack)..]) {0-}, this.theArray[orig(this.topOfStack)+1..] is a subsequence of orig(this.theArray[post(this.topOfStack)..]) {0-}> (Bin,SJJ)
  <this.theArray[orig(this.topOfStack)+1..] is a subsequence of orig(this.theArray[post(this.topOfStack+1)..]) {0-}, this.theArray[orig(this.topOfStack)+1..] is a subsequence of orig(this.theArray[post(this.topOfStack+1)..]) {0-}> (Bin,SJJ)
  <this.theArray[orig(this.topOfStack)+1..] is a subsequence of orig(this.theArray[this.topOfStack..]) {0-}, this.theArray[orig(this.topOfStack)+1..] is a subsequence of orig(this.theArray[this.topOfStack..]) {0-}> (Bin,SJJ)
  <this.theArray[orig(this.topOfStack)+1..] is a {sub,super}sequence of this.theArray[orig(this.topOfStack)+1..] {1-}, this.theArray[orig(this.topOfStack)+1..] is a {sub,super}sequence of this.theArray[orig(this.topOfStack)+1..] {1-}> (Bin,SUU)
  <this.theArray[orig(this.topOfStack)+1..] is a subsequence of this.theArray[orig(this.topOfStack)..] {0-}, this.theArray[orig(this.topOfStack)+1..] is a subsequence of this.theArray[orig(this.topOfStack)..] {0-}> (Bin,SJJ)
  <this.theArray[orig(this.topOfStack)+1..] is a subsequence of this.theArray[this.topOfStack+1..] {0-}, this.theArray[orig(this.topOfStack)+1..] is a subsequence of this.theArray[this.topOfStack+1..] {0-}> (Bin,SJJ)
  <this.theArray[orig(this.topOfStack)+1..] is a subsequence of this.theArray[this.topOfStack..] {0-}, this.theArray[orig(this.topOfStack)+1..] is a subsequence of this.theArray[this.topOfStack..] {0-}> (Bin,SJJ)
  <this.theArray.class == orig(this.theArray.class) {0+}, this.theArray.class == orig(this.theArray.class) {0+}> (Bin,SJJ)
  <this.theArray.class == this.theArray.class {0-}, this.theArray.class == this.theArray.class {0-}> (Bin,SJJ)
  <orig(this.topOfStack) == java.lang.Math.max(orig(this.topOfStack), orig(this.topOfStack)) {3-}, orig(this.topOfStack) == java.lang.Math.max(orig(this.topOfStack), orig(this.topOfStack)) {3-}> (Ter,SUU)
  <orig(this.topOfStack) == java.lang.Math.max(orig(this.topOfStack), orig(this.topOfStack)) {3-}, orig(this.topOfStack) == java.lang.Math.max(orig(this.topOfStack), orig(this.topOfStack)) {3-}> (Ter,SUU)
  <orig(this.topOfStack) == java.lang.Math.max(orig(this.topOfStack), orig(this.topOfStack)) {3-}, orig(this.topOfStack) == java.lang.Math.max(orig(this.topOfStack), orig(this.topOfStack)) {3-}> (Ter,SUU)
  <orig(this.topOfStack) == java.lang.Math.min(orig(this.topOfStack), orig(this.topOfStack)) {3-}, orig(this.topOfStack) == java.lang.Math.min(orig(this.topOfStack), orig(this.topOfStack)) {3-}> (Ter,SUU)
  <orig(this.topOfStack) == java.lang.Math.min(orig(this.topOfStack), orig(this.topOfStack)) {3-}, orig(this.topOfStack) == java.lang.Math.min(orig(this.topOfStack), orig(this.topOfStack)) {3-}> (Ter,SUU)
  <orig(this.topOfStack) == java.lang.Math.min(orig(this.topOfStack), orig(this.topOfStack)) {3-}, orig(this.topOfStack) == java.lang.Math.min(orig(this.topOfStack), orig(this.topOfStack)) {3-}> (Ter,SUU)
  <orig(this.topOfStack) == orig(this.topOfStack) & orig(this.topOfStack) {3-}, orig(this.topOfStack) == orig(this.topOfStack) & orig(this.topOfStack) {3-}> (Ter,SUU)
  <orig(this.topOfStack) == orig(this.topOfStack) & orig(this.topOfStack) {3-}, orig(this.topOfStack) == orig(this.topOfStack) & orig(this.topOfStack) {3-}> (Ter,SUU)
  <orig(this.topOfStack) == orig(this.topOfStack) & orig(this.topOfStack) {3-}, orig(this.topOfStack) == orig(this.topOfStack) & orig(this.topOfStack) {3-}> (Ter,SUU)
  <orig(this.topOfStack) == orig(this.topOfStack) | orig(this.topOfStack) {3-}, orig(this.topOfStack) == orig(this.topOfStack) | orig(this.topOfStack) {3-}> (Ter,SUU)
  <orig(this.topOfStack) == orig(this.topOfStack) | orig(this.topOfStack) {3-}, orig(this.topOfStack) == orig(this.topOfStack) | orig(this.topOfStack) {3-}> (Ter,SUU)
  <orig(this.topOfStack) == orig(this.topOfStack) | orig(this.topOfStack) {3-}, orig(this.topOfStack) == orig(this.topOfStack) | orig(this.topOfStack) {3-}> (Ter,SUU)
  <orig(this.topOfStack) == org.plumelib.util.MathPlume.gcd(orig(this.topOfStack), orig(this.topOfStack)) {3-}, orig(this.topOfStack) == org.plumelib.util.MathPlume.gcd(orig(this.topOfStack), orig(this.topOfStack)) {3-}> (Ter,SUU)
  <orig(this.topOfStack) == org.plumelib.util.MathPlume.gcd(orig(this.topOfStack), orig(this.topOfStack)) {3-}, orig(this.topOfStack) == org.plumelib.util.MathPlume.gcd(orig(this.topOfStack), orig(this.topOfStack)) {3-}> (Ter,SUU)
  <orig(this.topOfStack) == org.plumelib.util.MathPlume.gcd(orig(this.topOfStack), orig(this.topOfStack)) {3-}, orig(this.topOfStack) == org.plumelib.util.MathPlume.gcd(orig(this.topOfStack), orig(this.topOfStack)) {3-}> (Ter,SUU)
  <orig(this.topOfStack) == java.lang.Math.min(orig(this.topOfStack), size(this.theArray[])) {0.25-}, orig(this.topOfStack) == java.lang.Math.min(orig(this.topOfStack), size(this.theArray[])) {0-}> (Ter,SUJ)
  <orig(this.topOfStack) == java.lang.Math.min(orig(this.topOfStack), size(this.theArray[])) {0.25-}, orig(this.topOfStack) == java.lang.Math.min(orig(this.topOfStack), size(this.theArray[])) {0-}> (Ter,SUJ)
  <null, orig(this.topOfStack) == orig(this.topOfStack) % size(this.theArray[]) {0-}> (Ter,MJ)
  <null, orig(this.topOfStack) == orig(this.topOfStack) % size(this.theArray[]) {0-}> (Ter,MJ)
  <orig(this.topOfStack) == java.lang.Math.min(orig(this.topOfStack), size(this.theArray[])-1) {0.5-}, orig(this.topOfStack) == java.lang.Math.min(orig(this.topOfStack), size(this.theArray[])-1) {0-}> (Ter,SUJ)
  <orig(this.topOfStack) == java.lang.Math.min(orig(this.topOfStack), size(this.theArray[])-1) {0.5-}, orig(this.topOfStack) == java.lang.Math.min(orig(this.topOfStack), size(this.theArray[])-1) {0-}> (Ter,SUJ)
  <size(this.theArray[]) == java.lang.Math.max(orig(this.topOfStack), size(this.theArray[])) {0-}, size(this.theArray[]) == java.lang.Math.max(orig(this.topOfStack), size(this.theArray[])) {0-}> (Ter,SJJ)
  <size(this.theArray[]) == java.lang.Math.max(orig(this.topOfStack), size(this.theArray[])) {0-}, size(this.theArray[]) == java.lang.Math.max(orig(this.topOfStack), size(this.theArray[])) {0-}> (Ter,SJJ)
  <size(this.theArray[])-1 == java.lang.Math.max(orig(this.topOfStack), size(this.theArray[])-1) {0-}, size(this.theArray[])-1 == java.lang.Math.max(orig(this.topOfStack), size(this.theArray[])-1) {0-}> (Ter,SJJ)
  <size(this.theArray[])-1 == java.lang.Math.max(orig(this.topOfStack), size(this.theArray[])-1) {0-}, size(this.theArray[])-1 == java.lang.Math.max(orig(this.topOfStack), size(this.theArray[])-1) {0-}> (Ter,SJJ)
  <size(this.theArray[]) == java.lang.Math.max(size(this.theArray[]), size(this.theArray[])) {3-}, size(this.theArray[]) == java.lang.Math.max(size(this.theArray[]), size(this.theArray[])) {3-}> (Ter,SUU)
  <size(this.theArray[]) == java.lang.Math.max(size(this.theArray[]), size(this.theArray[])) {3-}, size(this.theArray[]) == java.lang.Math.max(size(this.theArray[]), size(this.theArray[])) {3-}> (Ter,SUU)
  <size(this.theArray[]) == java.lang.Math.max(size(this.theArray[]), size(this.theArray[])) {3-}, size(this.theArray[]) == java.lang.Math.max(size(this.theArray[]), size(this.theArray[])) {3-}> (Ter,SUU)
  <size(this.theArray[]) == java.lang.Math.min(size(this.theArray[]), size(this.theArray[])) {3-}, size(this.theArray[]) == java.lang.Math.min(size(this.theArray[]), size(this.theArray[])) {3-}> (Ter,SUU)
  <size(this.theArray[]) == java.lang.Math.min(size(this.theArray[]), size(this.theArray[])) {3-}, size(this.theArray[]) == java.lang.Math.min(size(this.theArray[]), size(this.theArray[])) {3-}> (Ter,SUU)
  <size(this.theArray[]) == java.lang.Math.min(size(this.theArray[]), size(this.theArray[])) {3-}, size(this.theArray[]) == java.lang.Math.min(size(this.theArray[]), size(this.theArray[])) {3-}> (Ter,SUU)
  <size(this.theArray[]) == size(this.theArray[]) & size(this.theArray[]) {3-}, size(this.theArray[]) == size(this.theArray[]) & size(this.theArray[]) {3-}> (Ter,SUU)
  <size(this.theArray[]) == size(this.theArray[]) & size(this.theArray[]) {3-}, size(this.theArray[]) == size(this.theArray[]) & size(this.theArray[]) {3-}> (Ter,SUU)
  <size(this.theArray[]) == size(this.theArray[]) & size(this.theArray[]) {3-}, size(this.theArray[]) == size(this.theArray[]) & size(this.theArray[]) {3-}> (Ter,SUU)
  <size(this.theArray[]) == size(this.theArray[]) | size(this.theArray[]) {3-}, size(this.theArray[]) == size(this.theArray[]) | size(this.theArray[]) {3-}> (Ter,SUU)
  <size(this.theArray[]) == size(this.theArray[]) | size(this.theArray[]) {3-}, size(this.theArray[]) == size(this.theArray[]) | size(this.theArray[]) {3-}> (Ter,SUU)
  <size(this.theArray[]) == size(this.theArray[]) | size(this.theArray[]) {3-}, size(this.theArray[]) == size(this.theArray[]) | size(this.theArray[]) {3-}> (Ter,SUU)
  <size(this.theArray[]) == org.plumelib.util.MathPlume.gcd(size(this.theArray[]), size(this.theArray[])) {3-}, size(this.theArray[]) == org.plumelib.util.MathPlume.gcd(size(this.theArray[]), size(this.theArray[])) {3-}> (Ter,SUU)
  <size(this.theArray[]) == org.plumelib.util.MathPlume.gcd(size(this.theArray[]), size(this.theArray[])) {3-}, size(this.theArray[]) == org.plumelib.util.MathPlume.gcd(size(this.theArray[]), size(this.theArray[])) {3-}> (Ter,SUU)
  <size(this.theArray[]) == org.plumelib.util.MathPlume.gcd(size(this.theArray[]), size(this.theArray[])) {3-}, size(this.theArray[]) == org.plumelib.util.MathPlume.gcd(size(this.theArray[]), size(this.theArray[])) {3-}> (Ter,SUU)
  <size(this.theArray[]) == java.lang.Math.max(size(this.theArray[])-1, size(this.theArray[])) {0.5-}, size(this.theArray[]) == java.lang.Math.max(size(this.theArray[])-1, size(this.theArray[])) {0-}> (Ter,SUJ)
  <size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[])-1, size(this.theArray[])) {0.25-}, size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[])-1, size(this.theArray[])) {0-}> (Ter,SUJ)
  <null, size(this.theArray[])-1 == size(this.theArray[])-1 % size(this.theArray[]) {0-}> (Ter,MJ)
  <size(this.theArray[])-1 == java.lang.Math.max(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == java.lang.Math.max(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == java.lang.Math.max(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == java.lang.Math.max(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == java.lang.Math.max(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == java.lang.Math.max(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == size(this.theArray[])-1 & size(this.theArray[])-1 {3-}, size(this.theArray[])-1 == size(this.theArray[])-1 & size(this.theArray[])-1 {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == size(this.theArray[])-1 & size(this.theArray[])-1 {3-}, size(this.theArray[])-1 == size(this.theArray[])-1 & size(this.theArray[])-1 {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == size(this.theArray[])-1 & size(this.theArray[])-1 {3-}, size(this.theArray[])-1 == size(this.theArray[])-1 & size(this.theArray[])-1 {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == size(this.theArray[])-1 | size(this.theArray[])-1 {3-}, size(this.theArray[])-1 == size(this.theArray[])-1 | size(this.theArray[])-1 {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == size(this.theArray[])-1 | size(this.theArray[])-1 {3-}, size(this.theArray[])-1 == size(this.theArray[])-1 | size(this.theArray[])-1 {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == size(this.theArray[])-1 | size(this.theArray[])-1 {3-}, size(this.theArray[])-1 == size(this.theArray[])-1 | size(this.theArray[])-1 {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == org.plumelib.util.MathPlume.gcd(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == org.plumelib.util.MathPlume.gcd(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == org.plumelib.util.MathPlume.gcd(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == org.plumelib.util.MathPlume.gcd(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == org.plumelib.util.MathPlume.gcd(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == org.plumelib.util.MathPlume.gcd(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <orig(this.topOfStack) == java.lang.Math.max(this.topOfStack, orig(this.topOfStack)) {0-}, orig(this.topOfStack) == java.lang.Math.max(this.topOfStack, orig(this.topOfStack)) {0-}> (Ter,SJJ)
  <orig(this.topOfStack) == java.lang.Math.max(this.topOfStack, orig(this.topOfStack)) {0-}, orig(this.topOfStack) == java.lang.Math.max(this.topOfStack, orig(this.topOfStack)) {0-}> (Ter,SJJ)
  <size(this.theArray[]) == java.lang.Math.max(this.topOfStack, size(this.theArray[])) {0-}, size(this.theArray[]) == java.lang.Math.max(this.topOfStack, size(this.theArray[])) {0-}> (Ter,SJJ)
  <size(this.theArray[]) == java.lang.Math.max(this.topOfStack, size(this.theArray[])) {0-}, size(this.theArray[]) == java.lang.Math.max(this.topOfStack, size(this.theArray[])) {0-}> (Ter,SJJ)
  <size(this.theArray[])-1 == java.lang.Math.max(this.topOfStack, size(this.theArray[])-1) {0-}, size(this.theArray[])-1 == java.lang.Math.max(this.topOfStack, size(this.theArray[])-1) {0-}> (Ter,SJJ)
  <size(this.theArray[])-1 == java.lang.Math.max(this.topOfStack, size(this.theArray[])-1) {0-}, size(this.theArray[])-1 == java.lang.Math.max(this.topOfStack, size(this.theArray[])-1) {0-}> (Ter,SJJ)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, orig(this.topOfStack)) {0-}, this.topOfStack == java.lang.Math.min(this.topOfStack, orig(this.topOfStack)) {0-}> (Ter,SJJ)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, orig(this.topOfStack)) {0-}, this.topOfStack == java.lang.Math.min(this.topOfStack, orig(this.topOfStack)) {0-}> (Ter,SJJ)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])) {0.25-}, this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])) {0-}> (Ter,SUJ)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])) {0.25-}, this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])) {0-}> (Ter,SUJ)
  <null, this.topOfStack == this.topOfStack % size(this.theArray[]) {0-}> (Ter,MJ)
  <null, this.topOfStack == this.topOfStack % size(this.theArray[]) {0-}> (Ter,MJ)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])-1) {0.5-}, this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])-1) {0-}> (Ter,SUJ)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])-1) {0.5-}, this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])-1) {0-}> (Ter,SUJ)
  <this.topOfStack == java.lang.Math.max(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == java.lang.Math.max(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <this.topOfStack == java.lang.Math.max(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == java.lang.Math.max(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <this.topOfStack == java.lang.Math.max(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == java.lang.Math.max(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == java.lang.Math.min(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == java.lang.Math.min(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == java.lang.Math.min(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <this.topOfStack == this.topOfStack & this.topOfStack {3-}, this.topOfStack == this.topOfStack & this.topOfStack {3-}> (Ter,SUU)
  <this.topOfStack == this.topOfStack & this.topOfStack {3-}, this.topOfStack == this.topOfStack & this.topOfStack {3-}> (Ter,SUU)
  <this.topOfStack == this.topOfStack & this.topOfStack {3-}, this.topOfStack == this.topOfStack & this.topOfStack {3-}> (Ter,SUU)
  <this.topOfStack == this.topOfStack | this.topOfStack {3-}, this.topOfStack == this.topOfStack | this.topOfStack {3-}> (Ter,SUU)
  <this.topOfStack == this.topOfStack | this.topOfStack {3-}, this.topOfStack == this.topOfStack | this.topOfStack {3-}> (Ter,SUU)
  <this.topOfStack == this.topOfStack | this.topOfStack {3-}, this.topOfStack == this.topOfStack | this.topOfStack {3-}> (Ter,SUU)
  <this.topOfStack == org.plumelib.util.MathPlume.gcd(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == org.plumelib.util.MathPlume.gcd(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <this.topOfStack == org.plumelib.util.MathPlume.gcd(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == org.plumelib.util.MathPlume.gcd(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <this.topOfStack == org.plumelib.util.MathPlume.gcd(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == org.plumelib.util.MathPlume.gcd(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == 2 * size(this.theArray[]) - size(this.theArray[]) - 1 {0-}, size(this.theArray[])-1 == 2 * size(this.theArray[]) - size(this.theArray[]) - 1 {0-}> (Ter,SJJ)
  <size(this.theArray[])-1 == 0.5 * size(this.theArray[]) + 0.5 * size(this.theArray[])-1 - 0.5 {0-}, size(this.theArray[])-1 == 0.5 * size(this.theArray[]) + 0.5 * size(this.theArray[])-1 - 0.5 {0-}> (Ter,SJJ)
  <orig(this.topOfStack) >= -1 {0+}, orig(this.topOfStack) >= -1 {0+}> (U!Int,SJJ)
  <size(this.theArray[]) >= 0 {0-}, size(this.theArray[]) >= 2 {0.8733-}> (UInt,DJU)
  <size(this.theArray[])-1 >= -1 {0-}, size(this.theArray[])-1 >= 1 {0.8733-}> (UInt,DJU)
  <this.topOfStack >= -1 {0+}, this.topOfStack >= -1 {0+}> (U!Int,SJJ)
  <orig(this.theArray[this.topOfStack]) != null {0.0001-}, orig(this.theArray[this.topOfStack]) != null {0.0001-}> (UInt,SJJ)
  <null, size(this.theArray[]) != 0 {1-}> (UInt,MU)
  <null, size(this.theArray[])-1 != 0 {1-}> (UInt,MU)
  <this.theArray != null {0.0001+}, this.theArray != null {0.0001+}> (UInt,SJJ)
  <this.theArray[this.topOfStack-1] != null {0.0001-}, this.theArray[this.topOfStack-1] != null {0.0001-}> (UInt,SJJ)
  <this.theArray[this.topOfStack] != null {0.0001-}, this.theArray[this.topOfStack] != null {0.0001-}> (UInt,SJJ)
  <this.theArray[orig(this.topOfStack)] == null {0-}, this.theArray[orig(this.topOfStack)] == null {0-}> (UInt,SJJ)
  <orig(this.topOfStack) <= 19 {1-}, orig(this.topOfStack) <= 14 {1-}> (U!Int,DUU)
  <size(this.theArray[]) <= 20 {0-}, size(this.theArray[]) <= 15 {0.0498-}> (U!Int,DJU)
  <size(this.theArray[])-1 <= 19 {0-}, size(this.theArray[])-1 <= 14 {0.0498-}> (U!Int,DJU)
  <this.topOfStack <= 18 {1-}, this.topOfStack <= 13 {1-}> (U!Int,DUU)
  <orig(this.theArray[0..this.topOfStack]) elements != null {0.0001+}, orig(this.theArray[0..this.topOfStack]) elements != null {0.0001+}> (UInt,SJJ)
  <this.theArray[0..orig(this.topOfStack)-1] elements != null {0.0001-}, this.theArray[0..orig(this.topOfStack)-1] elements != null {0.0001-}> (UInt,SJJ)
  <this.theArray[0..this.topOfStack-1] elements != null {0.0001-}, this.theArray[0..this.topOfStack-1] elements != null {0.0001-}> (UInt,SJJ)
  <this.theArray[0..this.topOfStack] elements != null {0.0001-}, this.theArray[0..this.topOfStack] elements != null {0.0001-}> (UInt,SJJ)
  <this.theArray[orig(this.topOfStack)+1..] elements == null {0-}, this.theArray[orig(this.topOfStack)+1..] elements == null {0-}> (UInt,SJJ)
  <this.theArray[orig(this.topOfStack)..] elements == null {0+}, this.theArray[orig(this.topOfStack)..] elements == null {0+}> (UInt,SJJ)
  <this.theArray[this.topOfStack+1..] elements == null {0+}, this.theArray[this.topOfStack+1..] elements == null {0+}> (UInt,SJJ)
  <this.theArray[orig(this.topOfStack)+1..] elements are equal {0-}, this.theArray[orig(this.topOfStack)+1..] elements are equal {0-}> (UInt,SJJ)
  <this.theArray[orig(this.topOfStack)..] elements are equal {0-}, this.theArray[orig(this.topOfStack)..] elements are equal {0-}> (UInt,SJJ)
  <this.theArray[this.topOfStack+1..] elements are equal {0-}, this.theArray[this.topOfStack+1..] elements are equal {0-}> (UInt,SJJ)
  <orig(this.theArray[0..this.topOfStack]) contains no duplicates {0.0471-}, orig(this.theArray[0..this.topOfStack]) contains no duplicates {0.0203-}> (UInt,SUU)
  <this.theArray[0..orig(this.topOfStack)-1] contains no duplicates {0.0646-}, this.theArray[0..orig(this.topOfStack)-1] contains no duplicates {0.0343-}> (UInt,SUU)
  <this.theArray[0..orig(this.topOfStack)] contains no duplicates {0.0471-}, this.theArray[0..orig(this.topOfStack)] contains no duplicates {0.0203-}> (UInt,SUU)
  <this.theArray[0..this.topOfStack-1] contains no duplicates {0.0798-}, this.theArray[0..this.topOfStack-1] contains no duplicates {0.0523-}> (UInt,SUU)
  <this.theArray[0..this.topOfStack] contains no duplicates {0.0646-}, this.theArray[0..this.topOfStack] contains no duplicates {0.0343-}> (UInt,SUU)
  <this.theArray.class == "[Ljava.lang.Object;" {0+}, this.theArray.class == "[Ljava.lang.Object;" {0+}> (UInt,SJJ)
<DataStructures.StackAr.topAndPop()Ljava/lang/Object;:::EXIT105>
  <null, return in this.theArray[] {0+}> (Bin,MJ)
  <this.theArray[0..this.topOfStack] elements ?cmp? return {1-}, this.theArray[0..this.topOfStack] elements ?cmp? return {1-}> (Bin,SUU)
  <this.theArray[] elements == return {0+}, this.theArray[] elements == return {0+}> (Bin,SJJ)
  <return == return {0-}, return == return {0-}> (Bin,SJJ)
  <size(this.theArray[]) == size(this.theArray[]) {0-}, size(this.theArray[]) == size(this.theArray[]) {0-}> (Bin,SJJ)
  <size(this.theArray[])-1 == size(this.theArray[])-1 {0-}, size(this.theArray[])-1 == size(this.theArray[])-1 {0-}> (Bin,SJJ)
  <this.theArray == this.theArray {0-}, this.theArray == this.theArray {0-}> (Bin,SJJ)
  <this.topOfStack == orig(this.topOfStack) {0+}, this.topOfStack == orig(this.topOfStack) {0+}> (Bin,SJJ)
  <this.topOfStack == this.topOfStack {0-}, this.topOfStack == this.topOfStack {0-}> (Bin,SJJ)
  <size(this.theArray[]) >= size(this.theArray[]) {0.8953-}, size(this.theArray[]) >= size(this.theArray[]) {0.951-}> (Bin,SUU)
  <size(this.theArray[]) >= size(this.theArray[])-1 {0.1119-}, size(this.theArray[]) >= size(this.theArray[])-1 {0.0594-}> (Bin,SUU)
  <size(this.theArray[])-1 >= size(this.theArray[])-1 {0.8953-}, size(this.theArray[])-1 >= size(this.theArray[])-1 {0.951-}> (Bin,SUU)
  <this.topOfStack >= this.topOfStack {0.8953-}, this.topOfStack >= this.topOfStack {0.951-}> (Bin,SUU)
  <size(this.theArray[]) > size(this.theArray[])-1 {0.1119-}, size(this.theArray[]) > size(this.theArray[])-1 {0.0594-}> (Bin,SUU)
  <size(this.theArray[]) <= size(this.theArray[]) {0.8953-}, size(this.theArray[]) <= size(this.theArray[]) {0.951-}> (Bin,SUU)
  <size(this.theArray[])-1 <= size(this.theArray[])-1 {0.8953-}, size(this.theArray[])-1 <= size(this.theArray[])-1 {0.951-}> (Bin,SUU)
  <this.topOfStack <= size(this.theArray[]) {0.056-}, this.topOfStack <= size(this.theArray[]) {0.0297-}> (Bin,SUU)
  <this.topOfStack <= size(this.theArray[])-1 {0.1119-}, this.topOfStack <= size(this.theArray[])-1 {0.0297-}> (Bin,SUU)
  <this.topOfStack <= this.topOfStack {0.8953-}, this.topOfStack <= this.topOfStack {0.951-}> (Bin,SUU)
  <this.topOfStack < size(this.theArray[]) {0.056-}, this.topOfStack < size(this.theArray[]) {0.0297-}> (Bin,SUU)
  <null, this.topOfStack < size(this.theArray[])-1 {0.0297-}> (Bin,MU)
  <size(this.theArray[]) != size(this.theArray[])-1 {0.1119-}, size(this.theArray[]) != size(this.theArray[])-1 {0.0594-}> (Bin,SUU)
  <this.topOfStack != size(this.theArray[]) {0.056-}, this.topOfStack != size(this.theArray[]) {0.0297-}> (Bin,SUU)
  <null, this.topOfStack != size(this.theArray[])-1 {0.0297-}> (Bin,MU)
  <size(this.theArray[]) == size(this.theArray[]) {0-}, size(this.theArray[]) == size(this.theArray[]) {0-}> (Bin,SJJ)
  <size(this.theArray[])-1 == size(this.theArray[]) - 1 {0-}, size(this.theArray[])-1 == size(this.theArray[]) - 1 {0-}> (Bin,SJJ)
  <size(this.theArray[])-1 == size(this.theArray[])-1 {0-}, size(this.theArray[])-1 == size(this.theArray[])-1 {0-}> (Bin,SJJ)
  <Too few samples for linear relation: 0 * Field{topOfStack}[this] == 0 * Field{topOfStack}[this] + 0 {1-}, Too few samples for linear relation: 0 * Field{topOfStack}[this] == 0 * Field{topOfStack}[this] + 0 {1-}> (Bin,SUU)
  <this.theArray[0..this.topOfStack] == ~this.theArray[0..this.topOfStack] {1-}, this.theArray[0..this.topOfStack] == ~this.theArray[0..this.topOfStack] {1-}> (Bin,SUU)
  <this.theArray[0..this.topOfStack] == ~this.theArray[0..this.topOfStack] {1-}, this.theArray[0..this.topOfStack] == ~this.theArray[0..this.topOfStack] {1-}> (Bin,SUU)
  <this.theArray[0..this.topOfStack] ?cmp? this.theArray[0..this.topOfStack] (elementwise) {1-}, this.theArray[0..this.topOfStack] ?cmp? this.theArray[0..this.topOfStack] (elementwise) {1-}> (Bin,SUU)
  <this.theArray[] == this.theArray[] (elementwise) {0-}, this.theArray[] == this.theArray[] (elementwise) {0-}> (Bin,SJJ)
  <Too few samples for linear relation: 0 * Slice{,Field{topOfStack}[this]}[Elements[Field{theArray}[this]]] == 0 * Slice{,Field{topOfStack}[this]}[Elements[Field{theArray}[this]]] + 0 {1-}, Too few samples for linear relation: 0 * Slice{,Field{topOfStack}[this]}[Elements[Field{theArray}[this]]] == 0 * Slice{,Field{topOfStack}[this]}[Elements[Field{theArray}[this]]] + 0 {1-}> (Bin,SUU)
  <Too few samples for linear relation: 0 * Elements[Field{theArray}[this]] == 0 * Elements[Field{theArray}[this]] + 0 {1-}, Too few samples for linear relation: 0 * Elements[Field{theArray}[this]] == 0 * Elements[Field{theArray}[this]] + 0 {1-}> (Bin,SUU)
  <this.theArray[0..this.topOfStack] is the reverse of this.theArray[0..this.topOfStack] {0-}, this.theArray[0..this.topOfStack] is the reverse of this.theArray[0..this.topOfStack] {0-}> (Bin,SJJ)
  <this.theArray[] is the reverse of this.theArray[] {0-}, this.theArray[] is the reverse of this.theArray[] {0-}> (Bin,SJJ)
  <this.theArray[0..this.topOfStack] == orig(this.theArray[0..this.topOfStack]) {0-}, this.theArray[0..this.topOfStack] == orig(this.theArray[0..this.topOfStack]) {0-}> (Bin,SJJ)
  <this.theArray[0..this.topOfStack] == this.theArray[0..orig(this.topOfStack)] {0-}, this.theArray[0..this.topOfStack] == this.theArray[0..orig(this.topOfStack)] {0-}> (Bin,SJJ)
  <this.theArray[0..this.topOfStack] == this.theArray[0..this.topOfStack] {0-}, this.theArray[0..this.topOfStack] == this.theArray[0..this.topOfStack] {0-}> (Bin,SJJ)
  <this.theArray[] == orig(this.theArray[]) {0+}, this.theArray[] == orig(this.theArray[]) {0+}> (Bin,SJJ)
  <this.theArray[] == orig(this.theArray[post(this.topOfStack+1)..]) {0-}, this.theArray[] == orig(this.theArray[post(this.topOfStack+1)..]) {0-}> (Bin,SJJ)
  <this.theArray[] == orig(this.theArray[this.topOfStack+1..]) {0-}, this.theArray[] == orig(this.theArray[this.topOfStack+1..]) {0-}> (Bin,SJJ)
  <this.theArray[] == this.theArray[] {0-}, this.theArray[] == this.theArray[] {0-}> (Bin,SJJ)
  <this.theArray[] == this.theArray[orig(this.topOfStack)+1..] {0-}, this.theArray[] == this.theArray[orig(this.topOfStack)+1..] {0-}> (Bin,SJJ)
  <this.theArray[] == this.theArray[this.topOfStack+1..] {0-}, this.theArray[] == this.theArray[this.topOfStack+1..] {0-}> (Bin,SJJ)
  <this.theArray[0..this.topOfStack] is a {sub,super}sequence of this.theArray[0..this.topOfStack] {1-}, this.theArray[0..this.topOfStack] is a {sub,super}sequence of this.theArray[0..this.topOfStack] {1-}> (Bin,SUU)
  <this.theArray[0..this.topOfStack] is a subsequence of this.theArray[] {0-}, this.theArray[0..this.topOfStack] is a subsequence of this.theArray[] {0-}> (Bin,SJJ)
  <this.theArray[] is a {sub,super}sequence of this.theArray[] {1-}, this.theArray[] is a {sub,super}sequence of this.theArray[] {1-}> (Bin,SUU)
  <this.theArray.class == this.theArray.class {0-}, this.theArray.class == this.theArray.class {0-}> (Bin,SJJ)
  <size(this.theArray[]) == java.lang.Math.max(size(this.theArray[]), size(this.theArray[])) {3-}, size(this.theArray[]) == java.lang.Math.max(size(this.theArray[]), size(this.theArray[])) {3-}> (Ter,SUU)
  <size(this.theArray[]) == java.lang.Math.max(size(this.theArray[]), size(this.theArray[])) {3-}, size(this.theArray[]) == java.lang.Math.max(size(this.theArray[]), size(this.theArray[])) {3-}> (Ter,SUU)
  <size(this.theArray[]) == java.lang.Math.max(size(this.theArray[]), size(this.theArray[])) {3-}, size(this.theArray[]) == java.lang.Math.max(size(this.theArray[]), size(this.theArray[])) {3-}> (Ter,SUU)
  <size(this.theArray[]) == java.lang.Math.min(size(this.theArray[]), size(this.theArray[])) {3-}, size(this.theArray[]) == java.lang.Math.min(size(this.theArray[]), size(this.theArray[])) {3-}> (Ter,SUU)
  <size(this.theArray[]) == java.lang.Math.min(size(this.theArray[]), size(this.theArray[])) {3-}, size(this.theArray[]) == java.lang.Math.min(size(this.theArray[]), size(this.theArray[])) {3-}> (Ter,SUU)
  <size(this.theArray[]) == java.lang.Math.min(size(this.theArray[]), size(this.theArray[])) {3-}, size(this.theArray[]) == java.lang.Math.min(size(this.theArray[]), size(this.theArray[])) {3-}> (Ter,SUU)
  <size(this.theArray[]) == size(this.theArray[]) & size(this.theArray[]) {3-}, size(this.theArray[]) == size(this.theArray[]) & size(this.theArray[]) {3-}> (Ter,SUU)
  <size(this.theArray[]) == size(this.theArray[]) & size(this.theArray[]) {3-}, size(this.theArray[]) == size(this.theArray[]) & size(this.theArray[]) {3-}> (Ter,SUU)
  <size(this.theArray[]) == size(this.theArray[]) & size(this.theArray[]) {3-}, size(this.theArray[]) == size(this.theArray[]) & size(this.theArray[]) {3-}> (Ter,SUU)
  <size(this.theArray[]) == size(this.theArray[]) | size(this.theArray[]) {3-}, size(this.theArray[]) == size(this.theArray[]) | size(this.theArray[]) {3-}> (Ter,SUU)
  <size(this.theArray[]) == size(this.theArray[]) | size(this.theArray[]) {3-}, size(this.theArray[]) == size(this.theArray[]) | size(this.theArray[]) {3-}> (Ter,SUU)
  <size(this.theArray[]) == size(this.theArray[]) | size(this.theArray[]) {3-}, size(this.theArray[]) == size(this.theArray[]) | size(this.theArray[]) {3-}> (Ter,SUU)
  <size(this.theArray[]) == org.plumelib.util.MathPlume.gcd(size(this.theArray[]), size(this.theArray[])) {3-}, size(this.theArray[]) == org.plumelib.util.MathPlume.gcd(size(this.theArray[]), size(this.theArray[])) {3-}> (Ter,SUU)
  <size(this.theArray[]) == org.plumelib.util.MathPlume.gcd(size(this.theArray[]), size(this.theArray[])) {3-}, size(this.theArray[]) == org.plumelib.util.MathPlume.gcd(size(this.theArray[]), size(this.theArray[])) {3-}> (Ter,SUU)
  <size(this.theArray[]) == org.plumelib.util.MathPlume.gcd(size(this.theArray[]), size(this.theArray[])) {3-}, size(this.theArray[]) == org.plumelib.util.MathPlume.gcd(size(this.theArray[]), size(this.theArray[])) {3-}> (Ter,SUU)
  <size(this.theArray[]) == java.lang.Math.max(size(this.theArray[])-1, size(this.theArray[])) {0.5-}, size(this.theArray[]) == java.lang.Math.max(size(this.theArray[]), size(this.theArray[])-1) {0-}> (Ter,SUJ)
  <null, size(this.theArray[]) == java.lang.Math.max(size(this.theArray[]), size(this.theArray[])-1) {0-}> (Ter,MJ)
  <size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[])-1, size(this.theArray[])) {0.25-}, size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[]), size(this.theArray[])-1) {0-}> (Ter,SUJ)
  <null, size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[]), size(this.theArray[])-1) {0-}> (Ter,MJ)
  <null, size(this.theArray[])-1 == size(this.theArray[])-1 % size(this.theArray[]) {0-}> (Ter,MJ)
  <null, size(this.theArray[])-1 == size(this.theArray[])-1 % size(this.theArray[]) {0-}> (Ter,MJ)
  <size(this.theArray[])-1 == java.lang.Math.max(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == java.lang.Math.max(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == java.lang.Math.max(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == java.lang.Math.max(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == java.lang.Math.max(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == java.lang.Math.max(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == size(this.theArray[])-1 & size(this.theArray[])-1 {3-}, size(this.theArray[])-1 == size(this.theArray[])-1 & size(this.theArray[])-1 {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == size(this.theArray[])-1 & size(this.theArray[])-1 {3-}, size(this.theArray[])-1 == size(this.theArray[])-1 & size(this.theArray[])-1 {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == size(this.theArray[])-1 & size(this.theArray[])-1 {3-}, size(this.theArray[])-1 == size(this.theArray[])-1 & size(this.theArray[])-1 {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == size(this.theArray[])-1 | size(this.theArray[])-1 {3-}, size(this.theArray[])-1 == size(this.theArray[])-1 | size(this.theArray[])-1 {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == size(this.theArray[])-1 | size(this.theArray[])-1 {3-}, size(this.theArray[])-1 == size(this.theArray[])-1 | size(this.theArray[])-1 {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == size(this.theArray[])-1 | size(this.theArray[])-1 {3-}, size(this.theArray[])-1 == size(this.theArray[])-1 | size(this.theArray[])-1 {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == org.plumelib.util.MathPlume.gcd(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == org.plumelib.util.MathPlume.gcd(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == org.plumelib.util.MathPlume.gcd(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == org.plumelib.util.MathPlume.gcd(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == org.plumelib.util.MathPlume.gcd(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == org.plumelib.util.MathPlume.gcd(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[]) == java.lang.Math.max(this.topOfStack, size(this.theArray[])) {1-}, size(this.theArray[]) == java.lang.Math.max(this.topOfStack, size(this.theArray[])) {1-}> (Ter,SUU)
  <size(this.theArray[]) == java.lang.Math.max(this.topOfStack, size(this.theArray[])) {1-}, size(this.theArray[]) == java.lang.Math.max(this.topOfStack, size(this.theArray[])) {1-}> (Ter,SUU)
  <size(this.theArray[]) == this.topOfStack & size(this.theArray[]) {1-}, size(this.theArray[]) == this.topOfStack & size(this.theArray[]) {1-}> (Ter,SUU)
  <size(this.theArray[]) == this.topOfStack & size(this.theArray[]) {1-}, size(this.theArray[]) == this.topOfStack & size(this.theArray[]) {1-}> (Ter,SUU)
  <size(this.theArray[])-1 == java.lang.Math.max(this.topOfStack, size(this.theArray[])-1) {1-}, size(this.theArray[])-1 == java.lang.Math.max(this.topOfStack, size(this.theArray[])-1) {1-}> (Ter,SUU)
  <size(this.theArray[])-1 == java.lang.Math.max(this.topOfStack, size(this.theArray[])-1) {1-}, size(this.theArray[])-1 == java.lang.Math.max(this.topOfStack, size(this.theArray[])-1) {1-}> (Ter,SUU)
  <size(this.theArray[])-1 == this.topOfStack & size(this.theArray[])-1 {1-}, size(this.theArray[])-1 == this.topOfStack & size(this.theArray[])-1 {1-}> (Ter,SUU)
  <size(this.theArray[])-1 == this.topOfStack & size(this.theArray[])-1 {1-}, size(this.theArray[])-1 == this.topOfStack & size(this.theArray[])-1 {1-}> (Ter,SUU)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])) {0.25-}, this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])) {0-}> (Ter,SUJ)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])) {0.25-}, this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])) {0-}> (Ter,SUJ)
  <this.topOfStack == this.topOfStack >> size(this.theArray[]) {0.25-}, this.topOfStack == this.topOfStack % size(this.theArray[]) {0-}> (Ter,DUJ)
  <this.topOfStack == this.topOfStack >> size(this.theArray[]) {0.25-}, this.topOfStack == this.topOfStack % size(this.theArray[]) {0-}> (Ter,DUJ)
  <this.topOfStack == this.topOfStack | size(this.theArray[]) {0.25-}, this.topOfStack == this.topOfStack >> size(this.theArray[]) {0-}> (Ter,DUJ)
  <this.topOfStack == this.topOfStack | size(this.theArray[]) {0.25-}, this.topOfStack == this.topOfStack >> size(this.theArray[]) {0-}> (Ter,DUJ)
  <null, this.topOfStack == this.topOfStack | size(this.theArray[]) {0-}> (Ter,MJ)
  <null, this.topOfStack == this.topOfStack | size(this.theArray[]) {0-}> (Ter,MJ)
  <null, this.topOfStack == org.plumelib.util.MathPlume.gcd(this.topOfStack, size(this.theArray[])) {0-}> (Ter,MJ)
  <null, this.topOfStack == org.plumelib.util.MathPlume.gcd(this.topOfStack, size(this.theArray[])) {0-}> (Ter,MJ)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])-1) {0.5-}, this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])-1) {0-}> (Ter,SUJ)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])-1) {0.5-}, this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])-1) {0-}> (Ter,SUJ)
  <this.topOfStack == this.topOfStack >> size(this.theArray[])-1 {0.5-}, this.topOfStack == this.topOfStack >> size(this.theArray[])-1 {0-}> (Ter,SUJ)
  <this.topOfStack == this.topOfStack >> size(this.theArray[])-1 {0.5-}, this.topOfStack == this.topOfStack >> size(this.theArray[])-1 {0-}> (Ter,SUJ)
  <this.topOfStack == this.topOfStack | size(this.theArray[])-1 {0.5-}, this.topOfStack == this.topOfStack | size(this.theArray[])-1 {0-}> (Ter,SUJ)
  <this.topOfStack == this.topOfStack | size(this.theArray[])-1 {0.5-}, this.topOfStack == this.topOfStack | size(this.theArray[])-1 {0-}> (Ter,SUJ)
  <this.topOfStack == java.lang.Math.max(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == java.lang.Math.max(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <this.topOfStack == java.lang.Math.max(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == java.lang.Math.max(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <this.topOfStack == java.lang.Math.max(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == java.lang.Math.max(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == java.lang.Math.min(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == java.lang.Math.min(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == java.lang.Math.min(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <this.topOfStack == this.topOfStack & this.topOfStack {3-}, this.topOfStack == this.topOfStack & this.topOfStack {3-}> (Ter,SUU)
  <this.topOfStack == this.topOfStack & this.topOfStack {3-}, this.topOfStack == this.topOfStack & this.topOfStack {3-}> (Ter,SUU)
  <this.topOfStack == this.topOfStack & this.topOfStack {3-}, this.topOfStack == this.topOfStack & this.topOfStack {3-}> (Ter,SUU)
  <this.topOfStack == this.topOfStack >> this.topOfStack {3-}, this.topOfStack == this.topOfStack >> this.topOfStack {3-}> (Ter,SUU)
  <this.topOfStack == this.topOfStack >> this.topOfStack {3-}, this.topOfStack == this.topOfStack >> this.topOfStack {3-}> (Ter,SUU)
  <this.topOfStack == this.topOfStack >> this.topOfStack {3-}, this.topOfStack == this.topOfStack >> this.topOfStack {3-}> (Ter,SUU)
  <this.topOfStack == this.topOfStack >> this.topOfStack {3-}, this.topOfStack == this.topOfStack >> this.topOfStack {3-}> (Ter,SUU)
  <this.topOfStack == this.topOfStack >> this.topOfStack {3-}, this.topOfStack == this.topOfStack >> this.topOfStack {3-}> (Ter,SUU)
  <this.topOfStack == this.topOfStack >> this.topOfStack {3-}, this.topOfStack == this.topOfStack >> this.topOfStack {3-}> (Ter,SUU)
  <this.topOfStack == this.topOfStack | this.topOfStack {3-}, this.topOfStack == this.topOfStack | this.topOfStack {3-}> (Ter,SUU)
  <this.topOfStack == this.topOfStack | this.topOfStack {3-}, this.topOfStack == this.topOfStack | this.topOfStack {3-}> (Ter,SUU)
  <this.topOfStack == this.topOfStack | this.topOfStack {3-}, this.topOfStack == this.topOfStack | this.topOfStack {3-}> (Ter,SUU)
  <this.topOfStack == org.plumelib.util.MathPlume.gcd(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == org.plumelib.util.MathPlume.gcd(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <this.topOfStack == org.plumelib.util.MathPlume.gcd(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == org.plumelib.util.MathPlume.gcd(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <this.topOfStack == org.plumelib.util.MathPlume.gcd(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == org.plumelib.util.MathPlume.gcd(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == 2 * size(this.theArray[]) - size(this.theArray[]) - 1 {0-}, null> (Ter,JM)
  <size(this.theArray[])-1 == 0.5 * size(this.theArray[]) + 0.5 * size(this.theArray[])-1 - 0.5 {0-}, null> (Ter,JM)
  <Too few samples for linear relation: 0 * Field{topOfStack}[this] == 0 * Field{topOfStack}[this] + 0 * Field{topOfStack}[this] + 0 {1-}, Too few samples for linear relation: 0 * Field{topOfStack}[this] == 0 * Field{topOfStack}[this] + 0 * Field{topOfStack}[this] + 0 {1-}> (Ter,SUU)
  <size(this.theArray[]) >= 0 {0-}, size(this.theArray[]) >= 2 {1-}> (UInt,DJU)
  <size(this.theArray[])-1 >= -1 {0-}, size(this.theArray[])-1 >= 1 {1-}> (UInt,DJU)
  <this.topOfStack >= -1 {0.8148-}, this.topOfStack >= -1 {0.8333-}> (U!Int,SUU)
  <null, size(this.theArray[]) != 0 {1-}> (UInt,MU)
  <null, size(this.theArray[])-1 != 0 {1-}> (UInt,MU)
  <this.theArray != null {0.0116-}, this.theArray != null {0.1317-}> (UInt,SUU)
  <this.topOfStack != 0 {1-}, this.topOfStack != 0 {1-}> (UInt,SUU)
  <return == null {0+}, return == null {0+}> (UInt,SJJ)
  <this.topOfStack == -1 {0+}, this.topOfStack == -1 {0+}> (UInt,SJJ)
  <size(this.theArray[]) <= 20 {0.6912-}, size(this.theArray[]) <= 15 {1-}> (U!Int,DUU)
  <size(this.theArray[])-1 <= 19 {0.6912-}, size(this.theArray[])-1 <= 14 {1-}> (U!Int,DUU)
  <this.topOfStack <= -1 {0.8148-}, this.topOfStack <= -1 {0.8333-}> (U!Int,SUU)
  <this.theArray[0..this.topOfStack] elements != null {0.0116-}, this.theArray[0..this.topOfStack] elements != null {0.1317-}> (UInt,SUU)
  <this.theArray[0..this.topOfStack] elements one of {  } {1-}, this.theArray[0..this.topOfStack] elements one of {  } {1-}> (UInt,SUU)
  <this.theArray[] elements == null {0+}, this.theArray[] elements == null {0+}> (UInt,SJJ)
  <this.theArray[0..this.topOfStack] elements are equal {0-}, this.theArray[0..this.topOfStack] elements are equal {0-}> (UInt,SJJ)
  <this.theArray[] elements are equal {0-}, this.theArray[] elements are equal {0-}> (UInt,SJJ)
  <this.theArray[0..this.topOfStack] contains no duplicates {1-}, this.theArray[0..this.topOfStack] contains no duplicates {1-}> (UInt,SUU)
  <null, this.theArray[0..this.topOfStack] == [] {0+}> (UInt,MJ)
  <return.class == null {0+}, return.class == null {0+}> (UInt,SJJ)
  <this.theArray.class == "[Ljava.lang.Object;" {0+}, this.theArray.class == "[Ljava.lang.Object;" {0+}> (UInt,SJJ)
  <this.theArray[].class elements == null {0+}, this.theArray[].class elements == null {0+}> (UInt,SJJ)
<DataStructures.StackAr.topAndPop()Ljava/lang/Object;:::EXIT108>
  <return in orig(this.theArray[0..this.topOfStack]) {0-}, return in orig(this.theArray[0..this.topOfStack]) {0-}> (Bin,SJJ)
  <return in orig(this.theArray[]) {0-}, return in orig(this.theArray[]) {0-}> (Bin,SJJ)
  <return in orig(this.theArray[post(this.topOfStack+1)..]) {0-}, return in orig(this.theArray[post(this.topOfStack+1)..]) {0-}> (Bin,SJJ)
  <this.theArray[orig(this.topOfStack)] in this.theArray[this.topOfStack+1..] {0-}, this.theArray[orig(this.topOfStack)] in this.theArray[this.topOfStack+1..] {0-}> (Bin,SJJ)
  <this.theArray[orig(this.topOfStack)+1..] elements == this.theArray[orig(this.topOfStack)] {0+}, this.theArray[orig(this.topOfStack)+1..] elements == this.theArray[orig(this.topOfStack)] {0+}> (Bin,SJJ)
  <this.theArray[this.topOfStack+1..] elements == this.theArray[orig(this.topOfStack)] {0+}, this.theArray[this.topOfStack+1..] elements == this.theArray[orig(this.topOfStack)] {0+}> (Bin,SJJ)
  <orig(this.topOfStack) == orig(this.topOfStack) {0-}, orig(this.topOfStack) == orig(this.topOfStack) {0-}> (Bin,SJJ)
  <return == return {0-}, return == return {0-}> (Bin,SJJ)
  <size(this.theArray[]) == size(this.theArray[]) {0-}, size(this.theArray[]) == size(this.theArray[]) {0-}> (Bin,SJJ)
  <size(this.theArray[])-1 == size(this.theArray[])-1 {0-}, size(this.theArray[])-1 == size(this.theArray[])-1 {0-}> (Bin,SJJ)
  <this.theArray == this.theArray {0-}, this.theArray == this.theArray {0-}> (Bin,SJJ)
  <this.theArray[orig(this.topOfStack)] == this.theArray[orig(this.topOfStack)] {0-}, this.theArray[orig(this.topOfStack)] == this.theArray[orig(this.topOfStack)] {0-}> (Bin,SJJ)
  <this.topOfStack == this.topOfStack {0-}, this.topOfStack == this.topOfStack {0-}> (Bin,SJJ)
  <orig(this.topOfStack) >= orig(this.topOfStack) {0.7177-}, orig(this.topOfStack) >= orig(this.topOfStack) {0.6557-}> (Bin,SUU)
  <size(this.theArray[]) >= size(this.theArray[]) {0.7177-}, size(this.theArray[]) >= size(this.theArray[]) {0.6557-}> (Bin,SUU)
  <size(this.theArray[]) >= size(this.theArray[])-1 {0.1794-}, size(this.theArray[]) >= size(this.theArray[])-1 {0.041-}> (Bin,SUU)
  <size(this.theArray[])-1 >= size(this.theArray[])-1 {0.7177-}, size(this.theArray[])-1 >= size(this.theArray[])-1 {0.6557-}> (Bin,SUU)
  <this.topOfStack >= this.topOfStack {0.7177-}, this.topOfStack >= this.topOfStack {0.6557-}> (Bin,SUU)
  <size(this.theArray[]) > size(this.theArray[])-1 {0.1794-}, size(this.theArray[]) > size(this.theArray[])-1 {0.041-}> (Bin,SUU)
  <orig(this.topOfStack) <= orig(this.topOfStack) {0.7177-}, orig(this.topOfStack) <= orig(this.topOfStack) {0.6557-}> (Bin,SUU)
  <orig(this.topOfStack) <= size(this.theArray[]) {0.0028-}, orig(this.topOfStack) <= size(this.theArray[]) {0.0026-}> (Bin,SJJ)
  <orig(this.topOfStack) <= size(this.theArray[])-1 {0.0028+}, orig(this.topOfStack) <= size(this.theArray[])-1 {0.0026+}> (Bin,SJJ)
  <size(this.theArray[]) <= size(this.theArray[]) {0.7177-}, size(this.theArray[]) <= size(this.theArray[]) {0.6557-}> (Bin,SUU)
  <size(this.theArray[])-1 <= size(this.theArray[])-1 {0.7177-}, size(this.theArray[])-1 <= size(this.theArray[])-1 {0.6557-}> (Bin,SUU)
  <this.topOfStack <= orig(this.topOfStack) {0.0224-}, this.topOfStack <= orig(this.topOfStack) {0.041-}> (Bin,SUU)
  <this.topOfStack <= size(this.theArray[]) {0.0028-}, this.topOfStack <= size(this.theArray[]) {0.0026-}> (Bin,SJJ)
  <this.topOfStack <= size(this.theArray[])-1 {0.0028-}, this.topOfStack <= size(this.theArray[])-1 {0.0026-}> (Bin,SJJ)
  <this.topOfStack <= this.topOfStack {0.7177-}, this.topOfStack <= this.topOfStack {0.6557-}> (Bin,SUU)
  <orig(this.topOfStack) < size(this.theArray[]) {0.0028-}, orig(this.topOfStack) < size(this.theArray[]) {0.0026-}> (Bin,SJJ)
  <this.topOfStack < orig(this.topOfStack) {0.0224-}, this.topOfStack < orig(this.topOfStack) {0.041-}> (Bin,SUU)
  <this.topOfStack < size(this.theArray[]) {0.0028-}, this.topOfStack < size(this.theArray[]) {0.0026-}> (Bin,SJJ)
  <this.topOfStack < size(this.theArray[])-1 {0.0028+}, this.topOfStack < size(this.theArray[])-1 {0.0026+}> (Bin,SJJ)
  <orig(this.topOfStack) != size(this.theArray[]) {0.0028-}, orig(this.topOfStack) != size(this.theArray[]) {0.0026-}> (Bin,SJJ)
  <size(this.theArray[]) != size(this.theArray[])-1 {0.0897-}, size(this.theArray[]) != size(this.theArray[])-1 {0.041-}> (Bin,SUU)
  <this.topOfStack != orig(this.topOfStack) {0.0224-}, this.topOfStack != orig(this.topOfStack) {0.041-}> (Bin,SUU)
  <this.topOfStack != size(this.theArray[]) {0.0028-}, this.topOfStack != size(this.theArray[]) {0.0026-}> (Bin,SJJ)
  <this.topOfStack != size(this.theArray[])-1 {0.0028-}, this.topOfStack != size(this.theArray[])-1 {0.0026-}> (Bin,SJJ)
  <orig(this.topOfStack) == orig(this.topOfStack) {0-}, orig(this.topOfStack) == orig(this.topOfStack) {0-}> (Bin,SJJ)
  <size(this.theArray[]) == size(this.theArray[]) {0-}, size(this.theArray[]) == size(this.theArray[]) {0-}> (Bin,SJJ)
  <size(this.theArray[])-1 == size(this.theArray[]) - 1 {0-}, size(this.theArray[])-1 == size(this.theArray[]) - 1 {0-}> (Bin,SJJ)
  <size(this.theArray[])-1 == size(this.theArray[])-1 {0-}, size(this.theArray[])-1 == size(this.theArray[])-1 {0-}> (Bin,SJJ)
  <orig(this.topOfStack) == this.topOfStack + 1 {0+}, orig(this.topOfStack) == this.topOfStack + 1 {0+}> (Bin,SJJ)
  <this.topOfStack == this.topOfStack {0-}, this.topOfStack == this.topOfStack {0-}> (Bin,SJJ)
  <orig(this.theArray[0..this.topOfStack]) == orig(this.theArray[0..this.topOfStack]) (elementwise) {0-}, orig(this.theArray[0..this.topOfStack]) == orig(this.theArray[0..this.topOfStack]) (elementwise) {0-}> (Bin,SJJ)
  <orig(this.theArray[]) == orig(this.theArray[]) (elementwise) {0-}, orig(this.theArray[]) == orig(this.theArray[]) (elementwise) {0-}> (Bin,SJJ)
  <orig(this.theArray[post(this.topOfStack+1)..]) == orig(this.theArray[post(this.topOfStack+1)..]) (elementwise) {0-}, orig(this.theArray[post(this.topOfStack+1)..]) == orig(this.theArray[post(this.topOfStack+1)..]) (elementwise) {0-}> (Bin,SJJ)
  <this.theArray[0..orig(this.topOfStack)] == this.theArray[0..orig(this.topOfStack)] (elementwise) {0-}, this.theArray[0..orig(this.topOfStack)] == this.theArray[0..orig(this.topOfStack)] (elementwise) {0-}> (Bin,SJJ)
  <this.theArray[0..this.topOfStack] == this.theArray[0..this.topOfStack] (elementwise) {0-}, this.theArray[0..this.topOfStack] == this.theArray[0..this.topOfStack] (elementwise) {0-}> (Bin,SJJ)
  <this.theArray[] == this.theArray[] (elementwise) {0-}, this.theArray[] == this.theArray[] (elementwise) {0-}> (Bin,SJJ)
  <this.theArray[orig(this.topOfStack)+1..] == this.theArray[orig(this.topOfStack)+1..] (elementwise) {0-}, this.theArray[orig(this.topOfStack)+1..] == this.theArray[orig(this.topOfStack)+1..] (elementwise) {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack+1..] == this.theArray[this.topOfStack+1..] (elementwise) {0-}, this.theArray[this.topOfStack+1..] == this.theArray[this.topOfStack+1..] (elementwise) {0-}> (Bin,SJJ)
  <orig(this.theArray[0..this.topOfStack]) == orig(this.theArray[0..this.topOfStack]) {0-}, orig(this.theArray[0..this.topOfStack]) == orig(this.theArray[0..this.topOfStack]) {0-}> (Bin,SJJ)
  <orig(this.theArray[]) == orig(this.theArray[]) {0-}, orig(this.theArray[]) == orig(this.theArray[]) {0-}> (Bin,SJJ)
  <orig(this.theArray[post(this.topOfStack+1)..]) == orig(this.theArray[post(this.topOfStack+1)..]) {0-}, orig(this.theArray[post(this.topOfStack+1)..]) == orig(this.theArray[post(this.topOfStack+1)..]) {0-}> (Bin,SJJ)
  <this.theArray[0..orig(this.topOfStack)] == this.theArray[0..orig(this.topOfStack)] {0-}, this.theArray[0..orig(this.topOfStack)] == this.theArray[0..orig(this.topOfStack)] {0-}> (Bin,SJJ)
  <this.theArray[0..this.topOfStack] == this.theArray[0..this.topOfStack] {0-}, this.theArray[0..this.topOfStack] == this.theArray[0..this.topOfStack] {0-}> (Bin,SJJ)
  <this.theArray[] == this.theArray[] {0-}, this.theArray[] == this.theArray[] {0-}> (Bin,SJJ)
  <Too few samples for linear relation: 0 * Slice{Add{+1}[Prestate[Field{topOfStack}[this]]],}[Elements[Field{theArray}[this]]] == 0 * Slice{Add{+1}[Prestate[Field{topOfStack}[this]]],}[Elements[Field{theArray}[this]]] + 0 {1-}, Too few samples for linear relation: 0 * Slice{Add{+1}[Prestate[Field{topOfStack}[this]]],}[Elements[Field{theArray}[this]]] == 0 * Slice{Add{+1}[Prestate[Field{topOfStack}[this]]],}[Elements[Field{theArray}[this]]] + 0 {1-}> (Bin,SUU)
  <Too few samples for linear relation: 0 * Slice{Add{+1}[Field{topOfStack}[this]],}[Elements[Field{theArray}[this]]] == 0 * Slice{Add{+1}[Field{topOfStack}[this]],}[Elements[Field{theArray}[this]]] + 0 {1-}, Too few samples for linear relation: 0 * Slice{Add{+1}[Field{topOfStack}[this]],}[Elements[Field{theArray}[this]]] == 0 * Slice{Add{+1}[Field{topOfStack}[this]],}[Elements[Field{theArray}[this]]] + 0 {1-}> (Bin,SUU)
  <this.theArray[orig(this.topOfStack)+1..] is the reverse of this.theArray[orig(this.topOfStack)+1..] {0-}, this.theArray[orig(this.topOfStack)+1..] is the reverse of this.theArray[orig(this.topOfStack)+1..] {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack+1..] is the reverse of this.theArray[this.topOfStack+1..] {0-}, this.theArray[this.topOfStack+1..] is the reverse of this.theArray[this.topOfStack+1..] {0-}> (Bin,SJJ)
  <orig(this.theArray[0..this.topOfStack]) == orig(this.theArray[0..this.topOfStack]) {0-}, orig(this.theArray[0..this.topOfStack]) == orig(this.theArray[0..this.topOfStack]) {0-}> (Bin,SJJ)
  <orig(this.theArray[]) == orig(this.theArray[]) {0-}, orig(this.theArray[]) == orig(this.theArray[]) {0-}> (Bin,SJJ)
  <orig(this.theArray[post(this.topOfStack+1)..]) == orig(this.theArray[post(this.topOfStack+1)..]) {0-}, orig(this.theArray[post(this.topOfStack+1)..]) == orig(this.theArray[post(this.topOfStack+1)..]) {0-}> (Bin,SJJ)
  <this.theArray[0..orig(this.topOfStack)] == this.theArray[0..orig(this.topOfStack)] {0-}, this.theArray[0..orig(this.topOfStack)] == this.theArray[0..orig(this.topOfStack)] {0-}> (Bin,SJJ)
  <this.theArray[0..this.topOfStack] == orig(this.theArray[0..this.topOfStack-1]) {0+}, this.theArray[0..this.topOfStack] == orig(this.theArray[0..this.topOfStack-1]) {0+}> (Bin,SJJ)
  <this.theArray[0..this.topOfStack] == this.theArray[0..this.topOfStack] {0-}, this.theArray[0..this.topOfStack] == this.theArray[0..this.topOfStack] {0-}> (Bin,SJJ)
  <this.theArray[] == this.theArray[] {0-}, this.theArray[] == this.theArray[] {0-}> (Bin,SJJ)
  <this.theArray[orig(this.topOfStack)+1..] == this.theArray[orig(this.topOfStack)+1..] {0-}, this.theArray[orig(this.topOfStack)+1..] == this.theArray[orig(this.topOfStack)+1..] {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack+1..] == this.theArray[this.topOfStack+1..] {0-}, this.theArray[this.topOfStack+1..] == this.theArray[this.topOfStack+1..] {0-}> (Bin,SJJ)
  <orig(this.theArray[]) is a {sub,super}sequence of orig(this.theArray[]) {1-}, orig(this.theArray[]) is a {sub,super}sequence of orig(this.theArray[]) {1-}> (Bin,SUU)
  <orig(this.theArray[post(this.topOfStack+1)..]) is a subsequence of orig(this.theArray[]) {0-}, orig(this.theArray[post(this.topOfStack+1)..]) is a subsequence of orig(this.theArray[]) {0-}> (Bin,SJJ)
  <this.theArray[0..this.topOfStack] is a subsequence of orig(this.theArray[]) {0-}, this.theArray[0..this.topOfStack] is a subsequence of orig(this.theArray[]) {0-}> (Bin,SJJ)
  <this.theArray[orig(this.topOfStack)+1..] is a subsequence of orig(this.theArray[]) {0-}, this.theArray[orig(this.topOfStack)+1..] is a subsequence of orig(this.theArray[]) {0-}> (Bin,SJJ)
  <orig(this.theArray[post(this.topOfStack+1)..]) is a {sub,super}sequence of orig(this.theArray[post(this.topOfStack+1)..]) {1-}, orig(this.theArray[post(this.topOfStack+1)..]) is a {sub,super}sequence of orig(this.theArray[post(this.topOfStack+1)..]) {1-}> (Bin,SUU)
  <this.theArray[0..this.topOfStack] is a subsequence of orig(this.theArray[0..this.topOfStack]) {0-}, this.theArray[0..this.topOfStack] is a subsequence of orig(this.theArray[0..this.topOfStack]) {0-}> (Bin,SJJ)
  <this.theArray[0..this.topOfStack] is a subsequence of this.theArray[0..orig(this.topOfStack)] {0-}, this.theArray[0..this.topOfStack] is a subsequence of this.theArray[0..orig(this.topOfStack)] {0-}> (Bin,SJJ)
  <this.theArray[0..this.topOfStack] is a {sub,super}sequence of this.theArray[0..this.topOfStack] {1-}, this.theArray[0..this.topOfStack] is a {sub,super}sequence of this.theArray[0..this.topOfStack] {1-}> (Bin,SUU)
  <this.theArray[0..this.topOfStack] is a subsequence of this.theArray[] {0-}, this.theArray[0..this.topOfStack] is a subsequence of this.theArray[] {0-}> (Bin,SJJ)
  <this.theArray[] is a {sub,super}sequence of this.theArray[] {1-}, this.theArray[] is a {sub,super}sequence of this.theArray[] {1-}> (Bin,SUU)
  <this.theArray[orig(this.topOfStack)+1..] is a subsequence of this.theArray[] {0-}, this.theArray[orig(this.topOfStack)+1..] is a subsequence of this.theArray[] {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack+1..] is a subsequence of this.theArray[] {0-}, this.theArray[this.topOfStack+1..] is a subsequence of this.theArray[] {0-}> (Bin,SJJ)
  <this.theArray[orig(this.topOfStack)+1..] is a subsequence of orig(this.theArray[post(this.topOfStack+1)..]) {0-}, this.theArray[orig(this.topOfStack)+1..] is a subsequence of orig(this.theArray[post(this.topOfStack+1)..]) {0-}> (Bin,SJJ)
  <this.theArray[orig(this.topOfStack)+1..] is a {sub,super}sequence of this.theArray[orig(this.topOfStack)+1..] {1-}, this.theArray[orig(this.topOfStack)+1..] is a {sub,super}sequence of this.theArray[orig(this.topOfStack)+1..] {1-}> (Bin,SUU)
  <this.theArray[orig(this.topOfStack)+1..] is a subsequence of this.theArray[this.topOfStack+1..] {0-}, this.theArray[orig(this.topOfStack)+1..] is a subsequence of this.theArray[this.topOfStack+1..] {0-}> (Bin,SJJ)
  <this.theArray[this.topOfStack+1..] is a {sub,super}sequence of this.theArray[this.topOfStack+1..] {1-}, this.theArray[this.topOfStack+1..] is a {sub,super}sequence of this.theArray[this.topOfStack+1..] {1-}> (Bin,SUU)
  <return.class == return.class {0-}, return.class == return.class {0-}> (Bin,SJJ)
  <this.theArray.class == this.theArray.class {0-}, this.theArray.class == this.theArray.class {0-}> (Bin,SJJ)
  <orig(this.topOfStack) == java.lang.Math.max(orig(this.topOfStack), orig(this.topOfStack)) {3-}, orig(this.topOfStack) == java.lang.Math.max(orig(this.topOfStack), orig(this.topOfStack)) {3-}> (Ter,SUU)
  <orig(this.topOfStack) == java.lang.Math.max(orig(this.topOfStack), orig(this.topOfStack)) {3-}, orig(this.topOfStack) == java.lang.Math.max(orig(this.topOfStack), orig(this.topOfStack)) {3-}> (Ter,SUU)
  <orig(this.topOfStack) == java.lang.Math.max(orig(this.topOfStack), orig(this.topOfStack)) {3-}, orig(this.topOfStack) == java.lang.Math.max(orig(this.topOfStack), orig(this.topOfStack)) {3-}> (Ter,SUU)
  <orig(this.topOfStack) == java.lang.Math.min(orig(this.topOfStack), orig(this.topOfStack)) {3-}, orig(this.topOfStack) == java.lang.Math.min(orig(this.topOfStack), orig(this.topOfStack)) {3-}> (Ter,SUU)
  <orig(this.topOfStack) == java.lang.Math.min(orig(this.topOfStack), orig(this.topOfStack)) {3-}, orig(this.topOfStack) == java.lang.Math.min(orig(this.topOfStack), orig(this.topOfStack)) {3-}> (Ter,SUU)
  <orig(this.topOfStack) == java.lang.Math.min(orig(this.topOfStack), orig(this.topOfStack)) {3-}, orig(this.topOfStack) == java.lang.Math.min(orig(this.topOfStack), orig(this.topOfStack)) {3-}> (Ter,SUU)
  <orig(this.topOfStack) == orig(this.topOfStack) & orig(this.topOfStack) {3-}, orig(this.topOfStack) == orig(this.topOfStack) & orig(this.topOfStack) {3-}> (Ter,SUU)
  <orig(this.topOfStack) == orig(this.topOfStack) & orig(this.topOfStack) {3-}, orig(this.topOfStack) == orig(this.topOfStack) & orig(this.topOfStack) {3-}> (Ter,SUU)
  <orig(this.topOfStack) == orig(this.topOfStack) & orig(this.topOfStack) {3-}, orig(this.topOfStack) == orig(this.topOfStack) & orig(this.topOfStack) {3-}> (Ter,SUU)
  <orig(this.topOfStack) == orig(this.topOfStack) | orig(this.topOfStack) {3-}, orig(this.topOfStack) == orig(this.topOfStack) | orig(this.topOfStack) {3-}> (Ter,SUU)
  <orig(this.topOfStack) == orig(this.topOfStack) | orig(this.topOfStack) {3-}, orig(this.topOfStack) == orig(this.topOfStack) | orig(this.topOfStack) {3-}> (Ter,SUU)
  <orig(this.topOfStack) == orig(this.topOfStack) | orig(this.topOfStack) {3-}, orig(this.topOfStack) == orig(this.topOfStack) | orig(this.topOfStack) {3-}> (Ter,SUU)
  <orig(this.topOfStack) == org.plumelib.util.MathPlume.gcd(orig(this.topOfStack), orig(this.topOfStack)) {3-}, orig(this.topOfStack) == org.plumelib.util.MathPlume.gcd(orig(this.topOfStack), orig(this.topOfStack)) {3-}> (Ter,SUU)
  <orig(this.topOfStack) == org.plumelib.util.MathPlume.gcd(orig(this.topOfStack), orig(this.topOfStack)) {3-}, orig(this.topOfStack) == org.plumelib.util.MathPlume.gcd(orig(this.topOfStack), orig(this.topOfStack)) {3-}> (Ter,SUU)
  <orig(this.topOfStack) == org.plumelib.util.MathPlume.gcd(orig(this.topOfStack), orig(this.topOfStack)) {3-}, orig(this.topOfStack) == org.plumelib.util.MathPlume.gcd(orig(this.topOfStack), orig(this.topOfStack)) {3-}> (Ter,SUU)
  <orig(this.topOfStack) == java.lang.Math.min(orig(this.topOfStack), size(this.theArray[])) {0.25-}, orig(this.topOfStack) == java.lang.Math.min(orig(this.topOfStack), size(this.theArray[])) {0-}> (Ter,SUJ)
  <orig(this.topOfStack) == java.lang.Math.min(orig(this.topOfStack), size(this.theArray[])) {0.25-}, orig(this.topOfStack) == java.lang.Math.min(orig(this.topOfStack), size(this.theArray[])) {0-}> (Ter,SUJ)
  <orig(this.topOfStack) == orig(this.topOfStack) % size(this.theArray[]) {0.25-}, orig(this.topOfStack) == orig(this.topOfStack) % size(this.theArray[]) {0-}> (Ter,SUJ)
  <orig(this.topOfStack) == orig(this.topOfStack) % size(this.theArray[]) {0.25-}, orig(this.topOfStack) == orig(this.topOfStack) % size(this.theArray[]) {0-}> (Ter,SUJ)
  <orig(this.topOfStack) == java.lang.Math.min(orig(this.topOfStack), size(this.theArray[])-1) {0.5-}, orig(this.topOfStack) == java.lang.Math.min(orig(this.topOfStack), size(this.theArray[])-1) {0-}> (Ter,SUJ)
  <orig(this.topOfStack) == java.lang.Math.min(orig(this.topOfStack), size(this.theArray[])-1) {0.5-}, orig(this.topOfStack) == java.lang.Math.min(orig(this.topOfStack), size(this.theArray[])-1) {0-}> (Ter,SUJ)
  <size(this.theArray[]) == java.lang.Math.max(orig(this.topOfStack), size(this.theArray[])) {0-}, size(this.theArray[]) == java.lang.Math.max(orig(this.topOfStack), size(this.theArray[])) {0-}> (Ter,SJJ)
  <size(this.theArray[]) == java.lang.Math.max(orig(this.topOfStack), size(this.theArray[])) {0-}, size(this.theArray[]) == java.lang.Math.max(orig(this.topOfStack), size(this.theArray[])) {0-}> (Ter,SJJ)
  <size(this.theArray[])-1 == java.lang.Math.max(orig(this.topOfStack), size(this.theArray[])-1) {0-}, size(this.theArray[])-1 == java.lang.Math.max(orig(this.topOfStack), size(this.theArray[])-1) {0-}> (Ter,SJJ)
  <size(this.theArray[])-1 == java.lang.Math.max(orig(this.topOfStack), size(this.theArray[])-1) {0-}, size(this.theArray[])-1 == java.lang.Math.max(orig(this.topOfStack), size(this.theArray[])-1) {0-}> (Ter,SJJ)
  <size(this.theArray[]) == java.lang.Math.max(size(this.theArray[]), size(this.theArray[])) {3-}, size(this.theArray[]) == java.lang.Math.max(size(this.theArray[]), size(this.theArray[])) {3-}> (Ter,SUU)
  <size(this.theArray[]) == java.lang.Math.max(size(this.theArray[]), size(this.theArray[])) {3-}, size(this.theArray[]) == java.lang.Math.max(size(this.theArray[]), size(this.theArray[])) {3-}> (Ter,SUU)
  <size(this.theArray[]) == java.lang.Math.max(size(this.theArray[]), size(this.theArray[])) {3-}, size(this.theArray[]) == java.lang.Math.max(size(this.theArray[]), size(this.theArray[])) {3-}> (Ter,SUU)
  <size(this.theArray[]) == java.lang.Math.min(size(this.theArray[]), size(this.theArray[])) {3-}, size(this.theArray[]) == java.lang.Math.min(size(this.theArray[]), size(this.theArray[])) {3-}> (Ter,SUU)
  <size(this.theArray[]) == java.lang.Math.min(size(this.theArray[]), size(this.theArray[])) {3-}, size(this.theArray[]) == java.lang.Math.min(size(this.theArray[]), size(this.theArray[])) {3-}> (Ter,SUU)
  <size(this.theArray[]) == java.lang.Math.min(size(this.theArray[]), size(this.theArray[])) {3-}, size(this.theArray[]) == java.lang.Math.min(size(this.theArray[]), size(this.theArray[])) {3-}> (Ter,SUU)
  <size(this.theArray[]) == size(this.theArray[]) & size(this.theArray[]) {3-}, size(this.theArray[]) == size(this.theArray[]) & size(this.theArray[]) {3-}> (Ter,SUU)
  <size(this.theArray[]) == size(this.theArray[]) & size(this.theArray[]) {3-}, size(this.theArray[]) == size(this.theArray[]) & size(this.theArray[]) {3-}> (Ter,SUU)
  <size(this.theArray[]) == size(this.theArray[]) & size(this.theArray[]) {3-}, size(this.theArray[]) == size(this.theArray[]) & size(this.theArray[]) {3-}> (Ter,SUU)
  <size(this.theArray[]) == size(this.theArray[]) | size(this.theArray[]) {3-}, size(this.theArray[]) == size(this.theArray[]) | size(this.theArray[]) {3-}> (Ter,SUU)
  <size(this.theArray[]) == size(this.theArray[]) | size(this.theArray[]) {3-}, size(this.theArray[]) == size(this.theArray[]) | size(this.theArray[]) {3-}> (Ter,SUU)
  <size(this.theArray[]) == size(this.theArray[]) | size(this.theArray[]) {3-}, size(this.theArray[]) == size(this.theArray[]) | size(this.theArray[]) {3-}> (Ter,SUU)
  <size(this.theArray[]) == org.plumelib.util.MathPlume.gcd(size(this.theArray[]), size(this.theArray[])) {3-}, size(this.theArray[]) == org.plumelib.util.MathPlume.gcd(size(this.theArray[]), size(this.theArray[])) {3-}> (Ter,SUU)
  <size(this.theArray[]) == org.plumelib.util.MathPlume.gcd(size(this.theArray[]), size(this.theArray[])) {3-}, size(this.theArray[]) == org.plumelib.util.MathPlume.gcd(size(this.theArray[]), size(this.theArray[])) {3-}> (Ter,SUU)
  <size(this.theArray[]) == org.plumelib.util.MathPlume.gcd(size(this.theArray[]), size(this.theArray[])) {3-}, size(this.theArray[]) == org.plumelib.util.MathPlume.gcd(size(this.theArray[]), size(this.theArray[])) {3-}> (Ter,SUU)
  <size(this.theArray[]) == java.lang.Math.max(size(this.theArray[])-1, size(this.theArray[])) {0.5-}, size(this.theArray[]) == java.lang.Math.max(size(this.theArray[])-1, size(this.theArray[])) {0-}> (Ter,SUJ)
  <size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[])-1, size(this.theArray[])) {0.25-}, size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[])-1, size(this.theArray[])) {0-}> (Ter,SUJ)
  <size(this.theArray[])-1 == size(this.theArray[])-1 % size(this.theArray[]) {0.25-}, size(this.theArray[])-1 == size(this.theArray[])-1 % size(this.theArray[]) {0-}> (Ter,SUJ)
  <size(this.theArray[])-1 == java.lang.Math.max(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == java.lang.Math.max(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == java.lang.Math.max(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == java.lang.Math.max(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == java.lang.Math.max(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == java.lang.Math.max(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == java.lang.Math.min(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == size(this.theArray[])-1 & size(this.theArray[])-1 {3-}, size(this.theArray[])-1 == size(this.theArray[])-1 & size(this.theArray[])-1 {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == size(this.theArray[])-1 & size(this.theArray[])-1 {3-}, size(this.theArray[])-1 == size(this.theArray[])-1 & size(this.theArray[])-1 {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == size(this.theArray[])-1 & size(this.theArray[])-1 {3-}, size(this.theArray[])-1 == size(this.theArray[])-1 & size(this.theArray[])-1 {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == size(this.theArray[])-1 | size(this.theArray[])-1 {3-}, size(this.theArray[])-1 == size(this.theArray[])-1 | size(this.theArray[])-1 {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == size(this.theArray[])-1 | size(this.theArray[])-1 {3-}, size(this.theArray[])-1 == size(this.theArray[])-1 | size(this.theArray[])-1 {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == size(this.theArray[])-1 | size(this.theArray[])-1 {3-}, size(this.theArray[])-1 == size(this.theArray[])-1 | size(this.theArray[])-1 {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == org.plumelib.util.MathPlume.gcd(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == org.plumelib.util.MathPlume.gcd(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == org.plumelib.util.MathPlume.gcd(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == org.plumelib.util.MathPlume.gcd(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <size(this.theArray[])-1 == org.plumelib.util.MathPlume.gcd(size(this.theArray[])-1, size(this.theArray[])-1) {3-}, size(this.theArray[])-1 == org.plumelib.util.MathPlume.gcd(size(this.theArray[])-1, size(this.theArray[])-1) {3-}> (Ter,SUU)
  <orig(this.topOfStack) == java.lang.Math.max(this.topOfStack, orig(this.topOfStack)) {0-}, orig(this.topOfStack) == java.lang.Math.max(this.topOfStack, orig(this.topOfStack)) {0-}> (Ter,SJJ)
  <orig(this.topOfStack) == java.lang.Math.max(this.topOfStack, orig(this.topOfStack)) {0-}, orig(this.topOfStack) == java.lang.Math.max(this.topOfStack, orig(this.topOfStack)) {0-}> (Ter,SJJ)
  <size(this.theArray[]) == java.lang.Math.max(this.topOfStack, size(this.theArray[])) {0-}, size(this.theArray[]) == java.lang.Math.max(this.topOfStack, size(this.theArray[])) {0-}> (Ter,SJJ)
  <size(this.theArray[]) == java.lang.Math.max(this.topOfStack, size(this.theArray[])) {0-}, size(this.theArray[]) == java.lang.Math.max(this.topOfStack, size(this.theArray[])) {0-}> (Ter,SJJ)
  <size(this.theArray[])-1 == java.lang.Math.max(this.topOfStack, size(this.theArray[])-1) {0-}, size(this.theArray[])-1 == java.lang.Math.max(this.topOfStack, size(this.theArray[])-1) {0-}> (Ter,SJJ)
  <size(this.theArray[])-1 == java.lang.Math.max(this.topOfStack, size(this.theArray[])-1) {0-}, size(this.theArray[])-1 == java.lang.Math.max(this.topOfStack, size(this.theArray[])-1) {0-}> (Ter,SJJ)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, orig(this.topOfStack)) {0-}, this.topOfStack == java.lang.Math.min(this.topOfStack, orig(this.topOfStack)) {0-}> (Ter,SJJ)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, orig(this.topOfStack)) {0-}, this.topOfStack == java.lang.Math.min(this.topOfStack, orig(this.topOfStack)) {0-}> (Ter,SJJ)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])) {0.25-}, this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])) {0-}> (Ter,SUJ)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])) {0.25-}, this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])) {0-}> (Ter,SUJ)
  <null, this.topOfStack == this.topOfStack % size(this.theArray[]) {0-}> (Ter,MJ)
  <null, this.topOfStack == this.topOfStack % size(this.theArray[]) {0-}> (Ter,MJ)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])-1) {0.5-}, this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])-1) {0-}> (Ter,SUJ)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])-1) {0.5-}, this.topOfStack == java.lang.Math.min(this.topOfStack, size(this.theArray[])-1) {0-}> (Ter,SUJ)
  <this.topOfStack == java.lang.Math.max(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == java.lang.Math.max(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <this.topOfStack == java.lang.Math.max(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == java.lang.Math.max(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <this.topOfStack == java.lang.Math.max(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == java.lang.Math.max(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == java.lang.Math.min(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == java.lang.Math.min(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <this.topOfStack == java.lang.Math.min(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == java.lang.Math.min(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <this.topOfStack == this.topOfStack & this.topOfStack {3-}, this.topOfStack == this.topOfStack & this.topOfStack {3-}> (Ter,SUU)
  <this.topOfStack == this.topOfStack & this.topOfStack {3-}, this.topOfStack == this.topOfStack & this.topOfStack {3-}> (Ter,SUU)
  <this.topOfStack == this.topOfStack & this.topOfStack {3-}, this.topOfStack == this.topOfStack & this.topOfStack {3-}> (Ter,SUU)
  <this.topOfStack == this.topOfStack | this.topOfStack {3-}, this.topOfStack == this.topOfStack | this.topOfStack {3-}> (Ter,SUU)
  <this.topOfStack == this.topOfStack | this.topOfStack {3-}, this.topOfStack == this.topOfStack | this.topOfStack {3-}> (Ter,SUU)
  <this.topOfStack == this.topOfStack | this.topOfStack {3-}, this.topOfStack == this.topOfStack | this.topOfStack {3-}> (Ter,SUU)
  <this.topOfStack == org.plumelib.util.MathPlume.gcd(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == org.plumelib.util.MathPlume.gcd(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <this.topOfStack == org.plumelib.util.MathPlume.gcd(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == org.plumelib.util.MathPlume.gcd(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <this.topOfStack == org.plumelib.util.MathPlume.gcd(this.topOfStack, this.topOfStack) {3-}, this.topOfStack == org.plumelib.util.MathPlume.gcd(this.topOfStack, this.topOfStack) {3-}> (Ter,SUU)
  <Too few samples for linear relation: 0 * SizeOf[Elements[Field{theArray}[this]]] == 0 * SizeOf[Elements[Field{theArray}[this]]] + 0 * SizeOf[Elements[Field{theArray}[this]]] + 0 {0.25-}, null> (Ter,UM)
  <size(this.theArray[])-1 == 2 * size(this.theArray[]) - size(this.theArray[]) - 1 {0-}, size(this.theArray[])-1 == 2 * size(this.theArray[]) - size(this.theArray[]) - 1 {0-}> (Ter,SJJ)
  <size(this.theArray[])-1 == 0.5 * size(this.theArray[]) + 0.5 * size(this.theArray[])-1 - 0.5 {0-}, size(this.theArray[])-1 == 0.5 * size(this.theArray[]) + 0.5 * size(this.theArray[])-1 - 0.5 {0-}> (Ter,SJJ)
  <Too few samples for linear relation: 0 * Add{-1}[SizeOf[Elements[Field{theArray}[this]]]] == 0 * Add{-1}[SizeOf[Elements[Field{theArray}[this]]]] + 0 * Add{-1}[SizeOf[Elements[Field{theArray}[this]]]] + 0 {0.25-}, null> (Ter,UM)
  <orig(this.topOfStack) >= 0 {0+}, orig(this.topOfStack) >= 0 {0+}> (UInt,SJJ)
  <size(this.theArray[]) >= 1 {1-}, size(this.theArray[]) >= 2 {0.9643-}> (UInt,DUU)
  <size(this.theArray[])-1 >= 0 {1-}, size(this.theArray[])-1 >= 1 {0.9643-}> (UInt,DUU)
  <this.topOfStack >= -1 {0+}, this.topOfStack >= -1 {0+}> (U!Int,SJJ)
  <return != null {0.0001+}, return != null {0.0001+}> (UInt,SJJ)
  <size(this.theArray[]) != 0 {1-}, size(this.theArray[]) != 0 {1-}> (UInt,SUU)
  <null, size(this.theArray[])-1 != 0 {1-}> (UInt,MU)
  <this.theArray != null {0.0001+}, this.theArray != null {0.0001+}> (UInt,SJJ)
  <this.theArray[orig(this.topOfStack)] == null {0+}, this.theArray[orig(this.topOfStack)] == null {0+}> (UInt,SJJ)
  <orig(this.topOfStack) <= 19 {1-}, orig(this.topOfStack) <= 14 {1-}> (U!Int,DUU)
  <size(this.theArray[]) <= 20 {0-}, size(this.theArray[]) <= 15 {0-}> (U!Int,DJJ)
  <size(this.theArray[])-1 <= 19 {0-}, size(this.theArray[])-1 <= 14 {0-}> (U!Int,DJJ)
  <this.topOfStack <= 18 {1-}, this.topOfStack <= 13 {1-}> (U!Int,DUU)
  <orig(this.theArray[0..this.topOfStack]) elements != null {0.0001+}, orig(this.theArray[0..this.topOfStack]) elements != null {0.0001+}> (UInt,SJJ)
  <this.theArray[0..this.topOfStack] elements != null {0.0001-}, this.theArray[0..this.topOfStack] elements != null {0.0001-}> (UInt,SJJ)
  <this.theArray[orig(this.topOfStack)+1..] elements == null {0-}, this.theArray[orig(this.topOfStack)+1..] elements == null {0-}> (UInt,SJJ)
  <this.theArray[this.topOfStack+1..] elements == null {0+}, this.theArray[this.topOfStack+1..] elements == null {0+}> (UInt,SJJ)
  <this.theArray[orig(this.topOfStack)+1..] elements are equal {0-}, this.theArray[orig(this.topOfStack)+1..] elements are equal {0-}> (UInt,SJJ)
  <this.theArray[this.topOfStack+1..] elements are equal {0-}, this.theArray[this.topOfStack+1..] elements are equal {0-}> (UInt,SJJ)
  <orig(this.theArray[0..this.topOfStack]) contains no duplicates {0.0471-}, orig(this.theArray[0..this.topOfStack]) contains no duplicates {0.0203-}> (UInt,SUU)
  <this.theArray[0..orig(this.topOfStack)] contains no duplicates {0.0471-}, this.theArray[0..orig(this.topOfStack)] contains no duplicates {0.0203-}> (UInt,SUU)
  <this.theArray[0..this.topOfStack] contains no duplicates {0.0646-}, this.theArray[0..this.topOfStack] contains no duplicates {0.0343-}> (UInt,SUU)
  <this.theArray.class == "[Ljava.lang.Object;" {0+}, this.theArray.class == "[Ljava.lang.Object;" {0+}> (UInt,SJJ)
