===========================================================================
DataStructures.CursorList:::CLASS
    Variables: DataStructures.CursorList.cursorSpace DataStructures.CursorList.cursorSpace.getClass().getName() DataStructures.CursorList.cursorSpace[] DataStructures.CursorList.cursorSpace[].getClass().getName() DataStructures.CursorList.cursorSpace[].element DataStructures.CursorList.cursorSpace[].element.getClass().getName() DataStructures.CursorList.cursorSpace[].next DataStructures.CursorList.SPACE_SIZE size(DataStructures.CursorList.cursorSpace[]) size(DataStructures.CursorList.cursorSpace[])-1 DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE] DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE-1] DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE..] DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE+1..] DataStructures.CursorList.cursorSpace[0..DataStructures.CursorList.SPACE_SIZE] DataStructures.CursorList.cursorSpace[0..DataStructures.CursorList.SPACE_SIZE-1] DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE].element DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE-1].element DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE..].element DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE+1..].element DataStructures.CursorList.cursorSpace[0..DataStructures.CursorList.SPACE_SIZE].element DataStructures.CursorList.cursorSpace[0..DataStructures.CursorList.SPACE_SIZE-1].element DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE].next DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE-1].next DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE..].next DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE+1..].next DataStructures.CursorList.cursorSpace[0..DataStructures.CursorList.SPACE_SIZE].next DataStructures.CursorList.cursorSpace[0..DataStructures.CursorList.SPACE_SIZE-1].next
DataStructures.CursorList.SPACE_SIZE == daikon.Quant.size(DataStructures.CursorList.cursorSpace)
DataStructures.CursorList.cursorSpace != null
DataStructures.CursorList.cursorSpace != null
DataStructures.CursorList.cursorSpace.getClass().getName() == DataStructures.CursorNode[].class.getName()
("oneOf.java.jpp: SEQUENCE unimplemented" != null)
daikon.Quant.noDups(DataStructures.CursorList.cursorSpace)
daikon.Quant.eltsNotEqual(DataStructures.CursorList.cursorSpace, null)
daikon.Quant.pairwiseEqual(daikon.Quant.typeArray(DataStructures.CursorList.cursorSpace), new String[] { "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode" })
daikon.Quant.eltsEqual(daikon.Quant.typeArray(DataStructures.CursorList.cursorSpace), "DataStructures.CursorNode")
daikon.Quant.eltsNotEqualIndex(daikon.Quant.collectObject(DataStructures.CursorList.cursorSpace, "next"))
daikon.Quant.getElement_Object(DataStructures.CursorList.cursorSpace, DataStructures.CursorList.SPACE_SIZE-1) != null
("oneOf.java.jpp: SEQUENCE unimplemented" != null)
daikon.Quant.getElement_Object(DataStructures.CursorList.cursorSpace, DataStructures.CursorList.SPACE_SIZE-1) == null
("oneOf.java.jpp: SEQUENCE unimplemented" != null)
daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, DataStructures.CursorList.SPACE_SIZE-1) == 0
("oneOf.java.jpp: SEQUENCE unimplemented" != null)
daikon.Quant.eltsLTE(daikon.Quant.collectObject(DataStructures.CursorList.cursorSpace, "next"), daikon.Quant.size(DataStructures.CursorList.cursorSpace)-1)
daikon.Quant.memberOf(daikon.Quant.size(DataStructures.CursorList.cursorSpace)-1 , daikon.Quant.collectObject(DataStructures.CursorList.cursorSpace, "next") )
daikon.Quant.eltsGTE(daikon.Quant.collectObject(DataStructures.CursorList.cursorSpace, "next"), daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, DataStructures.CursorList.SPACE_SIZE-1))
daikon.Quant.isReverse(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, DataStructures.CursorList.SPACE_SIZE, daikon.Quant.size(DataStructures.CursorList.cursorSpace)), daikon.Quant.slice(DataStructures.CursorList.cursorSpace, DataStructures.CursorList.SPACE_SIZE, daikon.Quant.size(DataStructures.CursorList.cursorSpace)))
===========================================================================
DataStructures.CursorList:::OBJECT
    Variables: this this.header DataStructures.CursorList.cursorSpace DataStructures.CursorList.cursorSpace.getClass().getName() DataStructures.CursorList.cursorSpace[] DataStructures.CursorList.cursorSpace[].getClass().getName() DataStructures.CursorList.cursorSpace[].element DataStructures.CursorList.cursorSpace[].element.getClass().getName() DataStructures.CursorList.cursorSpace[].next DataStructures.CursorList.SPACE_SIZE size(DataStructures.CursorList.cursorSpace[]) size(DataStructures.CursorList.cursorSpace[])-1 DataStructures.CursorList.cursorSpace[this.header] DataStructures.CursorList.cursorSpace[this.header-1] DataStructures.CursorList.cursorSpace[this.header..] DataStructures.CursorList.cursorSpace[this.header+1..] DataStructures.CursorList.cursorSpace[0..this.header] DataStructures.CursorList.cursorSpace[0..this.header-1] DataStructures.CursorList.cursorSpace[this.header].element DataStructures.CursorList.cursorSpace[this.header-1].element DataStructures.CursorList.cursorSpace[this.header..].element DataStructures.CursorList.cursorSpace[this.header+1..].element DataStructures.CursorList.cursorSpace[0..this.header].element DataStructures.CursorList.cursorSpace[0..this.header-1].element DataStructures.CursorList.cursorSpace[this.header].next DataStructures.CursorList.cursorSpace[this.header-1].next DataStructures.CursorList.cursorSpace[this.header..].next DataStructures.CursorList.cursorSpace[this.header+1..].next DataStructures.CursorList.cursorSpace[0..this.header].next DataStructures.CursorList.cursorSpace[0..this.header-1].next DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE] DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE-1] DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE..] DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE+1..] DataStructures.CursorList.cursorSpace[0..DataStructures.CursorList.SPACE_SIZE] DataStructures.CursorList.cursorSpace[0..DataStructures.CursorList.SPACE_SIZE-1] DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE].element DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE-1].element DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE..].element DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE+1..].element DataStructures.CursorList.cursorSpace[0..DataStructures.CursorList.SPACE_SIZE].element DataStructures.CursorList.cursorSpace[0..DataStructures.CursorList.SPACE_SIZE-1].element DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE].next DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE-1].next DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE..].next DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE+1..].next DataStructures.CursorList.cursorSpace[0..DataStructures.CursorList.SPACE_SIZE].next DataStructures.CursorList.cursorSpace[0..DataStructures.CursorList.SPACE_SIZE-1].next
daikon.Quant.getElement_Object(DataStructures.CursorList.cursorSpace, this.header) == daikon.Quant.getElement_Object(DataStructures.CursorList.cursorSpace, DataStructures.CursorList.SPACE_SIZE-1)
daikon.Quant.getElement_Object(DataStructures.CursorList.cursorSpace, this.header) == null
this.header < daikon.Quant.size(DataStructures.CursorList.cursorSpace)-1
this.header != daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, this.header)
this.header != daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, this.header-1)
this.header > daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, DataStructures.CursorList.SPACE_SIZE-1)
daikon.Quant.size(DataStructures.CursorList.cursorSpace)-1 > daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, this.header)
daikon.Quant.size(DataStructures.CursorList.cursorSpace)-1 > daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, this.header-1)
daikon.Quant.memberOf(daikon.Quant.size(DataStructures.CursorList.cursorSpace)-1 , daikon.Quant.slice(DataStructures.CursorList.cursorSpace, this.header, daikon.Quant.size(DataStructures.CursorList.cursorSpace)) )
daikon.Quant.memberOf(daikon.Quant.size(DataStructures.CursorList.cursorSpace)-1 , daikon.Quant.slice(DataStructures.CursorList.cursorSpace, this.header+1, daikon.Quant.size(DataStructures.CursorList.cursorSpace)) )
daikon.Quant.eltsLT(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, 0, this.header), daikon.Quant.size(DataStructures.CursorList.cursorSpace)-1)
daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, this.header) != daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, this.header-1)
daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, this.header) >= daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, DataStructures.CursorList.SPACE_SIZE-1)
daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, this.header-1) >= daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, DataStructures.CursorList.SPACE_SIZE-1)
===========================================================================
DataStructures.CursorList.CursorList():::EXIT
    Variables: this this.header DataStructures.CursorList.cursorSpace DataStructures.CursorList.cursorSpace.getClass().getName() DataStructures.CursorList.cursorSpace[] DataStructures.CursorList.cursorSpace[].getClass().getName() DataStructures.CursorList.cursorSpace[].element DataStructures.CursorList.cursorSpace[].element.getClass().getName() DataStructures.CursorList.cursorSpace[].next DataStructures.CursorList.SPACE_SIZE size(DataStructures.CursorList.cursorSpace[]) size(DataStructures.CursorList.cursorSpace[])-1 DataStructures.CursorList.cursorSpace[this.header] DataStructures.CursorList.cursorSpace[this.header-1] DataStructures.CursorList.cursorSpace[this.header..] DataStructures.CursorList.cursorSpace[this.header+1..] DataStructures.CursorList.cursorSpace[0..this.header] DataStructures.CursorList.cursorSpace[0..this.header-1] DataStructures.CursorList.cursorSpace[this.header].element DataStructures.CursorList.cursorSpace[this.header-1].element DataStructures.CursorList.cursorSpace[this.header..].element DataStructures.CursorList.cursorSpace[this.header+1..].element DataStructures.CursorList.cursorSpace[0..this.header].element DataStructures.CursorList.cursorSpace[0..this.header-1].element DataStructures.CursorList.cursorSpace[this.header].next DataStructures.CursorList.cursorSpace[this.header-1].next DataStructures.CursorList.cursorSpace[this.header..].next DataStructures.CursorList.cursorSpace[this.header+1..].next DataStructures.CursorList.cursorSpace[0..this.header].next DataStructures.CursorList.cursorSpace[0..this.header-1].next DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE] DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE-1] DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE..] DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE+1..] DataStructures.CursorList.cursorSpace[0..DataStructures.CursorList.SPACE_SIZE] DataStructures.CursorList.cursorSpace[0..DataStructures.CursorList.SPACE_SIZE-1] DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE].element DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE-1].element DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE..].element DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE+1..].element DataStructures.CursorList.cursorSpace[0..DataStructures.CursorList.SPACE_SIZE].element DataStructures.CursorList.cursorSpace[0..DataStructures.CursorList.SPACE_SIZE-1].element DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE].next DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE-1].next DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE..].next DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE+1..].next DataStructures.CursorList.cursorSpace[0..DataStructures.CursorList.SPACE_SIZE].next DataStructures.CursorList.cursorSpace[0..DataStructures.CursorList.SPACE_SIZE-1].next
daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, this.header) == daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, DataStructures.CursorList.SPACE_SIZE-1)
daikon.Quant.pairwiseEqual(daikon.Quant.typeArray(daikon.Quant.collectObject(DataStructures.CursorList.cursorSpace, "element")), new String[] { null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null }) || daikon.Quant.pairwiseEqual(daikon.Quant.typeArray(daikon.Quant.collectObject(DataStructures.CursorList.cursorSpace, "element")), new String[] { null, null, null, "DataStructures.MyInteger", null, "DataStructures.MyInteger", null, "DataStructures.MyInteger", null, "DataStructures.MyInteger", null, "DataStructures.MyInteger", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null })
daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, this.header) == 0
(this.header >> daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, this.header-1) == 0)
===========================================================================
DataStructures.CursorList.alloc():::ENTER
    Variables: DataStructures.CursorList.cursorSpace DataStructures.CursorList.cursorSpace.getClass().getName() DataStructures.CursorList.cursorSpace[] DataStructures.CursorList.cursorSpace[].getClass().getName() DataStructures.CursorList.cursorSpace[].element DataStructures.CursorList.cursorSpace[].element.getClass().getName() DataStructures.CursorList.cursorSpace[].next DataStructures.CursorList.SPACE_SIZE size(DataStructures.CursorList.cursorSpace[]) size(DataStructures.CursorList.cursorSpace[])-1 DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE] DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE-1] DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE..] DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE+1..] DataStructures.CursorList.cursorSpace[0..DataStructures.CursorList.SPACE_SIZE] DataStructures.CursorList.cursorSpace[0..DataStructures.CursorList.SPACE_SIZE-1] DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE].element DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE-1].element DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE..].element DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE+1..].element DataStructures.CursorList.cursorSpace[0..DataStructures.CursorList.SPACE_SIZE].element DataStructures.CursorList.cursorSpace[0..DataStructures.CursorList.SPACE_SIZE-1].element DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE].next DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE-1].next DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE..].next DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE+1..].next DataStructures.CursorList.cursorSpace[0..DataStructures.CursorList.SPACE_SIZE].next DataStructures.CursorList.cursorSpace[0..DataStructures.CursorList.SPACE_SIZE-1].next
===========================================================================
DataStructures.CursorList.alloc():::EXIT
    Variables: DataStructures.CursorList.cursorSpace DataStructures.CursorList.cursorSpace.getClass().getName() DataStructures.CursorList.cursorSpace[] DataStructures.CursorList.cursorSpace[].getClass().getName() DataStructures.CursorList.cursorSpace[].element DataStructures.CursorList.cursorSpace[].element.getClass().getName() DataStructures.CursorList.cursorSpace[].next DataStructures.CursorList.SPACE_SIZE return orig(DataStructures.CursorList.cursorSpace) orig(DataStructures.CursorList.cursorSpace.getClass().getName()) orig(DataStructures.CursorList.cursorSpace[]) orig(DataStructures.CursorList.cursorSpace[].getClass().getName()) orig(DataStructures.CursorList.cursorSpace[].element) orig(DataStructures.CursorList.cursorSpace[].element.getClass().getName()) orig(DataStructures.CursorList.cursorSpace[].next) size(DataStructures.CursorList.cursorSpace[]) size(DataStructures.CursorList.cursorSpace[])-1 orig(size(DataStructures.CursorList.cursorSpace[])) orig(size(DataStructures.CursorList.cursorSpace[]))-1 DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE] DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE-1] DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE..] DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE+1..] DataStructures.CursorList.cursorSpace[0..DataStructures.CursorList.SPACE_SIZE] DataStructures.CursorList.cursorSpace[0..DataStructures.CursorList.SPACE_SIZE-1] DataStructures.CursorList.cursorSpace[return] DataStructures.CursorList.cursorSpace[return-1] DataStructures.CursorList.cursorSpace[return..] DataStructures.CursorList.cursorSpace[return+1..] DataStructures.CursorList.cursorSpace[0..return] DataStructures.CursorList.cursorSpace[0..return-1] DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE].element DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE-1].element DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE..].element DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE+1..].element DataStructures.CursorList.cursorSpace[0..DataStructures.CursorList.SPACE_SIZE].element DataStructures.CursorList.cursorSpace[0..DataStructures.CursorList.SPACE_SIZE-1].element DataStructures.CursorList.cursorSpace[return].element DataStructures.CursorList.cursorSpace[return-1].element DataStructures.CursorList.cursorSpace[return..].element DataStructures.CursorList.cursorSpace[return+1..].element DataStructures.CursorList.cursorSpace[0..return].element DataStructures.CursorList.cursorSpace[0..return-1].element DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE].next DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE-1].next DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE..].next DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE+1..].next DataStructures.CursorList.cursorSpace[0..DataStructures.CursorList.SPACE_SIZE].next DataStructures.CursorList.cursorSpace[0..DataStructures.CursorList.SPACE_SIZE-1].next DataStructures.CursorList.cursorSpace[return].next DataStructures.CursorList.cursorSpace[return-1].next DataStructures.CursorList.cursorSpace[return..].next DataStructures.CursorList.cursorSpace[return+1..].next DataStructures.CursorList.cursorSpace[0..return].next DataStructures.CursorList.cursorSpace[0..return-1].next orig(DataStructures.CursorList.cursorSpace[post(DataStructures.CursorList.SPACE_SIZE)]) orig(DataStructures.CursorList.cursorSpace[post(DataStructures.CursorList.SPACE_SIZE)-1]) orig(DataStructures.CursorList.cursorSpace[post(DataStructures.CursorList.SPACE_SIZE)..]) orig(DataStructures.CursorList.cursorSpace[post(DataStructures.CursorList.SPACE_SIZE)+1..]) orig(DataStructures.CursorList.cursorSpace[0..post(DataStructures.CursorList.SPACE_SIZE)]) orig(DataStructures.CursorList.cursorSpace[0..post(DataStructures.CursorList.SPACE_SIZE)-1]) orig(DataStructures.CursorList.cursorSpace[post(DataStructures.CursorList.SPACE_SIZE)].element) orig(DataStructures.CursorList.cursorSpace[post(DataStructures.CursorList.SPACE_SIZE)-1].element) orig(DataStructures.CursorList.cursorSpace[post(DataStructures.CursorList.SPACE_SIZE)..].element) orig(DataStructures.CursorList.cursorSpace[post(DataStructures.CursorList.SPACE_SIZE)+1..].element) orig(DataStructures.CursorList.cursorSpace[0..post(DataStructures.CursorList.SPACE_SIZE)].element) orig(DataStructures.CursorList.cursorSpace[0..post(DataStructures.CursorList.SPACE_SIZE)-1].element) orig(DataStructures.CursorList.cursorSpace[post(DataStructures.CursorList.SPACE_SIZE)].next) orig(DataStructures.CursorList.cursorSpace[post(DataStructures.CursorList.SPACE_SIZE)-1].next) orig(DataStructures.CursorList.cursorSpace[post(DataStructures.CursorList.SPACE_SIZE)..].next) orig(DataStructures.CursorList.cursorSpace[post(DataStructures.CursorList.SPACE_SIZE)+1..].next) orig(DataStructures.CursorList.cursorSpace[0..post(DataStructures.CursorList.SPACE_SIZE)].next) orig(DataStructures.CursorList.cursorSpace[0..post(DataStructures.CursorList.SPACE_SIZE)-1].next) orig(DataStructures.CursorList.cursorSpace[post(return)]) orig(DataStructures.CursorList.cursorSpace[post(return)-1]) orig(DataStructures.CursorList.cursorSpace[post(return)..]) orig(DataStructures.CursorList.cursorSpace[post(return)+1..]) orig(DataStructures.CursorList.cursorSpace[0..post(return)]) orig(DataStructures.CursorList.cursorSpace[0..post(return)-1]) orig(DataStructures.CursorList.cursorSpace[post(return)].element) orig(DataStructures.CursorList.cursorSpace[post(return)-1].element) orig(DataStructures.CursorList.cursorSpace[post(return)..].element) orig(DataStructures.CursorList.cursorSpace[post(return)+1..].element) orig(DataStructures.CursorList.cursorSpace[0..post(return)].element) orig(DataStructures.CursorList.cursorSpace[0..post(return)-1].element) orig(DataStructures.CursorList.cursorSpace[post(return)].next) orig(DataStructures.CursorList.cursorSpace[post(return)-1].next) orig(DataStructures.CursorList.cursorSpace[post(return)..].next) orig(DataStructures.CursorList.cursorSpace[post(return)+1..].next) orig(DataStructures.CursorList.cursorSpace[0..post(return)].next) orig(DataStructures.CursorList.cursorSpace[0..post(return)-1].next)
assignable DataStructures.CursorList.cursorSpace[].next
DataStructures.CursorList.cursorSpace == \old(DataStructures.CursorList.cursorSpace)
DataStructures.CursorList.cursorSpace.getClass().getName() == \old(DataStructures.CursorList.cursorSpace.getClass().getName())
daikon.Quant.pairwiseEqual(DataStructures.CursorList.cursorSpace, \old(DataStructures.CursorList.cursorSpace))
daikon.Quant.pairwiseEqual(daikon.Quant.collectObject(DataStructures.CursorList.cursorSpace, "element"), \old(daikon.Quant.collectObject(DataStructures.CursorList.cursorSpace, "element")))
daikon.Quant.getElement_Object(DataStructures.CursorList.cursorSpace, DataStructures.CursorList.SPACE_SIZE-1) == daikon.Quant.getElement_Object(DataStructures.CursorList.cursorSpace, \result)
daikon.Quant.getElement_Object(DataStructures.CursorList.cursorSpace, \result) == \old(daikon.Quant.getElement_Object(DataStructures.CursorList.cursorSpace, \new(DataStructures.CursorList.SPACE_SIZE)-1))
daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, DataStructures.CursorList.SPACE_SIZE-1) == \old(daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, \new(DataStructures.CursorList.SPACE_SIZE)-1))
daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, \result) == \old(daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, \new(\result)))
daikon.Quant.pairwiseEqual(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, \result, daikon.Quant.size(DataStructures.CursorList.cursorSpace)), \old(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, \new(\result), daikon.Quant.size(DataStructures.CursorList.cursorSpace))))
daikon.Quant.pairwiseEqual(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, \result+1, daikon.Quant.size(DataStructures.CursorList.cursorSpace)), \old(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, \new(\result)+1, daikon.Quant.size(DataStructures.CursorList.cursorSpace))))
daikon.Quant.getElement_Object(DataStructures.CursorList.cursorSpace, \result) == null
warning: method daikon.inv.unary.sequence.CommonSequence.format(OutputFormat:JML) needs to be implemented: {33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 0} subset of DataStructures.CursorList.cursorSpace[return..].next
warning: method daikon.inv.unary.sequence.CommonSequence.format(OutputFormat:JML) needs to be implemented: {34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 0} subset of DataStructures.CursorList.cursorSpace[return+1..].next
daikon.Quant.subsetOf(daikon.Quant.collectObject(DataStructures.CursorList.cursorSpace, "next"), \old(daikon.Quant.collectObject(DataStructures.CursorList.cursorSpace, "next")))
daikon.Quant.memberOf(\result , \old(daikon.Quant.collectObject(DataStructures.CursorList.cursorSpace, "next")) )
\result < daikon.Quant.size(DataStructures.CursorList.cursorSpace)-1
\result > daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, DataStructures.CursorList.SPACE_SIZE-1)
\result != daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, \result)
\result != daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, \result-1)
(\old(daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, \new(\result)-1)) >> \result == 0)
daikon.Quant.memberOf(\result , \old(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, 0, \new(\result))) )
daikon.Quant.memberOf(\result , \old(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, 0, \new(\result)-1)) )
daikon.Quant.eltsLTE(\old(daikon.Quant.collectObject(DataStructures.CursorList.cursorSpace, "next")), daikon.Quant.size(DataStructures.CursorList.cursorSpace)-1)
daikon.Quant.memberOf(daikon.Quant.size(DataStructures.CursorList.cursorSpace)-1 , \old(daikon.Quant.collectObject(DataStructures.CursorList.cursorSpace, "next")) )
daikon.Quant.eltsGTE(\old(daikon.Quant.collectObject(DataStructures.CursorList.cursorSpace, "next")), daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, DataStructures.CursorList.SPACE_SIZE-1))
daikon.Quant.size(DataStructures.CursorList.cursorSpace)-1 > daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, \result)
daikon.Quant.size(DataStructures.CursorList.cursorSpace)-1 > daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, \result-1)
daikon.Quant.memberOf(daikon.Quant.size(DataStructures.CursorList.cursorSpace)-1 , daikon.Quant.slice(DataStructures.CursorList.cursorSpace, \result, daikon.Quant.size(DataStructures.CursorList.cursorSpace)) )
daikon.Quant.memberOf(daikon.Quant.size(DataStructures.CursorList.cursorSpace)-1 , daikon.Quant.slice(DataStructures.CursorList.cursorSpace, \result+1, daikon.Quant.size(DataStructures.CursorList.cursorSpace)) )
daikon.Quant.eltsLT(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, 0, \result), daikon.Quant.size(DataStructures.CursorList.cursorSpace)-1)
daikon.Quant.size(DataStructures.CursorList.cursorSpace)-1 > \old(daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, \new(\result)-1))
daikon.Quant.eltsLT(\old(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, 0, \new(\result))), daikon.Quant.size(DataStructures.CursorList.cursorSpace)-1)
daikon.Quant.subsetOf(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, DataStructures.CursorList.SPACE_SIZE, daikon.Quant.size(DataStructures.CursorList.cursorSpace)), daikon.Quant.slice(DataStructures.CursorList.cursorSpace, \result, daikon.Quant.size(DataStructures.CursorList.cursorSpace)))
daikon.Quant.subsetOf(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, DataStructures.CursorList.SPACE_SIZE, daikon.Quant.size(DataStructures.CursorList.cursorSpace)), daikon.Quant.slice(DataStructures.CursorList.cursorSpace, \result+1, daikon.Quant.size(DataStructures.CursorList.cursorSpace)))
daikon.Quant.subsetOf(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, DataStructures.CursorList.SPACE_SIZE, daikon.Quant.size(DataStructures.CursorList.cursorSpace)), daikon.Quant.slice(DataStructures.CursorList.cursorSpace, 0, \result))
daikon.Quant.subsetOf(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, DataStructures.CursorList.SPACE_SIZE, daikon.Quant.size(DataStructures.CursorList.cursorSpace)), daikon.Quant.slice(DataStructures.CursorList.cursorSpace, 0, \result-1))
daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, DataStructures.CursorList.SPACE_SIZE-1) < daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, \result)
daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, DataStructures.CursorList.SPACE_SIZE-1) <= daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, \result-1)
daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, DataStructures.CursorList.SPACE_SIZE-1) <= \old(daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, \new(\result)-1))
daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, \result) != \old(daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, \new(\result)-1))
(!(daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, \result-1) == 0)) || (\old(daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, \new(\result)-1)) == 0)
(!(\old(daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, \new(\result)-1)) == 0)) || (daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, \result-1) == 0)
daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, \result-1) >= \old(daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, \new(\result)-1))
daikon.Quant.memberOf(daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, \result-1) , \old(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, 0, \new(\result))) )
daikon.Quant.subsetOf(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, 0, \result), \old(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, 0, \new(\result))))
daikon.Quant.subsetOf(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, 0, \result-1), \old(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, 0, \new(\result))))
===========================================================================
DataStructures.CursorList.find(java.lang.Object):::ENTER
    Variables: this this.header DataStructures.CursorList.cursorSpace DataStructures.CursorList.cursorSpace.getClass().getName() DataStructures.CursorList.cursorSpace[] DataStructures.CursorList.cursorSpace[].getClass().getName() DataStructures.CursorList.cursorSpace[].element DataStructures.CursorList.cursorSpace[].element.getClass().getName() DataStructures.CursorList.cursorSpace[].next DataStructures.CursorList.SPACE_SIZE x x.getClass().getName() size(DataStructures.CursorList.cursorSpace[]) size(DataStructures.CursorList.cursorSpace[])-1 DataStructures.CursorList.cursorSpace[this.header] DataStructures.CursorList.cursorSpace[this.header-1] DataStructures.CursorList.cursorSpace[this.header..] DataStructures.CursorList.cursorSpace[this.header+1..] DataStructures.CursorList.cursorSpace[0..this.header] DataStructures.CursorList.cursorSpace[0..this.header-1] DataStructures.CursorList.cursorSpace[this.header].element DataStructures.CursorList.cursorSpace[this.header-1].element DataStructures.CursorList.cursorSpace[this.header..].element DataStructures.CursorList.cursorSpace[this.header+1..].element DataStructures.CursorList.cursorSpace[0..this.header].element DataStructures.CursorList.cursorSpace[0..this.header-1].element DataStructures.CursorList.cursorSpace[this.header].next DataStructures.CursorList.cursorSpace[this.header-1].next DataStructures.CursorList.cursorSpace[this.header..].next DataStructures.CursorList.cursorSpace[this.header+1..].next DataStructures.CursorList.cursorSpace[0..this.header].next DataStructures.CursorList.cursorSpace[0..this.header-1].next DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE] DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE-1] DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE..] DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE+1..] DataStructures.CursorList.cursorSpace[0..DataStructures.CursorList.SPACE_SIZE] DataStructures.CursorList.cursorSpace[0..DataStructures.CursorList.SPACE_SIZE-1] DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE].element DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE-1].element DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE..].element DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE+1..].element DataStructures.CursorList.cursorSpace[0..DataStructures.CursorList.SPACE_SIZE].element DataStructures.CursorList.cursorSpace[0..DataStructures.CursorList.SPACE_SIZE-1].element DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE].next DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE-1].next DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE..].next DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE+1..].next DataStructures.CursorList.cursorSpace[0..DataStructures.CursorList.SPACE_SIZE].next DataStructures.CursorList.cursorSpace[0..DataStructures.CursorList.SPACE_SIZE-1].next
this.header == 1 || this.header == 4 || this.header == 20
x != null
warning: method daikon.inv.unary.string.PrintableString.format(OutputFormat:JML) needs to be implemented: x.getClass().getName() is printable
warning: method daikon.inv.unary.sequence.CommonSequence.format(OutputFormat:JML) needs to be implemented: {3} subset of DataStructures.CursorList.cursorSpace[0..this.header].next
DataStructures.CursorList.cursorSpace.getClass().getName() != x.getClass().getName()
daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, this.header) > daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, DataStructures.CursorList.SPACE_SIZE-1)
===========================================================================
DataStructures.CursorList.find(java.lang.Object):::EXIT
    Variables: this this.header DataStructures.CursorList.cursorSpace DataStructures.CursorList.cursorSpace.getClass().getName() DataStructures.CursorList.cursorSpace[] DataStructures.CursorList.cursorSpace[].getClass().getName() DataStructures.CursorList.cursorSpace[].element DataStructures.CursorList.cursorSpace[].element.getClass().getName() DataStructures.CursorList.cursorSpace[].next DataStructures.CursorList.SPACE_SIZE x x.getClass().getName() return return.current orig(this) orig(this.header) orig(DataStructures.CursorList.cursorSpace) orig(DataStructures.CursorList.cursorSpace.getClass().getName()) orig(DataStructures.CursorList.cursorSpace[]) orig(DataStructures.CursorList.cursorSpace[].getClass().getName()) orig(DataStructures.CursorList.cursorSpace[].element) orig(DataStructures.CursorList.cursorSpace[].element.getClass().getName()) orig(DataStructures.CursorList.cursorSpace[].next) orig(x) orig(x.getClass().getName()) size(DataStructures.CursorList.cursorSpace[]) size(DataStructures.CursorList.cursorSpace[])-1 orig(size(DataStructures.CursorList.cursorSpace[])) orig(size(DataStructures.CursorList.cursorSpace[]))-1 DataStructures.CursorList.cursorSpace[this.header] DataStructures.CursorList.cursorSpace[this.header-1] DataStructures.CursorList.cursorSpace[this.header..] DataStructures.CursorList.cursorSpace[this.header+1..] DataStructures.CursorList.cursorSpace[0..this.header] DataStructures.CursorList.cursorSpace[0..this.header-1] DataStructures.CursorList.cursorSpace[this.header].element DataStructures.CursorList.cursorSpace[this.header-1].element DataStructures.CursorList.cursorSpace[this.header..].element DataStructures.CursorList.cursorSpace[this.header+1..].element DataStructures.CursorList.cursorSpace[0..this.header].element DataStructures.CursorList.cursorSpace[0..this.header-1].element DataStructures.CursorList.cursorSpace[this.header].next DataStructures.CursorList.cursorSpace[this.header-1].next DataStructures.CursorList.cursorSpace[this.header..].next DataStructures.CursorList.cursorSpace[this.header+1..].next DataStructures.CursorList.cursorSpace[0..this.header].next DataStructures.CursorList.cursorSpace[0..this.header-1].next orig(DataStructures.CursorList.cursorSpace[post(this.header)]) orig(DataStructures.CursorList.cursorSpace[post(this.header)-1]) orig(DataStructures.CursorList.cursorSpace[post(this.header)..]) orig(DataStructures.CursorList.cursorSpace[post(this.header)+1..]) orig(DataStructures.CursorList.cursorSpace[0..post(this.header)]) orig(DataStructures.CursorList.cursorSpace[0..post(this.header)-1]) orig(DataStructures.CursorList.cursorSpace[post(this.header)].element) orig(DataStructures.CursorList.cursorSpace[post(this.header)-1].element) orig(DataStructures.CursorList.cursorSpace[post(this.header)..].element) orig(DataStructures.CursorList.cursorSpace[post(this.header)+1..].element) orig(DataStructures.CursorList.cursorSpace[0..post(this.header)].element) orig(DataStructures.CursorList.cursorSpace[0..post(this.header)-1].element) orig(DataStructures.CursorList.cursorSpace[post(this.header)].next) orig(DataStructures.CursorList.cursorSpace[post(this.header)-1].next) orig(DataStructures.CursorList.cursorSpace[post(this.header)..].next) orig(DataStructures.CursorList.cursorSpace[post(this.header)+1..].next) orig(DataStructures.CursorList.cursorSpace[0..post(this.header)].next) orig(DataStructures.CursorList.cursorSpace[0..post(this.header)-1].next) DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE] DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE-1] DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE..] DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE+1..] DataStructures.CursorList.cursorSpace[0..DataStructures.CursorList.SPACE_SIZE] DataStructures.CursorList.cursorSpace[0..DataStructures.CursorList.SPACE_SIZE-1] DataStructures.CursorList.cursorSpace[return.current] DataStructures.CursorList.cursorSpace[return.current-1] DataStructures.CursorList.cursorSpace[return.current..] DataStructures.CursorList.cursorSpace[return.current+1..] DataStructures.CursorList.cursorSpace[0..return.current] DataStructures.CursorList.cursorSpace[0..return.current-1] DataStructures.CursorList.cursorSpace[orig(this.header)] DataStructures.CursorList.cursorSpace[orig(this.header)-1] DataStructures.CursorList.cursorSpace[orig(this.header)..] DataStructures.CursorList.cursorSpace[orig(this.header)+1..] DataStructures.CursorList.cursorSpace[0..orig(this.header)] DataStructures.CursorList.cursorSpace[0..orig(this.header)-1] DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE].element DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE-1].element DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE..].element DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE+1..].element DataStructures.CursorList.cursorSpace[0..DataStructures.CursorList.SPACE_SIZE].element DataStructures.CursorList.cursorSpace[0..DataStructures.CursorList.SPACE_SIZE-1].element DataStructures.CursorList.cursorSpace[return.current].element DataStructures.CursorList.cursorSpace[return.current-1].element DataStructures.CursorList.cursorSpace[return.current..].element DataStructures.CursorList.cursorSpace[return.current+1..].element DataStructures.CursorList.cursorSpace[0..return.current].element DataStructures.CursorList.cursorSpace[0..return.current-1].element DataStructures.CursorList.cursorSpace[orig(this.header)].element DataStructures.CursorList.cursorSpace[orig(this.header)-1].element DataStructures.CursorList.cursorSpace[orig(this.header)..].element DataStructures.CursorList.cursorSpace[orig(this.header)+1..].element DataStructures.CursorList.cursorSpace[0..orig(this.header)].element DataStructures.CursorList.cursorSpace[0..orig(this.header)-1].element DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE].next DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE-1].next DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE..].next DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE+1..].next DataStructures.CursorList.cursorSpace[0..DataStructures.CursorList.SPACE_SIZE].next DataStructures.CursorList.cursorSpace[0..DataStructures.CursorList.SPACE_SIZE-1].next DataStructures.CursorList.cursorSpace[return.current].next DataStructures.CursorList.cursorSpace[return.current-1].next DataStructures.CursorList.cursorSpace[return.current..].next DataStructures.CursorList.cursorSpace[return.current+1..].next DataStructures.CursorList.cursorSpace[0..return.current].next DataStructures.CursorList.cursorSpace[0..return.current-1].next DataStructures.CursorList.cursorSpace[orig(this.header)].next DataStructures.CursorList.cursorSpace[orig(this.header)-1].next DataStructures.CursorList.cursorSpace[orig(this.header)..].next DataStructures.CursorList.cursorSpace[orig(this.header)+1..].next DataStructures.CursorList.cursorSpace[0..orig(this.header)].next DataStructures.CursorList.cursorSpace[0..orig(this.header)-1].next orig(DataStructures.CursorList.cursorSpace[post(DataStructures.CursorList.SPACE_SIZE)]) orig(DataStructures.CursorList.cursorSpace[post(DataStructures.CursorList.SPACE_SIZE)-1]) orig(DataStructures.CursorList.cursorSpace[post(DataStructures.CursorList.SPACE_SIZE)..]) orig(DataStructures.CursorList.cursorSpace[post(DataStructures.CursorList.SPACE_SIZE)+1..]) orig(DataStructures.CursorList.cursorSpace[0..post(DataStructures.CursorList.SPACE_SIZE)]) orig(DataStructures.CursorList.cursorSpace[0..post(DataStructures.CursorList.SPACE_SIZE)-1]) orig(DataStructures.CursorList.cursorSpace[post(DataStructures.CursorList.SPACE_SIZE)].element) orig(DataStructures.CursorList.cursorSpace[post(DataStructures.CursorList.SPACE_SIZE)-1].element) orig(DataStructures.CursorList.cursorSpace[post(DataStructures.CursorList.SPACE_SIZE)..].element) orig(DataStructures.CursorList.cursorSpace[post(DataStructures.CursorList.SPACE_SIZE)+1..].element) orig(DataStructures.CursorList.cursorSpace[0..post(DataStructures.CursorList.SPACE_SIZE)].element) orig(DataStructures.CursorList.cursorSpace[0..post(DataStructures.CursorList.SPACE_SIZE)-1].element) orig(DataStructures.CursorList.cursorSpace[post(DataStructures.CursorList.SPACE_SIZE)].next) orig(DataStructures.CursorList.cursorSpace[post(DataStructures.CursorList.SPACE_SIZE)-1].next) orig(DataStructures.CursorList.cursorSpace[post(DataStructures.CursorList.SPACE_SIZE)..].next) orig(DataStructures.CursorList.cursorSpace[post(DataStructures.CursorList.SPACE_SIZE)+1..].next) orig(DataStructures.CursorList.cursorSpace[0..post(DataStructures.CursorList.SPACE_SIZE)].next) orig(DataStructures.CursorList.cursorSpace[0..post(DataStructures.CursorList.SPACE_SIZE)-1].next) orig(DataStructures.CursorList.cursorSpace[post(return.current)]) orig(DataStructures.CursorList.cursorSpace[post(return.current)-1]) orig(DataStructures.CursorList.cursorSpace[post(return.current)..]) orig(DataStructures.CursorList.cursorSpace[post(return.current)+1..]) orig(DataStructures.CursorList.cursorSpace[0..post(return.current)]) orig(DataStructures.CursorList.cursorSpace[0..post(return.current)-1]) orig(DataStructures.CursorList.cursorSpace[post(return.current)].element) orig(DataStructures.CursorList.cursorSpace[post(return.current)-1].element) orig(DataStructures.CursorList.cursorSpace[post(return.current)..].element) orig(DataStructures.CursorList.cursorSpace[post(return.current)+1..].element) orig(DataStructures.CursorList.cursorSpace[0..post(return.current)].element) orig(DataStructures.CursorList.cursorSpace[0..post(return.current)-1].element) orig(DataStructures.CursorList.cursorSpace[post(return.current)].next) orig(DataStructures.CursorList.cursorSpace[post(return.current)-1].next) orig(DataStructures.CursorList.cursorSpace[post(return.current)..].next) orig(DataStructures.CursorList.cursorSpace[post(return.current)+1..].next) orig(DataStructures.CursorList.cursorSpace[0..post(return.current)].next) orig(DataStructures.CursorList.cursorSpace[0..post(return.current)-1].next) orig(DataStructures.CursorList.cursorSpace[this.header]) orig(DataStructures.CursorList.cursorSpace[this.header-1]) orig(DataStructures.CursorList.cursorSpace[this.header..]) orig(DataStructures.CursorList.cursorSpace[this.header+1..]) orig(DataStructures.CursorList.cursorSpace[0..this.header]) orig(DataStructures.CursorList.cursorSpace[0..this.header-1]) orig(DataStructures.CursorList.cursorSpace[this.header].element) orig(DataStructures.CursorList.cursorSpace[this.header-1].element) orig(DataStructures.CursorList.cursorSpace[this.header..].element) orig(DataStructures.CursorList.cursorSpace[this.header+1..].element) orig(DataStructures.CursorList.cursorSpace[0..this.header].element) orig(DataStructures.CursorList.cursorSpace[0..this.header-1].element) orig(DataStructures.CursorList.cursorSpace[this.header].next) orig(DataStructures.CursorList.cursorSpace[this.header-1].next) orig(DataStructures.CursorList.cursorSpace[this.header..].next) orig(DataStructures.CursorList.cursorSpace[this.header+1..].next) orig(DataStructures.CursorList.cursorSpace[0..this.header].next) orig(DataStructures.CursorList.cursorSpace[0..this.header-1].next)
this.header == \old(this.header)
DataStructures.CursorList.cursorSpace == \old(DataStructures.CursorList.cursorSpace)
DataStructures.CursorList.cursorSpace.getClass().getName() == \old(DataStructures.CursorList.cursorSpace.getClass().getName())
daikon.Quant.pairwiseEqual(DataStructures.CursorList.cursorSpace, \old(DataStructures.CursorList.cursorSpace))
daikon.Quant.pairwiseEqual(daikon.Quant.collectObject(DataStructures.CursorList.cursorSpace, "element"), \old(daikon.Quant.collectObject(DataStructures.CursorList.cursorSpace, "element")))
daikon.Quant.pairwiseEqual(daikon.Quant.collectObject(DataStructures.CursorList.cursorSpace, "next"), \old(daikon.Quant.collectObject(DataStructures.CursorList.cursorSpace, "next")))
daikon.Quant.getElement_Object(DataStructures.CursorList.cursorSpace, this.header) == \old(daikon.Quant.getElement_Object(DataStructures.CursorList.cursorSpace, \new(DataStructures.CursorList.SPACE_SIZE)-1))
this.header == 1 || this.header == 4 || this.header == 20
\result != null
\result.current >= 0
warning: method daikon.inv.unary.sequence.CommonSequence.format(OutputFormat:JML) needs to be implemented: {3} subset of DataStructures.CursorList.cursorSpace[0..this.header].next
warning: method daikon.inv.unary.sequence.CommonSequence.format(OutputFormat:JML) needs to be implemented: {34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 0} subset of DataStructures.CursorList.cursorSpace[return.current..].next
warning: method daikon.inv.unary.sequence.CommonSequence.format(OutputFormat:JML) needs to be implemented: {34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 0} subset of DataStructures.CursorList.cursorSpace[return.current+1..].next
this.header != \result.current
this.header != daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, \result.current)
DataStructures.CursorList.cursorSpace.getClass().getName() != \old(x.getClass().getName())
daikon.Quant.memberOf(\result.current , daikon.Quant.collectObject(DataStructures.CursorList.cursorSpace, "next") )
\result.current < daikon.Quant.size(DataStructures.CursorList.cursorSpace)-1
(!(daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, this.header-1) == 0)) || (\result.current == 0)
(\result.current >> daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, this.header-1) == 0)
\result.current >= daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, DataStructures.CursorList.SPACE_SIZE-1)
\result.current != daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, \result.current)
daikon.Quant.size(DataStructures.CursorList.cursorSpace)-1 > daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, \result.current)
daikon.Quant.memberOf(daikon.Quant.size(DataStructures.CursorList.cursorSpace)-1 , daikon.Quant.slice(DataStructures.CursorList.cursorSpace, \result.current, daikon.Quant.size(DataStructures.CursorList.cursorSpace)) )
daikon.Quant.memberOf(daikon.Quant.size(DataStructures.CursorList.cursorSpace)-1 , daikon.Quant.slice(DataStructures.CursorList.cursorSpace, \result.current+1, daikon.Quant.size(DataStructures.CursorList.cursorSpace)) )
daikon.Quant.eltsLT(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, 0, \result.current), daikon.Quant.size(DataStructures.CursorList.cursorSpace)-1)
daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, this.header) > daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, DataStructures.CursorList.SPACE_SIZE-1)
daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, this.header) != daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, \result.current)
daikon.Quant.subsetOf(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, DataStructures.CursorList.SPACE_SIZE, daikon.Quant.size(DataStructures.CursorList.cursorSpace)), daikon.Quant.slice(DataStructures.CursorList.cursorSpace, \result.current, daikon.Quant.size(DataStructures.CursorList.cursorSpace)))
daikon.Quant.subsetOf(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, DataStructures.CursorList.SPACE_SIZE, daikon.Quant.size(DataStructures.CursorList.cursorSpace)), daikon.Quant.slice(DataStructures.CursorList.cursorSpace, \result.current+1, daikon.Quant.size(DataStructures.CursorList.cursorSpace)))
daikon.Quant.subsetOf(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, DataStructures.CursorList.SPACE_SIZE, daikon.Quant.size(DataStructures.CursorList.cursorSpace)), daikon.Quant.slice(DataStructures.CursorList.cursorSpace, 0, \result.current))
daikon.Quant.subsetOf(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, DataStructures.CursorList.SPACE_SIZE, daikon.Quant.size(DataStructures.CursorList.cursorSpace)), daikon.Quant.slice(DataStructures.CursorList.cursorSpace, 0, \result.current-1))
daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, DataStructures.CursorList.SPACE_SIZE-1) <= daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, \result.current)
===========================================================================
DataStructures.CursorList.findPrevious(java.lang.Object):::ENTER
    Variables: this this.header DataStructures.CursorList.cursorSpace DataStructures.CursorList.cursorSpace.getClass().getName() DataStructures.CursorList.cursorSpace[] DataStructures.CursorList.cursorSpace[].getClass().getName() DataStructures.CursorList.cursorSpace[].element DataStructures.CursorList.cursorSpace[].element.getClass().getName() DataStructures.CursorList.cursorSpace[].next DataStructures.CursorList.SPACE_SIZE x x.getClass().getName() size(DataStructures.CursorList.cursorSpace[]) size(DataStructures.CursorList.cursorSpace[])-1 DataStructures.CursorList.cursorSpace[this.header] DataStructures.CursorList.cursorSpace[this.header-1] DataStructures.CursorList.cursorSpace[this.header..] DataStructures.CursorList.cursorSpace[this.header+1..] DataStructures.CursorList.cursorSpace[0..this.header] DataStructures.CursorList.cursorSpace[0..this.header-1] DataStructures.CursorList.cursorSpace[this.header].element DataStructures.CursorList.cursorSpace[this.header-1].element DataStructures.CursorList.cursorSpace[this.header..].element DataStructures.CursorList.cursorSpace[this.header+1..].element DataStructures.CursorList.cursorSpace[0..this.header].element DataStructures.CursorList.cursorSpace[0..this.header-1].element DataStructures.CursorList.cursorSpace[this.header].next DataStructures.CursorList.cursorSpace[this.header-1].next DataStructures.CursorList.cursorSpace[this.header..].next DataStructures.CursorList.cursorSpace[this.header+1..].next DataStructures.CursorList.cursorSpace[0..this.header].next DataStructures.CursorList.cursorSpace[0..this.header-1].next DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE] DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE-1] DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE..] DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE+1..] DataStructures.CursorList.cursorSpace[0..DataStructures.CursorList.SPACE_SIZE] DataStructures.CursorList.cursorSpace[0..DataStructures.CursorList.SPACE_SIZE-1] DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE].element DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE-1].element DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE..].element DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE+1..].element DataStructures.CursorList.cursorSpace[0..DataStructures.CursorList.SPACE_SIZE].element DataStructures.CursorList.cursorSpace[0..DataStructures.CursorList.SPACE_SIZE-1].element DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE].next DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE-1].next DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE..].next DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE+1..].next DataStructures.CursorList.cursorSpace[0..DataStructures.CursorList.SPACE_SIZE].next DataStructures.CursorList.cursorSpace[0..DataStructures.CursorList.SPACE_SIZE-1].next
x != null
warning: method daikon.inv.unary.string.PrintableString.format(OutputFormat:JML) needs to be implemented: x.getClass().getName() is printable
DataStructures.CursorList.cursorSpace.getClass().getName() != x.getClass().getName()
===========================================================================
DataStructures.CursorList.findPrevious(java.lang.Object):::EXIT
    Variables: this this.header DataStructures.CursorList.cursorSpace DataStructures.CursorList.cursorSpace.getClass().getName() DataStructures.CursorList.cursorSpace[] DataStructures.CursorList.cursorSpace[].getClass().getName() DataStructures.CursorList.cursorSpace[].element DataStructures.CursorList.cursorSpace[].element.getClass().getName() DataStructures.CursorList.cursorSpace[].next DataStructures.CursorList.SPACE_SIZE x x.getClass().getName() return return.current orig(this) orig(this.header) orig(DataStructures.CursorList.cursorSpace) orig(DataStructures.CursorList.cursorSpace.getClass().getName()) orig(DataStructures.CursorList.cursorSpace[]) orig(DataStructures.CursorList.cursorSpace[].getClass().getName()) orig(DataStructures.CursorList.cursorSpace[].element) orig(DataStructures.CursorList.cursorSpace[].element.getClass().getName()) orig(DataStructures.CursorList.cursorSpace[].next) orig(x) orig(x.getClass().getName()) size(DataStructures.CursorList.cursorSpace[]) size(DataStructures.CursorList.cursorSpace[])-1 orig(size(DataStructures.CursorList.cursorSpace[])) orig(size(DataStructures.CursorList.cursorSpace[]))-1 DataStructures.CursorList.cursorSpace[this.header] DataStructures.CursorList.cursorSpace[this.header-1] DataStructures.CursorList.cursorSpace[this.header..] DataStructures.CursorList.cursorSpace[this.header+1..] DataStructures.CursorList.cursorSpace[0..this.header] DataStructures.CursorList.cursorSpace[0..this.header-1] DataStructures.CursorList.cursorSpace[this.header].element DataStructures.CursorList.cursorSpace[this.header-1].element DataStructures.CursorList.cursorSpace[this.header..].element DataStructures.CursorList.cursorSpace[this.header+1..].element DataStructures.CursorList.cursorSpace[0..this.header].element DataStructures.CursorList.cursorSpace[0..this.header-1].element DataStructures.CursorList.cursorSpace[this.header].next DataStructures.CursorList.cursorSpace[this.header-1].next DataStructures.CursorList.cursorSpace[this.header..].next DataStructures.CursorList.cursorSpace[this.header+1..].next DataStructures.CursorList.cursorSpace[0..this.header].next DataStructures.CursorList.cursorSpace[0..this.header-1].next orig(DataStructures.CursorList.cursorSpace[post(this.header)]) orig(DataStructures.CursorList.cursorSpace[post(this.header)-1]) orig(DataStructures.CursorList.cursorSpace[post(this.header)..]) orig(DataStructures.CursorList.cursorSpace[post(this.header)+1..]) orig(DataStructures.CursorList.cursorSpace[0..post(this.header)]) orig(DataStructures.CursorList.cursorSpace[0..post(this.header)-1]) orig(DataStructures.CursorList.cursorSpace[post(this.header)].element) orig(DataStructures.CursorList.cursorSpace[post(this.header)-1].element) orig(DataStructures.CursorList.cursorSpace[post(this.header)..].element) orig(DataStructures.CursorList.cursorSpace[post(this.header)+1..].element) orig(DataStructures.CursorList.cursorSpace[0..post(this.header)].element) orig(DataStructures.CursorList.cursorSpace[0..post(this.header)-1].element) orig(DataStructures.CursorList.cursorSpace[post(this.header)].next) orig(DataStructures.CursorList.cursorSpace[post(this.header)-1].next) orig(DataStructures.CursorList.cursorSpace[post(this.header)..].next) orig(DataStructures.CursorList.cursorSpace[post(this.header)+1..].next) orig(DataStructures.CursorList.cursorSpace[0..post(this.header)].next) orig(DataStructures.CursorList.cursorSpace[0..post(this.header)-1].next) DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE] DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE-1] DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE..] DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE+1..] DataStructures.CursorList.cursorSpace[0..DataStructures.CursorList.SPACE_SIZE] DataStructures.CursorList.cursorSpace[0..DataStructures.CursorList.SPACE_SIZE-1] DataStructures.CursorList.cursorSpace[return.current] DataStructures.CursorList.cursorSpace[return.current-1] DataStructures.CursorList.cursorSpace[return.current..] DataStructures.CursorList.cursorSpace[return.current+1..] DataStructures.CursorList.cursorSpace[0..return.current] DataStructures.CursorList.cursorSpace[0..return.current-1] DataStructures.CursorList.cursorSpace[orig(this.header)] DataStructures.CursorList.cursorSpace[orig(this.header)-1] DataStructures.CursorList.cursorSpace[orig(this.header)..] DataStructures.CursorList.cursorSpace[orig(this.header)+1..] DataStructures.CursorList.cursorSpace[0..orig(this.header)] DataStructures.CursorList.cursorSpace[0..orig(this.header)-1] DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE].element DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE-1].element DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE..].element DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE+1..].element DataStructures.CursorList.cursorSpace[0..DataStructures.CursorList.SPACE_SIZE].element DataStructures.CursorList.cursorSpace[0..DataStructures.CursorList.SPACE_SIZE-1].element DataStructures.CursorList.cursorSpace[return.current].element DataStructures.CursorList.cursorSpace[return.current-1].element DataStructures.CursorList.cursorSpace[return.current..].element DataStructures.CursorList.cursorSpace[return.current+1..].element DataStructures.CursorList.cursorSpace[0..return.current].element DataStructures.CursorList.cursorSpace[0..return.current-1].element DataStructures.CursorList.cursorSpace[orig(this.header)].element DataStructures.CursorList.cursorSpace[orig(this.header)-1].element DataStructures.CursorList.cursorSpace[orig(this.header)..].element DataStructures.CursorList.cursorSpace[orig(this.header)+1..].element DataStructures.CursorList.cursorSpace[0..orig(this.header)].element DataStructures.CursorList.cursorSpace[0..orig(this.header)-1].element DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE].next DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE-1].next DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE..].next DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE+1..].next DataStructures.CursorList.cursorSpace[0..DataStructures.CursorList.SPACE_SIZE].next DataStructures.CursorList.cursorSpace[0..DataStructures.CursorList.SPACE_SIZE-1].next DataStructures.CursorList.cursorSpace[return.current].next DataStructures.CursorList.cursorSpace[return.current-1].next DataStructures.CursorList.cursorSpace[return.current..].next DataStructures.CursorList.cursorSpace[return.current+1..].next DataStructures.CursorList.cursorSpace[0..return.current].next DataStructures.CursorList.cursorSpace[0..return.current-1].next DataStructures.CursorList.cursorSpace[orig(this.header)].next DataStructures.CursorList.cursorSpace[orig(this.header)-1].next DataStructures.CursorList.cursorSpace[orig(this.header)..].next DataStructures.CursorList.cursorSpace[orig(this.header)+1..].next DataStructures.CursorList.cursorSpace[0..orig(this.header)].next DataStructures.CursorList.cursorSpace[0..orig(this.header)-1].next orig(DataStructures.CursorList.cursorSpace[post(DataStructures.CursorList.SPACE_SIZE)]) orig(DataStructures.CursorList.cursorSpace[post(DataStructures.CursorList.SPACE_SIZE)-1]) orig(DataStructures.CursorList.cursorSpace[post(DataStructures.CursorList.SPACE_SIZE)..]) orig(DataStructures.CursorList.cursorSpace[post(DataStructures.CursorList.SPACE_SIZE)+1..]) orig(DataStructures.CursorList.cursorSpace[0..post(DataStructures.CursorList.SPACE_SIZE)]) orig(DataStructures.CursorList.cursorSpace[0..post(DataStructures.CursorList.SPACE_SIZE)-1]) orig(DataStructures.CursorList.cursorSpace[post(DataStructures.CursorList.SPACE_SIZE)].element) orig(DataStructures.CursorList.cursorSpace[post(DataStructures.CursorList.SPACE_SIZE)-1].element) orig(DataStructures.CursorList.cursorSpace[post(DataStructures.CursorList.SPACE_SIZE)..].element) orig(DataStructures.CursorList.cursorSpace[post(DataStructures.CursorList.SPACE_SIZE)+1..].element) orig(DataStructures.CursorList.cursorSpace[0..post(DataStructures.CursorList.SPACE_SIZE)].element) orig(DataStructures.CursorList.cursorSpace[0..post(DataStructures.CursorList.SPACE_SIZE)-1].element) orig(DataStructures.CursorList.cursorSpace[post(DataStructures.CursorList.SPACE_SIZE)].next) orig(DataStructures.CursorList.cursorSpace[post(DataStructures.CursorList.SPACE_SIZE)-1].next) orig(DataStructures.CursorList.cursorSpace[post(DataStructures.CursorList.SPACE_SIZE)..].next) orig(DataStructures.CursorList.cursorSpace[post(DataStructures.CursorList.SPACE_SIZE)+1..].next) orig(DataStructures.CursorList.cursorSpace[0..post(DataStructures.CursorList.SPACE_SIZE)].next) orig(DataStructures.CursorList.cursorSpace[0..post(DataStructures.CursorList.SPACE_SIZE)-1].next) orig(DataStructures.CursorList.cursorSpace[post(return.current)]) orig(DataStructures.CursorList.cursorSpace[post(return.current)-1]) orig(DataStructures.CursorList.cursorSpace[post(return.current)..]) orig(DataStructures.CursorList.cursorSpace[post(return.current)+1..]) orig(DataStructures.CursorList.cursorSpace[0..post(return.current)]) orig(DataStructures.CursorList.cursorSpace[0..post(return.current)-1]) orig(DataStructures.CursorList.cursorSpace[post(return.current)].element) orig(DataStructures.CursorList.cursorSpace[post(return.current)-1].element) orig(DataStructures.CursorList.cursorSpace[post(return.current)..].element) orig(DataStructures.CursorList.cursorSpace[post(return.current)+1..].element) orig(DataStructures.CursorList.cursorSpace[0..post(return.current)].element) orig(DataStructures.CursorList.cursorSpace[0..post(return.current)-1].element) orig(DataStructures.CursorList.cursorSpace[post(return.current)].next) orig(DataStructures.CursorList.cursorSpace[post(return.current)-1].next) orig(DataStructures.CursorList.cursorSpace[post(return.current)..].next) orig(DataStructures.CursorList.cursorSpace[post(return.current)+1..].next) orig(DataStructures.CursorList.cursorSpace[0..post(return.current)].next) orig(DataStructures.CursorList.cursorSpace[0..post(return.current)-1].next) orig(DataStructures.CursorList.cursorSpace[this.header]) orig(DataStructures.CursorList.cursorSpace[this.header-1]) orig(DataStructures.CursorList.cursorSpace[this.header..]) orig(DataStructures.CursorList.cursorSpace[this.header+1..]) orig(DataStructures.CursorList.cursorSpace[0..this.header]) orig(DataStructures.CursorList.cursorSpace[0..this.header-1]) orig(DataStructures.CursorList.cursorSpace[this.header].element) orig(DataStructures.CursorList.cursorSpace[this.header-1].element) orig(DataStructures.CursorList.cursorSpace[this.header..].element) orig(DataStructures.CursorList.cursorSpace[this.header+1..].element) orig(DataStructures.CursorList.cursorSpace[0..this.header].element) orig(DataStructures.CursorList.cursorSpace[0..this.header-1].element) orig(DataStructures.CursorList.cursorSpace[this.header].next) orig(DataStructures.CursorList.cursorSpace[this.header-1].next) orig(DataStructures.CursorList.cursorSpace[this.header..].next) orig(DataStructures.CursorList.cursorSpace[this.header+1..].next) orig(DataStructures.CursorList.cursorSpace[0..this.header].next) orig(DataStructures.CursorList.cursorSpace[0..this.header-1].next)
this.header == \old(this.header)
DataStructures.CursorList.cursorSpace == \old(DataStructures.CursorList.cursorSpace)
DataStructures.CursorList.cursorSpace.getClass().getName() == \old(DataStructures.CursorList.cursorSpace.getClass().getName())
daikon.Quant.pairwiseEqual(DataStructures.CursorList.cursorSpace, \old(DataStructures.CursorList.cursorSpace))
daikon.Quant.pairwiseEqual(daikon.Quant.collectObject(DataStructures.CursorList.cursorSpace, "element"), \old(daikon.Quant.collectObject(DataStructures.CursorList.cursorSpace, "element")))
daikon.Quant.pairwiseEqual(daikon.Quant.collectObject(DataStructures.CursorList.cursorSpace, "next"), \old(daikon.Quant.collectObject(DataStructures.CursorList.cursorSpace, "next")))
daikon.Quant.getElement_Object(DataStructures.CursorList.cursorSpace, this.header) == \old(daikon.Quant.getElement_Object(DataStructures.CursorList.cursorSpace, \new(DataStructures.CursorList.SPACE_SIZE)-1))
\result != null
warning: method daikon.inv.unary.sequence.CommonSequence.format(OutputFormat:JML) needs to be implemented: {0, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99} subset of DataStructures.CursorList.cursorSpace[return.current..].next
warning: method daikon.inv.unary.sequence.CommonSequence.format(OutputFormat:JML) needs to be implemented: {34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 0} subset of DataStructures.CursorList.cursorSpace[return.current+1..].next
this.header != daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, \result.current)
this.header != daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, \result.current-1)
DataStructures.CursorList.cursorSpace.getClass().getName() != \old(x.getClass().getName())
\result.current < daikon.Quant.size(DataStructures.CursorList.cursorSpace)-1
\result.current > daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, DataStructures.CursorList.SPACE_SIZE-1)
\result.current != daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, \result.current)
daikon.Quant.size(DataStructures.CursorList.cursorSpace)-1 > daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, \result.current)
daikon.Quant.size(DataStructures.CursorList.cursorSpace)-1 > daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, \result.current-1)
daikon.Quant.memberOf(daikon.Quant.size(DataStructures.CursorList.cursorSpace)-1 , daikon.Quant.slice(DataStructures.CursorList.cursorSpace, \result.current, daikon.Quant.size(DataStructures.CursorList.cursorSpace)) )
daikon.Quant.memberOf(daikon.Quant.size(DataStructures.CursorList.cursorSpace)-1 , daikon.Quant.slice(DataStructures.CursorList.cursorSpace, \result.current+1, daikon.Quant.size(DataStructures.CursorList.cursorSpace)) )
daikon.Quant.eltsLT(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, 0, \result.current), daikon.Quant.size(DataStructures.CursorList.cursorSpace)-1)
(!(daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, this.header) == 0)) || (daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, \result.current) == 0)
(!(daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, this.header-1) == 0)) || (daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, \result.current) == 0)
daikon.Quant.subsetOf(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, DataStructures.CursorList.SPACE_SIZE, daikon.Quant.size(DataStructures.CursorList.cursorSpace)), daikon.Quant.slice(DataStructures.CursorList.cursorSpace, \result.current, daikon.Quant.size(DataStructures.CursorList.cursorSpace)))
daikon.Quant.subsetOf(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, DataStructures.CursorList.SPACE_SIZE, daikon.Quant.size(DataStructures.CursorList.cursorSpace)), daikon.Quant.slice(DataStructures.CursorList.cursorSpace, \result.current+1, daikon.Quant.size(DataStructures.CursorList.cursorSpace)))
daikon.Quant.subsetOf(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, DataStructures.CursorList.SPACE_SIZE, daikon.Quant.size(DataStructures.CursorList.cursorSpace)), daikon.Quant.slice(DataStructures.CursorList.cursorSpace, 0, \result.current))
daikon.Quant.subsetOf(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, DataStructures.CursorList.SPACE_SIZE, daikon.Quant.size(DataStructures.CursorList.cursorSpace)), daikon.Quant.slice(DataStructures.CursorList.cursorSpace, 0, \result.current-1))
daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, DataStructures.CursorList.SPACE_SIZE-1) <= daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, \result.current)
daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, DataStructures.CursorList.SPACE_SIZE-1) <= daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, \result.current-1)
===========================================================================
DataStructures.CursorList.first():::ENTER
    Variables: this this.header DataStructures.CursorList.cursorSpace DataStructures.CursorList.cursorSpace.getClass().getName() DataStructures.CursorList.cursorSpace[] DataStructures.CursorList.cursorSpace[].getClass().getName() DataStructures.CursorList.cursorSpace[].element DataStructures.CursorList.cursorSpace[].element.getClass().getName() DataStructures.CursorList.cursorSpace[].next DataStructures.CursorList.SPACE_SIZE size(DataStructures.CursorList.cursorSpace[]) size(DataStructures.CursorList.cursorSpace[])-1 DataStructures.CursorList.cursorSpace[this.header] DataStructures.CursorList.cursorSpace[this.header-1] DataStructures.CursorList.cursorSpace[this.header..] DataStructures.CursorList.cursorSpace[this.header+1..] DataStructures.CursorList.cursorSpace[0..this.header] DataStructures.CursorList.cursorSpace[0..this.header-1] DataStructures.CursorList.cursorSpace[this.header].element DataStructures.CursorList.cursorSpace[this.header-1].element DataStructures.CursorList.cursorSpace[this.header..].element DataStructures.CursorList.cursorSpace[this.header+1..].element DataStructures.CursorList.cursorSpace[0..this.header].element DataStructures.CursorList.cursorSpace[0..this.header-1].element DataStructures.CursorList.cursorSpace[this.header].next DataStructures.CursorList.cursorSpace[this.header-1].next DataStructures.CursorList.cursorSpace[this.header..].next DataStructures.CursorList.cursorSpace[this.header+1..].next DataStructures.CursorList.cursorSpace[0..this.header].next DataStructures.CursorList.cursorSpace[0..this.header-1].next DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE] DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE-1] DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE..] DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE+1..] DataStructures.CursorList.cursorSpace[0..DataStructures.CursorList.SPACE_SIZE] DataStructures.CursorList.cursorSpace[0..DataStructures.CursorList.SPACE_SIZE-1] DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE].element DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE-1].element DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE..].element DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE+1..].element DataStructures.CursorList.cursorSpace[0..DataStructures.CursorList.SPACE_SIZE].element DataStructures.CursorList.cursorSpace[0..DataStructures.CursorList.SPACE_SIZE-1].element DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE].next DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE-1].next DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE..].next DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE+1..].next DataStructures.CursorList.cursorSpace[0..DataStructures.CursorList.SPACE_SIZE].next DataStructures.CursorList.cursorSpace[0..DataStructures.CursorList.SPACE_SIZE-1].next
===========================================================================
DataStructures.CursorList.first():::EXIT
    Variables: this this.header DataStructures.CursorList.cursorSpace DataStructures.CursorList.cursorSpace.getClass().getName() DataStructures.CursorList.cursorSpace[] DataStructures.CursorList.cursorSpace[].getClass().getName() DataStructures.CursorList.cursorSpace[].element DataStructures.CursorList.cursorSpace[].element.getClass().getName() DataStructures.CursorList.cursorSpace[].next DataStructures.CursorList.SPACE_SIZE return return.current orig(this) orig(this.header) orig(DataStructures.CursorList.cursorSpace) orig(DataStructures.CursorList.cursorSpace.getClass().getName()) orig(DataStructures.CursorList.cursorSpace[]) orig(DataStructures.CursorList.cursorSpace[].getClass().getName()) orig(DataStructures.CursorList.cursorSpace[].element) orig(DataStructures.CursorList.cursorSpace[].element.getClass().getName()) orig(DataStructures.CursorList.cursorSpace[].next) size(DataStructures.CursorList.cursorSpace[]) size(DataStructures.CursorList.cursorSpace[])-1 orig(size(DataStructures.CursorList.cursorSpace[])) orig(size(DataStructures.CursorList.cursorSpace[]))-1 DataStructures.CursorList.cursorSpace[this.header] DataStructures.CursorList.cursorSpace[this.header-1] DataStructures.CursorList.cursorSpace[this.header..] DataStructures.CursorList.cursorSpace[this.header+1..] DataStructures.CursorList.cursorSpace[0..this.header] DataStructures.CursorList.cursorSpace[0..this.header-1] DataStructures.CursorList.cursorSpace[this.header].element DataStructures.CursorList.cursorSpace[this.header-1].element DataStructures.CursorList.cursorSpace[this.header..].element DataStructures.CursorList.cursorSpace[this.header+1..].element DataStructures.CursorList.cursorSpace[0..this.header].element DataStructures.CursorList.cursorSpace[0..this.header-1].element DataStructures.CursorList.cursorSpace[this.header].next DataStructures.CursorList.cursorSpace[this.header-1].next DataStructures.CursorList.cursorSpace[this.header..].next DataStructures.CursorList.cursorSpace[this.header+1..].next DataStructures.CursorList.cursorSpace[0..this.header].next DataStructures.CursorList.cursorSpace[0..this.header-1].next orig(DataStructures.CursorList.cursorSpace[post(this.header)]) orig(DataStructures.CursorList.cursorSpace[post(this.header)-1]) orig(DataStructures.CursorList.cursorSpace[post(this.header)..]) orig(DataStructures.CursorList.cursorSpace[post(this.header)+1..]) orig(DataStructures.CursorList.cursorSpace[0..post(this.header)]) orig(DataStructures.CursorList.cursorSpace[0..post(this.header)-1]) orig(DataStructures.CursorList.cursorSpace[post(this.header)].element) orig(DataStructures.CursorList.cursorSpace[post(this.header)-1].element) orig(DataStructures.CursorList.cursorSpace[post(this.header)..].element) orig(DataStructures.CursorList.cursorSpace[post(this.header)+1..].element) orig(DataStructures.CursorList.cursorSpace[0..post(this.header)].element) orig(DataStructures.CursorList.cursorSpace[0..post(this.header)-1].element) orig(DataStructures.CursorList.cursorSpace[post(this.header)].next) orig(DataStructures.CursorList.cursorSpace[post(this.header)-1].next) orig(DataStructures.CursorList.cursorSpace[post(this.header)..].next) orig(DataStructures.CursorList.cursorSpace[post(this.header)+1..].next) orig(DataStructures.CursorList.cursorSpace[0..post(this.header)].next) orig(DataStructures.CursorList.cursorSpace[0..post(this.header)-1].next) DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE] DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE-1] DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE..] DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE+1..] DataStructures.CursorList.cursorSpace[0..DataStructures.CursorList.SPACE_SIZE] DataStructures.CursorList.cursorSpace[0..DataStructures.CursorList.SPACE_SIZE-1] DataStructures.CursorList.cursorSpace[return.current] DataStructures.CursorList.cursorSpace[return.current-1] DataStructures.CursorList.cursorSpace[return.current..] DataStructures.CursorList.cursorSpace[return.current+1..] DataStructures.CursorList.cursorSpace[0..return.current] DataStructures.CursorList.cursorSpace[0..return.current-1] DataStructures.CursorList.cursorSpace[orig(this.header)] DataStructures.CursorList.cursorSpace[orig(this.header)-1] DataStructures.CursorList.cursorSpace[orig(this.header)..] DataStructures.CursorList.cursorSpace[orig(this.header)+1..] DataStructures.CursorList.cursorSpace[0..orig(this.header)] DataStructures.CursorList.cursorSpace[0..orig(this.header)-1] DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE].element DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE-1].element DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE..].element DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE+1..].element DataStructures.CursorList.cursorSpace[0..DataStructures.CursorList.SPACE_SIZE].element DataStructures.CursorList.cursorSpace[0..DataStructures.CursorList.SPACE_SIZE-1].element DataStructures.CursorList.cursorSpace[return.current].element DataStructures.CursorList.cursorSpace[return.current-1].element DataStructures.CursorList.cursorSpace[return.current..].element DataStructures.CursorList.cursorSpace[return.current+1..].element DataStructures.CursorList.cursorSpace[0..return.current].element DataStructures.CursorList.cursorSpace[0..return.current-1].element DataStructures.CursorList.cursorSpace[orig(this.header)].element DataStructures.CursorList.cursorSpace[orig(this.header)-1].element DataStructures.CursorList.cursorSpace[orig(this.header)..].element DataStructures.CursorList.cursorSpace[orig(this.header)+1..].element DataStructures.CursorList.cursorSpace[0..orig(this.header)].element DataStructures.CursorList.cursorSpace[0..orig(this.header)-1].element DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE].next DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE-1].next DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE..].next DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE+1..].next DataStructures.CursorList.cursorSpace[0..DataStructures.CursorList.SPACE_SIZE].next DataStructures.CursorList.cursorSpace[0..DataStructures.CursorList.SPACE_SIZE-1].next DataStructures.CursorList.cursorSpace[return.current].next DataStructures.CursorList.cursorSpace[return.current-1].next DataStructures.CursorList.cursorSpace[return.current..].next DataStructures.CursorList.cursorSpace[return.current+1..].next DataStructures.CursorList.cursorSpace[0..return.current].next DataStructures.CursorList.cursorSpace[0..return.current-1].next DataStructures.CursorList.cursorSpace[orig(this.header)].next DataStructures.CursorList.cursorSpace[orig(this.header)-1].next DataStructures.CursorList.cursorSpace[orig(this.header)..].next DataStructures.CursorList.cursorSpace[orig(this.header)+1..].next DataStructures.CursorList.cursorSpace[0..orig(this.header)].next DataStructures.CursorList.cursorSpace[0..orig(this.header)-1].next orig(DataStructures.CursorList.cursorSpace[post(DataStructures.CursorList.SPACE_SIZE)]) orig(DataStructures.CursorList.cursorSpace[post(DataStructures.CursorList.SPACE_SIZE)-1]) orig(DataStructures.CursorList.cursorSpace[post(DataStructures.CursorList.SPACE_SIZE)..]) orig(DataStructures.CursorList.cursorSpace[post(DataStructures.CursorList.SPACE_SIZE)+1..]) orig(DataStructures.CursorList.cursorSpace[0..post(DataStructures.CursorList.SPACE_SIZE)]) orig(DataStructures.CursorList.cursorSpace[0..post(DataStructures.CursorList.SPACE_SIZE)-1]) orig(DataStructures.CursorList.cursorSpace[post(DataStructures.CursorList.SPACE_SIZE)].element) orig(DataStructures.CursorList.cursorSpace[post(DataStructures.CursorList.SPACE_SIZE)-1].element) orig(DataStructures.CursorList.cursorSpace[post(DataStructures.CursorList.SPACE_SIZE)..].element) orig(DataStructures.CursorList.cursorSpace[post(DataStructures.CursorList.SPACE_SIZE)+1..].element) orig(DataStructures.CursorList.cursorSpace[0..post(DataStructures.CursorList.SPACE_SIZE)].element) orig(DataStructures.CursorList.cursorSpace[0..post(DataStructures.CursorList.SPACE_SIZE)-1].element) orig(DataStructures.CursorList.cursorSpace[post(DataStructures.CursorList.SPACE_SIZE)].next) orig(DataStructures.CursorList.cursorSpace[post(DataStructures.CursorList.SPACE_SIZE)-1].next) orig(DataStructures.CursorList.cursorSpace[post(DataStructures.CursorList.SPACE_SIZE)..].next) orig(DataStructures.CursorList.cursorSpace[post(DataStructures.CursorList.SPACE_SIZE)+1..].next) orig(DataStructures.CursorList.cursorSpace[0..post(DataStructures.CursorList.SPACE_SIZE)].next) orig(DataStructures.CursorList.cursorSpace[0..post(DataStructures.CursorList.SPACE_SIZE)-1].next) orig(DataStructures.CursorList.cursorSpace[post(return.current)]) orig(DataStructures.CursorList.cursorSpace[post(return.current)-1]) orig(DataStructures.CursorList.cursorSpace[post(return.current)..]) orig(DataStructures.CursorList.cursorSpace[post(return.current)+1..]) orig(DataStructures.CursorList.cursorSpace[0..post(return.current)]) orig(DataStructures.CursorList.cursorSpace[0..post(return.current)-1]) orig(DataStructures.CursorList.cursorSpace[post(return.current)].element) orig(DataStructures.CursorList.cursorSpace[post(return.current)-1].element) orig(DataStructures.CursorList.cursorSpace[post(return.current)..].element) orig(DataStructures.CursorList.cursorSpace[post(return.current)+1..].element) orig(DataStructures.CursorList.cursorSpace[0..post(return.current)].element) orig(DataStructures.CursorList.cursorSpace[0..post(return.current)-1].element) orig(DataStructures.CursorList.cursorSpace[post(return.current)].next) orig(DataStructures.CursorList.cursorSpace[post(return.current)-1].next) orig(DataStructures.CursorList.cursorSpace[post(return.current)..].next) orig(DataStructures.CursorList.cursorSpace[post(return.current)+1..].next) orig(DataStructures.CursorList.cursorSpace[0..post(return.current)].next) orig(DataStructures.CursorList.cursorSpace[0..post(return.current)-1].next) orig(DataStructures.CursorList.cursorSpace[this.header]) orig(DataStructures.CursorList.cursorSpace[this.header-1]) orig(DataStructures.CursorList.cursorSpace[this.header..]) orig(DataStructures.CursorList.cursorSpace[this.header+1..]) orig(DataStructures.CursorList.cursorSpace[0..this.header]) orig(DataStructures.CursorList.cursorSpace[0..this.header-1]) orig(DataStructures.CursorList.cursorSpace[this.header].element) orig(DataStructures.CursorList.cursorSpace[this.header-1].element) orig(DataStructures.CursorList.cursorSpace[this.header..].element) orig(DataStructures.CursorList.cursorSpace[this.header+1..].element) orig(DataStructures.CursorList.cursorSpace[0..this.header].element) orig(DataStructures.CursorList.cursorSpace[0..this.header-1].element) orig(DataStructures.CursorList.cursorSpace[this.header].next) orig(DataStructures.CursorList.cursorSpace[this.header-1].next) orig(DataStructures.CursorList.cursorSpace[this.header..].next) orig(DataStructures.CursorList.cursorSpace[this.header+1..].next) orig(DataStructures.CursorList.cursorSpace[0..this.header].next) orig(DataStructures.CursorList.cursorSpace[0..this.header-1].next)
this.header == \old(this.header)
DataStructures.CursorList.cursorSpace == \old(DataStructures.CursorList.cursorSpace)
DataStructures.CursorList.cursorSpace.getClass().getName() == \old(DataStructures.CursorList.cursorSpace.getClass().getName())
daikon.Quant.pairwiseEqual(DataStructures.CursorList.cursorSpace, \old(DataStructures.CursorList.cursorSpace))
daikon.Quant.pairwiseEqual(daikon.Quant.collectObject(DataStructures.CursorList.cursorSpace, "element"), \old(daikon.Quant.collectObject(DataStructures.CursorList.cursorSpace, "element")))
daikon.Quant.pairwiseEqual(daikon.Quant.collectObject(DataStructures.CursorList.cursorSpace, "next"), \old(daikon.Quant.collectObject(DataStructures.CursorList.cursorSpace, "next")))
\result.current == daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, this.header)
\result.current == \old(daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, \new(this.header)))
\result.current == daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, \old(this.header))
\result.current == \old(daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, this.header))
daikon.Quant.getElement_Object(DataStructures.CursorList.cursorSpace, this.header) == \old(daikon.Quant.getElement_Object(DataStructures.CursorList.cursorSpace, \new(DataStructures.CursorList.SPACE_SIZE)-1))
\result != null
warning: method daikon.inv.unary.sequence.CommonSequence.format(OutputFormat:JML) needs to be implemented: {0, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99} subset of DataStructures.CursorList.cursorSpace[return.current..].next
warning: method daikon.inv.unary.sequence.CommonSequence.format(OutputFormat:JML) needs to be implemented: {0, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99} subset of DataStructures.CursorList.cursorSpace[return.current+1..].next
this.header != \result.current
this.header != daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, \result.current)
\result.current < daikon.Quant.size(DataStructures.CursorList.cursorSpace)-1
\result.current != daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, this.header-1)
\result.current >= daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, DataStructures.CursorList.SPACE_SIZE-1)
\result.current != daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, \result.current)
daikon.Quant.size(DataStructures.CursorList.cursorSpace)-1 > daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, \result.current)
daikon.Quant.memberOf(daikon.Quant.size(DataStructures.CursorList.cursorSpace)-1 , daikon.Quant.slice(DataStructures.CursorList.cursorSpace, \result.current, daikon.Quant.size(DataStructures.CursorList.cursorSpace)) )
daikon.Quant.memberOf(daikon.Quant.size(DataStructures.CursorList.cursorSpace)-1 , daikon.Quant.slice(DataStructures.CursorList.cursorSpace, \result.current+1, daikon.Quant.size(DataStructures.CursorList.cursorSpace)) )
daikon.Quant.eltsLT(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, 0, \result.current), daikon.Quant.size(DataStructures.CursorList.cursorSpace)-1)
(daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, \result.current) >> daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, this.header-1) == 0)
(!(daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, this.header-1) == 0)) || (daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, \result.current) == 0)
daikon.Quant.subsetOf(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, DataStructures.CursorList.SPACE_SIZE, daikon.Quant.size(DataStructures.CursorList.cursorSpace)), daikon.Quant.slice(DataStructures.CursorList.cursorSpace, \result.current, daikon.Quant.size(DataStructures.CursorList.cursorSpace)))
daikon.Quant.subsetOf(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, DataStructures.CursorList.SPACE_SIZE, daikon.Quant.size(DataStructures.CursorList.cursorSpace)), daikon.Quant.slice(DataStructures.CursorList.cursorSpace, \result.current+1, daikon.Quant.size(DataStructures.CursorList.cursorSpace)))
daikon.Quant.subsetOf(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, DataStructures.CursorList.SPACE_SIZE, daikon.Quant.size(DataStructures.CursorList.cursorSpace)), daikon.Quant.slice(DataStructures.CursorList.cursorSpace, 0, \result.current))
daikon.Quant.subsetOf(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, DataStructures.CursorList.SPACE_SIZE, daikon.Quant.size(DataStructures.CursorList.cursorSpace)), daikon.Quant.slice(DataStructures.CursorList.cursorSpace, 0, \result.current-1))
daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, DataStructures.CursorList.SPACE_SIZE-1) <= daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, \result.current)
===========================================================================
DataStructures.CursorList.free(int):::ENTER
    Variables: DataStructures.CursorList.cursorSpace DataStructures.CursorList.cursorSpace.getClass().getName() DataStructures.CursorList.cursorSpace[] DataStructures.CursorList.cursorSpace[].getClass().getName() DataStructures.CursorList.cursorSpace[].element DataStructures.CursorList.cursorSpace[].element.getClass().getName() DataStructures.CursorList.cursorSpace[].next DataStructures.CursorList.SPACE_SIZE p size(DataStructures.CursorList.cursorSpace[]) size(DataStructures.CursorList.cursorSpace[])-1 DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE] DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE-1] DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE..] DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE+1..] DataStructures.CursorList.cursorSpace[0..DataStructures.CursorList.SPACE_SIZE] DataStructures.CursorList.cursorSpace[0..DataStructures.CursorList.SPACE_SIZE-1] DataStructures.CursorList.cursorSpace[p] DataStructures.CursorList.cursorSpace[p-1] DataStructures.CursorList.cursorSpace[p..] DataStructures.CursorList.cursorSpace[p+1..] DataStructures.CursorList.cursorSpace[0..p] DataStructures.CursorList.cursorSpace[0..p-1] DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE].element DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE-1].element DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE..].element DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE+1..].element DataStructures.CursorList.cursorSpace[0..DataStructures.CursorList.SPACE_SIZE].element DataStructures.CursorList.cursorSpace[0..DataStructures.CursorList.SPACE_SIZE-1].element DataStructures.CursorList.cursorSpace[p].element DataStructures.CursorList.cursorSpace[p-1].element DataStructures.CursorList.cursorSpace[p..].element DataStructures.CursorList.cursorSpace[p+1..].element DataStructures.CursorList.cursorSpace[0..p].element DataStructures.CursorList.cursorSpace[0..p-1].element DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE].next DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE-1].next DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE..].next DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE+1..].next DataStructures.CursorList.cursorSpace[0..DataStructures.CursorList.SPACE_SIZE].next DataStructures.CursorList.cursorSpace[0..DataStructures.CursorList.SPACE_SIZE-1].next DataStructures.CursorList.cursorSpace[p].next DataStructures.CursorList.cursorSpace[p-1].next DataStructures.CursorList.cursorSpace[p..].next DataStructures.CursorList.cursorSpace[p+1..].next DataStructures.CursorList.cursorSpace[0..p].next DataStructures.CursorList.cursorSpace[0..p-1].next
daikon.Quant.getElement_Object(DataStructures.CursorList.cursorSpace, p) != null
warning: method daikon.inv.unary.sequence.CommonSequence.format(OutputFormat:JML) needs to be implemented: {0, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99} subset of DataStructures.CursorList.cursorSpace[p..].next
warning: method daikon.inv.unary.sequence.CommonSequence.format(OutputFormat:JML) needs to be implemented: {34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 0} subset of DataStructures.CursorList.cursorSpace[p+1..].next
warning: method daikon.inv.unary.sequence.CommonSequence.format(OutputFormat:JML) needs to be implemented: {3} subset of DataStructures.CursorList.cursorSpace[0..p].next
warning: method daikon.inv.unary.sequence.CommonSequence.format(OutputFormat:JML) needs to be implemented: {3} subset of DataStructures.CursorList.cursorSpace[0..p-1].next
p < daikon.Quant.size(DataStructures.CursorList.cursorSpace)-1
p > daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, DataStructures.CursorList.SPACE_SIZE-1)
p != daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, p)
(daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, p-1) >> p == 0)
p != daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, p-1)
daikon.Quant.size(DataStructures.CursorList.cursorSpace)-1 > daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, p)
daikon.Quant.size(DataStructures.CursorList.cursorSpace)-1 > daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, p-1)
daikon.Quant.memberOf(daikon.Quant.size(DataStructures.CursorList.cursorSpace)-1 , daikon.Quant.slice(DataStructures.CursorList.cursorSpace, p, daikon.Quant.size(DataStructures.CursorList.cursorSpace)) )
daikon.Quant.memberOf(daikon.Quant.size(DataStructures.CursorList.cursorSpace)-1 , daikon.Quant.slice(DataStructures.CursorList.cursorSpace, p+1, daikon.Quant.size(DataStructures.CursorList.cursorSpace)) )
daikon.Quant.eltsLT(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, 0, p), daikon.Quant.size(DataStructures.CursorList.cursorSpace)-1)
daikon.Quant.subsetOf(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, DataStructures.CursorList.SPACE_SIZE, daikon.Quant.size(DataStructures.CursorList.cursorSpace)), daikon.Quant.slice(DataStructures.CursorList.cursorSpace, p, daikon.Quant.size(DataStructures.CursorList.cursorSpace)))
daikon.Quant.subsetOf(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, DataStructures.CursorList.SPACE_SIZE, daikon.Quant.size(DataStructures.CursorList.cursorSpace)), daikon.Quant.slice(DataStructures.CursorList.cursorSpace, p+1, daikon.Quant.size(DataStructures.CursorList.cursorSpace)))
daikon.Quant.subsetOf(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, DataStructures.CursorList.SPACE_SIZE, daikon.Quant.size(DataStructures.CursorList.cursorSpace)), daikon.Quant.slice(DataStructures.CursorList.cursorSpace, 0, p))
daikon.Quant.subsetOf(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, DataStructures.CursorList.SPACE_SIZE, daikon.Quant.size(DataStructures.CursorList.cursorSpace)), daikon.Quant.slice(DataStructures.CursorList.cursorSpace, 0, p-1))
daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, DataStructures.CursorList.SPACE_SIZE-1) <= daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, p)
daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, DataStructures.CursorList.SPACE_SIZE-1) <= daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, p-1)
===========================================================================
DataStructures.CursorList.free(int):::EXIT
    Variables: DataStructures.CursorList.cursorSpace DataStructures.CursorList.cursorSpace.getClass().getName() DataStructures.CursorList.cursorSpace[] DataStructures.CursorList.cursorSpace[].getClass().getName() DataStructures.CursorList.cursorSpace[].element DataStructures.CursorList.cursorSpace[].element.getClass().getName() DataStructures.CursorList.cursorSpace[].next DataStructures.CursorList.SPACE_SIZE p orig(DataStructures.CursorList.cursorSpace) orig(DataStructures.CursorList.cursorSpace.getClass().getName()) orig(DataStructures.CursorList.cursorSpace[]) orig(DataStructures.CursorList.cursorSpace[].getClass().getName()) orig(DataStructures.CursorList.cursorSpace[].element) orig(DataStructures.CursorList.cursorSpace[].element.getClass().getName()) orig(DataStructures.CursorList.cursorSpace[].next) orig(p) size(DataStructures.CursorList.cursorSpace[]) size(DataStructures.CursorList.cursorSpace[])-1 orig(size(DataStructures.CursorList.cursorSpace[])) orig(size(DataStructures.CursorList.cursorSpace[]))-1 DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE] DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE-1] DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE..] DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE+1..] DataStructures.CursorList.cursorSpace[0..DataStructures.CursorList.SPACE_SIZE] DataStructures.CursorList.cursorSpace[0..DataStructures.CursorList.SPACE_SIZE-1] DataStructures.CursorList.cursorSpace[p] DataStructures.CursorList.cursorSpace[p-1] DataStructures.CursorList.cursorSpace[p..] DataStructures.CursorList.cursorSpace[p+1..] DataStructures.CursorList.cursorSpace[0..p] DataStructures.CursorList.cursorSpace[0..p-1] DataStructures.CursorList.cursorSpace[orig(p)] DataStructures.CursorList.cursorSpace[orig(p)-1] DataStructures.CursorList.cursorSpace[orig(p)..] DataStructures.CursorList.cursorSpace[orig(p)+1..] DataStructures.CursorList.cursorSpace[0..orig(p)] DataStructures.CursorList.cursorSpace[0..orig(p)-1] DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE].element DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE-1].element DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE..].element DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE+1..].element DataStructures.CursorList.cursorSpace[0..DataStructures.CursorList.SPACE_SIZE].element DataStructures.CursorList.cursorSpace[0..DataStructures.CursorList.SPACE_SIZE-1].element DataStructures.CursorList.cursorSpace[p].element DataStructures.CursorList.cursorSpace[p-1].element DataStructures.CursorList.cursorSpace[p..].element DataStructures.CursorList.cursorSpace[p+1..].element DataStructures.CursorList.cursorSpace[0..p].element DataStructures.CursorList.cursorSpace[0..p-1].element DataStructures.CursorList.cursorSpace[orig(p)].element DataStructures.CursorList.cursorSpace[orig(p)-1].element DataStructures.CursorList.cursorSpace[orig(p)..].element DataStructures.CursorList.cursorSpace[orig(p)+1..].element DataStructures.CursorList.cursorSpace[0..orig(p)].element DataStructures.CursorList.cursorSpace[0..orig(p)-1].element DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE].next DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE-1].next DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE..].next DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE+1..].next DataStructures.CursorList.cursorSpace[0..DataStructures.CursorList.SPACE_SIZE].next DataStructures.CursorList.cursorSpace[0..DataStructures.CursorList.SPACE_SIZE-1].next DataStructures.CursorList.cursorSpace[p].next DataStructures.CursorList.cursorSpace[p-1].next DataStructures.CursorList.cursorSpace[p..].next DataStructures.CursorList.cursorSpace[p+1..].next DataStructures.CursorList.cursorSpace[0..p].next DataStructures.CursorList.cursorSpace[0..p-1].next DataStructures.CursorList.cursorSpace[orig(p)].next DataStructures.CursorList.cursorSpace[orig(p)-1].next DataStructures.CursorList.cursorSpace[orig(p)..].next DataStructures.CursorList.cursorSpace[orig(p)+1..].next DataStructures.CursorList.cursorSpace[0..orig(p)].next DataStructures.CursorList.cursorSpace[0..orig(p)-1].next orig(DataStructures.CursorList.cursorSpace[post(DataStructures.CursorList.SPACE_SIZE)]) orig(DataStructures.CursorList.cursorSpace[post(DataStructures.CursorList.SPACE_SIZE)-1]) orig(DataStructures.CursorList.cursorSpace[post(DataStructures.CursorList.SPACE_SIZE)..]) orig(DataStructures.CursorList.cursorSpace[post(DataStructures.CursorList.SPACE_SIZE)+1..]) orig(DataStructures.CursorList.cursorSpace[0..post(DataStructures.CursorList.SPACE_SIZE)]) orig(DataStructures.CursorList.cursorSpace[0..post(DataStructures.CursorList.SPACE_SIZE)-1]) orig(DataStructures.CursorList.cursorSpace[post(DataStructures.CursorList.SPACE_SIZE)].element) orig(DataStructures.CursorList.cursorSpace[post(DataStructures.CursorList.SPACE_SIZE)-1].element) orig(DataStructures.CursorList.cursorSpace[post(DataStructures.CursorList.SPACE_SIZE)..].element) orig(DataStructures.CursorList.cursorSpace[post(DataStructures.CursorList.SPACE_SIZE)+1..].element) orig(DataStructures.CursorList.cursorSpace[0..post(DataStructures.CursorList.SPACE_SIZE)].element) orig(DataStructures.CursorList.cursorSpace[0..post(DataStructures.CursorList.SPACE_SIZE)-1].element) orig(DataStructures.CursorList.cursorSpace[post(DataStructures.CursorList.SPACE_SIZE)].next) orig(DataStructures.CursorList.cursorSpace[post(DataStructures.CursorList.SPACE_SIZE)-1].next) orig(DataStructures.CursorList.cursorSpace[post(DataStructures.CursorList.SPACE_SIZE)..].next) orig(DataStructures.CursorList.cursorSpace[post(DataStructures.CursorList.SPACE_SIZE)+1..].next) orig(DataStructures.CursorList.cursorSpace[0..post(DataStructures.CursorList.SPACE_SIZE)].next) orig(DataStructures.CursorList.cursorSpace[0..post(DataStructures.CursorList.SPACE_SIZE)-1].next) orig(DataStructures.CursorList.cursorSpace[post(p)]) orig(DataStructures.CursorList.cursorSpace[post(p)-1]) orig(DataStructures.CursorList.cursorSpace[post(p)..]) orig(DataStructures.CursorList.cursorSpace[post(p)+1..]) orig(DataStructures.CursorList.cursorSpace[0..post(p)]) orig(DataStructures.CursorList.cursorSpace[0..post(p)-1]) orig(DataStructures.CursorList.cursorSpace[post(p)].element) orig(DataStructures.CursorList.cursorSpace[post(p)-1].element) orig(DataStructures.CursorList.cursorSpace[post(p)..].element) orig(DataStructures.CursorList.cursorSpace[post(p)+1..].element) orig(DataStructures.CursorList.cursorSpace[0..post(p)].element) orig(DataStructures.CursorList.cursorSpace[0..post(p)-1].element) orig(DataStructures.CursorList.cursorSpace[post(p)].next) orig(DataStructures.CursorList.cursorSpace[post(p)-1].next) orig(DataStructures.CursorList.cursorSpace[post(p)..].next) orig(DataStructures.CursorList.cursorSpace[post(p)+1..].next) orig(DataStructures.CursorList.cursorSpace[0..post(p)].next) orig(DataStructures.CursorList.cursorSpace[0..post(p)-1].next) orig(DataStructures.CursorList.cursorSpace[p]) orig(DataStructures.CursorList.cursorSpace[p-1]) orig(DataStructures.CursorList.cursorSpace[p..]) orig(DataStructures.CursorList.cursorSpace[p+1..]) orig(DataStructures.CursorList.cursorSpace[0..p]) orig(DataStructures.CursorList.cursorSpace[0..p-1]) orig(DataStructures.CursorList.cursorSpace[p].element) orig(DataStructures.CursorList.cursorSpace[p-1].element) orig(DataStructures.CursorList.cursorSpace[p..].element) orig(DataStructures.CursorList.cursorSpace[p+1..].element) orig(DataStructures.CursorList.cursorSpace[0..p].element) orig(DataStructures.CursorList.cursorSpace[0..p-1].element) orig(DataStructures.CursorList.cursorSpace[p].next) orig(DataStructures.CursorList.cursorSpace[p-1].next) orig(DataStructures.CursorList.cursorSpace[p..].next) orig(DataStructures.CursorList.cursorSpace[p+1..].next) orig(DataStructures.CursorList.cursorSpace[0..p].next) orig(DataStructures.CursorList.cursorSpace[0..p-1].next)
assignable DataStructures.CursorList.cursorSpace[].element, DataStructures.CursorList.cursorSpace[].next
DataStructures.CursorList.cursorSpace == \old(DataStructures.CursorList.cursorSpace)
DataStructures.CursorList.cursorSpace.getClass().getName() == \old(DataStructures.CursorList.cursorSpace.getClass().getName())
daikon.Quant.pairwiseEqual(DataStructures.CursorList.cursorSpace, \old(DataStructures.CursorList.cursorSpace))
daikon.Quant.getElement_Object(DataStructures.CursorList.cursorSpace, DataStructures.CursorList.SPACE_SIZE-1) == daikon.Quant.getElement_Object(DataStructures.CursorList.cursorSpace, \old(p))
daikon.Quant.getElement_Object(DataStructures.CursorList.cursorSpace, DataStructures.CursorList.SPACE_SIZE-1) == \old(daikon.Quant.getElement_Object(DataStructures.CursorList.cursorSpace, \new(DataStructures.CursorList.SPACE_SIZE)-1))
daikon.Quant.getElement_Object(DataStructures.CursorList.cursorSpace, \old(p)-1) == \old(daikon.Quant.getElement_Object(DataStructures.CursorList.cursorSpace, \new(p)-1))
daikon.Quant.getElement_Object(DataStructures.CursorList.cursorSpace, \old(p)-1) == \old(daikon.Quant.getElement_Object(DataStructures.CursorList.cursorSpace, p-1))
daikon.Quant.pairwiseEqual(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, \old(p)+1, daikon.Quant.size(DataStructures.CursorList.cursorSpace)), \old(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, \new(p)+1, daikon.Quant.size(DataStructures.CursorList.cursorSpace))))
daikon.Quant.pairwiseEqual(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, \old(p)+1, daikon.Quant.size(DataStructures.CursorList.cursorSpace)), \old(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, p+1, daikon.Quant.size(DataStructures.CursorList.cursorSpace))))
daikon.Quant.pairwiseEqual(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, 0, \old(p)-1), \old(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, 0, \new(p)-1)))
daikon.Quant.pairwiseEqual(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, 0, \old(p)-1), \old(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, 0, p-1)))
daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, DataStructures.CursorList.SPACE_SIZE-1) == \old(daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, \new(DataStructures.CursorList.SPACE_SIZE)-1))
daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, \old(p)-1) == \old(daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, \new(p)-1))
daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, \old(p)-1) == \old(daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, p-1))
daikon.Quant.pairwiseEqual(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, \old(p)+1, daikon.Quant.size(DataStructures.CursorList.cursorSpace)), \old(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, \new(p)+1, daikon.Quant.size(DataStructures.CursorList.cursorSpace))))
daikon.Quant.pairwiseEqual(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, \old(p)+1, daikon.Quant.size(DataStructures.CursorList.cursorSpace)), \old(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, p+1, daikon.Quant.size(DataStructures.CursorList.cursorSpace))))
warning: method daikon.inv.unary.sequence.CommonSequence.format(OutputFormat:JML) needs to be implemented: {33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 0} subset of DataStructures.CursorList.cursorSpace[orig(p)..].next
warning: method daikon.inv.unary.sequence.CommonSequence.format(OutputFormat:JML) needs to be implemented: {34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 0} subset of DataStructures.CursorList.cursorSpace[orig(p)+1..].next
warning: method daikon.inv.unary.sequence.CommonSequence.format(OutputFormat:JML) needs to be implemented: {3} subset of DataStructures.CursorList.cursorSpace[0..orig(p)].next
warning: method daikon.inv.unary.sequence.CommonSequence.format(OutputFormat:JML) needs to be implemented: {3} subset of DataStructures.CursorList.cursorSpace[0..orig(p)-1].next
daikon.Quant.subsetOf(daikon.Quant.collectObject(DataStructures.CursorList.cursorSpace, "element"), \old(daikon.Quant.collectObject(DataStructures.CursorList.cursorSpace, "element")))
daikon.Quant.memberOf(\old(p) , daikon.Quant.collectObject(DataStructures.CursorList.cursorSpace, "next") )
daikon.Quant.eltsLTE(\old(daikon.Quant.collectObject(DataStructures.CursorList.cursorSpace, "next")), daikon.Quant.size(DataStructures.CursorList.cursorSpace)-1)
daikon.Quant.memberOf(daikon.Quant.size(DataStructures.CursorList.cursorSpace)-1 , \old(daikon.Quant.collectObject(DataStructures.CursorList.cursorSpace, "next")) )
daikon.Quant.eltsGTE(\old(daikon.Quant.collectObject(DataStructures.CursorList.cursorSpace, "next")), daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, DataStructures.CursorList.SPACE_SIZE-1))
daikon.Quant.memberOf(daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, \old(p)) , \old(daikon.Quant.collectObject(DataStructures.CursorList.cursorSpace, "next")) )
\old(p) < daikon.Quant.size(DataStructures.CursorList.cursorSpace)-1
\old(p) > daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, DataStructures.CursorList.SPACE_SIZE-1)
\old(p) != daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, \old(p))
(daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, \old(p)-1) >> \old(p) == 0)
\old(p) != daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, \old(p)-1)
daikon.Quant.memberOf(\old(p) , daikon.Quant.slice(DataStructures.CursorList.cursorSpace, 0, \old(p)) )
daikon.Quant.memberOf(\old(p) , daikon.Quant.slice(DataStructures.CursorList.cursorSpace, 0, \old(p)-1) )
daikon.Quant.size(DataStructures.CursorList.cursorSpace)-1 > daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, \old(p))
daikon.Quant.size(DataStructures.CursorList.cursorSpace)-1 > daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, \old(p)-1)
daikon.Quant.memberOf(daikon.Quant.size(DataStructures.CursorList.cursorSpace)-1 , daikon.Quant.slice(DataStructures.CursorList.cursorSpace, \old(p), daikon.Quant.size(DataStructures.CursorList.cursorSpace)) )
daikon.Quant.memberOf(daikon.Quant.size(DataStructures.CursorList.cursorSpace)-1 , daikon.Quant.slice(DataStructures.CursorList.cursorSpace, \old(p)+1, daikon.Quant.size(DataStructures.CursorList.cursorSpace)) )
daikon.Quant.eltsLT(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, 0, \old(p)), daikon.Quant.size(DataStructures.CursorList.cursorSpace)-1)
daikon.Quant.size(DataStructures.CursorList.cursorSpace)-1 > \old(daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, p))
daikon.Quant.memberOf(daikon.Quant.size(DataStructures.CursorList.cursorSpace)-1 , \old(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, p, daikon.Quant.size(DataStructures.CursorList.cursorSpace))) )
daikon.Quant.eltsLT(\old(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, 0, p)), daikon.Quant.size(DataStructures.CursorList.cursorSpace)-1)
daikon.Quant.subsetOf(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, DataStructures.CursorList.SPACE_SIZE, daikon.Quant.size(DataStructures.CursorList.cursorSpace)), daikon.Quant.slice(DataStructures.CursorList.cursorSpace, \old(p), daikon.Quant.size(DataStructures.CursorList.cursorSpace)))
daikon.Quant.subsetOf(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, DataStructures.CursorList.SPACE_SIZE, daikon.Quant.size(DataStructures.CursorList.cursorSpace)), daikon.Quant.slice(DataStructures.CursorList.cursorSpace, \old(p)+1, daikon.Quant.size(DataStructures.CursorList.cursorSpace)))
daikon.Quant.subsetOf(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, DataStructures.CursorList.SPACE_SIZE, daikon.Quant.size(DataStructures.CursorList.cursorSpace)), daikon.Quant.slice(DataStructures.CursorList.cursorSpace, 0, \old(p)))
daikon.Quant.subsetOf(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, DataStructures.CursorList.SPACE_SIZE, daikon.Quant.size(DataStructures.CursorList.cursorSpace)), daikon.Quant.slice(DataStructures.CursorList.cursorSpace, 0, \old(p)-1))
daikon.Quant.subsetOf(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, DataStructures.CursorList.SPACE_SIZE, daikon.Quant.size(DataStructures.CursorList.cursorSpace)), \old(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, p, daikon.Quant.size(DataStructures.CursorList.cursorSpace))))
daikon.Quant.subsetOf(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, DataStructures.CursorList.SPACE_SIZE, daikon.Quant.size(DataStructures.CursorList.cursorSpace)), \old(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, 0, p)))
daikon.Quant.subsetOf(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, \old(p), daikon.Quant.size(DataStructures.CursorList.cursorSpace)), \old(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, p, daikon.Quant.size(DataStructures.CursorList.cursorSpace))))
daikon.Quant.subsetOf(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, 0, \old(p)), \old(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, 0, p)))
daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, DataStructures.CursorList.SPACE_SIZE-1) < daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, \old(p))
daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, DataStructures.CursorList.SPACE_SIZE-1) <= daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, \old(p)-1)
daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, DataStructures.CursorList.SPACE_SIZE-1) <= \old(daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, p))
daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, \old(p)) != daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, \old(p)-1)
daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, \old(p)) != \old(daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, p))
daikon.Quant.memberOf(daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, \old(p)) , \old(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, 0, p)) )
daikon.Quant.memberOf(daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, \old(p)) , \old(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, 0, p-1)) )
===========================================================================
DataStructures.CursorList.insert(java.lang.Object, DataStructures.CursorListItr):::ENTER
    Variables: this this.header DataStructures.CursorList.cursorSpace DataStructures.CursorList.cursorSpace.getClass().getName() DataStructures.CursorList.cursorSpace[] DataStructures.CursorList.cursorSpace[].getClass().getName() DataStructures.CursorList.cursorSpace[].element DataStructures.CursorList.cursorSpace[].element.getClass().getName() DataStructures.CursorList.cursorSpace[].next DataStructures.CursorList.SPACE_SIZE x x.getClass().getName() p p.current size(DataStructures.CursorList.cursorSpace[]) size(DataStructures.CursorList.cursorSpace[])-1 DataStructures.CursorList.cursorSpace[this.header] DataStructures.CursorList.cursorSpace[this.header-1] DataStructures.CursorList.cursorSpace[this.header..] DataStructures.CursorList.cursorSpace[this.header+1..] DataStructures.CursorList.cursorSpace[0..this.header] DataStructures.CursorList.cursorSpace[0..this.header-1] DataStructures.CursorList.cursorSpace[this.header].element DataStructures.CursorList.cursorSpace[this.header-1].element DataStructures.CursorList.cursorSpace[this.header..].element DataStructures.CursorList.cursorSpace[this.header+1..].element DataStructures.CursorList.cursorSpace[0..this.header].element DataStructures.CursorList.cursorSpace[0..this.header-1].element DataStructures.CursorList.cursorSpace[this.header].next DataStructures.CursorList.cursorSpace[this.header-1].next DataStructures.CursorList.cursorSpace[this.header..].next DataStructures.CursorList.cursorSpace[this.header+1..].next DataStructures.CursorList.cursorSpace[0..this.header].next DataStructures.CursorList.cursorSpace[0..this.header-1].next DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE] DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE-1] DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE..] DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE+1..] DataStructures.CursorList.cursorSpace[0..DataStructures.CursorList.SPACE_SIZE] DataStructures.CursorList.cursorSpace[0..DataStructures.CursorList.SPACE_SIZE-1] DataStructures.CursorList.cursorSpace[p.current] DataStructures.CursorList.cursorSpace[p.current-1] DataStructures.CursorList.cursorSpace[p.current..] DataStructures.CursorList.cursorSpace[p.current+1..] DataStructures.CursorList.cursorSpace[0..p.current] DataStructures.CursorList.cursorSpace[0..p.current-1] DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE].element DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE-1].element DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE..].element DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE+1..].element DataStructures.CursorList.cursorSpace[0..DataStructures.CursorList.SPACE_SIZE].element DataStructures.CursorList.cursorSpace[0..DataStructures.CursorList.SPACE_SIZE-1].element DataStructures.CursorList.cursorSpace[p.current].element DataStructures.CursorList.cursorSpace[p.current-1].element DataStructures.CursorList.cursorSpace[p.current..].element DataStructures.CursorList.cursorSpace[p.current+1..].element DataStructures.CursorList.cursorSpace[0..p.current].element DataStructures.CursorList.cursorSpace[0..p.current-1].element DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE].next DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE-1].next DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE..].next DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE+1..].next DataStructures.CursorList.cursorSpace[0..DataStructures.CursorList.SPACE_SIZE].next DataStructures.CursorList.cursorSpace[0..DataStructures.CursorList.SPACE_SIZE-1].next DataStructures.CursorList.cursorSpace[p.current].next DataStructures.CursorList.cursorSpace[p.current-1].next DataStructures.CursorList.cursorSpace[p.current..].next DataStructures.CursorList.cursorSpace[p.current+1..].next DataStructures.CursorList.cursorSpace[0..p.current].next DataStructures.CursorList.cursorSpace[0..p.current-1].next
this.header == 1 || this.header == 4 || this.header == 20
x != null
warning: method daikon.inv.unary.string.PrintableString.format(OutputFormat:JML) needs to be implemented: x.getClass().getName() is printable
p != null
warning: method daikon.inv.unary.sequence.CommonSequence.format(OutputFormat:JML) needs to be implemented: {0, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99} subset of DataStructures.CursorList.cursorSpace[p.current..].next
warning: method daikon.inv.unary.sequence.CommonSequence.format(OutputFormat:JML) needs to be implemented: {0, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99} subset of DataStructures.CursorList.cursorSpace[p.current+1..].next
this.header != daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, p.current)
this.header != daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, p.current-1)
DataStructures.CursorList.cursorSpace.getClass().getName() != x.getClass().getName()
p.current < daikon.Quant.size(DataStructures.CursorList.cursorSpace)-1
p.current > daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, DataStructures.CursorList.SPACE_SIZE-1)
p.current != daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, p.current)
daikon.Quant.size(DataStructures.CursorList.cursorSpace)-1 > daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, p.current)
daikon.Quant.size(DataStructures.CursorList.cursorSpace)-1 > daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, p.current-1)
daikon.Quant.memberOf(daikon.Quant.size(DataStructures.CursorList.cursorSpace)-1 , daikon.Quant.slice(DataStructures.CursorList.cursorSpace, p.current, daikon.Quant.size(DataStructures.CursorList.cursorSpace)) )
daikon.Quant.memberOf(daikon.Quant.size(DataStructures.CursorList.cursorSpace)-1 , daikon.Quant.slice(DataStructures.CursorList.cursorSpace, p.current+1, daikon.Quant.size(DataStructures.CursorList.cursorSpace)) )
daikon.Quant.eltsLT(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, 0, p.current), daikon.Quant.size(DataStructures.CursorList.cursorSpace)-1)
(!(daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, this.header) == 0)) || (daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, p.current) == 0)
daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, this.header) == (daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, p.current) | daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, this.header))
daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, this.header) >= daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, p.current)
(daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, p.current) >> daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, this.header-1) == 0)
(!(daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, this.header-1) == 0)) || (daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, p.current) == 0)
daikon.Quant.subsetOf(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, DataStructures.CursorList.SPACE_SIZE, daikon.Quant.size(DataStructures.CursorList.cursorSpace)), daikon.Quant.slice(DataStructures.CursorList.cursorSpace, p.current, daikon.Quant.size(DataStructures.CursorList.cursorSpace)))
daikon.Quant.subsetOf(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, DataStructures.CursorList.SPACE_SIZE, daikon.Quant.size(DataStructures.CursorList.cursorSpace)), daikon.Quant.slice(DataStructures.CursorList.cursorSpace, p.current+1, daikon.Quant.size(DataStructures.CursorList.cursorSpace)))
daikon.Quant.subsetOf(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, DataStructures.CursorList.SPACE_SIZE, daikon.Quant.size(DataStructures.CursorList.cursorSpace)), daikon.Quant.slice(DataStructures.CursorList.cursorSpace, 0, p.current))
daikon.Quant.subsetOf(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, DataStructures.CursorList.SPACE_SIZE, daikon.Quant.size(DataStructures.CursorList.cursorSpace)), daikon.Quant.slice(DataStructures.CursorList.cursorSpace, 0, p.current-1))
daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, DataStructures.CursorList.SPACE_SIZE-1) <= daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, p.current)
daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, DataStructures.CursorList.SPACE_SIZE-1) <= daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, p.current-1)
(!(daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, p.current-1) == 0)) || (daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, p.current) == 0)
(daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, p.current) >> daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, p.current-1) == 0)
===========================================================================
DataStructures.CursorList.insert(java.lang.Object, DataStructures.CursorListItr):::EXIT
    Variables: this this.header DataStructures.CursorList.cursorSpace DataStructures.CursorList.cursorSpace.getClass().getName() DataStructures.CursorList.cursorSpace[] DataStructures.CursorList.cursorSpace[].getClass().getName() DataStructures.CursorList.cursorSpace[].element DataStructures.CursorList.cursorSpace[].element.getClass().getName() DataStructures.CursorList.cursorSpace[].next DataStructures.CursorList.SPACE_SIZE x x.getClass().getName() p p.current orig(this) orig(this.header) orig(DataStructures.CursorList.cursorSpace) orig(DataStructures.CursorList.cursorSpace.getClass().getName()) orig(DataStructures.CursorList.cursorSpace[]) orig(DataStructures.CursorList.cursorSpace[].getClass().getName()) orig(DataStructures.CursorList.cursorSpace[].element) orig(DataStructures.CursorList.cursorSpace[].element.getClass().getName()) orig(DataStructures.CursorList.cursorSpace[].next) orig(x) orig(x.getClass().getName()) orig(p) orig(p.current) size(DataStructures.CursorList.cursorSpace[]) size(DataStructures.CursorList.cursorSpace[])-1 orig(size(DataStructures.CursorList.cursorSpace[])) orig(size(DataStructures.CursorList.cursorSpace[]))-1 DataStructures.CursorList.cursorSpace[this.header] DataStructures.CursorList.cursorSpace[this.header-1] DataStructures.CursorList.cursorSpace[this.header..] DataStructures.CursorList.cursorSpace[this.header+1..] DataStructures.CursorList.cursorSpace[0..this.header] DataStructures.CursorList.cursorSpace[0..this.header-1] DataStructures.CursorList.cursorSpace[this.header].element DataStructures.CursorList.cursorSpace[this.header-1].element DataStructures.CursorList.cursorSpace[this.header..].element DataStructures.CursorList.cursorSpace[this.header+1..].element DataStructures.CursorList.cursorSpace[0..this.header].element DataStructures.CursorList.cursorSpace[0..this.header-1].element DataStructures.CursorList.cursorSpace[this.header].next DataStructures.CursorList.cursorSpace[this.header-1].next DataStructures.CursorList.cursorSpace[this.header..].next DataStructures.CursorList.cursorSpace[this.header+1..].next DataStructures.CursorList.cursorSpace[0..this.header].next DataStructures.CursorList.cursorSpace[0..this.header-1].next orig(DataStructures.CursorList.cursorSpace[post(this.header)]) orig(DataStructures.CursorList.cursorSpace[post(this.header)-1]) orig(DataStructures.CursorList.cursorSpace[post(this.header)..]) orig(DataStructures.CursorList.cursorSpace[post(this.header)+1..]) orig(DataStructures.CursorList.cursorSpace[0..post(this.header)]) orig(DataStructures.CursorList.cursorSpace[0..post(this.header)-1]) orig(DataStructures.CursorList.cursorSpace[post(this.header)].element) orig(DataStructures.CursorList.cursorSpace[post(this.header)-1].element) orig(DataStructures.CursorList.cursorSpace[post(this.header)..].element) orig(DataStructures.CursorList.cursorSpace[post(this.header)+1..].element) orig(DataStructures.CursorList.cursorSpace[0..post(this.header)].element) orig(DataStructures.CursorList.cursorSpace[0..post(this.header)-1].element) orig(DataStructures.CursorList.cursorSpace[post(this.header)].next) orig(DataStructures.CursorList.cursorSpace[post(this.header)-1].next) orig(DataStructures.CursorList.cursorSpace[post(this.header)..].next) orig(DataStructures.CursorList.cursorSpace[post(this.header)+1..].next) orig(DataStructures.CursorList.cursorSpace[0..post(this.header)].next) orig(DataStructures.CursorList.cursorSpace[0..post(this.header)-1].next) DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE] DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE-1] DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE..] DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE+1..] DataStructures.CursorList.cursorSpace[0..DataStructures.CursorList.SPACE_SIZE] DataStructures.CursorList.cursorSpace[0..DataStructures.CursorList.SPACE_SIZE-1] DataStructures.CursorList.cursorSpace[p.current] DataStructures.CursorList.cursorSpace[p.current-1] DataStructures.CursorList.cursorSpace[p.current..] DataStructures.CursorList.cursorSpace[p.current+1..] DataStructures.CursorList.cursorSpace[0..p.current] DataStructures.CursorList.cursorSpace[0..p.current-1] DataStructures.CursorList.cursorSpace[orig(this.header)] DataStructures.CursorList.cursorSpace[orig(this.header)-1] DataStructures.CursorList.cursorSpace[orig(this.header)..] DataStructures.CursorList.cursorSpace[orig(this.header)+1..] DataStructures.CursorList.cursorSpace[0..orig(this.header)] DataStructures.CursorList.cursorSpace[0..orig(this.header)-1] DataStructures.CursorList.cursorSpace[orig(p.current)] DataStructures.CursorList.cursorSpace[orig(p.current)-1] DataStructures.CursorList.cursorSpace[orig(p.current)..] DataStructures.CursorList.cursorSpace[orig(p.current)+1..] DataStructures.CursorList.cursorSpace[0..orig(p.current)] DataStructures.CursorList.cursorSpace[0..orig(p.current)-1] DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE].element DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE-1].element DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE..].element DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE+1..].element DataStructures.CursorList.cursorSpace[0..DataStructures.CursorList.SPACE_SIZE].element DataStructures.CursorList.cursorSpace[0..DataStructures.CursorList.SPACE_SIZE-1].element DataStructures.CursorList.cursorSpace[p.current].element DataStructures.CursorList.cursorSpace[p.current-1].element DataStructures.CursorList.cursorSpace[p.current..].element DataStructures.CursorList.cursorSpace[p.current+1..].element DataStructures.CursorList.cursorSpace[0..p.current].element DataStructures.CursorList.cursorSpace[0..p.current-1].element DataStructures.CursorList.cursorSpace[orig(this.header)].element DataStructures.CursorList.cursorSpace[orig(this.header)-1].element DataStructures.CursorList.cursorSpace[orig(this.header)..].element DataStructures.CursorList.cursorSpace[orig(this.header)+1..].element DataStructures.CursorList.cursorSpace[0..orig(this.header)].element DataStructures.CursorList.cursorSpace[0..orig(this.header)-1].element DataStructures.CursorList.cursorSpace[orig(p.current)].element DataStructures.CursorList.cursorSpace[orig(p.current)-1].element DataStructures.CursorList.cursorSpace[orig(p.current)..].element DataStructures.CursorList.cursorSpace[orig(p.current)+1..].element DataStructures.CursorList.cursorSpace[0..orig(p.current)].element DataStructures.CursorList.cursorSpace[0..orig(p.current)-1].element DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE].next DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE-1].next DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE..].next DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE+1..].next DataStructures.CursorList.cursorSpace[0..DataStructures.CursorList.SPACE_SIZE].next DataStructures.CursorList.cursorSpace[0..DataStructures.CursorList.SPACE_SIZE-1].next DataStructures.CursorList.cursorSpace[p.current].next DataStructures.CursorList.cursorSpace[p.current-1].next DataStructures.CursorList.cursorSpace[p.current..].next DataStructures.CursorList.cursorSpace[p.current+1..].next DataStructures.CursorList.cursorSpace[0..p.current].next DataStructures.CursorList.cursorSpace[0..p.current-1].next DataStructures.CursorList.cursorSpace[orig(this.header)].next DataStructures.CursorList.cursorSpace[orig(this.header)-1].next DataStructures.CursorList.cursorSpace[orig(this.header)..].next DataStructures.CursorList.cursorSpace[orig(this.header)+1..].next DataStructures.CursorList.cursorSpace[0..orig(this.header)].next DataStructures.CursorList.cursorSpace[0..orig(this.header)-1].next DataStructures.CursorList.cursorSpace[orig(p.current)].next DataStructures.CursorList.cursorSpace[orig(p.current)-1].next DataStructures.CursorList.cursorSpace[orig(p.current)..].next DataStructures.CursorList.cursorSpace[orig(p.current)+1..].next DataStructures.CursorList.cursorSpace[0..orig(p.current)].next DataStructures.CursorList.cursorSpace[0..orig(p.current)-1].next orig(DataStructures.CursorList.cursorSpace[post(DataStructures.CursorList.SPACE_SIZE)]) orig(DataStructures.CursorList.cursorSpace[post(DataStructures.CursorList.SPACE_SIZE)-1]) orig(DataStructures.CursorList.cursorSpace[post(DataStructures.CursorList.SPACE_SIZE)..]) orig(DataStructures.CursorList.cursorSpace[post(DataStructures.CursorList.SPACE_SIZE)+1..]) orig(DataStructures.CursorList.cursorSpace[0..post(DataStructures.CursorList.SPACE_SIZE)]) orig(DataStructures.CursorList.cursorSpace[0..post(DataStructures.CursorList.SPACE_SIZE)-1]) orig(DataStructures.CursorList.cursorSpace[post(DataStructures.CursorList.SPACE_SIZE)].element) orig(DataStructures.CursorList.cursorSpace[post(DataStructures.CursorList.SPACE_SIZE)-1].element) orig(DataStructures.CursorList.cursorSpace[post(DataStructures.CursorList.SPACE_SIZE)..].element) orig(DataStructures.CursorList.cursorSpace[post(DataStructures.CursorList.SPACE_SIZE)+1..].element) orig(DataStructures.CursorList.cursorSpace[0..post(DataStructures.CursorList.SPACE_SIZE)].element) orig(DataStructures.CursorList.cursorSpace[0..post(DataStructures.CursorList.SPACE_SIZE)-1].element) orig(DataStructures.CursorList.cursorSpace[post(DataStructures.CursorList.SPACE_SIZE)].next) orig(DataStructures.CursorList.cursorSpace[post(DataStructures.CursorList.SPACE_SIZE)-1].next) orig(DataStructures.CursorList.cursorSpace[post(DataStructures.CursorList.SPACE_SIZE)..].next) orig(DataStructures.CursorList.cursorSpace[post(DataStructures.CursorList.SPACE_SIZE)+1..].next) orig(DataStructures.CursorList.cursorSpace[0..post(DataStructures.CursorList.SPACE_SIZE)].next) orig(DataStructures.CursorList.cursorSpace[0..post(DataStructures.CursorList.SPACE_SIZE)-1].next) orig(DataStructures.CursorList.cursorSpace[post(p.current)]) orig(DataStructures.CursorList.cursorSpace[post(p.current)-1]) orig(DataStructures.CursorList.cursorSpace[post(p.current)..]) orig(DataStructures.CursorList.cursorSpace[post(p.current)+1..]) orig(DataStructures.CursorList.cursorSpace[0..post(p.current)]) orig(DataStructures.CursorList.cursorSpace[0..post(p.current)-1]) orig(DataStructures.CursorList.cursorSpace[post(p.current)].element) orig(DataStructures.CursorList.cursorSpace[post(p.current)-1].element) orig(DataStructures.CursorList.cursorSpace[post(p.current)..].element) orig(DataStructures.CursorList.cursorSpace[post(p.current)+1..].element) orig(DataStructures.CursorList.cursorSpace[0..post(p.current)].element) orig(DataStructures.CursorList.cursorSpace[0..post(p.current)-1].element) orig(DataStructures.CursorList.cursorSpace[post(p.current)].next) orig(DataStructures.CursorList.cursorSpace[post(p.current)-1].next) orig(DataStructures.CursorList.cursorSpace[post(p.current)..].next) orig(DataStructures.CursorList.cursorSpace[post(p.current)+1..].next) orig(DataStructures.CursorList.cursorSpace[0..post(p.current)].next) orig(DataStructures.CursorList.cursorSpace[0..post(p.current)-1].next) orig(DataStructures.CursorList.cursorSpace[this.header]) orig(DataStructures.CursorList.cursorSpace[this.header-1]) orig(DataStructures.CursorList.cursorSpace[this.header..]) orig(DataStructures.CursorList.cursorSpace[this.header+1..]) orig(DataStructures.CursorList.cursorSpace[0..this.header]) orig(DataStructures.CursorList.cursorSpace[0..this.header-1]) orig(DataStructures.CursorList.cursorSpace[this.header].element) orig(DataStructures.CursorList.cursorSpace[this.header-1].element) orig(DataStructures.CursorList.cursorSpace[this.header..].element) orig(DataStructures.CursorList.cursorSpace[this.header+1..].element) orig(DataStructures.CursorList.cursorSpace[0..this.header].element) orig(DataStructures.CursorList.cursorSpace[0..this.header-1].element) orig(DataStructures.CursorList.cursorSpace[this.header].next) orig(DataStructures.CursorList.cursorSpace[this.header-1].next) orig(DataStructures.CursorList.cursorSpace[this.header..].next) orig(DataStructures.CursorList.cursorSpace[this.header+1..].next) orig(DataStructures.CursorList.cursorSpace[0..this.header].next) orig(DataStructures.CursorList.cursorSpace[0..this.header-1].next) orig(DataStructures.CursorList.cursorSpace[p.current]) orig(DataStructures.CursorList.cursorSpace[p.current-1]) orig(DataStructures.CursorList.cursorSpace[p.current..]) orig(DataStructures.CursorList.cursorSpace[p.current+1..]) orig(DataStructures.CursorList.cursorSpace[0..p.current]) orig(DataStructures.CursorList.cursorSpace[0..p.current-1]) orig(DataStructures.CursorList.cursorSpace[p.current].element) orig(DataStructures.CursorList.cursorSpace[p.current-1].element) orig(DataStructures.CursorList.cursorSpace[p.current..].element) orig(DataStructures.CursorList.cursorSpace[p.current+1..].element) orig(DataStructures.CursorList.cursorSpace[0..p.current].element) orig(DataStructures.CursorList.cursorSpace[0..p.current-1].element) orig(DataStructures.CursorList.cursorSpace[p.current].next) orig(DataStructures.CursorList.cursorSpace[p.current-1].next) orig(DataStructures.CursorList.cursorSpace[p.current..].next) orig(DataStructures.CursorList.cursorSpace[p.current+1..].next) orig(DataStructures.CursorList.cursorSpace[0..p.current].next) orig(DataStructures.CursorList.cursorSpace[0..p.current-1].next)
assignable DataStructures.CursorList.cursorSpace[].element, DataStructures.CursorList.cursorSpace[].next, DataStructures.CursorList.cursorSpace[this.header-1].element, DataStructures.CursorList.cursorSpace[this.header..].element, DataStructures.CursorList.cursorSpace[this.header+1..].element, DataStructures.CursorList.cursorSpace[0..this.header].element, DataStructures.CursorList.cursorSpace[0..this.header-1].element, DataStructures.CursorList.cursorSpace[this.header].next, DataStructures.CursorList.cursorSpace[this.header-1].next, DataStructures.CursorList.cursorSpace[this.header..].next, DataStructures.CursorList.cursorSpace[this.header+1..].next, DataStructures.CursorList.cursorSpace[0..this.header].next, DataStructures.CursorList.cursorSpace[0..this.header-1].next, DataStructures.CursorList.cursorSpace[p.current-1].element, DataStructures.CursorList.cursorSpace[p.current..].element, DataStructures.CursorList.cursorSpace[p.current+1..].element, DataStructures.CursorList.cursorSpace[0..p.current].element, DataStructures.CursorList.cursorSpace[0..p.current-1].element, DataStructures.CursorList.cursorSpace[p.current].next, DataStructures.CursorList.cursorSpace[p.current-1].next, DataStructures.CursorList.cursorSpace[p.current..].next, DataStructures.CursorList.cursorSpace[p.current+1..].next, DataStructures.CursorList.cursorSpace[0..p.current].next, DataStructures.CursorList.cursorSpace[0..p.current-1].next
this.header == \old(this.header)
DataStructures.CursorList.cursorSpace == \old(DataStructures.CursorList.cursorSpace)
DataStructures.CursorList.cursorSpace.getClass().getName() == \old(DataStructures.CursorList.cursorSpace.getClass().getName())
daikon.Quant.pairwiseEqual(DataStructures.CursorList.cursorSpace, \old(DataStructures.CursorList.cursorSpace))
p.current == \old(p.current)
daikon.Quant.getElement_Object(DataStructures.CursorList.cursorSpace, this.header) == \old(daikon.Quant.getElement_Object(DataStructures.CursorList.cursorSpace, \new(this.header)))
daikon.Quant.getElement_Object(DataStructures.CursorList.cursorSpace, this.header) == \old(daikon.Quant.getElement_Object(DataStructures.CursorList.cursorSpace, \new(DataStructures.CursorList.SPACE_SIZE)-1))
daikon.Quant.getElement_Object(DataStructures.CursorList.cursorSpace, this.header) == \old(daikon.Quant.getElement_Object(DataStructures.CursorList.cursorSpace, this.header))
daikon.Quant.getElement_Object(DataStructures.CursorList.cursorSpace, p.current) == \old(daikon.Quant.getElement_Object(DataStructures.CursorList.cursorSpace, \new(p.current)))
daikon.Quant.getElement_Object(DataStructures.CursorList.cursorSpace, p.current) == \old(daikon.Quant.getElement_Object(DataStructures.CursorList.cursorSpace, p.current))
daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, DataStructures.CursorList.SPACE_SIZE-1) == \old(daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, \new(DataStructures.CursorList.SPACE_SIZE)-1))
this.header == 1 || this.header == 4 || this.header == 20
daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, this.header) >= 2
warning: method daikon.inv.unary.sequence.CommonSequence.format(OutputFormat:JML) needs to be implemented: {0, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99} subset of DataStructures.CursorList.cursorSpace[p.current..].next
warning: method daikon.inv.unary.sequence.CommonSequence.format(OutputFormat:JML) needs to be implemented: {0, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99} subset of DataStructures.CursorList.cursorSpace[p.current+1..].next
warning: method daikon.inv.unary.sequence.CommonSequence.format(OutputFormat:JML) needs to be implemented: {3} subset of DataStructures.CursorList.cursorSpace[0..p.current].next
this.header != daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, p.current)
this.header != daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, p.current-1)
this.header != \old(daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, this.header))
this.header != \old(daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, this.header-1))
this.header != \old(daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, p.current))
this.header != \old(daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, p.current-1))
DataStructures.CursorList.cursorSpace.getClass().getName() != \old(x.getClass().getName())
daikon.Quant.memberOf(\old(x) , daikon.Quant.collectObject(DataStructures.CursorList.cursorSpace, "element") )
daikon.Quant.memberOf(\old(x.getClass().getName()) , daikon.Quant.typeArray(daikon.Quant.collectObject(DataStructures.CursorList.cursorSpace, "element")) )
daikon.Quant.subsetOf(daikon.Quant.collectObject(DataStructures.CursorList.cursorSpace, "next"), \old(daikon.Quant.collectObject(DataStructures.CursorList.cursorSpace, "next")))
p.current < daikon.Quant.size(DataStructures.CursorList.cursorSpace)-1
p.current > daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, DataStructures.CursorList.SPACE_SIZE-1)
p.current != daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, p.current)
p.current != \old(daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, p.current))
daikon.Quant.eltsLTE(\old(daikon.Quant.collectObject(DataStructures.CursorList.cursorSpace, "next")), daikon.Quant.size(DataStructures.CursorList.cursorSpace)-1)
daikon.Quant.memberOf(daikon.Quant.size(DataStructures.CursorList.cursorSpace)-1 , \old(daikon.Quant.collectObject(DataStructures.CursorList.cursorSpace, "next")) )
daikon.Quant.eltsGTE(\old(daikon.Quant.collectObject(DataStructures.CursorList.cursorSpace, "next")), daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, DataStructures.CursorList.SPACE_SIZE-1))
daikon.Quant.size(DataStructures.CursorList.cursorSpace)-1 > daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, p.current)
daikon.Quant.size(DataStructures.CursorList.cursorSpace)-1 > daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, p.current-1)
daikon.Quant.memberOf(daikon.Quant.size(DataStructures.CursorList.cursorSpace)-1 , daikon.Quant.slice(DataStructures.CursorList.cursorSpace, p.current, daikon.Quant.size(DataStructures.CursorList.cursorSpace)) )
daikon.Quant.memberOf(daikon.Quant.size(DataStructures.CursorList.cursorSpace)-1 , daikon.Quant.slice(DataStructures.CursorList.cursorSpace, p.current+1, daikon.Quant.size(DataStructures.CursorList.cursorSpace)) )
daikon.Quant.eltsLT(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, 0, p.current), daikon.Quant.size(DataStructures.CursorList.cursorSpace)-1)
daikon.Quant.size(DataStructures.CursorList.cursorSpace)-1 > \old(daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, this.header))
daikon.Quant.size(DataStructures.CursorList.cursorSpace)-1 > \old(daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, this.header-1))
daikon.Quant.memberOf(daikon.Quant.size(DataStructures.CursorList.cursorSpace)-1 , \old(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, this.header, daikon.Quant.size(DataStructures.CursorList.cursorSpace))) )
daikon.Quant.memberOf(daikon.Quant.size(DataStructures.CursorList.cursorSpace)-1 , \old(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, this.header+1, daikon.Quant.size(DataStructures.CursorList.cursorSpace))) )
daikon.Quant.eltsLT(\old(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, 0, this.header)), daikon.Quant.size(DataStructures.CursorList.cursorSpace)-1)
daikon.Quant.size(DataStructures.CursorList.cursorSpace)-1 > \old(daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, p.current))
daikon.Quant.size(DataStructures.CursorList.cursorSpace)-1 > \old(daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, p.current-1))
daikon.Quant.memberOf(daikon.Quant.size(DataStructures.CursorList.cursorSpace)-1 , \old(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, p.current, daikon.Quant.size(DataStructures.CursorList.cursorSpace))) )
daikon.Quant.memberOf(daikon.Quant.size(DataStructures.CursorList.cursorSpace)-1 , \old(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, p.current+1, daikon.Quant.size(DataStructures.CursorList.cursorSpace))) )
daikon.Quant.eltsLT(\old(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, 0, p.current)), daikon.Quant.size(DataStructures.CursorList.cursorSpace)-1)
daikon.Quant.memberOf(\old(daikon.Quant.getElement_Object(DataStructures.CursorList.cursorSpace, this.header-1)) , daikon.Quant.slice(DataStructures.CursorList.cursorSpace, 0, this.header) )
daikon.Quant.memberOf(\old(daikon.Quant.getElement_Object(DataStructures.CursorList.cursorSpace, this.header-1)) , daikon.Quant.slice(DataStructures.CursorList.cursorSpace, 0, this.header-1) )
daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, this.header) > daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, DataStructures.CursorList.SPACE_SIZE-1)
daikon.Quant.memberOf(daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, this.header) , \old(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, 0, this.header)) )
daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, this.header) != \old(daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, p.current))
(daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, p.current-1) >> daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, this.header-1) == 0)
(!(daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, this.header-1) == 0)) || (daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, p.current-1) == 0)
(!(daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, this.header-1) == 0)) || (\old(daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, this.header)) == 0)
(\old(daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, this.header)) >> daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, this.header-1) == 0)
(!(daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, this.header-1) == 0)) || (\old(daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, p.current)) == 0)
(\old(daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, p.current)) >> daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, this.header-1) == 0)
daikon.Quant.subsetOf(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, DataStructures.CursorList.SPACE_SIZE, daikon.Quant.size(DataStructures.CursorList.cursorSpace)), daikon.Quant.slice(DataStructures.CursorList.cursorSpace, p.current, daikon.Quant.size(DataStructures.CursorList.cursorSpace)))
daikon.Quant.subsetOf(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, DataStructures.CursorList.SPACE_SIZE, daikon.Quant.size(DataStructures.CursorList.cursorSpace)), daikon.Quant.slice(DataStructures.CursorList.cursorSpace, p.current+1, daikon.Quant.size(DataStructures.CursorList.cursorSpace)))
daikon.Quant.subsetOf(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, DataStructures.CursorList.SPACE_SIZE, daikon.Quant.size(DataStructures.CursorList.cursorSpace)), daikon.Quant.slice(DataStructures.CursorList.cursorSpace, 0, p.current))
daikon.Quant.subsetOf(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, DataStructures.CursorList.SPACE_SIZE, daikon.Quant.size(DataStructures.CursorList.cursorSpace)), daikon.Quant.slice(DataStructures.CursorList.cursorSpace, 0, p.current-1))
daikon.Quant.subsetOf(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, DataStructures.CursorList.SPACE_SIZE, daikon.Quant.size(DataStructures.CursorList.cursorSpace)), \old(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, this.header, daikon.Quant.size(DataStructures.CursorList.cursorSpace))))
daikon.Quant.subsetOf(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, DataStructures.CursorList.SPACE_SIZE, daikon.Quant.size(DataStructures.CursorList.cursorSpace)), \old(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, this.header+1, daikon.Quant.size(DataStructures.CursorList.cursorSpace))))
daikon.Quant.subsetOf(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, DataStructures.CursorList.SPACE_SIZE, daikon.Quant.size(DataStructures.CursorList.cursorSpace)), \old(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, 0, this.header)))
daikon.Quant.subsetOf(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, DataStructures.CursorList.SPACE_SIZE, daikon.Quant.size(DataStructures.CursorList.cursorSpace)), \old(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, 0, this.header-1)))
daikon.Quant.subsetOf(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, DataStructures.CursorList.SPACE_SIZE, daikon.Quant.size(DataStructures.CursorList.cursorSpace)), \old(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, p.current, daikon.Quant.size(DataStructures.CursorList.cursorSpace))))
daikon.Quant.subsetOf(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, DataStructures.CursorList.SPACE_SIZE, daikon.Quant.size(DataStructures.CursorList.cursorSpace)), \old(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, p.current+1, daikon.Quant.size(DataStructures.CursorList.cursorSpace))))
daikon.Quant.subsetOf(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, DataStructures.CursorList.SPACE_SIZE, daikon.Quant.size(DataStructures.CursorList.cursorSpace)), \old(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, 0, p.current)))
daikon.Quant.subsetOf(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, DataStructures.CursorList.SPACE_SIZE, daikon.Quant.size(DataStructures.CursorList.cursorSpace)), \old(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, 0, p.current-1)))
daikon.Quant.memberOf(\old(daikon.Quant.getElement_Object(DataStructures.CursorList.cursorSpace, p.current-1)) , daikon.Quant.slice(DataStructures.CursorList.cursorSpace, 0, p.current) )
daikon.Quant.memberOf(\old(daikon.Quant.getElement_Object(DataStructures.CursorList.cursorSpace, p.current-1)) , daikon.Quant.slice(DataStructures.CursorList.cursorSpace, 0, p.current-1) )
daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, DataStructures.CursorList.SPACE_SIZE-1) < daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, p.current)
daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, DataStructures.CursorList.SPACE_SIZE-1) <= daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, p.current-1)
daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, DataStructures.CursorList.SPACE_SIZE-1) <= \old(daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, this.header))
daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, DataStructures.CursorList.SPACE_SIZE-1) <= \old(daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, this.header-1))
daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, DataStructures.CursorList.SPACE_SIZE-1) <= \old(daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, p.current))
daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, DataStructures.CursorList.SPACE_SIZE-1) <= \old(daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, p.current-1))
daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, p.current) != daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, p.current-1)
daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, p.current) != \old(daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, this.header))
daikon.Quant.memberOf(daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, p.current) , \old(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, 0, this.header)) )
daikon.Quant.memberOf(daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, p.current) , \old(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, 0, this.header-1)) )
daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, p.current) != \old(daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, p.current))
daikon.Quant.memberOf(daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, p.current) , \old(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, 0, p.current)) )
daikon.Quant.memberOf(daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, p.current) , \old(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, 0, p.current-1)) )
(daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, p.current-1) >> \old(daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, this.header-1)) == 0)
(!(\old(daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, this.header-1)) == 0)) || (daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, p.current-1) == 0)
(!(daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, p.current-1) == 0)) || (\old(daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, p.current)) == 0)
(\old(daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, p.current)) >> daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, p.current-1) == 0)
(daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, p.current-1) >> \old(daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, p.current-1)) == 0)
(!(\old(daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, p.current-1)) == 0)) || (daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, p.current-1) == 0)
daikon.Quant.subsetOf(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, p.current+1, daikon.Quant.size(DataStructures.CursorList.cursorSpace)), \old(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, p.current, daikon.Quant.size(DataStructures.CursorList.cursorSpace))))
daikon.Quant.memberOf(\old(daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, p.current-1)) , daikon.Quant.slice(DataStructures.CursorList.cursorSpace, 0, p.current) )
===========================================================================
DataStructures.CursorList.isEmpty():::ENTER
    Variables: this this.header DataStructures.CursorList.cursorSpace DataStructures.CursorList.cursorSpace.getClass().getName() DataStructures.CursorList.cursorSpace[] DataStructures.CursorList.cursorSpace[].getClass().getName() DataStructures.CursorList.cursorSpace[].element DataStructures.CursorList.cursorSpace[].element.getClass().getName() DataStructures.CursorList.cursorSpace[].next DataStructures.CursorList.SPACE_SIZE size(DataStructures.CursorList.cursorSpace[]) size(DataStructures.CursorList.cursorSpace[])-1 DataStructures.CursorList.cursorSpace[this.header] DataStructures.CursorList.cursorSpace[this.header-1] DataStructures.CursorList.cursorSpace[this.header..] DataStructures.CursorList.cursorSpace[this.header+1..] DataStructures.CursorList.cursorSpace[0..this.header] DataStructures.CursorList.cursorSpace[0..this.header-1] DataStructures.CursorList.cursorSpace[this.header].element DataStructures.CursorList.cursorSpace[this.header-1].element DataStructures.CursorList.cursorSpace[this.header..].element DataStructures.CursorList.cursorSpace[this.header+1..].element DataStructures.CursorList.cursorSpace[0..this.header].element DataStructures.CursorList.cursorSpace[0..this.header-1].element DataStructures.CursorList.cursorSpace[this.header].next DataStructures.CursorList.cursorSpace[this.header-1].next DataStructures.CursorList.cursorSpace[this.header..].next DataStructures.CursorList.cursorSpace[this.header+1..].next DataStructures.CursorList.cursorSpace[0..this.header].next DataStructures.CursorList.cursorSpace[0..this.header-1].next DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE] DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE-1] DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE..] DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE+1..] DataStructures.CursorList.cursorSpace[0..DataStructures.CursorList.SPACE_SIZE] DataStructures.CursorList.cursorSpace[0..DataStructures.CursorList.SPACE_SIZE-1] DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE].element DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE-1].element DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE..].element DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE+1..].element DataStructures.CursorList.cursorSpace[0..DataStructures.CursorList.SPACE_SIZE].element DataStructures.CursorList.cursorSpace[0..DataStructures.CursorList.SPACE_SIZE-1].element DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE].next DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE-1].next DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE..].next DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE+1..].next DataStructures.CursorList.cursorSpace[0..DataStructures.CursorList.SPACE_SIZE].next DataStructures.CursorList.cursorSpace[0..DataStructures.CursorList.SPACE_SIZE-1].next
===========================================================================
DataStructures.CursorList.isEmpty():::EXIT
    Variables: this this.header DataStructures.CursorList.cursorSpace DataStructures.CursorList.cursorSpace.getClass().getName() DataStructures.CursorList.cursorSpace[] DataStructures.CursorList.cursorSpace[].getClass().getName() DataStructures.CursorList.cursorSpace[].element DataStructures.CursorList.cursorSpace[].element.getClass().getName() DataStructures.CursorList.cursorSpace[].next DataStructures.CursorList.SPACE_SIZE return orig(this) orig(this.header) orig(DataStructures.CursorList.cursorSpace) orig(DataStructures.CursorList.cursorSpace.getClass().getName()) orig(DataStructures.CursorList.cursorSpace[]) orig(DataStructures.CursorList.cursorSpace[].getClass().getName()) orig(DataStructures.CursorList.cursorSpace[].element) orig(DataStructures.CursorList.cursorSpace[].element.getClass().getName()) orig(DataStructures.CursorList.cursorSpace[].next) size(DataStructures.CursorList.cursorSpace[]) size(DataStructures.CursorList.cursorSpace[])-1 orig(size(DataStructures.CursorList.cursorSpace[])) orig(size(DataStructures.CursorList.cursorSpace[]))-1 DataStructures.CursorList.cursorSpace[this.header] DataStructures.CursorList.cursorSpace[this.header-1] DataStructures.CursorList.cursorSpace[this.header..] DataStructures.CursorList.cursorSpace[this.header+1..] DataStructures.CursorList.cursorSpace[0..this.header] DataStructures.CursorList.cursorSpace[0..this.header-1] DataStructures.CursorList.cursorSpace[this.header].element DataStructures.CursorList.cursorSpace[this.header-1].element DataStructures.CursorList.cursorSpace[this.header..].element DataStructures.CursorList.cursorSpace[this.header+1..].element DataStructures.CursorList.cursorSpace[0..this.header].element DataStructures.CursorList.cursorSpace[0..this.header-1].element DataStructures.CursorList.cursorSpace[this.header].next DataStructures.CursorList.cursorSpace[this.header-1].next DataStructures.CursorList.cursorSpace[this.header..].next DataStructures.CursorList.cursorSpace[this.header+1..].next DataStructures.CursorList.cursorSpace[0..this.header].next DataStructures.CursorList.cursorSpace[0..this.header-1].next orig(DataStructures.CursorList.cursorSpace[post(this.header)]) orig(DataStructures.CursorList.cursorSpace[post(this.header)-1]) orig(DataStructures.CursorList.cursorSpace[post(this.header)..]) orig(DataStructures.CursorList.cursorSpace[post(this.header)+1..]) orig(DataStructures.CursorList.cursorSpace[0..post(this.header)]) orig(DataStructures.CursorList.cursorSpace[0..post(this.header)-1]) orig(DataStructures.CursorList.cursorSpace[post(this.header)].element) orig(DataStructures.CursorList.cursorSpace[post(this.header)-1].element) orig(DataStructures.CursorList.cursorSpace[post(this.header)..].element) orig(DataStructures.CursorList.cursorSpace[post(this.header)+1..].element) orig(DataStructures.CursorList.cursorSpace[0..post(this.header)].element) orig(DataStructures.CursorList.cursorSpace[0..post(this.header)-1].element) orig(DataStructures.CursorList.cursorSpace[post(this.header)].next) orig(DataStructures.CursorList.cursorSpace[post(this.header)-1].next) orig(DataStructures.CursorList.cursorSpace[post(this.header)..].next) orig(DataStructures.CursorList.cursorSpace[post(this.header)+1..].next) orig(DataStructures.CursorList.cursorSpace[0..post(this.header)].next) orig(DataStructures.CursorList.cursorSpace[0..post(this.header)-1].next) DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE] DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE-1] DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE..] DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE+1..] DataStructures.CursorList.cursorSpace[0..DataStructures.CursorList.SPACE_SIZE] DataStructures.CursorList.cursorSpace[0..DataStructures.CursorList.SPACE_SIZE-1] DataStructures.CursorList.cursorSpace[orig(this.header)] DataStructures.CursorList.cursorSpace[orig(this.header)-1] DataStructures.CursorList.cursorSpace[orig(this.header)..] DataStructures.CursorList.cursorSpace[orig(this.header)+1..] DataStructures.CursorList.cursorSpace[0..orig(this.header)] DataStructures.CursorList.cursorSpace[0..orig(this.header)-1] DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE].element DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE-1].element DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE..].element DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE+1..].element DataStructures.CursorList.cursorSpace[0..DataStructures.CursorList.SPACE_SIZE].element DataStructures.CursorList.cursorSpace[0..DataStructures.CursorList.SPACE_SIZE-1].element DataStructures.CursorList.cursorSpace[orig(this.header)].element DataStructures.CursorList.cursorSpace[orig(this.header)-1].element DataStructures.CursorList.cursorSpace[orig(this.header)..].element DataStructures.CursorList.cursorSpace[orig(this.header)+1..].element DataStructures.CursorList.cursorSpace[0..orig(this.header)].element DataStructures.CursorList.cursorSpace[0..orig(this.header)-1].element DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE].next DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE-1].next DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE..].next DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE+1..].next DataStructures.CursorList.cursorSpace[0..DataStructures.CursorList.SPACE_SIZE].next DataStructures.CursorList.cursorSpace[0..DataStructures.CursorList.SPACE_SIZE-1].next DataStructures.CursorList.cursorSpace[orig(this.header)].next DataStructures.CursorList.cursorSpace[orig(this.header)-1].next DataStructures.CursorList.cursorSpace[orig(this.header)..].next DataStructures.CursorList.cursorSpace[orig(this.header)+1..].next DataStructures.CursorList.cursorSpace[0..orig(this.header)].next DataStructures.CursorList.cursorSpace[0..orig(this.header)-1].next orig(DataStructures.CursorList.cursorSpace[post(DataStructures.CursorList.SPACE_SIZE)]) orig(DataStructures.CursorList.cursorSpace[post(DataStructures.CursorList.SPACE_SIZE)-1]) orig(DataStructures.CursorList.cursorSpace[post(DataStructures.CursorList.SPACE_SIZE)..]) orig(DataStructures.CursorList.cursorSpace[post(DataStructures.CursorList.SPACE_SIZE)+1..]) orig(DataStructures.CursorList.cursorSpace[0..post(DataStructures.CursorList.SPACE_SIZE)]) orig(DataStructures.CursorList.cursorSpace[0..post(DataStructures.CursorList.SPACE_SIZE)-1]) orig(DataStructures.CursorList.cursorSpace[post(DataStructures.CursorList.SPACE_SIZE)].element) orig(DataStructures.CursorList.cursorSpace[post(DataStructures.CursorList.SPACE_SIZE)-1].element) orig(DataStructures.CursorList.cursorSpace[post(DataStructures.CursorList.SPACE_SIZE)..].element) orig(DataStructures.CursorList.cursorSpace[post(DataStructures.CursorList.SPACE_SIZE)+1..].element) orig(DataStructures.CursorList.cursorSpace[0..post(DataStructures.CursorList.SPACE_SIZE)].element) orig(DataStructures.CursorList.cursorSpace[0..post(DataStructures.CursorList.SPACE_SIZE)-1].element) orig(DataStructures.CursorList.cursorSpace[post(DataStructures.CursorList.SPACE_SIZE)].next) orig(DataStructures.CursorList.cursorSpace[post(DataStructures.CursorList.SPACE_SIZE)-1].next) orig(DataStructures.CursorList.cursorSpace[post(DataStructures.CursorList.SPACE_SIZE)..].next) orig(DataStructures.CursorList.cursorSpace[post(DataStructures.CursorList.SPACE_SIZE)+1..].next) orig(DataStructures.CursorList.cursorSpace[0..post(DataStructures.CursorList.SPACE_SIZE)].next) orig(DataStructures.CursorList.cursorSpace[0..post(DataStructures.CursorList.SPACE_SIZE)-1].next) orig(DataStructures.CursorList.cursorSpace[this.header]) orig(DataStructures.CursorList.cursorSpace[this.header-1]) orig(DataStructures.CursorList.cursorSpace[this.header..]) orig(DataStructures.CursorList.cursorSpace[this.header+1..]) orig(DataStructures.CursorList.cursorSpace[0..this.header]) orig(DataStructures.CursorList.cursorSpace[0..this.header-1]) orig(DataStructures.CursorList.cursorSpace[this.header].element) orig(DataStructures.CursorList.cursorSpace[this.header-1].element) orig(DataStructures.CursorList.cursorSpace[this.header..].element) orig(DataStructures.CursorList.cursorSpace[this.header+1..].element) orig(DataStructures.CursorList.cursorSpace[0..this.header].element) orig(DataStructures.CursorList.cursorSpace[0..this.header-1].element) orig(DataStructures.CursorList.cursorSpace[this.header].next) orig(DataStructures.CursorList.cursorSpace[this.header-1].next) orig(DataStructures.CursorList.cursorSpace[this.header..].next) orig(DataStructures.CursorList.cursorSpace[this.header+1..].next) orig(DataStructures.CursorList.cursorSpace[0..this.header].next) orig(DataStructures.CursorList.cursorSpace[0..this.header-1].next)
this.header == \old(this.header)
DataStructures.CursorList.cursorSpace == \old(DataStructures.CursorList.cursorSpace)
DataStructures.CursorList.cursorSpace.getClass().getName() == \old(DataStructures.CursorList.cursorSpace.getClass().getName())
daikon.Quant.pairwiseEqual(DataStructures.CursorList.cursorSpace, \old(DataStructures.CursorList.cursorSpace))
daikon.Quant.pairwiseEqual(daikon.Quant.collectObject(DataStructures.CursorList.cursorSpace, "element"), \old(daikon.Quant.collectObject(DataStructures.CursorList.cursorSpace, "element")))
daikon.Quant.pairwiseEqual(daikon.Quant.collectObject(DataStructures.CursorList.cursorSpace, "next"), \old(daikon.Quant.collectObject(DataStructures.CursorList.cursorSpace, "next")))
daikon.Quant.getElement_Object(DataStructures.CursorList.cursorSpace, this.header) == \old(daikon.Quant.getElement_Object(DataStructures.CursorList.cursorSpace, \new(DataStructures.CursorList.SPACE_SIZE)-1))
(\result == false)  <==>  (daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, this.header) > daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, DataStructures.CursorList.SPACE_SIZE-1))
(\result == false)  ==>  (this.header == 1 || this.header == 4 || this.header == 20)
(\result == false)  ==>  (warning: method daikon.inv.unary.sequence.CommonSequence.format(OutputFormat:JML) needs to be implemented: {0, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99} subset of DataStructures.CursorList.cursorSpace[this.header+1..].next)
(\result == false)  ==>  (warning: method daikon.inv.unary.sequence.CommonSequence.format(OutputFormat:JML) needs to be implemented: {0, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99} subset of DataStructures.CursorList.cursorSpace[this.header..].next)
(\result == false)  ==>  (warning: method daikon.inv.unary.sequence.CommonSequence.format(OutputFormat:JML) needs to be implemented: {2, 3, 12, 5, 0, 7, 9, 11, 13, 14, 15, 16, 17, 18, 19, 22, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99} subset of DataStructures.CursorList.cursorSpace[].next)
(\result == true)  <==>  (daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, this.header) == 0)
(\result == true)  <==>  (daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, this.header) == daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, DataStructures.CursorList.SPACE_SIZE-1))
(\result == true)  ==>  ((this.header >> daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, this.header-1) == 0))
(\result == true)  ==>  (daikon.Quant.pairwiseEqual(daikon.Quant.typeArray(daikon.Quant.collectObject(DataStructures.CursorList.cursorSpace, "element")), new String[] { null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null }) || daikon.Quant.pairwiseEqual(daikon.Quant.typeArray(daikon.Quant.collectObject(DataStructures.CursorList.cursorSpace, "element")), new String[] { null, null, null, "DataStructures.MyInteger", null, "DataStructures.MyInteger", null, "DataStructures.MyInteger", null, "DataStructures.MyInteger", null, "DataStructures.MyInteger", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null }))
(\result == true)  ==>  (daikon.Quant.eltsGTE(daikon.Quant.collectObject(DataStructures.CursorList.cursorSpace, "next"), daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, this.header)))
(\result == true)  ==>  (daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, this.header-1) > daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, DataStructures.CursorList.SPACE_SIZE-1))
(\result == true)  ==>  (daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, this.header) < daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, this.header-1))
(\result == true)  ==>  (daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, this.header) is a pointer)
(\result == true)  ==>  (this.header > daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, this.header))
===========================================================================
DataStructures.CursorList.makeEmpty():::ENTER
    Variables: this this.header DataStructures.CursorList.cursorSpace DataStructures.CursorList.cursorSpace.getClass().getName() DataStructures.CursorList.cursorSpace[] DataStructures.CursorList.cursorSpace[].getClass().getName() DataStructures.CursorList.cursorSpace[].element DataStructures.CursorList.cursorSpace[].element.getClass().getName() DataStructures.CursorList.cursorSpace[].next DataStructures.CursorList.SPACE_SIZE size(DataStructures.CursorList.cursorSpace[]) size(DataStructures.CursorList.cursorSpace[])-1 DataStructures.CursorList.cursorSpace[this.header] DataStructures.CursorList.cursorSpace[this.header-1] DataStructures.CursorList.cursorSpace[this.header..] DataStructures.CursorList.cursorSpace[this.header+1..] DataStructures.CursorList.cursorSpace[0..this.header] DataStructures.CursorList.cursorSpace[0..this.header-1] DataStructures.CursorList.cursorSpace[this.header].element DataStructures.CursorList.cursorSpace[this.header-1].element DataStructures.CursorList.cursorSpace[this.header..].element DataStructures.CursorList.cursorSpace[this.header+1..].element DataStructures.CursorList.cursorSpace[0..this.header].element DataStructures.CursorList.cursorSpace[0..this.header-1].element DataStructures.CursorList.cursorSpace[this.header].next DataStructures.CursorList.cursorSpace[this.header-1].next DataStructures.CursorList.cursorSpace[this.header..].next DataStructures.CursorList.cursorSpace[this.header+1..].next DataStructures.CursorList.cursorSpace[0..this.header].next DataStructures.CursorList.cursorSpace[0..this.header-1].next DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE] DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE-1] DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE..] DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE+1..] DataStructures.CursorList.cursorSpace[0..DataStructures.CursorList.SPACE_SIZE] DataStructures.CursorList.cursorSpace[0..DataStructures.CursorList.SPACE_SIZE-1] DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE].element DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE-1].element DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE..].element DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE+1..].element DataStructures.CursorList.cursorSpace[0..DataStructures.CursorList.SPACE_SIZE].element DataStructures.CursorList.cursorSpace[0..DataStructures.CursorList.SPACE_SIZE-1].element DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE].next DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE-1].next DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE..].next DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE+1..].next DataStructures.CursorList.cursorSpace[0..DataStructures.CursorList.SPACE_SIZE].next DataStructures.CursorList.cursorSpace[0..DataStructures.CursorList.SPACE_SIZE-1].next
this.header == 4 || this.header == 20
daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, this.header-1) == 5 || daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, this.header-1) == 18 || daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, this.header-1) == 22
===========================================================================
DataStructures.CursorList.makeEmpty():::EXIT
    Variables: this this.header DataStructures.CursorList.cursorSpace DataStructures.CursorList.cursorSpace.getClass().getName() DataStructures.CursorList.cursorSpace[] DataStructures.CursorList.cursorSpace[].getClass().getName() DataStructures.CursorList.cursorSpace[].element DataStructures.CursorList.cursorSpace[].element.getClass().getName() DataStructures.CursorList.cursorSpace[].next DataStructures.CursorList.SPACE_SIZE orig(this) orig(this.header) orig(DataStructures.CursorList.cursorSpace) orig(DataStructures.CursorList.cursorSpace.getClass().getName()) orig(DataStructures.CursorList.cursorSpace[]) orig(DataStructures.CursorList.cursorSpace[].getClass().getName()) orig(DataStructures.CursorList.cursorSpace[].element) orig(DataStructures.CursorList.cursorSpace[].element.getClass().getName()) orig(DataStructures.CursorList.cursorSpace[].next) size(DataStructures.CursorList.cursorSpace[]) size(DataStructures.CursorList.cursorSpace[])-1 orig(size(DataStructures.CursorList.cursorSpace[])) orig(size(DataStructures.CursorList.cursorSpace[]))-1 DataStructures.CursorList.cursorSpace[this.header] DataStructures.CursorList.cursorSpace[this.header-1] DataStructures.CursorList.cursorSpace[this.header..] DataStructures.CursorList.cursorSpace[this.header+1..] DataStructures.CursorList.cursorSpace[0..this.header] DataStructures.CursorList.cursorSpace[0..this.header-1] DataStructures.CursorList.cursorSpace[this.header].element DataStructures.CursorList.cursorSpace[this.header-1].element DataStructures.CursorList.cursorSpace[this.header..].element DataStructures.CursorList.cursorSpace[this.header+1..].element DataStructures.CursorList.cursorSpace[0..this.header].element DataStructures.CursorList.cursorSpace[0..this.header-1].element DataStructures.CursorList.cursorSpace[this.header].next DataStructures.CursorList.cursorSpace[this.header-1].next DataStructures.CursorList.cursorSpace[this.header..].next DataStructures.CursorList.cursorSpace[this.header+1..].next DataStructures.CursorList.cursorSpace[0..this.header].next DataStructures.CursorList.cursorSpace[0..this.header-1].next orig(DataStructures.CursorList.cursorSpace[post(this.header)]) orig(DataStructures.CursorList.cursorSpace[post(this.header)-1]) orig(DataStructures.CursorList.cursorSpace[post(this.header)..]) orig(DataStructures.CursorList.cursorSpace[post(this.header)+1..]) orig(DataStructures.CursorList.cursorSpace[0..post(this.header)]) orig(DataStructures.CursorList.cursorSpace[0..post(this.header)-1]) orig(DataStructures.CursorList.cursorSpace[post(this.header)].element) orig(DataStructures.CursorList.cursorSpace[post(this.header)-1].element) orig(DataStructures.CursorList.cursorSpace[post(this.header)..].element) orig(DataStructures.CursorList.cursorSpace[post(this.header)+1..].element) orig(DataStructures.CursorList.cursorSpace[0..post(this.header)].element) orig(DataStructures.CursorList.cursorSpace[0..post(this.header)-1].element) orig(DataStructures.CursorList.cursorSpace[post(this.header)].next) orig(DataStructures.CursorList.cursorSpace[post(this.header)-1].next) orig(DataStructures.CursorList.cursorSpace[post(this.header)..].next) orig(DataStructures.CursorList.cursorSpace[post(this.header)+1..].next) orig(DataStructures.CursorList.cursorSpace[0..post(this.header)].next) orig(DataStructures.CursorList.cursorSpace[0..post(this.header)-1].next) DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE] DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE-1] DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE..] DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE+1..] DataStructures.CursorList.cursorSpace[0..DataStructures.CursorList.SPACE_SIZE] DataStructures.CursorList.cursorSpace[0..DataStructures.CursorList.SPACE_SIZE-1] DataStructures.CursorList.cursorSpace[orig(this.header)] DataStructures.CursorList.cursorSpace[orig(this.header)-1] DataStructures.CursorList.cursorSpace[orig(this.header)..] DataStructures.CursorList.cursorSpace[orig(this.header)+1..] DataStructures.CursorList.cursorSpace[0..orig(this.header)] DataStructures.CursorList.cursorSpace[0..orig(this.header)-1] DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE].element DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE-1].element DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE..].element DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE+1..].element DataStructures.CursorList.cursorSpace[0..DataStructures.CursorList.SPACE_SIZE].element DataStructures.CursorList.cursorSpace[0..DataStructures.CursorList.SPACE_SIZE-1].element DataStructures.CursorList.cursorSpace[orig(this.header)].element DataStructures.CursorList.cursorSpace[orig(this.header)-1].element DataStructures.CursorList.cursorSpace[orig(this.header)..].element DataStructures.CursorList.cursorSpace[orig(this.header)+1..].element DataStructures.CursorList.cursorSpace[0..orig(this.header)].element DataStructures.CursorList.cursorSpace[0..orig(this.header)-1].element DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE].next DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE-1].next DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE..].next DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE+1..].next DataStructures.CursorList.cursorSpace[0..DataStructures.CursorList.SPACE_SIZE].next DataStructures.CursorList.cursorSpace[0..DataStructures.CursorList.SPACE_SIZE-1].next DataStructures.CursorList.cursorSpace[orig(this.header)].next DataStructures.CursorList.cursorSpace[orig(this.header)-1].next DataStructures.CursorList.cursorSpace[orig(this.header)..].next DataStructures.CursorList.cursorSpace[orig(this.header)+1..].next DataStructures.CursorList.cursorSpace[0..orig(this.header)].next DataStructures.CursorList.cursorSpace[0..orig(this.header)-1].next orig(DataStructures.CursorList.cursorSpace[post(DataStructures.CursorList.SPACE_SIZE)]) orig(DataStructures.CursorList.cursorSpace[post(DataStructures.CursorList.SPACE_SIZE)-1]) orig(DataStructures.CursorList.cursorSpace[post(DataStructures.CursorList.SPACE_SIZE)..]) orig(DataStructures.CursorList.cursorSpace[post(DataStructures.CursorList.SPACE_SIZE)+1..]) orig(DataStructures.CursorList.cursorSpace[0..post(DataStructures.CursorList.SPACE_SIZE)]) orig(DataStructures.CursorList.cursorSpace[0..post(DataStructures.CursorList.SPACE_SIZE)-1]) orig(DataStructures.CursorList.cursorSpace[post(DataStructures.CursorList.SPACE_SIZE)].element) orig(DataStructures.CursorList.cursorSpace[post(DataStructures.CursorList.SPACE_SIZE)-1].element) orig(DataStructures.CursorList.cursorSpace[post(DataStructures.CursorList.SPACE_SIZE)..].element) orig(DataStructures.CursorList.cursorSpace[post(DataStructures.CursorList.SPACE_SIZE)+1..].element) orig(DataStructures.CursorList.cursorSpace[0..post(DataStructures.CursorList.SPACE_SIZE)].element) orig(DataStructures.CursorList.cursorSpace[0..post(DataStructures.CursorList.SPACE_SIZE)-1].element) orig(DataStructures.CursorList.cursorSpace[post(DataStructures.CursorList.SPACE_SIZE)].next) orig(DataStructures.CursorList.cursorSpace[post(DataStructures.CursorList.SPACE_SIZE)-1].next) orig(DataStructures.CursorList.cursorSpace[post(DataStructures.CursorList.SPACE_SIZE)..].next) orig(DataStructures.CursorList.cursorSpace[post(DataStructures.CursorList.SPACE_SIZE)+1..].next) orig(DataStructures.CursorList.cursorSpace[0..post(DataStructures.CursorList.SPACE_SIZE)].next) orig(DataStructures.CursorList.cursorSpace[0..post(DataStructures.CursorList.SPACE_SIZE)-1].next) orig(DataStructures.CursorList.cursorSpace[this.header]) orig(DataStructures.CursorList.cursorSpace[this.header-1]) orig(DataStructures.CursorList.cursorSpace[this.header..]) orig(DataStructures.CursorList.cursorSpace[this.header+1..]) orig(DataStructures.CursorList.cursorSpace[0..this.header]) orig(DataStructures.CursorList.cursorSpace[0..this.header-1]) orig(DataStructures.CursorList.cursorSpace[this.header].element) orig(DataStructures.CursorList.cursorSpace[this.header-1].element) orig(DataStructures.CursorList.cursorSpace[this.header..].element) orig(DataStructures.CursorList.cursorSpace[this.header+1..].element) orig(DataStructures.CursorList.cursorSpace[0..this.header].element) orig(DataStructures.CursorList.cursorSpace[0..this.header-1].element) orig(DataStructures.CursorList.cursorSpace[this.header].next) orig(DataStructures.CursorList.cursorSpace[this.header-1].next) orig(DataStructures.CursorList.cursorSpace[this.header..].next) orig(DataStructures.CursorList.cursorSpace[this.header+1..].next) orig(DataStructures.CursorList.cursorSpace[0..this.header].next) orig(DataStructures.CursorList.cursorSpace[0..this.header-1].next)
assignable DataStructures.CursorList.cursorSpace[].element, DataStructures.CursorList.cursorSpace[].next, DataStructures.CursorList.cursorSpace[this.header-1].element, DataStructures.CursorList.cursorSpace[this.header..].element, DataStructures.CursorList.cursorSpace[this.header+1..].element, DataStructures.CursorList.cursorSpace[0..this.header].element, DataStructures.CursorList.cursorSpace[0..this.header-1].element, DataStructures.CursorList.cursorSpace[this.header].next, DataStructures.CursorList.cursorSpace[this.header-1].next, DataStructures.CursorList.cursorSpace[this.header..].next, DataStructures.CursorList.cursorSpace[this.header+1..].next, DataStructures.CursorList.cursorSpace[0..this.header].next, DataStructures.CursorList.cursorSpace[0..this.header-1].next
this.header == \old(this.header)
DataStructures.CursorList.cursorSpace == \old(DataStructures.CursorList.cursorSpace)
DataStructures.CursorList.cursorSpace.getClass().getName() == \old(DataStructures.CursorList.cursorSpace.getClass().getName())
daikon.Quant.pairwiseEqual(DataStructures.CursorList.cursorSpace, \old(DataStructures.CursorList.cursorSpace))
daikon.Quant.getElement_Object(DataStructures.CursorList.cursorSpace, this.header) == \old(daikon.Quant.getElement_Object(DataStructures.CursorList.cursorSpace, \new(this.header)))
daikon.Quant.getElement_Object(DataStructures.CursorList.cursorSpace, this.header) == \old(daikon.Quant.getElement_Object(DataStructures.CursorList.cursorSpace, \new(DataStructures.CursorList.SPACE_SIZE)-1))
daikon.Quant.getElement_Object(DataStructures.CursorList.cursorSpace, this.header) == \old(daikon.Quant.getElement_Object(DataStructures.CursorList.cursorSpace, this.header))
daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, this.header) == daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, DataStructures.CursorList.SPACE_SIZE-1)
daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, this.header) == \old(daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, \new(DataStructures.CursorList.SPACE_SIZE)-1))
this.header == 4 || this.header == 20
("oneOf.java.jpp: SEQUENCE unimplemented" != null)
daikon.Quant.pairwiseEqual(daikon.Quant.typeArray(daikon.Quant.collectObject(DataStructures.CursorList.cursorSpace, "element")), new String[] { null, null, null, "DataStructures.MyInteger", null, "DataStructures.MyInteger", null, "DataStructures.MyInteger", null, "DataStructures.MyInteger", null, "DataStructures.MyInteger", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null })
("oneOf.java.jpp: SEQUENCE unimplemented" != null)
daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, this.header) == 0
daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, this.header-1) == 5 || daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, this.header-1) == 22
("oneOf.java.jpp: SEQUENCE unimplemented" != null)
("oneOf.java.jpp: SEQUENCE unimplemented" != null)
("oneOf.java.jpp: SEQUENCE unimplemented" != null)
("oneOf.java.jpp: SEQUENCE unimplemented" != null)
daikon.Quant.subsetOf(daikon.Quant.collectObject(DataStructures.CursorList.cursorSpace, "element"), \old(daikon.Quant.collectObject(DataStructures.CursorList.cursorSpace, "element")))
daikon.Quant.subsetOf(daikon.Quant.collectObject(DataStructures.CursorList.cursorSpace, "next"), \old(daikon.Quant.collectObject(DataStructures.CursorList.cursorSpace, "next")))
daikon.Quant.memberOf(daikon.Quant.size(DataStructures.CursorList.cursorSpace)-1 , \old(daikon.Quant.collectObject(DataStructures.CursorList.cursorSpace, "next")) )
daikon.Quant.memberOf(daikon.Quant.size(DataStructures.CursorList.cursorSpace)-1 , \old(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, this.header, daikon.Quant.size(DataStructures.CursorList.cursorSpace))) )
daikon.Quant.memberOf(daikon.Quant.size(DataStructures.CursorList.cursorSpace)-1 , \old(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, this.header+1, daikon.Quant.size(DataStructures.CursorList.cursorSpace))) )
daikon.Quant.memberOf(daikon.Quant.getElement_Object(DataStructures.CursorList.cursorSpace, this.header-1) , \old(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, 0, this.header)) )
daikon.Quant.memberOf(daikon.Quant.getElement_Object(DataStructures.CursorList.cursorSpace, this.header-1) , \old(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, 0, this.header-1)) )
daikon.Quant.subsetOf(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, this.header, daikon.Quant.size(DataStructures.CursorList.cursorSpace)), \old(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, this.header, daikon.Quant.size(DataStructures.CursorList.cursorSpace))))
daikon.Quant.subsetOf(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, this.header, daikon.Quant.size(DataStructures.CursorList.cursorSpace)), \old(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, this.header+1, daikon.Quant.size(DataStructures.CursorList.cursorSpace))))
daikon.Quant.subsetOf(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, this.header+1, daikon.Quant.size(DataStructures.CursorList.cursorSpace)), \old(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, this.header, daikon.Quant.size(DataStructures.CursorList.cursorSpace))))
daikon.Quant.subsetOf(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, this.header+1, daikon.Quant.size(DataStructures.CursorList.cursorSpace)), \old(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, this.header+1, daikon.Quant.size(DataStructures.CursorList.cursorSpace))))
daikon.Quant.subsetOf(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, 0, this.header), \old(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, 0, this.header)))
daikon.Quant.subsetOf(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, 0, this.header), \old(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, 0, this.header-1)))
daikon.Quant.subsetOf(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, 0, this.header-1), \old(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, 0, this.header)))
daikon.Quant.subsetOf(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, 0, this.header-1), \old(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, 0, this.header-1)))
daikon.Quant.memberOf(\old(daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, this.header-1)) , daikon.Quant.slice(DataStructures.CursorList.cursorSpace, 0, this.header) )
daikon.Quant.memberOf(\old(daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, this.header-1)) , daikon.Quant.slice(DataStructures.CursorList.cursorSpace, 0, this.header-1) )
daikon.Quant.subsetOf(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, DataStructures.CursorList.SPACE_SIZE, daikon.Quant.size(DataStructures.CursorList.cursorSpace)), \old(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, this.header, daikon.Quant.size(DataStructures.CursorList.cursorSpace))))
daikon.Quant.subsetOf(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, DataStructures.CursorList.SPACE_SIZE, daikon.Quant.size(DataStructures.CursorList.cursorSpace)), \old(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, this.header+1, daikon.Quant.size(DataStructures.CursorList.cursorSpace))))
daikon.Quant.subsetOf(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, DataStructures.CursorList.SPACE_SIZE, daikon.Quant.size(DataStructures.CursorList.cursorSpace)), \old(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, 0, this.header)))
daikon.Quant.subsetOf(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, DataStructures.CursorList.SPACE_SIZE, daikon.Quant.size(DataStructures.CursorList.cursorSpace)), \old(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, 0, this.header-1)))
===========================================================================
DataStructures.CursorList.printList(DataStructures.CursorList):::ENTER
    Variables: DataStructures.CursorList.cursorSpace DataStructures.CursorList.cursorSpace.getClass().getName() DataStructures.CursorList.cursorSpace[] DataStructures.CursorList.cursorSpace[].getClass().getName() DataStructures.CursorList.cursorSpace[].element DataStructures.CursorList.cursorSpace[].element.getClass().getName() DataStructures.CursorList.cursorSpace[].next DataStructures.CursorList.SPACE_SIZE theList theList.header size(DataStructures.CursorList.cursorSpace[]) size(DataStructures.CursorList.cursorSpace[])-1 DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE] DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE-1] DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE..] DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE+1..] DataStructures.CursorList.cursorSpace[0..DataStructures.CursorList.SPACE_SIZE] DataStructures.CursorList.cursorSpace[0..DataStructures.CursorList.SPACE_SIZE-1] DataStructures.CursorList.cursorSpace[theList.header] DataStructures.CursorList.cursorSpace[theList.header-1] DataStructures.CursorList.cursorSpace[theList.header..] DataStructures.CursorList.cursorSpace[theList.header+1..] DataStructures.CursorList.cursorSpace[0..theList.header] DataStructures.CursorList.cursorSpace[0..theList.header-1] DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE].element DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE-1].element DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE..].element DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE+1..].element DataStructures.CursorList.cursorSpace[0..DataStructures.CursorList.SPACE_SIZE].element DataStructures.CursorList.cursorSpace[0..DataStructures.CursorList.SPACE_SIZE-1].element DataStructures.CursorList.cursorSpace[theList.header].element DataStructures.CursorList.cursorSpace[theList.header-1].element DataStructures.CursorList.cursorSpace[theList.header..].element DataStructures.CursorList.cursorSpace[theList.header+1..].element DataStructures.CursorList.cursorSpace[0..theList.header].element DataStructures.CursorList.cursorSpace[0..theList.header-1].element DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE].next DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE-1].next DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE..].next DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE+1..].next DataStructures.CursorList.cursorSpace[0..DataStructures.CursorList.SPACE_SIZE].next DataStructures.CursorList.cursorSpace[0..DataStructures.CursorList.SPACE_SIZE-1].next DataStructures.CursorList.cursorSpace[theList.header].next DataStructures.CursorList.cursorSpace[theList.header-1].next DataStructures.CursorList.cursorSpace[theList.header..].next DataStructures.CursorList.cursorSpace[theList.header+1..].next DataStructures.CursorList.cursorSpace[0..theList.header].next DataStructures.CursorList.cursorSpace[0..theList.header-1].next
daikon.Quant.getElement_Object(DataStructures.CursorList.cursorSpace, DataStructures.CursorList.SPACE_SIZE-1) == daikon.Quant.getElement_Object(DataStructures.CursorList.cursorSpace, theList.header)
theList != null
warning: method daikon.inv.unary.sequence.CommonSequence.format(OutputFormat:JML) needs to be implemented: {0, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99} subset of DataStructures.CursorList.cursorSpace[theList.header..].next
warning: method daikon.inv.unary.sequence.CommonSequence.format(OutputFormat:JML) needs to be implemented: {34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 0} subset of DataStructures.CursorList.cursorSpace[theList.header+1..].next
theList.header < daikon.Quant.size(DataStructures.CursorList.cursorSpace)-1
theList.header > daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, DataStructures.CursorList.SPACE_SIZE-1)
theList.header != daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, theList.header)
theList.header != daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, theList.header-1)
daikon.Quant.size(DataStructures.CursorList.cursorSpace)-1 > daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, theList.header)
daikon.Quant.size(DataStructures.CursorList.cursorSpace)-1 > daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, theList.header-1)
daikon.Quant.memberOf(daikon.Quant.size(DataStructures.CursorList.cursorSpace)-1 , daikon.Quant.slice(DataStructures.CursorList.cursorSpace, theList.header, daikon.Quant.size(DataStructures.CursorList.cursorSpace)) )
daikon.Quant.memberOf(daikon.Quant.size(DataStructures.CursorList.cursorSpace)-1 , daikon.Quant.slice(DataStructures.CursorList.cursorSpace, theList.header+1, daikon.Quant.size(DataStructures.CursorList.cursorSpace)) )
daikon.Quant.eltsLT(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, 0, theList.header), daikon.Quant.size(DataStructures.CursorList.cursorSpace)-1)
daikon.Quant.subsetOf(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, DataStructures.CursorList.SPACE_SIZE, daikon.Quant.size(DataStructures.CursorList.cursorSpace)), daikon.Quant.slice(DataStructures.CursorList.cursorSpace, theList.header, daikon.Quant.size(DataStructures.CursorList.cursorSpace)))
daikon.Quant.subsetOf(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, DataStructures.CursorList.SPACE_SIZE, daikon.Quant.size(DataStructures.CursorList.cursorSpace)), daikon.Quant.slice(DataStructures.CursorList.cursorSpace, theList.header+1, daikon.Quant.size(DataStructures.CursorList.cursorSpace)))
daikon.Quant.subsetOf(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, DataStructures.CursorList.SPACE_SIZE, daikon.Quant.size(DataStructures.CursorList.cursorSpace)), daikon.Quant.slice(DataStructures.CursorList.cursorSpace, 0, theList.header))
daikon.Quant.subsetOf(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, DataStructures.CursorList.SPACE_SIZE, daikon.Quant.size(DataStructures.CursorList.cursorSpace)), daikon.Quant.slice(DataStructures.CursorList.cursorSpace, 0, theList.header-1))
daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, DataStructures.CursorList.SPACE_SIZE-1) <= daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, theList.header)
daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, DataStructures.CursorList.SPACE_SIZE-1) <= daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, theList.header-1)
daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, theList.header) != daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, theList.header-1)
===========================================================================
DataStructures.CursorList.printList(DataStructures.CursorList):::EXIT
    Variables: DataStructures.CursorList.cursorSpace DataStructures.CursorList.cursorSpace.getClass().getName() DataStructures.CursorList.cursorSpace[] DataStructures.CursorList.cursorSpace[].getClass().getName() DataStructures.CursorList.cursorSpace[].element DataStructures.CursorList.cursorSpace[].element.getClass().getName() DataStructures.CursorList.cursorSpace[].next DataStructures.CursorList.SPACE_SIZE theList theList.header orig(DataStructures.CursorList.cursorSpace) orig(DataStructures.CursorList.cursorSpace.getClass().getName()) orig(DataStructures.CursorList.cursorSpace[]) orig(DataStructures.CursorList.cursorSpace[].getClass().getName()) orig(DataStructures.CursorList.cursorSpace[].element) orig(DataStructures.CursorList.cursorSpace[].element.getClass().getName()) orig(DataStructures.CursorList.cursorSpace[].next) orig(theList) orig(theList.header) size(DataStructures.CursorList.cursorSpace[]) size(DataStructures.CursorList.cursorSpace[])-1 orig(size(DataStructures.CursorList.cursorSpace[])) orig(size(DataStructures.CursorList.cursorSpace[]))-1 DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE] DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE-1] DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE..] DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE+1..] DataStructures.CursorList.cursorSpace[0..DataStructures.CursorList.SPACE_SIZE] DataStructures.CursorList.cursorSpace[0..DataStructures.CursorList.SPACE_SIZE-1] DataStructures.CursorList.cursorSpace[theList.header] DataStructures.CursorList.cursorSpace[theList.header-1] DataStructures.CursorList.cursorSpace[theList.header..] DataStructures.CursorList.cursorSpace[theList.header+1..] DataStructures.CursorList.cursorSpace[0..theList.header] DataStructures.CursorList.cursorSpace[0..theList.header-1] DataStructures.CursorList.cursorSpace[orig(theList.header)] DataStructures.CursorList.cursorSpace[orig(theList.header)-1] DataStructures.CursorList.cursorSpace[orig(theList.header)..] DataStructures.CursorList.cursorSpace[orig(theList.header)+1..] DataStructures.CursorList.cursorSpace[0..orig(theList.header)] DataStructures.CursorList.cursorSpace[0..orig(theList.header)-1] DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE].element DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE-1].element DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE..].element DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE+1..].element DataStructures.CursorList.cursorSpace[0..DataStructures.CursorList.SPACE_SIZE].element DataStructures.CursorList.cursorSpace[0..DataStructures.CursorList.SPACE_SIZE-1].element DataStructures.CursorList.cursorSpace[theList.header].element DataStructures.CursorList.cursorSpace[theList.header-1].element DataStructures.CursorList.cursorSpace[theList.header..].element DataStructures.CursorList.cursorSpace[theList.header+1..].element DataStructures.CursorList.cursorSpace[0..theList.header].element DataStructures.CursorList.cursorSpace[0..theList.header-1].element DataStructures.CursorList.cursorSpace[orig(theList.header)].element DataStructures.CursorList.cursorSpace[orig(theList.header)-1].element DataStructures.CursorList.cursorSpace[orig(theList.header)..].element DataStructures.CursorList.cursorSpace[orig(theList.header)+1..].element DataStructures.CursorList.cursorSpace[0..orig(theList.header)].element DataStructures.CursorList.cursorSpace[0..orig(theList.header)-1].element DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE].next DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE-1].next DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE..].next DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE+1..].next DataStructures.CursorList.cursorSpace[0..DataStructures.CursorList.SPACE_SIZE].next DataStructures.CursorList.cursorSpace[0..DataStructures.CursorList.SPACE_SIZE-1].next DataStructures.CursorList.cursorSpace[theList.header].next DataStructures.CursorList.cursorSpace[theList.header-1].next DataStructures.CursorList.cursorSpace[theList.header..].next DataStructures.CursorList.cursorSpace[theList.header+1..].next DataStructures.CursorList.cursorSpace[0..theList.header].next DataStructures.CursorList.cursorSpace[0..theList.header-1].next DataStructures.CursorList.cursorSpace[orig(theList.header)].next DataStructures.CursorList.cursorSpace[orig(theList.header)-1].next DataStructures.CursorList.cursorSpace[orig(theList.header)..].next DataStructures.CursorList.cursorSpace[orig(theList.header)+1..].next DataStructures.CursorList.cursorSpace[0..orig(theList.header)].next DataStructures.CursorList.cursorSpace[0..orig(theList.header)-1].next orig(DataStructures.CursorList.cursorSpace[post(DataStructures.CursorList.SPACE_SIZE)]) orig(DataStructures.CursorList.cursorSpace[post(DataStructures.CursorList.SPACE_SIZE)-1]) orig(DataStructures.CursorList.cursorSpace[post(DataStructures.CursorList.SPACE_SIZE)..]) orig(DataStructures.CursorList.cursorSpace[post(DataStructures.CursorList.SPACE_SIZE)+1..]) orig(DataStructures.CursorList.cursorSpace[0..post(DataStructures.CursorList.SPACE_SIZE)]) orig(DataStructures.CursorList.cursorSpace[0..post(DataStructures.CursorList.SPACE_SIZE)-1]) orig(DataStructures.CursorList.cursorSpace[post(DataStructures.CursorList.SPACE_SIZE)].element) orig(DataStructures.CursorList.cursorSpace[post(DataStructures.CursorList.SPACE_SIZE)-1].element) orig(DataStructures.CursorList.cursorSpace[post(DataStructures.CursorList.SPACE_SIZE)..].element) orig(DataStructures.CursorList.cursorSpace[post(DataStructures.CursorList.SPACE_SIZE)+1..].element) orig(DataStructures.CursorList.cursorSpace[0..post(DataStructures.CursorList.SPACE_SIZE)].element) orig(DataStructures.CursorList.cursorSpace[0..post(DataStructures.CursorList.SPACE_SIZE)-1].element) orig(DataStructures.CursorList.cursorSpace[post(DataStructures.CursorList.SPACE_SIZE)].next) orig(DataStructures.CursorList.cursorSpace[post(DataStructures.CursorList.SPACE_SIZE)-1].next) orig(DataStructures.CursorList.cursorSpace[post(DataStructures.CursorList.SPACE_SIZE)..].next) orig(DataStructures.CursorList.cursorSpace[post(DataStructures.CursorList.SPACE_SIZE)+1..].next) orig(DataStructures.CursorList.cursorSpace[0..post(DataStructures.CursorList.SPACE_SIZE)].next) orig(DataStructures.CursorList.cursorSpace[0..post(DataStructures.CursorList.SPACE_SIZE)-1].next) orig(DataStructures.CursorList.cursorSpace[post(theList.header)]) orig(DataStructures.CursorList.cursorSpace[post(theList.header)-1]) orig(DataStructures.CursorList.cursorSpace[post(theList.header)..]) orig(DataStructures.CursorList.cursorSpace[post(theList.header)+1..]) orig(DataStructures.CursorList.cursorSpace[0..post(theList.header)]) orig(DataStructures.CursorList.cursorSpace[0..post(theList.header)-1]) orig(DataStructures.CursorList.cursorSpace[post(theList.header)].element) orig(DataStructures.CursorList.cursorSpace[post(theList.header)-1].element) orig(DataStructures.CursorList.cursorSpace[post(theList.header)..].element) orig(DataStructures.CursorList.cursorSpace[post(theList.header)+1..].element) orig(DataStructures.CursorList.cursorSpace[0..post(theList.header)].element) orig(DataStructures.CursorList.cursorSpace[0..post(theList.header)-1].element) orig(DataStructures.CursorList.cursorSpace[post(theList.header)].next) orig(DataStructures.CursorList.cursorSpace[post(theList.header)-1].next) orig(DataStructures.CursorList.cursorSpace[post(theList.header)..].next) orig(DataStructures.CursorList.cursorSpace[post(theList.header)+1..].next) orig(DataStructures.CursorList.cursorSpace[0..post(theList.header)].next) orig(DataStructures.CursorList.cursorSpace[0..post(theList.header)-1].next) orig(DataStructures.CursorList.cursorSpace[theList.header]) orig(DataStructures.CursorList.cursorSpace[theList.header-1]) orig(DataStructures.CursorList.cursorSpace[theList.header..]) orig(DataStructures.CursorList.cursorSpace[theList.header+1..]) orig(DataStructures.CursorList.cursorSpace[0..theList.header]) orig(DataStructures.CursorList.cursorSpace[0..theList.header-1]) orig(DataStructures.CursorList.cursorSpace[theList.header].element) orig(DataStructures.CursorList.cursorSpace[theList.header-1].element) orig(DataStructures.CursorList.cursorSpace[theList.header..].element) orig(DataStructures.CursorList.cursorSpace[theList.header+1..].element) orig(DataStructures.CursorList.cursorSpace[0..theList.header].element) orig(DataStructures.CursorList.cursorSpace[0..theList.header-1].element) orig(DataStructures.CursorList.cursorSpace[theList.header].next) orig(DataStructures.CursorList.cursorSpace[theList.header-1].next) orig(DataStructures.CursorList.cursorSpace[theList.header..].next) orig(DataStructures.CursorList.cursorSpace[theList.header+1..].next) orig(DataStructures.CursorList.cursorSpace[0..theList.header].next) orig(DataStructures.CursorList.cursorSpace[0..theList.header-1].next)
DataStructures.CursorList.cursorSpace == \old(DataStructures.CursorList.cursorSpace)
DataStructures.CursorList.cursorSpace.getClass().getName() == \old(DataStructures.CursorList.cursorSpace.getClass().getName())
daikon.Quant.pairwiseEqual(DataStructures.CursorList.cursorSpace, \old(DataStructures.CursorList.cursorSpace))
daikon.Quant.pairwiseEqual(daikon.Quant.collectObject(DataStructures.CursorList.cursorSpace, "element"), \old(daikon.Quant.collectObject(DataStructures.CursorList.cursorSpace, "element")))
daikon.Quant.pairwiseEqual(daikon.Quant.collectObject(DataStructures.CursorList.cursorSpace, "next"), \old(daikon.Quant.collectObject(DataStructures.CursorList.cursorSpace, "next")))
theList.header == \old(theList.header)
daikon.Quant.getElement_Object(DataStructures.CursorList.cursorSpace, DataStructures.CursorList.SPACE_SIZE-1) == daikon.Quant.getElement_Object(DataStructures.CursorList.cursorSpace, theList.header)
daikon.Quant.getElement_Object(DataStructures.CursorList.cursorSpace, DataStructures.CursorList.SPACE_SIZE-1) == daikon.Quant.getElement_Object(DataStructures.CursorList.cursorSpace, \old(theList.header))
daikon.Quant.getElement_Object(DataStructures.CursorList.cursorSpace, DataStructures.CursorList.SPACE_SIZE-1) == \old(daikon.Quant.getElement_Object(DataStructures.CursorList.cursorSpace, \new(theList.header)))
daikon.Quant.getElement_Object(DataStructures.CursorList.cursorSpace, DataStructures.CursorList.SPACE_SIZE-1) == \old(daikon.Quant.getElement_Object(DataStructures.CursorList.cursorSpace, theList.header))
warning: method daikon.inv.unary.sequence.CommonSequence.format(OutputFormat:JML) needs to be implemented: {0, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99} subset of DataStructures.CursorList.cursorSpace[theList.header..].next
warning: method daikon.inv.unary.sequence.CommonSequence.format(OutputFormat:JML) needs to be implemented: {34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 0} subset of DataStructures.CursorList.cursorSpace[theList.header+1..].next
theList.header < daikon.Quant.size(DataStructures.CursorList.cursorSpace)-1
theList.header > daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, DataStructures.CursorList.SPACE_SIZE-1)
theList.header != daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, theList.header)
theList.header != daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, theList.header-1)
daikon.Quant.size(DataStructures.CursorList.cursorSpace)-1 > daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, theList.header)
daikon.Quant.size(DataStructures.CursorList.cursorSpace)-1 > daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, theList.header-1)
daikon.Quant.memberOf(daikon.Quant.size(DataStructures.CursorList.cursorSpace)-1 , daikon.Quant.slice(DataStructures.CursorList.cursorSpace, theList.header, daikon.Quant.size(DataStructures.CursorList.cursorSpace)) )
daikon.Quant.memberOf(daikon.Quant.size(DataStructures.CursorList.cursorSpace)-1 , daikon.Quant.slice(DataStructures.CursorList.cursorSpace, theList.header+1, daikon.Quant.size(DataStructures.CursorList.cursorSpace)) )
daikon.Quant.eltsLT(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, 0, theList.header), daikon.Quant.size(DataStructures.CursorList.cursorSpace)-1)
daikon.Quant.subsetOf(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, DataStructures.CursorList.SPACE_SIZE, daikon.Quant.size(DataStructures.CursorList.cursorSpace)), daikon.Quant.slice(DataStructures.CursorList.cursorSpace, theList.header, daikon.Quant.size(DataStructures.CursorList.cursorSpace)))
daikon.Quant.subsetOf(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, DataStructures.CursorList.SPACE_SIZE, daikon.Quant.size(DataStructures.CursorList.cursorSpace)), daikon.Quant.slice(DataStructures.CursorList.cursorSpace, theList.header+1, daikon.Quant.size(DataStructures.CursorList.cursorSpace)))
daikon.Quant.subsetOf(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, DataStructures.CursorList.SPACE_SIZE, daikon.Quant.size(DataStructures.CursorList.cursorSpace)), daikon.Quant.slice(DataStructures.CursorList.cursorSpace, 0, theList.header))
daikon.Quant.subsetOf(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, DataStructures.CursorList.SPACE_SIZE, daikon.Quant.size(DataStructures.CursorList.cursorSpace)), daikon.Quant.slice(DataStructures.CursorList.cursorSpace, 0, theList.header-1))
daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, DataStructures.CursorList.SPACE_SIZE-1) <= daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, theList.header)
daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, DataStructures.CursorList.SPACE_SIZE-1) <= daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, theList.header-1)
daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, theList.header) != daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, theList.header-1)
===========================================================================
DataStructures.CursorList.remove(java.lang.Object):::ENTER
    Variables: this this.header DataStructures.CursorList.cursorSpace DataStructures.CursorList.cursorSpace.getClass().getName() DataStructures.CursorList.cursorSpace[] DataStructures.CursorList.cursorSpace[].getClass().getName() DataStructures.CursorList.cursorSpace[].element DataStructures.CursorList.cursorSpace[].element.getClass().getName() DataStructures.CursorList.cursorSpace[].next DataStructures.CursorList.SPACE_SIZE x x.getClass().getName() size(DataStructures.CursorList.cursorSpace[]) size(DataStructures.CursorList.cursorSpace[])-1 DataStructures.CursorList.cursorSpace[this.header] DataStructures.CursorList.cursorSpace[this.header-1] DataStructures.CursorList.cursorSpace[this.header..] DataStructures.CursorList.cursorSpace[this.header+1..] DataStructures.CursorList.cursorSpace[0..this.header] DataStructures.CursorList.cursorSpace[0..this.header-1] DataStructures.CursorList.cursorSpace[this.header].element DataStructures.CursorList.cursorSpace[this.header-1].element DataStructures.CursorList.cursorSpace[this.header..].element DataStructures.CursorList.cursorSpace[this.header+1..].element DataStructures.CursorList.cursorSpace[0..this.header].element DataStructures.CursorList.cursorSpace[0..this.header-1].element DataStructures.CursorList.cursorSpace[this.header].next DataStructures.CursorList.cursorSpace[this.header-1].next DataStructures.CursorList.cursorSpace[this.header..].next DataStructures.CursorList.cursorSpace[this.header+1..].next DataStructures.CursorList.cursorSpace[0..this.header].next DataStructures.CursorList.cursorSpace[0..this.header-1].next DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE] DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE-1] DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE..] DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE+1..] DataStructures.CursorList.cursorSpace[0..DataStructures.CursorList.SPACE_SIZE] DataStructures.CursorList.cursorSpace[0..DataStructures.CursorList.SPACE_SIZE-1] DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE].element DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE-1].element DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE..].element DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE+1..].element DataStructures.CursorList.cursorSpace[0..DataStructures.CursorList.SPACE_SIZE].element DataStructures.CursorList.cursorSpace[0..DataStructures.CursorList.SPACE_SIZE-1].element DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE].next DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE-1].next DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE..].next DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE+1..].next DataStructures.CursorList.cursorSpace[0..DataStructures.CursorList.SPACE_SIZE].next DataStructures.CursorList.cursorSpace[0..DataStructures.CursorList.SPACE_SIZE-1].next
this.header == 1 || this.header == 4 || this.header == 20
x != null
warning: method daikon.inv.unary.string.PrintableString.format(OutputFormat:JML) needs to be implemented: x.getClass().getName() is printable
(this.header >> daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, this.header-1) == 0)
DataStructures.CursorList.cursorSpace.getClass().getName() != x.getClass().getName()
daikon.Quant.memberOf(x.getClass().getName() , daikon.Quant.typeArray(daikon.Quant.collectObject(DataStructures.CursorList.cursorSpace, "element")) )
(daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, this.header) >> daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, this.header-1) == 0)
daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, this.header) > daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, DataStructures.CursorList.SPACE_SIZE-1)
daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, this.header-1) > daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, DataStructures.CursorList.SPACE_SIZE-1)
===========================================================================
DataStructures.CursorList.remove(java.lang.Object):::EXIT
    Variables: this this.header DataStructures.CursorList.cursorSpace DataStructures.CursorList.cursorSpace.getClass().getName() DataStructures.CursorList.cursorSpace[] DataStructures.CursorList.cursorSpace[].getClass().getName() DataStructures.CursorList.cursorSpace[].element DataStructures.CursorList.cursorSpace[].element.getClass().getName() DataStructures.CursorList.cursorSpace[].next DataStructures.CursorList.SPACE_SIZE x x.getClass().getName() orig(this) orig(this.header) orig(DataStructures.CursorList.cursorSpace) orig(DataStructures.CursorList.cursorSpace.getClass().getName()) orig(DataStructures.CursorList.cursorSpace[]) orig(DataStructures.CursorList.cursorSpace[].getClass().getName()) orig(DataStructures.CursorList.cursorSpace[].element) orig(DataStructures.CursorList.cursorSpace[].element.getClass().getName()) orig(DataStructures.CursorList.cursorSpace[].next) orig(x) orig(x.getClass().getName()) size(DataStructures.CursorList.cursorSpace[]) size(DataStructures.CursorList.cursorSpace[])-1 orig(size(DataStructures.CursorList.cursorSpace[])) orig(size(DataStructures.CursorList.cursorSpace[]))-1 DataStructures.CursorList.cursorSpace[this.header] DataStructures.CursorList.cursorSpace[this.header-1] DataStructures.CursorList.cursorSpace[this.header..] DataStructures.CursorList.cursorSpace[this.header+1..] DataStructures.CursorList.cursorSpace[0..this.header] DataStructures.CursorList.cursorSpace[0..this.header-1] DataStructures.CursorList.cursorSpace[this.header].element DataStructures.CursorList.cursorSpace[this.header-1].element DataStructures.CursorList.cursorSpace[this.header..].element DataStructures.CursorList.cursorSpace[this.header+1..].element DataStructures.CursorList.cursorSpace[0..this.header].element DataStructures.CursorList.cursorSpace[0..this.header-1].element DataStructures.CursorList.cursorSpace[this.header].next DataStructures.CursorList.cursorSpace[this.header-1].next DataStructures.CursorList.cursorSpace[this.header..].next DataStructures.CursorList.cursorSpace[this.header+1..].next DataStructures.CursorList.cursorSpace[0..this.header].next DataStructures.CursorList.cursorSpace[0..this.header-1].next orig(DataStructures.CursorList.cursorSpace[post(this.header)]) orig(DataStructures.CursorList.cursorSpace[post(this.header)-1]) orig(DataStructures.CursorList.cursorSpace[post(this.header)..]) orig(DataStructures.CursorList.cursorSpace[post(this.header)+1..]) orig(DataStructures.CursorList.cursorSpace[0..post(this.header)]) orig(DataStructures.CursorList.cursorSpace[0..post(this.header)-1]) orig(DataStructures.CursorList.cursorSpace[post(this.header)].element) orig(DataStructures.CursorList.cursorSpace[post(this.header)-1].element) orig(DataStructures.CursorList.cursorSpace[post(this.header)..].element) orig(DataStructures.CursorList.cursorSpace[post(this.header)+1..].element) orig(DataStructures.CursorList.cursorSpace[0..post(this.header)].element) orig(DataStructures.CursorList.cursorSpace[0..post(this.header)-1].element) orig(DataStructures.CursorList.cursorSpace[post(this.header)].next) orig(DataStructures.CursorList.cursorSpace[post(this.header)-1].next) orig(DataStructures.CursorList.cursorSpace[post(this.header)..].next) orig(DataStructures.CursorList.cursorSpace[post(this.header)+1..].next) orig(DataStructures.CursorList.cursorSpace[0..post(this.header)].next) orig(DataStructures.CursorList.cursorSpace[0..post(this.header)-1].next) DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE] DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE-1] DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE..] DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE+1..] DataStructures.CursorList.cursorSpace[0..DataStructures.CursorList.SPACE_SIZE] DataStructures.CursorList.cursorSpace[0..DataStructures.CursorList.SPACE_SIZE-1] DataStructures.CursorList.cursorSpace[orig(this.header)] DataStructures.CursorList.cursorSpace[orig(this.header)-1] DataStructures.CursorList.cursorSpace[orig(this.header)..] DataStructures.CursorList.cursorSpace[orig(this.header)+1..] DataStructures.CursorList.cursorSpace[0..orig(this.header)] DataStructures.CursorList.cursorSpace[0..orig(this.header)-1] DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE].element DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE-1].element DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE..].element DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE+1..].element DataStructures.CursorList.cursorSpace[0..DataStructures.CursorList.SPACE_SIZE].element DataStructures.CursorList.cursorSpace[0..DataStructures.CursorList.SPACE_SIZE-1].element DataStructures.CursorList.cursorSpace[orig(this.header)].element DataStructures.CursorList.cursorSpace[orig(this.header)-1].element DataStructures.CursorList.cursorSpace[orig(this.header)..].element DataStructures.CursorList.cursorSpace[orig(this.header)+1..].element DataStructures.CursorList.cursorSpace[0..orig(this.header)].element DataStructures.CursorList.cursorSpace[0..orig(this.header)-1].element DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE].next DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE-1].next DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE..].next DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE+1..].next DataStructures.CursorList.cursorSpace[0..DataStructures.CursorList.SPACE_SIZE].next DataStructures.CursorList.cursorSpace[0..DataStructures.CursorList.SPACE_SIZE-1].next DataStructures.CursorList.cursorSpace[orig(this.header)].next DataStructures.CursorList.cursorSpace[orig(this.header)-1].next DataStructures.CursorList.cursorSpace[orig(this.header)..].next DataStructures.CursorList.cursorSpace[orig(this.header)+1..].next DataStructures.CursorList.cursorSpace[0..orig(this.header)].next DataStructures.CursorList.cursorSpace[0..orig(this.header)-1].next orig(DataStructures.CursorList.cursorSpace[post(DataStructures.CursorList.SPACE_SIZE)]) orig(DataStructures.CursorList.cursorSpace[post(DataStructures.CursorList.SPACE_SIZE)-1]) orig(DataStructures.CursorList.cursorSpace[post(DataStructures.CursorList.SPACE_SIZE)..]) orig(DataStructures.CursorList.cursorSpace[post(DataStructures.CursorList.SPACE_SIZE)+1..]) orig(DataStructures.CursorList.cursorSpace[0..post(DataStructures.CursorList.SPACE_SIZE)]) orig(DataStructures.CursorList.cursorSpace[0..post(DataStructures.CursorList.SPACE_SIZE)-1]) orig(DataStructures.CursorList.cursorSpace[post(DataStructures.CursorList.SPACE_SIZE)].element) orig(DataStructures.CursorList.cursorSpace[post(DataStructures.CursorList.SPACE_SIZE)-1].element) orig(DataStructures.CursorList.cursorSpace[post(DataStructures.CursorList.SPACE_SIZE)..].element) orig(DataStructures.CursorList.cursorSpace[post(DataStructures.CursorList.SPACE_SIZE)+1..].element) orig(DataStructures.CursorList.cursorSpace[0..post(DataStructures.CursorList.SPACE_SIZE)].element) orig(DataStructures.CursorList.cursorSpace[0..post(DataStructures.CursorList.SPACE_SIZE)-1].element) orig(DataStructures.CursorList.cursorSpace[post(DataStructures.CursorList.SPACE_SIZE)].next) orig(DataStructures.CursorList.cursorSpace[post(DataStructures.CursorList.SPACE_SIZE)-1].next) orig(DataStructures.CursorList.cursorSpace[post(DataStructures.CursorList.SPACE_SIZE)..].next) orig(DataStructures.CursorList.cursorSpace[post(DataStructures.CursorList.SPACE_SIZE)+1..].next) orig(DataStructures.CursorList.cursorSpace[0..post(DataStructures.CursorList.SPACE_SIZE)].next) orig(DataStructures.CursorList.cursorSpace[0..post(DataStructures.CursorList.SPACE_SIZE)-1].next) orig(DataStructures.CursorList.cursorSpace[this.header]) orig(DataStructures.CursorList.cursorSpace[this.header-1]) orig(DataStructures.CursorList.cursorSpace[this.header..]) orig(DataStructures.CursorList.cursorSpace[this.header+1..]) orig(DataStructures.CursorList.cursorSpace[0..this.header]) orig(DataStructures.CursorList.cursorSpace[0..this.header-1]) orig(DataStructures.CursorList.cursorSpace[this.header].element) orig(DataStructures.CursorList.cursorSpace[this.header-1].element) orig(DataStructures.CursorList.cursorSpace[this.header..].element) orig(DataStructures.CursorList.cursorSpace[this.header+1..].element) orig(DataStructures.CursorList.cursorSpace[0..this.header].element) orig(DataStructures.CursorList.cursorSpace[0..this.header-1].element) orig(DataStructures.CursorList.cursorSpace[this.header].next) orig(DataStructures.CursorList.cursorSpace[this.header-1].next) orig(DataStructures.CursorList.cursorSpace[this.header..].next) orig(DataStructures.CursorList.cursorSpace[this.header+1..].next) orig(DataStructures.CursorList.cursorSpace[0..this.header].next) orig(DataStructures.CursorList.cursorSpace[0..this.header-1].next)
assignable DataStructures.CursorList.cursorSpace[].element, DataStructures.CursorList.cursorSpace[].next, DataStructures.CursorList.cursorSpace[this.header-1].element, DataStructures.CursorList.cursorSpace[this.header..].element, DataStructures.CursorList.cursorSpace[this.header+1..].element, DataStructures.CursorList.cursorSpace[0..this.header].element, DataStructures.CursorList.cursorSpace[0..this.header-1].element, DataStructures.CursorList.cursorSpace[this.header].next, DataStructures.CursorList.cursorSpace[this.header-1].next, DataStructures.CursorList.cursorSpace[this.header..].next, DataStructures.CursorList.cursorSpace[this.header+1..].next, DataStructures.CursorList.cursorSpace[0..this.header].next, DataStructures.CursorList.cursorSpace[0..this.header-1].next
this.header == \old(this.header)
DataStructures.CursorList.cursorSpace == \old(DataStructures.CursorList.cursorSpace)
DataStructures.CursorList.cursorSpace.getClass().getName() == \old(DataStructures.CursorList.cursorSpace.getClass().getName())
daikon.Quant.pairwiseEqual(DataStructures.CursorList.cursorSpace, \old(DataStructures.CursorList.cursorSpace))
daikon.Quant.getElement_Object(DataStructures.CursorList.cursorSpace, this.header) == \old(daikon.Quant.getElement_Object(DataStructures.CursorList.cursorSpace, \new(this.header)))
daikon.Quant.getElement_Object(DataStructures.CursorList.cursorSpace, this.header) == \old(daikon.Quant.getElement_Object(DataStructures.CursorList.cursorSpace, \new(DataStructures.CursorList.SPACE_SIZE)-1))
daikon.Quant.getElement_Object(DataStructures.CursorList.cursorSpace, this.header) == \old(daikon.Quant.getElement_Object(DataStructures.CursorList.cursorSpace, this.header))
daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, DataStructures.CursorList.SPACE_SIZE-1) == \old(daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, \new(DataStructures.CursorList.SPACE_SIZE)-1))
this.header == 1 || this.header == 4 || this.header == 20
warning: method daikon.inv.unary.sequence.CommonSequence.format(OutputFormat:JML) needs to be implemented: {3} subset of DataStructures.CursorList.cursorSpace[0..this.header].next
(this.header >> daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, this.header-1) == 0)
this.header != \old(daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, this.header))
(this.header >> \old(daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, this.header-1)) == 0)
this.header != \old(daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, this.header-1))
DataStructures.CursorList.cursorSpace.getClass().getName() != \old(x.getClass().getName())
daikon.Quant.subsetOf(daikon.Quant.collectObject(DataStructures.CursorList.cursorSpace, "element"), \old(daikon.Quant.collectObject(DataStructures.CursorList.cursorSpace, "element")))
daikon.Quant.subsetOf(daikon.Quant.collectObject(DataStructures.CursorList.cursorSpace, "next"), \old(daikon.Quant.collectObject(DataStructures.CursorList.cursorSpace, "next")))
daikon.Quant.eltsLTE(\old(daikon.Quant.collectObject(DataStructures.CursorList.cursorSpace, "next")), daikon.Quant.size(DataStructures.CursorList.cursorSpace)-1)
daikon.Quant.memberOf(daikon.Quant.size(DataStructures.CursorList.cursorSpace)-1 , \old(daikon.Quant.collectObject(DataStructures.CursorList.cursorSpace, "next")) )
daikon.Quant.eltsGTE(\old(daikon.Quant.collectObject(DataStructures.CursorList.cursorSpace, "next")), daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, DataStructures.CursorList.SPACE_SIZE-1))
daikon.Quant.size(DataStructures.CursorList.cursorSpace)-1 > \old(daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, this.header))
daikon.Quant.size(DataStructures.CursorList.cursorSpace)-1 > \old(daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, this.header-1))
daikon.Quant.memberOf(daikon.Quant.size(DataStructures.CursorList.cursorSpace)-1 , \old(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, this.header, daikon.Quant.size(DataStructures.CursorList.cursorSpace))) )
daikon.Quant.memberOf(daikon.Quant.size(DataStructures.CursorList.cursorSpace)-1 , \old(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, this.header+1, daikon.Quant.size(DataStructures.CursorList.cursorSpace))) )
daikon.Quant.eltsLT(\old(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, 0, this.header)), daikon.Quant.size(DataStructures.CursorList.cursorSpace)-1)
daikon.Quant.memberOf(daikon.Quant.getElement_Object(DataStructures.CursorList.cursorSpace, this.header-1) , \old(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, 0, this.header)) )
daikon.Quant.memberOf(daikon.Quant.getElement_Object(DataStructures.CursorList.cursorSpace, this.header-1) , \old(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, 0, this.header-1)) )
daikon.Quant.subsetOf(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, this.header, daikon.Quant.size(DataStructures.CursorList.cursorSpace)), \old(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, this.header, daikon.Quant.size(DataStructures.CursorList.cursorSpace))))
daikon.Quant.subsetOf(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, this.header, daikon.Quant.size(DataStructures.CursorList.cursorSpace)), \old(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, this.header+1, daikon.Quant.size(DataStructures.CursorList.cursorSpace))))
daikon.Quant.subsetOf(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, this.header+1, daikon.Quant.size(DataStructures.CursorList.cursorSpace)), \old(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, this.header, daikon.Quant.size(DataStructures.CursorList.cursorSpace))))
daikon.Quant.subsetOf(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, this.header+1, daikon.Quant.size(DataStructures.CursorList.cursorSpace)), \old(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, this.header+1, daikon.Quant.size(DataStructures.CursorList.cursorSpace))))
daikon.Quant.subsetOf(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, 0, this.header), \old(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, 0, this.header)))
daikon.Quant.subsetOf(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, 0, this.header), \old(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, 0, this.header-1)))
daikon.Quant.subsetOf(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, 0, this.header-1), \old(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, 0, this.header)))
daikon.Quant.subsetOf(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, 0, this.header-1), \old(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, 0, this.header-1)))
(daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, this.header) >> daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, this.header-1) == 0)
(daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, this.header) >> \old(daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, this.header-1)) == 0)
daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, this.header-1) > daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, DataStructures.CursorList.SPACE_SIZE-1)
(\old(daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, this.header)) >> daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, this.header-1) == 0)
daikon.Quant.memberOf(\old(daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, this.header)) , daikon.Quant.slice(DataStructures.CursorList.cursorSpace, 0, this.header) )
daikon.Quant.subsetOf(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, DataStructures.CursorList.SPACE_SIZE, daikon.Quant.size(DataStructures.CursorList.cursorSpace)), \old(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, this.header, daikon.Quant.size(DataStructures.CursorList.cursorSpace))))
daikon.Quant.subsetOf(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, DataStructures.CursorList.SPACE_SIZE, daikon.Quant.size(DataStructures.CursorList.cursorSpace)), \old(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, this.header+1, daikon.Quant.size(DataStructures.CursorList.cursorSpace))))
daikon.Quant.subsetOf(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, DataStructures.CursorList.SPACE_SIZE, daikon.Quant.size(DataStructures.CursorList.cursorSpace)), \old(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, 0, this.header)))
daikon.Quant.subsetOf(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, DataStructures.CursorList.SPACE_SIZE, daikon.Quant.size(DataStructures.CursorList.cursorSpace)), \old(daikon.Quant.slice(DataStructures.CursorList.cursorSpace, 0, this.header-1)))
daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, DataStructures.CursorList.SPACE_SIZE-1) < \old(daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, this.header))
daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, DataStructures.CursorList.SPACE_SIZE-1) < \old(daikon.Quant.getElement_int(DataStructures.CursorList.cursorSpace, this.header-1))
===========================================================================
DataStructures.CursorList.zeroth():::ENTER
    Variables: this this.header DataStructures.CursorList.cursorSpace DataStructures.CursorList.cursorSpace.getClass().getName() DataStructures.CursorList.cursorSpace[] DataStructures.CursorList.cursorSpace[].getClass().getName() DataStructures.CursorList.cursorSpace[].element DataStructures.CursorList.cursorSpace[].element.getClass().getName() DataStructures.CursorList.cursorSpace[].next DataStructures.CursorList.SPACE_SIZE size(DataStructures.CursorList.cursorSpace[]) size(DataStructures.CursorList.cursorSpace[])-1 DataStructures.CursorList.cursorSpace[this.header] DataStructures.CursorList.cursorSpace[this.header-1] DataStructures.CursorList.cursorSpace[this.header..] DataStructures.CursorList.cursorSpace[this.header+1..] DataStructures.CursorList.cursorSpace[0..this.header] DataStructures.CursorList.cursorSpace[0..this.header-1] DataStructures.CursorList.cursorSpace[this.header].element DataStructures.CursorList.cursorSpace[this.header-1].element DataStructures.CursorList.cursorSpace[this.header..].element DataStructures.CursorList.cursorSpace[this.header+1..].element DataStructures.CursorList.cursorSpace[0..this.header].element DataStructures.CursorList.cursorSpace[0..this.header-1].element DataStructures.CursorList.cursorSpace[this.header].next DataStructures.CursorList.cursorSpace[this.header-1].next DataStructures.CursorList.cursorSpace[this.header..].next DataStructures.CursorList.cursorSpace[this.header+1..].next DataStructures.CursorList.cursorSpace[0..this.header].next DataStructures.CursorList.cursorSpace[0..this.header-1].next DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE] DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE-1] DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE..] DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE+1..] DataStructures.CursorList.cursorSpace[0..DataStructures.CursorList.SPACE_SIZE] DataStructures.CursorList.cursorSpace[0..DataStructures.CursorList.SPACE_SIZE-1] DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE].element DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE-1].element DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE..].element DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE+1..].element DataStructures.CursorList.cursorSpace[0..DataStructures.CursorList.SPACE_SIZE].element DataStructures.CursorList.cursorSpace[0..DataStructures.CursorList.SPACE_SIZE-1].element DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE].next DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE-1].next DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE..].next DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE+1..].next DataStructures.CursorList.cursorSpace[0..DataStructures.CursorList.SPACE_SIZE].next DataStructures.CursorList.cursorSpace[0..DataStructures.CursorList.SPACE_SIZE-1].next
===========================================================================
DataStructures.CursorList.zeroth():::EXIT
    Variables: this this.header DataStructures.CursorList.cursorSpace DataStructures.CursorList.cursorSpace.getClass().getName() DataStructures.CursorList.cursorSpace[] DataStructures.CursorList.cursorSpace[].getClass().getName() DataStructures.CursorList.cursorSpace[].element DataStructures.CursorList.cursorSpace[].element.getClass().getName() DataStructures.CursorList.cursorSpace[].next DataStructures.CursorList.SPACE_SIZE return return.current orig(this) orig(this.header) orig(DataStructures.CursorList.cursorSpace) orig(DataStructures.CursorList.cursorSpace.getClass().getName()) orig(DataStructures.CursorList.cursorSpace[]) orig(DataStructures.CursorList.cursorSpace[].getClass().getName()) orig(DataStructures.CursorList.cursorSpace[].element) orig(DataStructures.CursorList.cursorSpace[].element.getClass().getName()) orig(DataStructures.CursorList.cursorSpace[].next) size(DataStructures.CursorList.cursorSpace[]) size(DataStructures.CursorList.cursorSpace[])-1 orig(size(DataStructures.CursorList.cursorSpace[])) orig(size(DataStructures.CursorList.cursorSpace[]))-1 DataStructures.CursorList.cursorSpace[this.header] DataStructures.CursorList.cursorSpace[this.header-1] DataStructures.CursorList.cursorSpace[this.header..] DataStructures.CursorList.cursorSpace[this.header+1..] DataStructures.CursorList.cursorSpace[0..this.header] DataStructures.CursorList.cursorSpace[0..this.header-1] DataStructures.CursorList.cursorSpace[this.header].element DataStructures.CursorList.cursorSpace[this.header-1].element DataStructures.CursorList.cursorSpace[this.header..].element DataStructures.CursorList.cursorSpace[this.header+1..].element DataStructures.CursorList.cursorSpace[0..this.header].element DataStructures.CursorList.cursorSpace[0..this.header-1].element DataStructures.CursorList.cursorSpace[this.header].next DataStructures.CursorList.cursorSpace[this.header-1].next DataStructures.CursorList.cursorSpace[this.header..].next DataStructures.CursorList.cursorSpace[this.header+1..].next DataStructures.CursorList.cursorSpace[0..this.header].next DataStructures.CursorList.cursorSpace[0..this.header-1].next orig(DataStructures.CursorList.cursorSpace[post(this.header)]) orig(DataStructures.CursorList.cursorSpace[post(this.header)-1]) orig(DataStructures.CursorList.cursorSpace[post(this.header)..]) orig(DataStructures.CursorList.cursorSpace[post(this.header)+1..]) orig(DataStructures.CursorList.cursorSpace[0..post(this.header)]) orig(DataStructures.CursorList.cursorSpace[0..post(this.header)-1]) orig(DataStructures.CursorList.cursorSpace[post(this.header)].element) orig(DataStructures.CursorList.cursorSpace[post(this.header)-1].element) orig(DataStructures.CursorList.cursorSpace[post(this.header)..].element) orig(DataStructures.CursorList.cursorSpace[post(this.header)+1..].element) orig(DataStructures.CursorList.cursorSpace[0..post(this.header)].element) orig(DataStructures.CursorList.cursorSpace[0..post(this.header)-1].element) orig(DataStructures.CursorList.cursorSpace[post(this.header)].next) orig(DataStructures.CursorList.cursorSpace[post(this.header)-1].next) orig(DataStructures.CursorList.cursorSpace[post(this.header)..].next) orig(DataStructures.CursorList.cursorSpace[post(this.header)+1..].next) orig(DataStructures.CursorList.cursorSpace[0..post(this.header)].next) orig(DataStructures.CursorList.cursorSpace[0..post(this.header)-1].next) DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE] DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE-1] DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE..] DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE+1..] DataStructures.CursorList.cursorSpace[0..DataStructures.CursorList.SPACE_SIZE] DataStructures.CursorList.cursorSpace[0..DataStructures.CursorList.SPACE_SIZE-1] DataStructures.CursorList.cursorSpace[return.current] DataStructures.CursorList.cursorSpace[return.current-1] DataStructures.CursorList.cursorSpace[return.current..] DataStructures.CursorList.cursorSpace[return.current+1..] DataStructures.CursorList.cursorSpace[0..return.current] DataStructures.CursorList.cursorSpace[0..return.current-1] DataStructures.CursorList.cursorSpace[orig(this.header)] DataStructures.CursorList.cursorSpace[orig(this.header)-1] DataStructures.CursorList.cursorSpace[orig(this.header)..] DataStructures.CursorList.cursorSpace[orig(this.header)+1..] DataStructures.CursorList.cursorSpace[0..orig(this.header)] DataStructures.CursorList.cursorSpace[0..orig(this.header)-1] DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE].element DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE-1].element DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE..].element DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE+1..].element DataStructures.CursorList.cursorSpace[0..DataStructures.CursorList.SPACE_SIZE].element DataStructures.CursorList.cursorSpace[0..DataStructures.CursorList.SPACE_SIZE-1].element DataStructures.CursorList.cursorSpace[return.current].element DataStructures.CursorList.cursorSpace[return.current-1].element DataStructures.CursorList.cursorSpace[return.current..].element DataStructures.CursorList.cursorSpace[return.current+1..].element DataStructures.CursorList.cursorSpace[0..return.current].element DataStructures.CursorList.cursorSpace[0..return.current-1].element DataStructures.CursorList.cursorSpace[orig(this.header)].element DataStructures.CursorList.cursorSpace[orig(this.header)-1].element DataStructures.CursorList.cursorSpace[orig(this.header)..].element DataStructures.CursorList.cursorSpace[orig(this.header)+1..].element DataStructures.CursorList.cursorSpace[0..orig(this.header)].element DataStructures.CursorList.cursorSpace[0..orig(this.header)-1].element DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE].next DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE-1].next DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE..].next DataStructures.CursorList.cursorSpace[DataStructures.CursorList.SPACE_SIZE+1..].next DataStructures.CursorList.cursorSpace[0..DataStructures.CursorList.SPACE_SIZE].next DataStructures.CursorList.cursorSpace[0..DataStructures.CursorList.SPACE_SIZE-1].next DataStructures.CursorList.cursorSpace[return.current].next DataStructures.CursorList.cursorSpace[return.current-1].next DataStructures.CursorList.cursorSpace[return.current..].next DataStructures.CursorList.cursorSpace[return.current+1..].next DataStructures.CursorList.cursorSpace[0..return.current].next DataStructures.CursorList.cursorSpace[0..return.current-1].next DataStructures.CursorList.cursorSpace[orig(this.header)].next DataStructures.CursorList.cursorSpace[orig(this.header)-1].next DataStructures.CursorList.cursorSpace[orig(this.header)..].next DataStructures.CursorList.cursorSpace[orig(this.header)+1..].next DataStructures.CursorList.cursorSpace[0..orig(this.header)].next DataStructures.CursorList.cursorSpace[0..orig(this.header)-1].next orig(DataStructures.CursorList.cursorSpace[post(DataStructures.CursorList.SPACE_SIZE)]) orig(DataStructures.CursorList.cursorSpace[post(DataStructures.CursorList.SPACE_SIZE)-1]) orig(DataStructures.CursorList.cursorSpace[post(DataStructures.CursorList.SPACE_SIZE)..]) orig(DataStructures.CursorList.cursorSpace[post(DataStructures.CursorList.SPACE_SIZE)+1..]) orig(DataStructures.CursorList.cursorSpace[0..post(DataStructures.CursorList.SPACE_SIZE)]) orig(DataStructures.CursorList.cursorSpace[0..post(DataStructures.CursorList.SPACE_SIZE)-1]) orig(DataStructures.CursorList.cursorSpace[post(DataStructures.CursorList.SPACE_SIZE)].element) orig(DataStructures.CursorList.cursorSpace[post(DataStructures.CursorList.SPACE_SIZE)-1].element) orig(DataStructures.CursorList.cursorSpace[post(DataStructures.CursorList.SPACE_SIZE)..].element) orig(DataStructures.CursorList.cursorSpace[post(DataStructures.CursorList.SPACE_SIZE)+1..].element) orig(DataStructures.CursorList.cursorSpace[0..post(DataStructures.CursorList.SPACE_SIZE)].element) orig(DataStructures.CursorList.cursorSpace[0..post(DataStructures.CursorList.SPACE_SIZE)-1].element) orig(DataStructures.CursorList.cursorSpace[post(DataStructures.CursorList.SPACE_SIZE)].next) orig(DataStructures.CursorList.cursorSpace[post(DataStructures.CursorList.SPACE_SIZE)-1].next) orig(DataStructures.CursorList.cursorSpace[post(DataStructures.CursorList.SPACE_SIZE)..].next) orig(DataStructures.CursorList.cursorSpace[post(DataStructures.CursorList.SPACE_SIZE)+1..].next) orig(DataStructures.CursorList.cursorSpace[0..post(DataStructures.CursorList.SPACE_SIZE)].next) orig(DataStructures.CursorList.cursorSpace[0..post(DataStructures.CursorList.SPACE_SIZE)-1].next) orig(DataStructures.CursorList.cursorSpace[post(return.current)]) orig(DataStructures.CursorList.cursorSpace[post(return.current)-1]) orig(DataStructures.CursorList.cursorSpace[post(return.current)..]) orig(DataStructures.CursorList.cursorSpace[post(return.current)+1..]) orig(DataStructures.CursorList.cursorSpace[0..post(return.current)]) orig(DataStructures.CursorList.cursorSpace[0..post(return.current)-1]) orig(DataStructures.CursorList.cursorSpace[post(return.current)].element) orig(DataStructures.CursorList.cursorSpace[post(return.current)-1].element) orig(DataStructures.CursorList.cursorSpace[post(return.current)..].element) orig(DataStructures.CursorList.cursorSpace[post(return.current)+1..].element) orig(DataStructures.CursorList.cursorSpace[0..post(return.current)].element) orig(DataStructures.CursorList.cursorSpace[0..post(return.current)-1].element) orig(DataStructures.CursorList.cursorSpace[post(return.current)].next) orig(DataStructures.CursorList.cursorSpace[post(return.current)-1].next) orig(DataStructures.CursorList.cursorSpace[post(return.current)..].next) orig(DataStructures.CursorList.cursorSpace[post(return.current)+1..].next) orig(DataStructures.CursorList.cursorSpace[0..post(return.current)].next) orig(DataStructures.CursorList.cursorSpace[0..post(return.current)-1].next) orig(DataStructures.CursorList.cursorSpace[this.header]) orig(DataStructures.CursorList.cursorSpace[this.header-1]) orig(DataStructures.CursorList.cursorSpace[this.header..]) orig(DataStructures.CursorList.cursorSpace[this.header+1..]) orig(DataStructures.CursorList.cursorSpace[0..this.header]) orig(DataStructures.CursorList.cursorSpace[0..this.header-1]) orig(DataStructures.CursorList.cursorSpace[this.header].element) orig(DataStructures.CursorList.cursorSpace[this.header-1].element) orig(DataStructures.CursorList.cursorSpace[this.header..].element) orig(DataStructures.CursorList.cursorSpace[this.header+1..].element) orig(DataStructures.CursorList.cursorSpace[0..this.header].element) orig(DataStructures.CursorList.cursorSpace[0..this.header-1].element) orig(DataStructures.CursorList.cursorSpace[this.header].next) orig(DataStructures.CursorList.cursorSpace[this.header-1].next) orig(DataStructures.CursorList.cursorSpace[this.header..].next) orig(DataStructures.CursorList.cursorSpace[this.header+1..].next) orig(DataStructures.CursorList.cursorSpace[0..this.header].next) orig(DataStructures.CursorList.cursorSpace[0..this.header-1].next)
this.header == \result.current
this.header == \old(this.header)
DataStructures.CursorList.cursorSpace == \old(DataStructures.CursorList.cursorSpace)
DataStructures.CursorList.cursorSpace.getClass().getName() == \old(DataStructures.CursorList.cursorSpace.getClass().getName())
daikon.Quant.pairwiseEqual(DataStructures.CursorList.cursorSpace, \old(DataStructures.CursorList.cursorSpace))
daikon.Quant.pairwiseEqual(daikon.Quant.collectObject(DataStructures.CursorList.cursorSpace, "element"), \old(daikon.Quant.collectObject(DataStructures.CursorList.cursorSpace, "element")))
daikon.Quant.pairwiseEqual(daikon.Quant.collectObject(DataStructures.CursorList.cursorSpace, "next"), \old(daikon.Quant.collectObject(DataStructures.CursorList.cursorSpace, "next")))
daikon.Quant.getElement_Object(DataStructures.CursorList.cursorSpace, this.header) == \old(daikon.Quant.getElement_Object(DataStructures.CursorList.cursorSpace, \new(DataStructures.CursorList.SPACE_SIZE)-1))
\result != null
===========================================================================
DataStructures.CursorListItr:::OBJECT
    Variables: this this.current
this.current >= 0
===========================================================================
DataStructures.CursorListItr.CursorListItr(int):::ENTER
    Variables: theNode
theNode >= 0
===========================================================================
DataStructures.CursorListItr.CursorListItr(int):::EXIT
    Variables: this this.current theNode orig(theNode)
this.current == \old(theNode)
===========================================================================
DataStructures.CursorListItr.advance():::ENTER
    Variables: this this.current
===========================================================================
DataStructures.CursorListItr.advance():::EXIT
    Variables: this this.current orig(this) orig(this.current)
assignable this.current
this.current != \old(this.current)
===========================================================================
DataStructures.CursorListItr.isPastEnd():::ENTER
    Variables: this this.current
===========================================================================
DataStructures.CursorListItr.isPastEnd():::EXIT
    Variables: this this.current return orig(this) orig(this.current)
this.current == \old(this.current)
(this.current == 0)  <==>  (\result == true)
(this.current == 0)  ==>  (this.current is a pointer)
===========================================================================
DataStructures.CursorListItr.retrieve():::ENTER
    Variables: this this.current
===========================================================================
DataStructures.CursorListItr.retrieve():::EXIT
    Variables: this this.current return return.getClass().getName() orig(this) orig(this.current)
this.current == \old(this.current)
(\result != null)  ==>  (warning: method daikon.inv.unary.string.PrintableString.format(OutputFormat:JML) needs to be implemented: return.getClass().getName() is printable)
===========================================================================
DataStructures.CursorNode:::OBJECT
    Variables: this this.element this.element.getClass().getName() this.next
this.element == null
===========================================================================
DataStructures.CursorNode.CursorNode(java.lang.Object, int):::ENTER
    Variables: theElement theElement.getClass().getName() n
theElement == null
===========================================================================
DataStructures.CursorNode.CursorNode(java.lang.Object, int):::EXIT
    Variables: this this.element this.element.getClass().getName() this.next theElement theElement.getClass().getName() n orig(theElement) orig(theElement.getClass().getName()) orig(n)
this.element == \old(theElement)
this.next == \old(n)
