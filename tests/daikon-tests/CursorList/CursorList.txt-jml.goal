===========================================================================
DataStructures.CursorList:::CLASS
    Variables: DataStructures.CursorList.cursorSpace DataStructures.CursorList.cursorSpace.getClass().getName() DataStructures.CursorList.cursorSpace[] DataStructures.CursorList.cursorSpace[].getClass().getName() DataStructures.CursorList.cursorSpace[].element DataStructures.CursorList.cursorSpace[].element.getClass().getName() DataStructures.CursorList.cursorSpace[].next DataStructures.CursorList.SPACE_SIZE size(DataStructures.CursorList.cursorSpace[]) size(DataStructures.CursorList.cursorSpace[])-1
DataStructures.CursorList.cursorSpace != null
DataStructures.CursorList.cursorSpace != null
DataStructures.CursorList.cursorSpace.getClass().getName() == DataStructures.CursorNode[].class.getName()
("oneOf.java.jpp: SEQUENCE unimplemented" != null)
daikon.Quant.noDups(DataStructures.CursorList.cursorSpace)
daikon.Quant.eltsNotEqual(DataStructures.CursorList.cursorSpace, null)
daikon.Quant.pairwiseEqual(daikon.Quant.typeArray(DataStructures.CursorList.cursorSpace), new String[] { "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode", "DataStructures.CursorNode" })
daikon.Quant.eltsEqual(daikon.Quant.typeArray(DataStructures.CursorList.cursorSpace), "DataStructures.CursorNode")
daikon.Quant.eltsGTE(daikon.Quant.collectObject(DataStructures.CursorList.cursorSpace, "next"), 0)
daikon.Quant.size(DataStructures.CursorList.cursorSpace) == 100
===========================================================================
DataStructures.CursorList:::OBJECT
    Variables: this this.header DataStructures.CursorList.cursorSpace DataStructures.CursorList.cursorSpace.getClass().getName() DataStructures.CursorList.cursorSpace[] DataStructures.CursorList.cursorSpace[].getClass().getName() DataStructures.CursorList.cursorSpace[].element DataStructures.CursorList.cursorSpace[].element.getClass().getName() DataStructures.CursorList.cursorSpace[].next DataStructures.CursorList.SPACE_SIZE size(DataStructures.CursorList.cursorSpace[]) size(DataStructures.CursorList.cursorSpace[])-1 DataStructures.CursorList.cursorSpace[this.header] DataStructures.CursorList.cursorSpace[this.header-1] DataStructures.CursorList.cursorSpace[this.header..] DataStructures.CursorList.cursorSpace[this.header+1..] DataStructures.CursorList.cursorSpace[0..this.header] DataStructures.CursorList.cursorSpace[0..this.header-1]
this.header < daikon.Quant.size(DataStructures.CursorList.cursorSpace)-1
===========================================================================
DataStructures.CursorList.CursorList():::EXIT
    Variables: this this.header DataStructures.CursorList.cursorSpace DataStructures.CursorList.cursorSpace.getClass().getName() DataStructures.CursorList.cursorSpace[] DataStructures.CursorList.cursorSpace[].getClass().getName() DataStructures.CursorList.cursorSpace[].element DataStructures.CursorList.cursorSpace[].element.getClass().getName() DataStructures.CursorList.cursorSpace[].next DataStructures.CursorList.SPACE_SIZE size(DataStructures.CursorList.cursorSpace[]) size(DataStructures.CursorList.cursorSpace[])-1 DataStructures.CursorList.cursorSpace[this.header] DataStructures.CursorList.cursorSpace[this.header-1] DataStructures.CursorList.cursorSpace[this.header..] DataStructures.CursorList.cursorSpace[this.header+1..] DataStructures.CursorList.cursorSpace[0..this.header] DataStructures.CursorList.cursorSpace[0..this.header-1]
daikon.Quant.pairwiseEqual(daikon.Quant.typeArray(daikon.Quant.collectObject(DataStructures.CursorList.cursorSpace, "element")), new String[] { null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null }) || daikon.Quant.pairwiseEqual(daikon.Quant.typeArray(daikon.Quant.collectObject(DataStructures.CursorList.cursorSpace, "element")), new String[] { null, null, null, "DataStructures.MyInteger", null, "DataStructures.MyInteger", null, "DataStructures.MyInteger", null, "DataStructures.MyInteger", null, "DataStructures.MyInteger", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null })
===========================================================================
DataStructures.CursorList.alloc():::ENTER
    Variables: DataStructures.CursorList.cursorSpace DataStructures.CursorList.cursorSpace.getClass().getName() DataStructures.CursorList.cursorSpace[] DataStructures.CursorList.cursorSpace[].getClass().getName() DataStructures.CursorList.cursorSpace[].element DataStructures.CursorList.cursorSpace[].element.getClass().getName() DataStructures.CursorList.cursorSpace[].next DataStructures.CursorList.SPACE_SIZE size(DataStructures.CursorList.cursorSpace[]) size(DataStructures.CursorList.cursorSpace[])-1
===========================================================================
DataStructures.CursorList.alloc():::EXIT
    Variables: DataStructures.CursorList.cursorSpace DataStructures.CursorList.cursorSpace.getClass().getName() DataStructures.CursorList.cursorSpace[] DataStructures.CursorList.cursorSpace[].getClass().getName() DataStructures.CursorList.cursorSpace[].element DataStructures.CursorList.cursorSpace[].element.getClass().getName() DataStructures.CursorList.cursorSpace[].next DataStructures.CursorList.SPACE_SIZE return orig(DataStructures.CursorList.cursorSpace) orig(DataStructures.CursorList.cursorSpace.getClass().getName()) orig(DataStructures.CursorList.cursorSpace[]) orig(DataStructures.CursorList.cursorSpace[].getClass().getName()) orig(DataStructures.CursorList.cursorSpace[].element) orig(DataStructures.CursorList.cursorSpace[].element.getClass().getName()) orig(DataStructures.CursorList.cursorSpace[].next) size(DataStructures.CursorList.cursorSpace[]) size(DataStructures.CursorList.cursorSpace[])-1 orig(size(DataStructures.CursorList.cursorSpace[])) orig(size(DataStructures.CursorList.cursorSpace[]))-1 DataStructures.CursorList.cursorSpace[return] DataStructures.CursorList.cursorSpace[return-1] DataStructures.CursorList.cursorSpace[return..] DataStructures.CursorList.cursorSpace[return+1..] DataStructures.CursorList.cursorSpace[0..return] DataStructures.CursorList.cursorSpace[0..return-1] orig(DataStructures.CursorList.cursorSpace[post(return)]) orig(DataStructures.CursorList.cursorSpace[post(return)-1]) orig(DataStructures.CursorList.cursorSpace[post(return)..]) orig(DataStructures.CursorList.cursorSpace[post(return)+1..]) orig(DataStructures.CursorList.cursorSpace[0..post(return)]) orig(DataStructures.CursorList.cursorSpace[0..post(return)-1])
assignable DataStructures.CursorList.cursorSpace[].next
DataStructures.CursorList.cursorSpace == \old(DataStructures.CursorList.cursorSpace)
DataStructures.CursorList.cursorSpace.getClass().getName() == \old(DataStructures.CursorList.cursorSpace.getClass().getName())
daikon.Quant.pairwiseEqual(DataStructures.CursorList.cursorSpace, \old(DataStructures.CursorList.cursorSpace))
daikon.Quant.pairwiseEqual(daikon.Quant.collectObject(DataStructures.CursorList.cursorSpace, "element"), \old(daikon.Quant.collectObject(DataStructures.CursorList.cursorSpace, "element")))
daikon.Quant.subsetOf(daikon.Quant.collectObject(DataStructures.CursorList.cursorSpace, "next"), \old(daikon.Quant.collectObject(DataStructures.CursorList.cursorSpace, "next")))
\result < daikon.Quant.size(DataStructures.CursorList.cursorSpace)-1
===========================================================================
DataStructures.CursorList.find(java.lang.Object):::ENTER
    Variables: this this.header DataStructures.CursorList.cursorSpace DataStructures.CursorList.cursorSpace.getClass().getName() DataStructures.CursorList.cursorSpace[] DataStructures.CursorList.cursorSpace[].getClass().getName() DataStructures.CursorList.cursorSpace[].element DataStructures.CursorList.cursorSpace[].element.getClass().getName() DataStructures.CursorList.cursorSpace[].next DataStructures.CursorList.SPACE_SIZE x x.getClass().getName() size(DataStructures.CursorList.cursorSpace[]) size(DataStructures.CursorList.cursorSpace[])-1 DataStructures.CursorList.cursorSpace[this.header] DataStructures.CursorList.cursorSpace[this.header-1] DataStructures.CursorList.cursorSpace[this.header..] DataStructures.CursorList.cursorSpace[this.header+1..] DataStructures.CursorList.cursorSpace[0..this.header] DataStructures.CursorList.cursorSpace[0..this.header-1]
this.header == 1 || this.header == 4 || this.header == 20
x != null
warning: method daikon.inv.unary.string.PrintableString.format(OutputFormat:JML) needs to be implemented: x.getClass().getName() is printable
DataStructures.CursorList.cursorSpace.getClass().getName() != x.getClass().getName()
===========================================================================
DataStructures.CursorList.find(java.lang.Object):::EXIT
    Variables: this this.header DataStructures.CursorList.cursorSpace DataStructures.CursorList.cursorSpace.getClass().getName() DataStructures.CursorList.cursorSpace[] DataStructures.CursorList.cursorSpace[].getClass().getName() DataStructures.CursorList.cursorSpace[].element DataStructures.CursorList.cursorSpace[].element.getClass().getName() DataStructures.CursorList.cursorSpace[].next DataStructures.CursorList.SPACE_SIZE x x.getClass().getName() return return.current orig(this) orig(this.header) orig(DataStructures.CursorList.cursorSpace) orig(DataStructures.CursorList.cursorSpace.getClass().getName()) orig(DataStructures.CursorList.cursorSpace[]) orig(DataStructures.CursorList.cursorSpace[].getClass().getName()) orig(DataStructures.CursorList.cursorSpace[].element) orig(DataStructures.CursorList.cursorSpace[].element.getClass().getName()) orig(DataStructures.CursorList.cursorSpace[].next) orig(x) orig(x.getClass().getName()) size(DataStructures.CursorList.cursorSpace[]) size(DataStructures.CursorList.cursorSpace[])-1 orig(size(DataStructures.CursorList.cursorSpace[])) orig(size(DataStructures.CursorList.cursorSpace[]))-1 DataStructures.CursorList.cursorSpace[this.header] DataStructures.CursorList.cursorSpace[this.header-1] DataStructures.CursorList.cursorSpace[this.header..] DataStructures.CursorList.cursorSpace[this.header+1..] DataStructures.CursorList.cursorSpace[0..this.header] DataStructures.CursorList.cursorSpace[0..this.header-1] orig(DataStructures.CursorList.cursorSpace[post(this.header)]) orig(DataStructures.CursorList.cursorSpace[post(this.header)-1]) orig(DataStructures.CursorList.cursorSpace[post(this.header)..]) orig(DataStructures.CursorList.cursorSpace[post(this.header)+1..]) orig(DataStructures.CursorList.cursorSpace[0..post(this.header)]) orig(DataStructures.CursorList.cursorSpace[0..post(this.header)-1]) DataStructures.CursorList.cursorSpace[return.current] DataStructures.CursorList.cursorSpace[return.current-1] DataStructures.CursorList.cursorSpace[return.current..] DataStructures.CursorList.cursorSpace[return.current+1..] DataStructures.CursorList.cursorSpace[0..return.current] DataStructures.CursorList.cursorSpace[0..return.current-1] DataStructures.CursorList.cursorSpace[orig(this.header)] DataStructures.CursorList.cursorSpace[orig(this.header)-1] DataStructures.CursorList.cursorSpace[orig(this.header)..] DataStructures.CursorList.cursorSpace[orig(this.header)+1..] DataStructures.CursorList.cursorSpace[0..orig(this.header)] DataStructures.CursorList.cursorSpace[0..orig(this.header)-1] orig(DataStructures.CursorList.cursorSpace[post(return.current)]) orig(DataStructures.CursorList.cursorSpace[post(return.current)-1]) orig(DataStructures.CursorList.cursorSpace[post(return.current)..]) orig(DataStructures.CursorList.cursorSpace[post(return.current)+1..]) orig(DataStructures.CursorList.cursorSpace[0..post(return.current)]) orig(DataStructures.CursorList.cursorSpace[0..post(return.current)-1]) orig(DataStructures.CursorList.cursorSpace[this.header]) orig(DataStructures.CursorList.cursorSpace[this.header-1]) orig(DataStructures.CursorList.cursorSpace[this.header..]) orig(DataStructures.CursorList.cursorSpace[this.header+1..]) orig(DataStructures.CursorList.cursorSpace[0..this.header]) orig(DataStructures.CursorList.cursorSpace[0..this.header-1])
this.header == \old(this.header)
DataStructures.CursorList.cursorSpace == \old(DataStructures.CursorList.cursorSpace)
DataStructures.CursorList.cursorSpace.getClass().getName() == \old(DataStructures.CursorList.cursorSpace.getClass().getName())
daikon.Quant.pairwiseEqual(DataStructures.CursorList.cursorSpace, \old(DataStructures.CursorList.cursorSpace))
daikon.Quant.pairwiseEqual(daikon.Quant.collectObject(DataStructures.CursorList.cursorSpace, "element"), \old(daikon.Quant.collectObject(DataStructures.CursorList.cursorSpace, "element")))
daikon.Quant.pairwiseEqual(daikon.Quant.collectObject(DataStructures.CursorList.cursorSpace, "next"), \old(daikon.Quant.collectObject(DataStructures.CursorList.cursorSpace, "next")))
this.header == 1 || this.header == 4 || this.header == 20
\result != null
\result.current >= 0
this.header != \result.current
DataStructures.CursorList.cursorSpace.getClass().getName() != \old(x.getClass().getName())
\result.current < daikon.Quant.size(DataStructures.CursorList.cursorSpace)-1
===========================================================================
DataStructures.CursorList.findPrevious(java.lang.Object):::ENTER
    Variables: this this.header DataStructures.CursorList.cursorSpace DataStructures.CursorList.cursorSpace.getClass().getName() DataStructures.CursorList.cursorSpace[] DataStructures.CursorList.cursorSpace[].getClass().getName() DataStructures.CursorList.cursorSpace[].element DataStructures.CursorList.cursorSpace[].element.getClass().getName() DataStructures.CursorList.cursorSpace[].next DataStructures.CursorList.SPACE_SIZE x x.getClass().getName() size(DataStructures.CursorList.cursorSpace[]) size(DataStructures.CursorList.cursorSpace[])-1 DataStructures.CursorList.cursorSpace[this.header] DataStructures.CursorList.cursorSpace[this.header-1] DataStructures.CursorList.cursorSpace[this.header..] DataStructures.CursorList.cursorSpace[this.header+1..] DataStructures.CursorList.cursorSpace[0..this.header] DataStructures.CursorList.cursorSpace[0..this.header-1]
x != null
warning: method daikon.inv.unary.string.PrintableString.format(OutputFormat:JML) needs to be implemented: x.getClass().getName() is printable
DataStructures.CursorList.cursorSpace.getClass().getName() != x.getClass().getName()
===========================================================================
DataStructures.CursorList.findPrevious(java.lang.Object):::EXIT
    Variables: this this.header DataStructures.CursorList.cursorSpace DataStructures.CursorList.cursorSpace.getClass().getName() DataStructures.CursorList.cursorSpace[] DataStructures.CursorList.cursorSpace[].getClass().getName() DataStructures.CursorList.cursorSpace[].element DataStructures.CursorList.cursorSpace[].element.getClass().getName() DataStructures.CursorList.cursorSpace[].next DataStructures.CursorList.SPACE_SIZE x x.getClass().getName() return return.current orig(this) orig(this.header) orig(DataStructures.CursorList.cursorSpace) orig(DataStructures.CursorList.cursorSpace.getClass().getName()) orig(DataStructures.CursorList.cursorSpace[]) orig(DataStructures.CursorList.cursorSpace[].getClass().getName()) orig(DataStructures.CursorList.cursorSpace[].element) orig(DataStructures.CursorList.cursorSpace[].element.getClass().getName()) orig(DataStructures.CursorList.cursorSpace[].next) orig(x) orig(x.getClass().getName()) size(DataStructures.CursorList.cursorSpace[]) size(DataStructures.CursorList.cursorSpace[])-1 orig(size(DataStructures.CursorList.cursorSpace[])) orig(size(DataStructures.CursorList.cursorSpace[]))-1 DataStructures.CursorList.cursorSpace[this.header] DataStructures.CursorList.cursorSpace[this.header-1] DataStructures.CursorList.cursorSpace[this.header..] DataStructures.CursorList.cursorSpace[this.header+1..] DataStructures.CursorList.cursorSpace[0..this.header] DataStructures.CursorList.cursorSpace[0..this.header-1] orig(DataStructures.CursorList.cursorSpace[post(this.header)]) orig(DataStructures.CursorList.cursorSpace[post(this.header)-1]) orig(DataStructures.CursorList.cursorSpace[post(this.header)..]) orig(DataStructures.CursorList.cursorSpace[post(this.header)+1..]) orig(DataStructures.CursorList.cursorSpace[0..post(this.header)]) orig(DataStructures.CursorList.cursorSpace[0..post(this.header)-1]) DataStructures.CursorList.cursorSpace[return.current] DataStructures.CursorList.cursorSpace[return.current-1] DataStructures.CursorList.cursorSpace[return.current..] DataStructures.CursorList.cursorSpace[return.current+1..] DataStructures.CursorList.cursorSpace[0..return.current] DataStructures.CursorList.cursorSpace[0..return.current-1] DataStructures.CursorList.cursorSpace[orig(this.header)] DataStructures.CursorList.cursorSpace[orig(this.header)-1] DataStructures.CursorList.cursorSpace[orig(this.header)..] DataStructures.CursorList.cursorSpace[orig(this.header)+1..] DataStructures.CursorList.cursorSpace[0..orig(this.header)] DataStructures.CursorList.cursorSpace[0..orig(this.header)-1] orig(DataStructures.CursorList.cursorSpace[post(return.current)]) orig(DataStructures.CursorList.cursorSpace[post(return.current)-1]) orig(DataStructures.CursorList.cursorSpace[post(return.current)..]) orig(DataStructures.CursorList.cursorSpace[post(return.current)+1..]) orig(DataStructures.CursorList.cursorSpace[0..post(return.current)]) orig(DataStructures.CursorList.cursorSpace[0..post(return.current)-1]) orig(DataStructures.CursorList.cursorSpace[this.header]) orig(DataStructures.CursorList.cursorSpace[this.header-1]) orig(DataStructures.CursorList.cursorSpace[this.header..]) orig(DataStructures.CursorList.cursorSpace[this.header+1..]) orig(DataStructures.CursorList.cursorSpace[0..this.header]) orig(DataStructures.CursorList.cursorSpace[0..this.header-1])
this.header == \old(this.header)
DataStructures.CursorList.cursorSpace == \old(DataStructures.CursorList.cursorSpace)
DataStructures.CursorList.cursorSpace.getClass().getName() == \old(DataStructures.CursorList.cursorSpace.getClass().getName())
daikon.Quant.pairwiseEqual(DataStructures.CursorList.cursorSpace, \old(DataStructures.CursorList.cursorSpace))
daikon.Quant.pairwiseEqual(daikon.Quant.collectObject(DataStructures.CursorList.cursorSpace, "element"), \old(daikon.Quant.collectObject(DataStructures.CursorList.cursorSpace, "element")))
daikon.Quant.pairwiseEqual(daikon.Quant.collectObject(DataStructures.CursorList.cursorSpace, "next"), \old(daikon.Quant.collectObject(DataStructures.CursorList.cursorSpace, "next")))
\result != null
DataStructures.CursorList.cursorSpace.getClass().getName() != \old(x.getClass().getName())
\result.current < daikon.Quant.size(DataStructures.CursorList.cursorSpace)-1
===========================================================================
DataStructures.CursorList.first():::ENTER
    Variables: this this.header DataStructures.CursorList.cursorSpace DataStructures.CursorList.cursorSpace.getClass().getName() DataStructures.CursorList.cursorSpace[] DataStructures.CursorList.cursorSpace[].getClass().getName() DataStructures.CursorList.cursorSpace[].element DataStructures.CursorList.cursorSpace[].element.getClass().getName() DataStructures.CursorList.cursorSpace[].next DataStructures.CursorList.SPACE_SIZE size(DataStructures.CursorList.cursorSpace[]) size(DataStructures.CursorList.cursorSpace[])-1 DataStructures.CursorList.cursorSpace[this.header] DataStructures.CursorList.cursorSpace[this.header-1] DataStructures.CursorList.cursorSpace[this.header..] DataStructures.CursorList.cursorSpace[this.header+1..] DataStructures.CursorList.cursorSpace[0..this.header] DataStructures.CursorList.cursorSpace[0..this.header-1]
===========================================================================
DataStructures.CursorList.first():::EXIT
    Variables: this this.header DataStructures.CursorList.cursorSpace DataStructures.CursorList.cursorSpace.getClass().getName() DataStructures.CursorList.cursorSpace[] DataStructures.CursorList.cursorSpace[].getClass().getName() DataStructures.CursorList.cursorSpace[].element DataStructures.CursorList.cursorSpace[].element.getClass().getName() DataStructures.CursorList.cursorSpace[].next DataStructures.CursorList.SPACE_SIZE return return.current orig(this) orig(this.header) orig(DataStructures.CursorList.cursorSpace) orig(DataStructures.CursorList.cursorSpace.getClass().getName()) orig(DataStructures.CursorList.cursorSpace[]) orig(DataStructures.CursorList.cursorSpace[].getClass().getName()) orig(DataStructures.CursorList.cursorSpace[].element) orig(DataStructures.CursorList.cursorSpace[].element.getClass().getName()) orig(DataStructures.CursorList.cursorSpace[].next) size(DataStructures.CursorList.cursorSpace[]) size(DataStructures.CursorList.cursorSpace[])-1 orig(size(DataStructures.CursorList.cursorSpace[])) orig(size(DataStructures.CursorList.cursorSpace[]))-1 DataStructures.CursorList.cursorSpace[this.header] DataStructures.CursorList.cursorSpace[this.header-1] DataStructures.CursorList.cursorSpace[this.header..] DataStructures.CursorList.cursorSpace[this.header+1..] DataStructures.CursorList.cursorSpace[0..this.header] DataStructures.CursorList.cursorSpace[0..this.header-1] orig(DataStructures.CursorList.cursorSpace[post(this.header)]) orig(DataStructures.CursorList.cursorSpace[post(this.header)-1]) orig(DataStructures.CursorList.cursorSpace[post(this.header)..]) orig(DataStructures.CursorList.cursorSpace[post(this.header)+1..]) orig(DataStructures.CursorList.cursorSpace[0..post(this.header)]) orig(DataStructures.CursorList.cursorSpace[0..post(this.header)-1]) DataStructures.CursorList.cursorSpace[return.current] DataStructures.CursorList.cursorSpace[return.current-1] DataStructures.CursorList.cursorSpace[return.current..] DataStructures.CursorList.cursorSpace[return.current+1..] DataStructures.CursorList.cursorSpace[0..return.current] DataStructures.CursorList.cursorSpace[0..return.current-1] DataStructures.CursorList.cursorSpace[orig(this.header)] DataStructures.CursorList.cursorSpace[orig(this.header)-1] DataStructures.CursorList.cursorSpace[orig(this.header)..] DataStructures.CursorList.cursorSpace[orig(this.header)+1..] DataStructures.CursorList.cursorSpace[0..orig(this.header)] DataStructures.CursorList.cursorSpace[0..orig(this.header)-1] orig(DataStructures.CursorList.cursorSpace[post(return.current)]) orig(DataStructures.CursorList.cursorSpace[post(return.current)-1]) orig(DataStructures.CursorList.cursorSpace[post(return.current)..]) orig(DataStructures.CursorList.cursorSpace[post(return.current)+1..]) orig(DataStructures.CursorList.cursorSpace[0..post(return.current)]) orig(DataStructures.CursorList.cursorSpace[0..post(return.current)-1]) orig(DataStructures.CursorList.cursorSpace[this.header]) orig(DataStructures.CursorList.cursorSpace[this.header-1]) orig(DataStructures.CursorList.cursorSpace[this.header..]) orig(DataStructures.CursorList.cursorSpace[this.header+1..]) orig(DataStructures.CursorList.cursorSpace[0..this.header]) orig(DataStructures.CursorList.cursorSpace[0..this.header-1])
this.header == \old(this.header)
DataStructures.CursorList.cursorSpace == \old(DataStructures.CursorList.cursorSpace)
DataStructures.CursorList.cursorSpace.getClass().getName() == \old(DataStructures.CursorList.cursorSpace.getClass().getName())
daikon.Quant.pairwiseEqual(DataStructures.CursorList.cursorSpace, \old(DataStructures.CursorList.cursorSpace))
daikon.Quant.pairwiseEqual(daikon.Quant.collectObject(DataStructures.CursorList.cursorSpace, "element"), \old(daikon.Quant.collectObject(DataStructures.CursorList.cursorSpace, "element")))
daikon.Quant.pairwiseEqual(daikon.Quant.collectObject(DataStructures.CursorList.cursorSpace, "next"), \old(daikon.Quant.collectObject(DataStructures.CursorList.cursorSpace, "next")))
\result != null
this.header != \result.current
\result.current < daikon.Quant.size(DataStructures.CursorList.cursorSpace)-1
===========================================================================
DataStructures.CursorList.free(int):::ENTER
    Variables: DataStructures.CursorList.cursorSpace DataStructures.CursorList.cursorSpace.getClass().getName() DataStructures.CursorList.cursorSpace[] DataStructures.CursorList.cursorSpace[].getClass().getName() DataStructures.CursorList.cursorSpace[].element DataStructures.CursorList.cursorSpace[].element.getClass().getName() DataStructures.CursorList.cursorSpace[].next DataStructures.CursorList.SPACE_SIZE p size(DataStructures.CursorList.cursorSpace[]) size(DataStructures.CursorList.cursorSpace[])-1 DataStructures.CursorList.cursorSpace[p] DataStructures.CursorList.cursorSpace[p-1] DataStructures.CursorList.cursorSpace[p..] DataStructures.CursorList.cursorSpace[p+1..] DataStructures.CursorList.cursorSpace[0..p] DataStructures.CursorList.cursorSpace[0..p-1]
p < daikon.Quant.size(DataStructures.CursorList.cursorSpace)-1
===========================================================================
DataStructures.CursorList.free(int):::EXIT
    Variables: DataStructures.CursorList.cursorSpace DataStructures.CursorList.cursorSpace.getClass().getName() DataStructures.CursorList.cursorSpace[] DataStructures.CursorList.cursorSpace[].getClass().getName() DataStructures.CursorList.cursorSpace[].element DataStructures.CursorList.cursorSpace[].element.getClass().getName() DataStructures.CursorList.cursorSpace[].next DataStructures.CursorList.SPACE_SIZE p orig(DataStructures.CursorList.cursorSpace) orig(DataStructures.CursorList.cursorSpace.getClass().getName()) orig(DataStructures.CursorList.cursorSpace[]) orig(DataStructures.CursorList.cursorSpace[].getClass().getName()) orig(DataStructures.CursorList.cursorSpace[].element) orig(DataStructures.CursorList.cursorSpace[].element.getClass().getName()) orig(DataStructures.CursorList.cursorSpace[].next) orig(p) size(DataStructures.CursorList.cursorSpace[]) size(DataStructures.CursorList.cursorSpace[])-1 orig(size(DataStructures.CursorList.cursorSpace[])) orig(size(DataStructures.CursorList.cursorSpace[]))-1 DataStructures.CursorList.cursorSpace[p] DataStructures.CursorList.cursorSpace[p-1] DataStructures.CursorList.cursorSpace[p..] DataStructures.CursorList.cursorSpace[p+1..] DataStructures.CursorList.cursorSpace[0..p] DataStructures.CursorList.cursorSpace[0..p-1] DataStructures.CursorList.cursorSpace[orig(p)] DataStructures.CursorList.cursorSpace[orig(p)-1] DataStructures.CursorList.cursorSpace[orig(p)..] DataStructures.CursorList.cursorSpace[orig(p)+1..] DataStructures.CursorList.cursorSpace[0..orig(p)] DataStructures.CursorList.cursorSpace[0..orig(p)-1] orig(DataStructures.CursorList.cursorSpace[post(p)]) orig(DataStructures.CursorList.cursorSpace[post(p)-1]) orig(DataStructures.CursorList.cursorSpace[post(p)..]) orig(DataStructures.CursorList.cursorSpace[post(p)+1..]) orig(DataStructures.CursorList.cursorSpace[0..post(p)]) orig(DataStructures.CursorList.cursorSpace[0..post(p)-1]) orig(DataStructures.CursorList.cursorSpace[p]) orig(DataStructures.CursorList.cursorSpace[p-1]) orig(DataStructures.CursorList.cursorSpace[p..]) orig(DataStructures.CursorList.cursorSpace[p+1..]) orig(DataStructures.CursorList.cursorSpace[0..p]) orig(DataStructures.CursorList.cursorSpace[0..p-1])
assignable DataStructures.CursorList.cursorSpace[].element, DataStructures.CursorList.cursorSpace[].next
DataStructures.CursorList.cursorSpace == \old(DataStructures.CursorList.cursorSpace)
DataStructures.CursorList.cursorSpace.getClass().getName() == \old(DataStructures.CursorList.cursorSpace.getClass().getName())
daikon.Quant.pairwiseEqual(DataStructures.CursorList.cursorSpace, \old(DataStructures.CursorList.cursorSpace))
daikon.Quant.subsetOf(daikon.Quant.collectObject(DataStructures.CursorList.cursorSpace, "element"), \old(daikon.Quant.collectObject(DataStructures.CursorList.cursorSpace, "element")))
daikon.Quant.subsetOf(\old(daikon.Quant.collectObject(DataStructures.CursorList.cursorSpace, "next")), daikon.Quant.collectObject(DataStructures.CursorList.cursorSpace, "next"))
\old(p) < daikon.Quant.size(DataStructures.CursorList.cursorSpace)-1
===========================================================================
DataStructures.CursorList.insert(java.lang.Object, DataStructures.CursorListItr):::ENTER
    Variables: this this.header DataStructures.CursorList.cursorSpace DataStructures.CursorList.cursorSpace.getClass().getName() DataStructures.CursorList.cursorSpace[] DataStructures.CursorList.cursorSpace[].getClass().getName() DataStructures.CursorList.cursorSpace[].element DataStructures.CursorList.cursorSpace[].element.getClass().getName() DataStructures.CursorList.cursorSpace[].next DataStructures.CursorList.SPACE_SIZE x x.getClass().getName() p p.current size(DataStructures.CursorList.cursorSpace[]) size(DataStructures.CursorList.cursorSpace[])-1 DataStructures.CursorList.cursorSpace[this.header] DataStructures.CursorList.cursorSpace[this.header-1] DataStructures.CursorList.cursorSpace[this.header..] DataStructures.CursorList.cursorSpace[this.header+1..] DataStructures.CursorList.cursorSpace[0..this.header] DataStructures.CursorList.cursorSpace[0..this.header-1] DataStructures.CursorList.cursorSpace[p.current] DataStructures.CursorList.cursorSpace[p.current-1] DataStructures.CursorList.cursorSpace[p.current..] DataStructures.CursorList.cursorSpace[p.current+1..] DataStructures.CursorList.cursorSpace[0..p.current] DataStructures.CursorList.cursorSpace[0..p.current-1]
this.header == 1 || this.header == 4 || this.header == 20
x != null
warning: method daikon.inv.unary.string.PrintableString.format(OutputFormat:JML) needs to be implemented: x.getClass().getName() is printable
p != null
DataStructures.CursorList.cursorSpace.getClass().getName() != x.getClass().getName()
p.current < daikon.Quant.size(DataStructures.CursorList.cursorSpace)-1
===========================================================================
DataStructures.CursorList.insert(java.lang.Object, DataStructures.CursorListItr):::EXIT
    Variables: this this.header DataStructures.CursorList.cursorSpace DataStructures.CursorList.cursorSpace.getClass().getName() DataStructures.CursorList.cursorSpace[] DataStructures.CursorList.cursorSpace[].getClass().getName() DataStructures.CursorList.cursorSpace[].element DataStructures.CursorList.cursorSpace[].element.getClass().getName() DataStructures.CursorList.cursorSpace[].next DataStructures.CursorList.SPACE_SIZE x x.getClass().getName() p p.current orig(this) orig(this.header) orig(DataStructures.CursorList.cursorSpace) orig(DataStructures.CursorList.cursorSpace.getClass().getName()) orig(DataStructures.CursorList.cursorSpace[]) orig(DataStructures.CursorList.cursorSpace[].getClass().getName()) orig(DataStructures.CursorList.cursorSpace[].element) orig(DataStructures.CursorList.cursorSpace[].element.getClass().getName()) orig(DataStructures.CursorList.cursorSpace[].next) orig(x) orig(x.getClass().getName()) orig(p) orig(p.current) size(DataStructures.CursorList.cursorSpace[]) size(DataStructures.CursorList.cursorSpace[])-1 orig(size(DataStructures.CursorList.cursorSpace[])) orig(size(DataStructures.CursorList.cursorSpace[]))-1 DataStructures.CursorList.cursorSpace[this.header] DataStructures.CursorList.cursorSpace[this.header-1] DataStructures.CursorList.cursorSpace[this.header..] DataStructures.CursorList.cursorSpace[this.header+1..] DataStructures.CursorList.cursorSpace[0..this.header] DataStructures.CursorList.cursorSpace[0..this.header-1] orig(DataStructures.CursorList.cursorSpace[post(this.header)]) orig(DataStructures.CursorList.cursorSpace[post(this.header)-1]) orig(DataStructures.CursorList.cursorSpace[post(this.header)..]) orig(DataStructures.CursorList.cursorSpace[post(this.header)+1..]) orig(DataStructures.CursorList.cursorSpace[0..post(this.header)]) orig(DataStructures.CursorList.cursorSpace[0..post(this.header)-1]) DataStructures.CursorList.cursorSpace[p.current] DataStructures.CursorList.cursorSpace[p.current-1] DataStructures.CursorList.cursorSpace[p.current..] DataStructures.CursorList.cursorSpace[p.current+1..] DataStructures.CursorList.cursorSpace[0..p.current] DataStructures.CursorList.cursorSpace[0..p.current-1] DataStructures.CursorList.cursorSpace[orig(this.header)] DataStructures.CursorList.cursorSpace[orig(this.header)-1] DataStructures.CursorList.cursorSpace[orig(this.header)..] DataStructures.CursorList.cursorSpace[orig(this.header)+1..] DataStructures.CursorList.cursorSpace[0..orig(this.header)] DataStructures.CursorList.cursorSpace[0..orig(this.header)-1] DataStructures.CursorList.cursorSpace[orig(p.current)] DataStructures.CursorList.cursorSpace[orig(p.current)-1] DataStructures.CursorList.cursorSpace[orig(p.current)..] DataStructures.CursorList.cursorSpace[orig(p.current)+1..] DataStructures.CursorList.cursorSpace[0..orig(p.current)] DataStructures.CursorList.cursorSpace[0..orig(p.current)-1] orig(DataStructures.CursorList.cursorSpace[post(p.current)]) orig(DataStructures.CursorList.cursorSpace[post(p.current)-1]) orig(DataStructures.CursorList.cursorSpace[post(p.current)..]) orig(DataStructures.CursorList.cursorSpace[post(p.current)+1..]) orig(DataStructures.CursorList.cursorSpace[0..post(p.current)]) orig(DataStructures.CursorList.cursorSpace[0..post(p.current)-1]) orig(DataStructures.CursorList.cursorSpace[this.header]) orig(DataStructures.CursorList.cursorSpace[this.header-1]) orig(DataStructures.CursorList.cursorSpace[this.header..]) orig(DataStructures.CursorList.cursorSpace[this.header+1..]) orig(DataStructures.CursorList.cursorSpace[0..this.header]) orig(DataStructures.CursorList.cursorSpace[0..this.header-1]) orig(DataStructures.CursorList.cursorSpace[p.current]) orig(DataStructures.CursorList.cursorSpace[p.current-1]) orig(DataStructures.CursorList.cursorSpace[p.current..]) orig(DataStructures.CursorList.cursorSpace[p.current+1..]) orig(DataStructures.CursorList.cursorSpace[0..p.current]) orig(DataStructures.CursorList.cursorSpace[0..p.current-1])
assignable DataStructures.CursorList.cursorSpace[].element, DataStructures.CursorList.cursorSpace[].next
this.header == \old(this.header)
DataStructures.CursorList.cursorSpace == \old(DataStructures.CursorList.cursorSpace)
DataStructures.CursorList.cursorSpace.getClass().getName() == \old(DataStructures.CursorList.cursorSpace.getClass().getName())
daikon.Quant.pairwiseEqual(DataStructures.CursorList.cursorSpace, \old(DataStructures.CursorList.cursorSpace))
p.current == \old(p.current)
this.header == 1 || this.header == 4 || this.header == 20
DataStructures.CursorList.cursorSpace.getClass().getName() != \old(x.getClass().getName())
daikon.Quant.subsetOf(\old(daikon.Quant.collectObject(DataStructures.CursorList.cursorSpace, "element")), daikon.Quant.collectObject(DataStructures.CursorList.cursorSpace, "element"))
daikon.Quant.memberOf(\old(x.getClass().getName()) , daikon.Quant.typeArray(daikon.Quant.collectObject(DataStructures.CursorList.cursorSpace, "element")) )
daikon.Quant.subsetOf(daikon.Quant.collectObject(DataStructures.CursorList.cursorSpace, "next"), \old(daikon.Quant.collectObject(DataStructures.CursorList.cursorSpace, "next")))
daikon.Quant.subsetOf(\old(daikon.Quant.collectObject(DataStructures.CursorList.cursorSpace, "next")), daikon.Quant.collectObject(DataStructures.CursorList.cursorSpace, "next"))
p.current < daikon.Quant.size(DataStructures.CursorList.cursorSpace)-1
===========================================================================
DataStructures.CursorList.isEmpty():::ENTER
    Variables: this this.header DataStructures.CursorList.cursorSpace DataStructures.CursorList.cursorSpace.getClass().getName() DataStructures.CursorList.cursorSpace[] DataStructures.CursorList.cursorSpace[].getClass().getName() DataStructures.CursorList.cursorSpace[].element DataStructures.CursorList.cursorSpace[].element.getClass().getName() DataStructures.CursorList.cursorSpace[].next DataStructures.CursorList.SPACE_SIZE size(DataStructures.CursorList.cursorSpace[]) size(DataStructures.CursorList.cursorSpace[])-1 DataStructures.CursorList.cursorSpace[this.header] DataStructures.CursorList.cursorSpace[this.header-1] DataStructures.CursorList.cursorSpace[this.header..] DataStructures.CursorList.cursorSpace[this.header+1..] DataStructures.CursorList.cursorSpace[0..this.header] DataStructures.CursorList.cursorSpace[0..this.header-1]
===========================================================================
DataStructures.CursorList.isEmpty():::EXIT
    Variables: this this.header DataStructures.CursorList.cursorSpace DataStructures.CursorList.cursorSpace.getClass().getName() DataStructures.CursorList.cursorSpace[] DataStructures.CursorList.cursorSpace[].getClass().getName() DataStructures.CursorList.cursorSpace[].element DataStructures.CursorList.cursorSpace[].element.getClass().getName() DataStructures.CursorList.cursorSpace[].next DataStructures.CursorList.SPACE_SIZE return orig(this) orig(this.header) orig(DataStructures.CursorList.cursorSpace) orig(DataStructures.CursorList.cursorSpace.getClass().getName()) orig(DataStructures.CursorList.cursorSpace[]) orig(DataStructures.CursorList.cursorSpace[].getClass().getName()) orig(DataStructures.CursorList.cursorSpace[].element) orig(DataStructures.CursorList.cursorSpace[].element.getClass().getName()) orig(DataStructures.CursorList.cursorSpace[].next) size(DataStructures.CursorList.cursorSpace[]) size(DataStructures.CursorList.cursorSpace[])-1 orig(size(DataStructures.CursorList.cursorSpace[])) orig(size(DataStructures.CursorList.cursorSpace[]))-1 DataStructures.CursorList.cursorSpace[this.header] DataStructures.CursorList.cursorSpace[this.header-1] DataStructures.CursorList.cursorSpace[this.header..] DataStructures.CursorList.cursorSpace[this.header+1..] DataStructures.CursorList.cursorSpace[0..this.header] DataStructures.CursorList.cursorSpace[0..this.header-1] orig(DataStructures.CursorList.cursorSpace[post(this.header)]) orig(DataStructures.CursorList.cursorSpace[post(this.header)-1]) orig(DataStructures.CursorList.cursorSpace[post(this.header)..]) orig(DataStructures.CursorList.cursorSpace[post(this.header)+1..]) orig(DataStructures.CursorList.cursorSpace[0..post(this.header)]) orig(DataStructures.CursorList.cursorSpace[0..post(this.header)-1]) DataStructures.CursorList.cursorSpace[orig(this.header)] DataStructures.CursorList.cursorSpace[orig(this.header)-1] DataStructures.CursorList.cursorSpace[orig(this.header)..] DataStructures.CursorList.cursorSpace[orig(this.header)+1..] DataStructures.CursorList.cursorSpace[0..orig(this.header)] DataStructures.CursorList.cursorSpace[0..orig(this.header)-1] orig(DataStructures.CursorList.cursorSpace[this.header]) orig(DataStructures.CursorList.cursorSpace[this.header-1]) orig(DataStructures.CursorList.cursorSpace[this.header..]) orig(DataStructures.CursorList.cursorSpace[this.header+1..]) orig(DataStructures.CursorList.cursorSpace[0..this.header]) orig(DataStructures.CursorList.cursorSpace[0..this.header-1])
this.header == \old(this.header)
DataStructures.CursorList.cursorSpace == \old(DataStructures.CursorList.cursorSpace)
DataStructures.CursorList.cursorSpace.getClass().getName() == \old(DataStructures.CursorList.cursorSpace.getClass().getName())
daikon.Quant.pairwiseEqual(DataStructures.CursorList.cursorSpace, \old(DataStructures.CursorList.cursorSpace))
daikon.Quant.pairwiseEqual(daikon.Quant.collectObject(DataStructures.CursorList.cursorSpace, "element"), \old(daikon.Quant.collectObject(DataStructures.CursorList.cursorSpace, "element")))
daikon.Quant.pairwiseEqual(daikon.Quant.collectObject(DataStructures.CursorList.cursorSpace, "next"), \old(daikon.Quant.collectObject(DataStructures.CursorList.cursorSpace, "next")))
(\result == false)  ==>  (this.header == 1 || this.header == 4 || this.header == 20)
(\result == false)  ==>  (warning: method daikon.inv.unary.sequence.CommonSequence.format(OutputFormat:JML) needs to be implemented: {2, 3, 12, 5, 0, 7, 9, 11, 13, 14, 15, 16, 17, 18, 19, 22, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99} subset of DataStructures.CursorList.cursorSpace[].next)
(\result == true)  ==>  (daikon.Quant.pairwiseEqual(daikon.Quant.typeArray(daikon.Quant.collectObject(DataStructures.CursorList.cursorSpace, "element")), new String[] { null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null }) || daikon.Quant.pairwiseEqual(daikon.Quant.typeArray(daikon.Quant.collectObject(DataStructures.CursorList.cursorSpace, "element")), new String[] { null, null, null, "DataStructures.MyInteger", null, "DataStructures.MyInteger", null, "DataStructures.MyInteger", null, "DataStructures.MyInteger", null, "DataStructures.MyInteger", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null }))
===========================================================================
DataStructures.CursorList.makeEmpty():::ENTER
    Variables: this this.header DataStructures.CursorList.cursorSpace DataStructures.CursorList.cursorSpace.getClass().getName() DataStructures.CursorList.cursorSpace[] DataStructures.CursorList.cursorSpace[].getClass().getName() DataStructures.CursorList.cursorSpace[].element DataStructures.CursorList.cursorSpace[].element.getClass().getName() DataStructures.CursorList.cursorSpace[].next DataStructures.CursorList.SPACE_SIZE size(DataStructures.CursorList.cursorSpace[]) size(DataStructures.CursorList.cursorSpace[])-1 DataStructures.CursorList.cursorSpace[this.header] DataStructures.CursorList.cursorSpace[this.header-1] DataStructures.CursorList.cursorSpace[this.header..] DataStructures.CursorList.cursorSpace[this.header+1..] DataStructures.CursorList.cursorSpace[0..this.header] DataStructures.CursorList.cursorSpace[0..this.header-1]
this.header == 4 || this.header == 20
===========================================================================
DataStructures.CursorList.makeEmpty():::EXIT
    Variables: this this.header DataStructures.CursorList.cursorSpace DataStructures.CursorList.cursorSpace.getClass().getName() DataStructures.CursorList.cursorSpace[] DataStructures.CursorList.cursorSpace[].getClass().getName() DataStructures.CursorList.cursorSpace[].element DataStructures.CursorList.cursorSpace[].element.getClass().getName() DataStructures.CursorList.cursorSpace[].next DataStructures.CursorList.SPACE_SIZE orig(this) orig(this.header) orig(DataStructures.CursorList.cursorSpace) orig(DataStructures.CursorList.cursorSpace.getClass().getName()) orig(DataStructures.CursorList.cursorSpace[]) orig(DataStructures.CursorList.cursorSpace[].getClass().getName()) orig(DataStructures.CursorList.cursorSpace[].element) orig(DataStructures.CursorList.cursorSpace[].element.getClass().getName()) orig(DataStructures.CursorList.cursorSpace[].next) size(DataStructures.CursorList.cursorSpace[]) size(DataStructures.CursorList.cursorSpace[])-1 orig(size(DataStructures.CursorList.cursorSpace[])) orig(size(DataStructures.CursorList.cursorSpace[]))-1 DataStructures.CursorList.cursorSpace[this.header] DataStructures.CursorList.cursorSpace[this.header-1] DataStructures.CursorList.cursorSpace[this.header..] DataStructures.CursorList.cursorSpace[this.header+1..] DataStructures.CursorList.cursorSpace[0..this.header] DataStructures.CursorList.cursorSpace[0..this.header-1] orig(DataStructures.CursorList.cursorSpace[post(this.header)]) orig(DataStructures.CursorList.cursorSpace[post(this.header)-1]) orig(DataStructures.CursorList.cursorSpace[post(this.header)..]) orig(DataStructures.CursorList.cursorSpace[post(this.header)+1..]) orig(DataStructures.CursorList.cursorSpace[0..post(this.header)]) orig(DataStructures.CursorList.cursorSpace[0..post(this.header)-1]) DataStructures.CursorList.cursorSpace[orig(this.header)] DataStructures.CursorList.cursorSpace[orig(this.header)-1] DataStructures.CursorList.cursorSpace[orig(this.header)..] DataStructures.CursorList.cursorSpace[orig(this.header)+1..] DataStructures.CursorList.cursorSpace[0..orig(this.header)] DataStructures.CursorList.cursorSpace[0..orig(this.header)-1] orig(DataStructures.CursorList.cursorSpace[this.header]) orig(DataStructures.CursorList.cursorSpace[this.header-1]) orig(DataStructures.CursorList.cursorSpace[this.header..]) orig(DataStructures.CursorList.cursorSpace[this.header+1..]) orig(DataStructures.CursorList.cursorSpace[0..this.header]) orig(DataStructures.CursorList.cursorSpace[0..this.header-1])
assignable DataStructures.CursorList.cursorSpace[].element, DataStructures.CursorList.cursorSpace[].next
this.header == \old(this.header)
DataStructures.CursorList.cursorSpace == \old(DataStructures.CursorList.cursorSpace)
DataStructures.CursorList.cursorSpace.getClass().getName() == \old(DataStructures.CursorList.cursorSpace.getClass().getName())
daikon.Quant.pairwiseEqual(DataStructures.CursorList.cursorSpace, \old(DataStructures.CursorList.cursorSpace))
this.header == 4 || this.header == 20
("oneOf.java.jpp: SEQUENCE unimplemented" != null)
daikon.Quant.pairwiseEqual(daikon.Quant.typeArray(daikon.Quant.collectObject(DataStructures.CursorList.cursorSpace, "element")), new String[] { null, null, null, "DataStructures.MyInteger", null, "DataStructures.MyInteger", null, "DataStructures.MyInteger", null, "DataStructures.MyInteger", null, "DataStructures.MyInteger", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null })
("oneOf.java.jpp: SEQUENCE unimplemented" != null)
daikon.Quant.subsetOf(daikon.Quant.collectObject(DataStructures.CursorList.cursorSpace, "element"), \old(daikon.Quant.collectObject(DataStructures.CursorList.cursorSpace, "element")))
daikon.Quant.subsetOf(daikon.Quant.collectObject(DataStructures.CursorList.cursorSpace, "next"), \old(daikon.Quant.collectObject(DataStructures.CursorList.cursorSpace, "next")))
daikon.Quant.subsetOf(\old(daikon.Quant.collectObject(DataStructures.CursorList.cursorSpace, "next")), daikon.Quant.collectObject(DataStructures.CursorList.cursorSpace, "next"))
===========================================================================
DataStructures.CursorList.printList(DataStructures.CursorList):::ENTER
    Variables: DataStructures.CursorList.cursorSpace DataStructures.CursorList.cursorSpace.getClass().getName() DataStructures.CursorList.cursorSpace[] DataStructures.CursorList.cursorSpace[].getClass().getName() DataStructures.CursorList.cursorSpace[].element DataStructures.CursorList.cursorSpace[].element.getClass().getName() DataStructures.CursorList.cursorSpace[].next DataStructures.CursorList.SPACE_SIZE theList theList.header size(DataStructures.CursorList.cursorSpace[]) size(DataStructures.CursorList.cursorSpace[])-1 DataStructures.CursorList.cursorSpace[theList.header] DataStructures.CursorList.cursorSpace[theList.header-1] DataStructures.CursorList.cursorSpace[theList.header..] DataStructures.CursorList.cursorSpace[theList.header+1..] DataStructures.CursorList.cursorSpace[0..theList.header] DataStructures.CursorList.cursorSpace[0..theList.header-1]
theList != null
theList.header < daikon.Quant.size(DataStructures.CursorList.cursorSpace)-1
===========================================================================
DataStructures.CursorList.printList(DataStructures.CursorList):::EXIT
    Variables: DataStructures.CursorList.cursorSpace DataStructures.CursorList.cursorSpace.getClass().getName() DataStructures.CursorList.cursorSpace[] DataStructures.CursorList.cursorSpace[].getClass().getName() DataStructures.CursorList.cursorSpace[].element DataStructures.CursorList.cursorSpace[].element.getClass().getName() DataStructures.CursorList.cursorSpace[].next DataStructures.CursorList.SPACE_SIZE theList theList.header orig(DataStructures.CursorList.cursorSpace) orig(DataStructures.CursorList.cursorSpace.getClass().getName()) orig(DataStructures.CursorList.cursorSpace[]) orig(DataStructures.CursorList.cursorSpace[].getClass().getName()) orig(DataStructures.CursorList.cursorSpace[].element) orig(DataStructures.CursorList.cursorSpace[].element.getClass().getName()) orig(DataStructures.CursorList.cursorSpace[].next) orig(theList) orig(theList.header) size(DataStructures.CursorList.cursorSpace[]) size(DataStructures.CursorList.cursorSpace[])-1 orig(size(DataStructures.CursorList.cursorSpace[])) orig(size(DataStructures.CursorList.cursorSpace[]))-1 DataStructures.CursorList.cursorSpace[theList.header] DataStructures.CursorList.cursorSpace[theList.header-1] DataStructures.CursorList.cursorSpace[theList.header..] DataStructures.CursorList.cursorSpace[theList.header+1..] DataStructures.CursorList.cursorSpace[0..theList.header] DataStructures.CursorList.cursorSpace[0..theList.header-1] DataStructures.CursorList.cursorSpace[orig(theList.header)] DataStructures.CursorList.cursorSpace[orig(theList.header)-1] DataStructures.CursorList.cursorSpace[orig(theList.header)..] DataStructures.CursorList.cursorSpace[orig(theList.header)+1..] DataStructures.CursorList.cursorSpace[0..orig(theList.header)] DataStructures.CursorList.cursorSpace[0..orig(theList.header)-1] orig(DataStructures.CursorList.cursorSpace[post(theList.header)]) orig(DataStructures.CursorList.cursorSpace[post(theList.header)-1]) orig(DataStructures.CursorList.cursorSpace[post(theList.header)..]) orig(DataStructures.CursorList.cursorSpace[post(theList.header)+1..]) orig(DataStructures.CursorList.cursorSpace[0..post(theList.header)]) orig(DataStructures.CursorList.cursorSpace[0..post(theList.header)-1]) orig(DataStructures.CursorList.cursorSpace[theList.header]) orig(DataStructures.CursorList.cursorSpace[theList.header-1]) orig(DataStructures.CursorList.cursorSpace[theList.header..]) orig(DataStructures.CursorList.cursorSpace[theList.header+1..]) orig(DataStructures.CursorList.cursorSpace[0..theList.header]) orig(DataStructures.CursorList.cursorSpace[0..theList.header-1])
DataStructures.CursorList.cursorSpace == \old(DataStructures.CursorList.cursorSpace)
DataStructures.CursorList.cursorSpace.getClass().getName() == \old(DataStructures.CursorList.cursorSpace.getClass().getName())
daikon.Quant.pairwiseEqual(DataStructures.CursorList.cursorSpace, \old(DataStructures.CursorList.cursorSpace))
daikon.Quant.pairwiseEqual(daikon.Quant.collectObject(DataStructures.CursorList.cursorSpace, "element"), \old(daikon.Quant.collectObject(DataStructures.CursorList.cursorSpace, "element")))
daikon.Quant.pairwiseEqual(daikon.Quant.collectObject(DataStructures.CursorList.cursorSpace, "next"), \old(daikon.Quant.collectObject(DataStructures.CursorList.cursorSpace, "next")))
theList.header == \old(theList.header)
theList.header < daikon.Quant.size(DataStructures.CursorList.cursorSpace)-1
===========================================================================
DataStructures.CursorList.remove(java.lang.Object):::ENTER
    Variables: this this.header DataStructures.CursorList.cursorSpace DataStructures.CursorList.cursorSpace.getClass().getName() DataStructures.CursorList.cursorSpace[] DataStructures.CursorList.cursorSpace[].getClass().getName() DataStructures.CursorList.cursorSpace[].element DataStructures.CursorList.cursorSpace[].element.getClass().getName() DataStructures.CursorList.cursorSpace[].next DataStructures.CursorList.SPACE_SIZE x x.getClass().getName() size(DataStructures.CursorList.cursorSpace[]) size(DataStructures.CursorList.cursorSpace[])-1 DataStructures.CursorList.cursorSpace[this.header] DataStructures.CursorList.cursorSpace[this.header-1] DataStructures.CursorList.cursorSpace[this.header..] DataStructures.CursorList.cursorSpace[this.header+1..] DataStructures.CursorList.cursorSpace[0..this.header] DataStructures.CursorList.cursorSpace[0..this.header-1]
this.header == 1 || this.header == 4 || this.header == 20
x != null
warning: method daikon.inv.unary.string.PrintableString.format(OutputFormat:JML) needs to be implemented: x.getClass().getName() is printable
DataStructures.CursorList.cursorSpace.getClass().getName() != x.getClass().getName()
daikon.Quant.memberOf(x.getClass().getName() , daikon.Quant.typeArray(daikon.Quant.collectObject(DataStructures.CursorList.cursorSpace, "element")) )
===========================================================================
DataStructures.CursorList.remove(java.lang.Object):::EXIT
    Variables: this this.header DataStructures.CursorList.cursorSpace DataStructures.CursorList.cursorSpace.getClass().getName() DataStructures.CursorList.cursorSpace[] DataStructures.CursorList.cursorSpace[].getClass().getName() DataStructures.CursorList.cursorSpace[].element DataStructures.CursorList.cursorSpace[].element.getClass().getName() DataStructures.CursorList.cursorSpace[].next DataStructures.CursorList.SPACE_SIZE x x.getClass().getName() orig(this) orig(this.header) orig(DataStructures.CursorList.cursorSpace) orig(DataStructures.CursorList.cursorSpace.getClass().getName()) orig(DataStructures.CursorList.cursorSpace[]) orig(DataStructures.CursorList.cursorSpace[].getClass().getName()) orig(DataStructures.CursorList.cursorSpace[].element) orig(DataStructures.CursorList.cursorSpace[].element.getClass().getName()) orig(DataStructures.CursorList.cursorSpace[].next) orig(x) orig(x.getClass().getName()) size(DataStructures.CursorList.cursorSpace[]) size(DataStructures.CursorList.cursorSpace[])-1 orig(size(DataStructures.CursorList.cursorSpace[])) orig(size(DataStructures.CursorList.cursorSpace[]))-1 DataStructures.CursorList.cursorSpace[this.header] DataStructures.CursorList.cursorSpace[this.header-1] DataStructures.CursorList.cursorSpace[this.header..] DataStructures.CursorList.cursorSpace[this.header+1..] DataStructures.CursorList.cursorSpace[0..this.header] DataStructures.CursorList.cursorSpace[0..this.header-1] orig(DataStructures.CursorList.cursorSpace[post(this.header)]) orig(DataStructures.CursorList.cursorSpace[post(this.header)-1]) orig(DataStructures.CursorList.cursorSpace[post(this.header)..]) orig(DataStructures.CursorList.cursorSpace[post(this.header)+1..]) orig(DataStructures.CursorList.cursorSpace[0..post(this.header)]) orig(DataStructures.CursorList.cursorSpace[0..post(this.header)-1]) DataStructures.CursorList.cursorSpace[orig(this.header)] DataStructures.CursorList.cursorSpace[orig(this.header)-1] DataStructures.CursorList.cursorSpace[orig(this.header)..] DataStructures.CursorList.cursorSpace[orig(this.header)+1..] DataStructures.CursorList.cursorSpace[0..orig(this.header)] DataStructures.CursorList.cursorSpace[0..orig(this.header)-1] orig(DataStructures.CursorList.cursorSpace[this.header]) orig(DataStructures.CursorList.cursorSpace[this.header-1]) orig(DataStructures.CursorList.cursorSpace[this.header..]) orig(DataStructures.CursorList.cursorSpace[this.header+1..]) orig(DataStructures.CursorList.cursorSpace[0..this.header]) orig(DataStructures.CursorList.cursorSpace[0..this.header-1])
assignable DataStructures.CursorList.cursorSpace[].element, DataStructures.CursorList.cursorSpace[].next
this.header == \old(this.header)
DataStructures.CursorList.cursorSpace == \old(DataStructures.CursorList.cursorSpace)
DataStructures.CursorList.cursorSpace.getClass().getName() == \old(DataStructures.CursorList.cursorSpace.getClass().getName())
daikon.Quant.pairwiseEqual(DataStructures.CursorList.cursorSpace, \old(DataStructures.CursorList.cursorSpace))
this.header == 1 || this.header == 4 || this.header == 20
DataStructures.CursorList.cursorSpace.getClass().getName() != \old(x.getClass().getName())
daikon.Quant.subsetOf(daikon.Quant.collectObject(DataStructures.CursorList.cursorSpace, "element"), \old(daikon.Quant.collectObject(DataStructures.CursorList.cursorSpace, "element")))
daikon.Quant.subsetOf(daikon.Quant.collectObject(DataStructures.CursorList.cursorSpace, "next"), \old(daikon.Quant.collectObject(DataStructures.CursorList.cursorSpace, "next")))
daikon.Quant.subsetOf(\old(daikon.Quant.collectObject(DataStructures.CursorList.cursorSpace, "next")), daikon.Quant.collectObject(DataStructures.CursorList.cursorSpace, "next"))
===========================================================================
DataStructures.CursorList.zeroth():::ENTER
    Variables: this this.header DataStructures.CursorList.cursorSpace DataStructures.CursorList.cursorSpace.getClass().getName() DataStructures.CursorList.cursorSpace[] DataStructures.CursorList.cursorSpace[].getClass().getName() DataStructures.CursorList.cursorSpace[].element DataStructures.CursorList.cursorSpace[].element.getClass().getName() DataStructures.CursorList.cursorSpace[].next DataStructures.CursorList.SPACE_SIZE size(DataStructures.CursorList.cursorSpace[]) size(DataStructures.CursorList.cursorSpace[])-1 DataStructures.CursorList.cursorSpace[this.header] DataStructures.CursorList.cursorSpace[this.header-1] DataStructures.CursorList.cursorSpace[this.header..] DataStructures.CursorList.cursorSpace[this.header+1..] DataStructures.CursorList.cursorSpace[0..this.header] DataStructures.CursorList.cursorSpace[0..this.header-1]
===========================================================================
DataStructures.CursorList.zeroth():::EXIT
    Variables: this this.header DataStructures.CursorList.cursorSpace DataStructures.CursorList.cursorSpace.getClass().getName() DataStructures.CursorList.cursorSpace[] DataStructures.CursorList.cursorSpace[].getClass().getName() DataStructures.CursorList.cursorSpace[].element DataStructures.CursorList.cursorSpace[].element.getClass().getName() DataStructures.CursorList.cursorSpace[].next DataStructures.CursorList.SPACE_SIZE return return.current orig(this) orig(this.header) orig(DataStructures.CursorList.cursorSpace) orig(DataStructures.CursorList.cursorSpace.getClass().getName()) orig(DataStructures.CursorList.cursorSpace[]) orig(DataStructures.CursorList.cursorSpace[].getClass().getName()) orig(DataStructures.CursorList.cursorSpace[].element) orig(DataStructures.CursorList.cursorSpace[].element.getClass().getName()) orig(DataStructures.CursorList.cursorSpace[].next) size(DataStructures.CursorList.cursorSpace[]) size(DataStructures.CursorList.cursorSpace[])-1 orig(size(DataStructures.CursorList.cursorSpace[])) orig(size(DataStructures.CursorList.cursorSpace[]))-1 DataStructures.CursorList.cursorSpace[this.header] DataStructures.CursorList.cursorSpace[this.header-1] DataStructures.CursorList.cursorSpace[this.header..] DataStructures.CursorList.cursorSpace[this.header+1..] DataStructures.CursorList.cursorSpace[0..this.header] DataStructures.CursorList.cursorSpace[0..this.header-1] orig(DataStructures.CursorList.cursorSpace[post(this.header)]) orig(DataStructures.CursorList.cursorSpace[post(this.header)-1]) orig(DataStructures.CursorList.cursorSpace[post(this.header)..]) orig(DataStructures.CursorList.cursorSpace[post(this.header)+1..]) orig(DataStructures.CursorList.cursorSpace[0..post(this.header)]) orig(DataStructures.CursorList.cursorSpace[0..post(this.header)-1]) DataStructures.CursorList.cursorSpace[return.current] DataStructures.CursorList.cursorSpace[return.current-1] DataStructures.CursorList.cursorSpace[return.current..] DataStructures.CursorList.cursorSpace[return.current+1..] DataStructures.CursorList.cursorSpace[0..return.current] DataStructures.CursorList.cursorSpace[0..return.current-1] DataStructures.CursorList.cursorSpace[orig(this.header)] DataStructures.CursorList.cursorSpace[orig(this.header)-1] DataStructures.CursorList.cursorSpace[orig(this.header)..] DataStructures.CursorList.cursorSpace[orig(this.header)+1..] DataStructures.CursorList.cursorSpace[0..orig(this.header)] DataStructures.CursorList.cursorSpace[0..orig(this.header)-1] orig(DataStructures.CursorList.cursorSpace[post(return.current)]) orig(DataStructures.CursorList.cursorSpace[post(return.current)-1]) orig(DataStructures.CursorList.cursorSpace[post(return.current)..]) orig(DataStructures.CursorList.cursorSpace[post(return.current)+1..]) orig(DataStructures.CursorList.cursorSpace[0..post(return.current)]) orig(DataStructures.CursorList.cursorSpace[0..post(return.current)-1]) orig(DataStructures.CursorList.cursorSpace[this.header]) orig(DataStructures.CursorList.cursorSpace[this.header-1]) orig(DataStructures.CursorList.cursorSpace[this.header..]) orig(DataStructures.CursorList.cursorSpace[this.header+1..]) orig(DataStructures.CursorList.cursorSpace[0..this.header]) orig(DataStructures.CursorList.cursorSpace[0..this.header-1])
this.header == \result.current
this.header == \old(this.header)
DataStructures.CursorList.cursorSpace == \old(DataStructures.CursorList.cursorSpace)
DataStructures.CursorList.cursorSpace.getClass().getName() == \old(DataStructures.CursorList.cursorSpace.getClass().getName())
daikon.Quant.pairwiseEqual(DataStructures.CursorList.cursorSpace, \old(DataStructures.CursorList.cursorSpace))
daikon.Quant.pairwiseEqual(daikon.Quant.collectObject(DataStructures.CursorList.cursorSpace, "element"), \old(daikon.Quant.collectObject(DataStructures.CursorList.cursorSpace, "element")))
daikon.Quant.pairwiseEqual(daikon.Quant.collectObject(DataStructures.CursorList.cursorSpace, "next"), \old(daikon.Quant.collectObject(DataStructures.CursorList.cursorSpace, "next")))
\result != null
===========================================================================
DataStructures.CursorListItr:::OBJECT
    Variables: this this.current
this.current >= 0
===========================================================================
DataStructures.CursorListItr.CursorListItr(int):::ENTER
    Variables: theNode
theNode >= 0
===========================================================================
DataStructures.CursorListItr.CursorListItr(int):::EXIT
    Variables: this this.current theNode orig(theNode)
this.current == \old(theNode)
===========================================================================
DataStructures.CursorListItr.advance():::ENTER
    Variables: this this.current
===========================================================================
DataStructures.CursorListItr.advance():::EXIT
    Variables: this this.current orig(this) orig(this.current)
assignable this.current
this.current != \old(this.current)
===========================================================================
DataStructures.CursorListItr.isPastEnd():::ENTER
    Variables: this this.current
===========================================================================
DataStructures.CursorListItr.isPastEnd():::EXIT
    Variables: this this.current return orig(this) orig(this.current)
this.current == \old(this.current)
(this.current == 0)  <==>  (\result == true)
(this.current == 0)  ==>  (this.current is a pointer)
===========================================================================
DataStructures.CursorListItr.retrieve():::ENTER
    Variables: this this.current
===========================================================================
DataStructures.CursorListItr.retrieve():::EXIT
    Variables: this this.current return return.getClass().getName() orig(this) orig(this.current)
this.current == \old(this.current)
(\result != null)  ==>  (warning: method daikon.inv.unary.string.PrintableString.format(OutputFormat:JML) needs to be implemented: return.getClass().getName() is printable)
===========================================================================
DataStructures.CursorNode:::OBJECT
    Variables: this this.element this.element.getClass().getName() this.next
this.element == null
===========================================================================
DataStructures.CursorNode.CursorNode(java.lang.Object, int):::ENTER
    Variables: theElement theElement.getClass().getName() n
theElement == null
===========================================================================
DataStructures.CursorNode.CursorNode(java.lang.Object, int):::EXIT
    Variables: this this.element this.element.getClass().getName() this.next theElement theElement.getClass().getName() n orig(theElement) orig(theElement.getClass().getName()) orig(n)
this.next == \old(n)
