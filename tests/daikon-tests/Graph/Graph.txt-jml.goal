===========================================================================
MapQuick1.Graph:::OBJECT
    Variables: this this.adjMap
this.adjMap != null
===========================================================================
MapQuick1.Graph.Graph():::EXIT
    Variables: this this.adjMap
===========================================================================
MapQuick1.Graph.addEdge(java.lang.Object, java.lang.Object):::ENTER
    Variables: this this.adjMap from from.getClass().getName() to to.getClass().getName()
from.getClass().getName() == to.getClass().getName()
from != null
from.getClass().getName() == MapQuick1.GeoSegment.class.getName()
to != null
===========================================================================
MapQuick1.Graph.addEdge(java.lang.Object, java.lang.Object):::EXIT
    Variables: this this.adjMap from from.getClass().getName() to to.getClass().getName() orig(this) orig(this.adjMap) orig(from) orig(from.getClass().getName()) orig(to) orig(to.getClass().getName())
this.adjMap == \old(this.adjMap)
===========================================================================
MapQuick1.Graph.addNode(java.lang.Object):::ENTER
    Variables: this this.adjMap node node.getClass().getName()
node != null
node.getClass().getName() == MapQuick1.GeoSegment.class.getName()
===========================================================================
MapQuick1.Graph.addNode(java.lang.Object):::EXIT
    Variables: this this.adjMap node node.getClass().getName() orig(this) orig(this.adjMap) orig(node) orig(node.getClass().getName())
this.adjMap == \old(this.adjMap)
===========================================================================
MapQuick1.Graph.adjTo(java.lang.Object):::ENTER
    Variables: this this.adjMap node node.getClass().getName()
node != null
node.getClass().getName() == MapQuick1.GeoSegment.class.getName()
===========================================================================
MapQuick1.Graph.adjTo(java.lang.Object):::EXIT
    Variables: this this.adjMap node node.getClass().getName() return return.getClass().getName() orig(this) orig(this.adjMap) orig(node) orig(node.getClass().getName())
this.adjMap == \old(this.adjMap)
\result != null
\result.getClass().getName() == java.util.LinkedHashSet.class.getName()
\result.getClass().getName() != \old(node.getClass().getName())
===========================================================================
MapQuick1.Graph.checkRep():::ENTER
    Variables: this this.adjMap
===========================================================================
MapQuick1.Graph.checkRep():::EXIT
    Variables: this this.adjMap orig(this) orig(this.adjMap)
this.adjMap == \old(this.adjMap)
===========================================================================
MapQuick1.Graph.childrenOf(java.lang.Object):::ENTER
    Variables: this this.adjMap node node.getClass().getName()
node != null
node.getClass().getName() == MapQuick1.GeoSegment.class.getName()
===========================================================================
MapQuick1.Graph.childrenOf(java.lang.Object):::EXIT
    Variables: this this.adjMap node node.getClass().getName() return return.getClass().getName() orig(this) orig(this.adjMap) orig(node) orig(node.getClass().getName())
this.adjMap == \old(this.adjMap)
\result != null
\result.getClass().getName() == java.util.LinkedHashSet.class.getName()
\result.getClass().getName() != \old(node.getClass().getName())
===========================================================================
MapQuick1.Graph.containsNode(java.lang.Object):::ENTER
    Variables: this this.adjMap node node.getClass().getName()
node != null
node.getClass().getName() == MapQuick1.GeoSegment.class.getName()
===========================================================================
MapQuick1.Graph.containsNode(java.lang.Object):::EXIT
    Variables: this this.adjMap node node.getClass().getName() return orig(this) orig(this.adjMap) orig(node) orig(node.getClass().getName())
this.adjMap == \old(this.adjMap)
