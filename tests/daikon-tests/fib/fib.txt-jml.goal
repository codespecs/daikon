===========================================================================
misc.Fib:::CLASS
    Variables: misc.Fib.STEPS misc.Fib.a misc.Fib.b misc.Fib.c
misc.Fib.a >= 0
(!(misc.Fib.b == 0)) || (misc.Fib.a == 0)
misc.Fib.a <= misc.Fib.b
(!(misc.Fib.c == 0)) || (misc.Fib.a == 0)
misc.Fib.a <= misc.Fib.c
(!(misc.Fib.b == 0)) || (misc.Fib.c == 0)
(!(misc.Fib.c == 0)) || (misc.Fib.b == 0)
misc.Fib.b <= misc.Fib.c
misc.Fib.a + misc.Fib.b - misc.Fib.c == 0
===========================================================================
misc.Fib.increment():::ENTER
    Variables: misc.Fib.STEPS misc.Fib.a misc.Fib.b misc.Fib.c
misc.Fib.a < misc.Fib.c
===========================================================================
misc.Fib.increment():::EXIT
    Variables: misc.Fib.STEPS misc.Fib.a misc.Fib.b misc.Fib.c orig(misc.Fib.a) orig(misc.Fib.b) orig(misc.Fib.c)
assignable misc.Fib.a, misc.Fib.b, misc.Fib.c
misc.Fib.a == \old(misc.Fib.b)
misc.Fib.b == \old(misc.Fib.c)
misc.Fib.a < misc.Fib.c
misc.Fib.a >= \old(misc.Fib.a)
misc.Fib.b < misc.Fib.c
misc.Fib.b > \old(misc.Fib.a)
misc.Fib.c > \old(misc.Fib.a)
misc.Fib.a - misc.Fib.b + \old(misc.Fib.a) == 0
2 * misc.Fib.a - misc.Fib.c + \old(misc.Fib.a) == 0
2 * misc.Fib.b - misc.Fib.c - \old(misc.Fib.a) == 0
===========================================================================
misc.Fib.main(java.lang.String[]):::ENTER
    Variables: misc.Fib.STEPS misc.Fib.a misc.Fib.b misc.Fib.c args args.getClass().getName() args[] args[].toString size(args[]) size(args[])-1
misc.Fib.a == misc.Fib.b
misc.Fib.a == misc.Fib.c
misc.Fib.a == 0
args != null
args.getClass().getName() == java.lang.String[].class.getName()
("oneOf.java.jpp: SEQUENCE unimplemented" != null)
daikon.Quant.pairwiseEqual(daikon.Quant.collectObject(args, "toString()"), new String[] {  })
===========================================================================
misc.Fib.main(java.lang.String[]):::EXIT
    Variables: misc.Fib.STEPS misc.Fib.a misc.Fib.b misc.Fib.c args args.getClass().getName() args[] args[].toString orig(misc.Fib.a) orig(misc.Fib.b) orig(misc.Fib.c) orig(args) orig(args.getClass().getName()) orig(args[]) orig(args[].toString) size(args[]) size(args[])-1 orig(size(args[])) orig(size(args[]))-1
assignable misc.Fib.a, misc.Fib.b, misc.Fib.c
daikon.Quant.pairwiseEqual(args, \old(args))
misc.Fib.a == 6765
misc.Fib.b == 10946
misc.Fib.c == 17711
("oneOf.java.jpp: SEQUENCE unimplemented" != null)
daikon.Quant.pairwiseEqual(daikon.Quant.collectObject(args, "toString()"), new String[] {  })
