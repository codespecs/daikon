===========================================================================
MapQuick1.StreetNumberSet:::OBJECT
    Variables: this this.begins this.begins[] this.ends this.ends[] size(this.begins[]) size(this.begins[])-1 size(this.ends[]) size(this.ends[])-1
this.begins.length == this.ends.length
this.begins != null
warning: method daikon.inv.unary.sequence.NoDuplicates.format(OutputFormat:ESC/Java) needs to be implemented: this.begins[] contains no duplicates
(\forall int i; (0 <= i && i <= this.begins.length-1) ==> (this.begins[i] >= 0))
this.ends != null
warning: method daikon.inv.unary.sequence.NoDuplicates.format(OutputFormat:ESC/Java) needs to be implemented: this.ends[] contains no duplicates
(\forall int i; (0 <= i && i <= this.ends.length-1) ==> (this.ends[i] >= 0))
this.begins.length >= 1
(\forall int i, j; (0 <= i && i <= this.begins.length-1 && 0 <= j && j <= this.ends.length-1 && i == j) ==> (this.begins[i] <= this.ends[j]))
===========================================================================
MapQuick1.StreetNumberSet.StreetNumberSet(java.lang.String):::ENTER
    Variables: numbers numbers.toString
numbers != null
warning: method daikon.inv.unary.string.PrintableString.format(OutputFormat:ESC/Java) needs to be implemented: numbers.toString is printable
===========================================================================
MapQuick1.StreetNumberSet.StreetNumberSet(java.lang.String):::EXIT
    Variables: this this.begins this.begins[] this.ends this.ends[] numbers numbers.toString orig(numbers) orig(numbers.toString) size(this.begins[]) size(this.begins[])-1 size(this.ends[]) size(this.ends[])-1
      Unmodified variables: numbers numbers.toString
warning: method daikon.inv.unary.string.PrintableString.format(OutputFormat:ESC/Java) needs to be implemented: numbers.toString is printable
===========================================================================
MapQuick1.StreetNumberSet.checkRep():::ENTER
    Variables: this this.begins this.begins[] this.ends this.ends[] size(this.begins[]) size(this.begins[])-1 size(this.ends[]) size(this.ends[])-1
===========================================================================
MapQuick1.StreetNumberSet.checkRep():::EXIT
    Variables: this this.begins this.begins[] this.ends this.ends[] orig(this) orig(this.begins) orig(this.begins[]) orig(this.ends) orig(this.ends[]) size(this.begins[]) size(this.begins[])-1 size(this.ends[]) size(this.ends[])-1 orig(size(this.begins[])) orig(size(this.begins[]))-1 orig(size(this.ends[])) orig(size(this.ends[]))-1
      Unmodified variables: this this.begins this.begins[] this.ends this.ends[] size(this.begins[]) size(this.ends[])
this.begins.length == \old(this.ends.length)
===========================================================================
MapQuick1.StreetNumberSet.contains(int):::ENTER
    Variables: this this.begins this.begins[] this.ends this.ends[] n size(this.begins[]) size(this.begins[])-1 size(this.ends[]) size(this.ends[])-1 this.begins[n] this.begins[n-1] this.begins[n..] this.begins[n+1..] this.begins[0..n] this.begins[0..n-1] this.ends[n] this.ends[n-1] this.ends[n..] this.ends[n+1..] this.ends[0..n] this.ends[0..n-1]
n >= 0
===========================================================================
MapQuick1.StreetNumberSet.contains(int):::EXIT118
    Variables: this this.begins this.begins[] this.ends this.ends[] n return orig(this) orig(this.begins) orig(this.begins[]) orig(this.ends) orig(this.ends[]) orig(n) size(this.begins[]) size(this.begins[])-1 size(this.ends[]) size(this.ends[])-1 orig(size(this.begins[])) orig(size(this.begins[]))-1 orig(size(this.ends[])) orig(size(this.ends[]))-1 this.begins[n] this.begins[n-1] this.begins[n..] this.begins[n+1..] this.begins[0..n] this.begins[0..n-1] this.begins[orig(n)] this.begins[orig(n)-1] this.begins[orig(n)..] this.begins[orig(n)+1..] this.begins[0..orig(n)] this.begins[0..orig(n)-1] this.ends[n] this.ends[n-1] this.ends[n..] this.ends[n+1..] this.ends[0..n] this.ends[0..n-1] this.ends[orig(n)] this.ends[orig(n)-1] this.ends[orig(n)..] this.ends[orig(n)+1..] this.ends[0..orig(n)] this.ends[0..orig(n)-1] orig(this.begins[post(n)]) orig(this.begins[post(n)-1]) orig(this.begins[post(n)..]) orig(this.begins[post(n)+1..]) orig(this.begins[0..post(n)]) orig(this.begins[0..post(n)-1]) orig(this.ends[post(n)]) orig(this.ends[post(n)-1]) orig(this.ends[post(n)..]) orig(this.ends[post(n)+1..]) orig(this.ends[0..post(n)]) orig(this.ends[0..post(n)-1]) orig(this.begins[n]) orig(this.begins[n-1]) orig(this.begins[n..]) orig(this.begins[n+1..]) orig(this.begins[0..n]) orig(this.begins[0..n-1]) orig(this.ends[n]) orig(this.ends[n-1]) orig(this.ends[n..]) orig(this.ends[n+1..]) orig(this.ends[0..n]) orig(this.ends[0..n-1])
      Modified primitive arguments: this.begins[n] this.begins[n-1] this.begins[n..] this.begins[n+1..] this.begins[0..n] this.begins[0..n-1] this.ends[n] this.ends[n-1] this.ends[n..] this.ends[n+1..] this.ends[0..n] this.ends[0..n-1]
      Unmodified variables: this this.begins this.begins[] this.ends this.ends[] n size(this.begins[]) size(this.ends[])
\result == true
===========================================================================
MapQuick1.StreetNumberSet.contains(int):::EXIT123
    Variables: this this.begins this.begins[] this.ends this.ends[] n return orig(this) orig(this.begins) orig(this.begins[]) orig(this.ends) orig(this.ends[]) orig(n) size(this.begins[]) size(this.begins[])-1 size(this.ends[]) size(this.ends[])-1 orig(size(this.begins[])) orig(size(this.begins[]))-1 orig(size(this.ends[])) orig(size(this.ends[]))-1 this.begins[n] this.begins[n-1] this.begins[n..] this.begins[n+1..] this.begins[0..n] this.begins[0..n-1] this.begins[orig(n)] this.begins[orig(n)-1] this.begins[orig(n)..] this.begins[orig(n)+1..] this.begins[0..orig(n)] this.begins[0..orig(n)-1] this.ends[n] this.ends[n-1] this.ends[n..] this.ends[n+1..] this.ends[0..n] this.ends[0..n-1] this.ends[orig(n)] this.ends[orig(n)-1] this.ends[orig(n)..] this.ends[orig(n)+1..] this.ends[0..orig(n)] this.ends[0..orig(n)-1] orig(this.begins[post(n)]) orig(this.begins[post(n)-1]) orig(this.begins[post(n)..]) orig(this.begins[post(n)+1..]) orig(this.begins[0..post(n)]) orig(this.begins[0..post(n)-1]) orig(this.ends[post(n)]) orig(this.ends[post(n)-1]) orig(this.ends[post(n)..]) orig(this.ends[post(n)+1..]) orig(this.ends[0..post(n)]) orig(this.ends[0..post(n)-1]) orig(this.begins[n]) orig(this.begins[n-1]) orig(this.begins[n..]) orig(this.begins[n+1..]) orig(this.begins[0..n]) orig(this.begins[0..n-1]) orig(this.ends[n]) orig(this.ends[n-1]) orig(this.ends[n..]) orig(this.ends[n+1..]) orig(this.ends[0..n]) orig(this.ends[0..n-1])
      Modified primitive arguments: this.begins[n] this.begins[n-1] this.begins[n..] this.begins[n+1..] this.begins[0..n] this.begins[0..n-1] this.ends[n] this.ends[n-1] this.ends[n..] this.ends[n+1..] this.ends[0..n] this.ends[0..n-1]
      Unmodified variables: this this.begins this.begins[] this.ends this.ends[] n size(this.begins[]) size(this.ends[])
\result == false
===========================================================================
MapQuick1.StreetNumberSet.contains(int):::EXIT
    Variables: this this.begins this.begins[] this.ends this.ends[] n return orig(this) orig(this.begins) orig(this.begins[]) orig(this.ends) orig(this.ends[]) orig(n) size(this.begins[]) size(this.begins[])-1 size(this.ends[]) size(this.ends[])-1 orig(size(this.begins[])) orig(size(this.begins[]))-1 orig(size(this.ends[])) orig(size(this.ends[]))-1 this.begins[n] this.begins[n-1] this.begins[n..] this.begins[n+1..] this.begins[0..n] this.begins[0..n-1] this.begins[orig(n)] this.begins[orig(n)-1] this.begins[orig(n)..] this.begins[orig(n)+1..] this.begins[0..orig(n)] this.begins[0..orig(n)-1] this.ends[n] this.ends[n-1] this.ends[n..] this.ends[n+1..] this.ends[0..n] this.ends[0..n-1] this.ends[orig(n)] this.ends[orig(n)-1] this.ends[orig(n)..] this.ends[orig(n)+1..] this.ends[0..orig(n)] this.ends[0..orig(n)-1] orig(this.begins[post(n)]) orig(this.begins[post(n)-1]) orig(this.begins[post(n)..]) orig(this.begins[post(n)+1..]) orig(this.begins[0..post(n)]) orig(this.begins[0..post(n)-1]) orig(this.ends[post(n)]) orig(this.ends[post(n)-1]) orig(this.ends[post(n)..]) orig(this.ends[post(n)+1..]) orig(this.ends[0..post(n)]) orig(this.ends[0..post(n)-1]) orig(this.begins[n]) orig(this.begins[n-1]) orig(this.begins[n..]) orig(this.begins[n+1..]) orig(this.begins[0..n]) orig(this.begins[0..n-1]) orig(this.ends[n]) orig(this.ends[n-1]) orig(this.ends[n..]) orig(this.ends[n+1..]) orig(this.ends[0..n]) orig(this.ends[0..n-1])
      Modified primitive arguments: this.begins[n] this.begins[n-1] this.begins[n..] this.begins[n+1..] this.begins[0..n] this.begins[0..n-1] this.ends[n] this.ends[n-1] this.ends[n..] this.ends[n+1..] this.ends[0..n] this.ends[0..n-1]
      Unmodified variables: this this.begins this.begins[] this.ends this.ends[] n size(this.begins[]) size(this.ends[])
this.begins.length == \old(this.ends.length)
===========================================================================
MapQuick1.StreetNumberSet.equals(MapQuick1.StreetNumberSet):::ENTER
    Variables: this this.begins this.begins[] this.ends this.ends[] other other.begins other.begins[] other.ends other.ends[] size(this.begins[]) size(this.begins[])-1 size(this.ends[]) size(this.ends[])-1 size(other.begins[]) size(other.begins[])-1 size(other.ends[]) size(other.ends[])-1
((other != null) && (other.begins != null) && (other.ends != null))  ==>  (other.begins.length == other.ends.length)
(other != null)  ==>  (other.begins != null)
((other != null) && (other.begins != null))  ==>  (warning: method daikon.inv.unary.sequence.NoDuplicates.format(OutputFormat:ESC/Java) needs to be implemented: other.begins[] contains no duplicates)
((other != null) && (other.begins != null))  ==>  ((\forall int i; (0 <= i && i <= other.begins.length-1) ==> (other.begins[i] >= 0)))
(other != null)  ==>  (other.ends != null)
((other != null) && (other.ends != null))  ==>  (warning: method daikon.inv.unary.sequence.NoDuplicates.format(OutputFormat:ESC/Java) needs to be implemented: other.ends[] contains no duplicates)
((other != null) && (other.ends != null))  ==>  ((\forall int i; (0 <= i && i <= other.ends.length-1) ==> (other.ends[i] >= 0)))
((other != null) && (other.begins != null))  ==>  (other.begins.length >= 1)
((other != null) && (other.begins != null) && (other.ends != null))  ==>  ((\forall int i, j; (0 <= i && i <= other.begins.length-1 && 0 <= j && j <= other.ends.length-1 && i == j) ==> (other.begins[i] <= other.ends[j])))
===========================================================================
MapQuick1.StreetNumberSet.equals(MapQuick1.StreetNumberSet):::EXIT271
    Variables: this this.begins this.begins[] this.ends this.ends[] other other.begins other.begins[] other.ends other.ends[] return orig(this) orig(this.begins) orig(this.begins[]) orig(this.ends) orig(this.ends[]) orig(other) orig(other.begins) orig(other.begins[]) orig(other.ends) orig(other.ends[]) size(this.begins[]) size(this.begins[])-1 size(this.ends[]) size(this.ends[])-1 size(other.begins[]) size(other.begins[])-1 size(other.ends[]) size(other.ends[])-1 orig(size(this.begins[])) orig(size(this.begins[]))-1 orig(size(this.ends[])) orig(size(this.ends[]))-1 orig(size(other.begins[])) orig(size(other.begins[]))-1 orig(size(other.ends[])) orig(size(other.ends[]))-1
      Modified variables: other.begins other.begins[] other.ends other.ends[] size(other.begins[]) size(other.ends[])
      Unmodified variables: this this.begins this.begins[] this.ends this.ends[] other size(this.begins[]) size(this.ends[])
modifies other.begins, other.begins[*], other.ends, other.ends[*]
\result == false
\old(other) == null
===========================================================================
MapQuick1.StreetNumberSet.equals(MapQuick1.StreetNumberSet):::EXIT272
    Variables: this this.begins this.begins[] this.ends this.ends[] other other.begins other.begins[] other.ends other.ends[] return orig(this) orig(this.begins) orig(this.begins[]) orig(this.ends) orig(this.ends[]) orig(other) orig(other.begins) orig(other.begins[]) orig(other.ends) orig(other.ends[]) size(this.begins[]) size(this.begins[])-1 size(this.ends[]) size(this.ends[])-1 size(other.begins[]) size(other.begins[])-1 size(other.ends[]) size(other.ends[])-1 orig(size(this.begins[])) orig(size(this.begins[]))-1 orig(size(this.ends[])) orig(size(this.ends[]))-1 orig(size(other.begins[])) orig(size(other.begins[]))-1 orig(size(other.ends[])) orig(size(other.ends[]))-1
      Unmodified variables: this this.begins this.begins[] this.ends this.ends[] other other.begins other.begins[] other.ends other.ends[] size(this.begins[]) size(this.ends[]) size(other.begins[]) size(other.ends[])
this.begins == other.begins
this.begins == \old(other.begins)
warning: method daikon.inv.binary.twoSequence.SeqSeqIntEqual.format(OutputFormat:ESC/Java) needs to be implemented: this.begins[] == other.begins[]
warning: method daikon.inv.binary.twoSequence.SeqSeqIntEqual.format(OutputFormat:ESC/Java) needs to be implemented: this.begins[] == orig(other.begins[])
this.ends == other.ends
this.ends == \old(other.ends)
warning: method daikon.inv.binary.twoSequence.SeqSeqIntEqual.format(OutputFormat:ESC/Java) needs to be implemented: this.ends[] == other.ends[]
warning: method daikon.inv.binary.twoSequence.SeqSeqIntEqual.format(OutputFormat:ESC/Java) needs to be implemented: this.ends[] == orig(other.ends[])
\old(this) == \old(other)
this.begins.length == other.ends.length
this.begins.length == \old(other.ends.length)
\result == true
\old(other) != null
===========================================================================
MapQuick1.StreetNumberSet.equals(MapQuick1.StreetNumberSet):::EXIT281
    Variables: this this.begins this.begins[] this.ends this.ends[] other other.begins other.begins[] other.ends other.ends[] return orig(this) orig(this.begins) orig(this.begins[]) orig(this.ends) orig(this.ends[]) orig(other) orig(other.begins) orig(other.begins[]) orig(other.ends) orig(other.ends[]) size(this.begins[]) size(this.begins[])-1 size(this.ends[]) size(this.ends[])-1 size(other.begins[]) size(other.begins[])-1 size(other.ends[]) size(other.ends[])-1 orig(size(this.begins[])) orig(size(this.begins[]))-1 orig(size(this.ends[])) orig(size(this.ends[]))-1 orig(size(other.begins[])) orig(size(other.begins[]))-1 orig(size(other.ends[])) orig(size(other.ends[]))-1
      Unmodified variables: this this.begins this.begins[] this.ends this.ends[] other other.begins other.begins[] other.ends other.ends[] size(this.begins[]) size(this.ends[]) size(other.begins[]) size(other.ends[])
other.begins.length == other.ends.length
other.begins.length == \old(other.ends.length)
other.begins != null
warning: method daikon.inv.unary.sequence.NoDuplicates.format(OutputFormat:ESC/Java) needs to be implemented: other.begins[] contains no duplicates
(\forall int i; (0 <= i && i <= other.begins.length-1) ==> (other.begins[i] >= 0))
other.ends != null
warning: method daikon.inv.unary.sequence.NoDuplicates.format(OutputFormat:ESC/Java) needs to be implemented: other.ends[] contains no duplicates
(\forall int i; (0 <= i && i <= other.ends.length-1) ==> (other.ends[i] >= 0))
\result == false
\old(other) != null
other.begins.length >= 1
(\forall int i, j; (0 <= i && i <= other.begins.length-1 && 0 <= j && j <= other.ends.length-1 && i == j) ==> (other.begins[i] <= other.ends[j]))
===========================================================================
MapQuick1.StreetNumberSet.equals(MapQuick1.StreetNumberSet):::EXIT282
    Variables: this this.begins this.begins[] this.ends this.ends[] other other.begins other.begins[] other.ends other.ends[] return orig(this) orig(this.begins) orig(this.begins[]) orig(this.ends) orig(this.ends[]) orig(other) orig(other.begins) orig(other.begins[]) orig(other.ends) orig(other.ends[]) size(this.begins[]) size(this.begins[])-1 size(this.ends[]) size(this.ends[])-1 size(other.begins[]) size(other.begins[])-1 size(other.ends[]) size(other.ends[])-1 orig(size(this.begins[])) orig(size(this.begins[]))-1 orig(size(this.ends[])) orig(size(this.ends[]))-1 orig(size(other.begins[])) orig(size(other.begins[]))-1 orig(size(other.ends[])) orig(size(other.ends[]))-1
      Unmodified variables: this this.begins this.begins[] this.ends this.ends[] other other.begins other.begins[] other.ends other.ends[] size(this.begins[]) size(this.ends[]) size(other.begins[]) size(other.ends[])
other.begins.length == other.ends.length
other.begins.length == \old(other.ends.length)
other.begins != null
(\forall int i; (0 <= i && i <= other.begins.length-1) ==> (other.begins[i] >= 0))
other.ends != null
(\forall int i; (0 <= i && i <= other.ends.length-1) ==> (other.ends[i] >= 0))
\result == false
\old(other) != null
other.begins.length >= 1
(\forall int i, j; (0 <= i && i <= other.begins.length-1 && 0 <= j && j <= other.ends.length-1 && i == j) ==> (other.begins[i] <= other.ends[j]))
===========================================================================
MapQuick1.StreetNumberSet.equals(MapQuick1.StreetNumberSet):::EXIT286
    Variables: this this.begins this.begins[] this.ends this.ends[] other other.begins other.begins[] other.ends other.ends[] return orig(this) orig(this.begins) orig(this.begins[]) orig(this.ends) orig(this.ends[]) orig(other) orig(other.begins) orig(other.begins[]) orig(other.ends) orig(other.ends[]) size(this.begins[]) size(this.begins[])-1 size(this.ends[]) size(this.ends[])-1 size(other.begins[]) size(other.begins[])-1 size(other.ends[]) size(other.ends[])-1 orig(size(this.begins[])) orig(size(this.begins[]))-1 orig(size(this.ends[])) orig(size(this.ends[]))-1 orig(size(other.begins[])) orig(size(other.begins[]))-1 orig(size(other.ends[])) orig(size(other.ends[]))-1
      Unmodified variables: this this.begins this.begins[] this.ends this.ends[] other other.begins other.begins[] other.ends other.ends[] size(this.begins[]) size(this.ends[]) size(other.begins[]) size(other.ends[])
other.begins.length == other.ends.length
other.begins.length == \old(other.ends.length)
other.begins != null
(\forall int i; (0 <= i && i <= other.begins.length-1) ==> (other.begins[i] >= 0))
other.ends != null
(\forall int i; (0 <= i && i <= other.ends.length-1) ==> (other.ends[i] >= 0))
\result == false
\old(other) != null
(\forall int i, j; (0 <= i && i <= other.begins.length-1 && 0 <= j && j <= other.ends.length-1 && i == j) ==> (other.begins[i] <= other.ends[j]))
this.begins.length != other.begins.length
this.begins.length != other.begins.length-1
this.begins.length-1 != other.begins.length
this.begins.length-1 != other.begins.length-1
===========================================================================
MapQuick1.StreetNumberSet.equals(MapQuick1.StreetNumberSet):::EXIT290
    Variables: this this.begins this.begins[] this.ends this.ends[] other other.begins other.begins[] other.ends other.ends[] return orig(this) orig(this.begins) orig(this.begins[]) orig(this.ends) orig(this.ends[]) orig(other) orig(other.begins) orig(other.begins[]) orig(other.ends) orig(other.ends[]) size(this.begins[]) size(this.begins[])-1 size(this.ends[]) size(this.ends[])-1 size(other.begins[]) size(other.begins[])-1 size(other.ends[]) size(other.ends[])-1 orig(size(this.begins[])) orig(size(this.begins[]))-1 orig(size(this.ends[])) orig(size(this.ends[]))-1 orig(size(other.begins[])) orig(size(other.begins[]))-1 orig(size(other.ends[])) orig(size(other.ends[]))-1
      Unmodified variables: this this.begins this.begins[] this.ends this.ends[] other other.begins other.begins[] other.ends other.ends[] size(this.begins[]) size(this.ends[]) size(other.begins[]) size(other.ends[])
other.begins.length == other.ends.length
other.begins.length == \old(other.ends.length)
(\forall int i; (0 <= i && i <= other.begins.length-1) ==> (other.begins[i] >= 0))
(\forall int i; (0 <= i && i <= other.ends.length-1) ==> (other.ends[i] >= 0))
\result == true
(\forall int i, j; (0 <= i && i <= other.begins.length-1 && 0 <= j && j <= other.ends.length-1 && i == j) ==> (other.begins[i] <= other.ends[j]))
===========================================================================
MapQuick1.StreetNumberSet.equals(MapQuick1.StreetNumberSet):::EXIT
    Variables: this this.begins this.begins[] this.ends this.ends[] other other.begins other.begins[] other.ends other.ends[] return orig(this) orig(this.begins) orig(this.begins[]) orig(this.ends) orig(this.ends[]) orig(other) orig(other.begins) orig(other.begins[]) orig(other.ends) orig(other.ends[]) size(this.begins[]) size(this.begins[])-1 size(this.ends[]) size(this.ends[])-1 size(other.begins[]) size(other.begins[])-1 size(other.ends[]) size(other.ends[])-1 orig(size(this.begins[])) orig(size(this.begins[]))-1 orig(size(this.ends[])) orig(size(this.ends[]))-1 orig(size(other.begins[])) orig(size(other.begins[]))-1 orig(size(other.ends[])) orig(size(other.ends[]))-1
      Unmodified variables: this this.begins this.begins[] this.ends this.ends[] other other.begins other.begins[] other.ends other.ends[] size(this.begins[]) size(this.ends[]) size(other.begins[]) size(other.ends[])
this.begins.length == \old(this.ends.length)
((other != null) && (other.begins != null) && (other.ends != null))  ==>  (other.begins.length == other.ends.length)
((other != null) && (other.begins != null) && (\old(other) != null) && (\old(other.ends) != null))  ==>  (other.begins.length == \old(other.ends.length))
(\result == true)  ==>  (\old(other) != null)
(other != null)  ==>  (other.begins != null)
((other != null) && (other.begins != null))  ==>  (warning: method daikon.inv.unary.sequence.NoDuplicates.format(OutputFormat:ESC/Java) needs to be implemented: other.begins[] contains no duplicates)
((other != null) && (other.begins != null))  ==>  ((\forall int i; (0 <= i && i <= other.begins.length-1) ==> (other.begins[i] >= 0)))
(other != null)  ==>  (other.ends != null)
((other != null) && (other.ends != null))  ==>  (warning: method daikon.inv.unary.sequence.NoDuplicates.format(OutputFormat:ESC/Java) needs to be implemented: other.ends[] contains no duplicates)
((other != null) && (other.ends != null))  ==>  ((\forall int i; (0 <= i && i <= other.ends.length-1) ==> (other.ends[i] >= 0)))
((other != null) && (other.begins != null))  ==>  (other.begins.length >= 1)
((other != null) && (other.begins != null) && (other.ends != null))  ==>  ((\forall int i, j; (0 <= i && i <= other.begins.length-1 && 0 <= j && j <= other.ends.length-1 && i == j) ==> (other.begins[i] <= other.ends[j])))
===========================================================================
MapQuick1.StreetNumberSet.equals(java.lang.Object):::ENTER
    Variables: this this.begins this.begins[] this.ends this.ends[] o o.getClass().getName() size(this.begins[]) size(this.begins[])-1 size(this.ends[]) size(this.ends[])-1
(o != null)  ==>  (warning: method daikon.inv.unary.string.PrintableString.format(OutputFormat:ESC/Java) needs to be implemented: o.getClass().getName() is printable)
===========================================================================
MapQuick1.StreetNumberSet.equals(java.lang.Object):::EXIT
    Variables: this this.begins this.begins[] this.ends this.ends[] o o.getClass().getName() return orig(this) orig(this.begins) orig(this.begins[]) orig(this.ends) orig(this.ends[]) orig(o) orig(o.getClass().getName()) size(this.begins[]) size(this.begins[])-1 size(this.ends[]) size(this.ends[])-1 orig(size(this.begins[])) orig(size(this.begins[]))-1 orig(size(this.ends[])) orig(size(this.ends[]))-1
      Unmodified variables: this this.begins this.begins[] this.ends this.ends[] o o.getClass().getName() size(this.begins[]) size(this.ends[])
this.begins.length == \old(this.ends.length)
(\result == true)  ==>  (\old(o) != null)
(\result == true)  ==>  (\old(\typeof(o)) == \type(MapQuick1.StreetNumberSet))
===========================================================================
MapQuick1.StreetNumberSet.hashCode():::ENTER
    Variables: this this.begins this.begins[] this.ends this.ends[] size(this.begins[]) size(this.begins[])-1 size(this.ends[]) size(this.ends[])-1
(\forall int i; (0 <= i && i <= this.begins.length-1) ==> (this.begins[i] == 1 || this.begins[i] == 3 || this.begins[i] == 7))
warning: method daikon.inv.unary.sequence.OneOfSequence.format(OutputFormat:ESC/Java) needs to be implemented: this.begins[] one of { [1], [3, 1, 7] }
(\forall int i; (0 <= i && i <= this.ends.length-1) ==> (this.ends[i] == 1 || this.ends[i] == 5 || this.ends[i] == 7))
warning: method daikon.inv.unary.sequence.OneOfSequence.format(OutputFormat:ESC/Java) needs to be implemented: this.ends[] one of { [5, 1, 7], [7] }
this.begins.length == 1 || this.begins.length == 3
!(\forall int i; (0 <= i && i <= this.begins.length-1) ==> (this.begins[i] != this.begins.length))
===========================================================================
MapQuick1.StreetNumberSet.hashCode():::EXIT
    Variables: this this.begins this.begins[] this.ends this.ends[] return orig(this) orig(this.begins) orig(this.begins[]) orig(this.ends) orig(this.ends[]) size(this.begins[]) size(this.begins[])-1 size(this.ends[]) size(this.ends[])-1 orig(size(this.begins[])) orig(size(this.begins[]))-1 orig(size(this.ends[])) orig(size(this.ends[]))-1 this.begins[return] this.begins[return-1] this.begins[return..] this.begins[return+1..] this.begins[0..return] this.begins[0..return-1] this.ends[return] this.ends[return-1] this.ends[return..] this.ends[return+1..] this.ends[0..return] this.ends[0..return-1] orig(this.begins[post(return)]) orig(this.begins[post(return)-1]) orig(this.begins[post(return)..]) orig(this.begins[post(return)+1..]) orig(this.begins[0..post(return)]) orig(this.begins[0..post(return)-1]) orig(this.ends[post(return)]) orig(this.ends[post(return)-1]) orig(this.ends[post(return)..]) orig(this.ends[post(return)+1..]) orig(this.ends[0..post(return)]) orig(this.ends[0..post(return)-1])
      Unmodified variables: this this.begins this.begins[] this.ends this.ends[] size(this.begins[]) size(this.ends[])
this.begins.length == \old(this.ends.length)
(\forall int i; (0 <= i && i <= this.begins.length-1) ==> (this.begins[i] == 1 || this.begins[i] == 3 || this.begins[i] == 7))
warning: method daikon.inv.unary.sequence.OneOfSequence.format(OutputFormat:ESC/Java) needs to be implemented: this.begins[] one of { [1], [3, 1, 7] }
(\forall int i; (0 <= i && i <= this.ends.length-1) ==> (this.ends[i] == 1 || this.ends[i] == 5 || this.ends[i] == 7))
warning: method daikon.inv.unary.sequence.OneOfSequence.format(OutputFormat:ESC/Java) needs to be implemented: this.ends[] one of { [5, 1, 7], [7] }
\result == 122
this.begins.length == 1 || this.begins.length == 3
!(\forall int i; (0 <= i && i <= this.begins.length-1) ==> (this.begins[i] != this.begins.length))
===========================================================================
MapQuick1.StreetNumberSet.intersects(MapQuick1.StreetNumberSet):::ENTER
    Variables: this this.begins this.begins[] this.ends this.ends[] other other.begins other.begins[] other.ends other.ends[] size(this.begins[]) size(this.begins[])-1 size(this.ends[]) size(this.ends[])-1 size(other.begins[]) size(other.begins[])-1 size(other.ends[]) size(other.ends[])-1
other.begins.length == other.ends.length
other != null
other.begins != null
warning: method daikon.inv.unary.sequence.NoDuplicates.format(OutputFormat:ESC/Java) needs to be implemented: other.begins[] contains no duplicates
(\forall int i; (0 <= i && i <= other.begins.length-1) ==> (other.begins[i] >= 0))
other.ends != null
warning: method daikon.inv.unary.sequence.NoDuplicates.format(OutputFormat:ESC/Java) needs to be implemented: other.ends[] contains no duplicates
(\forall int i; (0 <= i && i <= other.ends.length-1) ==> (other.ends[i] >= 0))
other.begins.length >= 1
(\forall int i, j; (0 <= i && i <= other.begins.length-1 && 0 <= j && j <= other.ends.length-1 && i == j) ==> (other.begins[i] <= other.ends[j]))
===========================================================================
MapQuick1.StreetNumberSet.intersects(MapQuick1.StreetNumberSet):::EXIT253
    Variables: this this.begins this.begins[] this.ends this.ends[] other other.begins other.begins[] other.ends other.ends[] return orig(this) orig(this.begins) orig(this.begins[]) orig(this.ends) orig(this.ends[]) orig(other) orig(other.begins) orig(other.begins[]) orig(other.ends) orig(other.ends[]) size(this.begins[]) size(this.begins[])-1 size(this.ends[]) size(this.ends[])-1 size(other.begins[]) size(other.begins[])-1 size(other.ends[]) size(other.ends[])-1 orig(size(this.begins[])) orig(size(this.begins[]))-1 orig(size(this.ends[])) orig(size(this.ends[]))-1 orig(size(other.begins[])) orig(size(other.begins[]))-1 orig(size(other.ends[])) orig(size(other.ends[]))-1
      Unmodified variables: this this.begins this.begins[] this.ends this.ends[] other other.begins other.begins[] other.ends other.ends[] size(this.begins[]) size(this.ends[]) size(other.begins[]) size(other.ends[])
\result == true
===========================================================================
MapQuick1.StreetNumberSet.intersects(MapQuick1.StreetNumberSet):::EXIT257
    Variables: this this.begins this.begins[] this.ends this.ends[] other other.begins other.begins[] other.ends other.ends[] return orig(this) orig(this.begins) orig(this.begins[]) orig(this.ends) orig(this.ends[]) orig(other) orig(other.begins) orig(other.begins[]) orig(other.ends) orig(other.ends[]) size(this.begins[]) size(this.begins[])-1 size(this.ends[]) size(this.ends[])-1 size(other.begins[]) size(other.begins[])-1 size(other.ends[]) size(other.ends[])-1 orig(size(this.begins[])) orig(size(this.begins[]))-1 orig(size(this.ends[])) orig(size(this.ends[]))-1 orig(size(other.begins[])) orig(size(other.begins[]))-1 orig(size(other.ends[])) orig(size(other.ends[]))-1
      Unmodified variables: this this.begins this.begins[] this.ends this.ends[] other other.begins other.begins[] other.ends other.ends[] size(this.begins[]) size(this.ends[]) size(other.begins[]) size(other.ends[])
\result == false
===========================================================================
MapQuick1.StreetNumberSet.intersects(MapQuick1.StreetNumberSet):::EXIT
    Variables: this this.begins this.begins[] this.ends this.ends[] other other.begins other.begins[] other.ends other.ends[] return orig(this) orig(this.begins) orig(this.begins[]) orig(this.ends) orig(this.ends[]) orig(other) orig(other.begins) orig(other.begins[]) orig(other.ends) orig(other.ends[]) size(this.begins[]) size(this.begins[])-1 size(this.ends[]) size(this.ends[])-1 size(other.begins[]) size(other.begins[])-1 size(other.ends[]) size(other.ends[])-1 orig(size(this.begins[])) orig(size(this.begins[]))-1 orig(size(this.ends[])) orig(size(this.ends[]))-1 orig(size(other.begins[])) orig(size(other.begins[]))-1 orig(size(other.ends[])) orig(size(other.ends[]))-1
      Unmodified variables: this this.begins this.begins[] this.ends this.ends[] other other.begins other.begins[] other.ends other.ends[] size(this.begins[]) size(this.ends[]) size(other.begins[]) size(other.ends[])
this.begins.length == \old(this.ends.length)
other.begins.length == other.ends.length
other.begins.length == \old(other.ends.length)
other.begins != null
warning: method daikon.inv.unary.sequence.NoDuplicates.format(OutputFormat:ESC/Java) needs to be implemented: other.begins[] contains no duplicates
(\forall int i; (0 <= i && i <= other.begins.length-1) ==> (other.begins[i] >= 0))
other.ends != null
warning: method daikon.inv.unary.sequence.NoDuplicates.format(OutputFormat:ESC/Java) needs to be implemented: other.ends[] contains no duplicates
(\forall int i; (0 <= i && i <= other.ends.length-1) ==> (other.ends[i] >= 0))
other.begins.length >= 1
(\forall int i, j; (0 <= i && i <= other.begins.length-1 && 0 <= j && j <= other.ends.length-1 && i == j) ==> (other.begins[i] <= other.ends[j]))
===========================================================================
MapQuick1.StreetNumberSet.isEmpty():::ENTER
    Variables: this this.begins this.begins[] this.ends this.ends[] size(this.begins[]) size(this.begins[])-1 size(this.ends[]) size(this.ends[])-1
===========================================================================
MapQuick1.StreetNumberSet.isEmpty():::EXIT
    Variables: this this.begins this.begins[] this.ends this.ends[] return orig(this) orig(this.begins) orig(this.begins[]) orig(this.ends) orig(this.ends[]) size(this.begins[]) size(this.begins[])-1 size(this.ends[]) size(this.ends[])-1 orig(size(this.begins[])) orig(size(this.begins[]))-1 orig(size(this.ends[])) orig(size(this.ends[]))-1
      Unmodified variables: this this.begins this.begins[] this.ends this.ends[] size(this.begins[]) size(this.ends[])
this.begins.length == \old(this.ends.length)
\result == false
===========================================================================
MapQuick1.StreetNumberSet.max():::ENTER
    Variables: this this.begins this.begins[] this.ends this.ends[] size(this.begins[]) size(this.begins[])-1 size(this.ends[]) size(this.ends[])-1
===========================================================================
MapQuick1.StreetNumberSet.max():::EXIT
    Variables: this this.begins this.begins[] this.ends this.ends[] return orig(this) orig(this.begins) orig(this.begins[]) orig(this.ends) orig(this.ends[]) size(this.begins[]) size(this.begins[])-1 size(this.ends[]) size(this.ends[])-1 orig(size(this.begins[])) orig(size(this.begins[]))-1 orig(size(this.ends[])) orig(size(this.ends[]))-1 this.begins[return] this.begins[return-1] this.begins[return..] this.begins[return+1..] this.begins[0..return] this.begins[0..return-1] this.ends[return] this.ends[return-1] this.ends[return..] this.ends[return+1..] this.ends[0..return] this.ends[0..return-1] orig(this.begins[post(return)]) orig(this.begins[post(return)-1]) orig(this.begins[post(return)..]) orig(this.begins[post(return)+1..]) orig(this.begins[0..post(return)]) orig(this.begins[0..post(return)-1]) orig(this.ends[post(return)]) orig(this.ends[post(return)-1]) orig(this.ends[post(return)..]) orig(this.ends[post(return)+1..]) orig(this.ends[0..post(return)]) orig(this.ends[0..post(return)-1])
      Unmodified variables: this this.begins this.begins[] this.ends this.ends[] size(this.begins[]) size(this.ends[])
this.begins.length == \old(this.ends.length)
\result >= 0
(\forall int i; (0 <= i && i <= this.begins.length-1) ==> (this.begins[i] <= \result))
!(\forall int i; (0 <= i && i <= this.ends.length-1) ==> (this.ends[i] != \result))
(\forall int i; (0 <= i && i <= this.ends.length-1) ==> (this.ends[i] <= \result))
(\result == 0) ==> (this.begins.length-1 == 0)
\result >= this.begins.length-1
===========================================================================
MapQuick1.StreetNumberSet.min():::ENTER
    Variables: this this.begins this.begins[] this.ends this.ends[] size(this.begins[]) size(this.begins[])-1 size(this.ends[]) size(this.ends[])-1
===========================================================================
MapQuick1.StreetNumberSet.min():::EXIT
    Variables: this this.begins this.begins[] this.ends this.ends[] return orig(this) orig(this.begins) orig(this.begins[]) orig(this.ends) orig(this.ends[]) size(this.begins[]) size(this.begins[])-1 size(this.ends[]) size(this.ends[])-1 orig(size(this.begins[])) orig(size(this.begins[]))-1 orig(size(this.ends[])) orig(size(this.ends[]))-1 this.begins[return] this.begins[return-1] this.begins[return..] this.begins[return+1..] this.begins[0..return] this.begins[0..return-1] this.ends[return] this.ends[return-1] this.ends[return..] this.ends[return+1..] this.ends[0..return] this.ends[0..return-1] orig(this.begins[post(return)]) orig(this.begins[post(return)-1]) orig(this.begins[post(return)..]) orig(this.begins[post(return)+1..]) orig(this.begins[0..post(return)]) orig(this.begins[0..post(return)-1]) orig(this.ends[post(return)]) orig(this.ends[post(return)-1]) orig(this.ends[post(return)..]) orig(this.ends[post(return)+1..]) orig(this.ends[0..post(return)]) orig(this.ends[0..post(return)-1])
      Unmodified variables: this this.begins this.begins[] this.ends this.ends[] size(this.begins[]) size(this.ends[])
this.begins.length == \old(this.ends.length)
\result >= 0
!(\forall int i; (0 <= i && i <= this.begins.length-1) ==> (this.begins[i] != \result))
(\forall int i; (0 <= i && i <= this.begins.length-1) ==> (this.begins[i] >= \result))
(\forall int i; (0 <= i && i <= this.ends.length-1) ==> (this.ends[i] >= \result))
===========================================================================
MapQuick1.StreetNumberSet.orderStatistic(int):::ENTER
    Variables: this this.begins this.begins[] this.ends this.ends[] n size(this.begins[]) size(this.begins[])-1 size(this.ends[]) size(this.ends[])-1 this.begins[n] this.begins[n-1] this.begins[n..] this.begins[n+1..] this.begins[0..n] this.begins[0..n-1] this.ends[n] this.ends[n-1] this.ends[n..] this.ends[n+1..] this.ends[0..n] this.ends[0..n-1]
n >= 0
n != this.begins.length
===========================================================================
MapQuick1.StreetNumberSet.orderStatistic(int):::EXIT
    Variables: this this.begins this.begins[] this.ends this.ends[] n return orig(this) orig(this.begins) orig(this.begins[]) orig(this.ends) orig(this.ends[]) orig(n) size(this.begins[]) size(this.begins[])-1 size(this.ends[]) size(this.ends[])-1 orig(size(this.begins[])) orig(size(this.begins[]))-1 orig(size(this.ends[])) orig(size(this.ends[]))-1 this.begins[n] this.begins[n-1] this.begins[n..] this.begins[n+1..] this.begins[0..n] this.begins[0..n-1] this.begins[return] this.begins[return-1] this.begins[return..] this.begins[return+1..] this.begins[0..return] this.begins[0..return-1] this.begins[orig(n)] this.begins[orig(n)-1] this.begins[orig(n)..] this.begins[orig(n)+1..] this.begins[0..orig(n)] this.begins[0..orig(n)-1] this.ends[n] this.ends[n-1] this.ends[n..] this.ends[n+1..] this.ends[0..n] this.ends[0..n-1] this.ends[return] this.ends[return-1] this.ends[return..] this.ends[return+1..] this.ends[0..return] this.ends[0..return-1] this.ends[orig(n)] this.ends[orig(n)-1] this.ends[orig(n)..] this.ends[orig(n)+1..] this.ends[0..orig(n)] this.ends[0..orig(n)-1] orig(this.begins[post(n)]) orig(this.begins[post(n)-1]) orig(this.begins[post(n)..]) orig(this.begins[post(n)+1..]) orig(this.begins[0..post(n)]) orig(this.begins[0..post(n)-1]) orig(this.ends[post(n)]) orig(this.ends[post(n)-1]) orig(this.ends[post(n)..]) orig(this.ends[post(n)+1..]) orig(this.ends[0..post(n)]) orig(this.ends[0..post(n)-1]) orig(this.begins[post(return)]) orig(this.begins[post(return)-1]) orig(this.begins[post(return)..]) orig(this.begins[post(return)+1..]) orig(this.begins[0..post(return)]) orig(this.begins[0..post(return)-1]) orig(this.ends[post(return)]) orig(this.ends[post(return)-1]) orig(this.ends[post(return)..]) orig(this.ends[post(return)+1..]) orig(this.ends[0..post(return)]) orig(this.ends[0..post(return)-1]) orig(this.begins[n]) orig(this.begins[n-1]) orig(this.begins[n..]) orig(this.begins[n+1..]) orig(this.begins[0..n]) orig(this.begins[0..n-1]) orig(this.ends[n]) orig(this.ends[n-1]) orig(this.ends[n..]) orig(this.ends[n+1..]) orig(this.ends[0..n]) orig(this.ends[0..n-1])
      Modified primitive arguments: this.begins[n] this.begins[n-1] this.begins[n..] this.begins[n+1..] this.begins[0..n] this.begins[0..n-1] this.ends[n] this.ends[n-1] this.ends[n..] this.ends[n+1..] this.ends[0..n] this.ends[0..n-1]
      Unmodified variables: this this.begins this.begins[] this.ends this.ends[] n size(this.begins[]) size(this.ends[])
this.begins.length == \old(this.ends.length)
\result >= 0
(\old(n) == 0) ==> (\result == 0)
\result <= \old(n)
\old(n) != this.begins.length
===========================================================================
MapQuick1.StreetNumberSet.parityOf(int):::ENTER
    Variables: i
i >= 0
===========================================================================
MapQuick1.StreetNumberSet.parityOf(int):::EXIT
    Variables: i return orig(i)
      Unmodified variables: i
\result == 0 || \result == 1
(\old(i) == 0) ==> (\result == 0)
\result <= \old(i)
\old(i) == (\result | \old(i))
===========================================================================
MapQuick1.StreetNumberSet.size():::ENTER
    Variables: this this.begins this.begins[] this.ends this.ends[] size(this.begins[]) size(this.begins[])-1 size(this.ends[]) size(this.ends[])-1
===========================================================================
MapQuick1.StreetNumberSet.size():::EXIT
    Variables: this this.begins this.begins[] this.ends this.ends[] return orig(this) orig(this.begins) orig(this.begins[]) orig(this.ends) orig(this.ends[]) size(this.begins[]) size(this.begins[])-1 size(this.ends[]) size(this.ends[])-1 orig(size(this.begins[])) orig(size(this.begins[]))-1 orig(size(this.ends[])) orig(size(this.ends[]))-1 this.begins[return] this.begins[return-1] this.begins[return..] this.begins[return+1..] this.begins[0..return] this.begins[0..return-1] this.ends[return] this.ends[return-1] this.ends[return..] this.ends[return+1..] this.ends[0..return] this.ends[0..return-1] orig(this.begins[post(return)]) orig(this.begins[post(return)-1]) orig(this.begins[post(return)..]) orig(this.begins[post(return)+1..]) orig(this.begins[0..post(return)]) orig(this.begins[0..post(return)-1]) orig(this.ends[post(return)]) orig(this.ends[post(return)-1]) orig(this.ends[post(return)..]) orig(this.ends[post(return)+1..]) orig(this.ends[0..post(return)]) orig(this.ends[0..post(return)-1])
      Unmodified variables: this this.begins this.begins[] this.ends this.ends[] size(this.begins[]) size(this.ends[])
this.begins.length == \old(this.ends.length)
\result >= this.begins.length
