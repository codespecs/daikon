===========================================================================
MapQuick1.StreetNumberSet:::OBJECT
    Variables: this this.begins this.begins[] this.ends this.ends[] size(this.begins[]) size(this.begins[])-1 size(this.ends[]) size(this.ends[])-1
this.begins != null
daikon.Quant.noDups(this.begins)
daikon.Quant.eltsGTE(this.begins, 0)
this.ends != null
daikon.Quant.noDups(this.ends)
daikon.Quant.eltsGTE(this.ends, 0)
daikon.Quant.size(this.begins) >= 1
daikon.Quant.size(this.ends) >= 1
===========================================================================
MapQuick1.StreetNumberSet.StreetNumberSet(java.lang.String):::ENTER
    Variables: numbers numbers.toString
numbers != null
warning: method daikon.inv.unary.string.PrintableString.format(OutputFormat:JML) needs to be implemented: numbers.toString is printable
===========================================================================
MapQuick1.StreetNumberSet.StreetNumberSet(java.lang.String):::EXIT
    Variables: this this.begins this.begins[] this.ends this.ends[] numbers numbers.toString orig(numbers) orig(numbers.toString) size(this.begins[]) size(this.begins[])-1 size(this.ends[]) size(this.ends[])-1
numbers.toString().equals(\old(numbers.toString()))
warning: method daikon.inv.unary.string.PrintableString.format(OutputFormat:JML) needs to be implemented: numbers.toString is printable
===========================================================================
MapQuick1.StreetNumberSet.checkRep():::ENTER
    Variables: this this.begins this.begins[] this.ends this.ends[] size(this.begins[]) size(this.begins[])-1 size(this.ends[]) size(this.ends[])-1
===========================================================================
MapQuick1.StreetNumberSet.checkRep():::EXIT
    Variables: this this.begins this.begins[] this.ends this.ends[] orig(this) orig(this.begins) orig(this.begins[]) orig(this.ends) orig(this.ends[]) size(this.begins[]) size(this.begins[])-1 size(this.ends[]) size(this.ends[])-1 orig(size(this.begins[])) orig(size(this.begins[]))-1 orig(size(this.ends[])) orig(size(this.ends[]))-1
this.begins == \old(this.begins)
daikon.Quant.pairwiseEqual(this.begins, \old(this.begins))
this.ends == \old(this.ends)
daikon.Quant.pairwiseEqual(this.ends, \old(this.ends))
===========================================================================
MapQuick1.StreetNumberSet.contains(int):::ENTER
    Variables: this this.begins this.begins[] this.ends this.ends[] n size(this.begins[]) size(this.begins[])-1 size(this.ends[]) size(this.ends[])-1
n >= 0
===========================================================================
MapQuick1.StreetNumberSet.contains(int):::EXIT118
    Variables: this this.begins this.begins[] this.ends this.ends[] n return orig(this) orig(this.begins) orig(this.begins[]) orig(this.ends) orig(this.ends[]) orig(n) size(this.begins[]) size(this.begins[])-1 size(this.ends[]) size(this.ends[])-1 orig(size(this.begins[])) orig(size(this.begins[]))-1 orig(size(this.ends[])) orig(size(this.ends[]))-1
\result == true
===========================================================================
MapQuick1.StreetNumberSet.contains(int):::EXIT123
    Variables: this this.begins this.begins[] this.ends this.ends[] n return orig(this) orig(this.begins) orig(this.begins[]) orig(this.ends) orig(this.ends[]) orig(n) size(this.begins[]) size(this.begins[])-1 size(this.ends[]) size(this.ends[])-1 orig(size(this.begins[])) orig(size(this.begins[]))-1 orig(size(this.ends[])) orig(size(this.ends[]))-1
\result == false
===========================================================================
MapQuick1.StreetNumberSet.contains(int):::EXIT
    Variables: this this.begins this.begins[] this.ends this.ends[] n return orig(this) orig(this.begins) orig(this.begins[]) orig(this.ends) orig(this.ends[]) orig(n) size(this.begins[]) size(this.begins[])-1 size(this.ends[]) size(this.ends[])-1 orig(size(this.begins[])) orig(size(this.begins[]))-1 orig(size(this.ends[])) orig(size(this.ends[]))-1
this.begins == \old(this.begins)
daikon.Quant.pairwiseEqual(this.begins, \old(this.begins))
this.ends == \old(this.ends)
daikon.Quant.pairwiseEqual(this.ends, \old(this.ends))
===========================================================================
MapQuick1.StreetNumberSet.equals(MapQuick1.StreetNumberSet):::ENTER
    Variables: this this.begins this.begins[] this.ends this.ends[] other other.begins other.begins[] other.ends other.ends[] size(this.begins[]) size(this.begins[])-1 size(this.ends[]) size(this.ends[])-1 size(other.begins[]) size(other.begins[])-1 size(other.ends[]) size(other.ends[])-1
(other != null)  ==>  (other.begins != null)
((other != null) && (other.begins != null))  ==>  (daikon.Quant.noDups(other.begins))
((other != null) && (other.begins != null))  ==>  (daikon.Quant.eltsGTE(other.begins, 0))
(other != null)  ==>  (other.ends != null)
((other != null) && (other.ends != null))  ==>  (daikon.Quant.noDups(other.ends))
((other != null) && (other.ends != null))  ==>  (daikon.Quant.eltsGTE(other.ends, 0))
((other != null) && (other.begins != null))  ==>  (daikon.Quant.size(other.begins) >= 1)
((other != null) && (other.ends != null))  ==>  (daikon.Quant.size(other.ends) >= 1)
===========================================================================
MapQuick1.StreetNumberSet.equals(MapQuick1.StreetNumberSet):::EXIT271
    Variables: this this.begins this.begins[] this.ends this.ends[] other other.begins other.begins[] other.ends other.ends[] return orig(this) orig(this.begins) orig(this.begins[]) orig(this.ends) orig(this.ends[]) orig(other) orig(other.begins) orig(other.begins[]) orig(other.ends) orig(other.ends[]) size(this.begins[]) size(this.begins[])-1 size(this.ends[]) size(this.ends[])-1 size(other.begins[]) size(other.begins[])-1 size(other.ends[]) size(other.ends[])-1 orig(size(this.begins[])) orig(size(this.begins[]))-1 orig(size(this.ends[])) orig(size(this.ends[]))-1 orig(size(other.begins[])) orig(size(other.begins[]))-1 orig(size(other.ends[])) orig(size(other.ends[]))-1
assignable other.begins, other.begins[*], other.ends, other.ends[*]
\result == false
\old(other) == null
===========================================================================
MapQuick1.StreetNumberSet.equals(MapQuick1.StreetNumberSet):::EXIT272
    Variables: this this.begins this.begins[] this.ends this.ends[] other other.begins other.begins[] other.ends other.ends[] return orig(this) orig(this.begins) orig(this.begins[]) orig(this.ends) orig(this.ends[]) orig(other) orig(other.begins) orig(other.begins[]) orig(other.ends) orig(other.ends[]) size(this.begins[]) size(this.begins[])-1 size(this.ends[]) size(this.ends[])-1 size(other.begins[]) size(other.begins[])-1 size(other.ends[]) size(other.ends[])-1 orig(size(this.begins[])) orig(size(this.begins[]))-1 orig(size(this.ends[])) orig(size(this.ends[]))-1 orig(size(other.begins[])) orig(size(other.begins[]))-1 orig(size(other.ends[])) orig(size(other.ends[]))-1
this.begins == other.begins
this.begins == \old(other.begins)
this.ends == other.ends
this.ends == \old(other.ends)
daikon.Quant.pairwiseEqual(other.begins, \old(other.begins))
daikon.Quant.pairwiseEqual(other.ends, \old(other.ends))
\old(this) == \old(other)
daikon.Quant.noDups(other.begins)
daikon.Quant.eltsGTE(other.begins, 0)
daikon.Quant.noDups(other.ends)
daikon.Quant.eltsGTE(other.ends, 0)
\result == true
\old(other) != null
daikon.Quant.size(other.begins) >= 1
daikon.Quant.size(other.ends) >= 1
===========================================================================
MapQuick1.StreetNumberSet.equals(MapQuick1.StreetNumberSet):::EXIT281
    Variables: this this.begins this.begins[] this.ends this.ends[] other other.begins other.begins[] other.ends other.ends[] return orig(this) orig(this.begins) orig(this.begins[]) orig(this.ends) orig(this.ends[]) orig(other) orig(other.begins) orig(other.begins[]) orig(other.ends) orig(other.ends[]) size(this.begins[]) size(this.begins[])-1 size(this.ends[]) size(this.ends[])-1 size(other.begins[]) size(other.begins[])-1 size(other.ends[]) size(other.ends[])-1 orig(size(this.begins[])) orig(size(this.begins[]))-1 orig(size(this.ends[])) orig(size(this.ends[]))-1 orig(size(other.begins[])) orig(size(other.begins[]))-1 orig(size(other.ends[])) orig(size(other.ends[]))-1
other.begins == \old(other.begins)
daikon.Quant.pairwiseEqual(other.begins, \old(other.begins))
other.ends == \old(other.ends)
daikon.Quant.pairwiseEqual(other.ends, \old(other.ends))
other.begins != null
daikon.Quant.noDups(other.begins)
daikon.Quant.eltsGTE(other.begins, 0)
other.ends != null
daikon.Quant.noDups(other.ends)
daikon.Quant.eltsGTE(other.ends, 0)
\result == false
\old(other) != null
daikon.Quant.size(other.begins) >= 1
daikon.Quant.size(other.ends) >= 1
===========================================================================
MapQuick1.StreetNumberSet.equals(MapQuick1.StreetNumberSet):::EXIT282
    Variables: this this.begins this.begins[] this.ends this.ends[] other other.begins other.begins[] other.ends other.ends[] return orig(this) orig(this.begins) orig(this.begins[]) orig(this.ends) orig(this.ends[]) orig(other) orig(other.begins) orig(other.begins[]) orig(other.ends) orig(other.ends[]) size(this.begins[]) size(this.begins[])-1 size(this.ends[]) size(this.ends[])-1 size(other.begins[]) size(other.begins[])-1 size(other.ends[]) size(other.ends[])-1 orig(size(this.begins[])) orig(size(this.begins[]))-1 orig(size(this.ends[])) orig(size(this.ends[]))-1 orig(size(other.begins[])) orig(size(other.begins[]))-1 orig(size(other.ends[])) orig(size(other.ends[]))-1
other.begins == \old(other.begins)
daikon.Quant.pairwiseEqual(other.begins, \old(other.begins))
other.ends == \old(other.ends)
daikon.Quant.pairwiseEqual(other.ends, \old(other.ends))
other.begins != null
daikon.Quant.eltsGTE(other.begins, 0)
other.ends != null
daikon.Quant.eltsGTE(other.ends, 0)
\result == false
\old(other) != null
daikon.Quant.size(other.begins) >= 1
daikon.Quant.size(other.ends) >= 1
===========================================================================
MapQuick1.StreetNumberSet.equals(MapQuick1.StreetNumberSet):::EXIT286
    Variables: this this.begins this.begins[] this.ends this.ends[] other other.begins other.begins[] other.ends other.ends[] return orig(this) orig(this.begins) orig(this.begins[]) orig(this.ends) orig(this.ends[]) orig(other) orig(other.begins) orig(other.begins[]) orig(other.ends) orig(other.ends[]) size(this.begins[]) size(this.begins[])-1 size(this.ends[]) size(this.ends[])-1 size(other.begins[]) size(other.begins[])-1 size(other.ends[]) size(other.ends[])-1 orig(size(this.begins[])) orig(size(this.begins[]))-1 orig(size(this.ends[])) orig(size(this.ends[]))-1 orig(size(other.begins[])) orig(size(other.begins[]))-1 orig(size(other.ends[])) orig(size(other.ends[]))-1
other.begins == \old(other.begins)
daikon.Quant.pairwiseEqual(other.begins, \old(other.begins))
other.ends == \old(other.ends)
daikon.Quant.pairwiseEqual(other.ends, \old(other.ends))
other.begins != null
daikon.Quant.eltsGTE(other.begins, 0)
other.ends != null
daikon.Quant.eltsGTE(other.ends, 0)
\result == false
\old(other) != null
===========================================================================
MapQuick1.StreetNumberSet.equals(MapQuick1.StreetNumberSet):::EXIT290
    Variables: this this.begins this.begins[] this.ends this.ends[] other other.begins other.begins[] other.ends other.ends[] return orig(this) orig(this.begins) orig(this.begins[]) orig(this.ends) orig(this.ends[]) orig(other) orig(other.begins) orig(other.begins[]) orig(other.ends) orig(other.ends[]) size(this.begins[]) size(this.begins[])-1 size(this.ends[]) size(this.ends[])-1 size(other.begins[]) size(other.begins[])-1 size(other.ends[]) size(other.ends[])-1 orig(size(this.begins[])) orig(size(this.begins[]))-1 orig(size(this.ends[])) orig(size(this.ends[]))-1 orig(size(other.begins[])) orig(size(other.begins[]))-1 orig(size(other.ends[])) orig(size(other.ends[]))-1
other.begins == \old(other.begins)
daikon.Quant.pairwiseEqual(other.begins, \old(other.begins))
other.ends == \old(other.ends)
daikon.Quant.pairwiseEqual(other.ends, \old(other.ends))
daikon.Quant.eltsGTE(other.begins, 0)
daikon.Quant.eltsGTE(other.ends, 0)
\result == true
===========================================================================
MapQuick1.StreetNumberSet.equals(MapQuick1.StreetNumberSet):::EXIT
    Variables: this this.begins this.begins[] this.ends this.ends[] other other.begins other.begins[] other.ends other.ends[] return orig(this) orig(this.begins) orig(this.begins[]) orig(this.ends) orig(this.ends[]) orig(other) orig(other.begins) orig(other.begins[]) orig(other.ends) orig(other.ends[]) size(this.begins[]) size(this.begins[])-1 size(this.ends[]) size(this.ends[])-1 size(other.begins[]) size(other.begins[])-1 size(other.ends[]) size(other.ends[])-1 orig(size(this.begins[])) orig(size(this.begins[]))-1 orig(size(this.ends[])) orig(size(this.ends[]))-1 orig(size(other.begins[])) orig(size(other.begins[]))-1 orig(size(other.ends[])) orig(size(other.ends[]))-1
this.begins == \old(this.begins)
daikon.Quant.pairwiseEqual(this.begins, \old(this.begins))
this.ends == \old(this.ends)
daikon.Quant.pairwiseEqual(this.ends, \old(this.ends))
((other != null) && (\old(other) != null))  ==>  (other.begins == \old(other.begins))
((other != null) && (other.begins != null) && (\old(other) != null) && (\old(other.begins) != null))  ==>  (daikon.Quant.pairwiseEqual(other.begins, \old(other.begins)))
((other != null) && (\old(other) != null))  ==>  (other.ends == \old(other.ends))
((other != null) && (other.ends != null) && (\old(other) != null) && (\old(other.ends) != null))  ==>  (daikon.Quant.pairwiseEqual(other.ends, \old(other.ends)))
(\result == true)  ==>  (\old(other) != null)
(other != null)  ==>  (other.begins != null)
((other != null) && (other.begins != null))  ==>  (daikon.Quant.noDups(other.begins))
((other != null) && (other.begins != null))  ==>  (daikon.Quant.eltsGTE(other.begins, 0))
(other != null)  ==>  (other.ends != null)
((other != null) && (other.ends != null))  ==>  (daikon.Quant.noDups(other.ends))
((other != null) && (other.ends != null))  ==>  (daikon.Quant.eltsGTE(other.ends, 0))
((other != null) && (other.begins != null))  ==>  (daikon.Quant.size(other.begins) >= 1)
((other != null) && (other.ends != null))  ==>  (daikon.Quant.size(other.ends) >= 1)
===========================================================================
MapQuick1.StreetNumberSet.equals(java.lang.Object):::ENTER
    Variables: this this.begins this.begins[] this.ends this.ends[] o o.getClass().getName() size(this.begins[]) size(this.begins[])-1 size(this.ends[]) size(this.ends[])-1
(o != null)  ==>  (warning: method daikon.inv.unary.string.PrintableString.format(OutputFormat:JML) needs to be implemented: o.getClass().getName() is printable)
===========================================================================
MapQuick1.StreetNumberSet.equals(java.lang.Object):::EXIT
    Variables: this this.begins this.begins[] this.ends this.ends[] o o.getClass().getName() return orig(this) orig(this.begins) orig(this.begins[]) orig(this.ends) orig(this.ends[]) orig(o) orig(o.getClass().getName()) size(this.begins[]) size(this.begins[])-1 size(this.ends[]) size(this.ends[])-1 orig(size(this.begins[])) orig(size(this.begins[]))-1 orig(size(this.ends[])) orig(size(this.ends[]))-1
this.begins == \old(this.begins)
daikon.Quant.pairwiseEqual(this.begins, \old(this.begins))
this.ends == \old(this.ends)
daikon.Quant.pairwiseEqual(this.ends, \old(this.ends))
(\result == true)  ==>  (\old(o) != null)
(\result == true)  ==>  (\old(o.getClass().getName()) == MapQuick1.StreetNumberSet.class.getName())
===========================================================================
MapQuick1.StreetNumberSet.hashCode():::ENTER
    Variables: this this.begins this.begins[] this.ends this.ends[] size(this.begins[]) size(this.begins[])-1 size(this.ends[]) size(this.ends[])-1
daikon.Quant.subsetOf(this.begins, new long[] { 1, 3, 7 })
("oneOf.java.jpp: SEQUENCE unimplemented" != null)
daikon.Quant.subsetOf(this.ends, new long[] { 1, 5, 7 })
("oneOf.java.jpp: SEQUENCE unimplemented" != null)
daikon.Quant.size(this.begins) == 1 || daikon.Quant.size(this.begins) == 3
daikon.Quant.size(this.ends) == 1 || daikon.Quant.size(this.ends) == 3
===========================================================================
MapQuick1.StreetNumberSet.hashCode():::EXIT
    Variables: this this.begins this.begins[] this.ends this.ends[] return orig(this) orig(this.begins) orig(this.begins[]) orig(this.ends) orig(this.ends[]) size(this.begins[]) size(this.begins[])-1 size(this.ends[]) size(this.ends[])-1 orig(size(this.begins[])) orig(size(this.begins[]))-1 orig(size(this.ends[])) orig(size(this.ends[]))-1
this.begins == \old(this.begins)
daikon.Quant.pairwiseEqual(this.begins, \old(this.begins))
this.ends == \old(this.ends)
daikon.Quant.pairwiseEqual(this.ends, \old(this.ends))
daikon.Quant.subsetOf(this.begins, new long[] { 1, 3, 7 })
("oneOf.java.jpp: SEQUENCE unimplemented" != null)
daikon.Quant.subsetOf(this.ends, new long[] { 1, 5, 7 })
("oneOf.java.jpp: SEQUENCE unimplemented" != null)
\result == 122
daikon.Quant.size(this.begins) == 1 || daikon.Quant.size(this.begins) == 3
daikon.Quant.size(this.ends) == 1 || daikon.Quant.size(this.ends) == 3
===========================================================================
MapQuick1.StreetNumberSet.intersects(MapQuick1.StreetNumberSet):::ENTER
    Variables: this this.begins this.begins[] this.ends this.ends[] other other.begins other.begins[] other.ends other.ends[] size(this.begins[]) size(this.begins[])-1 size(this.ends[]) size(this.ends[])-1 size(other.begins[]) size(other.begins[])-1 size(other.ends[]) size(other.ends[])-1
other != null
other.begins != null
daikon.Quant.noDups(other.begins)
daikon.Quant.eltsGTE(other.begins, 0)
other.ends != null
daikon.Quant.noDups(other.ends)
daikon.Quant.eltsGTE(other.ends, 0)
daikon.Quant.size(other.begins) >= 1
daikon.Quant.size(other.ends) >= 1
===========================================================================
MapQuick1.StreetNumberSet.intersects(MapQuick1.StreetNumberSet):::EXIT253
    Variables: this this.begins this.begins[] this.ends this.ends[] other other.begins other.begins[] other.ends other.ends[] return orig(this) orig(this.begins) orig(this.begins[]) orig(this.ends) orig(this.ends[]) orig(other) orig(other.begins) orig(other.begins[]) orig(other.ends) orig(other.ends[]) size(this.begins[]) size(this.begins[])-1 size(this.ends[]) size(this.ends[])-1 size(other.begins[]) size(other.begins[])-1 size(other.ends[]) size(other.ends[])-1 orig(size(this.begins[])) orig(size(this.begins[]))-1 orig(size(this.ends[])) orig(size(this.ends[]))-1 orig(size(other.begins[])) orig(size(other.begins[]))-1 orig(size(other.ends[])) orig(size(other.ends[]))-1
\result == true
===========================================================================
MapQuick1.StreetNumberSet.intersects(MapQuick1.StreetNumberSet):::EXIT257
    Variables: this this.begins this.begins[] this.ends this.ends[] other other.begins other.begins[] other.ends other.ends[] return orig(this) orig(this.begins) orig(this.begins[]) orig(this.ends) orig(this.ends[]) orig(other) orig(other.begins) orig(other.begins[]) orig(other.ends) orig(other.ends[]) size(this.begins[]) size(this.begins[])-1 size(this.ends[]) size(this.ends[])-1 size(other.begins[]) size(other.begins[])-1 size(other.ends[]) size(other.ends[])-1 orig(size(this.begins[])) orig(size(this.begins[]))-1 orig(size(this.ends[])) orig(size(this.ends[]))-1 orig(size(other.begins[])) orig(size(other.begins[]))-1 orig(size(other.ends[])) orig(size(other.ends[]))-1
\result == false
===========================================================================
MapQuick1.StreetNumberSet.intersects(MapQuick1.StreetNumberSet):::EXIT
    Variables: this this.begins this.begins[] this.ends this.ends[] other other.begins other.begins[] other.ends other.ends[] return orig(this) orig(this.begins) orig(this.begins[]) orig(this.ends) orig(this.ends[]) orig(other) orig(other.begins) orig(other.begins[]) orig(other.ends) orig(other.ends[]) size(this.begins[]) size(this.begins[])-1 size(this.ends[]) size(this.ends[])-1 size(other.begins[]) size(other.begins[])-1 size(other.ends[]) size(other.ends[])-1 orig(size(this.begins[])) orig(size(this.begins[]))-1 orig(size(this.ends[])) orig(size(this.ends[]))-1 orig(size(other.begins[])) orig(size(other.begins[]))-1 orig(size(other.ends[])) orig(size(other.ends[]))-1
this.begins == \old(this.begins)
daikon.Quant.pairwiseEqual(this.begins, \old(this.begins))
this.ends == \old(this.ends)
daikon.Quant.pairwiseEqual(this.ends, \old(this.ends))
other.begins == \old(other.begins)
daikon.Quant.pairwiseEqual(other.begins, \old(other.begins))
other.ends == \old(other.ends)
daikon.Quant.pairwiseEqual(other.ends, \old(other.ends))
other.begins != null
daikon.Quant.noDups(other.begins)
daikon.Quant.eltsGTE(other.begins, 0)
other.ends != null
daikon.Quant.noDups(other.ends)
daikon.Quant.eltsGTE(other.ends, 0)
daikon.Quant.size(other.begins) >= 1
daikon.Quant.size(other.ends) >= 1
===========================================================================
MapQuick1.StreetNumberSet.isEmpty():::ENTER
    Variables: this this.begins this.begins[] this.ends this.ends[] size(this.begins[]) size(this.begins[])-1 size(this.ends[]) size(this.ends[])-1
===========================================================================
MapQuick1.StreetNumberSet.isEmpty():::EXIT
    Variables: this this.begins this.begins[] this.ends this.ends[] return orig(this) orig(this.begins) orig(this.begins[]) orig(this.ends) orig(this.ends[]) size(this.begins[]) size(this.begins[])-1 size(this.ends[]) size(this.ends[])-1 orig(size(this.begins[])) orig(size(this.begins[]))-1 orig(size(this.ends[])) orig(size(this.ends[]))-1
this.begins == \old(this.begins)
daikon.Quant.pairwiseEqual(this.begins, \old(this.begins))
this.ends == \old(this.ends)
daikon.Quant.pairwiseEqual(this.ends, \old(this.ends))
\result == false
===========================================================================
MapQuick1.StreetNumberSet.max():::ENTER
    Variables: this this.begins this.begins[] this.ends this.ends[] size(this.begins[]) size(this.begins[])-1 size(this.ends[]) size(this.ends[])-1
===========================================================================
MapQuick1.StreetNumberSet.max():::EXIT
    Variables: this this.begins this.begins[] this.ends this.ends[] return orig(this) orig(this.begins) orig(this.begins[]) orig(this.ends) orig(this.ends[]) size(this.begins[]) size(this.begins[])-1 size(this.ends[]) size(this.ends[])-1 orig(size(this.begins[])) orig(size(this.begins[]))-1 orig(size(this.ends[])) orig(size(this.ends[]))-1
this.begins == \old(this.begins)
daikon.Quant.pairwiseEqual(this.begins, \old(this.begins))
this.ends == \old(this.ends)
daikon.Quant.pairwiseEqual(this.ends, \old(this.ends))
\result >= 0
daikon.Quant.eltsLTE(this.begins, \result)
daikon.Quant.memberOf(\result , this.ends )
daikon.Quant.eltsLTE(this.ends, \result)
===========================================================================
MapQuick1.StreetNumberSet.min():::ENTER
    Variables: this this.begins this.begins[] this.ends this.ends[] size(this.begins[]) size(this.begins[])-1 size(this.ends[]) size(this.ends[])-1
===========================================================================
MapQuick1.StreetNumberSet.min():::EXIT
    Variables: this this.begins this.begins[] this.ends this.ends[] return orig(this) orig(this.begins) orig(this.begins[]) orig(this.ends) orig(this.ends[]) size(this.begins[]) size(this.begins[])-1 size(this.ends[]) size(this.ends[])-1 orig(size(this.begins[])) orig(size(this.begins[]))-1 orig(size(this.ends[])) orig(size(this.ends[]))-1
this.begins == \old(this.begins)
daikon.Quant.pairwiseEqual(this.begins, \old(this.begins))
this.ends == \old(this.ends)
daikon.Quant.pairwiseEqual(this.ends, \old(this.ends))
\result >= 0
daikon.Quant.memberOf(\result , this.begins )
daikon.Quant.eltsGTE(this.begins, \result)
daikon.Quant.eltsGTE(this.ends, \result)
===========================================================================
MapQuick1.StreetNumberSet.orderStatistic(int):::ENTER
    Variables: this this.begins this.begins[] this.ends this.ends[] n size(this.begins[]) size(this.begins[])-1 size(this.ends[]) size(this.ends[])-1
n >= 0
===========================================================================
MapQuick1.StreetNumberSet.orderStatistic(int):::EXIT
    Variables: this this.begins this.begins[] this.ends this.ends[] n return orig(this) orig(this.begins) orig(this.begins[]) orig(this.ends) orig(this.ends[]) orig(n) size(this.begins[]) size(this.begins[])-1 size(this.ends[]) size(this.ends[])-1 orig(size(this.begins[])) orig(size(this.begins[]))-1 orig(size(this.ends[])) orig(size(this.ends[]))-1
this.begins == \old(this.begins)
daikon.Quant.pairwiseEqual(this.begins, \old(this.begins))
this.ends == \old(this.ends)
daikon.Quant.pairwiseEqual(this.ends, \old(this.ends))
\result >= 0
(!(\old(n) == 0)) || (\result == 0)
\result <= \old(n)
===========================================================================
MapQuick1.StreetNumberSet.parityOf(int):::ENTER
    Variables: i
i >= 0
===========================================================================
MapQuick1.StreetNumberSet.parityOf(int):::EXIT
    Variables: i return orig(i)
\result == 0 || \result == 1
(!(\old(i) == 0)) || (\result == 0)
\result <= \old(i)
\old(i) == (\result | \old(i))
===========================================================================
MapQuick1.StreetNumberSet.size():::ENTER
    Variables: this this.begins this.begins[] this.ends this.ends[] size(this.begins[]) size(this.begins[])-1 size(this.ends[]) size(this.ends[])-1
===========================================================================
MapQuick1.StreetNumberSet.size():::EXIT
    Variables: this this.begins this.begins[] this.ends this.ends[] return orig(this) orig(this.begins) orig(this.begins[]) orig(this.ends) orig(this.ends[]) size(this.begins[]) size(this.begins[])-1 size(this.ends[]) size(this.ends[])-1 orig(size(this.begins[])) orig(size(this.begins[]))-1 orig(size(this.ends[])) orig(size(this.ends[]))-1
this.begins == \old(this.begins)
daikon.Quant.pairwiseEqual(this.begins, \old(this.begins))
this.ends == \old(this.ends)
daikon.Quant.pairwiseEqual(this.ends, \old(this.ends))
