===========================================================================
MapQuick1.StreetNumberSet:::OBJECT
size(this.begins[]) == size(this.ends[])
this.begins != null
this.begins[] contains no duplicates
this.begins[] elements >= 0
this.ends != null
this.ends[] contains no duplicates
this.ends[] elements >= 0
size(this.begins[]) >= 1
this.begins[] <= this.ends[] (elementwise)
===========================================================================
MapQuick1.StreetNumberSet.StreetNumberSet(java.lang.String):::ENTER
numbers != null
numbers.toString is printable
===========================================================================
MapQuick1.StreetNumberSet.StreetNumberSet(java.lang.String):::EXIT
numbers.toString == orig(numbers.toString)
numbers.toString is printable
===========================================================================
MapQuick1.StreetNumberSet.checkRep():::ENTER
===========================================================================
MapQuick1.StreetNumberSet.checkRep():::EXIT
this.begins == orig(this.begins)
this.begins[] == orig(this.begins[])
this.ends == orig(this.ends)
this.ends[] == orig(this.ends[])
size(this.begins[]) == orig(size(this.ends[]))
===========================================================================
MapQuick1.StreetNumberSet.contains(int):::ENTER
n >= 0
===========================================================================
MapQuick1.StreetNumberSet.contains(int):::EXIT118
return == true
===========================================================================
MapQuick1.StreetNumberSet.contains(int):::EXIT118;condition="return == true"
===========================================================================
MapQuick1.StreetNumberSet.contains(int):::EXIT123
return == false
===========================================================================
MapQuick1.StreetNumberSet.contains(int):::EXIT123;condition="not(return == true)"
===========================================================================
MapQuick1.StreetNumberSet.contains(int):::EXIT
this.begins == orig(this.begins)
this.begins[] == orig(this.begins[])
this.ends == orig(this.ends)
this.ends[] == orig(this.ends[])
size(this.begins[]) == orig(size(this.ends[]))
===========================================================================
MapQuick1.StreetNumberSet.contains(int):::EXIT;condition="return == true"
return == true
===========================================================================
MapQuick1.StreetNumberSet.contains(int):::EXIT;condition="not(return == true)"
return == false
===========================================================================
MapQuick1.StreetNumberSet.equals(MapQuick1.StreetNumberSet):::ENTER
size(other.begins[]) == size(other.ends[])
other.begins != null
other.begins[] contains no duplicates
other.begins[] elements >= 0
other.ends != null
other.ends[] contains no duplicates
other.ends[] elements >= 0
size(other.begins[]) >= 1
other.begins[] <= other.ends[] (elementwise)
===========================================================================
MapQuick1.StreetNumberSet.equals(MapQuick1.StreetNumberSet):::EXIT271
return == false
orig(other) == null
===========================================================================
MapQuick1.StreetNumberSet.equals(MapQuick1.StreetNumberSet):::EXIT271;condition="not(return == true)"
===========================================================================
MapQuick1.StreetNumberSet.equals(MapQuick1.StreetNumberSet):::EXIT272
this.begins == other.begins
this.begins == orig(other.begins)
this.begins[] == other.begins[]
this.begins[] == orig(other.begins[])
this.ends == other.ends
this.ends == orig(other.ends)
this.ends[] == other.ends[]
this.ends[] == orig(other.ends[])
orig(this) == orig(other)
size(this.begins[]) == size(other.ends[])
size(this.begins[]) == orig(size(other.ends[]))
return == true
orig(other) != null
===========================================================================
MapQuick1.StreetNumberSet.equals(MapQuick1.StreetNumberSet):::EXIT272;condition="return == true"
===========================================================================
MapQuick1.StreetNumberSet.equals(MapQuick1.StreetNumberSet):::EXIT281
return == false
orig(other) != null
===========================================================================
MapQuick1.StreetNumberSet.equals(MapQuick1.StreetNumberSet):::EXIT281;condition="not(return == true)"
===========================================================================
MapQuick1.StreetNumberSet.equals(MapQuick1.StreetNumberSet):::EXIT282
return == false
orig(other) != null
===========================================================================
MapQuick1.StreetNumberSet.equals(MapQuick1.StreetNumberSet):::EXIT282;condition="not(return == true)"
===========================================================================
MapQuick1.StreetNumberSet.equals(MapQuick1.StreetNumberSet):::EXIT286
return == false
orig(other) != null
size(this.begins[]) != size(other.begins[])
size(this.begins[]) != size(other.begins[])-1
size(this.begins[])-1 != size(other.begins[])
size(this.begins[])-1 != size(other.begins[])-1
===========================================================================
MapQuick1.StreetNumberSet.equals(MapQuick1.StreetNumberSet):::EXIT286;condition="not(return == true)"
===========================================================================
MapQuick1.StreetNumberSet.equals(MapQuick1.StreetNumberSet):::EXIT290
return == true
===========================================================================
MapQuick1.StreetNumberSet.equals(MapQuick1.StreetNumberSet):::EXIT290;condition="return == true"
===========================================================================
MapQuick1.StreetNumberSet.equals(MapQuick1.StreetNumberSet):::EXIT
this.begins == orig(this.begins)
this.begins[] == orig(this.begins[])
this.ends == orig(this.ends)
this.ends[] == orig(this.ends[])
other.begins == orig(other.begins)
other.begins[] == orig(other.begins[])
other.ends == orig(other.ends)
other.ends[] == orig(other.ends[])
size(this.begins[]) == orig(size(this.ends[]))
size(other.begins[]) == size(other.ends[])
size(other.begins[]) == orig(size(other.ends[]))
(return == true)  ==>  (orig(other) != null)
other.begins != null
other.begins[] contains no duplicates
other.begins[] elements >= 0
other.ends != null
other.ends[] contains no duplicates
other.ends[] elements >= 0
size(other.begins[]) >= 1
other.begins[] <= other.ends[] (elementwise)
===========================================================================
MapQuick1.StreetNumberSet.equals(MapQuick1.StreetNumberSet):::EXIT;condition="return == true"
return == true
orig(other) != null
===========================================================================
MapQuick1.StreetNumberSet.equals(MapQuick1.StreetNumberSet):::EXIT;condition="not(return == true)"
return == false
===========================================================================
MapQuick1.StreetNumberSet.equals(java.lang.Object):::ENTER
o.getClass().getName() is printable
===========================================================================
MapQuick1.StreetNumberSet.equals(java.lang.Object):::EXIT
this.begins == orig(this.begins)
this.begins[] == orig(this.begins[])
this.ends == orig(this.ends)
this.ends[] == orig(this.ends[])
size(this.begins[]) == orig(size(this.ends[]))
(return == true)  ==>  (orig(o) != null)
(return == true)  ==>  (orig(o.getClass().getName()) == MapQuick1.StreetNumberSet.class)
===========================================================================
MapQuick1.StreetNumberSet.equals(java.lang.Object):::EXIT;condition="return == true"
return == true
orig(o) != null
orig(o.getClass().getName()) == MapQuick1.StreetNumberSet.class
===========================================================================
MapQuick1.StreetNumberSet.equals(java.lang.Object):::EXIT;condition="not(return == true)"
return == false
===========================================================================
MapQuick1.StreetNumberSet.hashCode():::ENTER
this.begins[] elements one of { 1, 3, 7 }
this.begins[] one of { [1], [3, 1, 7] }
this.ends[] elements one of { 1, 5, 7 }
this.ends[] one of { [5, 1, 7], [7] }
size(this.begins[]) one of { 1, 3 }
size(this.begins[]) in this.begins[]
===========================================================================
MapQuick1.StreetNumberSet.hashCode():::EXIT
this.begins == orig(this.begins)
this.begins[] == orig(this.begins[])
this.ends == orig(this.ends)
this.ends[] == orig(this.ends[])
size(this.begins[]) == orig(size(this.ends[]))
this.begins[] elements one of { 1, 3, 7 }
this.begins[] one of { [1], [3, 1, 7] }
this.ends[] elements one of { 1, 5, 7 }
this.ends[] one of { [5, 1, 7], [7] }
return == 122
size(this.begins[]) one of { 1, 3 }
size(this.begins[]) in this.begins[]
===========================================================================
MapQuick1.StreetNumberSet.intersects(MapQuick1.StreetNumberSet):::ENTER
size(other.begins[]) == size(other.ends[])
other != null
other.begins != null
other.begins[] contains no duplicates
other.begins[] elements >= 0
other.ends != null
other.ends[] contains no duplicates
other.ends[] elements >= 0
size(other.begins[]) >= 1
other.begins[] <= other.ends[] (elementwise)
===========================================================================
MapQuick1.StreetNumberSet.intersects(MapQuick1.StreetNumberSet):::EXIT253
return == true
===========================================================================
MapQuick1.StreetNumberSet.intersects(MapQuick1.StreetNumberSet):::EXIT253;condition="return == true"
===========================================================================
MapQuick1.StreetNumberSet.intersects(MapQuick1.StreetNumberSet):::EXIT257
return == false
===========================================================================
MapQuick1.StreetNumberSet.intersects(MapQuick1.StreetNumberSet):::EXIT257;condition="not(return == true)"
===========================================================================
MapQuick1.StreetNumberSet.intersects(MapQuick1.StreetNumberSet):::EXIT
this.begins == orig(this.begins)
this.begins[] == orig(this.begins[])
this.ends == orig(this.ends)
this.ends[] == orig(this.ends[])
other.begins == orig(other.begins)
other.begins[] == orig(other.begins[])
other.ends == orig(other.ends)
other.ends[] == orig(other.ends[])
size(this.begins[]) == orig(size(this.ends[]))
size(other.begins[]) == size(other.ends[])
size(other.begins[]) == orig(size(other.ends[]))
other.begins != null
other.begins[] contains no duplicates
other.begins[] elements >= 0
other.ends != null
other.ends[] contains no duplicates
other.ends[] elements >= 0
size(other.begins[]) >= 1
other.begins[] <= other.ends[] (elementwise)
===========================================================================
MapQuick1.StreetNumberSet.intersects(MapQuick1.StreetNumberSet):::EXIT;condition="return == true"
return == true
===========================================================================
MapQuick1.StreetNumberSet.intersects(MapQuick1.StreetNumberSet):::EXIT;condition="not(return == true)"
return == false
===========================================================================
MapQuick1.StreetNumberSet.isEmpty():::ENTER
===========================================================================
MapQuick1.StreetNumberSet.isEmpty():::EXIT
this.begins == orig(this.begins)
this.begins[] == orig(this.begins[])
this.ends == orig(this.ends)
this.ends[] == orig(this.ends[])
size(this.begins[]) == orig(size(this.ends[]))
return == false
===========================================================================
MapQuick1.StreetNumberSet.isEmpty():::EXIT;condition="not(return == true)"
===========================================================================
MapQuick1.StreetNumberSet.max():::ENTER
===========================================================================
MapQuick1.StreetNumberSet.max():::EXIT
this.begins == orig(this.begins)
this.begins[] == orig(this.begins[])
this.ends == orig(this.ends)
this.ends[] == orig(this.ends[])
size(this.begins[]) == orig(size(this.ends[]))
return >= 0
this.begins[] elements <= return
return in this.ends[]
this.ends[] elements <= return
(return == 0) ==> (size(this.begins[])-1 == 0)
return >= size(this.begins[])-1
===========================================================================
MapQuick1.StreetNumberSet.min():::ENTER
===========================================================================
MapQuick1.StreetNumberSet.min():::EXIT
this.begins == orig(this.begins)
this.begins[] == orig(this.begins[])
this.ends == orig(this.ends)
this.ends[] == orig(this.ends[])
size(this.begins[]) == orig(size(this.ends[]))
return >= 0
return in this.begins[]
this.begins[] elements >= return
this.ends[] elements >= return
===========================================================================
MapQuick1.StreetNumberSet.orderStatistic(int):::ENTER
n >= 0
n != size(this.begins[])
===========================================================================
MapQuick1.StreetNumberSet.orderStatistic(int):::EXIT
this.begins == orig(this.begins)
this.begins[] == orig(this.begins[])
this.ends == orig(this.ends)
this.ends[] == orig(this.ends[])
size(this.begins[]) == orig(size(this.ends[]))
return >= 0
(orig(n) == 0) ==> (return == 0)
return <= orig(n)
orig(n) != size(this.begins[])
===========================================================================
MapQuick1.StreetNumberSet.parityOf(int):::ENTER
i >= 0
===========================================================================
MapQuick1.StreetNumberSet.parityOf(int):::EXIT
return one of { 0, 1 }
(orig(i) == 0) ==> (return == 0)
return <= orig(i)
return is a bitwise subset of orig(i)
===========================================================================
MapQuick1.StreetNumberSet.size():::ENTER
===========================================================================
MapQuick1.StreetNumberSet.size():::EXIT
this.begins == orig(this.begins)
this.begins[] == orig(this.begins[])
this.ends == orig(this.ends)
this.ends[] == orig(this.ends[])
size(this.begins[]) == orig(size(this.ends[]))
return >= size(this.begins[])
