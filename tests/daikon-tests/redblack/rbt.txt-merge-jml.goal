    package DataStructures;

    // RedBlackTree class
    //
    // CONSTRUCTION: with a negative infinity sentinel
    //
    // ******************PUBLIC OPERATIONS*********************
    // void insert( x )       --> Insert x
    // void remove( x )       --> Remove x (unimplemented)
    // Comparable find( x )   --> Return item that matches x
    // Comparable findMin( )  --> Return smallest item
    // Comparable findMax( )  --> Return largest item
    // boolean isEmpty( )     --> Return true if empty; else false
    // void makeEmpty( )      --> Remove all items
    // void printTree( )      --> Print tree in sorted order

    /**
     * Implements a red-black tree.
     * Note that all "matching" is based on the compareTo method.
     * @author Mark Allen Weiss
     */
    public class RedBlackTree
    {
        /*@ invariant this.header.element.getClass().getName() == DataStructures.RedBlackTree.nullNode.element.getClass().getName(); */
        /*@ invariant this.header.left == DataStructures.RedBlackTree.nullNode; */
        /*@ invariant this.header.left.element.getClass().getName() == DataStructures.RedBlackTree.nullNode.element.getClass().getName(); */
        /*@ invariant this.header.left.left == DataStructures.RedBlackTree.nullNode; */
        /*@ invariant this.header.left.right == DataStructures.RedBlackTree.nullNode; */
        /*@ invariant this.header.left.color == this.header.color; */
        /*@ invariant this.header.right.element.getClass().getName() == DataStructures.RedBlackTree.nullNode.element.getClass().getName(); */
        /*@ invariant this != null; */
        /*@ invariant this.header != null; */
        /*@ invariant this.header != null; */
        /*@ invariant this.header.element != null; */
        /*@ invariant this.header.element != null; */
        /*@ invariant this.header.element.getClass().getName() == DataStructures.MyInteger.class.getName(); */
        /*@ invariant this.header.right != null; */
        /*@ invariant this.header.right.left != null; */
        /*@ invariant this.header.right.right != null; */
        /*@ invariant this.header.right.color == 0 || this.header.right.color == 1; */
        /*@ invariant this.header.color == 1; */
        /*@ invariant this.header.right.color <= this.header.color; */
        /*@
        @ public normal_behavior // Generated by Daikon
        @ requires negInf != null;
        @ requires negInf.getClass().getName() == DataStructures.MyInteger.class.getName();
        @ ensures this.header.element == \old(negInf);
        @ ensures this.header.element.getClass().getName() == \old(negInf.getClass().getName());
        @ ensures this.header.left.element == this.header.right.element;
        @ ensures this.header.right == DataStructures.RedBlackTree.nullNode;
        @ ensures this.header.right.left == DataStructures.RedBlackTree.nullNode;
        @ ensures this.header.right.right == DataStructures.RedBlackTree.nullNode;
        @ ensures this.header.right.color == this.header.color;
        @ ensures DataStructures.RedBlackTree.current == DataStructures.RedBlackTree.parent;
        @ ensures DataStructures.RedBlackTree.current == DataStructures.RedBlackTree.grand;
        @ ensures DataStructures.RedBlackTree.current == DataStructures.RedBlackTree.great;
        @ ensures this.header.left.element == null;
        @ ensures DataStructures.RedBlackTree.nullNode.element == null;
        @ ensures DataStructures.RedBlackTree.current == null;
        @*/
        /**
         * Construct the tree.
         * @param negInf a value less than or equal to all others.
         */
        public RedBlackTree( Comparable negInf )
        {
            header      = new RedBlackNode( negInf );
            header.left = header.right = nullNode;
        }

        /*@
        @ public normal_behavior // Generated by Daikon
        @ requires this.header.element.getClass().getName() == item.getClass().getName();
        @ requires this.header.right.color == this.header.color;
        @ requires DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.current.left.left;
        @ requires DataStructures.RedBlackTree.current.left.left == DataStructures.RedBlackTree.current.left.right;
        @ requires DataStructures.RedBlackTree.current.left.left == DataStructures.RedBlackTree.current.right.left;
        @ requires DataStructures.RedBlackTree.current.left.left == DataStructures.RedBlackTree.current.right.right;
        @ requires DataStructures.RedBlackTree.current.left.left == DataStructures.RedBlackTree.parent.left.left;
        @ requires DataStructures.RedBlackTree.current.left.left == DataStructures.RedBlackTree.parent.left.right;
        @ requires DataStructures.RedBlackTree.current.left.left == DataStructures.RedBlackTree.parent.right.left;
        @ requires DataStructures.RedBlackTree.current.left.left == DataStructures.RedBlackTree.parent.right.right;
        @ requires DataStructures.RedBlackTree.current.left.left != null;
        @ requires DataStructures.RedBlackTree.parent.color == 1;
        @ requires DataStructures.RedBlackTree.grand.left.color == 1;
        @ requires item != null;
        @ ensures this.header == \old(this.header);
        @ ensures this.header.element == \old(this.header.element);
        @ ensures this.header.left.element == \old(item);
        @ ensures this.header.right.color == this.header.color;
        @ ensures this.header.color == \old(this.header.left.color);
        @ ensures this.header.color == \old(this.header.right.color);
        @ ensures this.header.color == \old(this.header.color);
        @ ensures DataStructures.RedBlackTree.nullNode == \old(this.header.left);
        @ ensures DataStructures.RedBlackTree.nullNode == \old(this.header.left.left);
        @ ensures DataStructures.RedBlackTree.nullNode == \old(this.header.left.right);
        @ ensures DataStructures.RedBlackTree.nullNode == \old(DataStructures.RedBlackTree.nullNode);
        @ ensures DataStructures.RedBlackTree.nullNode.element.getClass().getName() == \old(this.header.element.getClass().getName());
        @ ensures DataStructures.RedBlackTree.nullNode.element.getClass().getName() == \old(DataStructures.RedBlackTree.nullNode.element.getClass().getName());
        @ ensures DataStructures.RedBlackTree.nullNode.element.getClass().getName() == \old(item.getClass().getName());
        @ ensures DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.current.left.left;
        @ ensures DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.current.left.right;
        @ ensures DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.current.right.left;
        @ ensures DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.current.right.right;
        @ ensures DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.parent.left.left;
        @ ensures DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.parent.left.right;
        @ ensures DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.parent.right.left;
        @ ensures DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.parent.right.right;
        @ ensures DataStructures.RedBlackTree.nullNode.left == \old(DataStructures.RedBlackTree.nullNode.left);
        @ ensures DataStructures.RedBlackTree.nullNode.left == \old(DataStructures.RedBlackTree.nullNode.left.left);
        @ ensures DataStructures.RedBlackTree.nullNode.left == \old(DataStructures.RedBlackTree.nullNode.left.right);
        @ ensures DataStructures.RedBlackTree.nullNode.left == \old(DataStructures.RedBlackTree.nullNode.right);
        @ ensures DataStructures.RedBlackTree.nullNode.left == \old(DataStructures.RedBlackTree.nullNode.right.left);
        @ ensures DataStructures.RedBlackTree.nullNode.left == \old(DataStructures.RedBlackTree.nullNode.right.right);
        @ ensures DataStructures.RedBlackTree.nullNode.left == \old(DataStructures.RedBlackTree.current.left.left);
        @ ensures DataStructures.RedBlackTree.nullNode.left.color == \old(DataStructures.RedBlackTree.nullNode.left.color);
        @ ensures DataStructures.RedBlackTree.nullNode.right.color == \old(DataStructures.RedBlackTree.nullNode.right.color);
        @ ensures DataStructures.RedBlackTree.nullNode.color == \old(DataStructures.RedBlackTree.nullNode.color);
        @ ensures DataStructures.RedBlackTree.parent.color == \old(DataStructures.RedBlackTree.parent.color);
        @ ensures DataStructures.RedBlackTree.grand.left.color == \old(DataStructures.RedBlackTree.grand.left.color);
        @ ensures this.header.right.element != null;
        @ ensures DataStructures.RedBlackTree.nullNode.element != null;
        @ ensures DataStructures.RedBlackTree.current != null;
        @ ensures DataStructures.RedBlackTree.parent != null;
        @ ensures DataStructures.RedBlackTree.parent.color == 1;
        @ ensures DataStructures.RedBlackTree.grand != null;
        @ ensures DataStructures.RedBlackTree.grand.left.color == 1;
        @ ensures DataStructures.RedBlackTree.great != null;
        @*/
        /**
         * Insert into the tree. Does nothing if item already present.
         * @param item the item to insert.
         */
        public void insert( Comparable item )
        {
            current = parent = grand = header;
            nullNode.element = item;

            while( current.element.compareTo( item ) != 0 )
            {
                great = grand; grand = parent; parent = current;
                current = item.compareTo( current.element ) < 0 ?
                             current.left : current.right;

                    // Check if two red children; fix if so
                if( current.left.color == RED && current.right.color == RED )
                     handleReorient( item );
            }

                // Insertion fails if already present
            if( current != nullNode )
                return;
            current = new RedBlackNode( item, nullNode, nullNode );

                // Attach to parent
            if( item.compareTo( parent.element ) < 0 )
                parent.left = current;
            else
                parent.right = current;
            handleReorient( item );
        }

        /*@
        @ public normal_behavior // Generated by Daikon
        @ requires true;
        @*/
        /**
         * Remove from the tree.
         * Not implemented in this version.
         * @param x the item to remove.
         */
        public void remove( Comparable x )
        {
            System.out.println( "Remove is not implemented" );
        }

        /*@
        @ public normal_behavior // Generated by Daikon
        @ requires this.header.right.color == this.header.color;
        @ requires DataStructures.RedBlackTree.nullNode.element == DataStructures.RedBlackTree.current.element;
        @ requires DataStructures.RedBlackTree.nullNode.element == DataStructures.RedBlackTree.current.left.element;
        @ requires DataStructures.RedBlackTree.nullNode.element == DataStructures.RedBlackTree.current.right.element;
        @ requires DataStructures.RedBlackTree.nullNode.element == DataStructures.RedBlackTree.parent.left.element;
        @ requires DataStructures.RedBlackTree.nullNode.element == DataStructures.RedBlackTree.parent.right.element;
        @ requires DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.current.left;
        @ requires DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.current.left.left;
        @ requires DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.current.left.right;
        @ requires DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.current.right;
        @ requires DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.current.right.left;
        @ requires DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.current.right.right;
        @ requires DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.parent.left;
        @ requires DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.parent.left.left;
        @ requires DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.parent.left.right;
        @ requires DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.parent.right.left;
        @ requires DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.parent.right.right;
        @ requires DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.grand.left.left;
        @ requires DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.grand.right.left;
        @ requires DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.grand.right.right;
        @ requires DataStructures.RedBlackTree.parent.element == DataStructures.RedBlackTree.grand.left.element;
        @ requires DataStructures.RedBlackTree.parent.right == DataStructures.RedBlackTree.grand.left.right;
        @ requires DataStructures.RedBlackTree.grand.element == DataStructures.RedBlackTree.great.left.element;
        @ requires DataStructures.RedBlackTree.grand.left == DataStructures.RedBlackTree.great.left.left;
        @ requires DataStructures.RedBlackTree.grand.right == DataStructures.RedBlackTree.great.left.right;
        @ requires this.header.left.element != null;
        @ requires this.header.right != null;
        @ requires this.header.right.element != null;
        @ requires this.header.right.left != null;
        @ requires this.header.right.right != null;
        @ requires DataStructures.RedBlackTree.nullNode.element != null;
        @ requires DataStructures.RedBlackTree.current != null;
        @ requires DataStructures.RedBlackTree.current.left.color == 1;
        @ requires DataStructures.RedBlackTree.current.right.color == 1;
        @ requires DataStructures.RedBlackTree.current.color == 0;
        @ requires DataStructures.RedBlackTree.parent != null;
        @ requires DataStructures.RedBlackTree.parent.element != null;
        @ requires DataStructures.RedBlackTree.parent.left.color == 1;
        @ requires DataStructures.RedBlackTree.parent.right != null;
        @ requires DataStructures.RedBlackTree.parent.right.color == 0;
        @ requires DataStructures.RedBlackTree.parent.color == 1;
        @ requires DataStructures.RedBlackTree.grand != null;
        @ requires DataStructures.RedBlackTree.grand.element != null;
        @ requires DataStructures.RedBlackTree.grand.left != null;
        @ requires DataStructures.RedBlackTree.grand.left.color == 1;
        @ requires DataStructures.RedBlackTree.grand.right != null;
        @ requires DataStructures.RedBlackTree.grand.right.element != null;
        @ requires DataStructures.RedBlackTree.grand.right.color == 1;
        @ requires DataStructures.RedBlackTree.grand.color == 0;
        @ requires DataStructures.RedBlackTree.great != null;
        @ requires DataStructures.RedBlackTree.great.element != null;
        @ requires DataStructures.RedBlackTree.great.left != null;
        @ requires DataStructures.RedBlackTree.great.left.color == 0;
        @ requires DataStructures.RedBlackTree.great.right != null;
        @ requires DataStructures.RedBlackTree.great.right.element != null;
        @ requires DataStructures.RedBlackTree.great.right.left != null;
        @ requires DataStructures.RedBlackTree.great.right.right != null;
        @ requires DataStructures.RedBlackTree.great.right.color == 1;
        @ requires DataStructures.RedBlackTree.great.color == 1;
        @ ensures this.header == \old(this.header);
        @ ensures this.header.element == \old(this.header.element);
        @ ensures this.header.element.getClass().getName() == \result.getClass().getName();
        @ ensures this.header.left.element == \old(this.header.left.element);
        @ ensures this.header.left.element.getClass().getName() == \result.getClass().getName();
        @ ensures this.header.right == \old(this.header.right);
        @ ensures this.header.right.element == \old(this.header.right.element);
        @ ensures this.header.right.element.getClass().getName() == \result.getClass().getName();
        @ ensures this.header.right.left == \old(this.header.right.left);
        @ ensures this.header.right.right == \old(this.header.right.right);
        @ ensures this.header.right.color == this.header.color;
        @ ensures this.header.color == \old(this.header.left.color);
        @ ensures this.header.color == \old(this.header.right.color);
        @ ensures this.header.color == \old(this.header.color);
        @ ensures DataStructures.RedBlackTree.nullNode == \old(this.header.left);
        @ ensures DataStructures.RedBlackTree.nullNode == \old(this.header.left.left);
        @ ensures DataStructures.RedBlackTree.nullNode == \old(this.header.left.right);
        @ ensures DataStructures.RedBlackTree.nullNode == \old(DataStructures.RedBlackTree.nullNode);
        @ ensures DataStructures.RedBlackTree.nullNode.element == DataStructures.RedBlackTree.current.element;
        @ ensures DataStructures.RedBlackTree.nullNode.element == DataStructures.RedBlackTree.current.left.element;
        @ ensures DataStructures.RedBlackTree.nullNode.element == DataStructures.RedBlackTree.current.right.element;
        @ ensures DataStructures.RedBlackTree.nullNode.element == DataStructures.RedBlackTree.parent.left.element;
        @ ensures DataStructures.RedBlackTree.nullNode.element == DataStructures.RedBlackTree.parent.right.element;
        @ ensures DataStructures.RedBlackTree.nullNode.element == \old(DataStructures.RedBlackTree.nullNode.element);
        @ ensures DataStructures.RedBlackTree.nullNode.element == \old(DataStructures.RedBlackTree.nullNode.left.element);
        @ ensures DataStructures.RedBlackTree.nullNode.element == \old(DataStructures.RedBlackTree.nullNode.right.element);
        @ ensures DataStructures.RedBlackTree.nullNode.element == \old(DataStructures.RedBlackTree.current.element);
        @ ensures DataStructures.RedBlackTree.nullNode.element == \old(DataStructures.RedBlackTree.current.left.element);
        @ ensures DataStructures.RedBlackTree.nullNode.element == \old(DataStructures.RedBlackTree.current.right.element);
        @ ensures DataStructures.RedBlackTree.nullNode.element == \old(DataStructures.RedBlackTree.parent.left.element);
        @ ensures DataStructures.RedBlackTree.nullNode.element == \old(DataStructures.RedBlackTree.parent.right.element);
        @ ensures DataStructures.RedBlackTree.nullNode.element.getClass().getName() == \result.getClass().getName();
        @ ensures DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.current.left;
        @ ensures DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.current.left.left;
        @ ensures DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.current.left.right;
        @ ensures DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.current.right;
        @ ensures DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.current.right.left;
        @ ensures DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.current.right.right;
        @ ensures DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.parent.left;
        @ ensures DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.parent.left.left;
        @ ensures DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.parent.left.right;
        @ ensures DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.parent.right.left;
        @ ensures DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.parent.right.right;
        @ ensures DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.grand.left.left;
        @ ensures DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.grand.right.left;
        @ ensures DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.grand.right.right;
        @ ensures DataStructures.RedBlackTree.nullNode.left == \old(DataStructures.RedBlackTree.nullNode.left);
        @ ensures DataStructures.RedBlackTree.nullNode.left == \old(DataStructures.RedBlackTree.nullNode.left.left);
        @ ensures DataStructures.RedBlackTree.nullNode.left == \old(DataStructures.RedBlackTree.nullNode.left.right);
        @ ensures DataStructures.RedBlackTree.nullNode.left == \old(DataStructures.RedBlackTree.nullNode.right);
        @ ensures DataStructures.RedBlackTree.nullNode.left == \old(DataStructures.RedBlackTree.nullNode.right.left);
        @ ensures DataStructures.RedBlackTree.nullNode.left == \old(DataStructures.RedBlackTree.nullNode.right.right);
        @ ensures DataStructures.RedBlackTree.nullNode.left == \old(DataStructures.RedBlackTree.current.left);
        @ ensures DataStructures.RedBlackTree.nullNode.left == \old(DataStructures.RedBlackTree.current.left.left);
        @ ensures DataStructures.RedBlackTree.nullNode.left == \old(DataStructures.RedBlackTree.current.left.right);
        @ ensures DataStructures.RedBlackTree.nullNode.left == \old(DataStructures.RedBlackTree.current.right);
        @ ensures DataStructures.RedBlackTree.nullNode.left == \old(DataStructures.RedBlackTree.current.right.left);
        @ ensures DataStructures.RedBlackTree.nullNode.left == \old(DataStructures.RedBlackTree.current.right.right);
        @ ensures DataStructures.RedBlackTree.nullNode.left == \old(DataStructures.RedBlackTree.parent.left);
        @ ensures DataStructures.RedBlackTree.nullNode.left == \old(DataStructures.RedBlackTree.parent.left.left);
        @ ensures DataStructures.RedBlackTree.nullNode.left == \old(DataStructures.RedBlackTree.parent.left.right);
        @ ensures DataStructures.RedBlackTree.nullNode.left == \old(DataStructures.RedBlackTree.parent.right.left);
        @ ensures DataStructures.RedBlackTree.nullNode.left == \old(DataStructures.RedBlackTree.parent.right.right);
        @ ensures DataStructures.RedBlackTree.nullNode.left == \old(DataStructures.RedBlackTree.grand.left.left);
        @ ensures DataStructures.RedBlackTree.nullNode.left == \old(DataStructures.RedBlackTree.grand.right.left);
        @ ensures DataStructures.RedBlackTree.nullNode.left == \old(DataStructures.RedBlackTree.grand.right.right);
        @ ensures DataStructures.RedBlackTree.nullNode.left.element.getClass().getName() == \result.getClass().getName();
        @ ensures DataStructures.RedBlackTree.nullNode.left.color == \old(DataStructures.RedBlackTree.nullNode.left.color);
        @ ensures DataStructures.RedBlackTree.nullNode.right.element.getClass().getName() == \result.getClass().getName();
        @ ensures DataStructures.RedBlackTree.nullNode.right.color == \old(DataStructures.RedBlackTree.nullNode.right.color);
        @ ensures DataStructures.RedBlackTree.nullNode.color == \old(DataStructures.RedBlackTree.nullNode.color);
        @ ensures DataStructures.RedBlackTree.current == \old(DataStructures.RedBlackTree.current);
        @ ensures DataStructures.RedBlackTree.current.element.getClass().getName() == \result.getClass().getName();
        @ ensures DataStructures.RedBlackTree.current.left.element.getClass().getName() == \result.getClass().getName();
        @ ensures DataStructures.RedBlackTree.current.left.color == \old(DataStructures.RedBlackTree.current.left.color);
        @ ensures DataStructures.RedBlackTree.current.right.element.getClass().getName() == \result.getClass().getName();
        @ ensures DataStructures.RedBlackTree.current.right.color == \old(DataStructures.RedBlackTree.current.right.color);
        @ ensures DataStructures.RedBlackTree.current.color == \old(DataStructures.RedBlackTree.current.color);
        @ ensures DataStructures.RedBlackTree.parent == \old(DataStructures.RedBlackTree.parent);
        @ ensures DataStructures.RedBlackTree.parent.element == DataStructures.RedBlackTree.grand.left.element;
        @ ensures DataStructures.RedBlackTree.parent.element == \old(DataStructures.RedBlackTree.parent.element);
        @ ensures DataStructures.RedBlackTree.parent.element == \old(DataStructures.RedBlackTree.grand.left.element);
        @ ensures DataStructures.RedBlackTree.parent.element.getClass().getName() == \result.getClass().getName();
        @ ensures DataStructures.RedBlackTree.parent.left.element.getClass().getName() == \result.getClass().getName();
        @ ensures DataStructures.RedBlackTree.parent.left.color == \old(DataStructures.RedBlackTree.parent.left.color);
        @ ensures DataStructures.RedBlackTree.parent.right == DataStructures.RedBlackTree.grand.left.right;
        @ ensures DataStructures.RedBlackTree.parent.right == \old(DataStructures.RedBlackTree.parent.right);
        @ ensures DataStructures.RedBlackTree.parent.right == \old(DataStructures.RedBlackTree.grand.left.right);
        @ ensures DataStructures.RedBlackTree.parent.right.element.getClass().getName() == \result.getClass().getName();
        @ ensures DataStructures.RedBlackTree.parent.right.color == \old(DataStructures.RedBlackTree.parent.right.color);
        @ ensures DataStructures.RedBlackTree.parent.color == \old(DataStructures.RedBlackTree.parent.color);
        @ ensures DataStructures.RedBlackTree.grand == \old(DataStructures.RedBlackTree.grand);
        @ ensures DataStructures.RedBlackTree.grand.element == DataStructures.RedBlackTree.great.left.element;
        @ ensures DataStructures.RedBlackTree.grand.element == \old(DataStructures.RedBlackTree.grand.element);
        @ ensures DataStructures.RedBlackTree.grand.element == \old(DataStructures.RedBlackTree.great.left.element);
        @ ensures DataStructures.RedBlackTree.grand.element.getClass().getName() == \result.getClass().getName();
        @ ensures DataStructures.RedBlackTree.grand.left == DataStructures.RedBlackTree.great.left.left;
        @ ensures DataStructures.RedBlackTree.grand.left == \old(DataStructures.RedBlackTree.grand.left);
        @ ensures DataStructures.RedBlackTree.grand.left == \old(DataStructures.RedBlackTree.great.left.left);
        @ ensures DataStructures.RedBlackTree.grand.left.element.getClass().getName() == \result.getClass().getName();
        @ ensures DataStructures.RedBlackTree.grand.left.color == \old(DataStructures.RedBlackTree.grand.left.color);
        @ ensures DataStructures.RedBlackTree.grand.right == DataStructures.RedBlackTree.great.left.right;
        @ ensures DataStructures.RedBlackTree.grand.right == \old(DataStructures.RedBlackTree.grand.right);
        @ ensures DataStructures.RedBlackTree.grand.right == \old(DataStructures.RedBlackTree.great.left.right);
        @ ensures DataStructures.RedBlackTree.grand.right.element == \old(DataStructures.RedBlackTree.grand.right.element);
        @ ensures DataStructures.RedBlackTree.grand.right.element.getClass().getName() == \result.getClass().getName();
        @ ensures DataStructures.RedBlackTree.grand.right.color == \old(DataStructures.RedBlackTree.grand.right.color);
        @ ensures DataStructures.RedBlackTree.grand.color == \old(DataStructures.RedBlackTree.grand.color);
        @ ensures DataStructures.RedBlackTree.great == \old(DataStructures.RedBlackTree.great);
        @ ensures DataStructures.RedBlackTree.great.element == \old(DataStructures.RedBlackTree.great.element);
        @ ensures DataStructures.RedBlackTree.great.element.getClass().getName() == \result.getClass().getName();
        @ ensures DataStructures.RedBlackTree.great.left == \old(DataStructures.RedBlackTree.great.left);
        @ ensures DataStructures.RedBlackTree.great.left.element.getClass().getName() == \result.getClass().getName();
        @ ensures DataStructures.RedBlackTree.great.left.color == \old(DataStructures.RedBlackTree.great.left.color);
        @ ensures DataStructures.RedBlackTree.great.right == \old(DataStructures.RedBlackTree.great.right);
        @ ensures DataStructures.RedBlackTree.great.right.element == \old(DataStructures.RedBlackTree.great.right.element);
        @ ensures DataStructures.RedBlackTree.great.right.element.getClass().getName() == \result.getClass().getName();
        @ ensures DataStructures.RedBlackTree.great.right.left == \old(DataStructures.RedBlackTree.great.right.left);
        @ ensures DataStructures.RedBlackTree.great.right.right == \old(DataStructures.RedBlackTree.great.right.right);
        @ ensures DataStructures.RedBlackTree.great.right.color == \old(DataStructures.RedBlackTree.great.right.color);
        @ ensures DataStructures.RedBlackTree.great.color == \old(DataStructures.RedBlackTree.great.color);
        @ ensures \result.getClass().getName() == \old(this.header.element.getClass().getName());
        @ ensures \result.getClass().getName() == \old(this.header.left.element.getClass().getName());
        @ ensures \result.getClass().getName() == \old(this.header.right.element.getClass().getName());
        @ ensures \result.getClass().getName() == \old(DataStructures.RedBlackTree.nullNode.element.getClass().getName());
        @ ensures \result.getClass().getName() == \old(DataStructures.RedBlackTree.nullNode.left.element.getClass().getName());
        @ ensures \result.getClass().getName() == \old(DataStructures.RedBlackTree.nullNode.right.element.getClass().getName());
        @ ensures \result.getClass().getName() == \old(DataStructures.RedBlackTree.current.element.getClass().getName());
        @ ensures \result.getClass().getName() == \old(DataStructures.RedBlackTree.current.left.element.getClass().getName());
        @ ensures \result.getClass().getName() == \old(DataStructures.RedBlackTree.current.right.element.getClass().getName());
        @ ensures \result.getClass().getName() == \old(DataStructures.RedBlackTree.parent.element.getClass().getName());
        @ ensures \result.getClass().getName() == \old(DataStructures.RedBlackTree.parent.left.element.getClass().getName());
        @ ensures \result.getClass().getName() == \old(DataStructures.RedBlackTree.parent.right.element.getClass().getName());
        @ ensures \result.getClass().getName() == \old(DataStructures.RedBlackTree.grand.element.getClass().getName());
        @ ensures \result.getClass().getName() == \old(DataStructures.RedBlackTree.grand.left.element.getClass().getName());
        @ ensures \result.getClass().getName() == \old(DataStructures.RedBlackTree.grand.right.element.getClass().getName());
        @ ensures \result.getClass().getName() == \old(DataStructures.RedBlackTree.great.element.getClass().getName());
        @ ensures \result.getClass().getName() == \old(DataStructures.RedBlackTree.great.left.element.getClass().getName());
        @ ensures \result.getClass().getName() == \old(DataStructures.RedBlackTree.great.right.element.getClass().getName());
        @ ensures this.header.left.element != null;
        @ ensures this.header.right != null;
        @ ensures this.header.right.element != null;
        @ ensures this.header.right.left != null;
        @ ensures this.header.right.right != null;
        @ ensures DataStructures.RedBlackTree.nullNode.element != null;
        @ ensures DataStructures.RedBlackTree.current != null;
        @ ensures DataStructures.RedBlackTree.current.left.color == 1;
        @ ensures DataStructures.RedBlackTree.current.right.color == 1;
        @ ensures DataStructures.RedBlackTree.current.color == 0;
        @ ensures DataStructures.RedBlackTree.parent != null;
        @ ensures DataStructures.RedBlackTree.parent.element != null;
        @ ensures DataStructures.RedBlackTree.parent.left.color == 1;
        @ ensures DataStructures.RedBlackTree.parent.right != null;
        @ ensures DataStructures.RedBlackTree.parent.right.color == 0;
        @ ensures DataStructures.RedBlackTree.parent.color == 1;
        @ ensures DataStructures.RedBlackTree.grand != null;
        @ ensures DataStructures.RedBlackTree.grand.element != null;
        @ ensures DataStructures.RedBlackTree.grand.left != null;
        @ ensures DataStructures.RedBlackTree.grand.left.color == 1;
        @ ensures DataStructures.RedBlackTree.grand.right != null;
        @ ensures DataStructures.RedBlackTree.grand.right.element != null;
        @ ensures DataStructures.RedBlackTree.grand.right.color == 1;
        @ ensures DataStructures.RedBlackTree.grand.color == 0;
        @ ensures DataStructures.RedBlackTree.great != null;
        @ ensures DataStructures.RedBlackTree.great.element != null;
        @ ensures DataStructures.RedBlackTree.great.left != null;
        @ ensures DataStructures.RedBlackTree.great.left.color == 0;
        @ ensures DataStructures.RedBlackTree.great.right != null;
        @ ensures DataStructures.RedBlackTree.great.right.element != null;
        @ ensures DataStructures.RedBlackTree.great.right.left != null;
        @ ensures DataStructures.RedBlackTree.great.right.right != null;
        @ ensures DataStructures.RedBlackTree.great.right.color == 1;
        @ ensures DataStructures.RedBlackTree.great.color == 1;
        @ ensures \result != null;
        @ ensures \result.getClass().getName() == DataStructures.MyInteger.class.getName();
        @*/
        /**
         * Find the smallest item  the tree.
         * @return the smallest item or null if empty.
         */
        public Comparable findMin( )
        {
            if( isEmpty( ) )
                return null;

            RedBlackNode itr = header.right;

            while( itr.left != nullNode )
                itr = itr.left;

            return itr.element;
        }

        /*@
        @ public normal_behavior // Generated by Daikon
        @ requires this.header.right.color == this.header.color;
        @ requires DataStructures.RedBlackTree.nullNode.element == DataStructures.RedBlackTree.current.element;
        @ requires DataStructures.RedBlackTree.nullNode.element == DataStructures.RedBlackTree.current.left.element;
        @ requires DataStructures.RedBlackTree.nullNode.element == DataStructures.RedBlackTree.current.right.element;
        @ requires DataStructures.RedBlackTree.nullNode.element == DataStructures.RedBlackTree.parent.left.element;
        @ requires DataStructures.RedBlackTree.nullNode.element == DataStructures.RedBlackTree.parent.right.element;
        @ requires DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.current.left;
        @ requires DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.current.left.left;
        @ requires DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.current.left.right;
        @ requires DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.current.right;
        @ requires DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.current.right.left;
        @ requires DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.current.right.right;
        @ requires DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.parent.left;
        @ requires DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.parent.left.left;
        @ requires DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.parent.left.right;
        @ requires DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.parent.right.left;
        @ requires DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.parent.right.right;
        @ requires DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.grand.left.left;
        @ requires DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.grand.right.left;
        @ requires DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.grand.right.right;
        @ requires DataStructures.RedBlackTree.parent.element == DataStructures.RedBlackTree.grand.left.element;
        @ requires DataStructures.RedBlackTree.parent.right == DataStructures.RedBlackTree.grand.left.right;
        @ requires DataStructures.RedBlackTree.grand.element == DataStructures.RedBlackTree.great.left.element;
        @ requires DataStructures.RedBlackTree.grand.left == DataStructures.RedBlackTree.great.left.left;
        @ requires DataStructures.RedBlackTree.grand.right == DataStructures.RedBlackTree.great.left.right;
        @ requires this.header.left.element != null;
        @ requires this.header.right != null;
        @ requires this.header.right.element != null;
        @ requires this.header.right.left != null;
        @ requires this.header.right.right != null;
        @ requires DataStructures.RedBlackTree.nullNode.element != null;
        @ requires DataStructures.RedBlackTree.current != null;
        @ requires DataStructures.RedBlackTree.current.left.color == 1;
        @ requires DataStructures.RedBlackTree.current.right.color == 1;
        @ requires DataStructures.RedBlackTree.current.color == 0;
        @ requires DataStructures.RedBlackTree.parent != null;
        @ requires DataStructures.RedBlackTree.parent.element != null;
        @ requires DataStructures.RedBlackTree.parent.left.color == 1;
        @ requires DataStructures.RedBlackTree.parent.right != null;
        @ requires DataStructures.RedBlackTree.parent.right.color == 0;
        @ requires DataStructures.RedBlackTree.parent.color == 1;
        @ requires DataStructures.RedBlackTree.grand != null;
        @ requires DataStructures.RedBlackTree.grand.element != null;
        @ requires DataStructures.RedBlackTree.grand.left != null;
        @ requires DataStructures.RedBlackTree.grand.left.color == 1;
        @ requires DataStructures.RedBlackTree.grand.right != null;
        @ requires DataStructures.RedBlackTree.grand.right.element != null;
        @ requires DataStructures.RedBlackTree.grand.right.color == 1;
        @ requires DataStructures.RedBlackTree.grand.color == 0;
        @ requires DataStructures.RedBlackTree.great != null;
        @ requires DataStructures.RedBlackTree.great.element != null;
        @ requires DataStructures.RedBlackTree.great.left != null;
        @ requires DataStructures.RedBlackTree.great.left.color == 0;
        @ requires DataStructures.RedBlackTree.great.right != null;
        @ requires DataStructures.RedBlackTree.great.right.element != null;
        @ requires DataStructures.RedBlackTree.great.right.left != null;
        @ requires DataStructures.RedBlackTree.great.right.right != null;
        @ requires DataStructures.RedBlackTree.great.right.color == 1;
        @ requires DataStructures.RedBlackTree.great.color == 1;
        @ ensures this.header == \old(this.header);
        @ ensures this.header.element == \old(this.header.element);
        @ ensures this.header.element.getClass().getName() == \result.getClass().getName();
        @ ensures this.header.left.element == \old(this.header.left.element);
        @ ensures this.header.left.element.getClass().getName() == \result.getClass().getName();
        @ ensures this.header.right == \old(this.header.right);
        @ ensures this.header.right.element == \old(this.header.right.element);
        @ ensures this.header.right.element.getClass().getName() == \result.getClass().getName();
        @ ensures this.header.right.left == \old(this.header.right.left);
        @ ensures this.header.right.right == \old(this.header.right.right);
        @ ensures this.header.right.color == this.header.color;
        @ ensures this.header.color == \old(this.header.left.color);
        @ ensures this.header.color == \old(this.header.right.color);
        @ ensures this.header.color == \old(this.header.color);
        @ ensures DataStructures.RedBlackTree.nullNode == \old(this.header.left);
        @ ensures DataStructures.RedBlackTree.nullNode == \old(this.header.left.left);
        @ ensures DataStructures.RedBlackTree.nullNode == \old(this.header.left.right);
        @ ensures DataStructures.RedBlackTree.nullNode == \old(DataStructures.RedBlackTree.nullNode);
        @ ensures DataStructures.RedBlackTree.nullNode.element == DataStructures.RedBlackTree.current.element;
        @ ensures DataStructures.RedBlackTree.nullNode.element == DataStructures.RedBlackTree.current.left.element;
        @ ensures DataStructures.RedBlackTree.nullNode.element == DataStructures.RedBlackTree.current.right.element;
        @ ensures DataStructures.RedBlackTree.nullNode.element == DataStructures.RedBlackTree.parent.left.element;
        @ ensures DataStructures.RedBlackTree.nullNode.element == DataStructures.RedBlackTree.parent.right.element;
        @ ensures DataStructures.RedBlackTree.nullNode.element == \old(DataStructures.RedBlackTree.nullNode.element);
        @ ensures DataStructures.RedBlackTree.nullNode.element == \old(DataStructures.RedBlackTree.nullNode.left.element);
        @ ensures DataStructures.RedBlackTree.nullNode.element == \old(DataStructures.RedBlackTree.nullNode.right.element);
        @ ensures DataStructures.RedBlackTree.nullNode.element == \old(DataStructures.RedBlackTree.current.element);
        @ ensures DataStructures.RedBlackTree.nullNode.element == \old(DataStructures.RedBlackTree.current.left.element);
        @ ensures DataStructures.RedBlackTree.nullNode.element == \old(DataStructures.RedBlackTree.current.right.element);
        @ ensures DataStructures.RedBlackTree.nullNode.element == \old(DataStructures.RedBlackTree.parent.left.element);
        @ ensures DataStructures.RedBlackTree.nullNode.element == \old(DataStructures.RedBlackTree.parent.right.element);
        @ ensures DataStructures.RedBlackTree.nullNode.element.getClass().getName() == \result.getClass().getName();
        @ ensures DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.current.left;
        @ ensures DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.current.left.left;
        @ ensures DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.current.left.right;
        @ ensures DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.current.right;
        @ ensures DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.current.right.left;
        @ ensures DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.current.right.right;
        @ ensures DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.parent.left;
        @ ensures DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.parent.left.left;
        @ ensures DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.parent.left.right;
        @ ensures DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.parent.right.left;
        @ ensures DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.parent.right.right;
        @ ensures DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.grand.left.left;
        @ ensures DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.grand.right.left;
        @ ensures DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.grand.right.right;
        @ ensures DataStructures.RedBlackTree.nullNode.left == \old(DataStructures.RedBlackTree.nullNode.left);
        @ ensures DataStructures.RedBlackTree.nullNode.left == \old(DataStructures.RedBlackTree.nullNode.left.left);
        @ ensures DataStructures.RedBlackTree.nullNode.left == \old(DataStructures.RedBlackTree.nullNode.left.right);
        @ ensures DataStructures.RedBlackTree.nullNode.left == \old(DataStructures.RedBlackTree.nullNode.right);
        @ ensures DataStructures.RedBlackTree.nullNode.left == \old(DataStructures.RedBlackTree.nullNode.right.left);
        @ ensures DataStructures.RedBlackTree.nullNode.left == \old(DataStructures.RedBlackTree.nullNode.right.right);
        @ ensures DataStructures.RedBlackTree.nullNode.left == \old(DataStructures.RedBlackTree.current.left);
        @ ensures DataStructures.RedBlackTree.nullNode.left == \old(DataStructures.RedBlackTree.current.left.left);
        @ ensures DataStructures.RedBlackTree.nullNode.left == \old(DataStructures.RedBlackTree.current.left.right);
        @ ensures DataStructures.RedBlackTree.nullNode.left == \old(DataStructures.RedBlackTree.current.right);
        @ ensures DataStructures.RedBlackTree.nullNode.left == \old(DataStructures.RedBlackTree.current.right.left);
        @ ensures DataStructures.RedBlackTree.nullNode.left == \old(DataStructures.RedBlackTree.current.right.right);
        @ ensures DataStructures.RedBlackTree.nullNode.left == \old(DataStructures.RedBlackTree.parent.left);
        @ ensures DataStructures.RedBlackTree.nullNode.left == \old(DataStructures.RedBlackTree.parent.left.left);
        @ ensures DataStructures.RedBlackTree.nullNode.left == \old(DataStructures.RedBlackTree.parent.left.right);
        @ ensures DataStructures.RedBlackTree.nullNode.left == \old(DataStructures.RedBlackTree.parent.right.left);
        @ ensures DataStructures.RedBlackTree.nullNode.left == \old(DataStructures.RedBlackTree.parent.right.right);
        @ ensures DataStructures.RedBlackTree.nullNode.left == \old(DataStructures.RedBlackTree.grand.left.left);
        @ ensures DataStructures.RedBlackTree.nullNode.left == \old(DataStructures.RedBlackTree.grand.right.left);
        @ ensures DataStructures.RedBlackTree.nullNode.left == \old(DataStructures.RedBlackTree.grand.right.right);
        @ ensures DataStructures.RedBlackTree.nullNode.left.element.getClass().getName() == \result.getClass().getName();
        @ ensures DataStructures.RedBlackTree.nullNode.left.color == \old(DataStructures.RedBlackTree.nullNode.left.color);
        @ ensures DataStructures.RedBlackTree.nullNode.right.element.getClass().getName() == \result.getClass().getName();
        @ ensures DataStructures.RedBlackTree.nullNode.right.color == \old(DataStructures.RedBlackTree.nullNode.right.color);
        @ ensures DataStructures.RedBlackTree.nullNode.color == \old(DataStructures.RedBlackTree.nullNode.color);
        @ ensures DataStructures.RedBlackTree.current == \old(DataStructures.RedBlackTree.current);
        @ ensures DataStructures.RedBlackTree.current.element.getClass().getName() == \result.getClass().getName();
        @ ensures DataStructures.RedBlackTree.current.left.element.getClass().getName() == \result.getClass().getName();
        @ ensures DataStructures.RedBlackTree.current.left.color == \old(DataStructures.RedBlackTree.current.left.color);
        @ ensures DataStructures.RedBlackTree.current.right.element.getClass().getName() == \result.getClass().getName();
        @ ensures DataStructures.RedBlackTree.current.right.color == \old(DataStructures.RedBlackTree.current.right.color);
        @ ensures DataStructures.RedBlackTree.current.color == \old(DataStructures.RedBlackTree.current.color);
        @ ensures DataStructures.RedBlackTree.parent == \old(DataStructures.RedBlackTree.parent);
        @ ensures DataStructures.RedBlackTree.parent.element == DataStructures.RedBlackTree.grand.left.element;
        @ ensures DataStructures.RedBlackTree.parent.element == \old(DataStructures.RedBlackTree.parent.element);
        @ ensures DataStructures.RedBlackTree.parent.element == \old(DataStructures.RedBlackTree.grand.left.element);
        @ ensures DataStructures.RedBlackTree.parent.element.getClass().getName() == \result.getClass().getName();
        @ ensures DataStructures.RedBlackTree.parent.left.element.getClass().getName() == \result.getClass().getName();
        @ ensures DataStructures.RedBlackTree.parent.left.color == \old(DataStructures.RedBlackTree.parent.left.color);
        @ ensures DataStructures.RedBlackTree.parent.right == DataStructures.RedBlackTree.grand.left.right;
        @ ensures DataStructures.RedBlackTree.parent.right == \old(DataStructures.RedBlackTree.parent.right);
        @ ensures DataStructures.RedBlackTree.parent.right == \old(DataStructures.RedBlackTree.grand.left.right);
        @ ensures DataStructures.RedBlackTree.parent.right.element.getClass().getName() == \result.getClass().getName();
        @ ensures DataStructures.RedBlackTree.parent.right.color == \old(DataStructures.RedBlackTree.parent.right.color);
        @ ensures DataStructures.RedBlackTree.parent.color == \old(DataStructures.RedBlackTree.parent.color);
        @ ensures DataStructures.RedBlackTree.grand == \old(DataStructures.RedBlackTree.grand);
        @ ensures DataStructures.RedBlackTree.grand.element == DataStructures.RedBlackTree.great.left.element;
        @ ensures DataStructures.RedBlackTree.grand.element == \old(DataStructures.RedBlackTree.grand.element);
        @ ensures DataStructures.RedBlackTree.grand.element == \old(DataStructures.RedBlackTree.great.left.element);
        @ ensures DataStructures.RedBlackTree.grand.element.getClass().getName() == \result.getClass().getName();
        @ ensures DataStructures.RedBlackTree.grand.left == DataStructures.RedBlackTree.great.left.left;
        @ ensures DataStructures.RedBlackTree.grand.left == \old(DataStructures.RedBlackTree.grand.left);
        @ ensures DataStructures.RedBlackTree.grand.left == \old(DataStructures.RedBlackTree.great.left.left);
        @ ensures DataStructures.RedBlackTree.grand.left.element.getClass().getName() == \result.getClass().getName();
        @ ensures DataStructures.RedBlackTree.grand.left.color == \old(DataStructures.RedBlackTree.grand.left.color);
        @ ensures DataStructures.RedBlackTree.grand.right == DataStructures.RedBlackTree.great.left.right;
        @ ensures DataStructures.RedBlackTree.grand.right == \old(DataStructures.RedBlackTree.grand.right);
        @ ensures DataStructures.RedBlackTree.grand.right == \old(DataStructures.RedBlackTree.great.left.right);
        @ ensures DataStructures.RedBlackTree.grand.right.element == \old(DataStructures.RedBlackTree.grand.right.element);
        @ ensures DataStructures.RedBlackTree.grand.right.element.getClass().getName() == \result.getClass().getName();
        @ ensures DataStructures.RedBlackTree.grand.right.color == \old(DataStructures.RedBlackTree.grand.right.color);
        @ ensures DataStructures.RedBlackTree.grand.color == \old(DataStructures.RedBlackTree.grand.color);
        @ ensures DataStructures.RedBlackTree.great == \old(DataStructures.RedBlackTree.great);
        @ ensures DataStructures.RedBlackTree.great.element == \old(DataStructures.RedBlackTree.great.element);
        @ ensures DataStructures.RedBlackTree.great.element.getClass().getName() == \result.getClass().getName();
        @ ensures DataStructures.RedBlackTree.great.left == \old(DataStructures.RedBlackTree.great.left);
        @ ensures DataStructures.RedBlackTree.great.left.element.getClass().getName() == \result.getClass().getName();
        @ ensures DataStructures.RedBlackTree.great.left.color == \old(DataStructures.RedBlackTree.great.left.color);
        @ ensures DataStructures.RedBlackTree.great.right == \old(DataStructures.RedBlackTree.great.right);
        @ ensures DataStructures.RedBlackTree.great.right.element == \old(DataStructures.RedBlackTree.great.right.element);
        @ ensures DataStructures.RedBlackTree.great.right.element.getClass().getName() == \result.getClass().getName();
        @ ensures DataStructures.RedBlackTree.great.right.left == \old(DataStructures.RedBlackTree.great.right.left);
        @ ensures DataStructures.RedBlackTree.great.right.right == \old(DataStructures.RedBlackTree.great.right.right);
        @ ensures DataStructures.RedBlackTree.great.right.color == \old(DataStructures.RedBlackTree.great.right.color);
        @ ensures DataStructures.RedBlackTree.great.color == \old(DataStructures.RedBlackTree.great.color);
        @ ensures \result.getClass().getName() == \old(this.header.element.getClass().getName());
        @ ensures \result.getClass().getName() == \old(this.header.left.element.getClass().getName());
        @ ensures \result.getClass().getName() == \old(this.header.right.element.getClass().getName());
        @ ensures \result.getClass().getName() == \old(DataStructures.RedBlackTree.nullNode.element.getClass().getName());
        @ ensures \result.getClass().getName() == \old(DataStructures.RedBlackTree.nullNode.left.element.getClass().getName());
        @ ensures \result.getClass().getName() == \old(DataStructures.RedBlackTree.nullNode.right.element.getClass().getName());
        @ ensures \result.getClass().getName() == \old(DataStructures.RedBlackTree.current.element.getClass().getName());
        @ ensures \result.getClass().getName() == \old(DataStructures.RedBlackTree.current.left.element.getClass().getName());
        @ ensures \result.getClass().getName() == \old(DataStructures.RedBlackTree.current.right.element.getClass().getName());
        @ ensures \result.getClass().getName() == \old(DataStructures.RedBlackTree.parent.element.getClass().getName());
        @ ensures \result.getClass().getName() == \old(DataStructures.RedBlackTree.parent.left.element.getClass().getName());
        @ ensures \result.getClass().getName() == \old(DataStructures.RedBlackTree.parent.right.element.getClass().getName());
        @ ensures \result.getClass().getName() == \old(DataStructures.RedBlackTree.grand.element.getClass().getName());
        @ ensures \result.getClass().getName() == \old(DataStructures.RedBlackTree.grand.left.element.getClass().getName());
        @ ensures \result.getClass().getName() == \old(DataStructures.RedBlackTree.grand.right.element.getClass().getName());
        @ ensures \result.getClass().getName() == \old(DataStructures.RedBlackTree.great.element.getClass().getName());
        @ ensures \result.getClass().getName() == \old(DataStructures.RedBlackTree.great.left.element.getClass().getName());
        @ ensures \result.getClass().getName() == \old(DataStructures.RedBlackTree.great.right.element.getClass().getName());
        @ ensures this.header.left.element != null;
        @ ensures this.header.right != null;
        @ ensures this.header.right.element != null;
        @ ensures this.header.right.left != null;
        @ ensures this.header.right.right != null;
        @ ensures DataStructures.RedBlackTree.nullNode.element != null;
        @ ensures DataStructures.RedBlackTree.current != null;
        @ ensures DataStructures.RedBlackTree.current.left.color == 1;
        @ ensures DataStructures.RedBlackTree.current.right.color == 1;
        @ ensures DataStructures.RedBlackTree.current.color == 0;
        @ ensures DataStructures.RedBlackTree.parent != null;
        @ ensures DataStructures.RedBlackTree.parent.element != null;
        @ ensures DataStructures.RedBlackTree.parent.left.color == 1;
        @ ensures DataStructures.RedBlackTree.parent.right != null;
        @ ensures DataStructures.RedBlackTree.parent.right.color == 0;
        @ ensures DataStructures.RedBlackTree.parent.color == 1;
        @ ensures DataStructures.RedBlackTree.grand != null;
        @ ensures DataStructures.RedBlackTree.grand.element != null;
        @ ensures DataStructures.RedBlackTree.grand.left != null;
        @ ensures DataStructures.RedBlackTree.grand.left.color == 1;
        @ ensures DataStructures.RedBlackTree.grand.right != null;
        @ ensures DataStructures.RedBlackTree.grand.right.element != null;
        @ ensures DataStructures.RedBlackTree.grand.right.color == 1;
        @ ensures DataStructures.RedBlackTree.grand.color == 0;
        @ ensures DataStructures.RedBlackTree.great != null;
        @ ensures DataStructures.RedBlackTree.great.element != null;
        @ ensures DataStructures.RedBlackTree.great.left != null;
        @ ensures DataStructures.RedBlackTree.great.left.color == 0;
        @ ensures DataStructures.RedBlackTree.great.right != null;
        @ ensures DataStructures.RedBlackTree.great.right.element != null;
        @ ensures DataStructures.RedBlackTree.great.right.left != null;
        @ ensures DataStructures.RedBlackTree.great.right.right != null;
        @ ensures DataStructures.RedBlackTree.great.right.color == 1;
        @ ensures DataStructures.RedBlackTree.great.color == 1;
        @ ensures \result != null;
        @ ensures \result.getClass().getName() == DataStructures.MyInteger.class.getName();
        @*/
        /**
         * Find the largest item in the tree.
         * @return the largest item or null if empty.
         */
        public Comparable findMax( )
        {
            if( isEmpty( ) )
                return null;

            RedBlackNode itr = header.right;

            while( itr.right != nullNode )
                itr = itr.right;

            return itr.element;
        }

        /*@
        @ public normal_behavior // Generated by Daikon
        @ requires this.header.right.color == this.header.color;
        @ requires DataStructures.RedBlackTree.nullNode.element == DataStructures.RedBlackTree.parent.left.element;
        @ requires DataStructures.RedBlackTree.nullNode.element.getClass().getName() == x.getClass().getName();
        @ requires DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.parent.left;
        @ requires DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.parent.left.left;
        @ requires DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.parent.left.right;
        @ requires DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.parent.right.left;
        @ requires DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.parent.right.right;
        @ requires DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.grand.left.left;
        @ requires DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.grand.right.left;
        @ requires DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.grand.right.right;
        @ requires DataStructures.RedBlackTree.parent.element == DataStructures.RedBlackTree.grand.left.element;
        @ requires DataStructures.RedBlackTree.parent.right == DataStructures.RedBlackTree.grand.left.right;
        @ requires DataStructures.RedBlackTree.grand.element == DataStructures.RedBlackTree.great.left.element;
        @ requires DataStructures.RedBlackTree.grand.left == DataStructures.RedBlackTree.great.left.left;
        @ requires DataStructures.RedBlackTree.grand.right == DataStructures.RedBlackTree.great.left.right;
        @ requires this.header.left.element != null;
        @ requires this.header.right != null;
        @ requires this.header.right.element != null;
        @ requires this.header.right.element != null;
        @ requires this.header.right.left != null;
        @ requires this.header.right.right != null;
        @ requires DataStructures.RedBlackTree.nullNode.element != null;
        @ requires DataStructures.RedBlackTree.current != null;
        @ requires DataStructures.RedBlackTree.parent != null;
        @ requires DataStructures.RedBlackTree.parent != null;
        @ requires DataStructures.RedBlackTree.parent.element != null;
        @ requires DataStructures.RedBlackTree.parent.left.color == 1;
        @ requires DataStructures.RedBlackTree.parent.right != null;
        @ requires DataStructures.RedBlackTree.parent.right.element != null;
        @ requires DataStructures.RedBlackTree.parent.right.color == 0;
        @ requires DataStructures.RedBlackTree.parent.color == 1;
        @ requires DataStructures.RedBlackTree.grand != null;
        @ requires DataStructures.RedBlackTree.grand != null;
        @ requires DataStructures.RedBlackTree.grand.element != null;
        @ requires DataStructures.RedBlackTree.grand.left != null;
        @ requires DataStructures.RedBlackTree.grand.left.color == 1;
        @ requires DataStructures.RedBlackTree.grand.right != null;
        @ requires DataStructures.RedBlackTree.grand.right.element != null;
        @ requires DataStructures.RedBlackTree.grand.right.color == 1;
        @ requires DataStructures.RedBlackTree.grand.color == 0;
        @ requires DataStructures.RedBlackTree.great != null;
        @ requires DataStructures.RedBlackTree.great != null;
        @ requires DataStructures.RedBlackTree.great.element != null;
        @ requires DataStructures.RedBlackTree.great.left != null;
        @ requires DataStructures.RedBlackTree.great.left.color == 0;
        @ requires DataStructures.RedBlackTree.great.right != null;
        @ requires DataStructures.RedBlackTree.great.right.element != null;
        @ requires DataStructures.RedBlackTree.great.right.left != null;
        @ requires DataStructures.RedBlackTree.great.right.right != null;
        @ requires DataStructures.RedBlackTree.great.right.color == 1;
        @ requires DataStructures.RedBlackTree.great.color == 1;
        @ requires x != null;
        @ ensures this.header == \old(this.header);
        @ ensures this.header.element == \old(this.header.element);
        @ ensures this.header.element.getClass().getName() == \result.getClass().getName();
        @ ensures this.header.left.element == \old(x);
        @ ensures this.header.left.element.getClass().getName() == \result.getClass().getName();
        @ ensures this.header.right == \old(this.header.right);
        @ ensures this.header.right.element == \old(this.header.right.element);
        @ ensures this.header.right.element.getClass().getName() == \result.getClass().getName();
        @ ensures this.header.right.left == \old(this.header.right.left);
        @ ensures this.header.right.right == \old(this.header.right.right);
        @ ensures this.header.right.color == this.header.color;
        @ ensures this.header.color == \old(this.header.left.color);
        @ ensures this.header.color == \old(this.header.right.color);
        @ ensures this.header.color == \old(this.header.color);
        @ ensures DataStructures.RedBlackTree.nullNode == \old(this.header.left);
        @ ensures DataStructures.RedBlackTree.nullNode == \old(this.header.left.left);
        @ ensures DataStructures.RedBlackTree.nullNode == \old(this.header.left.right);
        @ ensures DataStructures.RedBlackTree.nullNode == \old(DataStructures.RedBlackTree.nullNode);
        @ ensures DataStructures.RedBlackTree.nullNode.element == DataStructures.RedBlackTree.parent.left.element;
        @ ensures DataStructures.RedBlackTree.nullNode.element.getClass().getName() == \result.getClass().getName();
        @ ensures DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.parent.left;
        @ ensures DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.parent.left.left;
        @ ensures DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.parent.left.right;
        @ ensures DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.parent.right.left;
        @ ensures DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.parent.right.right;
        @ ensures DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.grand.left.left;
        @ ensures DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.grand.right.left;
        @ ensures DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.grand.right.right;
        @ ensures DataStructures.RedBlackTree.nullNode.left == \old(DataStructures.RedBlackTree.nullNode.left);
        @ ensures DataStructures.RedBlackTree.nullNode.left == \old(DataStructures.RedBlackTree.nullNode.left.left);
        @ ensures DataStructures.RedBlackTree.nullNode.left == \old(DataStructures.RedBlackTree.nullNode.left.right);
        @ ensures DataStructures.RedBlackTree.nullNode.left == \old(DataStructures.RedBlackTree.nullNode.right);
        @ ensures DataStructures.RedBlackTree.nullNode.left == \old(DataStructures.RedBlackTree.nullNode.right.left);
        @ ensures DataStructures.RedBlackTree.nullNode.left == \old(DataStructures.RedBlackTree.nullNode.right.right);
        @ ensures DataStructures.RedBlackTree.nullNode.left == \old(DataStructures.RedBlackTree.parent.left);
        @ ensures DataStructures.RedBlackTree.nullNode.left == \old(DataStructures.RedBlackTree.parent.left.left);
        @ ensures DataStructures.RedBlackTree.nullNode.left == \old(DataStructures.RedBlackTree.parent.left.right);
        @ ensures DataStructures.RedBlackTree.nullNode.left == \old(DataStructures.RedBlackTree.parent.right.left);
        @ ensures DataStructures.RedBlackTree.nullNode.left == \old(DataStructures.RedBlackTree.parent.right.right);
        @ ensures DataStructures.RedBlackTree.nullNode.left == \old(DataStructures.RedBlackTree.grand.left.left);
        @ ensures DataStructures.RedBlackTree.nullNode.left == \old(DataStructures.RedBlackTree.grand.right.left);
        @ ensures DataStructures.RedBlackTree.nullNode.left == \old(DataStructures.RedBlackTree.grand.right.right);
        @ ensures DataStructures.RedBlackTree.nullNode.left.element.getClass().getName() == \result.getClass().getName();
        @ ensures DataStructures.RedBlackTree.nullNode.left.color == \old(DataStructures.RedBlackTree.nullNode.left.color);
        @ ensures DataStructures.RedBlackTree.nullNode.right.element.getClass().getName() == \result.getClass().getName();
        @ ensures DataStructures.RedBlackTree.nullNode.right.color == \old(DataStructures.RedBlackTree.nullNode.right.color);
        @ ensures DataStructures.RedBlackTree.nullNode.color == \old(DataStructures.RedBlackTree.nullNode.color);
        @ ensures DataStructures.RedBlackTree.current.element.getClass().getName() == \result.getClass().getName();
        @ ensures DataStructures.RedBlackTree.current.left.element.getClass().getName() == \result.getClass().getName();
        @ ensures DataStructures.RedBlackTree.current.right.element.getClass().getName() == \result.getClass().getName();
        @ ensures DataStructures.RedBlackTree.parent == \old(DataStructures.RedBlackTree.parent);
        @ ensures DataStructures.RedBlackTree.parent.element == DataStructures.RedBlackTree.grand.left.element;
        @ ensures DataStructures.RedBlackTree.parent.element == \old(DataStructures.RedBlackTree.parent.element);
        @ ensures DataStructures.RedBlackTree.parent.element == \old(DataStructures.RedBlackTree.grand.left.element);
        @ ensures DataStructures.RedBlackTree.parent.element.getClass().getName() == \result.getClass().getName();
        @ ensures DataStructures.RedBlackTree.parent.left.element.getClass().getName() == \result.getClass().getName();
        @ ensures DataStructures.RedBlackTree.parent.left.color == \old(DataStructures.RedBlackTree.parent.left.color);
        @ ensures DataStructures.RedBlackTree.parent.right == DataStructures.RedBlackTree.grand.left.right;
        @ ensures DataStructures.RedBlackTree.parent.right == \old(DataStructures.RedBlackTree.parent.right);
        @ ensures DataStructures.RedBlackTree.parent.right == \old(DataStructures.RedBlackTree.grand.left.right);
        @ ensures DataStructures.RedBlackTree.parent.right.element == \old(DataStructures.RedBlackTree.parent.right.element);
        @ ensures DataStructures.RedBlackTree.parent.right.element.getClass().getName() == \result.getClass().getName();
        @ ensures DataStructures.RedBlackTree.parent.right.color == \old(DataStructures.RedBlackTree.parent.right.color);
        @ ensures DataStructures.RedBlackTree.parent.color == \old(DataStructures.RedBlackTree.parent.color);
        @ ensures DataStructures.RedBlackTree.grand == \old(DataStructures.RedBlackTree.grand);
        @ ensures DataStructures.RedBlackTree.grand.element == DataStructures.RedBlackTree.great.left.element;
        @ ensures DataStructures.RedBlackTree.grand.element == \old(DataStructures.RedBlackTree.grand.element);
        @ ensures DataStructures.RedBlackTree.grand.element == \old(DataStructures.RedBlackTree.great.left.element);
        @ ensures DataStructures.RedBlackTree.grand.element.getClass().getName() == \result.getClass().getName();
        @ ensures DataStructures.RedBlackTree.grand.left == DataStructures.RedBlackTree.great.left.left;
        @ ensures DataStructures.RedBlackTree.grand.left == \old(DataStructures.RedBlackTree.grand.left);
        @ ensures DataStructures.RedBlackTree.grand.left == \old(DataStructures.RedBlackTree.great.left.left);
        @ ensures DataStructures.RedBlackTree.grand.left.element.getClass().getName() == \result.getClass().getName();
        @ ensures DataStructures.RedBlackTree.grand.left.color == \old(DataStructures.RedBlackTree.grand.left.color);
        @ ensures DataStructures.RedBlackTree.grand.right == DataStructures.RedBlackTree.great.left.right;
        @ ensures DataStructures.RedBlackTree.grand.right == \old(DataStructures.RedBlackTree.grand.right);
        @ ensures DataStructures.RedBlackTree.grand.right == \old(DataStructures.RedBlackTree.great.left.right);
        @ ensures DataStructures.RedBlackTree.grand.right.element == \old(DataStructures.RedBlackTree.grand.right.element);
        @ ensures DataStructures.RedBlackTree.grand.right.element.getClass().getName() == \result.getClass().getName();
        @ ensures DataStructures.RedBlackTree.grand.right.color == \old(DataStructures.RedBlackTree.grand.right.color);
        @ ensures DataStructures.RedBlackTree.grand.color == \old(DataStructures.RedBlackTree.grand.color);
        @ ensures DataStructures.RedBlackTree.great == \old(DataStructures.RedBlackTree.great);
        @ ensures DataStructures.RedBlackTree.great.element == \old(DataStructures.RedBlackTree.great.element);
        @ ensures DataStructures.RedBlackTree.great.element.getClass().getName() == \result.getClass().getName();
        @ ensures DataStructures.RedBlackTree.great.left == \old(DataStructures.RedBlackTree.great.left);
        @ ensures DataStructures.RedBlackTree.great.left.element.getClass().getName() == \result.getClass().getName();
        @ ensures DataStructures.RedBlackTree.great.left.color == \old(DataStructures.RedBlackTree.great.left.color);
        @ ensures DataStructures.RedBlackTree.great.right == \old(DataStructures.RedBlackTree.great.right);
        @ ensures DataStructures.RedBlackTree.great.right.element == \old(DataStructures.RedBlackTree.great.right.element);
        @ ensures DataStructures.RedBlackTree.great.right.element.getClass().getName() == \result.getClass().getName();
        @ ensures DataStructures.RedBlackTree.great.right.left == \old(DataStructures.RedBlackTree.great.right.left);
        @ ensures DataStructures.RedBlackTree.great.right.right == \old(DataStructures.RedBlackTree.great.right.right);
        @ ensures DataStructures.RedBlackTree.great.right.color == \old(DataStructures.RedBlackTree.great.right.color);
        @ ensures DataStructures.RedBlackTree.great.color == \old(DataStructures.RedBlackTree.great.color);
        @ ensures \result.getClass().getName() == \old(this.header.element.getClass().getName());
        @ ensures \result.getClass().getName() == \old(this.header.left.element.getClass().getName());
        @ ensures \result.getClass().getName() == \old(this.header.right.element.getClass().getName());
        @ ensures \result.getClass().getName() == \old(DataStructures.RedBlackTree.nullNode.element.getClass().getName());
        @ ensures \result.getClass().getName() == \old(DataStructures.RedBlackTree.nullNode.left.element.getClass().getName());
        @ ensures \result.getClass().getName() == \old(DataStructures.RedBlackTree.nullNode.right.element.getClass().getName());
        @ ensures \result.getClass().getName() == \old(DataStructures.RedBlackTree.current.element.getClass().getName());
        @ ensures \result.getClass().getName() == \old(DataStructures.RedBlackTree.current.left.element.getClass().getName());
        @ ensures \result.getClass().getName() == \old(DataStructures.RedBlackTree.current.right.element.getClass().getName());
        @ ensures \result.getClass().getName() == \old(DataStructures.RedBlackTree.parent.element.getClass().getName());
        @ ensures \result.getClass().getName() == \old(DataStructures.RedBlackTree.parent.left.element.getClass().getName());
        @ ensures \result.getClass().getName() == \old(DataStructures.RedBlackTree.parent.right.element.getClass().getName());
        @ ensures \result.getClass().getName() == \old(DataStructures.RedBlackTree.grand.element.getClass().getName());
        @ ensures \result.getClass().getName() == \old(DataStructures.RedBlackTree.grand.left.element.getClass().getName());
        @ ensures \result.getClass().getName() == \old(DataStructures.RedBlackTree.grand.right.element.getClass().getName());
        @ ensures \result.getClass().getName() == \old(DataStructures.RedBlackTree.great.element.getClass().getName());
        @ ensures \result.getClass().getName() == \old(DataStructures.RedBlackTree.great.left.element.getClass().getName());
        @ ensures \result.getClass().getName() == \old(DataStructures.RedBlackTree.great.right.element.getClass().getName());
        @ ensures \result.getClass().getName() == \old(x.getClass().getName());
        @ ensures this.header.right != null;
        @ ensures this.header.right.element != null;
        @ ensures this.header.right.element != null;
        @ ensures this.header.right.left != null;
        @ ensures this.header.right.right != null;
        @ ensures DataStructures.RedBlackTree.nullNode.element != null;
        @ ensures DataStructures.RedBlackTree.current != null;
        @ ensures DataStructures.RedBlackTree.parent != null;
        @ ensures DataStructures.RedBlackTree.parent != null;
        @ ensures DataStructures.RedBlackTree.parent.element != null;
        @ ensures DataStructures.RedBlackTree.parent.left.color == 1;
        @ ensures DataStructures.RedBlackTree.parent.right != null;
        @ ensures DataStructures.RedBlackTree.parent.right.element != null;
        @ ensures DataStructures.RedBlackTree.parent.right.color == 0;
        @ ensures DataStructures.RedBlackTree.parent.color == 1;
        @ ensures DataStructures.RedBlackTree.grand != null;
        @ ensures DataStructures.RedBlackTree.grand != null;
        @ ensures DataStructures.RedBlackTree.grand.element != null;
        @ ensures DataStructures.RedBlackTree.grand.left != null;
        @ ensures DataStructures.RedBlackTree.grand.left.color == 1;
        @ ensures DataStructures.RedBlackTree.grand.right != null;
        @ ensures DataStructures.RedBlackTree.grand.right.element != null;
        @ ensures DataStructures.RedBlackTree.grand.right.color == 1;
        @ ensures DataStructures.RedBlackTree.grand.color == 0;
        @ ensures DataStructures.RedBlackTree.great != null;
        @ ensures DataStructures.RedBlackTree.great != null;
        @ ensures DataStructures.RedBlackTree.great.element != null;
        @ ensures DataStructures.RedBlackTree.great.left != null;
        @ ensures DataStructures.RedBlackTree.great.left.color == 0;
        @ ensures DataStructures.RedBlackTree.great.right != null;
        @ ensures DataStructures.RedBlackTree.great.right.element != null;
        @ ensures DataStructures.RedBlackTree.great.right.left != null;
        @ ensures DataStructures.RedBlackTree.great.right.right != null;
        @ ensures DataStructures.RedBlackTree.great.right.color == 1;
        @ ensures DataStructures.RedBlackTree.great.color == 1;
        @ ensures \result != null;
        @ ensures \result.getClass().getName() == DataStructures.MyInteger.class.getName();
        @*/
        /**
         * Find an item in the tree.
         * @param x the item to search for.
         * @return the matching item or null if not found.
         */
        public Comparable find( Comparable x )
        {
            nullNode.element = x;
            current = header.right;

            for( ; ; )
            {
                if( x.compareTo( current.element ) < 0 )
                    current = current.left;
                else if( x.compareTo( current.element ) > 0 ) 
                    current = current.right;
                else if( current != nullNode )
                    return current.element;
                else
                    return null;
            }
        }

        /*@
        @ public normal_behavior // Generated by Daikon
        @ requires true;
        @*/
        /**
         * Make the tree logically empty.
         */
        public void makeEmpty( )
        {
            header.right = nullNode;
        }

        /*@
        @ public normal_behavior // Generated by Daikon
        @ requires this.header.right.color == this.header.color;
        @ requires DataStructures.RedBlackTree.nullNode.element == DataStructures.RedBlackTree.current.element;
        @ requires DataStructures.RedBlackTree.nullNode.element == DataStructures.RedBlackTree.current.left.element;
        @ requires DataStructures.RedBlackTree.nullNode.element == DataStructures.RedBlackTree.current.right.element;
        @ requires DataStructures.RedBlackTree.nullNode.element == DataStructures.RedBlackTree.parent.left.element;
        @ requires DataStructures.RedBlackTree.nullNode.element == DataStructures.RedBlackTree.parent.right.element;
        @ requires DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.current.left;
        @ requires DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.current.left.left;
        @ requires DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.current.left.right;
        @ requires DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.current.right;
        @ requires DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.current.right.left;
        @ requires DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.current.right.right;
        @ requires DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.parent.left;
        @ requires DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.parent.left.left;
        @ requires DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.parent.left.right;
        @ requires DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.parent.right.left;
        @ requires DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.parent.right.right;
        @ requires DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.grand.left.left;
        @ requires DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.grand.right.left;
        @ requires DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.grand.right.right;
        @ requires DataStructures.RedBlackTree.parent.element == DataStructures.RedBlackTree.grand.left.element;
        @ requires DataStructures.RedBlackTree.parent.right == DataStructures.RedBlackTree.grand.left.right;
        @ requires DataStructures.RedBlackTree.grand.element == DataStructures.RedBlackTree.great.left.element;
        @ requires DataStructures.RedBlackTree.grand.left == DataStructures.RedBlackTree.great.left.left;
        @ requires DataStructures.RedBlackTree.grand.right == DataStructures.RedBlackTree.great.left.right;
        @ requires this.header.left.element != null;
        @ requires this.header.right != null;
        @ requires this.header.right.element != null;
        @ requires this.header.right.left != null;
        @ requires this.header.right.right != null;
        @ requires DataStructures.RedBlackTree.nullNode.element != null;
        @ requires DataStructures.RedBlackTree.current != null;
        @ requires DataStructures.RedBlackTree.current.left.color == 1;
        @ requires DataStructures.RedBlackTree.current.right.color == 1;
        @ requires DataStructures.RedBlackTree.current.color == 0;
        @ requires DataStructures.RedBlackTree.parent != null;
        @ requires DataStructures.RedBlackTree.parent.element != null;
        @ requires DataStructures.RedBlackTree.parent.left.color == 1;
        @ requires DataStructures.RedBlackTree.parent.right != null;
        @ requires DataStructures.RedBlackTree.parent.right.color == 0;
        @ requires DataStructures.RedBlackTree.parent.color == 1;
        @ requires DataStructures.RedBlackTree.grand != null;
        @ requires DataStructures.RedBlackTree.grand.element != null;
        @ requires DataStructures.RedBlackTree.grand.left != null;
        @ requires DataStructures.RedBlackTree.grand.left.color == 1;
        @ requires DataStructures.RedBlackTree.grand.right != null;
        @ requires DataStructures.RedBlackTree.grand.right.element != null;
        @ requires DataStructures.RedBlackTree.grand.right.color == 1;
        @ requires DataStructures.RedBlackTree.grand.color == 0;
        @ requires DataStructures.RedBlackTree.great != null;
        @ requires DataStructures.RedBlackTree.great.element != null;
        @ requires DataStructures.RedBlackTree.great.left != null;
        @ requires DataStructures.RedBlackTree.great.left.color == 0;
        @ requires DataStructures.RedBlackTree.great.right != null;
        @ requires DataStructures.RedBlackTree.great.right.element != null;
        @ requires DataStructures.RedBlackTree.great.right.left != null;
        @ requires DataStructures.RedBlackTree.great.right.right != null;
        @ requires DataStructures.RedBlackTree.great.right.color == 1;
        @ requires DataStructures.RedBlackTree.great.color == 1;
        @ ensures this.header == \old(this.header);
        @ ensures this.header.element == \old(this.header.element);
        @ ensures this.header.left.element == \old(this.header.left.element);
        @ ensures this.header.right == \old(this.header.right);
        @ ensures this.header.right.element == \old(this.header.right.element);
        @ ensures this.header.right.left == \old(this.header.right.left);
        @ ensures this.header.right.right == \old(this.header.right.right);
        @ ensures this.header.right.color == this.header.color;
        @ ensures this.header.color == \old(this.header.left.color);
        @ ensures this.header.color == \old(this.header.right.color);
        @ ensures this.header.color == \old(this.header.color);
        @ ensures DataStructures.RedBlackTree.nullNode == \old(this.header.left);
        @ ensures DataStructures.RedBlackTree.nullNode == \old(this.header.left.left);
        @ ensures DataStructures.RedBlackTree.nullNode == \old(this.header.left.right);
        @ ensures DataStructures.RedBlackTree.nullNode == \old(DataStructures.RedBlackTree.nullNode);
        @ ensures DataStructures.RedBlackTree.nullNode.element == DataStructures.RedBlackTree.current.element;
        @ ensures DataStructures.RedBlackTree.nullNode.element == DataStructures.RedBlackTree.current.left.element;
        @ ensures DataStructures.RedBlackTree.nullNode.element == DataStructures.RedBlackTree.current.right.element;
        @ ensures DataStructures.RedBlackTree.nullNode.element == DataStructures.RedBlackTree.parent.left.element;
        @ ensures DataStructures.RedBlackTree.nullNode.element == DataStructures.RedBlackTree.parent.right.element;
        @ ensures DataStructures.RedBlackTree.nullNode.element == \old(DataStructures.RedBlackTree.nullNode.element);
        @ ensures DataStructures.RedBlackTree.nullNode.element == \old(DataStructures.RedBlackTree.nullNode.left.element);
        @ ensures DataStructures.RedBlackTree.nullNode.element == \old(DataStructures.RedBlackTree.nullNode.right.element);
        @ ensures DataStructures.RedBlackTree.nullNode.element == \old(DataStructures.RedBlackTree.current.element);
        @ ensures DataStructures.RedBlackTree.nullNode.element == \old(DataStructures.RedBlackTree.current.left.element);
        @ ensures DataStructures.RedBlackTree.nullNode.element == \old(DataStructures.RedBlackTree.current.right.element);
        @ ensures DataStructures.RedBlackTree.nullNode.element == \old(DataStructures.RedBlackTree.parent.left.element);
        @ ensures DataStructures.RedBlackTree.nullNode.element == \old(DataStructures.RedBlackTree.parent.right.element);
        @ ensures DataStructures.RedBlackTree.nullNode.element.getClass().getName() == \old(this.header.element.getClass().getName());
        @ ensures DataStructures.RedBlackTree.nullNode.element.getClass().getName() == \old(this.header.left.element.getClass().getName());
        @ ensures DataStructures.RedBlackTree.nullNode.element.getClass().getName() == \old(this.header.right.element.getClass().getName());
        @ ensures DataStructures.RedBlackTree.nullNode.element.getClass().getName() == \old(DataStructures.RedBlackTree.nullNode.element.getClass().getName());
        @ ensures DataStructures.RedBlackTree.nullNode.element.getClass().getName() == \old(DataStructures.RedBlackTree.nullNode.left.element.getClass().getName());
        @ ensures DataStructures.RedBlackTree.nullNode.element.getClass().getName() == \old(DataStructures.RedBlackTree.nullNode.right.element.getClass().getName());
        @ ensures DataStructures.RedBlackTree.nullNode.element.getClass().getName() == \old(DataStructures.RedBlackTree.current.element.getClass().getName());
        @ ensures DataStructures.RedBlackTree.nullNode.element.getClass().getName() == \old(DataStructures.RedBlackTree.current.left.element.getClass().getName());
        @ ensures DataStructures.RedBlackTree.nullNode.element.getClass().getName() == \old(DataStructures.RedBlackTree.current.right.element.getClass().getName());
        @ ensures DataStructures.RedBlackTree.nullNode.element.getClass().getName() == \old(DataStructures.RedBlackTree.parent.element.getClass().getName());
        @ ensures DataStructures.RedBlackTree.nullNode.element.getClass().getName() == \old(DataStructures.RedBlackTree.parent.left.element.getClass().getName());
        @ ensures DataStructures.RedBlackTree.nullNode.element.getClass().getName() == \old(DataStructures.RedBlackTree.parent.right.element.getClass().getName());
        @ ensures DataStructures.RedBlackTree.nullNode.element.getClass().getName() == \old(DataStructures.RedBlackTree.grand.element.getClass().getName());
        @ ensures DataStructures.RedBlackTree.nullNode.element.getClass().getName() == \old(DataStructures.RedBlackTree.grand.left.element.getClass().getName());
        @ ensures DataStructures.RedBlackTree.nullNode.element.getClass().getName() == \old(DataStructures.RedBlackTree.grand.right.element.getClass().getName());
        @ ensures DataStructures.RedBlackTree.nullNode.element.getClass().getName() == \old(DataStructures.RedBlackTree.great.element.getClass().getName());
        @ ensures DataStructures.RedBlackTree.nullNode.element.getClass().getName() == \old(DataStructures.RedBlackTree.great.left.element.getClass().getName());
        @ ensures DataStructures.RedBlackTree.nullNode.element.getClass().getName() == \old(DataStructures.RedBlackTree.great.right.element.getClass().getName());
        @ ensures DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.current.left;
        @ ensures DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.current.left.left;
        @ ensures DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.current.left.right;
        @ ensures DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.current.right;
        @ ensures DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.current.right.left;
        @ ensures DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.current.right.right;
        @ ensures DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.parent.left;
        @ ensures DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.parent.left.left;
        @ ensures DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.parent.left.right;
        @ ensures DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.parent.right.left;
        @ ensures DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.parent.right.right;
        @ ensures DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.grand.left.left;
        @ ensures DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.grand.right.left;
        @ ensures DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.grand.right.right;
        @ ensures DataStructures.RedBlackTree.nullNode.left == \old(DataStructures.RedBlackTree.nullNode.left);
        @ ensures DataStructures.RedBlackTree.nullNode.left == \old(DataStructures.RedBlackTree.nullNode.left.left);
        @ ensures DataStructures.RedBlackTree.nullNode.left == \old(DataStructures.RedBlackTree.nullNode.left.right);
        @ ensures DataStructures.RedBlackTree.nullNode.left == \old(DataStructures.RedBlackTree.nullNode.right);
        @ ensures DataStructures.RedBlackTree.nullNode.left == \old(DataStructures.RedBlackTree.nullNode.right.left);
        @ ensures DataStructures.RedBlackTree.nullNode.left == \old(DataStructures.RedBlackTree.nullNode.right.right);
        @ ensures DataStructures.RedBlackTree.nullNode.left == \old(DataStructures.RedBlackTree.current.left);
        @ ensures DataStructures.RedBlackTree.nullNode.left == \old(DataStructures.RedBlackTree.current.left.left);
        @ ensures DataStructures.RedBlackTree.nullNode.left == \old(DataStructures.RedBlackTree.current.left.right);
        @ ensures DataStructures.RedBlackTree.nullNode.left == \old(DataStructures.RedBlackTree.current.right);
        @ ensures DataStructures.RedBlackTree.nullNode.left == \old(DataStructures.RedBlackTree.current.right.left);
        @ ensures DataStructures.RedBlackTree.nullNode.left == \old(DataStructures.RedBlackTree.current.right.right);
        @ ensures DataStructures.RedBlackTree.nullNode.left == \old(DataStructures.RedBlackTree.parent.left);
        @ ensures DataStructures.RedBlackTree.nullNode.left == \old(DataStructures.RedBlackTree.parent.left.left);
        @ ensures DataStructures.RedBlackTree.nullNode.left == \old(DataStructures.RedBlackTree.parent.left.right);
        @ ensures DataStructures.RedBlackTree.nullNode.left == \old(DataStructures.RedBlackTree.parent.right.left);
        @ ensures DataStructures.RedBlackTree.nullNode.left == \old(DataStructures.RedBlackTree.parent.right.right);
        @ ensures DataStructures.RedBlackTree.nullNode.left == \old(DataStructures.RedBlackTree.grand.left.left);
        @ ensures DataStructures.RedBlackTree.nullNode.left == \old(DataStructures.RedBlackTree.grand.right.left);
        @ ensures DataStructures.RedBlackTree.nullNode.left == \old(DataStructures.RedBlackTree.grand.right.right);
        @ ensures DataStructures.RedBlackTree.nullNode.left.color == \old(DataStructures.RedBlackTree.nullNode.left.color);
        @ ensures DataStructures.RedBlackTree.nullNode.right.color == \old(DataStructures.RedBlackTree.nullNode.right.color);
        @ ensures DataStructures.RedBlackTree.nullNode.color == \old(DataStructures.RedBlackTree.nullNode.color);
        @ ensures DataStructures.RedBlackTree.current == \old(DataStructures.RedBlackTree.current);
        @ ensures DataStructures.RedBlackTree.current.left.color == \old(DataStructures.RedBlackTree.current.left.color);
        @ ensures DataStructures.RedBlackTree.current.right.color == \old(DataStructures.RedBlackTree.current.right.color);
        @ ensures DataStructures.RedBlackTree.current.color == \old(DataStructures.RedBlackTree.current.color);
        @ ensures DataStructures.RedBlackTree.parent == \old(DataStructures.RedBlackTree.parent);
        @ ensures DataStructures.RedBlackTree.parent.element == DataStructures.RedBlackTree.grand.left.element;
        @ ensures DataStructures.RedBlackTree.parent.element == \old(DataStructures.RedBlackTree.parent.element);
        @ ensures DataStructures.RedBlackTree.parent.element == \old(DataStructures.RedBlackTree.grand.left.element);
        @ ensures DataStructures.RedBlackTree.parent.left.color == \old(DataStructures.RedBlackTree.parent.left.color);
        @ ensures DataStructures.RedBlackTree.parent.right == DataStructures.RedBlackTree.grand.left.right;
        @ ensures DataStructures.RedBlackTree.parent.right == \old(DataStructures.RedBlackTree.parent.right);
        @ ensures DataStructures.RedBlackTree.parent.right == \old(DataStructures.RedBlackTree.grand.left.right);
        @ ensures DataStructures.RedBlackTree.parent.right.color == \old(DataStructures.RedBlackTree.parent.right.color);
        @ ensures DataStructures.RedBlackTree.parent.color == \old(DataStructures.RedBlackTree.parent.color);
        @ ensures DataStructures.RedBlackTree.grand == \old(DataStructures.RedBlackTree.grand);
        @ ensures DataStructures.RedBlackTree.grand.element == DataStructures.RedBlackTree.great.left.element;
        @ ensures DataStructures.RedBlackTree.grand.element == \old(DataStructures.RedBlackTree.grand.element);
        @ ensures DataStructures.RedBlackTree.grand.element == \old(DataStructures.RedBlackTree.great.left.element);
        @ ensures DataStructures.RedBlackTree.grand.left == DataStructures.RedBlackTree.great.left.left;
        @ ensures DataStructures.RedBlackTree.grand.left == \old(DataStructures.RedBlackTree.grand.left);
        @ ensures DataStructures.RedBlackTree.grand.left == \old(DataStructures.RedBlackTree.great.left.left);
        @ ensures DataStructures.RedBlackTree.grand.left.color == \old(DataStructures.RedBlackTree.grand.left.color);
        @ ensures DataStructures.RedBlackTree.grand.right == DataStructures.RedBlackTree.great.left.right;
        @ ensures DataStructures.RedBlackTree.grand.right == \old(DataStructures.RedBlackTree.grand.right);
        @ ensures DataStructures.RedBlackTree.grand.right == \old(DataStructures.RedBlackTree.great.left.right);
        @ ensures DataStructures.RedBlackTree.grand.right.element == \old(DataStructures.RedBlackTree.grand.right.element);
        @ ensures DataStructures.RedBlackTree.grand.right.color == \old(DataStructures.RedBlackTree.grand.right.color);
        @ ensures DataStructures.RedBlackTree.grand.color == \old(DataStructures.RedBlackTree.grand.color);
        @ ensures DataStructures.RedBlackTree.great == \old(DataStructures.RedBlackTree.great);
        @ ensures DataStructures.RedBlackTree.great.element == \old(DataStructures.RedBlackTree.great.element);
        @ ensures DataStructures.RedBlackTree.great.left == \old(DataStructures.RedBlackTree.great.left);
        @ ensures DataStructures.RedBlackTree.great.left.color == \old(DataStructures.RedBlackTree.great.left.color);
        @ ensures DataStructures.RedBlackTree.great.right == \old(DataStructures.RedBlackTree.great.right);
        @ ensures DataStructures.RedBlackTree.great.right.element == \old(DataStructures.RedBlackTree.great.right.element);
        @ ensures DataStructures.RedBlackTree.great.right.left == \old(DataStructures.RedBlackTree.great.right.left);
        @ ensures DataStructures.RedBlackTree.great.right.right == \old(DataStructures.RedBlackTree.great.right.right);
        @ ensures DataStructures.RedBlackTree.great.right.color == \old(DataStructures.RedBlackTree.great.right.color);
        @ ensures DataStructures.RedBlackTree.great.color == \old(DataStructures.RedBlackTree.great.color);
        @ ensures this.header.left.element != null;
        @ ensures this.header.right != null;
        @ ensures this.header.right.element != null;
        @ ensures this.header.right.left != null;
        @ ensures this.header.right.right != null;
        @ ensures DataStructures.RedBlackTree.nullNode.element != null;
        @ ensures DataStructures.RedBlackTree.current != null;
        @ ensures DataStructures.RedBlackTree.current.left.color == 1;
        @ ensures DataStructures.RedBlackTree.current.right.color == 1;
        @ ensures DataStructures.RedBlackTree.current.color == 0;
        @ ensures DataStructures.RedBlackTree.parent != null;
        @ ensures DataStructures.RedBlackTree.parent.element != null;
        @ ensures DataStructures.RedBlackTree.parent.left.color == 1;
        @ ensures DataStructures.RedBlackTree.parent.right != null;
        @ ensures DataStructures.RedBlackTree.parent.right.color == 0;
        @ ensures DataStructures.RedBlackTree.parent.color == 1;
        @ ensures DataStructures.RedBlackTree.grand != null;
        @ ensures DataStructures.RedBlackTree.grand.element != null;
        @ ensures DataStructures.RedBlackTree.grand.left != null;
        @ ensures DataStructures.RedBlackTree.grand.left.color == 1;
        @ ensures DataStructures.RedBlackTree.grand.right != null;
        @ ensures DataStructures.RedBlackTree.grand.right.element != null;
        @ ensures DataStructures.RedBlackTree.grand.right.color == 1;
        @ ensures DataStructures.RedBlackTree.grand.color == 0;
        @ ensures DataStructures.RedBlackTree.great != null;
        @ ensures DataStructures.RedBlackTree.great.element != null;
        @ ensures DataStructures.RedBlackTree.great.left != null;
        @ ensures DataStructures.RedBlackTree.great.left.color == 0;
        @ ensures DataStructures.RedBlackTree.great.right != null;
        @ ensures DataStructures.RedBlackTree.great.right.element != null;
        @ ensures DataStructures.RedBlackTree.great.right.left != null;
        @ ensures DataStructures.RedBlackTree.great.right.right != null;
        @ ensures DataStructures.RedBlackTree.great.right.color == 1;
        @ ensures DataStructures.RedBlackTree.great.color == 1;
        @ ensures \result == false;
        @*/
        /**
         * Test if the tree is logically empty.
         * @return true if empty, false otherwise.
         */
        public boolean isEmpty( )
        {
            return header.right == nullNode;
        }

        /*@
        @ public normal_behavior // Generated by Daikon
        @ requires true;
        @*/
        /**
         * Print the tree contents in sorted order.
         */
        public void printTree( )
        {
            if( isEmpty( ) )
                System.out.println( "Empty tree" );
            else
                printTree( header.right );
        }

        /*@
        @ private normal_behavior // Generated by Daikon
        @ requires true;
        @*/
        /**
         * Internal method to print a subtree in sorted order.
         * @param t the node that roots the tree.
         */
        private void printTree( RedBlackNode t )
        {
            if( t != nullNode )
            {
                printTree( t.left );
                System.out.println( t.element );
                printTree( t.right );
            }
        }

        /*@
        @ private normal_behavior // Generated by Daikon
        @ requires this.header.left.element == item;
        @ requires this.header.right.color == this.header.color;
        @ requires DataStructures.RedBlackTree.nullNode.element.getClass().getName() == item.getClass().getName();
        @ requires this.header.left.element != null;
        @ requires this.header.right.element != null;
        @ requires DataStructures.RedBlackTree.nullNode.element != null;
        @ requires DataStructures.RedBlackTree.current != null;
        @ requires DataStructures.RedBlackTree.current.color == 1;
        @ requires DataStructures.RedBlackTree.parent != null;
        @ requires DataStructures.RedBlackTree.grand != null;
        @ requires DataStructures.RedBlackTree.great != null;
        @ ensures this.header == \old(this.header);
        @ ensures this.header.element == \old(this.header.element);
        @ ensures this.header.left.element == \old(item);
        @ ensures this.header.right.color == this.header.color;
        @ ensures this.header.color == \old(this.header.left.color);
        @ ensures this.header.color == \old(this.header.right.color);
        @ ensures this.header.color == \old(this.header.color);
        @ ensures DataStructures.RedBlackTree.nullNode == \old(this.header.left);
        @ ensures DataStructures.RedBlackTree.nullNode == \old(this.header.left.left);
        @ ensures DataStructures.RedBlackTree.nullNode == \old(this.header.left.right);
        @ ensures DataStructures.RedBlackTree.nullNode == \old(DataStructures.RedBlackTree.nullNode);
        @ ensures DataStructures.RedBlackTree.nullNode.element == \old(DataStructures.RedBlackTree.nullNode.element);
        @ ensures DataStructures.RedBlackTree.nullNode.element == \old(DataStructures.RedBlackTree.nullNode.left.element);
        @ ensures DataStructures.RedBlackTree.nullNode.element == \old(DataStructures.RedBlackTree.nullNode.right.element);
        @ ensures DataStructures.RedBlackTree.nullNode.element.getClass().getName() == \old(this.header.element.getClass().getName());
        @ ensures DataStructures.RedBlackTree.nullNode.element.getClass().getName() == \old(this.header.left.element.getClass().getName());
        @ ensures DataStructures.RedBlackTree.nullNode.element.getClass().getName() == \old(this.header.right.element.getClass().getName());
        @ ensures DataStructures.RedBlackTree.nullNode.element.getClass().getName() == \old(DataStructures.RedBlackTree.nullNode.element.getClass().getName());
        @ ensures DataStructures.RedBlackTree.nullNode.element.getClass().getName() == \old(DataStructures.RedBlackTree.nullNode.left.element.getClass().getName());
        @ ensures DataStructures.RedBlackTree.nullNode.element.getClass().getName() == \old(DataStructures.RedBlackTree.nullNode.right.element.getClass().getName());
        @ ensures DataStructures.RedBlackTree.nullNode.element.getClass().getName() == \old(DataStructures.RedBlackTree.current.element.getClass().getName());
        @ ensures DataStructures.RedBlackTree.nullNode.element.getClass().getName() == \old(DataStructures.RedBlackTree.current.left.element.getClass().getName());
        @ ensures DataStructures.RedBlackTree.nullNode.element.getClass().getName() == \old(DataStructures.RedBlackTree.current.right.element.getClass().getName());
        @ ensures DataStructures.RedBlackTree.nullNode.element.getClass().getName() == \old(DataStructures.RedBlackTree.parent.element.getClass().getName());
        @ ensures DataStructures.RedBlackTree.nullNode.element.getClass().getName() == \old(DataStructures.RedBlackTree.parent.left.element.getClass().getName());
        @ ensures DataStructures.RedBlackTree.nullNode.element.getClass().getName() == \old(DataStructures.RedBlackTree.parent.right.element.getClass().getName());
        @ ensures DataStructures.RedBlackTree.nullNode.element.getClass().getName() == \old(DataStructures.RedBlackTree.grand.element.getClass().getName());
        @ ensures DataStructures.RedBlackTree.nullNode.element.getClass().getName() == \old(DataStructures.RedBlackTree.grand.left.element.getClass().getName());
        @ ensures DataStructures.RedBlackTree.nullNode.element.getClass().getName() == \old(DataStructures.RedBlackTree.grand.right.element.getClass().getName());
        @ ensures DataStructures.RedBlackTree.nullNode.element.getClass().getName() == \old(DataStructures.RedBlackTree.great.element.getClass().getName());
        @ ensures DataStructures.RedBlackTree.nullNode.element.getClass().getName() == \old(DataStructures.RedBlackTree.great.left.element.getClass().getName());
        @ ensures DataStructures.RedBlackTree.nullNode.element.getClass().getName() == \old(DataStructures.RedBlackTree.great.right.element.getClass().getName());
        @ ensures DataStructures.RedBlackTree.nullNode.element.getClass().getName() == \old(item.getClass().getName());
        @ ensures DataStructures.RedBlackTree.nullNode.left == \old(DataStructures.RedBlackTree.nullNode.left);
        @ ensures DataStructures.RedBlackTree.nullNode.left == \old(DataStructures.RedBlackTree.nullNode.left.left);
        @ ensures DataStructures.RedBlackTree.nullNode.left == \old(DataStructures.RedBlackTree.nullNode.left.right);
        @ ensures DataStructures.RedBlackTree.nullNode.left == \old(DataStructures.RedBlackTree.nullNode.right);
        @ ensures DataStructures.RedBlackTree.nullNode.left == \old(DataStructures.RedBlackTree.nullNode.right.left);
        @ ensures DataStructures.RedBlackTree.nullNode.left == \old(DataStructures.RedBlackTree.nullNode.right.right);
        @ ensures DataStructures.RedBlackTree.nullNode.left.color == \old(DataStructures.RedBlackTree.nullNode.left.color);
        @ ensures DataStructures.RedBlackTree.nullNode.right.color == \old(DataStructures.RedBlackTree.nullNode.right.color);
        @ ensures DataStructures.RedBlackTree.nullNode.color == \old(DataStructures.RedBlackTree.nullNode.color);
        @ ensures DataStructures.RedBlackTree.parent == \old(DataStructures.RedBlackTree.parent);
        @ ensures DataStructures.RedBlackTree.parent.element == \old(DataStructures.RedBlackTree.parent.element);
        @ ensures DataStructures.RedBlackTree.parent.right.left == \old(DataStructures.RedBlackTree.parent.right.left);
        @ ensures DataStructures.RedBlackTree.parent.right.right == \old(DataStructures.RedBlackTree.parent.right.right);
        @ ensures DataStructures.RedBlackTree.grand == \old(DataStructures.RedBlackTree.grand);
        @ ensures DataStructures.RedBlackTree.grand.element == \old(DataStructures.RedBlackTree.grand.element);
        @ ensures DataStructures.RedBlackTree.grand.left.right == \old(DataStructures.RedBlackTree.grand.left.right);
        @ ensures DataStructures.RedBlackTree.great == \old(DataStructures.RedBlackTree.great);
        @ ensures DataStructures.RedBlackTree.great.element == \old(DataStructures.RedBlackTree.great.element);
        @ ensures DataStructures.RedBlackTree.great.left.color == \old(DataStructures.RedBlackTree.great.left.color);
        @ ensures DataStructures.RedBlackTree.great.right.color == \old(DataStructures.RedBlackTree.great.right.color);
        @ ensures DataStructures.RedBlackTree.great.color == \old(DataStructures.RedBlackTree.great.color);
        @ ensures this.header.right.element != null;
        @ ensures DataStructures.RedBlackTree.nullNode.element != null;
        @ ensures DataStructures.RedBlackTree.current != null;
        @ ensures DataStructures.RedBlackTree.parent != null;
        @ ensures DataStructures.RedBlackTree.parent.color == 1;
        @ ensures DataStructures.RedBlackTree.grand != null;
        @ ensures DataStructures.RedBlackTree.great != null;
        @ ensures \old(item) != null;
        @ ensures DataStructures.RedBlackTree.current.color <= \old(DataStructures.RedBlackTree.current.color);
        @ ensures DataStructures.RedBlackTree.parent.left.color <= \old(DataStructures.RedBlackTree.parent.left.color);
        @ ensures DataStructures.RedBlackTree.parent.right.color <= \old(DataStructures.RedBlackTree.parent.right.color);
        @ ensures DataStructures.RedBlackTree.parent.color >= \old(DataStructures.RedBlackTree.parent.color);
        @ ensures DataStructures.RedBlackTree.grand.left.color >= \old(DataStructures.RedBlackTree.grand.left.color);
        @ ensures DataStructures.RedBlackTree.grand.right.color >= \old(DataStructures.RedBlackTree.grand.right.color);
        @ ensures DataStructures.RedBlackTree.grand.color <= \old(DataStructures.RedBlackTree.grand.color);
        @*/
        /**
         * Internal routine that is called during an insertion
         * if a node has two red children. Performs flip and rotations.
         * @param item the item being inserted.
         */
        private void handleReorient( Comparable item )
        {
                // Do the color flip
            current.color = RED;
            current.left.color = BLACK;
            current.right.color = BLACK;

            if( parent.color == RED )   // Have to rotate
            {
                grand.color = RED;
                if( ( item.compareTo( grand.element ) < 0 ) !=
                    ( item.compareTo( parent.element ) < 0 ) )
                    parent = rotate( item, grand );  // Start dbl rotate
                current = rotate( item, great );
                current.color = BLACK;
            }
            header.right.color = BLACK; // Make root black
        }

        /*@
        @ private normal_behavior // Generated by Daikon
        @ requires this.header.left.element == item;
        @ requires DataStructures.RedBlackTree.nullNode.element.getClass().getName() == item.getClass().getName();
        @ requires DataStructures.RedBlackTree.nullNode.element.getClass().getName() == parent.element.getClass().getName();
        @ requires DataStructures.RedBlackTree.nullNode.element.getClass().getName() == parent.left.element.getClass().getName();
        @ requires DataStructures.RedBlackTree.nullNode.element.getClass().getName() == parent.right.element.getClass().getName();
        @ requires DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.current.left.left;
        @ requires DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.current.left.right;
        @ requires DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.current.right.left;
        @ requires DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.current.right.right;
        @ requires DataStructures.RedBlackTree.current.element == DataStructures.RedBlackTree.parent.right.element;
        @ requires DataStructures.RedBlackTree.current.left == DataStructures.RedBlackTree.parent.right.left;
        @ requires DataStructures.RedBlackTree.current.right == DataStructures.RedBlackTree.parent.right.right;
        @ requires DataStructures.RedBlackTree.parent.right == DataStructures.RedBlackTree.grand.right.right;
        @ requires DataStructures.RedBlackTree.great == parent;
        @ requires this.header.left.element != null;
        @ requires this.header.right.element != null;
        @ requires DataStructures.RedBlackTree.nullNode.element != null;
        @ requires DataStructures.RedBlackTree.current != null;
        @ requires DataStructures.RedBlackTree.current.left.color == 1;
        @ requires DataStructures.RedBlackTree.current.right.color == 1;
        @ requires DataStructures.RedBlackTree.current.color == 0;
        @ requires DataStructures.RedBlackTree.parent != null;
        @ requires DataStructures.RedBlackTree.parent.color == 0;
        @ requires DataStructures.RedBlackTree.grand != null;
        @ requires DataStructures.RedBlackTree.grand.color == 0;
        @ requires DataStructures.RedBlackTree.great != null;
        @ requires parent.element != null;
        @ requires parent.left != null;
        @ requires parent.left.element != null;
        @ requires parent.left.left != null;
        @ requires parent.left.right != null;
        @ requires parent.left.color == 0 || parent.left.color == 1;
        @ requires parent.right != null;
        @ requires parent.right.element != null;
        @ requires parent.right.left != null;
        @ requires parent.right.right != null;
        @ requires parent.right.color == 0 || parent.right.color == 1;
        @ requires parent.color == 0 || parent.color == 1;
        @ requires this.header.right.color >= parent.right.color;
        @ requires this.header.color >= parent.left.color;
        @ requires this.header.color >= parent.right.color;
        @ requires this.header.color >= parent.color;
        @ ensures this.header == \old(this.header);
        @ ensures this.header.element == \old(this.header.element);
        @ ensures this.header.left.element == \old(item);
        @ ensures this.header.right.color == \old(this.header.right.color);
        @ ensures this.header.color == \old(this.header.left.color);
        @ ensures this.header.color == \old(this.header.color);
        @ ensures DataStructures.RedBlackTree.nullNode == \old(this.header.left);
        @ ensures DataStructures.RedBlackTree.nullNode == \old(this.header.left.left);
        @ ensures DataStructures.RedBlackTree.nullNode == \old(this.header.left.right);
        @ ensures DataStructures.RedBlackTree.nullNode == \old(DataStructures.RedBlackTree.nullNode);
        @ ensures DataStructures.RedBlackTree.nullNode.element == \old(DataStructures.RedBlackTree.nullNode.element);
        @ ensures DataStructures.RedBlackTree.nullNode.element == \old(DataStructures.RedBlackTree.nullNode.left.element);
        @ ensures DataStructures.RedBlackTree.nullNode.element == \old(DataStructures.RedBlackTree.nullNode.right.element);
        @ ensures DataStructures.RedBlackTree.nullNode.element.getClass().getName() == parent.element.getClass().getName();
        @ ensures DataStructures.RedBlackTree.nullNode.element.getClass().getName() == parent.left.element.getClass().getName();
        @ ensures DataStructures.RedBlackTree.nullNode.element.getClass().getName() == parent.right.element.getClass().getName();
        @ ensures DataStructures.RedBlackTree.nullNode.element.getClass().getName() == \result.element.getClass().getName();
        @ ensures DataStructures.RedBlackTree.nullNode.element.getClass().getName() == \result.left.element.getClass().getName();
        @ ensures DataStructures.RedBlackTree.nullNode.element.getClass().getName() == \result.right.element.getClass().getName();
        @ ensures DataStructures.RedBlackTree.nullNode.element.getClass().getName() == \old(this.header.element.getClass().getName());
        @ ensures DataStructures.RedBlackTree.nullNode.element.getClass().getName() == \old(this.header.left.element.getClass().getName());
        @ ensures DataStructures.RedBlackTree.nullNode.element.getClass().getName() == \old(this.header.right.element.getClass().getName());
        @ ensures DataStructures.RedBlackTree.nullNode.element.getClass().getName() == \old(DataStructures.RedBlackTree.nullNode.element.getClass().getName());
        @ ensures DataStructures.RedBlackTree.nullNode.element.getClass().getName() == \old(DataStructures.RedBlackTree.nullNode.left.element.getClass().getName());
        @ ensures DataStructures.RedBlackTree.nullNode.element.getClass().getName() == \old(DataStructures.RedBlackTree.nullNode.right.element.getClass().getName());
        @ ensures DataStructures.RedBlackTree.nullNode.element.getClass().getName() == \old(DataStructures.RedBlackTree.current.element.getClass().getName());
        @ ensures DataStructures.RedBlackTree.nullNode.element.getClass().getName() == \old(DataStructures.RedBlackTree.current.left.element.getClass().getName());
        @ ensures DataStructures.RedBlackTree.nullNode.element.getClass().getName() == \old(DataStructures.RedBlackTree.current.right.element.getClass().getName());
        @ ensures DataStructures.RedBlackTree.nullNode.element.getClass().getName() == \old(DataStructures.RedBlackTree.parent.element.getClass().getName());
        @ ensures DataStructures.RedBlackTree.nullNode.element.getClass().getName() == \old(DataStructures.RedBlackTree.parent.left.element.getClass().getName());
        @ ensures DataStructures.RedBlackTree.nullNode.element.getClass().getName() == \old(DataStructures.RedBlackTree.parent.right.element.getClass().getName());
        @ ensures DataStructures.RedBlackTree.nullNode.element.getClass().getName() == \old(DataStructures.RedBlackTree.grand.element.getClass().getName());
        @ ensures DataStructures.RedBlackTree.nullNode.element.getClass().getName() == \old(DataStructures.RedBlackTree.grand.left.element.getClass().getName());
        @ ensures DataStructures.RedBlackTree.nullNode.element.getClass().getName() == \old(DataStructures.RedBlackTree.grand.right.element.getClass().getName());
        @ ensures DataStructures.RedBlackTree.nullNode.element.getClass().getName() == \old(DataStructures.RedBlackTree.great.element.getClass().getName());
        @ ensures DataStructures.RedBlackTree.nullNode.element.getClass().getName() == \old(DataStructures.RedBlackTree.great.left.element.getClass().getName());
        @ ensures DataStructures.RedBlackTree.nullNode.element.getClass().getName() == \old(DataStructures.RedBlackTree.great.right.element.getClass().getName());
        @ ensures DataStructures.RedBlackTree.nullNode.element.getClass().getName() == \old(item.getClass().getName());
        @ ensures DataStructures.RedBlackTree.nullNode.element.getClass().getName() == \old(parent.element.getClass().getName());
        @ ensures DataStructures.RedBlackTree.nullNode.element.getClass().getName() == \old(parent.left.element.getClass().getName());
        @ ensures DataStructures.RedBlackTree.nullNode.element.getClass().getName() == \old(parent.right.element.getClass().getName());
        @ ensures DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.current.left.left;
        @ ensures DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.current.left.right;
        @ ensures DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.current.right.left;
        @ ensures DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.current.right.right;
        @ ensures DataStructures.RedBlackTree.nullNode.left == \old(DataStructures.RedBlackTree.nullNode.left);
        @ ensures DataStructures.RedBlackTree.nullNode.left == \old(DataStructures.RedBlackTree.nullNode.left.left);
        @ ensures DataStructures.RedBlackTree.nullNode.left == \old(DataStructures.RedBlackTree.nullNode.left.right);
        @ ensures DataStructures.RedBlackTree.nullNode.left == \old(DataStructures.RedBlackTree.nullNode.right);
        @ ensures DataStructures.RedBlackTree.nullNode.left == \old(DataStructures.RedBlackTree.nullNode.right.left);
        @ ensures DataStructures.RedBlackTree.nullNode.left == \old(DataStructures.RedBlackTree.nullNode.right.right);
        @ ensures DataStructures.RedBlackTree.nullNode.left == \old(DataStructures.RedBlackTree.current.left.left);
        @ ensures DataStructures.RedBlackTree.nullNode.left == \old(DataStructures.RedBlackTree.current.left.right);
        @ ensures DataStructures.RedBlackTree.nullNode.left == \old(DataStructures.RedBlackTree.current.right.left);
        @ ensures DataStructures.RedBlackTree.nullNode.left == \old(DataStructures.RedBlackTree.current.right.right);
        @ ensures DataStructures.RedBlackTree.nullNode.left.color == \old(DataStructures.RedBlackTree.nullNode.left.color);
        @ ensures DataStructures.RedBlackTree.nullNode.right.color == \old(DataStructures.RedBlackTree.nullNode.right.color);
        @ ensures DataStructures.RedBlackTree.nullNode.color == \old(DataStructures.RedBlackTree.nullNode.color);
        @ ensures DataStructures.RedBlackTree.current == \old(DataStructures.RedBlackTree.current);
        @ ensures DataStructures.RedBlackTree.current.element == \old(DataStructures.RedBlackTree.current.element);
        @ ensures DataStructures.RedBlackTree.current.element == \old(DataStructures.RedBlackTree.parent.right.element);
        @ ensures DataStructures.RedBlackTree.current.left == DataStructures.RedBlackTree.parent.right.left;
        @ ensures DataStructures.RedBlackTree.current.left == \old(DataStructures.RedBlackTree.current.left);
        @ ensures DataStructures.RedBlackTree.current.left == \old(DataStructures.RedBlackTree.parent.right.left);
        @ ensures DataStructures.RedBlackTree.current.left.element == \old(DataStructures.RedBlackTree.current.left.element);
        @ ensures DataStructures.RedBlackTree.current.left.color == \old(DataStructures.RedBlackTree.current.left.color);
        @ ensures DataStructures.RedBlackTree.current.right == DataStructures.RedBlackTree.parent.right.right;
        @ ensures DataStructures.RedBlackTree.current.right == \old(DataStructures.RedBlackTree.current.right);
        @ ensures DataStructures.RedBlackTree.current.right == \old(DataStructures.RedBlackTree.parent.right.right);
        @ ensures DataStructures.RedBlackTree.current.right.element == \old(DataStructures.RedBlackTree.current.right.element);
        @ ensures DataStructures.RedBlackTree.current.right.color == \old(DataStructures.RedBlackTree.current.right.color);
        @ ensures DataStructures.RedBlackTree.current.color == \old(DataStructures.RedBlackTree.current.color);
        @ ensures DataStructures.RedBlackTree.parent == \result;
        @ ensures DataStructures.RedBlackTree.parent == \old(DataStructures.RedBlackTree.parent);
        @ ensures DataStructures.RedBlackTree.parent.element == \old(DataStructures.RedBlackTree.parent.element);
        @ ensures DataStructures.RedBlackTree.parent.left.left == DataStructures.RedBlackTree.grand.left;
        @ ensures DataStructures.RedBlackTree.parent.left.right == DataStructures.RedBlackTree.grand.right;
        @ ensures DataStructures.RedBlackTree.parent.color == \old(DataStructures.RedBlackTree.parent.color);
        @ ensures DataStructures.RedBlackTree.grand == \old(DataStructures.RedBlackTree.grand);
        @ ensures DataStructures.RedBlackTree.grand.element == \old(DataStructures.RedBlackTree.grand.element);
        @ ensures DataStructures.RedBlackTree.grand.left.right == \old(DataStructures.RedBlackTree.grand.left.right);
        @ ensures DataStructures.RedBlackTree.grand.right == \old(DataStructures.RedBlackTree.grand.right.left);
        @ ensures DataStructures.RedBlackTree.grand.right.element == \old(DataStructures.RedBlackTree.parent.left.element);
        @ ensures DataStructures.RedBlackTree.grand.right.left == \old(DataStructures.RedBlackTree.parent.left.left);
        @ ensures DataStructures.RedBlackTree.grand.right.right == \old(DataStructures.RedBlackTree.parent.left.right);
        @ ensures DataStructures.RedBlackTree.grand.color == \old(DataStructures.RedBlackTree.grand.color);
        @ ensures DataStructures.RedBlackTree.great == \old(DataStructures.RedBlackTree.great);
        @ ensures DataStructures.RedBlackTree.great == \old(parent);
        @ ensures DataStructures.RedBlackTree.great.element == \old(DataStructures.RedBlackTree.great.element);
        @ ensures DataStructures.RedBlackTree.great.left.color == \old(DataStructures.RedBlackTree.great.left.color);
        @ ensures DataStructures.RedBlackTree.great.right.color == \old(DataStructures.RedBlackTree.great.right.color);
        @ ensures DataStructures.RedBlackTree.great.color == \old(DataStructures.RedBlackTree.great.color);
        @ ensures parent.element == \old(parent.element);
        @ ensures parent.left.color == \old(parent.left.color);
        @ ensures parent.right.color == \old(parent.right.color);
        @ ensures parent.color == \old(parent.color);
        @ ensures this.header.right.element != null;
        @ ensures DataStructures.RedBlackTree.nullNode.element != null;
        @ ensures DataStructures.RedBlackTree.current != null;
        @ ensures DataStructures.RedBlackTree.current.left.color == 1;
        @ ensures DataStructures.RedBlackTree.current.right.color == 1;
        @ ensures DataStructures.RedBlackTree.current.color == 0;
        @ ensures DataStructures.RedBlackTree.parent != null;
        @ ensures DataStructures.RedBlackTree.parent.left.color == 0;
        @ ensures DataStructures.RedBlackTree.parent.right.color == 0;
        @ ensures DataStructures.RedBlackTree.parent.color == 0;
        @ ensures DataStructures.RedBlackTree.grand != null;
        @ ensures DataStructures.RedBlackTree.grand.left.color == 1;
        @ ensures DataStructures.RedBlackTree.grand.right.color == 1;
        @ ensures DataStructures.RedBlackTree.grand.color == 0;
        @ ensures DataStructures.RedBlackTree.great != null;
        @ ensures parent.element != null;
        @ ensures parent.left != null;
        @ ensures parent.left.element != null;
        @ ensures parent.left.left != null;
        @ ensures parent.left.right != null;
        @ ensures parent.left.color == 0 || parent.left.color == 1;
        @ ensures parent.right != null;
        @ ensures parent.right.element != null;
        @ ensures parent.right.left != null;
        @ ensures parent.right.right != null;
        @ ensures parent.right.color == 0 || parent.right.color == 1;
        @ ensures parent.color == 0 || parent.color == 1;
        @ ensures \result.element != null;
        @ ensures \result.left != null;
        @ ensures \result.left.element != null;
        @ ensures \result.left.left != null;
        @ ensures \result.left.right != null;
        @ ensures \result.left.color == 0;
        @ ensures \result.right != null;
        @ ensures \result.right.element != null;
        @ ensures \result.right.left != null;
        @ ensures \result.right.right != null;
        @ ensures \result.right.color == 0;
        @ ensures \result.color == 0;
        @ ensures \old(item) != null;
        @ ensures this.header.right.color >= parent.right.color;
        @ ensures this.header.right.color >= \result.color;
        @ ensures this.header.color >= parent.left.color;
        @ ensures this.header.color >= parent.right.color;
        @ ensures this.header.color >= parent.color;
        @ ensures DataStructures.RedBlackTree.parent.left.color <= \old(DataStructures.RedBlackTree.parent.left.color);
        @ ensures DataStructures.RedBlackTree.parent.right.color <= \old(DataStructures.RedBlackTree.parent.right.color);
        @ ensures DataStructures.RedBlackTree.grand.left.color >= \old(DataStructures.RedBlackTree.grand.left.color);
        @ ensures DataStructures.RedBlackTree.grand.right.color >= \old(DataStructures.RedBlackTree.grand.right.color);
        @ ensures parent.left.color >= \result.color;
        @ ensures parent.right.color >= \result.color;
        @ ensures parent.color >= \result.color;
        @*/
        /**
         * Internal routine that performs a single or double rotation.
         * Because the result is attached to the parent, there are four cases.
         * Called by handleReorient.
         * @param item the item in handleReorient.
         * @param parent the parent of the root of the rotated subtree.
         * @return the root of the rotated subtree.
         */
        private RedBlackNode rotate( Comparable item, RedBlackNode parent )
        {
            if( item.compareTo( parent.element ) < 0 )
                return parent.left = item.compareTo( parent.left.element ) < 0 ? rotateWithLeftChild( parent.left ) /* LL */ : rotateWithRightChild( parent.left ) /* LR */ ;


            else
                return parent.right = item.compareTo( parent.right.element ) < 0 ? rotateWithLeftChild( parent.right ) /* RL */ : rotateWithRightChild( parent.right ) /* RR */ ;


        }

        /*@
        @ private normal_behavior // Generated by Daikon
        @ requires DataStructures.RedBlackTree.nullNode == k2.left.right;
        @ requires DataStructures.RedBlackTree.nullNode == k2.right;
        @ requires DataStructures.RedBlackTree.nullNode == k2.right.left;
        @ requires DataStructures.RedBlackTree.nullNode == k2.right.right;
        @ requires DataStructures.RedBlackTree.nullNode.element == DataStructures.RedBlackTree.current.element;
        @ requires DataStructures.RedBlackTree.nullNode.element == DataStructures.RedBlackTree.current.left.element;
        @ requires DataStructures.RedBlackTree.nullNode.element == DataStructures.RedBlackTree.current.right.element;
        @ requires DataStructures.RedBlackTree.nullNode.element == DataStructures.RedBlackTree.parent.left.element;
        @ requires DataStructures.RedBlackTree.nullNode.element == DataStructures.RedBlackTree.parent.right.element;
        @ requires DataStructures.RedBlackTree.nullNode.element == DataStructures.RedBlackTree.grand.right.element;
        @ requires DataStructures.RedBlackTree.nullNode.element.getClass().getName() == k2.element.getClass().getName();
        @ requires DataStructures.RedBlackTree.nullNode.element.getClass().getName() == k2.left.element.getClass().getName();
        @ requires DataStructures.RedBlackTree.nullNode.element.getClass().getName() == k2.right.element.getClass().getName();
        @ requires DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.current.left;
        @ requires DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.current.left.left;
        @ requires DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.current.left.right;
        @ requires DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.current.right;
        @ requires DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.current.right.left;
        @ requires DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.current.right.right;
        @ requires DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.parent.left.left;
        @ requires DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.parent.left.right;
        @ requires DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.parent.right;
        @ requires DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.parent.right.left;
        @ requires DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.parent.right.right;
        @ requires DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.grand.left.right;
        @ requires DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.grand.right;
        @ requires DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.grand.right.left;
        @ requires DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.grand.right.right;
        @ requires DataStructures.RedBlackTree.current == k2.left.left;
        @ requires DataStructures.RedBlackTree.parent == k2.left;
        @ requires DataStructures.RedBlackTree.parent.element == DataStructures.RedBlackTree.grand.left.element;
        @ requires DataStructures.RedBlackTree.parent.left == DataStructures.RedBlackTree.grand.left.left;
        @ requires DataStructures.RedBlackTree.grand == k2;
        @ requires DataStructures.RedBlackTree.nullNode.element != null;
        @ requires DataStructures.RedBlackTree.current != null;
        @ requires DataStructures.RedBlackTree.current.left.color == 1;
        @ requires DataStructures.RedBlackTree.current.right.color == 1;
        @ requires DataStructures.RedBlackTree.current.color == 0;
        @ requires DataStructures.RedBlackTree.parent != null;
        @ requires DataStructures.RedBlackTree.parent.left.color == 0;
        @ requires DataStructures.RedBlackTree.parent.right.color == 1;
        @ requires DataStructures.RedBlackTree.parent.color == 0;
        @ requires DataStructures.RedBlackTree.grand != null;
        @ requires DataStructures.RedBlackTree.grand.left.color == 0;
        @ requires DataStructures.RedBlackTree.grand.right.color == 1;
        @ requires DataStructures.RedBlackTree.grand.color == 0;
        @ requires DataStructures.RedBlackTree.great != null;
        @ requires k2.element != null;
        @ requires k2.left.element != null;
        @ requires k2.left.color == 0;
        @ requires k2.right.element != null;
        @ requires k2.right.color == 1;
        @ requires k2.color == 0;
        @ ensures DataStructures.RedBlackTree.nullNode == k2.left;
        @ ensures DataStructures.RedBlackTree.nullNode == k2.left.left;
        @ ensures DataStructures.RedBlackTree.nullNode == k2.left.right;
        @ ensures DataStructures.RedBlackTree.nullNode == k2.right;
        @ ensures DataStructures.RedBlackTree.nullNode == k2.right.left;
        @ ensures DataStructures.RedBlackTree.nullNode == k2.right.right;
        @ ensures DataStructures.RedBlackTree.nullNode == \result.left.left;
        @ ensures DataStructures.RedBlackTree.nullNode == \result.left.right;
        @ ensures DataStructures.RedBlackTree.nullNode == \result.right.left;
        @ ensures DataStructures.RedBlackTree.nullNode == \result.right.right;
        @ ensures DataStructures.RedBlackTree.nullNode == \old(DataStructures.RedBlackTree.nullNode);
        @ ensures DataStructures.RedBlackTree.nullNode == \old(k2.left.right);
        @ ensures DataStructures.RedBlackTree.nullNode == \old(k2.right);
        @ ensures DataStructures.RedBlackTree.nullNode == \old(k2.right.left);
        @ ensures DataStructures.RedBlackTree.nullNode == \old(k2.right.right);
        @ ensures DataStructures.RedBlackTree.nullNode.element == DataStructures.RedBlackTree.current.element;
        @ ensures DataStructures.RedBlackTree.nullNode.element == DataStructures.RedBlackTree.current.left.element;
        @ ensures DataStructures.RedBlackTree.nullNode.element == DataStructures.RedBlackTree.current.right.element;
        @ ensures DataStructures.RedBlackTree.nullNode.element == DataStructures.RedBlackTree.parent.left.element;
        @ ensures DataStructures.RedBlackTree.nullNode.element == DataStructures.RedBlackTree.grand.left.element;
        @ ensures DataStructures.RedBlackTree.nullNode.element == DataStructures.RedBlackTree.grand.right.element;
        @ ensures DataStructures.RedBlackTree.nullNode.element == \old(DataStructures.RedBlackTree.nullNode.element);
        @ ensures DataStructures.RedBlackTree.nullNode.element == \old(DataStructures.RedBlackTree.nullNode.left.element);
        @ ensures DataStructures.RedBlackTree.nullNode.element == \old(DataStructures.RedBlackTree.nullNode.right.element);
        @ ensures DataStructures.RedBlackTree.nullNode.element == \old(DataStructures.RedBlackTree.current.element);
        @ ensures DataStructures.RedBlackTree.nullNode.element == \old(DataStructures.RedBlackTree.current.left.element);
        @ ensures DataStructures.RedBlackTree.nullNode.element == \old(DataStructures.RedBlackTree.current.right.element);
        @ ensures DataStructures.RedBlackTree.nullNode.element == \old(DataStructures.RedBlackTree.parent.left.element);
        @ ensures DataStructures.RedBlackTree.nullNode.element == \old(DataStructures.RedBlackTree.parent.right.element);
        @ ensures DataStructures.RedBlackTree.nullNode.element == \old(DataStructures.RedBlackTree.grand.right.element);
        @ ensures DataStructures.RedBlackTree.nullNode.element.getClass().getName() == k2.element.getClass().getName();
        @ ensures DataStructures.RedBlackTree.nullNode.element.getClass().getName() == k2.left.element.getClass().getName();
        @ ensures DataStructures.RedBlackTree.nullNode.element.getClass().getName() == k2.right.element.getClass().getName();
        @ ensures DataStructures.RedBlackTree.nullNode.element.getClass().getName() == \result.element.getClass().getName();
        @ ensures DataStructures.RedBlackTree.nullNode.element.getClass().getName() == \result.left.element.getClass().getName();
        @ ensures DataStructures.RedBlackTree.nullNode.element.getClass().getName() == \result.right.element.getClass().getName();
        @ ensures DataStructures.RedBlackTree.nullNode.element.getClass().getName() == \old(DataStructures.RedBlackTree.nullNode.element.getClass().getName());
        @ ensures DataStructures.RedBlackTree.nullNode.element.getClass().getName() == \old(DataStructures.RedBlackTree.nullNode.left.element.getClass().getName());
        @ ensures DataStructures.RedBlackTree.nullNode.element.getClass().getName() == \old(DataStructures.RedBlackTree.nullNode.right.element.getClass().getName());
        @ ensures DataStructures.RedBlackTree.nullNode.element.getClass().getName() == \old(DataStructures.RedBlackTree.current.element.getClass().getName());
        @ ensures DataStructures.RedBlackTree.nullNode.element.getClass().getName() == \old(DataStructures.RedBlackTree.current.left.element.getClass().getName());
        @ ensures DataStructures.RedBlackTree.nullNode.element.getClass().getName() == \old(DataStructures.RedBlackTree.current.right.element.getClass().getName());
        @ ensures DataStructures.RedBlackTree.nullNode.element.getClass().getName() == \old(DataStructures.RedBlackTree.parent.element.getClass().getName());
        @ ensures DataStructures.RedBlackTree.nullNode.element.getClass().getName() == \old(DataStructures.RedBlackTree.parent.left.element.getClass().getName());
        @ ensures DataStructures.RedBlackTree.nullNode.element.getClass().getName() == \old(DataStructures.RedBlackTree.parent.right.element.getClass().getName());
        @ ensures DataStructures.RedBlackTree.nullNode.element.getClass().getName() == \old(DataStructures.RedBlackTree.grand.element.getClass().getName());
        @ ensures DataStructures.RedBlackTree.nullNode.element.getClass().getName() == \old(DataStructures.RedBlackTree.grand.left.element.getClass().getName());
        @ ensures DataStructures.RedBlackTree.nullNode.element.getClass().getName() == \old(DataStructures.RedBlackTree.grand.right.element.getClass().getName());
        @ ensures DataStructures.RedBlackTree.nullNode.element.getClass().getName() == \old(DataStructures.RedBlackTree.great.element.getClass().getName());
        @ ensures DataStructures.RedBlackTree.nullNode.element.getClass().getName() == \old(DataStructures.RedBlackTree.great.left.element.getClass().getName());
        @ ensures DataStructures.RedBlackTree.nullNode.element.getClass().getName() == \old(DataStructures.RedBlackTree.great.right.element.getClass().getName());
        @ ensures DataStructures.RedBlackTree.nullNode.element.getClass().getName() == \old(k2.element.getClass().getName());
        @ ensures DataStructures.RedBlackTree.nullNode.element.getClass().getName() == \old(k2.left.element.getClass().getName());
        @ ensures DataStructures.RedBlackTree.nullNode.element.getClass().getName() == \old(k2.right.element.getClass().getName());
        @ ensures DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.current.left;
        @ ensures DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.current.left.left;
        @ ensures DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.current.left.right;
        @ ensures DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.current.right;
        @ ensures DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.current.right.left;
        @ ensures DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.current.right.right;
        @ ensures DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.parent.left.left;
        @ ensures DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.parent.left.right;
        @ ensures DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.parent.right.left;
        @ ensures DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.parent.right.right;
        @ ensures DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.grand.left;
        @ ensures DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.grand.left.left;
        @ ensures DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.grand.left.right;
        @ ensures DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.grand.right;
        @ ensures DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.grand.right.left;
        @ ensures DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.grand.right.right;
        @ ensures DataStructures.RedBlackTree.nullNode.left == \old(DataStructures.RedBlackTree.nullNode.left);
        @ ensures DataStructures.RedBlackTree.nullNode.left == \old(DataStructures.RedBlackTree.nullNode.left.left);
        @ ensures DataStructures.RedBlackTree.nullNode.left == \old(DataStructures.RedBlackTree.nullNode.left.right);
        @ ensures DataStructures.RedBlackTree.nullNode.left == \old(DataStructures.RedBlackTree.nullNode.right);
        @ ensures DataStructures.RedBlackTree.nullNode.left == \old(DataStructures.RedBlackTree.nullNode.right.left);
        @ ensures DataStructures.RedBlackTree.nullNode.left == \old(DataStructures.RedBlackTree.nullNode.right.right);
        @ ensures DataStructures.RedBlackTree.nullNode.left == \old(DataStructures.RedBlackTree.current.left);
        @ ensures DataStructures.RedBlackTree.nullNode.left == \old(DataStructures.RedBlackTree.current.left.left);
        @ ensures DataStructures.RedBlackTree.nullNode.left == \old(DataStructures.RedBlackTree.current.left.right);
        @ ensures DataStructures.RedBlackTree.nullNode.left == \old(DataStructures.RedBlackTree.current.right);
        @ ensures DataStructures.RedBlackTree.nullNode.left == \old(DataStructures.RedBlackTree.current.right.left);
        @ ensures DataStructures.RedBlackTree.nullNode.left == \old(DataStructures.RedBlackTree.current.right.right);
        @ ensures DataStructures.RedBlackTree.nullNode.left == \old(DataStructures.RedBlackTree.parent.left.left);
        @ ensures DataStructures.RedBlackTree.nullNode.left == \old(DataStructures.RedBlackTree.parent.left.right);
        @ ensures DataStructures.RedBlackTree.nullNode.left == \old(DataStructures.RedBlackTree.parent.right);
        @ ensures DataStructures.RedBlackTree.nullNode.left == \old(DataStructures.RedBlackTree.parent.right.left);
        @ ensures DataStructures.RedBlackTree.nullNode.left == \old(DataStructures.RedBlackTree.parent.right.right);
        @ ensures DataStructures.RedBlackTree.nullNode.left == \old(DataStructures.RedBlackTree.grand.left.right);
        @ ensures DataStructures.RedBlackTree.nullNode.left == \old(DataStructures.RedBlackTree.grand.right);
        @ ensures DataStructures.RedBlackTree.nullNode.left == \old(DataStructures.RedBlackTree.grand.right.left);
        @ ensures DataStructures.RedBlackTree.nullNode.left == \old(DataStructures.RedBlackTree.grand.right.right);
        @ ensures DataStructures.RedBlackTree.nullNode.left.color == \old(DataStructures.RedBlackTree.nullNode.left.color);
        @ ensures DataStructures.RedBlackTree.nullNode.right.color == \old(DataStructures.RedBlackTree.nullNode.right.color);
        @ ensures DataStructures.RedBlackTree.nullNode.color == \old(DataStructures.RedBlackTree.nullNode.color);
        @ ensures DataStructures.RedBlackTree.current == \result.left;
        @ ensures DataStructures.RedBlackTree.current == \old(DataStructures.RedBlackTree.current);
        @ ensures DataStructures.RedBlackTree.current == \old(k2.left.left);
        @ ensures DataStructures.RedBlackTree.current.left.color == \old(DataStructures.RedBlackTree.current.left.color);
        @ ensures DataStructures.RedBlackTree.current.right.color == \old(DataStructures.RedBlackTree.current.right.color);
        @ ensures DataStructures.RedBlackTree.current.color == \old(DataStructures.RedBlackTree.current.color);
        @ ensures DataStructures.RedBlackTree.parent == \result;
        @ ensures DataStructures.RedBlackTree.parent == \old(DataStructures.RedBlackTree.parent);
        @ ensures DataStructures.RedBlackTree.parent == \old(k2.left);
        @ ensures DataStructures.RedBlackTree.parent.element == \old(DataStructures.RedBlackTree.parent.element);
        @ ensures DataStructures.RedBlackTree.parent.element == \old(DataStructures.RedBlackTree.grand.left.element);
        @ ensures DataStructures.RedBlackTree.parent.left == \old(DataStructures.RedBlackTree.parent.left);
        @ ensures DataStructures.RedBlackTree.parent.left == \old(DataStructures.RedBlackTree.grand.left.left);
        @ ensures DataStructures.RedBlackTree.parent.left.color == \old(DataStructures.RedBlackTree.parent.left.color);
        @ ensures DataStructures.RedBlackTree.parent.right.element == DataStructures.RedBlackTree.grand.element;
        @ ensures DataStructures.RedBlackTree.parent.color == \old(DataStructures.RedBlackTree.parent.color);
        @ ensures DataStructures.RedBlackTree.grand == \result.right;
        @ ensures DataStructures.RedBlackTree.grand == \old(DataStructures.RedBlackTree.grand);
        @ ensures DataStructures.RedBlackTree.grand == \old(k2);
        @ ensures DataStructures.RedBlackTree.grand.element == \old(DataStructures.RedBlackTree.grand.element);
        @ ensures DataStructures.RedBlackTree.grand.right.color == \old(DataStructures.RedBlackTree.grand.right.color);
        @ ensures DataStructures.RedBlackTree.grand.color == \old(DataStructures.RedBlackTree.grand.color);
        @ ensures DataStructures.RedBlackTree.great == \old(DataStructures.RedBlackTree.great);
        @ ensures DataStructures.RedBlackTree.great.element == \old(DataStructures.RedBlackTree.great.element);
        @ ensures DataStructures.RedBlackTree.great.left == \old(DataStructures.RedBlackTree.great.left);
        @ ensures DataStructures.RedBlackTree.great.left.element == \old(DataStructures.RedBlackTree.great.left.element);
        @ ensures DataStructures.RedBlackTree.great.left.right == \old(DataStructures.RedBlackTree.great.left.right);
        @ ensures DataStructures.RedBlackTree.great.left.color == \old(DataStructures.RedBlackTree.great.left.color);
        @ ensures DataStructures.RedBlackTree.great.right == \old(DataStructures.RedBlackTree.great.right);
        @ ensures DataStructures.RedBlackTree.great.right.element == \old(DataStructures.RedBlackTree.great.right.element);
        @ ensures DataStructures.RedBlackTree.great.right.right == \old(DataStructures.RedBlackTree.great.right.right);
        @ ensures DataStructures.RedBlackTree.great.right.color == \old(DataStructures.RedBlackTree.great.right.color);
        @ ensures DataStructures.RedBlackTree.great.color == \old(DataStructures.RedBlackTree.great.color);
        @ ensures k2.element == \result.right.element;
        @ ensures k2.element == \old(k2.element);
        @ ensures k2.left.element == k2.right.element;
        @ ensures k2.left.element == \result.left.element;
        @ ensures k2.left.element == \old(k2.right.element);
        @ ensures k2.left.color == k2.right.color;
        @ ensures k2.left.color == \old(k2.right.color);
        @ ensures k2.color == \result.right.color;
        @ ensures k2.color == \old(k2.color);
        @ ensures DataStructures.RedBlackTree.nullNode.element != null;
        @ ensures DataStructures.RedBlackTree.current != null;
        @ ensures DataStructures.RedBlackTree.current.left.color == 1;
        @ ensures DataStructures.RedBlackTree.current.right.color == 1;
        @ ensures DataStructures.RedBlackTree.current.color == 0;
        @ ensures DataStructures.RedBlackTree.parent != null;
        @ ensures DataStructures.RedBlackTree.parent.left.color == 0;
        @ ensures DataStructures.RedBlackTree.parent.right.color == 0;
        @ ensures DataStructures.RedBlackTree.parent.color == 0;
        @ ensures DataStructures.RedBlackTree.grand != null;
        @ ensures DataStructures.RedBlackTree.grand.left.color == 1;
        @ ensures DataStructures.RedBlackTree.grand.right.color == 1;
        @ ensures DataStructures.RedBlackTree.grand.color == 0;
        @ ensures DataStructures.RedBlackTree.great != null;
        @ ensures k2.element != null;
        @ ensures k2.left.element != null;
        @ ensures k2.left.color == 1;
        @ ensures k2.color == 0;
        @ ensures \result.element != null;
        @ ensures \result.left.color == 0;
        @ ensures \result.color == 0;
        @*/
        /**
         * Rotate binary tree node with left child.
         */
        static RedBlackNode rotateWithLeftChild( RedBlackNode k2 )
        {
            RedBlackNode k1 = k2.left;
            k2.left = k1.right;
            k1.right = k2;
            return k1;
        }

        /*@
        @ private normal_behavior // Generated by Daikon
        @ requires DataStructures.RedBlackTree.nullNode.element.getClass().getName() == k1.element.getClass().getName();
        @ requires DataStructures.RedBlackTree.nullNode.element.getClass().getName() == k1.left.element.getClass().getName();
        @ requires DataStructures.RedBlackTree.nullNode.element.getClass().getName() == k1.right.element.getClass().getName();
        @ requires DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.current.left.left;
        @ requires DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.current.left.right;
        @ requires DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.current.right.left;
        @ requires DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.current.right.right;
        @ requires DataStructures.RedBlackTree.current == k1.right.right;
        @ requires DataStructures.RedBlackTree.current.element == DataStructures.RedBlackTree.parent.right.element;
        @ requires DataStructures.RedBlackTree.current.left == DataStructures.RedBlackTree.parent.right.left;
        @ requires DataStructures.RedBlackTree.current.right == DataStructures.RedBlackTree.parent.right.right;
        @ requires DataStructures.RedBlackTree.parent == k1.right;
        @ requires DataStructures.RedBlackTree.parent.element == DataStructures.RedBlackTree.grand.right.element;
        @ requires DataStructures.RedBlackTree.parent.left == DataStructures.RedBlackTree.grand.right.left;
        @ requires DataStructures.RedBlackTree.parent.right == DataStructures.RedBlackTree.grand.right.right;
        @ requires DataStructures.RedBlackTree.grand == k1;
        @ requires DataStructures.RedBlackTree.nullNode.element != null;
        @ requires DataStructures.RedBlackTree.current != null;
        @ requires DataStructures.RedBlackTree.current.left.color == 1;
        @ requires DataStructures.RedBlackTree.current.right.color == 1;
        @ requires DataStructures.RedBlackTree.current.color == 0;
        @ requires DataStructures.RedBlackTree.parent != null;
        @ requires DataStructures.RedBlackTree.parent.left.color == 1;
        @ requires DataStructures.RedBlackTree.parent.right.color == 0;
        @ requires DataStructures.RedBlackTree.parent.color == 0;
        @ requires DataStructures.RedBlackTree.grand != null;
        @ requires DataStructures.RedBlackTree.grand.left.color == 1;
        @ requires DataStructures.RedBlackTree.grand.right.color == 0;
        @ requires DataStructures.RedBlackTree.grand.color == 0;
        @ requires DataStructures.RedBlackTree.great != null;
        @ requires k1.element != null;
        @ requires k1.left != null;
        @ requires k1.left.element != null;
        @ requires k1.left.left != null;
        @ requires k1.left.right != null;
        @ requires k1.left.color == 1;
        @ requires k1.right.element != null;
        @ requires k1.right.left != null;
        @ requires k1.right.color == 0;
        @ requires k1.color == 0;
        @ ensures DataStructures.RedBlackTree.nullNode == \old(DataStructures.RedBlackTree.nullNode);
        @ ensures DataStructures.RedBlackTree.nullNode.element == \old(DataStructures.RedBlackTree.nullNode.element);
        @ ensures DataStructures.RedBlackTree.nullNode.element == \old(DataStructures.RedBlackTree.nullNode.left.element);
        @ ensures DataStructures.RedBlackTree.nullNode.element == \old(DataStructures.RedBlackTree.nullNode.right.element);
        @ ensures DataStructures.RedBlackTree.nullNode.element.getClass().getName() == k1.element.getClass().getName();
        @ ensures DataStructures.RedBlackTree.nullNode.element.getClass().getName() == k1.left.element.getClass().getName();
        @ ensures DataStructures.RedBlackTree.nullNode.element.getClass().getName() == k1.right.element.getClass().getName();
        @ ensures DataStructures.RedBlackTree.nullNode.element.getClass().getName() == \result.element.getClass().getName();
        @ ensures DataStructures.RedBlackTree.nullNode.element.getClass().getName() == \result.left.element.getClass().getName();
        @ ensures DataStructures.RedBlackTree.nullNode.element.getClass().getName() == \result.right.element.getClass().getName();
        @ ensures DataStructures.RedBlackTree.nullNode.element.getClass().getName() == \old(DataStructures.RedBlackTree.nullNode.element.getClass().getName());
        @ ensures DataStructures.RedBlackTree.nullNode.element.getClass().getName() == \old(DataStructures.RedBlackTree.nullNode.left.element.getClass().getName());
        @ ensures DataStructures.RedBlackTree.nullNode.element.getClass().getName() == \old(DataStructures.RedBlackTree.nullNode.right.element.getClass().getName());
        @ ensures DataStructures.RedBlackTree.nullNode.element.getClass().getName() == \old(DataStructures.RedBlackTree.current.element.getClass().getName());
        @ ensures DataStructures.RedBlackTree.nullNode.element.getClass().getName() == \old(DataStructures.RedBlackTree.current.left.element.getClass().getName());
        @ ensures DataStructures.RedBlackTree.nullNode.element.getClass().getName() == \old(DataStructures.RedBlackTree.current.right.element.getClass().getName());
        @ ensures DataStructures.RedBlackTree.nullNode.element.getClass().getName() == \old(DataStructures.RedBlackTree.parent.element.getClass().getName());
        @ ensures DataStructures.RedBlackTree.nullNode.element.getClass().getName() == \old(DataStructures.RedBlackTree.parent.left.element.getClass().getName());
        @ ensures DataStructures.RedBlackTree.nullNode.element.getClass().getName() == \old(DataStructures.RedBlackTree.parent.right.element.getClass().getName());
        @ ensures DataStructures.RedBlackTree.nullNode.element.getClass().getName() == \old(DataStructures.RedBlackTree.grand.element.getClass().getName());
        @ ensures DataStructures.RedBlackTree.nullNode.element.getClass().getName() == \old(DataStructures.RedBlackTree.grand.left.element.getClass().getName());
        @ ensures DataStructures.RedBlackTree.nullNode.element.getClass().getName() == \old(DataStructures.RedBlackTree.grand.right.element.getClass().getName());
        @ ensures DataStructures.RedBlackTree.nullNode.element.getClass().getName() == \old(DataStructures.RedBlackTree.great.element.getClass().getName());
        @ ensures DataStructures.RedBlackTree.nullNode.element.getClass().getName() == \old(DataStructures.RedBlackTree.great.left.element.getClass().getName());
        @ ensures DataStructures.RedBlackTree.nullNode.element.getClass().getName() == \old(DataStructures.RedBlackTree.great.right.element.getClass().getName());
        @ ensures DataStructures.RedBlackTree.nullNode.element.getClass().getName() == \old(k1.element.getClass().getName());
        @ ensures DataStructures.RedBlackTree.nullNode.element.getClass().getName() == \old(k1.left.element.getClass().getName());
        @ ensures DataStructures.RedBlackTree.nullNode.element.getClass().getName() == \old(k1.right.element.getClass().getName());
        @ ensures DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.current.left.left;
        @ ensures DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.current.left.right;
        @ ensures DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.current.right.left;
        @ ensures DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.current.right.right;
        @ ensures DataStructures.RedBlackTree.nullNode.left == \old(DataStructures.RedBlackTree.nullNode.left);
        @ ensures DataStructures.RedBlackTree.nullNode.left == \old(DataStructures.RedBlackTree.nullNode.left.left);
        @ ensures DataStructures.RedBlackTree.nullNode.left == \old(DataStructures.RedBlackTree.nullNode.left.right);
        @ ensures DataStructures.RedBlackTree.nullNode.left == \old(DataStructures.RedBlackTree.nullNode.right);
        @ ensures DataStructures.RedBlackTree.nullNode.left == \old(DataStructures.RedBlackTree.nullNode.right.left);
        @ ensures DataStructures.RedBlackTree.nullNode.left == \old(DataStructures.RedBlackTree.nullNode.right.right);
        @ ensures DataStructures.RedBlackTree.nullNode.left == \old(DataStructures.RedBlackTree.current.left.left);
        @ ensures DataStructures.RedBlackTree.nullNode.left == \old(DataStructures.RedBlackTree.current.left.right);
        @ ensures DataStructures.RedBlackTree.nullNode.left == \old(DataStructures.RedBlackTree.current.right.left);
        @ ensures DataStructures.RedBlackTree.nullNode.left == \old(DataStructures.RedBlackTree.current.right.right);
        @ ensures DataStructures.RedBlackTree.nullNode.left.color == \old(DataStructures.RedBlackTree.nullNode.left.color);
        @ ensures DataStructures.RedBlackTree.nullNode.right.color == \old(DataStructures.RedBlackTree.nullNode.right.color);
        @ ensures DataStructures.RedBlackTree.nullNode.color == \old(DataStructures.RedBlackTree.nullNode.color);
        @ ensures DataStructures.RedBlackTree.current == \result.right;
        @ ensures DataStructures.RedBlackTree.current == \old(DataStructures.RedBlackTree.current);
        @ ensures DataStructures.RedBlackTree.current == \old(k1.right.right);
        @ ensures DataStructures.RedBlackTree.current.element == DataStructures.RedBlackTree.parent.right.element;
        @ ensures DataStructures.RedBlackTree.current.element == \old(DataStructures.RedBlackTree.current.element);
        @ ensures DataStructures.RedBlackTree.current.element == \old(DataStructures.RedBlackTree.parent.right.element);
        @ ensures DataStructures.RedBlackTree.current.left == DataStructures.RedBlackTree.parent.right.left;
        @ ensures DataStructures.RedBlackTree.current.left == \old(DataStructures.RedBlackTree.current.left);
        @ ensures DataStructures.RedBlackTree.current.left == \old(DataStructures.RedBlackTree.parent.right.left);
        @ ensures DataStructures.RedBlackTree.current.left.element == \old(DataStructures.RedBlackTree.current.left.element);
        @ ensures DataStructures.RedBlackTree.current.left.color == \old(DataStructures.RedBlackTree.current.left.color);
        @ ensures DataStructures.RedBlackTree.current.right == DataStructures.RedBlackTree.parent.right.right;
        @ ensures DataStructures.RedBlackTree.current.right == \old(DataStructures.RedBlackTree.current.right);
        @ ensures DataStructures.RedBlackTree.current.right == \old(DataStructures.RedBlackTree.parent.right.right);
        @ ensures DataStructures.RedBlackTree.current.right.element == \old(DataStructures.RedBlackTree.current.right.element);
        @ ensures DataStructures.RedBlackTree.current.right.color == \old(DataStructures.RedBlackTree.current.right.color);
        @ ensures DataStructures.RedBlackTree.current.color == \old(DataStructures.RedBlackTree.current.color);
        @ ensures DataStructures.RedBlackTree.parent == \result;
        @ ensures DataStructures.RedBlackTree.parent == \old(DataStructures.RedBlackTree.parent);
        @ ensures DataStructures.RedBlackTree.parent == \old(k1.right);
        @ ensures DataStructures.RedBlackTree.parent.element == \old(DataStructures.RedBlackTree.parent.element);
        @ ensures DataStructures.RedBlackTree.parent.element == \old(DataStructures.RedBlackTree.grand.right.element);
        @ ensures DataStructures.RedBlackTree.parent.left.element == DataStructures.RedBlackTree.grand.element;
        @ ensures DataStructures.RedBlackTree.parent.left.left == DataStructures.RedBlackTree.grand.left;
        @ ensures DataStructures.RedBlackTree.parent.left.right == DataStructures.RedBlackTree.grand.right;
        @ ensures DataStructures.RedBlackTree.parent.right == \old(DataStructures.RedBlackTree.parent.right);
        @ ensures DataStructures.RedBlackTree.parent.right == \old(DataStructures.RedBlackTree.grand.right.right);
        @ ensures DataStructures.RedBlackTree.parent.right.color == \old(DataStructures.RedBlackTree.parent.right.color);
        @ ensures DataStructures.RedBlackTree.parent.color == \old(DataStructures.RedBlackTree.parent.color);
        @ ensures DataStructures.RedBlackTree.grand == \result.left;
        @ ensures DataStructures.RedBlackTree.grand == \old(DataStructures.RedBlackTree.grand);
        @ ensures DataStructures.RedBlackTree.grand == \old(k1);
        @ ensures DataStructures.RedBlackTree.grand.element == \old(DataStructures.RedBlackTree.grand.element);
        @ ensures DataStructures.RedBlackTree.grand.left == \old(DataStructures.RedBlackTree.grand.left);
        @ ensures DataStructures.RedBlackTree.grand.left.element == \old(DataStructures.RedBlackTree.grand.left.element);
        @ ensures DataStructures.RedBlackTree.grand.left.left == \old(DataStructures.RedBlackTree.grand.left.left);
        @ ensures DataStructures.RedBlackTree.grand.left.right == \old(DataStructures.RedBlackTree.grand.left.right);
        @ ensures DataStructures.RedBlackTree.grand.left.color == \old(DataStructures.RedBlackTree.grand.left.color);
        @ ensures DataStructures.RedBlackTree.grand.right == \old(DataStructures.RedBlackTree.parent.left);
        @ ensures DataStructures.RedBlackTree.grand.right == \old(DataStructures.RedBlackTree.grand.right.left);
        @ ensures DataStructures.RedBlackTree.grand.right.element == \old(DataStructures.RedBlackTree.parent.left.element);
        @ ensures DataStructures.RedBlackTree.grand.right.left == \old(DataStructures.RedBlackTree.parent.left.left);
        @ ensures DataStructures.RedBlackTree.grand.right.right == \old(DataStructures.RedBlackTree.parent.left.right);
        @ ensures DataStructures.RedBlackTree.grand.color == \old(DataStructures.RedBlackTree.grand.color);
        @ ensures DataStructures.RedBlackTree.great == \old(DataStructures.RedBlackTree.great);
        @ ensures DataStructures.RedBlackTree.great.element == \old(DataStructures.RedBlackTree.great.element);
        @ ensures DataStructures.RedBlackTree.great.left == \old(DataStructures.RedBlackTree.great.left);
        @ ensures DataStructures.RedBlackTree.great.left.element == \old(DataStructures.RedBlackTree.great.left.element);
        @ ensures DataStructures.RedBlackTree.great.left.left == \old(DataStructures.RedBlackTree.great.left.left);
        @ ensures DataStructures.RedBlackTree.great.left.color == \old(DataStructures.RedBlackTree.great.left.color);
        @ ensures DataStructures.RedBlackTree.great.right == \old(DataStructures.RedBlackTree.great.right);
        @ ensures DataStructures.RedBlackTree.great.right.element == \old(DataStructures.RedBlackTree.great.right.element);
        @ ensures DataStructures.RedBlackTree.great.right.left == \old(DataStructures.RedBlackTree.great.right.left);
        @ ensures DataStructures.RedBlackTree.great.right.color == \old(DataStructures.RedBlackTree.great.right.color);
        @ ensures DataStructures.RedBlackTree.great.color == \old(DataStructures.RedBlackTree.great.color);
        @ ensures k1.element == \result.left.element;
        @ ensures k1.element == \old(k1.element);
        @ ensures k1.left == \result.left.left;
        @ ensures k1.left == \old(k1.left);
        @ ensures k1.left.element == \old(k1.left.element);
        @ ensures k1.left.left == \old(k1.left.left);
        @ ensures k1.left.right == \old(k1.left.right);
        @ ensures k1.left.color == k1.right.color;
        @ ensures k1.left.color == \old(k1.left.color);
        @ ensures k1.right == \result.left.right;
        @ ensures k1.right == \old(k1.right.left);
        @ ensures k1.color == \result.left.color;
        @ ensures k1.color == \old(k1.color);
        @ ensures DataStructures.RedBlackTree.nullNode.element != null;
        @ ensures DataStructures.RedBlackTree.current != null;
        @ ensures DataStructures.RedBlackTree.current.left.color == 1;
        @ ensures DataStructures.RedBlackTree.current.right.color == 1;
        @ ensures DataStructures.RedBlackTree.current.color == 0;
        @ ensures DataStructures.RedBlackTree.parent != null;
        @ ensures DataStructures.RedBlackTree.parent.left.color == 0;
        @ ensures DataStructures.RedBlackTree.parent.right.color == 0;
        @ ensures DataStructures.RedBlackTree.parent.color == 0;
        @ ensures DataStructures.RedBlackTree.grand != null;
        @ ensures DataStructures.RedBlackTree.grand.left.color == 1;
        @ ensures DataStructures.RedBlackTree.grand.right.color == 1;
        @ ensures DataStructures.RedBlackTree.grand.color == 0;
        @ ensures DataStructures.RedBlackTree.great != null;
        @ ensures k1.element != null;
        @ ensures k1.left != null;
        @ ensures k1.left.element != null;
        @ ensures k1.left.left != null;
        @ ensures k1.left.right != null;
        @ ensures k1.left.color == 1;
        @ ensures k1.right != null;
        @ ensures k1.right.element != null;
        @ ensures k1.right.left != null;
        @ ensures k1.right.right != null;
        @ ensures k1.color == 0;
        @ ensures \result.element != null;
        @ ensures \result.right.element != null;
        @ ensures \result.right.left != null;
        @ ensures \result.right.right != null;
        @ ensures \result.right.color == 0;
        @ ensures \result.color == 0;
        @*/
        /**
         * Rotate binary tree node with right child.
         */
        static RedBlackNode rotateWithRightChild( RedBlackNode k1 )
        {
            RedBlackNode k2 = k1.right;
            k1.right = k2.left;
            k2.left = k1;
            return k2;
        }

        /*@ spec_public */ private RedBlackNode header;
        /*@ spec_public */ private static RedBlackNode nullNode;
            static         // Static initializer for nullNode
            {
                nullNode = new RedBlackNode( null );
                nullNode.left = nullNode.right = nullNode;
            }

        /*@ spec_public */ static final int BLACK = 1;    // Black must be 1
        /*@ spec_public */ static final int RED   = 0;

            // Used in insert routine and its helpers
        /*@ spec_public */ private static RedBlackNode current;
        /*@ spec_public */ private static RedBlackNode parent;
        /*@ spec_public */ private static RedBlackNode grand;
        /*@ spec_public */ private static RedBlackNode great;


            /*@
            @ public normal_behavior // Generated by Daikon
            @ requires DataStructures.RedBlackTree.current == DataStructures.RedBlackTree.parent;
            @ requires DataStructures.RedBlackTree.current == DataStructures.RedBlackTree.grand;
            @ requires DataStructures.RedBlackTree.current == DataStructures.RedBlackTree.great;
            @ requires DataStructures.RedBlackTree.nullNode.element == null;
            @ requires DataStructures.RedBlackTree.current == null;
            @ requires args != null;
            @ requires args.getClass().getName() == java.lang.String[].class.getName();
            @ requires daikon.Quant.pairwiseEqual(daikon.Quant.collectObject(args, "toString()"), new String[] {  });
            @ ensures DataStructures.RedBlackTree.nullNode == \old(DataStructures.RedBlackTree.nullNode);
            @ ensures DataStructures.RedBlackTree.nullNode.element == DataStructures.RedBlackTree.current.left.element;
            @ ensures DataStructures.RedBlackTree.nullNode.element == DataStructures.RedBlackTree.current.right.element;
            @ ensures DataStructures.RedBlackTree.nullNode.element == DataStructures.RedBlackTree.parent.left.element;
            @ ensures DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.current.left;
            @ ensures DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.current.left.left;
            @ ensures DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.current.left.right;
            @ ensures DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.current.right;
            @ ensures DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.current.right.left;
            @ ensures DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.current.right.right;
            @ ensures DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.parent.left;
            @ ensures DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.parent.left.left;
            @ ensures DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.parent.left.right;
            @ ensures DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.parent.right.left;
            @ ensures DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.parent.right.right;
            @ ensures DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.grand.left.left;
            @ ensures DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.grand.right.left;
            @ ensures DataStructures.RedBlackTree.nullNode.left == DataStructures.RedBlackTree.grand.right.right;
            @ ensures DataStructures.RedBlackTree.nullNode.left == \old(DataStructures.RedBlackTree.nullNode.left);
            @ ensures DataStructures.RedBlackTree.nullNode.left == \old(DataStructures.RedBlackTree.nullNode.left.left);
            @ ensures DataStructures.RedBlackTree.nullNode.left == \old(DataStructures.RedBlackTree.nullNode.left.right);
            @ ensures DataStructures.RedBlackTree.nullNode.left == \old(DataStructures.RedBlackTree.nullNode.right);
            @ ensures DataStructures.RedBlackTree.nullNode.left == \old(DataStructures.RedBlackTree.nullNode.right.left);
            @ ensures DataStructures.RedBlackTree.nullNode.left == \old(DataStructures.RedBlackTree.nullNode.right.right);
            @ ensures DataStructures.RedBlackTree.nullNode.left.color == \old(DataStructures.RedBlackTree.nullNode.left.color);
            @ ensures DataStructures.RedBlackTree.nullNode.right.color == \old(DataStructures.RedBlackTree.nullNode.right.color);
            @ ensures DataStructures.RedBlackTree.nullNode.color == \old(DataStructures.RedBlackTree.nullNode.color);
            @ ensures DataStructures.RedBlackTree.parent.element == DataStructures.RedBlackTree.grand.left.element;
            @ ensures DataStructures.RedBlackTree.parent.right == DataStructures.RedBlackTree.grand.left.right;
            @ ensures DataStructures.RedBlackTree.grand.element == DataStructures.RedBlackTree.great.left.element;
            @ ensures DataStructures.RedBlackTree.grand.left == DataStructures.RedBlackTree.great.left.left;
            @ ensures DataStructures.RedBlackTree.grand.right == DataStructures.RedBlackTree.great.left.right;
            @ ensures daikon.Quant.pairwiseEqual(args, \old(args));
            @ ensures DataStructures.RedBlackTree.nullNode.element != null;
            @ ensures DataStructures.RedBlackTree.current != null;
            @ ensures DataStructures.RedBlackTree.current.element != null;
            @ ensures DataStructures.RedBlackTree.current.left.color == 1;
            @ ensures DataStructures.RedBlackTree.current.right.color == 1;
            @ ensures DataStructures.RedBlackTree.current.color == 0;
            @ ensures DataStructures.RedBlackTree.parent != null;
            @ ensures DataStructures.RedBlackTree.parent.element != null;
            @ ensures DataStructures.RedBlackTree.parent.left.color == 1;
            @ ensures DataStructures.RedBlackTree.parent.right != null;
            @ ensures DataStructures.RedBlackTree.parent.right.element != null;
            @ ensures DataStructures.RedBlackTree.parent.right.color == 0;
            @ ensures DataStructures.RedBlackTree.parent.color == 1;
            @ ensures DataStructures.RedBlackTree.grand != null;
            @ ensures DataStructures.RedBlackTree.grand.element != null;
            @ ensures DataStructures.RedBlackTree.grand.left != null;
            @ ensures DataStructures.RedBlackTree.grand.left.color == 1;
            @ ensures DataStructures.RedBlackTree.grand.right != null;
            @ ensures DataStructures.RedBlackTree.grand.right.element != null;
            @ ensures DataStructures.RedBlackTree.grand.right.color == 1;
            @ ensures DataStructures.RedBlackTree.grand.color == 0;
            @ ensures DataStructures.RedBlackTree.great != null;
            @ ensures DataStructures.RedBlackTree.great.element != null;
            @ ensures DataStructures.RedBlackTree.great.left != null;
            @ ensures DataStructures.RedBlackTree.great.left.color == 0;
            @ ensures DataStructures.RedBlackTree.great.right != null;
            @ ensures DataStructures.RedBlackTree.great.right.element != null;
            @ ensures DataStructures.RedBlackTree.great.right.left != null;
            @ ensures DataStructures.RedBlackTree.great.right.right != null;
            @ ensures DataStructures.RedBlackTree.great.right.color == 1;
            @ ensures DataStructures.RedBlackTree.great.color == 1;
            @ ensures daikon.Quant.pairwiseEqual(daikon.Quant.collectObject(args, "toString()"), new String[] {  });
            @*/
            // Test program
        public static void main( String [ ] args )
        {
            RedBlackTree t = new RedBlackTree( new MyInteger( Integer.MIN_VALUE ) );
            final int NUMS = 400;
            final int GAP  =  37;

            for( int i = GAP; i != 0; i = ( i + GAP ) % NUMS )
                t.insert( new MyInteger( i ) );

            if( NUMS < 40 )
                t.printTree( );
            if( ((MyInteger)(t.findMin( ))).intValue( ) != 1 ||
                ((MyInteger)(t.findMax( ))).intValue( ) != NUMS - 1 )
                System.out.println( "FindMin or FindMax error!" );

            for( int i = 1; i < NUMS; i++ )
                 if( ((MyInteger)(t.find( new MyInteger( i ) ))).intValue( ) != i )
                     System.out.println( "Find error1!" );
        }
    }
    package DataStructures;

    // Basic node stored in red-black trees
    // Note that this class is not accessible outside
    // of package DataStructures

    class RedBlackNode
    {
            /*@ invariant this.element == this.left.element; */
            /*@ invariant this.element.getClass().getName() == this.left.element.getClass().getName(); */
            /*@ invariant this.left == this.left.left; */
            /*@ invariant this.left == this.right; */
            /*@ invariant this.left.element == this.left.left.element; */
            /*@ invariant this.left.element == this.left.right.element; */
            /*@ invariant this.left.element == this.right.element; */
            /*@ invariant this.left.element == this.right.left.element; */
            /*@ invariant this.left.element == this.right.right.element; */
            /*@ invariant this.left.element.getClass().getName() == this.left.left.element.getClass().getName(); */
            /*@ invariant this.left.element.getClass().getName() == this.left.right.element.getClass().getName(); */
            /*@ invariant this.left.element.getClass().getName() == this.right.element.getClass().getName(); */
            /*@ invariant this.left.element.getClass().getName() == this.right.left.element.getClass().getName(); */
            /*@ invariant this.left.element.getClass().getName() == this.right.right.element.getClass().getName(); */
            /*@ invariant this.left.left == this.left.left.left; */
            /*@ invariant this.left.left == this.left.left.right; */
            /*@ invariant this.left.left == this.left.right; */
            /*@ invariant this.left.left == this.left.right.left; */
            /*@ invariant this.left.left == this.left.right.right; */
            /*@ invariant this.left.left == this.right.left; */
            /*@ invariant this.left.left == this.right.left.left; */
            /*@ invariant this.left.left == this.right.left.right; */
            /*@ invariant this.left.left == this.right.right; */
            /*@ invariant this.left.left == this.right.right.left; */
            /*@ invariant this.left.left == this.right.right.right; */
            /*@ invariant this.left.left.color == this.left.color; */
            /*@ invariant this.left.right.color == this.left.color; */
            /*@ invariant this.left.color == this.right.left.color; */
            /*@ invariant this.left.color == this.right.right.color; */
            /*@ invariant this.left.color == this.right.color; */
            /*@ invariant this.element.getClass().getName() == DataStructures.MyInteger.class.getName(); */
            /*@ invariant this.left.element != null; */
            /*@ invariant this.left.element.getClass().getName() == DataStructures.MyInteger.class.getName(); */
            /*@ invariant this.left.left != null; */
            /*@ invariant this.left.left != null; */
            /*@ invariant this.left.color == 1; */
            /*@ invariant this.color == 1; */
            /*@
            @ private normal_behavior // Generated by Daikon
            @ requires theElement.getClass().getName() == DataStructures.MyInteger.class.getName();
            @ ensures this.element == \old(theElement);
            @ ensures this.element.getClass().getName() == \old(theElement.getClass().getName());
            @ ensures this.left == null;
            @*/
            // Constructors
        RedBlackNode( Comparable theElement )
        {
            this( theElement, null, null );
        }

        /*@
        @ private normal_behavior // Generated by Daikon
        @ requires theElement == lt.element;
        @ requires theElement.getClass().getName() == lt.element.getClass().getName();
        @ requires lt == lt.left;
        @ requires lt == rt;
        @ requires lt.element == lt.left.element;
        @ requires lt.element == lt.right.element;
        @ requires lt.element == rt.element;
        @ requires lt.element == rt.left.element;
        @ requires lt.element == rt.right.element;
        @ requires lt.element.getClass().getName() == lt.left.element.getClass().getName();
        @ requires lt.element.getClass().getName() == lt.right.element.getClass().getName();
        @ requires lt.element.getClass().getName() == rt.element.getClass().getName();
        @ requires lt.element.getClass().getName() == rt.left.element.getClass().getName();
        @ requires lt.element.getClass().getName() == rt.right.element.getClass().getName();
        @ requires lt.left == lt.left.left;
        @ requires lt.left == lt.left.right;
        @ requires lt.left == lt.right;
        @ requires lt.left == lt.right.left;
        @ requires lt.left == lt.right.right;
        @ requires lt.left == rt.left;
        @ requires lt.left == rt.left.left;
        @ requires lt.left == rt.left.right;
        @ requires lt.left == rt.right;
        @ requires lt.left == rt.right.left;
        @ requires lt.left == rt.right.right;
        @ requires lt.left.color == lt.color;
        @ requires lt.right.color == lt.color;
        @ requires lt.color == rt.left.color;
        @ requires lt.color == rt.right.color;
        @ requires lt.color == rt.color;
        @ requires theElement.getClass().getName() == DataStructures.MyInteger.class.getName();
        @ requires lt.element != null;
        @ requires lt.element.getClass().getName() == DataStructures.MyInteger.class.getName();
        @ requires lt.left != null;
        @ requires lt.left != null;
        @ requires lt.color == 1;
        @ ensures this.element == lt.element;
        @ ensures this.element == \old(theElement);
        @ ensures this.element.getClass().getName() == lt.element.getClass().getName();
        @ ensures this.element.getClass().getName() == \old(theElement.getClass().getName());
        @ ensures this.left == lt.left;
        @ ensures this.left == \old(lt);
        @ ensures this.left == \old(rt);
        @ ensures this.left.element == lt.element;
        @ ensures this.left.element.getClass().getName() == lt.element.getClass().getName();
        @ ensures this.left.left == lt.left;
        @ ensures this.left.left.element == lt.element;
        @ ensures this.left.left.element.getClass().getName() == lt.element.getClass().getName();
        @ ensures this.left.left.left == lt.left;
        @ ensures this.left.left.right == lt.left;
        @ ensures this.left.left.color == lt.color;
        @ ensures this.left.right == lt.left;
        @ ensures this.left.right.element == lt.element;
        @ ensures this.left.right.element.getClass().getName() == lt.element.getClass().getName();
        @ ensures this.left.right.left == lt.left;
        @ ensures this.left.right.right == lt.left;
        @ ensures this.left.right.color == lt.color;
        @ ensures this.left.color == lt.color;
        @ ensures this.right.element == lt.element;
        @ ensures this.right.element.getClass().getName() == lt.element.getClass().getName();
        @ ensures this.right.left == lt.left;
        @ ensures this.right.left.element == lt.element;
        @ ensures this.right.left.element.getClass().getName() == lt.element.getClass().getName();
        @ ensures this.right.left.left == lt.left;
        @ ensures this.right.left.right == lt.left;
        @ ensures this.right.left.color == lt.color;
        @ ensures this.right.right == lt.left;
        @ ensures this.right.right.element == lt.element;
        @ ensures this.right.right.element.getClass().getName() == lt.element.getClass().getName();
        @ ensures this.right.right.left == lt.left;
        @ ensures this.right.right.right == lt.left;
        @ ensures this.right.right.color == lt.color;
        @ ensures this.right.color == lt.color;
        @ ensures lt.element == lt.left.element;
        @ ensures lt.element == lt.right.element;
        @ ensures lt.element == rt.element;
        @ ensures lt.element == rt.left.element;
        @ ensures lt.element == rt.right.element;
        @ ensures lt.element == \old(lt.element);
        @ ensures lt.element == \old(lt.left.element);
        @ ensures lt.element == \old(lt.right.element);
        @ ensures lt.element == \old(rt.element);
        @ ensures lt.element == \old(rt.left.element);
        @ ensures lt.element == \old(rt.right.element);
        @ ensures lt.element.getClass().getName() == lt.left.element.getClass().getName();
        @ ensures lt.element.getClass().getName() == lt.right.element.getClass().getName();
        @ ensures lt.element.getClass().getName() == rt.element.getClass().getName();
        @ ensures lt.element.getClass().getName() == rt.left.element.getClass().getName();
        @ ensures lt.element.getClass().getName() == rt.right.element.getClass().getName();
        @ ensures lt.element.getClass().getName() == \old(lt.element.getClass().getName());
        @ ensures lt.element.getClass().getName() == \old(lt.left.element.getClass().getName());
        @ ensures lt.element.getClass().getName() == \old(lt.right.element.getClass().getName());
        @ ensures lt.element.getClass().getName() == \old(rt.element.getClass().getName());
        @ ensures lt.element.getClass().getName() == \old(rt.left.element.getClass().getName());
        @ ensures lt.element.getClass().getName() == \old(rt.right.element.getClass().getName());
        @ ensures lt.left == lt.left.left;
        @ ensures lt.left == lt.left.right;
        @ ensures lt.left == lt.right;
        @ ensures lt.left == lt.right.left;
        @ ensures lt.left == lt.right.right;
        @ ensures lt.left == rt.left;
        @ ensures lt.left == rt.left.left;
        @ ensures lt.left == rt.left.right;
        @ ensures lt.left == rt.right;
        @ ensures lt.left == rt.right.left;
        @ ensures lt.left == rt.right.right;
        @ ensures lt.left == \old(lt.left);
        @ ensures lt.left == \old(lt.left.left);
        @ ensures lt.left == \old(lt.left.right);
        @ ensures lt.left == \old(lt.right);
        @ ensures lt.left == \old(lt.right.left);
        @ ensures lt.left == \old(lt.right.right);
        @ ensures lt.left == \old(rt.left);
        @ ensures lt.left == \old(rt.left.left);
        @ ensures lt.left == \old(rt.left.right);
        @ ensures lt.left == \old(rt.right);
        @ ensures lt.left == \old(rt.right.left);
        @ ensures lt.left == \old(rt.right.right);
        @ ensures lt.left.color == lt.color;
        @ ensures lt.right.color == lt.color;
        @ ensures lt.color == rt.left.color;
        @ ensures lt.color == rt.right.color;
        @ ensures lt.color == rt.color;
        @ ensures lt.color == \old(lt.left.color);
        @ ensures lt.color == \old(lt.right.color);
        @ ensures lt.color == \old(lt.color);
        @ ensures lt.color == \old(rt.left.color);
        @ ensures lt.color == \old(rt.right.color);
        @ ensures lt.color == \old(rt.color);
        @ ensures lt.element != null;
        @ ensures lt.element.getClass().getName() == DataStructures.MyInteger.class.getName();
        @ ensures lt.left != null;
        @ ensures lt.left != null;
        @ ensures lt.color == 1;
        @*/
        RedBlackNode( Comparable theElement, RedBlackNode lt, RedBlackNode rt )
        {
            element  = theElement;
            left     = lt;
            right    = rt;
            color    = RedBlackTree.BLACK;
        }

            // Friendly data; accessible by other package routines
        /*@ spec_public */ Comparable   element;    // The data in the node
        /*@ spec_public */ RedBlackNode left;       // Left child
        /*@ spec_public */ RedBlackNode right;      // Right child
        /*@ spec_public */ int          color;      // Color
    }
