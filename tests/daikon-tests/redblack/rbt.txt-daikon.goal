===========================================================================
DataStructures.RedBlackNode:::OBJECT
this.element == this.left.element
this.element.getClass().getName() == this.left.element.getClass().getName()
this.left == this.left.left
this.left == this.right
this.left.element == this.left.left.element
this.left.element == this.left.right.element
this.left.element == this.right.element
this.left.element == this.right.left.element
this.left.element == this.right.right.element
this.left.element.getClass().getName() == this.left.left.element.getClass().getName()
this.left.element.getClass().getName() == this.left.right.element.getClass().getName()
this.left.element.getClass().getName() == this.right.element.getClass().getName()
this.left.element.getClass().getName() == this.right.left.element.getClass().getName()
this.left.element.getClass().getName() == this.right.right.element.getClass().getName()
this.left.left == this.left.left.left
this.left.left == this.left.left.right
this.left.left == this.left.right
this.left.left == this.left.right.left
this.left.left == this.left.right.right
this.left.left == this.right.left
this.left.left == this.right.left.left
this.left.left == this.right.left.right
this.left.left == this.right.right
this.left.left == this.right.right.left
this.left.left == this.right.right.right
this.left.left.color == this.left.color
this.left.right.color == this.left.color
this.left.color == this.right.left.color
this.left.color == this.right.right.color
this.left.color == this.right.color
this.left.color == this.color
this.element.getClass().getName() == DataStructures.MyInteger.class
this.left.element != null
this.left.element.getClass().getName() == DataStructures.MyInteger.class
this.left.left has only one value
this.left.left != null
this.left.color == 1
this.color == 1
===========================================================================
DataStructures.RedBlackNode.RedBlackNode(DataStructures.Comparable):::ENTER
theElement.getClass().getName() == DataStructures.MyInteger.class
===========================================================================
DataStructures.RedBlackNode.RedBlackNode(DataStructures.Comparable):::EXIT
this.element == orig(theElement)
this.element.getClass().getName() == orig(theElement.getClass().getName())
this.left == null
===========================================================================
DataStructures.RedBlackNode.RedBlackNode(DataStructures.Comparable, DataStructures.RedBlackNode, DataStructures.RedBlackNode):::ENTER
theElement == lt.element
theElement.getClass().getName() == lt.element.getClass().getName()
lt == lt.left
lt == rt
lt.element == lt.left.element
lt.element == lt.right.element
lt.element == rt.element
lt.element == rt.left.element
lt.element == rt.right.element
lt.element.getClass().getName() == lt.left.element.getClass().getName()
lt.element.getClass().getName() == lt.right.element.getClass().getName()
lt.element.getClass().getName() == rt.element.getClass().getName()
lt.element.getClass().getName() == rt.left.element.getClass().getName()
lt.element.getClass().getName() == rt.right.element.getClass().getName()
lt.left == lt.left.left
lt.left == lt.left.right
lt.left == lt.right
lt.left == lt.right.left
lt.left == lt.right.right
lt.left == rt.left
lt.left == rt.left.left
lt.left == rt.left.right
lt.left == rt.right
lt.left == rt.right.left
lt.left == rt.right.right
lt.left.color == lt.color
lt.right.color == lt.color
lt.color == rt.left.color
lt.color == rt.right.color
lt.color == rt.color
theElement.getClass().getName() == DataStructures.MyInteger.class
lt.element != null
lt.element.getClass().getName() == DataStructures.MyInteger.class
lt.left has only one value
lt.left != null
lt.color == 1
===========================================================================
DataStructures.RedBlackNode.RedBlackNode(DataStructures.Comparable, DataStructures.RedBlackNode, DataStructures.RedBlackNode):::EXIT
this.element == lt.element
this.element == orig(theElement)
this.element.getClass().getName() == lt.element.getClass().getName()
this.element.getClass().getName() == orig(theElement.getClass().getName())
this.left == lt.left
this.left == orig(lt)
this.left == orig(rt)
this.left.element == lt.element
this.left.element.getClass().getName() == lt.element.getClass().getName()
this.left.left == lt.left
this.left.left.element == lt.element
this.left.left.element.getClass().getName() == lt.element.getClass().getName()
this.left.left.left == lt.left
this.left.left.right == lt.left
this.left.left.color == lt.color
this.left.right == lt.left
this.left.right.element == lt.element
this.left.right.element.getClass().getName() == lt.element.getClass().getName()
this.left.right.left == lt.left
this.left.right.right == lt.left
this.left.right.color == lt.color
this.left.color == lt.color
this.right.element == lt.element
this.right.element.getClass().getName() == lt.element.getClass().getName()
this.right.left == lt.left
this.right.left.element == lt.element
this.right.left.element.getClass().getName() == lt.element.getClass().getName()
this.right.left.left == lt.left
this.right.left.right == lt.left
this.right.left.color == lt.color
this.right.right == lt.left
this.right.right.element == lt.element
this.right.right.element.getClass().getName() == lt.element.getClass().getName()
this.right.right.left == lt.left
this.right.right.right == lt.left
this.right.right.color == lt.color
this.right.color == lt.color
this.color == lt.color
lt.element == lt.left.element
lt.element == lt.right.element
lt.element == rt.element
lt.element == rt.left.element
lt.element == rt.right.element
lt.element == orig(lt.element)
lt.element == orig(lt.left.element)
lt.element == orig(lt.right.element)
lt.element == orig(rt.element)
lt.element == orig(rt.left.element)
lt.element == orig(rt.right.element)
lt.element.getClass().getName() == lt.left.element.getClass().getName()
lt.element.getClass().getName() == lt.right.element.getClass().getName()
lt.element.getClass().getName() == rt.element.getClass().getName()
lt.element.getClass().getName() == rt.left.element.getClass().getName()
lt.element.getClass().getName() == rt.right.element.getClass().getName()
lt.element.getClass().getName() == orig(lt.element.getClass().getName())
lt.element.getClass().getName() == orig(lt.left.element.getClass().getName())
lt.element.getClass().getName() == orig(lt.right.element.getClass().getName())
lt.element.getClass().getName() == orig(rt.element.getClass().getName())
lt.element.getClass().getName() == orig(rt.left.element.getClass().getName())
lt.element.getClass().getName() == orig(rt.right.element.getClass().getName())
lt.left == lt.left.left
lt.left == lt.left.right
lt.left == lt.right
lt.left == lt.right.left
lt.left == lt.right.right
lt.left == rt.left
lt.left == rt.left.left
lt.left == rt.left.right
lt.left == rt.right
lt.left == rt.right.left
lt.left == rt.right.right
lt.left == orig(lt.left)
lt.left == orig(lt.left.left)
lt.left == orig(lt.left.right)
lt.left == orig(lt.right)
lt.left == orig(lt.right.left)
lt.left == orig(lt.right.right)
lt.left == orig(rt.left)
lt.left == orig(rt.left.left)
lt.left == orig(rt.left.right)
lt.left == orig(rt.right)
lt.left == orig(rt.right.left)
lt.left == orig(rt.right.right)
lt.left.color == lt.color
lt.right.color == lt.color
lt.color == rt.left.color
lt.color == rt.right.color
lt.color == rt.color
lt.color == orig(lt.left.color)
lt.color == orig(lt.right.color)
lt.color == orig(lt.color)
lt.color == orig(rt.left.color)
lt.color == orig(rt.right.color)
lt.color == orig(rt.color)
lt.element != null
lt.element.getClass().getName() == DataStructures.MyInteger.class
lt.left has only one value
lt.left != null
lt.color == 1
===========================================================================
DataStructures.RedBlackTree:::CLASS
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.nullNode.left
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.nullNode.left.left
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.nullNode.left.right
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.nullNode.right
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.nullNode.right.left
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.nullNode.right.right
DataStructures.RedBlackTree.nullNode.element == DataStructures.RedBlackTree.nullNode.left.element
DataStructures.RedBlackTree.nullNode.element == DataStructures.RedBlackTree.nullNode.right.element
DataStructures.RedBlackTree.nullNode.element.getClass().getName() == DataStructures.RedBlackTree.nullNode.left.element.getClass().getName()
DataStructures.RedBlackTree.nullNode.element.getClass().getName() == DataStructures.RedBlackTree.nullNode.right.element.getClass().getName()
DataStructures.RedBlackTree.nullNode.element.getClass().getName() == DataStructures.RedBlackTree.current.element.getClass().getName()
DataStructures.RedBlackTree.nullNode.element.getClass().getName() == DataStructures.RedBlackTree.current.left.element.getClass().getName()
DataStructures.RedBlackTree.nullNode.element.getClass().getName() == DataStructures.RedBlackTree.current.right.element.getClass().getName()
DataStructures.RedBlackTree.nullNode.element.getClass().getName() == DataStructures.RedBlackTree.parent.element.getClass().getName()
DataStructures.RedBlackTree.nullNode.element.getClass().getName() == DataStructures.RedBlackTree.parent.left.element.getClass().getName()
DataStructures.RedBlackTree.nullNode.element.getClass().getName() == DataStructures.RedBlackTree.parent.right.element.getClass().getName()
DataStructures.RedBlackTree.nullNode.element.getClass().getName() == DataStructures.RedBlackTree.grand.element.getClass().getName()
DataStructures.RedBlackTree.nullNode.element.getClass().getName() == DataStructures.RedBlackTree.grand.left.element.getClass().getName()
DataStructures.RedBlackTree.nullNode.element.getClass().getName() == DataStructures.RedBlackTree.grand.right.element.getClass().getName()
DataStructures.RedBlackTree.nullNode.element.getClass().getName() == DataStructures.RedBlackTree.great.element.getClass().getName()
DataStructures.RedBlackTree.nullNode.element.getClass().getName() == DataStructures.RedBlackTree.great.left.element.getClass().getName()
DataStructures.RedBlackTree.nullNode.element.getClass().getName() == DataStructures.RedBlackTree.great.right.element.getClass().getName()
DataStructures.RedBlackTree.nullNode.left.color == DataStructures.RedBlackTree.BLACK
DataStructures.RedBlackTree.nullNode.right.color == DataStructures.RedBlackTree.BLACK
DataStructures.RedBlackTree.nullNode.color == DataStructures.RedBlackTree.BLACK
DataStructures.RedBlackTree.nullNode has only one value
DataStructures.RedBlackTree.nullNode != null
DataStructures.RedBlackTree.nullNode.element.getClass().getName() == DataStructures.MyInteger.class
DataStructures.RedBlackTree.current.element != null
DataStructures.RedBlackTree.current.left != null
DataStructures.RedBlackTree.current.left.element != null
DataStructures.RedBlackTree.current.left.left != null
DataStructures.RedBlackTree.current.left.right != null
DataStructures.RedBlackTree.current.left.color one of { 0, 1 }
DataStructures.RedBlackTree.current.right != null
DataStructures.RedBlackTree.current.right.element != null
DataStructures.RedBlackTree.current.right.left != null
DataStructures.RedBlackTree.current.right.right != null
DataStructures.RedBlackTree.current.right.color one of { 0, 1 }
DataStructures.RedBlackTree.current.color one of { 0, 1 }
DataStructures.RedBlackTree.parent.element != null
DataStructures.RedBlackTree.parent.left != null
DataStructures.RedBlackTree.parent.left.element != null
DataStructures.RedBlackTree.parent.left.left != null
DataStructures.RedBlackTree.parent.left.right != null
DataStructures.RedBlackTree.parent.left.color one of { 0, 1 }
DataStructures.RedBlackTree.parent.right != null
DataStructures.RedBlackTree.parent.right.element != null
DataStructures.RedBlackTree.parent.right.left != null
DataStructures.RedBlackTree.parent.right.right != null
DataStructures.RedBlackTree.parent.right.color one of { 0, 1 }
DataStructures.RedBlackTree.parent.color one of { 0, 1 }
DataStructures.RedBlackTree.grand.element != null
DataStructures.RedBlackTree.grand.left != null
DataStructures.RedBlackTree.grand.left.element != null
DataStructures.RedBlackTree.grand.left.left != null
DataStructures.RedBlackTree.grand.left.right != null
DataStructures.RedBlackTree.grand.left.color one of { 0, 1 }
DataStructures.RedBlackTree.grand.right != null
DataStructures.RedBlackTree.grand.right.element != null
DataStructures.RedBlackTree.grand.right.left != null
DataStructures.RedBlackTree.grand.right.right != null
DataStructures.RedBlackTree.grand.right.color one of { 0, 1 }
DataStructures.RedBlackTree.grand.color one of { 0, 1 }
DataStructures.RedBlackTree.great.element != null
DataStructures.RedBlackTree.great.left != null
DataStructures.RedBlackTree.great.left.element != null
DataStructures.RedBlackTree.great.left.left != null
DataStructures.RedBlackTree.great.left.right != null
DataStructures.RedBlackTree.great.left.color one of { 0, 1 }
DataStructures.RedBlackTree.great.right != null
DataStructures.RedBlackTree.great.right.element != null
DataStructures.RedBlackTree.great.right.left != null
DataStructures.RedBlackTree.great.right.right != null
DataStructures.RedBlackTree.great.right.color one of { 0, 1 }
DataStructures.RedBlackTree.great.color one of { 0, 1 }
DataStructures.RedBlackTree.BLACK >= DataStructures.RedBlackTree.current.left.color
DataStructures.RedBlackTree.BLACK >= DataStructures.RedBlackTree.current.right.color
DataStructures.RedBlackTree.BLACK >= DataStructures.RedBlackTree.current.color
DataStructures.RedBlackTree.BLACK >= DataStructures.RedBlackTree.parent.left.color
DataStructures.RedBlackTree.BLACK >= DataStructures.RedBlackTree.parent.right.color
DataStructures.RedBlackTree.BLACK >= DataStructures.RedBlackTree.parent.color
DataStructures.RedBlackTree.BLACK >= DataStructures.RedBlackTree.grand.left.color
DataStructures.RedBlackTree.BLACK >= DataStructures.RedBlackTree.grand.right.color
DataStructures.RedBlackTree.BLACK >= DataStructures.RedBlackTree.grand.color
DataStructures.RedBlackTree.BLACK >= DataStructures.RedBlackTree.great.left.color
DataStructures.RedBlackTree.BLACK >= DataStructures.RedBlackTree.great.right.color
DataStructures.RedBlackTree.BLACK >= DataStructures.RedBlackTree.great.color
DataStructures.RedBlackTree.RED <= DataStructures.RedBlackTree.current.left.color
DataStructures.RedBlackTree.RED <= DataStructures.RedBlackTree.current.right.color
DataStructures.RedBlackTree.RED <= DataStructures.RedBlackTree.current.color
DataStructures.RedBlackTree.RED <= DataStructures.RedBlackTree.parent.left.color
DataStructures.RedBlackTree.RED <= DataStructures.RedBlackTree.parent.right.color
DataStructures.RedBlackTree.RED <= DataStructures.RedBlackTree.parent.color
DataStructures.RedBlackTree.RED <= DataStructures.RedBlackTree.grand.left.color
DataStructures.RedBlackTree.RED <= DataStructures.RedBlackTree.grand.right.color
DataStructures.RedBlackTree.RED <= DataStructures.RedBlackTree.grand.color
DataStructures.RedBlackTree.RED <= DataStructures.RedBlackTree.great.left.color
DataStructures.RedBlackTree.RED <= DataStructures.RedBlackTree.great.right.color
DataStructures.RedBlackTree.RED <= DataStructures.RedBlackTree.great.color
===========================================================================
DataStructures.RedBlackTree:::OBJECT
this.header.element.getClass().getName() == DataStructures.RedBlackTree.nullNode.element.getClass().getName()
this.header.left == DataStructures.RedBlackTree.nullNode
this.header.left.element == DataStructures.RedBlackTree.nullNode.element
this.header.left.element.getClass().getName() == DataStructures.RedBlackTree.nullNode.element.getClass().getName()
this.header.left.left == DataStructures.RedBlackTree.nullNode
this.header.left.right == DataStructures.RedBlackTree.nullNode
this.header.left.color == DataStructures.RedBlackTree.BLACK
this.header.right.element.getClass().getName() == DataStructures.RedBlackTree.nullNode.element.getClass().getName()
this.header.color == DataStructures.RedBlackTree.BLACK
this has only one value
this.header has only one value
this.header != null
this.header.element has only one value
this.header.element != null
this.header.element.getClass().getName() == DataStructures.MyInteger.class
this.header.right != null
this.header.right.left != null
this.header.right.right != null
this.header.right.color one of { 0, 1 }
this.header.right.color <= DataStructures.RedBlackTree.BLACK
this.header.right.color >= DataStructures.RedBlackTree.RED
this.header.right.color >= DataStructures.RedBlackTree.current.color
this.header.right.color >= DataStructures.RedBlackTree.parent.right.color
this.header.right.color >= DataStructures.RedBlackTree.parent.color
this.header.right.color >= DataStructures.RedBlackTree.grand.color
this.header.right.color >= DataStructures.RedBlackTree.great.right.color
===========================================================================
DataStructures.RedBlackTree.RedBlackTree(DataStructures.Comparable):::ENTER
negInf has only one value
negInf.getClass().getName() == DataStructures.MyInteger.class
===========================================================================
DataStructures.RedBlackTree.RedBlackTree(DataStructures.Comparable):::EXIT
this.header.element == orig(negInf)
this.header.element.getClass().getName() == orig(negInf.getClass().getName())
this.header.right == DataStructures.RedBlackTree.nullNode
this.header.right.element == DataStructures.RedBlackTree.nullNode.element
this.header.right.left == DataStructures.RedBlackTree.nullNode
this.header.right.right == DataStructures.RedBlackTree.nullNode
this.header.right.color == DataStructures.RedBlackTree.BLACK
DataStructures.RedBlackTree.current == DataStructures.RedBlackTree.parent
DataStructures.RedBlackTree.current == DataStructures.RedBlackTree.grand
DataStructures.RedBlackTree.current == DataStructures.RedBlackTree.great
DataStructures.RedBlackTree.nullNode.element == null
DataStructures.RedBlackTree.current == null
===========================================================================
DataStructures.RedBlackTree.find(DataStructures.Comparable):::ENTER
this.header.right.color == DataStructures.RedBlackTree.BLACK
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.parent.left
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.parent.left.left
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.parent.left.right
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.parent.right.left
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.parent.right.right
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.grand.left.left
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.grand.right.left
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.grand.right.right
DataStructures.RedBlackTree.nullNode.element == DataStructures.RedBlackTree.parent.left.element
DataStructures.RedBlackTree.nullNode.element.getClass().getName() == x.getClass().getName()
DataStructures.RedBlackTree.BLACK == DataStructures.RedBlackTree.parent.left.color
DataStructures.RedBlackTree.BLACK == DataStructures.RedBlackTree.parent.color
DataStructures.RedBlackTree.BLACK == DataStructures.RedBlackTree.grand.left.color
DataStructures.RedBlackTree.BLACK == DataStructures.RedBlackTree.grand.right.color
DataStructures.RedBlackTree.BLACK == DataStructures.RedBlackTree.great.right.color
DataStructures.RedBlackTree.BLACK == DataStructures.RedBlackTree.great.color
DataStructures.RedBlackTree.RED == DataStructures.RedBlackTree.parent.right.color
DataStructures.RedBlackTree.RED == DataStructures.RedBlackTree.grand.color
DataStructures.RedBlackTree.RED == DataStructures.RedBlackTree.great.left.color
DataStructures.RedBlackTree.parent == DataStructures.RedBlackTree.grand.left
DataStructures.RedBlackTree.parent == DataStructures.RedBlackTree.great.left.left
DataStructures.RedBlackTree.parent.element == DataStructures.RedBlackTree.grand.left.element
DataStructures.RedBlackTree.parent.right == DataStructures.RedBlackTree.grand.left.right
DataStructures.RedBlackTree.grand == DataStructures.RedBlackTree.great.left
DataStructures.RedBlackTree.grand.element == DataStructures.RedBlackTree.great.left.element
DataStructures.RedBlackTree.grand.right == DataStructures.RedBlackTree.great.left.right
this.header.right has only one value
this.header.right.element has only one value
this.header.right.element != null
this.header.right.left has only one value
this.header.right.right has only one value
DataStructures.RedBlackTree.nullNode.element != null
DataStructures.RedBlackTree.current != null
DataStructures.RedBlackTree.parent has only one value
DataStructures.RedBlackTree.parent != null
DataStructures.RedBlackTree.parent.element has only one value
DataStructures.RedBlackTree.parent.right has only one value
DataStructures.RedBlackTree.parent.right.element has only one value
DataStructures.RedBlackTree.grand has only one value
DataStructures.RedBlackTree.grand != null
DataStructures.RedBlackTree.grand.element has only one value
DataStructures.RedBlackTree.grand.right has only one value
DataStructures.RedBlackTree.grand.right.element has only one value
DataStructures.RedBlackTree.great has only one value
DataStructures.RedBlackTree.great != null
DataStructures.RedBlackTree.great.element has only one value
DataStructures.RedBlackTree.great.right has only one value
DataStructures.RedBlackTree.great.right.element has only one value
DataStructures.RedBlackTree.great.right.left has only one value
DataStructures.RedBlackTree.great.right.right has only one value
x != null
===========================================================================
DataStructures.RedBlackTree.find(DataStructures.Comparable):::EXIT128
===========================================================================
DataStructures.RedBlackTree.find(DataStructures.Comparable):::EXIT
this.header == orig(this.header)
this.header.element == orig(this.header.element)
this.header.element.getClass().getName() == return.getClass().getName()
this.header.left.element.getClass().getName() == return.getClass().getName()
this.header.right == orig(this.header.right)
this.header.right.element == orig(this.header.right.element)
this.header.right.element.getClass().getName() == return.getClass().getName()
this.header.right.left == orig(this.header.right.left)
this.header.right.right == orig(this.header.right.right)
this.header.right.color == DataStructures.RedBlackTree.BLACK
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.parent.left
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.parent.left.left
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.parent.left.right
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.parent.right.left
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.parent.right.right
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.grand.left.left
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.grand.right.left
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.grand.right.right
DataStructures.RedBlackTree.nullNode == orig(this.header.left)
DataStructures.RedBlackTree.nullNode == orig(this.header.left.left)
DataStructures.RedBlackTree.nullNode == orig(this.header.left.right)
DataStructures.RedBlackTree.nullNode == orig(DataStructures.RedBlackTree.nullNode)
DataStructures.RedBlackTree.nullNode == orig(DataStructures.RedBlackTree.nullNode.left)
DataStructures.RedBlackTree.nullNode == orig(DataStructures.RedBlackTree.nullNode.left.left)
DataStructures.RedBlackTree.nullNode == orig(DataStructures.RedBlackTree.nullNode.left.right)
DataStructures.RedBlackTree.nullNode == orig(DataStructures.RedBlackTree.nullNode.right)
DataStructures.RedBlackTree.nullNode == orig(DataStructures.RedBlackTree.nullNode.right.left)
DataStructures.RedBlackTree.nullNode == orig(DataStructures.RedBlackTree.nullNode.right.right)
DataStructures.RedBlackTree.nullNode == orig(DataStructures.RedBlackTree.parent.left)
DataStructures.RedBlackTree.nullNode == orig(DataStructures.RedBlackTree.parent.left.left)
DataStructures.RedBlackTree.nullNode == orig(DataStructures.RedBlackTree.parent.left.right)
DataStructures.RedBlackTree.nullNode == orig(DataStructures.RedBlackTree.parent.right.left)
DataStructures.RedBlackTree.nullNode == orig(DataStructures.RedBlackTree.parent.right.right)
DataStructures.RedBlackTree.nullNode == orig(DataStructures.RedBlackTree.grand.left.left)
DataStructures.RedBlackTree.nullNode == orig(DataStructures.RedBlackTree.grand.right.left)
DataStructures.RedBlackTree.nullNode == orig(DataStructures.RedBlackTree.grand.right.right)
DataStructures.RedBlackTree.nullNode.element == DataStructures.RedBlackTree.parent.left.element
DataStructures.RedBlackTree.nullNode.element == orig(x)
DataStructures.RedBlackTree.nullNode.element.getClass().getName() == return.getClass().getName()
DataStructures.RedBlackTree.nullNode.left.element.getClass().getName() == return.getClass().getName()
DataStructures.RedBlackTree.nullNode.right.element.getClass().getName() == return.getClass().getName()
DataStructures.RedBlackTree.BLACK == DataStructures.RedBlackTree.parent.left.color
DataStructures.RedBlackTree.BLACK == DataStructures.RedBlackTree.parent.color
DataStructures.RedBlackTree.BLACK == DataStructures.RedBlackTree.grand.left.color
DataStructures.RedBlackTree.BLACK == DataStructures.RedBlackTree.grand.right.color
DataStructures.RedBlackTree.BLACK == DataStructures.RedBlackTree.great.right.color
DataStructures.RedBlackTree.BLACK == DataStructures.RedBlackTree.great.color
DataStructures.RedBlackTree.RED == DataStructures.RedBlackTree.parent.right.color
DataStructures.RedBlackTree.RED == DataStructures.RedBlackTree.grand.color
DataStructures.RedBlackTree.RED == DataStructures.RedBlackTree.great.left.color
DataStructures.RedBlackTree.current.element == return
DataStructures.RedBlackTree.current.element.getClass().getName() == return.getClass().getName()
DataStructures.RedBlackTree.current.left.element.getClass().getName() == return.getClass().getName()
DataStructures.RedBlackTree.current.right.element.getClass().getName() == return.getClass().getName()
DataStructures.RedBlackTree.parent == DataStructures.RedBlackTree.grand.left
DataStructures.RedBlackTree.parent == DataStructures.RedBlackTree.great.left.left
DataStructures.RedBlackTree.parent == orig(DataStructures.RedBlackTree.parent)
DataStructures.RedBlackTree.parent == orig(DataStructures.RedBlackTree.grand.left)
DataStructures.RedBlackTree.parent == orig(DataStructures.RedBlackTree.great.left.left)
DataStructures.RedBlackTree.parent.element == DataStructures.RedBlackTree.grand.left.element
DataStructures.RedBlackTree.parent.element == orig(DataStructures.RedBlackTree.parent.element)
DataStructures.RedBlackTree.parent.element == orig(DataStructures.RedBlackTree.grand.left.element)
DataStructures.RedBlackTree.parent.element.getClass().getName() == return.getClass().getName()
DataStructures.RedBlackTree.parent.left.element.getClass().getName() == return.getClass().getName()
DataStructures.RedBlackTree.parent.right == DataStructures.RedBlackTree.grand.left.right
DataStructures.RedBlackTree.parent.right == orig(DataStructures.RedBlackTree.parent.right)
DataStructures.RedBlackTree.parent.right == orig(DataStructures.RedBlackTree.grand.left.right)
DataStructures.RedBlackTree.parent.right.element == orig(DataStructures.RedBlackTree.parent.right.element)
DataStructures.RedBlackTree.parent.right.element.getClass().getName() == return.getClass().getName()
DataStructures.RedBlackTree.grand == DataStructures.RedBlackTree.great.left
DataStructures.RedBlackTree.grand == orig(DataStructures.RedBlackTree.grand)
DataStructures.RedBlackTree.grand == orig(DataStructures.RedBlackTree.great.left)
DataStructures.RedBlackTree.grand.element == DataStructures.RedBlackTree.great.left.element
DataStructures.RedBlackTree.grand.element == orig(DataStructures.RedBlackTree.grand.element)
DataStructures.RedBlackTree.grand.element == orig(DataStructures.RedBlackTree.great.left.element)
DataStructures.RedBlackTree.grand.element.getClass().getName() == return.getClass().getName()
DataStructures.RedBlackTree.grand.left.element.getClass().getName() == return.getClass().getName()
DataStructures.RedBlackTree.grand.right == DataStructures.RedBlackTree.great.left.right
DataStructures.RedBlackTree.grand.right == orig(DataStructures.RedBlackTree.grand.right)
DataStructures.RedBlackTree.grand.right == orig(DataStructures.RedBlackTree.great.left.right)
DataStructures.RedBlackTree.grand.right.element == orig(DataStructures.RedBlackTree.grand.right.element)
DataStructures.RedBlackTree.grand.right.element.getClass().getName() == return.getClass().getName()
DataStructures.RedBlackTree.great == orig(DataStructures.RedBlackTree.great)
DataStructures.RedBlackTree.great.element == orig(DataStructures.RedBlackTree.great.element)
DataStructures.RedBlackTree.great.element.getClass().getName() == return.getClass().getName()
DataStructures.RedBlackTree.great.left.element.getClass().getName() == return.getClass().getName()
DataStructures.RedBlackTree.great.right == orig(DataStructures.RedBlackTree.great.right)
DataStructures.RedBlackTree.great.right.element == orig(DataStructures.RedBlackTree.great.right.element)
DataStructures.RedBlackTree.great.right.element.getClass().getName() == return.getClass().getName()
DataStructures.RedBlackTree.great.right.left == orig(DataStructures.RedBlackTree.great.right.left)
DataStructures.RedBlackTree.great.right.right == orig(DataStructures.RedBlackTree.great.right.right)
return.getClass().getName() == orig(this.header.element.getClass().getName())
return.getClass().getName() == orig(this.header.left.element.getClass().getName())
return.getClass().getName() == orig(this.header.right.element.getClass().getName())
return.getClass().getName() == orig(DataStructures.RedBlackTree.nullNode.element.getClass().getName())
return.getClass().getName() == orig(DataStructures.RedBlackTree.nullNode.left.element.getClass().getName())
return.getClass().getName() == orig(DataStructures.RedBlackTree.nullNode.right.element.getClass().getName())
return.getClass().getName() == orig(DataStructures.RedBlackTree.current.element.getClass().getName())
return.getClass().getName() == orig(DataStructures.RedBlackTree.current.left.element.getClass().getName())
return.getClass().getName() == orig(DataStructures.RedBlackTree.current.right.element.getClass().getName())
return.getClass().getName() == orig(DataStructures.RedBlackTree.parent.element.getClass().getName())
return.getClass().getName() == orig(DataStructures.RedBlackTree.parent.left.element.getClass().getName())
return.getClass().getName() == orig(DataStructures.RedBlackTree.parent.right.element.getClass().getName())
return.getClass().getName() == orig(DataStructures.RedBlackTree.grand.element.getClass().getName())
return.getClass().getName() == orig(DataStructures.RedBlackTree.grand.left.element.getClass().getName())
return.getClass().getName() == orig(DataStructures.RedBlackTree.grand.right.element.getClass().getName())
return.getClass().getName() == orig(DataStructures.RedBlackTree.great.element.getClass().getName())
return.getClass().getName() == orig(DataStructures.RedBlackTree.great.left.element.getClass().getName())
return.getClass().getName() == orig(DataStructures.RedBlackTree.great.right.element.getClass().getName())
return.getClass().getName() == orig(x.getClass().getName())
this.header.right has only one value
this.header.right.element has only one value
this.header.right.element != null
this.header.right.left has only one value
this.header.right.right has only one value
DataStructures.RedBlackTree.nullNode.element != null
DataStructures.RedBlackTree.current != null
DataStructures.RedBlackTree.parent has only one value
DataStructures.RedBlackTree.parent != null
DataStructures.RedBlackTree.parent.element has only one value
DataStructures.RedBlackTree.parent.right has only one value
DataStructures.RedBlackTree.parent.right.element has only one value
DataStructures.RedBlackTree.grand has only one value
DataStructures.RedBlackTree.grand != null
DataStructures.RedBlackTree.grand.element has only one value
DataStructures.RedBlackTree.grand.right has only one value
DataStructures.RedBlackTree.grand.right.element has only one value
DataStructures.RedBlackTree.great has only one value
DataStructures.RedBlackTree.great != null
DataStructures.RedBlackTree.great.element has only one value
DataStructures.RedBlackTree.great.right has only one value
DataStructures.RedBlackTree.great.right.element has only one value
DataStructures.RedBlackTree.great.right.left has only one value
DataStructures.RedBlackTree.great.right.right has only one value
return != null
return.getClass().getName() == DataStructures.MyInteger.class
===========================================================================
DataStructures.RedBlackTree.findMax():::ENTER
this.header.right.color == DataStructures.RedBlackTree.BLACK
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.current.left
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.current.left.left
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.current.left.right
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.current.right
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.current.right.left
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.current.right.right
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.parent.left
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.parent.left.left
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.parent.left.right
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.parent.right.left
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.parent.right.right
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.grand.left.left
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.grand.right.left
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.grand.right.right
DataStructures.RedBlackTree.nullNode.element == DataStructures.RedBlackTree.current.element
DataStructures.RedBlackTree.nullNode.element == DataStructures.RedBlackTree.current.left.element
DataStructures.RedBlackTree.nullNode.element == DataStructures.RedBlackTree.current.right.element
DataStructures.RedBlackTree.nullNode.element == DataStructures.RedBlackTree.parent.left.element
DataStructures.RedBlackTree.nullNode.element == DataStructures.RedBlackTree.parent.right.element
DataStructures.RedBlackTree.BLACK == DataStructures.RedBlackTree.current.left.color
DataStructures.RedBlackTree.BLACK == DataStructures.RedBlackTree.current.right.color
DataStructures.RedBlackTree.BLACK == DataStructures.RedBlackTree.parent.left.color
DataStructures.RedBlackTree.BLACK == DataStructures.RedBlackTree.parent.color
DataStructures.RedBlackTree.BLACK == DataStructures.RedBlackTree.grand.left.color
DataStructures.RedBlackTree.BLACK == DataStructures.RedBlackTree.grand.right.color
DataStructures.RedBlackTree.BLACK == DataStructures.RedBlackTree.great.right.color
DataStructures.RedBlackTree.BLACK == DataStructures.RedBlackTree.great.color
DataStructures.RedBlackTree.RED == DataStructures.RedBlackTree.current.color
DataStructures.RedBlackTree.RED == DataStructures.RedBlackTree.parent.right.color
DataStructures.RedBlackTree.RED == DataStructures.RedBlackTree.grand.color
DataStructures.RedBlackTree.RED == DataStructures.RedBlackTree.great.left.color
DataStructures.RedBlackTree.current == DataStructures.RedBlackTree.parent.right
DataStructures.RedBlackTree.current == DataStructures.RedBlackTree.grand.left.right
DataStructures.RedBlackTree.parent == DataStructures.RedBlackTree.grand.left
DataStructures.RedBlackTree.parent == DataStructures.RedBlackTree.great.left.left
DataStructures.RedBlackTree.parent.element == DataStructures.RedBlackTree.grand.left.element
DataStructures.RedBlackTree.grand == DataStructures.RedBlackTree.great.left
DataStructures.RedBlackTree.grand.element == DataStructures.RedBlackTree.great.left.element
DataStructures.RedBlackTree.grand.right == DataStructures.RedBlackTree.great.left.right
this.header.right has only one value
this.header.right.element has only one value
this.header.right.left has only one value
this.header.right.right has only one value
DataStructures.RedBlackTree.nullNode.element has only one value
DataStructures.RedBlackTree.current has only one value
DataStructures.RedBlackTree.parent has only one value
DataStructures.RedBlackTree.parent.element has only one value
DataStructures.RedBlackTree.grand has only one value
DataStructures.RedBlackTree.grand.element has only one value
DataStructures.RedBlackTree.grand.right has only one value
DataStructures.RedBlackTree.grand.right.element has only one value
DataStructures.RedBlackTree.great has only one value
DataStructures.RedBlackTree.great.element has only one value
DataStructures.RedBlackTree.great.right has only one value
DataStructures.RedBlackTree.great.right.element has only one value
DataStructures.RedBlackTree.great.right.left has only one value
DataStructures.RedBlackTree.great.right.right has only one value
===========================================================================
DataStructures.RedBlackTree.findMax():::EXIT108
===========================================================================
DataStructures.RedBlackTree.findMax():::EXIT
this.header == orig(this.header)
this.header.element == orig(this.header.element)
this.header.element.getClass().getName() == return.getClass().getName()
this.header.left.element.getClass().getName() == return.getClass().getName()
this.header.right == orig(this.header.right)
this.header.right.element == orig(this.header.right.element)
this.header.right.element.getClass().getName() == return.getClass().getName()
this.header.right.left == orig(this.header.right.left)
this.header.right.right == orig(this.header.right.right)
this.header.right.color == DataStructures.RedBlackTree.BLACK
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.current.left
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.current.left.left
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.current.left.right
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.current.right
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.current.right.left
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.current.right.right
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.parent.left
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.parent.left.left
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.parent.left.right
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.parent.right.left
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.parent.right.right
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.grand.left.left
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.grand.right.left
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.grand.right.right
DataStructures.RedBlackTree.nullNode == orig(this.header.left)
DataStructures.RedBlackTree.nullNode == orig(this.header.left.left)
DataStructures.RedBlackTree.nullNode == orig(this.header.left.right)
DataStructures.RedBlackTree.nullNode == orig(DataStructures.RedBlackTree.nullNode)
DataStructures.RedBlackTree.nullNode == orig(DataStructures.RedBlackTree.nullNode.left)
DataStructures.RedBlackTree.nullNode == orig(DataStructures.RedBlackTree.nullNode.left.left)
DataStructures.RedBlackTree.nullNode == orig(DataStructures.RedBlackTree.nullNode.left.right)
DataStructures.RedBlackTree.nullNode == orig(DataStructures.RedBlackTree.nullNode.right)
DataStructures.RedBlackTree.nullNode == orig(DataStructures.RedBlackTree.nullNode.right.left)
DataStructures.RedBlackTree.nullNode == orig(DataStructures.RedBlackTree.nullNode.right.right)
DataStructures.RedBlackTree.nullNode == orig(DataStructures.RedBlackTree.current.left)
DataStructures.RedBlackTree.nullNode == orig(DataStructures.RedBlackTree.current.left.left)
DataStructures.RedBlackTree.nullNode == orig(DataStructures.RedBlackTree.current.left.right)
DataStructures.RedBlackTree.nullNode == orig(DataStructures.RedBlackTree.current.right)
DataStructures.RedBlackTree.nullNode == orig(DataStructures.RedBlackTree.current.right.left)
DataStructures.RedBlackTree.nullNode == orig(DataStructures.RedBlackTree.current.right.right)
DataStructures.RedBlackTree.nullNode == orig(DataStructures.RedBlackTree.parent.left)
DataStructures.RedBlackTree.nullNode == orig(DataStructures.RedBlackTree.parent.left.left)
DataStructures.RedBlackTree.nullNode == orig(DataStructures.RedBlackTree.parent.left.right)
DataStructures.RedBlackTree.nullNode == orig(DataStructures.RedBlackTree.parent.right.left)
DataStructures.RedBlackTree.nullNode == orig(DataStructures.RedBlackTree.parent.right.right)
DataStructures.RedBlackTree.nullNode == orig(DataStructures.RedBlackTree.grand.left.left)
DataStructures.RedBlackTree.nullNode == orig(DataStructures.RedBlackTree.grand.right.left)
DataStructures.RedBlackTree.nullNode == orig(DataStructures.RedBlackTree.grand.right.right)
DataStructures.RedBlackTree.nullNode.element == DataStructures.RedBlackTree.current.element
DataStructures.RedBlackTree.nullNode.element == DataStructures.RedBlackTree.current.left.element
DataStructures.RedBlackTree.nullNode.element == DataStructures.RedBlackTree.current.right.element
DataStructures.RedBlackTree.nullNode.element == DataStructures.RedBlackTree.parent.left.element
DataStructures.RedBlackTree.nullNode.element == DataStructures.RedBlackTree.parent.right.element
DataStructures.RedBlackTree.nullNode.element == orig(this.header.left.element)
DataStructures.RedBlackTree.nullNode.element == orig(DataStructures.RedBlackTree.nullNode.element)
DataStructures.RedBlackTree.nullNode.element == orig(DataStructures.RedBlackTree.nullNode.left.element)
DataStructures.RedBlackTree.nullNode.element == orig(DataStructures.RedBlackTree.nullNode.right.element)
DataStructures.RedBlackTree.nullNode.element == orig(DataStructures.RedBlackTree.current.element)
DataStructures.RedBlackTree.nullNode.element == orig(DataStructures.RedBlackTree.current.left.element)
DataStructures.RedBlackTree.nullNode.element == orig(DataStructures.RedBlackTree.current.right.element)
DataStructures.RedBlackTree.nullNode.element == orig(DataStructures.RedBlackTree.parent.left.element)
DataStructures.RedBlackTree.nullNode.element == orig(DataStructures.RedBlackTree.parent.right.element)
DataStructures.RedBlackTree.nullNode.element.getClass().getName() == return.getClass().getName()
DataStructures.RedBlackTree.nullNode.left.element.getClass().getName() == return.getClass().getName()
DataStructures.RedBlackTree.nullNode.right.element.getClass().getName() == return.getClass().getName()
DataStructures.RedBlackTree.BLACK == DataStructures.RedBlackTree.current.left.color
DataStructures.RedBlackTree.BLACK == DataStructures.RedBlackTree.current.right.color
DataStructures.RedBlackTree.BLACK == DataStructures.RedBlackTree.parent.left.color
DataStructures.RedBlackTree.BLACK == DataStructures.RedBlackTree.parent.color
DataStructures.RedBlackTree.BLACK == DataStructures.RedBlackTree.grand.left.color
DataStructures.RedBlackTree.BLACK == DataStructures.RedBlackTree.grand.right.color
DataStructures.RedBlackTree.BLACK == DataStructures.RedBlackTree.great.right.color
DataStructures.RedBlackTree.BLACK == DataStructures.RedBlackTree.great.color
DataStructures.RedBlackTree.RED == DataStructures.RedBlackTree.current.color
DataStructures.RedBlackTree.RED == DataStructures.RedBlackTree.parent.right.color
DataStructures.RedBlackTree.RED == DataStructures.RedBlackTree.grand.color
DataStructures.RedBlackTree.RED == DataStructures.RedBlackTree.great.left.color
DataStructures.RedBlackTree.current == DataStructures.RedBlackTree.parent.right
DataStructures.RedBlackTree.current == DataStructures.RedBlackTree.grand.left.right
DataStructures.RedBlackTree.current == orig(DataStructures.RedBlackTree.current)
DataStructures.RedBlackTree.current == orig(DataStructures.RedBlackTree.parent.right)
DataStructures.RedBlackTree.current == orig(DataStructures.RedBlackTree.grand.left.right)
DataStructures.RedBlackTree.current.element.getClass().getName() == return.getClass().getName()
DataStructures.RedBlackTree.current.left.element.getClass().getName() == return.getClass().getName()
DataStructures.RedBlackTree.current.right.element.getClass().getName() == return.getClass().getName()
DataStructures.RedBlackTree.parent == DataStructures.RedBlackTree.grand.left
DataStructures.RedBlackTree.parent == DataStructures.RedBlackTree.great.left.left
DataStructures.RedBlackTree.parent == orig(DataStructures.RedBlackTree.parent)
DataStructures.RedBlackTree.parent == orig(DataStructures.RedBlackTree.grand.left)
DataStructures.RedBlackTree.parent == orig(DataStructures.RedBlackTree.great.left.left)
DataStructures.RedBlackTree.parent.element == DataStructures.RedBlackTree.grand.left.element
DataStructures.RedBlackTree.parent.element == orig(DataStructures.RedBlackTree.parent.element)
DataStructures.RedBlackTree.parent.element == orig(DataStructures.RedBlackTree.grand.left.element)
DataStructures.RedBlackTree.parent.element.getClass().getName() == return.getClass().getName()
DataStructures.RedBlackTree.parent.left.element.getClass().getName() == return.getClass().getName()
DataStructures.RedBlackTree.parent.right.element.getClass().getName() == return.getClass().getName()
DataStructures.RedBlackTree.grand == DataStructures.RedBlackTree.great.left
DataStructures.RedBlackTree.grand == orig(DataStructures.RedBlackTree.grand)
DataStructures.RedBlackTree.grand == orig(DataStructures.RedBlackTree.great.left)
DataStructures.RedBlackTree.grand.element == DataStructures.RedBlackTree.great.left.element
DataStructures.RedBlackTree.grand.element == orig(DataStructures.RedBlackTree.grand.element)
DataStructures.RedBlackTree.grand.element == orig(DataStructures.RedBlackTree.great.left.element)
DataStructures.RedBlackTree.grand.element.getClass().getName() == return.getClass().getName()
DataStructures.RedBlackTree.grand.left.element.getClass().getName() == return.getClass().getName()
DataStructures.RedBlackTree.grand.right == DataStructures.RedBlackTree.great.left.right
DataStructures.RedBlackTree.grand.right == orig(DataStructures.RedBlackTree.grand.right)
DataStructures.RedBlackTree.grand.right == orig(DataStructures.RedBlackTree.great.left.right)
DataStructures.RedBlackTree.grand.right.element == orig(DataStructures.RedBlackTree.grand.right.element)
DataStructures.RedBlackTree.grand.right.element.getClass().getName() == return.getClass().getName()
DataStructures.RedBlackTree.great == orig(DataStructures.RedBlackTree.great)
DataStructures.RedBlackTree.great.element == orig(DataStructures.RedBlackTree.great.element)
DataStructures.RedBlackTree.great.element.getClass().getName() == return.getClass().getName()
DataStructures.RedBlackTree.great.left.element.getClass().getName() == return.getClass().getName()
DataStructures.RedBlackTree.great.right == orig(DataStructures.RedBlackTree.great.right)
DataStructures.RedBlackTree.great.right.element == orig(DataStructures.RedBlackTree.great.right.element)
DataStructures.RedBlackTree.great.right.element.getClass().getName() == return.getClass().getName()
DataStructures.RedBlackTree.great.right.left == orig(DataStructures.RedBlackTree.great.right.left)
DataStructures.RedBlackTree.great.right.right == orig(DataStructures.RedBlackTree.great.right.right)
return.getClass().getName() == orig(this.header.element.getClass().getName())
return.getClass().getName() == orig(this.header.left.element.getClass().getName())
return.getClass().getName() == orig(this.header.right.element.getClass().getName())
return.getClass().getName() == orig(DataStructures.RedBlackTree.nullNode.element.getClass().getName())
return.getClass().getName() == orig(DataStructures.RedBlackTree.nullNode.left.element.getClass().getName())
return.getClass().getName() == orig(DataStructures.RedBlackTree.nullNode.right.element.getClass().getName())
return.getClass().getName() == orig(DataStructures.RedBlackTree.current.element.getClass().getName())
return.getClass().getName() == orig(DataStructures.RedBlackTree.current.left.element.getClass().getName())
return.getClass().getName() == orig(DataStructures.RedBlackTree.current.right.element.getClass().getName())
return.getClass().getName() == orig(DataStructures.RedBlackTree.parent.element.getClass().getName())
return.getClass().getName() == orig(DataStructures.RedBlackTree.parent.left.element.getClass().getName())
return.getClass().getName() == orig(DataStructures.RedBlackTree.parent.right.element.getClass().getName())
return.getClass().getName() == orig(DataStructures.RedBlackTree.grand.element.getClass().getName())
return.getClass().getName() == orig(DataStructures.RedBlackTree.grand.left.element.getClass().getName())
return.getClass().getName() == orig(DataStructures.RedBlackTree.grand.right.element.getClass().getName())
return.getClass().getName() == orig(DataStructures.RedBlackTree.great.element.getClass().getName())
return.getClass().getName() == orig(DataStructures.RedBlackTree.great.left.element.getClass().getName())
return.getClass().getName() == orig(DataStructures.RedBlackTree.great.right.element.getClass().getName())
this.header.right has only one value
this.header.right.element has only one value
this.header.right.left has only one value
this.header.right.right has only one value
DataStructures.RedBlackTree.nullNode.element has only one value
DataStructures.RedBlackTree.current has only one value
DataStructures.RedBlackTree.parent has only one value
DataStructures.RedBlackTree.parent.element has only one value
DataStructures.RedBlackTree.grand has only one value
DataStructures.RedBlackTree.grand.element has only one value
DataStructures.RedBlackTree.grand.right has only one value
DataStructures.RedBlackTree.grand.right.element has only one value
DataStructures.RedBlackTree.great has only one value
DataStructures.RedBlackTree.great.element has only one value
DataStructures.RedBlackTree.great.right has only one value
DataStructures.RedBlackTree.great.right.element has only one value
DataStructures.RedBlackTree.great.right.left has only one value
DataStructures.RedBlackTree.great.right.right has only one value
return has only one value
return.getClass().getName() == DataStructures.MyInteger.class
===========================================================================
DataStructures.RedBlackTree.findMin():::ENTER
this.header.right.color == DataStructures.RedBlackTree.BLACK
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.current.left
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.current.left.left
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.current.left.right
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.current.right
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.current.right.left
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.current.right.right
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.parent.left
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.parent.left.left
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.parent.left.right
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.parent.right.left
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.parent.right.right
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.grand.left.left
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.grand.right.left
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.grand.right.right
DataStructures.RedBlackTree.nullNode.element == DataStructures.RedBlackTree.current.element
DataStructures.RedBlackTree.nullNode.element == DataStructures.RedBlackTree.current.left.element
DataStructures.RedBlackTree.nullNode.element == DataStructures.RedBlackTree.current.right.element
DataStructures.RedBlackTree.nullNode.element == DataStructures.RedBlackTree.parent.left.element
DataStructures.RedBlackTree.nullNode.element == DataStructures.RedBlackTree.parent.right.element
DataStructures.RedBlackTree.BLACK == DataStructures.RedBlackTree.current.left.color
DataStructures.RedBlackTree.BLACK == DataStructures.RedBlackTree.current.right.color
DataStructures.RedBlackTree.BLACK == DataStructures.RedBlackTree.parent.left.color
DataStructures.RedBlackTree.BLACK == DataStructures.RedBlackTree.parent.color
DataStructures.RedBlackTree.BLACK == DataStructures.RedBlackTree.grand.left.color
DataStructures.RedBlackTree.BLACK == DataStructures.RedBlackTree.grand.right.color
DataStructures.RedBlackTree.BLACK == DataStructures.RedBlackTree.great.right.color
DataStructures.RedBlackTree.BLACK == DataStructures.RedBlackTree.great.color
DataStructures.RedBlackTree.RED == DataStructures.RedBlackTree.current.color
DataStructures.RedBlackTree.RED == DataStructures.RedBlackTree.parent.right.color
DataStructures.RedBlackTree.RED == DataStructures.RedBlackTree.grand.color
DataStructures.RedBlackTree.RED == DataStructures.RedBlackTree.great.left.color
DataStructures.RedBlackTree.current == DataStructures.RedBlackTree.parent.right
DataStructures.RedBlackTree.current == DataStructures.RedBlackTree.grand.left.right
DataStructures.RedBlackTree.parent == DataStructures.RedBlackTree.grand.left
DataStructures.RedBlackTree.parent == DataStructures.RedBlackTree.great.left.left
DataStructures.RedBlackTree.parent.element == DataStructures.RedBlackTree.grand.left.element
DataStructures.RedBlackTree.grand == DataStructures.RedBlackTree.great.left
DataStructures.RedBlackTree.grand.element == DataStructures.RedBlackTree.great.left.element
DataStructures.RedBlackTree.grand.right == DataStructures.RedBlackTree.great.left.right
this.header.right has only one value
this.header.right.element has only one value
this.header.right.left has only one value
this.header.right.right has only one value
DataStructures.RedBlackTree.nullNode.element has only one value
DataStructures.RedBlackTree.current has only one value
DataStructures.RedBlackTree.parent has only one value
DataStructures.RedBlackTree.parent.element has only one value
DataStructures.RedBlackTree.grand has only one value
DataStructures.RedBlackTree.grand.element has only one value
DataStructures.RedBlackTree.grand.right has only one value
DataStructures.RedBlackTree.grand.right.element has only one value
DataStructures.RedBlackTree.great has only one value
DataStructures.RedBlackTree.great.element has only one value
DataStructures.RedBlackTree.great.right has only one value
DataStructures.RedBlackTree.great.right.element has only one value
DataStructures.RedBlackTree.great.right.left has only one value
DataStructures.RedBlackTree.great.right.right has only one value
===========================================================================
DataStructures.RedBlackTree.findMin():::EXIT91
===========================================================================
DataStructures.RedBlackTree.findMin():::EXIT
this.header == orig(this.header)
this.header.element == orig(this.header.element)
this.header.element.getClass().getName() == return.getClass().getName()
this.header.left.element.getClass().getName() == return.getClass().getName()
this.header.right == orig(this.header.right)
this.header.right.element == orig(this.header.right.element)
this.header.right.element.getClass().getName() == return.getClass().getName()
this.header.right.left == orig(this.header.right.left)
this.header.right.right == orig(this.header.right.right)
this.header.right.color == DataStructures.RedBlackTree.BLACK
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.current.left
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.current.left.left
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.current.left.right
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.current.right
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.current.right.left
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.current.right.right
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.parent.left
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.parent.left.left
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.parent.left.right
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.parent.right.left
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.parent.right.right
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.grand.left.left
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.grand.right.left
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.grand.right.right
DataStructures.RedBlackTree.nullNode == orig(this.header.left)
DataStructures.RedBlackTree.nullNode == orig(this.header.left.left)
DataStructures.RedBlackTree.nullNode == orig(this.header.left.right)
DataStructures.RedBlackTree.nullNode == orig(DataStructures.RedBlackTree.nullNode)
DataStructures.RedBlackTree.nullNode == orig(DataStructures.RedBlackTree.nullNode.left)
DataStructures.RedBlackTree.nullNode == orig(DataStructures.RedBlackTree.nullNode.left.left)
DataStructures.RedBlackTree.nullNode == orig(DataStructures.RedBlackTree.nullNode.left.right)
DataStructures.RedBlackTree.nullNode == orig(DataStructures.RedBlackTree.nullNode.right)
DataStructures.RedBlackTree.nullNode == orig(DataStructures.RedBlackTree.nullNode.right.left)
DataStructures.RedBlackTree.nullNode == orig(DataStructures.RedBlackTree.nullNode.right.right)
DataStructures.RedBlackTree.nullNode == orig(DataStructures.RedBlackTree.current.left)
DataStructures.RedBlackTree.nullNode == orig(DataStructures.RedBlackTree.current.left.left)
DataStructures.RedBlackTree.nullNode == orig(DataStructures.RedBlackTree.current.left.right)
DataStructures.RedBlackTree.nullNode == orig(DataStructures.RedBlackTree.current.right)
DataStructures.RedBlackTree.nullNode == orig(DataStructures.RedBlackTree.current.right.left)
DataStructures.RedBlackTree.nullNode == orig(DataStructures.RedBlackTree.current.right.right)
DataStructures.RedBlackTree.nullNode == orig(DataStructures.RedBlackTree.parent.left)
DataStructures.RedBlackTree.nullNode == orig(DataStructures.RedBlackTree.parent.left.left)
DataStructures.RedBlackTree.nullNode == orig(DataStructures.RedBlackTree.parent.left.right)
DataStructures.RedBlackTree.nullNode == orig(DataStructures.RedBlackTree.parent.right.left)
DataStructures.RedBlackTree.nullNode == orig(DataStructures.RedBlackTree.parent.right.right)
DataStructures.RedBlackTree.nullNode == orig(DataStructures.RedBlackTree.grand.left.left)
DataStructures.RedBlackTree.nullNode == orig(DataStructures.RedBlackTree.grand.right.left)
DataStructures.RedBlackTree.nullNode == orig(DataStructures.RedBlackTree.grand.right.right)
DataStructures.RedBlackTree.nullNode.element == DataStructures.RedBlackTree.current.element
DataStructures.RedBlackTree.nullNode.element == DataStructures.RedBlackTree.current.left.element
DataStructures.RedBlackTree.nullNode.element == DataStructures.RedBlackTree.current.right.element
DataStructures.RedBlackTree.nullNode.element == DataStructures.RedBlackTree.parent.left.element
DataStructures.RedBlackTree.nullNode.element == DataStructures.RedBlackTree.parent.right.element
DataStructures.RedBlackTree.nullNode.element == orig(this.header.left.element)
DataStructures.RedBlackTree.nullNode.element == orig(DataStructures.RedBlackTree.nullNode.element)
DataStructures.RedBlackTree.nullNode.element == orig(DataStructures.RedBlackTree.nullNode.left.element)
DataStructures.RedBlackTree.nullNode.element == orig(DataStructures.RedBlackTree.nullNode.right.element)
DataStructures.RedBlackTree.nullNode.element == orig(DataStructures.RedBlackTree.current.element)
DataStructures.RedBlackTree.nullNode.element == orig(DataStructures.RedBlackTree.current.left.element)
DataStructures.RedBlackTree.nullNode.element == orig(DataStructures.RedBlackTree.current.right.element)
DataStructures.RedBlackTree.nullNode.element == orig(DataStructures.RedBlackTree.parent.left.element)
DataStructures.RedBlackTree.nullNode.element == orig(DataStructures.RedBlackTree.parent.right.element)
DataStructures.RedBlackTree.nullNode.element.getClass().getName() == return.getClass().getName()
DataStructures.RedBlackTree.nullNode.left.element.getClass().getName() == return.getClass().getName()
DataStructures.RedBlackTree.nullNode.right.element.getClass().getName() == return.getClass().getName()
DataStructures.RedBlackTree.BLACK == DataStructures.RedBlackTree.current.left.color
DataStructures.RedBlackTree.BLACK == DataStructures.RedBlackTree.current.right.color
DataStructures.RedBlackTree.BLACK == DataStructures.RedBlackTree.parent.left.color
DataStructures.RedBlackTree.BLACK == DataStructures.RedBlackTree.parent.color
DataStructures.RedBlackTree.BLACK == DataStructures.RedBlackTree.grand.left.color
DataStructures.RedBlackTree.BLACK == DataStructures.RedBlackTree.grand.right.color
DataStructures.RedBlackTree.BLACK == DataStructures.RedBlackTree.great.right.color
DataStructures.RedBlackTree.BLACK == DataStructures.RedBlackTree.great.color
DataStructures.RedBlackTree.RED == DataStructures.RedBlackTree.current.color
DataStructures.RedBlackTree.RED == DataStructures.RedBlackTree.parent.right.color
DataStructures.RedBlackTree.RED == DataStructures.RedBlackTree.grand.color
DataStructures.RedBlackTree.RED == DataStructures.RedBlackTree.great.left.color
DataStructures.RedBlackTree.current == DataStructures.RedBlackTree.parent.right
DataStructures.RedBlackTree.current == DataStructures.RedBlackTree.grand.left.right
DataStructures.RedBlackTree.current == orig(DataStructures.RedBlackTree.current)
DataStructures.RedBlackTree.current == orig(DataStructures.RedBlackTree.parent.right)
DataStructures.RedBlackTree.current == orig(DataStructures.RedBlackTree.grand.left.right)
DataStructures.RedBlackTree.current.element.getClass().getName() == return.getClass().getName()
DataStructures.RedBlackTree.current.left.element.getClass().getName() == return.getClass().getName()
DataStructures.RedBlackTree.current.right.element.getClass().getName() == return.getClass().getName()
DataStructures.RedBlackTree.parent == DataStructures.RedBlackTree.grand.left
DataStructures.RedBlackTree.parent == DataStructures.RedBlackTree.great.left.left
DataStructures.RedBlackTree.parent == orig(DataStructures.RedBlackTree.parent)
DataStructures.RedBlackTree.parent == orig(DataStructures.RedBlackTree.grand.left)
DataStructures.RedBlackTree.parent == orig(DataStructures.RedBlackTree.great.left.left)
DataStructures.RedBlackTree.parent.element == DataStructures.RedBlackTree.grand.left.element
DataStructures.RedBlackTree.parent.element == orig(DataStructures.RedBlackTree.parent.element)
DataStructures.RedBlackTree.parent.element == orig(DataStructures.RedBlackTree.grand.left.element)
DataStructures.RedBlackTree.parent.element.getClass().getName() == return.getClass().getName()
DataStructures.RedBlackTree.parent.left.element.getClass().getName() == return.getClass().getName()
DataStructures.RedBlackTree.parent.right.element.getClass().getName() == return.getClass().getName()
DataStructures.RedBlackTree.grand == DataStructures.RedBlackTree.great.left
DataStructures.RedBlackTree.grand == orig(DataStructures.RedBlackTree.grand)
DataStructures.RedBlackTree.grand == orig(DataStructures.RedBlackTree.great.left)
DataStructures.RedBlackTree.grand.element == DataStructures.RedBlackTree.great.left.element
DataStructures.RedBlackTree.grand.element == orig(DataStructures.RedBlackTree.grand.element)
DataStructures.RedBlackTree.grand.element == orig(DataStructures.RedBlackTree.great.left.element)
DataStructures.RedBlackTree.grand.element.getClass().getName() == return.getClass().getName()
DataStructures.RedBlackTree.grand.left.element.getClass().getName() == return.getClass().getName()
DataStructures.RedBlackTree.grand.right == DataStructures.RedBlackTree.great.left.right
DataStructures.RedBlackTree.grand.right == orig(DataStructures.RedBlackTree.grand.right)
DataStructures.RedBlackTree.grand.right == orig(DataStructures.RedBlackTree.great.left.right)
DataStructures.RedBlackTree.grand.right.element == orig(DataStructures.RedBlackTree.grand.right.element)
DataStructures.RedBlackTree.grand.right.element.getClass().getName() == return.getClass().getName()
DataStructures.RedBlackTree.great == orig(DataStructures.RedBlackTree.great)
DataStructures.RedBlackTree.great.element == orig(DataStructures.RedBlackTree.great.element)
DataStructures.RedBlackTree.great.element.getClass().getName() == return.getClass().getName()
DataStructures.RedBlackTree.great.left.element.getClass().getName() == return.getClass().getName()
DataStructures.RedBlackTree.great.right == orig(DataStructures.RedBlackTree.great.right)
DataStructures.RedBlackTree.great.right.element == orig(DataStructures.RedBlackTree.great.right.element)
DataStructures.RedBlackTree.great.right.element.getClass().getName() == return.getClass().getName()
DataStructures.RedBlackTree.great.right.left == orig(DataStructures.RedBlackTree.great.right.left)
DataStructures.RedBlackTree.great.right.right == orig(DataStructures.RedBlackTree.great.right.right)
return.getClass().getName() == orig(this.header.element.getClass().getName())
return.getClass().getName() == orig(this.header.left.element.getClass().getName())
return.getClass().getName() == orig(this.header.right.element.getClass().getName())
return.getClass().getName() == orig(DataStructures.RedBlackTree.nullNode.element.getClass().getName())
return.getClass().getName() == orig(DataStructures.RedBlackTree.nullNode.left.element.getClass().getName())
return.getClass().getName() == orig(DataStructures.RedBlackTree.nullNode.right.element.getClass().getName())
return.getClass().getName() == orig(DataStructures.RedBlackTree.current.element.getClass().getName())
return.getClass().getName() == orig(DataStructures.RedBlackTree.current.left.element.getClass().getName())
return.getClass().getName() == orig(DataStructures.RedBlackTree.current.right.element.getClass().getName())
return.getClass().getName() == orig(DataStructures.RedBlackTree.parent.element.getClass().getName())
return.getClass().getName() == orig(DataStructures.RedBlackTree.parent.left.element.getClass().getName())
return.getClass().getName() == orig(DataStructures.RedBlackTree.parent.right.element.getClass().getName())
return.getClass().getName() == orig(DataStructures.RedBlackTree.grand.element.getClass().getName())
return.getClass().getName() == orig(DataStructures.RedBlackTree.grand.left.element.getClass().getName())
return.getClass().getName() == orig(DataStructures.RedBlackTree.grand.right.element.getClass().getName())
return.getClass().getName() == orig(DataStructures.RedBlackTree.great.element.getClass().getName())
return.getClass().getName() == orig(DataStructures.RedBlackTree.great.left.element.getClass().getName())
return.getClass().getName() == orig(DataStructures.RedBlackTree.great.right.element.getClass().getName())
this.header.right has only one value
this.header.right.element has only one value
this.header.right.left has only one value
this.header.right.right has only one value
DataStructures.RedBlackTree.nullNode.element has only one value
DataStructures.RedBlackTree.current has only one value
DataStructures.RedBlackTree.parent has only one value
DataStructures.RedBlackTree.parent.element has only one value
DataStructures.RedBlackTree.grand has only one value
DataStructures.RedBlackTree.grand.element has only one value
DataStructures.RedBlackTree.grand.right has only one value
DataStructures.RedBlackTree.grand.right.element has only one value
DataStructures.RedBlackTree.great has only one value
DataStructures.RedBlackTree.great.element has only one value
DataStructures.RedBlackTree.great.right has only one value
DataStructures.RedBlackTree.great.right.element has only one value
DataStructures.RedBlackTree.great.right.left has only one value
DataStructures.RedBlackTree.great.right.right has only one value
return has only one value
return.getClass().getName() == DataStructures.MyInteger.class
===========================================================================
DataStructures.RedBlackTree.handleReorient(DataStructures.Comparable):::ENTER
this.header.right.color == DataStructures.RedBlackTree.BLACK
DataStructures.RedBlackTree.nullNode.element == item
DataStructures.RedBlackTree.nullNode.element.getClass().getName() == item.getClass().getName()
DataStructures.RedBlackTree.BLACK == DataStructures.RedBlackTree.current.color
DataStructures.RedBlackTree.current.left.color == DataStructures.RedBlackTree.current.right.color
this.header.right.element != null
DataStructures.RedBlackTree.nullNode.element != null
DataStructures.RedBlackTree.current != null
DataStructures.RedBlackTree.parent != null
DataStructures.RedBlackTree.grand != null
DataStructures.RedBlackTree.great != null
===========================================================================
DataStructures.RedBlackTree.handleReorient(DataStructures.Comparable):::EXIT
this.header == orig(this.header)
this.header.element == orig(this.header.element)
this.header.right.color == DataStructures.RedBlackTree.BLACK
DataStructures.RedBlackTree.nullNode == orig(this.header.left)
DataStructures.RedBlackTree.nullNode == orig(this.header.left.left)
DataStructures.RedBlackTree.nullNode == orig(this.header.left.right)
DataStructures.RedBlackTree.nullNode == orig(DataStructures.RedBlackTree.nullNode)
DataStructures.RedBlackTree.nullNode == orig(DataStructures.RedBlackTree.nullNode.left)
DataStructures.RedBlackTree.nullNode == orig(DataStructures.RedBlackTree.nullNode.left.left)
DataStructures.RedBlackTree.nullNode == orig(DataStructures.RedBlackTree.nullNode.left.right)
DataStructures.RedBlackTree.nullNode == orig(DataStructures.RedBlackTree.nullNode.right)
DataStructures.RedBlackTree.nullNode == orig(DataStructures.RedBlackTree.nullNode.right.left)
DataStructures.RedBlackTree.nullNode == orig(DataStructures.RedBlackTree.nullNode.right.right)
DataStructures.RedBlackTree.nullNode.element == orig(this.header.left.element)
DataStructures.RedBlackTree.nullNode.element == orig(DataStructures.RedBlackTree.nullNode.element)
DataStructures.RedBlackTree.nullNode.element == orig(DataStructures.RedBlackTree.nullNode.left.element)
DataStructures.RedBlackTree.nullNode.element == orig(DataStructures.RedBlackTree.nullNode.right.element)
DataStructures.RedBlackTree.nullNode.element == orig(item)
DataStructures.RedBlackTree.nullNode.element.getClass().getName() == orig(this.header.element.getClass().getName())
DataStructures.RedBlackTree.nullNode.element.getClass().getName() == orig(this.header.left.element.getClass().getName())
DataStructures.RedBlackTree.nullNode.element.getClass().getName() == orig(this.header.right.element.getClass().getName())
DataStructures.RedBlackTree.nullNode.element.getClass().getName() == orig(DataStructures.RedBlackTree.nullNode.element.getClass().getName())
DataStructures.RedBlackTree.nullNode.element.getClass().getName() == orig(DataStructures.RedBlackTree.nullNode.left.element.getClass().getName())
DataStructures.RedBlackTree.nullNode.element.getClass().getName() == orig(DataStructures.RedBlackTree.nullNode.right.element.getClass().getName())
DataStructures.RedBlackTree.nullNode.element.getClass().getName() == orig(DataStructures.RedBlackTree.current.element.getClass().getName())
DataStructures.RedBlackTree.nullNode.element.getClass().getName() == orig(DataStructures.RedBlackTree.current.left.element.getClass().getName())
DataStructures.RedBlackTree.nullNode.element.getClass().getName() == orig(DataStructures.RedBlackTree.current.right.element.getClass().getName())
DataStructures.RedBlackTree.nullNode.element.getClass().getName() == orig(DataStructures.RedBlackTree.parent.element.getClass().getName())
DataStructures.RedBlackTree.nullNode.element.getClass().getName() == orig(DataStructures.RedBlackTree.parent.left.element.getClass().getName())
DataStructures.RedBlackTree.nullNode.element.getClass().getName() == orig(DataStructures.RedBlackTree.parent.right.element.getClass().getName())
DataStructures.RedBlackTree.nullNode.element.getClass().getName() == orig(DataStructures.RedBlackTree.grand.element.getClass().getName())
DataStructures.RedBlackTree.nullNode.element.getClass().getName() == orig(DataStructures.RedBlackTree.grand.left.element.getClass().getName())
DataStructures.RedBlackTree.nullNode.element.getClass().getName() == orig(DataStructures.RedBlackTree.grand.right.element.getClass().getName())
DataStructures.RedBlackTree.nullNode.element.getClass().getName() == orig(DataStructures.RedBlackTree.great.element.getClass().getName())
DataStructures.RedBlackTree.nullNode.element.getClass().getName() == orig(DataStructures.RedBlackTree.great.left.element.getClass().getName())
DataStructures.RedBlackTree.nullNode.element.getClass().getName() == orig(DataStructures.RedBlackTree.great.right.element.getClass().getName())
DataStructures.RedBlackTree.nullNode.element.getClass().getName() == orig(item.getClass().getName())
DataStructures.RedBlackTree.BLACK == DataStructures.RedBlackTree.parent.color
DataStructures.RedBlackTree.current.left.color == DataStructures.RedBlackTree.current.right.color
DataStructures.RedBlackTree.current.left.color == orig(DataStructures.RedBlackTree.parent.color)
DataStructures.RedBlackTree.parent == orig(DataStructures.RedBlackTree.parent)
DataStructures.RedBlackTree.parent.element == orig(DataStructures.RedBlackTree.parent.element)
DataStructures.RedBlackTree.parent.right.left == orig(DataStructures.RedBlackTree.parent.right.left)
DataStructures.RedBlackTree.parent.right.right == orig(DataStructures.RedBlackTree.parent.right.right)
DataStructures.RedBlackTree.grand == orig(DataStructures.RedBlackTree.grand)
DataStructures.RedBlackTree.grand.element == orig(DataStructures.RedBlackTree.grand.element)
DataStructures.RedBlackTree.grand.left.right == orig(DataStructures.RedBlackTree.grand.left.right)
DataStructures.RedBlackTree.great == orig(DataStructures.RedBlackTree.great)
DataStructures.RedBlackTree.great.element == orig(DataStructures.RedBlackTree.great.element)
DataStructures.RedBlackTree.great.left.color == orig(DataStructures.RedBlackTree.great.left.color)
DataStructures.RedBlackTree.great.right.color == orig(DataStructures.RedBlackTree.great.right.color)
DataStructures.RedBlackTree.great.color == orig(DataStructures.RedBlackTree.great.color)
this.header.right.element != null
DataStructures.RedBlackTree.nullNode.element != null
DataStructures.RedBlackTree.current != null
DataStructures.RedBlackTree.parent != null
DataStructures.RedBlackTree.grand != null
DataStructures.RedBlackTree.great != null
DataStructures.RedBlackTree.current.left.color >= DataStructures.RedBlackTree.parent.left.color
DataStructures.RedBlackTree.current.left.color >= DataStructures.RedBlackTree.parent.right.color
DataStructures.RedBlackTree.current.left.color >= DataStructures.RedBlackTree.grand.color
DataStructures.RedBlackTree.current.color <= DataStructures.RedBlackTree.grand.left.color
DataStructures.RedBlackTree.current.color <= DataStructures.RedBlackTree.grand.right.color
DataStructures.RedBlackTree.current.color <= orig(DataStructures.RedBlackTree.parent.left.color)
DataStructures.RedBlackTree.current.color <= orig(DataStructures.RedBlackTree.parent.right.color)
DataStructures.RedBlackTree.current.color <= orig(DataStructures.RedBlackTree.grand.color)
DataStructures.RedBlackTree.parent.left.color <= orig(DataStructures.RedBlackTree.parent.left.color)
DataStructures.RedBlackTree.parent.left.color <= orig(DataStructures.RedBlackTree.parent.right.color)
DataStructures.RedBlackTree.parent.right.color <= orig(DataStructures.RedBlackTree.parent.left.color)
DataStructures.RedBlackTree.parent.right.color <= orig(DataStructures.RedBlackTree.parent.right.color)
DataStructures.RedBlackTree.grand.left.color >= orig(DataStructures.RedBlackTree.current.left.color)
DataStructures.RedBlackTree.grand.left.color >= orig(DataStructures.RedBlackTree.grand.left.color)
DataStructures.RedBlackTree.grand.right.color >= orig(DataStructures.RedBlackTree.grand.right.color)
DataStructures.RedBlackTree.grand.color <= orig(DataStructures.RedBlackTree.grand.color)
DataStructures.RedBlackTree.current.left.color == (java.lang.Math.pow(DataStructures.RedBlackTree.parent.left.color, DataStructures.RedBlackTree.current.color))
DataStructures.RedBlackTree.current.left.color == (java.lang.Math.pow(DataStructures.RedBlackTree.parent.right.color, DataStructures.RedBlackTree.current.color))
DataStructures.RedBlackTree.current.left.color == (java.lang.Math.pow(DataStructures.RedBlackTree.grand.color, DataStructures.RedBlackTree.current.color))
DataStructures.RedBlackTree.grand.left.color == (java.lang.Math.pow(orig(DataStructures.RedBlackTree.grand.left.color), DataStructures.RedBlackTree.current.left.color))
DataStructures.RedBlackTree.grand.right.color == (java.lang.Math.pow(orig(DataStructures.RedBlackTree.grand.right.color), DataStructures.RedBlackTree.current.left.color))
DataStructures.RedBlackTree.current.left.color == (java.lang.Math.pow(DataStructures.RedBlackTree.grand.color, orig(DataStructures.RedBlackTree.grand.color)))
DataStructures.RedBlackTree.grand.color == (DataStructures.RedBlackTree.current.left.color & orig(DataStructures.RedBlackTree.grand.color))
DataStructures.RedBlackTree.grand.color == (DataStructures.RedBlackTree.current.left.color && orig(DataStructures.RedBlackTree.grand.color))
DataStructures.RedBlackTree.grand.color == (DataStructures.RedBlackTree.current.left.color * orig(DataStructures.RedBlackTree.grand.color))
DataStructures.RedBlackTree.grand.color == (java.lang.Math.min(DataStructures.RedBlackTree.current.left.color, orig(DataStructures.RedBlackTree.grand.color)))
orig(DataStructures.RedBlackTree.grand.color) == (java.lang.Math.pow(DataStructures.RedBlackTree.grand.color, DataStructures.RedBlackTree.current.left.color))
DataStructures.RedBlackTree.grand.left.color == (DataStructures.RedBlackTree.current.color | orig(DataStructures.RedBlackTree.grand.left.color))
DataStructures.RedBlackTree.grand.left.color == (DataStructures.RedBlackTree.current.color || orig(DataStructures.RedBlackTree.grand.left.color))
DataStructures.RedBlackTree.grand.left.color == (java.lang.Math.max(DataStructures.RedBlackTree.current.color, orig(DataStructures.RedBlackTree.grand.left.color)))
DataStructures.RedBlackTree.grand.left.color == (plume.MathMDE.gcd(DataStructures.RedBlackTree.current.color, orig(DataStructures.RedBlackTree.grand.left.color)))
DataStructures.RedBlackTree.grand.right.color == (DataStructures.RedBlackTree.current.color | orig(DataStructures.RedBlackTree.grand.right.color))
DataStructures.RedBlackTree.grand.right.color == (DataStructures.RedBlackTree.current.color || orig(DataStructures.RedBlackTree.grand.right.color))
DataStructures.RedBlackTree.grand.right.color == (java.lang.Math.max(DataStructures.RedBlackTree.current.color, orig(DataStructures.RedBlackTree.grand.right.color)))
DataStructures.RedBlackTree.grand.right.color == (plume.MathMDE.gcd(DataStructures.RedBlackTree.current.color, orig(DataStructures.RedBlackTree.grand.right.color)))
orig(DataStructures.RedBlackTree.grand.color) == (DataStructures.RedBlackTree.current.color | DataStructures.RedBlackTree.grand.color)
orig(DataStructures.RedBlackTree.grand.color) == (DataStructures.RedBlackTree.current.color || DataStructures.RedBlackTree.grand.color)
orig(DataStructures.RedBlackTree.grand.color) == (java.lang.Math.max(DataStructures.RedBlackTree.current.color, DataStructures.RedBlackTree.grand.color))
orig(DataStructures.RedBlackTree.grand.color) == (plume.MathMDE.gcd(DataStructures.RedBlackTree.current.color, DataStructures.RedBlackTree.grand.color))
DataStructures.RedBlackTree.grand.left.color == (java.lang.Math.pow(orig(DataStructures.RedBlackTree.grand.left.color), DataStructures.RedBlackTree.grand.color))
DataStructures.RedBlackTree.grand.left.color == (java.lang.Math.max(orig(DataStructures.RedBlackTree.current.left.color), orig(DataStructures.RedBlackTree.grand.left.color)))
DataStructures.RedBlackTree.grand.left.color == (orig(DataStructures.RedBlackTree.current.left.color) | orig(DataStructures.RedBlackTree.grand.left.color))
DataStructures.RedBlackTree.grand.left.color == (orig(DataStructures.RedBlackTree.current.left.color) || orig(DataStructures.RedBlackTree.grand.left.color))
DataStructures.RedBlackTree.grand.left.color == (plume.MathMDE.gcd(orig(DataStructures.RedBlackTree.current.left.color), orig(DataStructures.RedBlackTree.grand.left.color)))
DataStructures.RedBlackTree.grand.right.color == (java.lang.Math.pow(orig(DataStructures.RedBlackTree.grand.right.color), DataStructures.RedBlackTree.grand.color))
===========================================================================
DataStructures.RedBlackTree.insert(DataStructures.Comparable):::ENTER
this.header.element.getClass().getName() == item.getClass().getName()
this.header.right.color == DataStructures.RedBlackTree.BLACK
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.current.left.left
DataStructures.RedBlackTree.BLACK == DataStructures.RedBlackTree.parent.color
DataStructures.RedBlackTree.current.left.left == DataStructures.RedBlackTree.current.left.right
DataStructures.RedBlackTree.current.left.left == DataStructures.RedBlackTree.current.right.left
DataStructures.RedBlackTree.current.left.left == DataStructures.RedBlackTree.current.right.right
DataStructures.RedBlackTree.current.left.left == DataStructures.RedBlackTree.parent.left.left
DataStructures.RedBlackTree.current.left.left == DataStructures.RedBlackTree.parent.left.right
DataStructures.RedBlackTree.current.left.left == DataStructures.RedBlackTree.parent.right.left
DataStructures.RedBlackTree.current.left.left == DataStructures.RedBlackTree.parent.right.right
DataStructures.RedBlackTree.current.left.color == DataStructures.RedBlackTree.current.right.color
DataStructures.RedBlackTree.parent.color == DataStructures.RedBlackTree.grand.left.color
DataStructures.RedBlackTree.current.left.left has only one value
DataStructures.RedBlackTree.parent.color == 1
item != null
DataStructures.RedBlackTree.current.left.color >= DataStructures.RedBlackTree.parent.left.color
DataStructures.RedBlackTree.current.left.color >= DataStructures.RedBlackTree.parent.right.color
DataStructures.RedBlackTree.current.left.color <= DataStructures.RedBlackTree.parent.color
DataStructures.RedBlackTree.current.left.color >= DataStructures.RedBlackTree.grand.color
DataStructures.RedBlackTree.current.color <= DataStructures.RedBlackTree.parent.color
DataStructures.RedBlackTree.current.color <= DataStructures.RedBlackTree.grand.right.color
DataStructures.RedBlackTree.parent.left.color <= DataStructures.RedBlackTree.parent.color
DataStructures.RedBlackTree.parent.left.color <= DataStructures.RedBlackTree.grand.right.color
DataStructures.RedBlackTree.parent.right.color <= DataStructures.RedBlackTree.parent.color
DataStructures.RedBlackTree.parent.color >= DataStructures.RedBlackTree.grand.right.color
DataStructures.RedBlackTree.parent.color >= DataStructures.RedBlackTree.grand.color
DataStructures.RedBlackTree.parent.color >= DataStructures.RedBlackTree.great.left.color
DataStructures.RedBlackTree.parent.color >= DataStructures.RedBlackTree.great.right.color
DataStructures.RedBlackTree.parent.color >= DataStructures.RedBlackTree.great.color
DataStructures.RedBlackTree.current.left.color == (java.lang.Math.pow(DataStructures.RedBlackTree.parent.left.color, DataStructures.RedBlackTree.current.color))
DataStructures.RedBlackTree.current.left.color == (java.lang.Math.pow(DataStructures.RedBlackTree.parent.right.color, DataStructures.RedBlackTree.current.color))
DataStructures.RedBlackTree.current.left.color == (java.lang.Math.pow(DataStructures.RedBlackTree.grand.color, DataStructures.RedBlackTree.current.color))
===========================================================================
DataStructures.RedBlackTree.insert(DataStructures.Comparable):::EXIT65
===========================================================================
DataStructures.RedBlackTree.insert(DataStructures.Comparable):::EXIT
this.header == orig(this.header)
this.header.element == orig(this.header.element)
this.header.right.color == DataStructures.RedBlackTree.BLACK
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.current.left.left
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.current.left.right
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.current.right.left
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.current.right.right
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.parent.left.left
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.parent.left.right
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.parent.right.left
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.parent.right.right
DataStructures.RedBlackTree.nullNode == orig(this.header.left)
DataStructures.RedBlackTree.nullNode == orig(this.header.left.left)
DataStructures.RedBlackTree.nullNode == orig(this.header.left.right)
DataStructures.RedBlackTree.nullNode == orig(DataStructures.RedBlackTree.nullNode)
DataStructures.RedBlackTree.nullNode == orig(DataStructures.RedBlackTree.nullNode.left)
DataStructures.RedBlackTree.nullNode == orig(DataStructures.RedBlackTree.nullNode.left.left)
DataStructures.RedBlackTree.nullNode == orig(DataStructures.RedBlackTree.nullNode.left.right)
DataStructures.RedBlackTree.nullNode == orig(DataStructures.RedBlackTree.nullNode.right)
DataStructures.RedBlackTree.nullNode == orig(DataStructures.RedBlackTree.nullNode.right.left)
DataStructures.RedBlackTree.nullNode == orig(DataStructures.RedBlackTree.nullNode.right.right)
DataStructures.RedBlackTree.nullNode == orig(DataStructures.RedBlackTree.current.left.left)
DataStructures.RedBlackTree.nullNode.element == orig(item)
DataStructures.RedBlackTree.nullNode.element.getClass().getName() == orig(this.header.element.getClass().getName())
DataStructures.RedBlackTree.nullNode.element.getClass().getName() == orig(DataStructures.RedBlackTree.nullNode.element.getClass().getName())
DataStructures.RedBlackTree.nullNode.element.getClass().getName() == orig(item.getClass().getName())
DataStructures.RedBlackTree.BLACK == DataStructures.RedBlackTree.parent.color
DataStructures.RedBlackTree.BLACK == DataStructures.RedBlackTree.grand.left.color
DataStructures.RedBlackTree.current.left.color == DataStructures.RedBlackTree.current.right.color
this.header.right.element != null
DataStructures.RedBlackTree.nullNode.element != null
DataStructures.RedBlackTree.current != null
DataStructures.RedBlackTree.parent != null
DataStructures.RedBlackTree.grand != null
DataStructures.RedBlackTree.great != null
DataStructures.RedBlackTree.current.left.color >= DataStructures.RedBlackTree.parent.left.color
DataStructures.RedBlackTree.current.left.color >= DataStructures.RedBlackTree.parent.right.color
DataStructures.RedBlackTree.current.left.color >= DataStructures.RedBlackTree.grand.color
DataStructures.RedBlackTree.current.left.color <= orig(DataStructures.RedBlackTree.parent.color)
DataStructures.RedBlackTree.current.color <= DataStructures.RedBlackTree.grand.right.color
DataStructures.RedBlackTree.current.color <= orig(DataStructures.RedBlackTree.parent.color)
DataStructures.RedBlackTree.current.color <= orig(DataStructures.RedBlackTree.grand.right.color)
DataStructures.RedBlackTree.parent.left.color <= DataStructures.RedBlackTree.grand.right.color
DataStructures.RedBlackTree.parent.left.color <= orig(DataStructures.RedBlackTree.parent.color)
DataStructures.RedBlackTree.parent.left.color <= orig(DataStructures.RedBlackTree.grand.right.color)
DataStructures.RedBlackTree.parent.right.color <= orig(DataStructures.RedBlackTree.parent.color)
DataStructures.RedBlackTree.grand.right.color >= orig(DataStructures.RedBlackTree.current.color)
DataStructures.RedBlackTree.grand.right.color >= orig(DataStructures.RedBlackTree.parent.left.color)
DataStructures.RedBlackTree.grand.right.color <= orig(DataStructures.RedBlackTree.parent.color)
DataStructures.RedBlackTree.grand.color <= orig(DataStructures.RedBlackTree.parent.color)
DataStructures.RedBlackTree.great.left.color <= orig(DataStructures.RedBlackTree.parent.color)
DataStructures.RedBlackTree.great.right.color <= orig(DataStructures.RedBlackTree.parent.color)
DataStructures.RedBlackTree.great.color <= orig(DataStructures.RedBlackTree.parent.color)
DataStructures.RedBlackTree.current.left.color == (java.lang.Math.pow(DataStructures.RedBlackTree.parent.left.color, DataStructures.RedBlackTree.current.color))
DataStructures.RedBlackTree.current.left.color == (java.lang.Math.pow(DataStructures.RedBlackTree.parent.right.color, DataStructures.RedBlackTree.current.color))
DataStructures.RedBlackTree.current.left.color == (java.lang.Math.pow(DataStructures.RedBlackTree.grand.color, DataStructures.RedBlackTree.current.color))
DataStructures.RedBlackTree.current.color == (orig(DataStructures.RedBlackTree.grand.right.color) >> DataStructures.RedBlackTree.current.left.color)
DataStructures.RedBlackTree.current.color == (orig(DataStructures.RedBlackTree.grand.right.color) >>> DataStructures.RedBlackTree.current.left.color)
===========================================================================
DataStructures.RedBlackTree.isEmpty():::ENTER
this.header.right.color == DataStructures.RedBlackTree.BLACK
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.current.left
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.current.left.left
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.current.left.right
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.current.right
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.current.right.left
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.current.right.right
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.parent.left
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.parent.left.left
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.parent.left.right
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.parent.right.left
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.parent.right.right
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.grand.left.left
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.grand.right.left
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.grand.right.right
DataStructures.RedBlackTree.nullNode.element == DataStructures.RedBlackTree.current.element
DataStructures.RedBlackTree.nullNode.element == DataStructures.RedBlackTree.current.left.element
DataStructures.RedBlackTree.nullNode.element == DataStructures.RedBlackTree.current.right.element
DataStructures.RedBlackTree.nullNode.element == DataStructures.RedBlackTree.parent.left.element
DataStructures.RedBlackTree.nullNode.element == DataStructures.RedBlackTree.parent.right.element
DataStructures.RedBlackTree.BLACK == DataStructures.RedBlackTree.current.left.color
DataStructures.RedBlackTree.BLACK == DataStructures.RedBlackTree.current.right.color
DataStructures.RedBlackTree.BLACK == DataStructures.RedBlackTree.parent.left.color
DataStructures.RedBlackTree.BLACK == DataStructures.RedBlackTree.parent.color
DataStructures.RedBlackTree.BLACK == DataStructures.RedBlackTree.grand.left.color
DataStructures.RedBlackTree.BLACK == DataStructures.RedBlackTree.grand.right.color
DataStructures.RedBlackTree.BLACK == DataStructures.RedBlackTree.great.right.color
DataStructures.RedBlackTree.BLACK == DataStructures.RedBlackTree.great.color
DataStructures.RedBlackTree.RED == DataStructures.RedBlackTree.current.color
DataStructures.RedBlackTree.RED == DataStructures.RedBlackTree.parent.right.color
DataStructures.RedBlackTree.RED == DataStructures.RedBlackTree.grand.color
DataStructures.RedBlackTree.RED == DataStructures.RedBlackTree.great.left.color
DataStructures.RedBlackTree.current == DataStructures.RedBlackTree.parent.right
DataStructures.RedBlackTree.current == DataStructures.RedBlackTree.grand.left.right
DataStructures.RedBlackTree.parent == DataStructures.RedBlackTree.grand.left
DataStructures.RedBlackTree.parent == DataStructures.RedBlackTree.great.left.left
DataStructures.RedBlackTree.parent.element == DataStructures.RedBlackTree.grand.left.element
DataStructures.RedBlackTree.grand == DataStructures.RedBlackTree.great.left
DataStructures.RedBlackTree.grand.element == DataStructures.RedBlackTree.great.left.element
DataStructures.RedBlackTree.grand.right == DataStructures.RedBlackTree.great.left.right
this.header.right has only one value
this.header.right.element has only one value
this.header.right.left has only one value
this.header.right.right has only one value
DataStructures.RedBlackTree.nullNode.element has only one value
DataStructures.RedBlackTree.current has only one value
DataStructures.RedBlackTree.parent has only one value
DataStructures.RedBlackTree.parent.element has only one value
DataStructures.RedBlackTree.grand has only one value
DataStructures.RedBlackTree.grand.element has only one value
DataStructures.RedBlackTree.grand.right has only one value
DataStructures.RedBlackTree.grand.right.element has only one value
DataStructures.RedBlackTree.great has only one value
DataStructures.RedBlackTree.great.element has only one value
DataStructures.RedBlackTree.great.right has only one value
DataStructures.RedBlackTree.great.right.element has only one value
DataStructures.RedBlackTree.great.right.left has only one value
DataStructures.RedBlackTree.great.right.right has only one value
===========================================================================
DataStructures.RedBlackTree.isEmpty():::EXIT
this.header == orig(this.header)
this.header.element == orig(this.header.element)
this.header.right == orig(this.header.right)
this.header.right.element == orig(this.header.right.element)
this.header.right.left == orig(this.header.right.left)
this.header.right.right == orig(this.header.right.right)
this.header.right.color == DataStructures.RedBlackTree.BLACK
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.current.left
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.current.left.left
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.current.left.right
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.current.right
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.current.right.left
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.current.right.right
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.parent.left
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.parent.left.left
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.parent.left.right
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.parent.right.left
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.parent.right.right
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.grand.left.left
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.grand.right.left
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.grand.right.right
DataStructures.RedBlackTree.nullNode == orig(this.header.left)
DataStructures.RedBlackTree.nullNode == orig(this.header.left.left)
DataStructures.RedBlackTree.nullNode == orig(this.header.left.right)
DataStructures.RedBlackTree.nullNode == orig(DataStructures.RedBlackTree.nullNode)
DataStructures.RedBlackTree.nullNode == orig(DataStructures.RedBlackTree.nullNode.left)
DataStructures.RedBlackTree.nullNode == orig(DataStructures.RedBlackTree.nullNode.left.left)
DataStructures.RedBlackTree.nullNode == orig(DataStructures.RedBlackTree.nullNode.left.right)
DataStructures.RedBlackTree.nullNode == orig(DataStructures.RedBlackTree.nullNode.right)
DataStructures.RedBlackTree.nullNode == orig(DataStructures.RedBlackTree.nullNode.right.left)
DataStructures.RedBlackTree.nullNode == orig(DataStructures.RedBlackTree.nullNode.right.right)
DataStructures.RedBlackTree.nullNode == orig(DataStructures.RedBlackTree.current.left)
DataStructures.RedBlackTree.nullNode == orig(DataStructures.RedBlackTree.current.left.left)
DataStructures.RedBlackTree.nullNode == orig(DataStructures.RedBlackTree.current.left.right)
DataStructures.RedBlackTree.nullNode == orig(DataStructures.RedBlackTree.current.right)
DataStructures.RedBlackTree.nullNode == orig(DataStructures.RedBlackTree.current.right.left)
DataStructures.RedBlackTree.nullNode == orig(DataStructures.RedBlackTree.current.right.right)
DataStructures.RedBlackTree.nullNode == orig(DataStructures.RedBlackTree.parent.left)
DataStructures.RedBlackTree.nullNode == orig(DataStructures.RedBlackTree.parent.left.left)
DataStructures.RedBlackTree.nullNode == orig(DataStructures.RedBlackTree.parent.left.right)
DataStructures.RedBlackTree.nullNode == orig(DataStructures.RedBlackTree.parent.right.left)
DataStructures.RedBlackTree.nullNode == orig(DataStructures.RedBlackTree.parent.right.right)
DataStructures.RedBlackTree.nullNode == orig(DataStructures.RedBlackTree.grand.left.left)
DataStructures.RedBlackTree.nullNode == orig(DataStructures.RedBlackTree.grand.right.left)
DataStructures.RedBlackTree.nullNode == orig(DataStructures.RedBlackTree.grand.right.right)
DataStructures.RedBlackTree.nullNode.element == DataStructures.RedBlackTree.current.element
DataStructures.RedBlackTree.nullNode.element == DataStructures.RedBlackTree.current.left.element
DataStructures.RedBlackTree.nullNode.element == DataStructures.RedBlackTree.current.right.element
DataStructures.RedBlackTree.nullNode.element == DataStructures.RedBlackTree.parent.left.element
DataStructures.RedBlackTree.nullNode.element == DataStructures.RedBlackTree.parent.right.element
DataStructures.RedBlackTree.nullNode.element == orig(this.header.left.element)
DataStructures.RedBlackTree.nullNode.element == orig(DataStructures.RedBlackTree.nullNode.element)
DataStructures.RedBlackTree.nullNode.element == orig(DataStructures.RedBlackTree.nullNode.left.element)
DataStructures.RedBlackTree.nullNode.element == orig(DataStructures.RedBlackTree.nullNode.right.element)
DataStructures.RedBlackTree.nullNode.element == orig(DataStructures.RedBlackTree.current.element)
DataStructures.RedBlackTree.nullNode.element == orig(DataStructures.RedBlackTree.current.left.element)
DataStructures.RedBlackTree.nullNode.element == orig(DataStructures.RedBlackTree.current.right.element)
DataStructures.RedBlackTree.nullNode.element == orig(DataStructures.RedBlackTree.parent.left.element)
DataStructures.RedBlackTree.nullNode.element == orig(DataStructures.RedBlackTree.parent.right.element)
DataStructures.RedBlackTree.nullNode.element.getClass().getName() == orig(this.header.element.getClass().getName())
DataStructures.RedBlackTree.nullNode.element.getClass().getName() == orig(this.header.left.element.getClass().getName())
DataStructures.RedBlackTree.nullNode.element.getClass().getName() == orig(this.header.right.element.getClass().getName())
DataStructures.RedBlackTree.nullNode.element.getClass().getName() == orig(DataStructures.RedBlackTree.nullNode.element.getClass().getName())
DataStructures.RedBlackTree.nullNode.element.getClass().getName() == orig(DataStructures.RedBlackTree.nullNode.left.element.getClass().getName())
DataStructures.RedBlackTree.nullNode.element.getClass().getName() == orig(DataStructures.RedBlackTree.nullNode.right.element.getClass().getName())
DataStructures.RedBlackTree.nullNode.element.getClass().getName() == orig(DataStructures.RedBlackTree.current.element.getClass().getName())
DataStructures.RedBlackTree.nullNode.element.getClass().getName() == orig(DataStructures.RedBlackTree.current.left.element.getClass().getName())
DataStructures.RedBlackTree.nullNode.element.getClass().getName() == orig(DataStructures.RedBlackTree.current.right.element.getClass().getName())
DataStructures.RedBlackTree.nullNode.element.getClass().getName() == orig(DataStructures.RedBlackTree.parent.element.getClass().getName())
DataStructures.RedBlackTree.nullNode.element.getClass().getName() == orig(DataStructures.RedBlackTree.parent.left.element.getClass().getName())
DataStructures.RedBlackTree.nullNode.element.getClass().getName() == orig(DataStructures.RedBlackTree.parent.right.element.getClass().getName())
DataStructures.RedBlackTree.nullNode.element.getClass().getName() == orig(DataStructures.RedBlackTree.grand.element.getClass().getName())
DataStructures.RedBlackTree.nullNode.element.getClass().getName() == orig(DataStructures.RedBlackTree.grand.left.element.getClass().getName())
DataStructures.RedBlackTree.nullNode.element.getClass().getName() == orig(DataStructures.RedBlackTree.grand.right.element.getClass().getName())
DataStructures.RedBlackTree.nullNode.element.getClass().getName() == orig(DataStructures.RedBlackTree.great.element.getClass().getName())
DataStructures.RedBlackTree.nullNode.element.getClass().getName() == orig(DataStructures.RedBlackTree.great.left.element.getClass().getName())
DataStructures.RedBlackTree.nullNode.element.getClass().getName() == orig(DataStructures.RedBlackTree.great.right.element.getClass().getName())
DataStructures.RedBlackTree.BLACK == DataStructures.RedBlackTree.current.left.color
DataStructures.RedBlackTree.BLACK == DataStructures.RedBlackTree.current.right.color
DataStructures.RedBlackTree.BLACK == DataStructures.RedBlackTree.parent.left.color
DataStructures.RedBlackTree.BLACK == DataStructures.RedBlackTree.parent.color
DataStructures.RedBlackTree.BLACK == DataStructures.RedBlackTree.grand.left.color
DataStructures.RedBlackTree.BLACK == DataStructures.RedBlackTree.grand.right.color
DataStructures.RedBlackTree.BLACK == DataStructures.RedBlackTree.great.right.color
DataStructures.RedBlackTree.BLACK == DataStructures.RedBlackTree.great.color
DataStructures.RedBlackTree.RED == DataStructures.RedBlackTree.current.color
DataStructures.RedBlackTree.RED == DataStructures.RedBlackTree.parent.right.color
DataStructures.RedBlackTree.RED == DataStructures.RedBlackTree.grand.color
DataStructures.RedBlackTree.RED == DataStructures.RedBlackTree.great.left.color
DataStructures.RedBlackTree.current == DataStructures.RedBlackTree.parent.right
DataStructures.RedBlackTree.current == DataStructures.RedBlackTree.grand.left.right
DataStructures.RedBlackTree.current == orig(DataStructures.RedBlackTree.current)
DataStructures.RedBlackTree.current == orig(DataStructures.RedBlackTree.parent.right)
DataStructures.RedBlackTree.current == orig(DataStructures.RedBlackTree.grand.left.right)
DataStructures.RedBlackTree.parent == DataStructures.RedBlackTree.grand.left
DataStructures.RedBlackTree.parent == DataStructures.RedBlackTree.great.left.left
DataStructures.RedBlackTree.parent == orig(DataStructures.RedBlackTree.parent)
DataStructures.RedBlackTree.parent == orig(DataStructures.RedBlackTree.grand.left)
DataStructures.RedBlackTree.parent == orig(DataStructures.RedBlackTree.great.left.left)
DataStructures.RedBlackTree.parent.element == DataStructures.RedBlackTree.grand.left.element
DataStructures.RedBlackTree.parent.element == orig(DataStructures.RedBlackTree.parent.element)
DataStructures.RedBlackTree.parent.element == orig(DataStructures.RedBlackTree.grand.left.element)
DataStructures.RedBlackTree.grand == DataStructures.RedBlackTree.great.left
DataStructures.RedBlackTree.grand == orig(DataStructures.RedBlackTree.grand)
DataStructures.RedBlackTree.grand == orig(DataStructures.RedBlackTree.great.left)
DataStructures.RedBlackTree.grand.element == DataStructures.RedBlackTree.great.left.element
DataStructures.RedBlackTree.grand.element == orig(DataStructures.RedBlackTree.grand.element)
DataStructures.RedBlackTree.grand.element == orig(DataStructures.RedBlackTree.great.left.element)
DataStructures.RedBlackTree.grand.right == DataStructures.RedBlackTree.great.left.right
DataStructures.RedBlackTree.grand.right == orig(DataStructures.RedBlackTree.grand.right)
DataStructures.RedBlackTree.grand.right == orig(DataStructures.RedBlackTree.great.left.right)
DataStructures.RedBlackTree.grand.right.element == orig(DataStructures.RedBlackTree.grand.right.element)
DataStructures.RedBlackTree.great == orig(DataStructures.RedBlackTree.great)
DataStructures.RedBlackTree.great.element == orig(DataStructures.RedBlackTree.great.element)
DataStructures.RedBlackTree.great.right == orig(DataStructures.RedBlackTree.great.right)
DataStructures.RedBlackTree.great.right.element == orig(DataStructures.RedBlackTree.great.right.element)
DataStructures.RedBlackTree.great.right.left == orig(DataStructures.RedBlackTree.great.right.left)
DataStructures.RedBlackTree.great.right.right == orig(DataStructures.RedBlackTree.great.right.right)
this.header.right has only one value
this.header.right.element has only one value
this.header.right.left has only one value
this.header.right.right has only one value
DataStructures.RedBlackTree.nullNode.element has only one value
DataStructures.RedBlackTree.current has only one value
DataStructures.RedBlackTree.parent has only one value
DataStructures.RedBlackTree.parent.element has only one value
DataStructures.RedBlackTree.grand has only one value
DataStructures.RedBlackTree.grand.element has only one value
DataStructures.RedBlackTree.grand.right has only one value
DataStructures.RedBlackTree.grand.right.element has only one value
DataStructures.RedBlackTree.great has only one value
DataStructures.RedBlackTree.great.element has only one value
DataStructures.RedBlackTree.great.right has only one value
DataStructures.RedBlackTree.great.right.element has only one value
DataStructures.RedBlackTree.great.right.left has only one value
DataStructures.RedBlackTree.great.right.right has only one value
return == false
===========================================================================
DataStructures.RedBlackTree.isEmpty():::EXIT;condition="not(return == true)"
===========================================================================
DataStructures.RedBlackTree.main(java.lang.String[]):::ENTER
DataStructures.RedBlackTree.RED == size(args[])
DataStructures.RedBlackTree.current == DataStructures.RedBlackTree.parent
DataStructures.RedBlackTree.current == DataStructures.RedBlackTree.grand
DataStructures.RedBlackTree.current == DataStructures.RedBlackTree.great
DataStructures.RedBlackTree.nullNode.element == null
DataStructures.RedBlackTree.current == null
args has only one value
args.getClass().getName() == java.lang.String[].class
args[] == []
args[].toString == []
===========================================================================
DataStructures.RedBlackTree.main(java.lang.String[]):::EXIT
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.current.left
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.current.left.left
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.current.left.right
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.current.right
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.current.right.left
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.current.right.right
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.parent.left
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.parent.left.left
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.parent.left.right
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.parent.right.left
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.parent.right.right
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.grand.left.left
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.grand.right.left
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.grand.right.right
DataStructures.RedBlackTree.nullNode == orig(DataStructures.RedBlackTree.nullNode)
DataStructures.RedBlackTree.nullNode == orig(DataStructures.RedBlackTree.nullNode.left)
DataStructures.RedBlackTree.nullNode == orig(DataStructures.RedBlackTree.nullNode.left.left)
DataStructures.RedBlackTree.nullNode == orig(DataStructures.RedBlackTree.nullNode.left.right)
DataStructures.RedBlackTree.nullNode == orig(DataStructures.RedBlackTree.nullNode.right)
DataStructures.RedBlackTree.nullNode == orig(DataStructures.RedBlackTree.nullNode.right.left)
DataStructures.RedBlackTree.nullNode == orig(DataStructures.RedBlackTree.nullNode.right.right)
DataStructures.RedBlackTree.nullNode.element == DataStructures.RedBlackTree.current.left.element
DataStructures.RedBlackTree.nullNode.element == DataStructures.RedBlackTree.current.right.element
DataStructures.RedBlackTree.nullNode.element == DataStructures.RedBlackTree.parent.left.element
DataStructures.RedBlackTree.BLACK == DataStructures.RedBlackTree.current.left.color
DataStructures.RedBlackTree.BLACK == DataStructures.RedBlackTree.current.right.color
DataStructures.RedBlackTree.BLACK == DataStructures.RedBlackTree.parent.left.color
DataStructures.RedBlackTree.BLACK == DataStructures.RedBlackTree.parent.color
DataStructures.RedBlackTree.BLACK == DataStructures.RedBlackTree.grand.left.color
DataStructures.RedBlackTree.BLACK == DataStructures.RedBlackTree.grand.right.color
DataStructures.RedBlackTree.BLACK == DataStructures.RedBlackTree.great.right.color
DataStructures.RedBlackTree.BLACK == DataStructures.RedBlackTree.great.color
DataStructures.RedBlackTree.RED == DataStructures.RedBlackTree.current.color
DataStructures.RedBlackTree.RED == DataStructures.RedBlackTree.parent.right.color
DataStructures.RedBlackTree.RED == DataStructures.RedBlackTree.grand.color
DataStructures.RedBlackTree.RED == DataStructures.RedBlackTree.great.left.color
DataStructures.RedBlackTree.parent == DataStructures.RedBlackTree.grand.left
DataStructures.RedBlackTree.parent == DataStructures.RedBlackTree.great.left.left
DataStructures.RedBlackTree.parent.element == DataStructures.RedBlackTree.grand.left.element
DataStructures.RedBlackTree.parent.right == DataStructures.RedBlackTree.grand.left.right
DataStructures.RedBlackTree.grand == DataStructures.RedBlackTree.great.left
DataStructures.RedBlackTree.grand.element == DataStructures.RedBlackTree.great.left.element
DataStructures.RedBlackTree.grand.right == DataStructures.RedBlackTree.great.left.right
args[] == orig(args[])
DataStructures.RedBlackTree.nullNode.element has only one value
DataStructures.RedBlackTree.current has only one value
DataStructures.RedBlackTree.current.element has only one value
DataStructures.RedBlackTree.parent has only one value
DataStructures.RedBlackTree.parent.element has only one value
DataStructures.RedBlackTree.parent.right has only one value
DataStructures.RedBlackTree.parent.right.element has only one value
DataStructures.RedBlackTree.grand has only one value
DataStructures.RedBlackTree.grand.element has only one value
DataStructures.RedBlackTree.grand.right has only one value
DataStructures.RedBlackTree.grand.right.element has only one value
DataStructures.RedBlackTree.great has only one value
DataStructures.RedBlackTree.great.element has only one value
DataStructures.RedBlackTree.great.right has only one value
DataStructures.RedBlackTree.great.right.element has only one value
DataStructures.RedBlackTree.great.right.left has only one value
DataStructures.RedBlackTree.great.right.right has only one value
args[] == []
args[].toString == []
===========================================================================
DataStructures.RedBlackTree.rotate(DataStructures.Comparable, DataStructures.RedBlackNode):::ENTER
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.current.left.left
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.current.left.right
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.current.right.left
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.current.right.right
DataStructures.RedBlackTree.nullNode.element == item
DataStructures.RedBlackTree.nullNode.element.getClass().getName() == item.getClass().getName()
DataStructures.RedBlackTree.nullNode.element.getClass().getName() == parent.element.getClass().getName()
DataStructures.RedBlackTree.nullNode.element.getClass().getName() == parent.left.element.getClass().getName()
DataStructures.RedBlackTree.nullNode.element.getClass().getName() == parent.right.element.getClass().getName()
DataStructures.RedBlackTree.BLACK == DataStructures.RedBlackTree.current.left.color
DataStructures.RedBlackTree.BLACK == DataStructures.RedBlackTree.current.right.color
DataStructures.RedBlackTree.RED == DataStructures.RedBlackTree.current.color
DataStructures.RedBlackTree.RED == DataStructures.RedBlackTree.parent.color
DataStructures.RedBlackTree.RED == DataStructures.RedBlackTree.grand.color
DataStructures.RedBlackTree.current.element == DataStructures.RedBlackTree.parent.right.element
DataStructures.RedBlackTree.current.left == DataStructures.RedBlackTree.parent.right.left
DataStructures.RedBlackTree.current.right == DataStructures.RedBlackTree.parent.right.right
DataStructures.RedBlackTree.parent.left.color == DataStructures.RedBlackTree.grand.left.color
DataStructures.RedBlackTree.parent.right == DataStructures.RedBlackTree.grand.right.right
DataStructures.RedBlackTree.parent.right.color == DataStructures.RedBlackTree.grand.right.color
DataStructures.RedBlackTree.great == parent
DataStructures.RedBlackTree.great.element == parent.element
DataStructures.RedBlackTree.great.left == parent.left
DataStructures.RedBlackTree.great.left.element == parent.left.element
DataStructures.RedBlackTree.great.left.left == parent.left.left
DataStructures.RedBlackTree.great.left.right == parent.left.right
DataStructures.RedBlackTree.great.left.color == parent.left.color
DataStructures.RedBlackTree.great.right == parent.right
DataStructures.RedBlackTree.great.right.element == parent.right.element
DataStructures.RedBlackTree.great.right.left == parent.right.left
DataStructures.RedBlackTree.great.right.right == parent.right.right
DataStructures.RedBlackTree.great.right.color == parent.right.color
DataStructures.RedBlackTree.great.color == parent.color
this.header.right.element != null
DataStructures.RedBlackTree.nullNode.element != null
DataStructures.RedBlackTree.current != null
DataStructures.RedBlackTree.parent != null
DataStructures.RedBlackTree.grand != null
DataStructures.RedBlackTree.great != null
DataStructures.RedBlackTree.parent.left.color != DataStructures.RedBlackTree.parent.right.color
DataStructures.RedBlackTree.parent.right.color == (this.header.right.color >> DataStructures.RedBlackTree.parent.left.color)
DataStructures.RedBlackTree.parent.right.color == (this.header.right.color >>> DataStructures.RedBlackTree.parent.left.color)
===========================================================================
DataStructures.RedBlackTree.rotate(DataStructures.Comparable, DataStructures.RedBlackNode):::EXIT211
this.header.right == orig(this.header.right)
this.header.right.element == orig(this.header.right.element)
this.header.right.left == orig(this.header.right.left)
this.header.right.right == orig(this.header.right.right)
this.header.right.color == DataStructures.RedBlackTree.BLACK
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.current.left
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.current.right
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.parent.left.left
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.parent.left.right
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.parent.right.left
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.parent.right.right
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.grand.left
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.grand.left.left
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.grand.left.right
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.grand.right
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.grand.right.left
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.grand.right.right
DataStructures.RedBlackTree.nullNode == return.left.left
DataStructures.RedBlackTree.nullNode == return.left.right
DataStructures.RedBlackTree.nullNode == return.right.left
DataStructures.RedBlackTree.nullNode == return.right.right
DataStructures.RedBlackTree.nullNode == orig(DataStructures.RedBlackTree.current.left)
DataStructures.RedBlackTree.nullNode == orig(DataStructures.RedBlackTree.current.right)
DataStructures.RedBlackTree.nullNode == orig(DataStructures.RedBlackTree.parent.left.left)
DataStructures.RedBlackTree.nullNode == orig(DataStructures.RedBlackTree.parent.left.right)
DataStructures.RedBlackTree.nullNode == orig(DataStructures.RedBlackTree.parent.right.left)
DataStructures.RedBlackTree.nullNode == orig(DataStructures.RedBlackTree.parent.right.right)
DataStructures.RedBlackTree.nullNode == orig(DataStructures.RedBlackTree.grand.left.right)
DataStructures.RedBlackTree.nullNode == orig(DataStructures.RedBlackTree.grand.right.left)
DataStructures.RedBlackTree.nullNode.element == DataStructures.RedBlackTree.current.element
DataStructures.RedBlackTree.nullNode.element == DataStructures.RedBlackTree.current.left.element
DataStructures.RedBlackTree.nullNode.element == DataStructures.RedBlackTree.current.right.element
DataStructures.RedBlackTree.nullNode.element == DataStructures.RedBlackTree.grand.left.element
DataStructures.RedBlackTree.nullNode.element == DataStructures.RedBlackTree.grand.right.element
DataStructures.RedBlackTree.nullNode.element == orig(DataStructures.RedBlackTree.current.element)
DataStructures.RedBlackTree.nullNode.element == orig(DataStructures.RedBlackTree.current.left.element)
DataStructures.RedBlackTree.nullNode.element == orig(DataStructures.RedBlackTree.current.right.element)
DataStructures.RedBlackTree.nullNode.element == orig(DataStructures.RedBlackTree.parent.left.element)
DataStructures.RedBlackTree.nullNode.element == orig(DataStructures.RedBlackTree.parent.right.element)
DataStructures.RedBlackTree.BLACK == orig(this.header.right.color)
DataStructures.RedBlackTree.RED == DataStructures.RedBlackTree.great.left.color
DataStructures.RedBlackTree.RED == parent.left.color
DataStructures.RedBlackTree.RED == orig(DataStructures.RedBlackTree.great.left.color)
DataStructures.RedBlackTree.RED == orig(parent.left.color)
DataStructures.RedBlackTree.parent == DataStructures.RedBlackTree.great.left
DataStructures.RedBlackTree.parent == parent.left
DataStructures.RedBlackTree.parent.element == DataStructures.RedBlackTree.great.left.element
DataStructures.RedBlackTree.parent.element == parent.left.element
DataStructures.RedBlackTree.parent.left == DataStructures.RedBlackTree.great.left.left
DataStructures.RedBlackTree.parent.left == parent.left.left
DataStructures.RedBlackTree.parent.right == DataStructures.RedBlackTree.great.left.right
DataStructures.RedBlackTree.parent.right == parent.left.right
DataStructures.RedBlackTree.grand == orig(DataStructures.RedBlackTree.great.left)
DataStructures.RedBlackTree.grand == orig(parent.left)
DataStructures.RedBlackTree.grand.element == orig(DataStructures.RedBlackTree.great.left.element)
DataStructures.RedBlackTree.grand.element == orig(parent.left.element)
DataStructures.RedBlackTree.great.right == orig(DataStructures.RedBlackTree.great.right)
DataStructures.RedBlackTree.great.right == orig(parent.right)
DataStructures.RedBlackTree.great.right.element == orig(DataStructures.RedBlackTree.great.right.element)
DataStructures.RedBlackTree.great.right.element == orig(parent.right.element)
DataStructures.RedBlackTree.great.right.left == orig(DataStructures.RedBlackTree.great.right.left)
DataStructures.RedBlackTree.great.right.left == orig(parent.right.left)
DataStructures.RedBlackTree.great.right.right == orig(DataStructures.RedBlackTree.great.right.right)
DataStructures.RedBlackTree.great.right.right == orig(parent.right.right)
orig(DataStructures.RedBlackTree.parent.left) == orig(DataStructures.RedBlackTree.grand.left.left)
orig(DataStructures.RedBlackTree.grand.left) == orig(DataStructures.RedBlackTree.great.left.left)
orig(DataStructures.RedBlackTree.grand.left) == orig(parent.left.left)
orig(DataStructures.RedBlackTree.grand.right) == orig(DataStructures.RedBlackTree.great.left.right)
orig(DataStructures.RedBlackTree.grand.right) == orig(parent.left.right)
this.header.right has only one value
this.header.right.element has only one value
this.header.right.left has only one value
this.header.right.right has only one value
DataStructures.RedBlackTree.great.right.color >= orig(DataStructures.RedBlackTree.parent.right.color)
orig(DataStructures.RedBlackTree.parent.right.color) == (DataStructures.RedBlackTree.great.right.color >> orig(DataStructures.RedBlackTree.parent.left.color))
orig(DataStructures.RedBlackTree.parent.right.color) == (DataStructures.RedBlackTree.great.right.color >>> orig(DataStructures.RedBlackTree.parent.left.color))
===========================================================================
DataStructures.RedBlackTree.rotate(DataStructures.Comparable, DataStructures.RedBlackNode):::EXIT215
DataStructures.RedBlackTree.RED == DataStructures.RedBlackTree.great.right.color
DataStructures.RedBlackTree.RED == parent.right.color
DataStructures.RedBlackTree.RED == orig(DataStructures.RedBlackTree.great.right.color)
DataStructures.RedBlackTree.RED == orig(parent.right.color)
DataStructures.RedBlackTree.parent == DataStructures.RedBlackTree.great.right
DataStructures.RedBlackTree.parent == parent.right
DataStructures.RedBlackTree.parent.element == DataStructures.RedBlackTree.great.right.element
DataStructures.RedBlackTree.parent.element == parent.right.element
DataStructures.RedBlackTree.parent.left == DataStructures.RedBlackTree.great.right.left
DataStructures.RedBlackTree.parent.left == parent.right.left
DataStructures.RedBlackTree.parent.right == DataStructures.RedBlackTree.great.right.right
DataStructures.RedBlackTree.parent.right == parent.right.right
DataStructures.RedBlackTree.grand == orig(DataStructures.RedBlackTree.great.right)
DataStructures.RedBlackTree.grand == orig(parent.right)
DataStructures.RedBlackTree.grand.element == orig(DataStructures.RedBlackTree.great.right.element)
DataStructures.RedBlackTree.grand.element == orig(parent.right.element)
DataStructures.RedBlackTree.great.left == orig(DataStructures.RedBlackTree.great.left)
DataStructures.RedBlackTree.great.left == orig(parent.left)
DataStructures.RedBlackTree.great.left.element == orig(DataStructures.RedBlackTree.great.left.element)
DataStructures.RedBlackTree.great.left.element == orig(parent.left.element)
DataStructures.RedBlackTree.great.left.left == orig(DataStructures.RedBlackTree.great.left.left)
DataStructures.RedBlackTree.great.left.left == orig(parent.left.left)
DataStructures.RedBlackTree.great.left.right == orig(DataStructures.RedBlackTree.great.left.right)
DataStructures.RedBlackTree.great.left.right == orig(parent.left.right)
orig(DataStructures.RedBlackTree.grand.left) == orig(DataStructures.RedBlackTree.great.right.left)
orig(DataStructures.RedBlackTree.grand.left) == orig(parent.right.left)
orig(DataStructures.RedBlackTree.grand.right) == orig(DataStructures.RedBlackTree.great.right.right)
orig(DataStructures.RedBlackTree.grand.right) == orig(parent.right.right)
DataStructures.RedBlackTree.great.left.color >= orig(DataStructures.RedBlackTree.parent.left.color)
orig(DataStructures.RedBlackTree.parent.left.color) == (DataStructures.RedBlackTree.great.left.color >> orig(DataStructures.RedBlackTree.parent.right.color))
orig(DataStructures.RedBlackTree.parent.left.color) == (DataStructures.RedBlackTree.great.left.color >>> orig(DataStructures.RedBlackTree.parent.right.color))
===========================================================================
DataStructures.RedBlackTree.rotate(DataStructures.Comparable, DataStructures.RedBlackNode):::EXIT
this.header == orig(this.header)
this.header.element == orig(this.header.element)
this.header.right.color == orig(this.header.right.color)
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.current.left.left
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.current.left.right
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.current.right.left
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.current.right.right
DataStructures.RedBlackTree.nullNode == orig(this.header.left)
DataStructures.RedBlackTree.nullNode == orig(this.header.left.left)
DataStructures.RedBlackTree.nullNode == orig(this.header.left.right)
DataStructures.RedBlackTree.nullNode == orig(DataStructures.RedBlackTree.nullNode)
DataStructures.RedBlackTree.nullNode == orig(DataStructures.RedBlackTree.nullNode.left)
DataStructures.RedBlackTree.nullNode == orig(DataStructures.RedBlackTree.nullNode.left.left)
DataStructures.RedBlackTree.nullNode == orig(DataStructures.RedBlackTree.nullNode.left.right)
DataStructures.RedBlackTree.nullNode == orig(DataStructures.RedBlackTree.nullNode.right)
DataStructures.RedBlackTree.nullNode == orig(DataStructures.RedBlackTree.nullNode.right.left)
DataStructures.RedBlackTree.nullNode == orig(DataStructures.RedBlackTree.nullNode.right.right)
DataStructures.RedBlackTree.nullNode == orig(DataStructures.RedBlackTree.current.left.left)
DataStructures.RedBlackTree.nullNode == orig(DataStructures.RedBlackTree.current.left.right)
DataStructures.RedBlackTree.nullNode == orig(DataStructures.RedBlackTree.current.right.left)
DataStructures.RedBlackTree.nullNode == orig(DataStructures.RedBlackTree.current.right.right)
DataStructures.RedBlackTree.nullNode.element == orig(this.header.left.element)
DataStructures.RedBlackTree.nullNode.element == orig(DataStructures.RedBlackTree.nullNode.element)
DataStructures.RedBlackTree.nullNode.element == orig(DataStructures.RedBlackTree.nullNode.left.element)
DataStructures.RedBlackTree.nullNode.element == orig(DataStructures.RedBlackTree.nullNode.right.element)
DataStructures.RedBlackTree.nullNode.element == orig(item)
DataStructures.RedBlackTree.nullNode.element.getClass().getName() == parent.element.getClass().getName()
DataStructures.RedBlackTree.nullNode.element.getClass().getName() == parent.left.element.getClass().getName()
DataStructures.RedBlackTree.nullNode.element.getClass().getName() == parent.right.element.getClass().getName()
DataStructures.RedBlackTree.nullNode.element.getClass().getName() == return.element.getClass().getName()
DataStructures.RedBlackTree.nullNode.element.getClass().getName() == return.left.element.getClass().getName()
DataStructures.RedBlackTree.nullNode.element.getClass().getName() == return.right.element.getClass().getName()
DataStructures.RedBlackTree.nullNode.element.getClass().getName() == orig(this.header.element.getClass().getName())
DataStructures.RedBlackTree.nullNode.element.getClass().getName() == orig(this.header.left.element.getClass().getName())
DataStructures.RedBlackTree.nullNode.element.getClass().getName() == orig(this.header.right.element.getClass().getName())
DataStructures.RedBlackTree.nullNode.element.getClass().getName() == orig(DataStructures.RedBlackTree.nullNode.element.getClass().getName())
DataStructures.RedBlackTree.nullNode.element.getClass().getName() == orig(DataStructures.RedBlackTree.nullNode.left.element.getClass().getName())
DataStructures.RedBlackTree.nullNode.element.getClass().getName() == orig(DataStructures.RedBlackTree.nullNode.right.element.getClass().getName())
DataStructures.RedBlackTree.nullNode.element.getClass().getName() == orig(DataStructures.RedBlackTree.current.element.getClass().getName())
DataStructures.RedBlackTree.nullNode.element.getClass().getName() == orig(DataStructures.RedBlackTree.current.left.element.getClass().getName())
DataStructures.RedBlackTree.nullNode.element.getClass().getName() == orig(DataStructures.RedBlackTree.current.right.element.getClass().getName())
DataStructures.RedBlackTree.nullNode.element.getClass().getName() == orig(DataStructures.RedBlackTree.parent.element.getClass().getName())
DataStructures.RedBlackTree.nullNode.element.getClass().getName() == orig(DataStructures.RedBlackTree.parent.left.element.getClass().getName())
DataStructures.RedBlackTree.nullNode.element.getClass().getName() == orig(DataStructures.RedBlackTree.parent.right.element.getClass().getName())
DataStructures.RedBlackTree.nullNode.element.getClass().getName() == orig(DataStructures.RedBlackTree.grand.element.getClass().getName())
DataStructures.RedBlackTree.nullNode.element.getClass().getName() == orig(DataStructures.RedBlackTree.grand.left.element.getClass().getName())
DataStructures.RedBlackTree.nullNode.element.getClass().getName() == orig(DataStructures.RedBlackTree.grand.right.element.getClass().getName())
DataStructures.RedBlackTree.nullNode.element.getClass().getName() == orig(DataStructures.RedBlackTree.great.element.getClass().getName())
DataStructures.RedBlackTree.nullNode.element.getClass().getName() == orig(DataStructures.RedBlackTree.great.left.element.getClass().getName())
DataStructures.RedBlackTree.nullNode.element.getClass().getName() == orig(DataStructures.RedBlackTree.great.right.element.getClass().getName())
DataStructures.RedBlackTree.nullNode.element.getClass().getName() == orig(item.getClass().getName())
DataStructures.RedBlackTree.nullNode.element.getClass().getName() == orig(parent.element.getClass().getName())
DataStructures.RedBlackTree.nullNode.element.getClass().getName() == orig(parent.left.element.getClass().getName())
DataStructures.RedBlackTree.nullNode.element.getClass().getName() == orig(parent.right.element.getClass().getName())
DataStructures.RedBlackTree.BLACK == DataStructures.RedBlackTree.current.left.color
DataStructures.RedBlackTree.BLACK == DataStructures.RedBlackTree.current.right.color
DataStructures.RedBlackTree.BLACK == DataStructures.RedBlackTree.grand.left.color
DataStructures.RedBlackTree.BLACK == DataStructures.RedBlackTree.grand.right.color
DataStructures.RedBlackTree.RED == DataStructures.RedBlackTree.current.color
DataStructures.RedBlackTree.RED == DataStructures.RedBlackTree.parent.left.color
DataStructures.RedBlackTree.RED == DataStructures.RedBlackTree.parent.right.color
DataStructures.RedBlackTree.RED == DataStructures.RedBlackTree.parent.color
DataStructures.RedBlackTree.RED == DataStructures.RedBlackTree.grand.color
DataStructures.RedBlackTree.RED == return.left.color
DataStructures.RedBlackTree.RED == return.right.color
DataStructures.RedBlackTree.RED == return.color
DataStructures.RedBlackTree.current == orig(DataStructures.RedBlackTree.current)
DataStructures.RedBlackTree.current.element == orig(DataStructures.RedBlackTree.current.element)
DataStructures.RedBlackTree.current.element == orig(DataStructures.RedBlackTree.parent.right.element)
DataStructures.RedBlackTree.current.left == DataStructures.RedBlackTree.parent.right.left
DataStructures.RedBlackTree.current.left == return.right.left
DataStructures.RedBlackTree.current.left == orig(DataStructures.RedBlackTree.current.left)
DataStructures.RedBlackTree.current.left == orig(DataStructures.RedBlackTree.parent.right.left)
DataStructures.RedBlackTree.current.left.element == orig(DataStructures.RedBlackTree.current.left.element)
DataStructures.RedBlackTree.current.right == DataStructures.RedBlackTree.parent.right.right
DataStructures.RedBlackTree.current.right == return.right.right
DataStructures.RedBlackTree.current.right == orig(DataStructures.RedBlackTree.current.right)
DataStructures.RedBlackTree.current.right == orig(DataStructures.RedBlackTree.parent.right.right)
DataStructures.RedBlackTree.current.right.element == orig(DataStructures.RedBlackTree.current.right.element)
DataStructures.RedBlackTree.parent == return
DataStructures.RedBlackTree.parent == orig(DataStructures.RedBlackTree.parent)
DataStructures.RedBlackTree.parent.element == return.element
DataStructures.RedBlackTree.parent.element == orig(DataStructures.RedBlackTree.parent.element)
DataStructures.RedBlackTree.parent.left == return.left
DataStructures.RedBlackTree.parent.left.element == return.left.element
DataStructures.RedBlackTree.parent.left.left == DataStructures.RedBlackTree.grand.left
DataStructures.RedBlackTree.parent.left.right == DataStructures.RedBlackTree.grand.right
DataStructures.RedBlackTree.parent.right == return.right
DataStructures.RedBlackTree.parent.right.element == return.right.element
DataStructures.RedBlackTree.grand == orig(DataStructures.RedBlackTree.grand)
DataStructures.RedBlackTree.grand.element == orig(DataStructures.RedBlackTree.grand.element)
DataStructures.RedBlackTree.grand.left == return.left.left
DataStructures.RedBlackTree.grand.left.right == orig(DataStructures.RedBlackTree.grand.left.right)
DataStructures.RedBlackTree.grand.right == return.left.right
DataStructures.RedBlackTree.grand.right == orig(DataStructures.RedBlackTree.grand.right.left)
DataStructures.RedBlackTree.grand.right.element == orig(DataStructures.RedBlackTree.parent.left.element)
DataStructures.RedBlackTree.grand.right.left == orig(DataStructures.RedBlackTree.parent.left.left)
DataStructures.RedBlackTree.grand.right.right == orig(DataStructures.RedBlackTree.parent.left.right)
DataStructures.RedBlackTree.great == orig(DataStructures.RedBlackTree.great)
DataStructures.RedBlackTree.great == orig(parent)
DataStructures.RedBlackTree.great.element == parent.element
DataStructures.RedBlackTree.great.element == orig(DataStructures.RedBlackTree.great.element)
DataStructures.RedBlackTree.great.element == orig(parent.element)
DataStructures.RedBlackTree.great.left == parent.left
DataStructures.RedBlackTree.great.left.element == parent.left.element
DataStructures.RedBlackTree.great.left.left == parent.left.left
DataStructures.RedBlackTree.great.left.right == parent.left.right
DataStructures.RedBlackTree.great.left.color == parent.left.color
DataStructures.RedBlackTree.great.left.color == orig(DataStructures.RedBlackTree.great.left.color)
DataStructures.RedBlackTree.great.left.color == orig(parent.left.color)
DataStructures.RedBlackTree.great.right == parent.right
DataStructures.RedBlackTree.great.right.element == parent.right.element
DataStructures.RedBlackTree.great.right.left == parent.right.left
DataStructures.RedBlackTree.great.right.right == parent.right.right
DataStructures.RedBlackTree.great.right.color == parent.right.color
DataStructures.RedBlackTree.great.right.color == orig(DataStructures.RedBlackTree.great.right.color)
DataStructures.RedBlackTree.great.right.color == orig(parent.right.color)
DataStructures.RedBlackTree.great.color == parent.color
DataStructures.RedBlackTree.great.color == orig(DataStructures.RedBlackTree.great.color)
DataStructures.RedBlackTree.great.color == orig(parent.color)
this.header.right.element != null
DataStructures.RedBlackTree.nullNode.element != null
DataStructures.RedBlackTree.current != null
DataStructures.RedBlackTree.parent != null
DataStructures.RedBlackTree.grand != null
DataStructures.RedBlackTree.great != null
this.header.right.color >= orig(DataStructures.RedBlackTree.parent.right.color)
orig(DataStructures.RedBlackTree.parent.right.color) == (this.header.right.color >> orig(DataStructures.RedBlackTree.parent.left.color))
orig(DataStructures.RedBlackTree.parent.right.color) == (this.header.right.color >>> orig(DataStructures.RedBlackTree.parent.left.color))
===========================================================================
DataStructures.RedBlackTree.rotateWithLeftChild(DataStructures.RedBlackNode):::ENTER
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.current.left
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.current.left.left
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.current.left.right
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.current.right
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.current.right.left
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.current.right.right
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.parent.left.left
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.parent.left.right
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.parent.right
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.parent.right.left
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.parent.right.right
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.grand.left.right
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.grand.right
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.grand.right.left
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.grand.right.right
DataStructures.RedBlackTree.nullNode == k2.left.right
DataStructures.RedBlackTree.nullNode == k2.right
DataStructures.RedBlackTree.nullNode == k2.right.left
DataStructures.RedBlackTree.nullNode == k2.right.right
DataStructures.RedBlackTree.nullNode.element == DataStructures.RedBlackTree.current.element
DataStructures.RedBlackTree.nullNode.element == DataStructures.RedBlackTree.current.left.element
DataStructures.RedBlackTree.nullNode.element == DataStructures.RedBlackTree.current.right.element
DataStructures.RedBlackTree.nullNode.element == DataStructures.RedBlackTree.parent.left.element
DataStructures.RedBlackTree.nullNode.element == DataStructures.RedBlackTree.parent.right.element
DataStructures.RedBlackTree.nullNode.element == DataStructures.RedBlackTree.grand.right.element
DataStructures.RedBlackTree.nullNode.element == k2.right.element
DataStructures.RedBlackTree.nullNode.element.getClass().getName() == k2.element.getClass().getName()
DataStructures.RedBlackTree.nullNode.element.getClass().getName() == k2.left.element.getClass().getName()
DataStructures.RedBlackTree.nullNode.element.getClass().getName() == k2.right.element.getClass().getName()
DataStructures.RedBlackTree.BLACK == DataStructures.RedBlackTree.current.left.color
DataStructures.RedBlackTree.BLACK == DataStructures.RedBlackTree.current.right.color
DataStructures.RedBlackTree.BLACK == DataStructures.RedBlackTree.parent.right.color
DataStructures.RedBlackTree.BLACK == DataStructures.RedBlackTree.grand.right.color
DataStructures.RedBlackTree.BLACK == k2.right.color
DataStructures.RedBlackTree.RED == DataStructures.RedBlackTree.current.color
DataStructures.RedBlackTree.RED == DataStructures.RedBlackTree.parent.left.color
DataStructures.RedBlackTree.RED == DataStructures.RedBlackTree.parent.color
DataStructures.RedBlackTree.RED == DataStructures.RedBlackTree.grand.left.color
DataStructures.RedBlackTree.RED == DataStructures.RedBlackTree.grand.color
DataStructures.RedBlackTree.RED == k2.left.color
DataStructures.RedBlackTree.RED == k2.color
DataStructures.RedBlackTree.current == DataStructures.RedBlackTree.parent.left
DataStructures.RedBlackTree.current == DataStructures.RedBlackTree.grand.left.left
DataStructures.RedBlackTree.current == k2.left.left
DataStructures.RedBlackTree.parent == DataStructures.RedBlackTree.grand.left
DataStructures.RedBlackTree.parent == k2.left
DataStructures.RedBlackTree.parent.element == DataStructures.RedBlackTree.grand.left.element
DataStructures.RedBlackTree.parent.element == k2.left.element
DataStructures.RedBlackTree.grand == k2
DataStructures.RedBlackTree.grand.element == k2.element
DataStructures.RedBlackTree.nullNode.element != null
DataStructures.RedBlackTree.current != null
DataStructures.RedBlackTree.parent != null
DataStructures.RedBlackTree.grand != null
DataStructures.RedBlackTree.great != null
===========================================================================
DataStructures.RedBlackTree.rotateWithLeftChild(DataStructures.RedBlackNode):::EXIT
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.current.left
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.current.left.left
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.current.left.right
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.current.right
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.current.right.left
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.current.right.right
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.parent.left.left
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.parent.left.right
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.parent.right.left
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.parent.right.right
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.grand.left
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.grand.left.left
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.grand.left.right
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.grand.right
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.grand.right.left
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.grand.right.right
DataStructures.RedBlackTree.nullNode == k2.left
DataStructures.RedBlackTree.nullNode == k2.left.left
DataStructures.RedBlackTree.nullNode == k2.left.right
DataStructures.RedBlackTree.nullNode == k2.right
DataStructures.RedBlackTree.nullNode == k2.right.left
DataStructures.RedBlackTree.nullNode == k2.right.right
DataStructures.RedBlackTree.nullNode == return.left.left
DataStructures.RedBlackTree.nullNode == return.left.right
DataStructures.RedBlackTree.nullNode == return.right.left
DataStructures.RedBlackTree.nullNode == return.right.right
DataStructures.RedBlackTree.nullNode == orig(DataStructures.RedBlackTree.nullNode)
DataStructures.RedBlackTree.nullNode == orig(DataStructures.RedBlackTree.nullNode.left)
DataStructures.RedBlackTree.nullNode == orig(DataStructures.RedBlackTree.nullNode.left.left)
DataStructures.RedBlackTree.nullNode == orig(DataStructures.RedBlackTree.nullNode.left.right)
DataStructures.RedBlackTree.nullNode == orig(DataStructures.RedBlackTree.nullNode.right)
DataStructures.RedBlackTree.nullNode == orig(DataStructures.RedBlackTree.nullNode.right.left)
DataStructures.RedBlackTree.nullNode == orig(DataStructures.RedBlackTree.nullNode.right.right)
DataStructures.RedBlackTree.nullNode == orig(DataStructures.RedBlackTree.current.left)
DataStructures.RedBlackTree.nullNode == orig(DataStructures.RedBlackTree.current.left.left)
DataStructures.RedBlackTree.nullNode == orig(DataStructures.RedBlackTree.current.left.right)
DataStructures.RedBlackTree.nullNode == orig(DataStructures.RedBlackTree.current.right)
DataStructures.RedBlackTree.nullNode == orig(DataStructures.RedBlackTree.current.right.left)
DataStructures.RedBlackTree.nullNode == orig(DataStructures.RedBlackTree.current.right.right)
DataStructures.RedBlackTree.nullNode == orig(DataStructures.RedBlackTree.parent.left.left)
DataStructures.RedBlackTree.nullNode == orig(DataStructures.RedBlackTree.parent.left.right)
DataStructures.RedBlackTree.nullNode == orig(DataStructures.RedBlackTree.parent.right)
DataStructures.RedBlackTree.nullNode == orig(DataStructures.RedBlackTree.parent.right.left)
DataStructures.RedBlackTree.nullNode == orig(DataStructures.RedBlackTree.parent.right.right)
DataStructures.RedBlackTree.nullNode == orig(DataStructures.RedBlackTree.grand.left.right)
DataStructures.RedBlackTree.nullNode == orig(DataStructures.RedBlackTree.grand.right)
DataStructures.RedBlackTree.nullNode == orig(DataStructures.RedBlackTree.grand.right.left)
DataStructures.RedBlackTree.nullNode == orig(DataStructures.RedBlackTree.grand.right.right)
DataStructures.RedBlackTree.nullNode == orig(k2.left.right)
DataStructures.RedBlackTree.nullNode == orig(k2.right)
DataStructures.RedBlackTree.nullNode == orig(k2.right.left)
DataStructures.RedBlackTree.nullNode == orig(k2.right.right)
DataStructures.RedBlackTree.nullNode.element == DataStructures.RedBlackTree.current.element
DataStructures.RedBlackTree.nullNode.element == DataStructures.RedBlackTree.current.left.element
DataStructures.RedBlackTree.nullNode.element == DataStructures.RedBlackTree.current.right.element
DataStructures.RedBlackTree.nullNode.element == DataStructures.RedBlackTree.parent.left.element
DataStructures.RedBlackTree.nullNode.element == DataStructures.RedBlackTree.grand.left.element
DataStructures.RedBlackTree.nullNode.element == DataStructures.RedBlackTree.grand.right.element
DataStructures.RedBlackTree.nullNode.element == k2.left.element
DataStructures.RedBlackTree.nullNode.element == k2.right.element
DataStructures.RedBlackTree.nullNode.element == return.left.element
DataStructures.RedBlackTree.nullNode.element == orig(DataStructures.RedBlackTree.nullNode.element)
DataStructures.RedBlackTree.nullNode.element == orig(DataStructures.RedBlackTree.nullNode.left.element)
DataStructures.RedBlackTree.nullNode.element == orig(DataStructures.RedBlackTree.nullNode.right.element)
DataStructures.RedBlackTree.nullNode.element == orig(DataStructures.RedBlackTree.current.element)
DataStructures.RedBlackTree.nullNode.element == orig(DataStructures.RedBlackTree.current.left.element)
DataStructures.RedBlackTree.nullNode.element == orig(DataStructures.RedBlackTree.current.right.element)
DataStructures.RedBlackTree.nullNode.element == orig(DataStructures.RedBlackTree.parent.left.element)
DataStructures.RedBlackTree.nullNode.element == orig(DataStructures.RedBlackTree.parent.right.element)
DataStructures.RedBlackTree.nullNode.element == orig(DataStructures.RedBlackTree.grand.right.element)
DataStructures.RedBlackTree.nullNode.element == orig(k2.right.element)
DataStructures.RedBlackTree.nullNode.element.getClass().getName() == k2.element.getClass().getName()
DataStructures.RedBlackTree.nullNode.element.getClass().getName() == k2.left.element.getClass().getName()
DataStructures.RedBlackTree.nullNode.element.getClass().getName() == k2.right.element.getClass().getName()
DataStructures.RedBlackTree.nullNode.element.getClass().getName() == return.element.getClass().getName()
DataStructures.RedBlackTree.nullNode.element.getClass().getName() == return.left.element.getClass().getName()
DataStructures.RedBlackTree.nullNode.element.getClass().getName() == return.right.element.getClass().getName()
DataStructures.RedBlackTree.nullNode.element.getClass().getName() == orig(DataStructures.RedBlackTree.nullNode.element.getClass().getName())
DataStructures.RedBlackTree.nullNode.element.getClass().getName() == orig(DataStructures.RedBlackTree.nullNode.left.element.getClass().getName())
DataStructures.RedBlackTree.nullNode.element.getClass().getName() == orig(DataStructures.RedBlackTree.nullNode.right.element.getClass().getName())
DataStructures.RedBlackTree.nullNode.element.getClass().getName() == orig(DataStructures.RedBlackTree.current.element.getClass().getName())
DataStructures.RedBlackTree.nullNode.element.getClass().getName() == orig(DataStructures.RedBlackTree.current.left.element.getClass().getName())
DataStructures.RedBlackTree.nullNode.element.getClass().getName() == orig(DataStructures.RedBlackTree.current.right.element.getClass().getName())
DataStructures.RedBlackTree.nullNode.element.getClass().getName() == orig(DataStructures.RedBlackTree.parent.element.getClass().getName())
DataStructures.RedBlackTree.nullNode.element.getClass().getName() == orig(DataStructures.RedBlackTree.parent.left.element.getClass().getName())
DataStructures.RedBlackTree.nullNode.element.getClass().getName() == orig(DataStructures.RedBlackTree.parent.right.element.getClass().getName())
DataStructures.RedBlackTree.nullNode.element.getClass().getName() == orig(DataStructures.RedBlackTree.grand.element.getClass().getName())
DataStructures.RedBlackTree.nullNode.element.getClass().getName() == orig(DataStructures.RedBlackTree.grand.left.element.getClass().getName())
DataStructures.RedBlackTree.nullNode.element.getClass().getName() == orig(DataStructures.RedBlackTree.grand.right.element.getClass().getName())
DataStructures.RedBlackTree.nullNode.element.getClass().getName() == orig(DataStructures.RedBlackTree.great.element.getClass().getName())
DataStructures.RedBlackTree.nullNode.element.getClass().getName() == orig(DataStructures.RedBlackTree.great.left.element.getClass().getName())
DataStructures.RedBlackTree.nullNode.element.getClass().getName() == orig(DataStructures.RedBlackTree.great.right.element.getClass().getName())
DataStructures.RedBlackTree.nullNode.element.getClass().getName() == orig(k2.element.getClass().getName())
DataStructures.RedBlackTree.nullNode.element.getClass().getName() == orig(k2.left.element.getClass().getName())
DataStructures.RedBlackTree.nullNode.element.getClass().getName() == orig(k2.right.element.getClass().getName())
DataStructures.RedBlackTree.BLACK == DataStructures.RedBlackTree.current.left.color
DataStructures.RedBlackTree.BLACK == DataStructures.RedBlackTree.current.right.color
DataStructures.RedBlackTree.BLACK == DataStructures.RedBlackTree.grand.left.color
DataStructures.RedBlackTree.BLACK == DataStructures.RedBlackTree.grand.right.color
DataStructures.RedBlackTree.BLACK == k2.left.color
DataStructures.RedBlackTree.BLACK == k2.right.color
DataStructures.RedBlackTree.RED == DataStructures.RedBlackTree.current.color
DataStructures.RedBlackTree.RED == DataStructures.RedBlackTree.parent.left.color
DataStructures.RedBlackTree.RED == DataStructures.RedBlackTree.parent.right.color
DataStructures.RedBlackTree.RED == DataStructures.RedBlackTree.parent.color
DataStructures.RedBlackTree.RED == DataStructures.RedBlackTree.grand.color
DataStructures.RedBlackTree.RED == k2.color
DataStructures.RedBlackTree.RED == return.left.color
DataStructures.RedBlackTree.RED == return.right.color
DataStructures.RedBlackTree.RED == return.color
DataStructures.RedBlackTree.current == DataStructures.RedBlackTree.parent.left
DataStructures.RedBlackTree.current == return.left
DataStructures.RedBlackTree.current == orig(DataStructures.RedBlackTree.current)
DataStructures.RedBlackTree.current == orig(DataStructures.RedBlackTree.parent.left)
DataStructures.RedBlackTree.current == orig(DataStructures.RedBlackTree.grand.left.left)
DataStructures.RedBlackTree.current == orig(k2.left.left)
DataStructures.RedBlackTree.parent == return
DataStructures.RedBlackTree.parent == orig(DataStructures.RedBlackTree.parent)
DataStructures.RedBlackTree.parent == orig(DataStructures.RedBlackTree.grand.left)
DataStructures.RedBlackTree.parent == orig(k2.left)
DataStructures.RedBlackTree.parent.element == return.element
DataStructures.RedBlackTree.parent.element == orig(DataStructures.RedBlackTree.parent.element)
DataStructures.RedBlackTree.parent.element == orig(DataStructures.RedBlackTree.grand.left.element)
DataStructures.RedBlackTree.parent.element == orig(k2.left.element)
DataStructures.RedBlackTree.parent.right == DataStructures.RedBlackTree.grand
DataStructures.RedBlackTree.parent.right.element == DataStructures.RedBlackTree.grand.element
DataStructures.RedBlackTree.grand == return.right
DataStructures.RedBlackTree.grand == orig(DataStructures.RedBlackTree.grand)
DataStructures.RedBlackTree.grand == orig(k2)
DataStructures.RedBlackTree.grand.element == k2.element
DataStructures.RedBlackTree.grand.element == return.right.element
DataStructures.RedBlackTree.grand.element == orig(DataStructures.RedBlackTree.grand.element)
DataStructures.RedBlackTree.grand.element == orig(k2.element)
DataStructures.RedBlackTree.great == orig(DataStructures.RedBlackTree.great)
DataStructures.RedBlackTree.great.element == orig(DataStructures.RedBlackTree.great.element)
DataStructures.RedBlackTree.great.left == orig(DataStructures.RedBlackTree.great.left)
DataStructures.RedBlackTree.great.left.element == orig(DataStructures.RedBlackTree.great.left.element)
DataStructures.RedBlackTree.great.left.right == orig(DataStructures.RedBlackTree.great.left.right)
DataStructures.RedBlackTree.great.left.color == orig(DataStructures.RedBlackTree.great.left.color)
DataStructures.RedBlackTree.great.right == orig(DataStructures.RedBlackTree.great.right)
DataStructures.RedBlackTree.great.right.element == orig(DataStructures.RedBlackTree.great.right.element)
DataStructures.RedBlackTree.great.right.right == orig(DataStructures.RedBlackTree.great.right.right)
DataStructures.RedBlackTree.great.right.color == orig(DataStructures.RedBlackTree.great.right.color)
DataStructures.RedBlackTree.great.color == orig(DataStructures.RedBlackTree.great.color)
DataStructures.RedBlackTree.nullNode.element != null
DataStructures.RedBlackTree.current != null
DataStructures.RedBlackTree.parent != null
DataStructures.RedBlackTree.grand != null
DataStructures.RedBlackTree.great != null
===========================================================================
DataStructures.RedBlackTree.rotateWithRightChild(DataStructures.RedBlackNode):::ENTER
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.current.left.left
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.current.left.right
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.current.right.left
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.current.right.right
DataStructures.RedBlackTree.nullNode.element.getClass().getName() == k1.element.getClass().getName()
DataStructures.RedBlackTree.nullNode.element.getClass().getName() == k1.left.element.getClass().getName()
DataStructures.RedBlackTree.nullNode.element.getClass().getName() == k1.right.element.getClass().getName()
DataStructures.RedBlackTree.BLACK == DataStructures.RedBlackTree.current.left.color
DataStructures.RedBlackTree.BLACK == DataStructures.RedBlackTree.current.right.color
DataStructures.RedBlackTree.BLACK == DataStructures.RedBlackTree.parent.left.color
DataStructures.RedBlackTree.BLACK == DataStructures.RedBlackTree.grand.left.color
DataStructures.RedBlackTree.BLACK == k1.left.color
DataStructures.RedBlackTree.RED == DataStructures.RedBlackTree.current.color
DataStructures.RedBlackTree.RED == DataStructures.RedBlackTree.parent.right.color
DataStructures.RedBlackTree.RED == DataStructures.RedBlackTree.parent.color
DataStructures.RedBlackTree.RED == DataStructures.RedBlackTree.grand.right.color
DataStructures.RedBlackTree.RED == DataStructures.RedBlackTree.grand.color
DataStructures.RedBlackTree.RED == k1.right.color
DataStructures.RedBlackTree.RED == k1.color
DataStructures.RedBlackTree.current == DataStructures.RedBlackTree.parent.right
DataStructures.RedBlackTree.current == DataStructures.RedBlackTree.grand.right.right
DataStructures.RedBlackTree.current == k1.right.right
DataStructures.RedBlackTree.current.element == DataStructures.RedBlackTree.parent.right.element
DataStructures.RedBlackTree.current.left == DataStructures.RedBlackTree.parent.right.left
DataStructures.RedBlackTree.current.right == DataStructures.RedBlackTree.parent.right.right
DataStructures.RedBlackTree.parent == DataStructures.RedBlackTree.grand.right
DataStructures.RedBlackTree.parent == k1.right
DataStructures.RedBlackTree.parent.element == DataStructures.RedBlackTree.grand.right.element
DataStructures.RedBlackTree.parent.element == k1.right.element
DataStructures.RedBlackTree.parent.left == DataStructures.RedBlackTree.grand.right.left
DataStructures.RedBlackTree.parent.left == k1.right.left
DataStructures.RedBlackTree.grand == k1
DataStructures.RedBlackTree.grand.element == k1.element
DataStructures.RedBlackTree.grand.left == k1.left
DataStructures.RedBlackTree.grand.left.element == k1.left.element
DataStructures.RedBlackTree.grand.left.left == k1.left.left
DataStructures.RedBlackTree.grand.left.right == k1.left.right
DataStructures.RedBlackTree.nullNode.element != null
DataStructures.RedBlackTree.current != null
DataStructures.RedBlackTree.parent != null
DataStructures.RedBlackTree.grand != null
DataStructures.RedBlackTree.great != null
===========================================================================
DataStructures.RedBlackTree.rotateWithRightChild(DataStructures.RedBlackNode):::EXIT
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.current.left.left
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.current.left.right
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.current.right.left
DataStructures.RedBlackTree.nullNode == DataStructures.RedBlackTree.current.right.right
DataStructures.RedBlackTree.nullNode == orig(DataStructures.RedBlackTree.nullNode)
DataStructures.RedBlackTree.nullNode == orig(DataStructures.RedBlackTree.nullNode.left)
DataStructures.RedBlackTree.nullNode == orig(DataStructures.RedBlackTree.nullNode.left.left)
DataStructures.RedBlackTree.nullNode == orig(DataStructures.RedBlackTree.nullNode.left.right)
DataStructures.RedBlackTree.nullNode == orig(DataStructures.RedBlackTree.nullNode.right)
DataStructures.RedBlackTree.nullNode == orig(DataStructures.RedBlackTree.nullNode.right.left)
DataStructures.RedBlackTree.nullNode == orig(DataStructures.RedBlackTree.nullNode.right.right)
DataStructures.RedBlackTree.nullNode == orig(DataStructures.RedBlackTree.current.left.left)
DataStructures.RedBlackTree.nullNode == orig(DataStructures.RedBlackTree.current.left.right)
DataStructures.RedBlackTree.nullNode == orig(DataStructures.RedBlackTree.current.right.left)
DataStructures.RedBlackTree.nullNode == orig(DataStructures.RedBlackTree.current.right.right)
DataStructures.RedBlackTree.nullNode.element == orig(DataStructures.RedBlackTree.nullNode.element)
DataStructures.RedBlackTree.nullNode.element == orig(DataStructures.RedBlackTree.nullNode.left.element)
DataStructures.RedBlackTree.nullNode.element == orig(DataStructures.RedBlackTree.nullNode.right.element)
DataStructures.RedBlackTree.nullNode.element.getClass().getName() == k1.element.getClass().getName()
DataStructures.RedBlackTree.nullNode.element.getClass().getName() == k1.left.element.getClass().getName()
DataStructures.RedBlackTree.nullNode.element.getClass().getName() == k1.right.element.getClass().getName()
DataStructures.RedBlackTree.nullNode.element.getClass().getName() == return.element.getClass().getName()
DataStructures.RedBlackTree.nullNode.element.getClass().getName() == return.left.element.getClass().getName()
DataStructures.RedBlackTree.nullNode.element.getClass().getName() == return.right.element.getClass().getName()
DataStructures.RedBlackTree.nullNode.element.getClass().getName() == orig(DataStructures.RedBlackTree.nullNode.element.getClass().getName())
DataStructures.RedBlackTree.nullNode.element.getClass().getName() == orig(DataStructures.RedBlackTree.nullNode.left.element.getClass().getName())
DataStructures.RedBlackTree.nullNode.element.getClass().getName() == orig(DataStructures.RedBlackTree.nullNode.right.element.getClass().getName())
DataStructures.RedBlackTree.nullNode.element.getClass().getName() == orig(DataStructures.RedBlackTree.current.element.getClass().getName())
DataStructures.RedBlackTree.nullNode.element.getClass().getName() == orig(DataStructures.RedBlackTree.current.left.element.getClass().getName())
DataStructures.RedBlackTree.nullNode.element.getClass().getName() == orig(DataStructures.RedBlackTree.current.right.element.getClass().getName())
DataStructures.RedBlackTree.nullNode.element.getClass().getName() == orig(DataStructures.RedBlackTree.parent.element.getClass().getName())
DataStructures.RedBlackTree.nullNode.element.getClass().getName() == orig(DataStructures.RedBlackTree.parent.left.element.getClass().getName())
DataStructures.RedBlackTree.nullNode.element.getClass().getName() == orig(DataStructures.RedBlackTree.parent.right.element.getClass().getName())
DataStructures.RedBlackTree.nullNode.element.getClass().getName() == orig(DataStructures.RedBlackTree.grand.element.getClass().getName())
DataStructures.RedBlackTree.nullNode.element.getClass().getName() == orig(DataStructures.RedBlackTree.grand.left.element.getClass().getName())
DataStructures.RedBlackTree.nullNode.element.getClass().getName() == orig(DataStructures.RedBlackTree.grand.right.element.getClass().getName())
DataStructures.RedBlackTree.nullNode.element.getClass().getName() == orig(DataStructures.RedBlackTree.great.element.getClass().getName())
DataStructures.RedBlackTree.nullNode.element.getClass().getName() == orig(DataStructures.RedBlackTree.great.left.element.getClass().getName())
DataStructures.RedBlackTree.nullNode.element.getClass().getName() == orig(DataStructures.RedBlackTree.great.right.element.getClass().getName())
DataStructures.RedBlackTree.nullNode.element.getClass().getName() == orig(k1.element.getClass().getName())
DataStructures.RedBlackTree.nullNode.element.getClass().getName() == orig(k1.left.element.getClass().getName())
DataStructures.RedBlackTree.nullNode.element.getClass().getName() == orig(k1.right.element.getClass().getName())
DataStructures.RedBlackTree.BLACK == DataStructures.RedBlackTree.current.left.color
DataStructures.RedBlackTree.BLACK == DataStructures.RedBlackTree.current.right.color
DataStructures.RedBlackTree.BLACK == DataStructures.RedBlackTree.grand.left.color
DataStructures.RedBlackTree.BLACK == DataStructures.RedBlackTree.grand.right.color
DataStructures.RedBlackTree.BLACK == k1.left.color
DataStructures.RedBlackTree.BLACK == k1.right.color
DataStructures.RedBlackTree.RED == DataStructures.RedBlackTree.current.color
DataStructures.RedBlackTree.RED == DataStructures.RedBlackTree.parent.left.color
DataStructures.RedBlackTree.RED == DataStructures.RedBlackTree.parent.right.color
DataStructures.RedBlackTree.RED == DataStructures.RedBlackTree.parent.color
DataStructures.RedBlackTree.RED == DataStructures.RedBlackTree.grand.color
DataStructures.RedBlackTree.RED == k1.color
DataStructures.RedBlackTree.RED == return.left.color
DataStructures.RedBlackTree.RED == return.right.color
DataStructures.RedBlackTree.RED == return.color
DataStructures.RedBlackTree.current == DataStructures.RedBlackTree.parent.right
DataStructures.RedBlackTree.current == return.right
DataStructures.RedBlackTree.current == orig(DataStructures.RedBlackTree.current)
DataStructures.RedBlackTree.current == orig(DataStructures.RedBlackTree.parent.right)
DataStructures.RedBlackTree.current == orig(DataStructures.RedBlackTree.grand.right.right)
DataStructures.RedBlackTree.current == orig(k1.right.right)
DataStructures.RedBlackTree.current.element == DataStructures.RedBlackTree.parent.right.element
DataStructures.RedBlackTree.current.element == return.right.element
DataStructures.RedBlackTree.current.element == orig(DataStructures.RedBlackTree.current.element)
DataStructures.RedBlackTree.current.element == orig(DataStructures.RedBlackTree.parent.right.element)
DataStructures.RedBlackTree.current.left == DataStructures.RedBlackTree.parent.right.left
DataStructures.RedBlackTree.current.left == return.right.left
DataStructures.RedBlackTree.current.left == orig(DataStructures.RedBlackTree.current.left)
DataStructures.RedBlackTree.current.left == orig(DataStructures.RedBlackTree.parent.right.left)
DataStructures.RedBlackTree.current.left.element == orig(DataStructures.RedBlackTree.current.left.element)
DataStructures.RedBlackTree.current.right == DataStructures.RedBlackTree.parent.right.right
DataStructures.RedBlackTree.current.right == return.right.right
DataStructures.RedBlackTree.current.right == orig(DataStructures.RedBlackTree.current.right)
DataStructures.RedBlackTree.current.right == orig(DataStructures.RedBlackTree.parent.right.right)
DataStructures.RedBlackTree.current.right.element == orig(DataStructures.RedBlackTree.current.right.element)
DataStructures.RedBlackTree.parent == return
DataStructures.RedBlackTree.parent == orig(DataStructures.RedBlackTree.parent)
DataStructures.RedBlackTree.parent == orig(DataStructures.RedBlackTree.grand.right)
DataStructures.RedBlackTree.parent == orig(k1.right)
DataStructures.RedBlackTree.parent.element == return.element
DataStructures.RedBlackTree.parent.element == orig(DataStructures.RedBlackTree.parent.element)
DataStructures.RedBlackTree.parent.element == orig(DataStructures.RedBlackTree.grand.right.element)
DataStructures.RedBlackTree.parent.element == orig(k1.right.element)
DataStructures.RedBlackTree.parent.left == DataStructures.RedBlackTree.grand
DataStructures.RedBlackTree.parent.left.element == DataStructures.RedBlackTree.grand.element
DataStructures.RedBlackTree.parent.left.left == DataStructures.RedBlackTree.grand.left
DataStructures.RedBlackTree.parent.left.right == DataStructures.RedBlackTree.grand.right
DataStructures.RedBlackTree.grand == return.left
DataStructures.RedBlackTree.grand == orig(DataStructures.RedBlackTree.grand)
DataStructures.RedBlackTree.grand == orig(k1)
DataStructures.RedBlackTree.grand.element == k1.element
DataStructures.RedBlackTree.grand.element == return.left.element
DataStructures.RedBlackTree.grand.element == orig(DataStructures.RedBlackTree.grand.element)
DataStructures.RedBlackTree.grand.element == orig(k1.element)
DataStructures.RedBlackTree.grand.left == k1.left
DataStructures.RedBlackTree.grand.left == return.left.left
DataStructures.RedBlackTree.grand.left == orig(DataStructures.RedBlackTree.grand.left)
DataStructures.RedBlackTree.grand.left == orig(k1.left)
DataStructures.RedBlackTree.grand.left.element == k1.left.element
DataStructures.RedBlackTree.grand.left.element == orig(DataStructures.RedBlackTree.grand.left.element)
DataStructures.RedBlackTree.grand.left.element == orig(k1.left.element)
DataStructures.RedBlackTree.grand.left.left == k1.left.left
DataStructures.RedBlackTree.grand.left.left == orig(DataStructures.RedBlackTree.grand.left.left)
DataStructures.RedBlackTree.grand.left.left == orig(k1.left.left)
DataStructures.RedBlackTree.grand.left.right == k1.left.right
DataStructures.RedBlackTree.grand.left.right == orig(DataStructures.RedBlackTree.grand.left.right)
DataStructures.RedBlackTree.grand.left.right == orig(k1.left.right)
DataStructures.RedBlackTree.grand.right == k1.right
DataStructures.RedBlackTree.grand.right == return.left.right
DataStructures.RedBlackTree.grand.right == orig(DataStructures.RedBlackTree.parent.left)
DataStructures.RedBlackTree.grand.right == orig(DataStructures.RedBlackTree.grand.right.left)
DataStructures.RedBlackTree.grand.right == orig(k1.right.left)
DataStructures.RedBlackTree.grand.right.element == k1.right.element
DataStructures.RedBlackTree.grand.right.element == orig(DataStructures.RedBlackTree.parent.left.element)
DataStructures.RedBlackTree.grand.right.left == k1.right.left
DataStructures.RedBlackTree.grand.right.left == orig(DataStructures.RedBlackTree.parent.left.left)
DataStructures.RedBlackTree.grand.right.right == k1.right.right
DataStructures.RedBlackTree.grand.right.right == orig(DataStructures.RedBlackTree.parent.left.right)
DataStructures.RedBlackTree.great == orig(DataStructures.RedBlackTree.great)
DataStructures.RedBlackTree.great.element == orig(DataStructures.RedBlackTree.great.element)
DataStructures.RedBlackTree.great.left == orig(DataStructures.RedBlackTree.great.left)
DataStructures.RedBlackTree.great.left.element == orig(DataStructures.RedBlackTree.great.left.element)
DataStructures.RedBlackTree.great.left.left == orig(DataStructures.RedBlackTree.great.left.left)
DataStructures.RedBlackTree.great.left.color == orig(DataStructures.RedBlackTree.great.left.color)
DataStructures.RedBlackTree.great.right == orig(DataStructures.RedBlackTree.great.right)
DataStructures.RedBlackTree.great.right.element == orig(DataStructures.RedBlackTree.great.right.element)
DataStructures.RedBlackTree.great.right.left == orig(DataStructures.RedBlackTree.great.right.left)
DataStructures.RedBlackTree.great.right.color == orig(DataStructures.RedBlackTree.great.right.color)
DataStructures.RedBlackTree.great.color == orig(DataStructures.RedBlackTree.great.color)
DataStructures.RedBlackTree.nullNode.element != null
DataStructures.RedBlackTree.current != null
DataStructures.RedBlackTree.parent != null
DataStructures.RedBlackTree.grand != null
DataStructures.RedBlackTree.great != null
