===========================================================================
..InfoTbl():::ENTER
::f == f
::f[] == f[]
::r == r
::c == c
::f has only one value
::f[] elements >= 0
f has only one value
f != null
pdf has only one value
pdf != null
pdf[] elements >= 2
pdf[i] > i
size(::f[]) == 1000
size(pdf[]) == 1
::f[] elements >= size(pdf[])-1
size(pdf[])-1 in ::f[]
::r < size(::f[])-1
::r >= size(pdf[])-1
::c < size(::f[])-1
::c != size(pdf[])
::c >= size(pdf[])-1
pdf[] elements < size(::f[])-1
pdf[] elements > size(pdf[])
===========================================================================
..InfoTbl():::EXIT
::line == orig(::line)
::f == orig(::f)
::f == orig(f)
::f[] == f[]
::f[] == orig(::f[])
::f[] == orig(f[])
::r == orig(::r)
::r == orig(r)
::c == orig(::c)
::c == orig(c)
::f has only one value
::f[] elements >= 0
pdf[] elements >= 2
pdf[i] > i
size(::f[]) == 1000
::f[] elements >= size(pdf[])-1
size(pdf[])-1 in ::f[]
::f[] elements >= orig(size(pdf[]))-1
orig(size(pdf[]))-1 in ::f[]
::r < size(::f[])-1
::r >= size(pdf[])-1
::r >= orig(size(pdf[]))-1
::c < size(::f[])-1
::c >= size(pdf[])-1
::c != orig(size(pdf[]))
::c >= orig(size(pdf[]))-1
pdf[] elements < size(::f[])-1
pdf[] elements > orig(size(pdf[]))
orig(pdf[]) elements < size(::f[])-1
===========================================================================
..LGamma():::ENTER
::cof has only one value
::cof[] == [76.18009173, -86.50532032999999, 24.014098219999997, -1.231739516, 0.00120858003, -5.363819999999999E-6]
::f has only one value
::f[] elements >= 0
::r >= 2
x >= 1.0
size(::cof[]) == 6
size(::f[]) == 1000
(::r >> ::c == 0)
(::r >> size(::cof[]) == 0)
::r != size(::cof[])
(::r >> size(::cof[])-1 == 0)
::r < size(::f[])-1
(::c >> size(::cof[]) == 0)
(::c >> size(::cof[])-1 == 0)
::c < size(::f[])-1
===========================================================================
..LGamma():::EXIT
::cof == orig(::cof)
::cof[] == orig(::cof[])
::line == orig(::line)
::f == orig(::f)
::f[] == orig(::f[])
::r == orig(::r)
::c == orig(::c)
::cof has only one value
::cof[] == [76.18009173, -86.50532032999999, 24.014098219999997, -1.231739516, 0.00120858003, -5.363819999999999E-6]
::f has only one value
::f[] elements >= 0
::r >= 2
size(::cof[]) == 6
size(::f[]) == 1000
(::r >> ::c == 0)
(::r >> size(::cof[]) == 0)
::r != size(::cof[])
(::r >> size(::cof[])-1 == 0)
::r < size(::f[])-1
(::c >> size(::cof[]) == 0)
(::c >> size(::cof[])-1 == 0)
::c < size(::f[])-1
return != orig(x)
===========================================================================
..QChiSq():::ENTER
::f has only one value
::f[] elements >= 0
::r >= 2
chisq >= 0.0
df >= 2
size(::f[]) == 1000
(::r >> ::c == 0)
::r < size(::f[])-1
::c < size(::f[])-1
df < size(::f[])-1
===========================================================================
..QChiSq():::EXIT
::line == orig(::line)
::f == orig(::f)
::f[] == orig(::f[])
::r == orig(::r)
::c == orig(::c)
::f has only one value
::f[] elements >= 0
::r >= 2
size(::f[]) == 1000
(::r >> ::c == 0)
::r < size(::f[])-1
::c < size(::f[])-1
return != orig(chisq)
orig(df) < size(::f[])-1
===========================================================================
..QGamma():::ENTER
::f has only one value
::f[] elements >= 0
::r >= 2
a >= 1.0
x >= 0.0
size(::f[]) == 1000
(::r >> ::c == 0)
::r < size(::f[])-1
::c < size(::f[])-1
a != x
===========================================================================
..QGamma():::EXIT
::line == orig(::line)
::f == orig(::f)
::f[] == orig(::f[])
::r == orig(::r)
::c == orig(::c)
::f has only one value
::f[] elements >= 0
::r >= 2
size(::f[]) == 1000
(::r >> ::c == 0)
::r < size(::f[])-1
::c < size(::f[])-1
return <= orig(a)
return != orig(x)
===========================================================================
..main():::ENTER
::r == ::c
::r == size(argv[])-1
argc == size(argv[])
::line == ""
::f has only one value
::f[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
::f[] elements == 0
argc == 1
argv has only one value
argv[] == [./tot_info]
argv[] elements == "./tot_info"
size(::f[]) == 1000
::f[] elements == ::r
::r in ::f[]
===========================================================================
..main():::EXIT
::f == orig(::f)
::r == ::c
return == orig(argc)
return == orig(size(argv[]))
orig(::r) == size(argv[])-1
size(::f[]) == orig(size(::f[]))
::line == "44 44\n"
::f has only one value
::f[] == [1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 2, 1, 1, 1, 0, 2, 3, 0, 3, 1, 1, 4, 0, 2, 3, 4, 1, 3, 2, 3, 4, 3, 4, 3, 4, 2, 1, 4, 3, 2, 4, 3, 0, 0, 4, 4, 0, 1, 0, 0, 2, 3, 2, 0, 5, 8, 8, 4, 10, 4, 12, 10, 7, 5, 0, 10, 11, 5, 3, 14, 3, 3, 4, 0, 2, 2, 9, 6, 1, 0, 4, 0, 11, 9, 10, 3, 0, 4, 3, 9, 11, 2, 10, 9, 6, 12, 2, 1, 1, 8, 13, 8, 10, 9, 3, 5, 12, 14, 13, 11, 4, 7, 3, 4, 14, 6, 0, 5, 0, 11, 5, 20, 76, 60, 55, 43, 62, 67, 3, 25, 10, 73, 56, 17, 52, 10, 51, 71, 37, 45, 60, 2, 21, 54, 45, 2, 13, 26, 46, 55, 28, 7, 44, 73, 57, 76, 76, 34, 48, 66, 42, 48, 18, 21, 0, 43, 43, 20, 8, 35, 15, 30, 46, 44, 38, 46, 2, 3, 2, 15, 12, 72, 26, 71, 51, 14, 32, 76, 9, 48, 59, 71, 58, 57, 67, 8, 10, 28, 17, 25, 10, 54, 48, 12, 26, 37, 2, 31, 46, 4, 44, 23, 22, 14, 51, 33, 33, 54, 20, 39, 59, 17, 25, 1, 31, 71, 4, 13, 38, 52, 55, 14, 32, 61, 55, 27, 3, 71, 58, 62, 22, 55, 37, 65, 72, 5, 33, 46, 62, 58, 9, 62, 62, 18, 9, 55, 25, 24, 41, 35, 33, 37, 50, 38, 28, 5, 45, 41, 5, 23, 25, 4, 26, 3, 27, 48, 26, 44, 50, 37, 47, 29, 47, 14, 10, 19, 9, 28, 15, 24, 30, 25, 16, 23, 30, 19, 17, 14, 10, 49, 31, 47, 29, 47, 41, 5, 20, 9, 45, 32, 6, 20, 42, 41, 7, 4, 11, 29, 36, 12, 32, 40, 12, 38, 27, 23, 0, 42, 23, 29, 25, 41, 18, 12, 46, 42, 1, 23, 15, 0, 39, 15, 4, 36, 10, 27, 14, 10, 24, 42, 49, 48, 2, 36, 9, 48, 10, 42, 9, 3, 30, 45, 42, 33, 3, 39, 22, 21, 47, 33, 25, 7, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
::f[] elements >= 0
::r == 44
argv[] == [./tot_info]
argv[] elements == "./tot_info"
return == 1
size(::f[]) == 1000
orig(::line) is a substring of ::line
::r in ::f[]
return in ::f[]
::f[] is a superset of orig(::f[])
orig(::r) in ::f[]
===========================================================================
tot_info.c.gcf():::ENTER
::f has only one value
::f[] elements >= 0
::r >= 2
a >= 1.0
size(::f[]) == 1000
(::r >> ::c == 0)
::r < size(::f[])-1
::c < size(::f[])-1
a < x
===========================================================================
tot_info.c.gcf():::EXIT
::line == orig(::line)
::f == orig(::f)
::f[] == orig(::f[])
::r == orig(::r)
::c == orig(::c)
::f has only one value
::f[] elements >= 0
::r >= 2
size(::f[]) == 1000
(::r >> ::c == 0)
::r < size(::f[])-1
::c < size(::f[])-1
return < orig(a)
return < orig(x)
===========================================================================
tot_info.c.gser():::ENTER
::f has only one value
::f[] elements >= 0
a >= 1.0
x >= 0.0
size(::f[]) == 1000
::r in ::f[]
::c in ::f[]
(::c >> ::r == 0)
(::r >> ::c == 0)
(::r & size(::f[])) == 0
::r < size(::f[])-1
::r is a bitwise subset of size(::f[])-1
::c < size(::f[])-1
a != x
===========================================================================
tot_info.c.gser():::EXIT
::line == orig(::line)
::f == orig(::f)
::f[] == orig(::f[])
::r == orig(::r)
::c == orig(::c)
::f has only one value
::f[] elements >= 0
size(::f[]) == 1000
::r in ::f[]
::c in ::f[]
(::c >> ::r == 0)
(::r >> ::c == 0)
(::r & size(::f[])) == 0
::r < size(::f[])-1
::r is a bitwise subset of size(::f[])-1
::c < size(::f[])-1
return < orig(a)
(orig(x) == 0) ==> (return == 0)
(return == 0) ==> (orig(x) == 0)
return <= orig(x)
