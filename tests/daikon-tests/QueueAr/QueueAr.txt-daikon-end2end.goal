===========================================================================
DataStructures.QueueAr:::OBJECT
this.theArray != null
this.theArray.getClass().getName() == java.lang.Object[].class
this.currentSize >= 0
this.front >= 0
this.back >= 0
this.currentSize <= size(this.theArray[])
(size(this.theArray[])-1 == 0) ==> (this.front == 0)
this.front <= size(this.theArray[])-1
(size(this.theArray[])-1 == 0) ==> (this.back == 0)
this.back <= size(this.theArray[])-1
===========================================================================
DataStructures.QueueAr.QueueAr(int):::ENTER
===========================================================================
DataStructures.QueueAr.QueueAr(int):::EXIT
this.currentSize == this.front
this.back == size(this.theArray[])-1
orig(capacity) == size(this.theArray[])
this.theArray[this.currentSize] == this.theArray[this.back]
this.theArray[this.currentSize] == this.theArray[orig(capacity)-1]
this.theArray[] elements == null
this.theArray[].getClass().getName() elements == null
this.currentSize == 0
this.theArray[0..this.currentSize] == [null]
this.theArray[orig(capacity)..] == []
this.theArray[] elements == this.theArray[this.currentSize]
this.currentSize <= this.back
===========================================================================
DataStructures.QueueAr.dequeue():::ENTER
(this.currentSize == 1)  <==>  (this.front == this.back)
(this.currentSize == 1)  ==>  ((this.back == 0) ==> (size(this.theArray[])-1 == 0))
(this.currentSize == 1)  ==>  ((this.front == 0) ==> (size(this.theArray[])-1 == 0))
(this.currentSize == 1)  ==>  (this.theArray[0..this.back-1] elements == null)
(this.currentSize == 1)  ==>  (this.theArray[0..this.back-1] elements == this.theArray[this.currentSize-1])
(this.currentSize == 1)  ==>  (this.theArray[0..this.currentSize-1] elements == this.theArray[this.currentSize-1])
(this.currentSize == 1)  ==>  (this.theArray[0..this.front-1] elements == null)
(this.currentSize == 1)  ==>  (this.theArray[0..this.front-1] elements == this.theArray[this.currentSize-1])
(this.currentSize == 1)  ==>  (this.theArray[this.back+1..] elements == null)
(this.currentSize == 1)  ==>  (this.theArray[this.back+1..] elements == this.theArray[this.currentSize-1])
(this.currentSize == 1)  ==>  (this.theArray[this.front+1..] elements == null)
(this.currentSize == 1)  ==>  (this.theArray[this.front+1..] elements == this.theArray[this.currentSize-1])
(this.currentSize >= 2)  <==>  (this.front != this.back)
this.theArray[this.front] != null
this.theArray[this.back] != null
===========================================================================
DataStructures.QueueAr.dequeue():::ENTER;condition="currentSize == 0"
this.front == this.back
this.currentSize == 1
this.theArray[this.front+1..] elements == null
this.theArray[0..this.front-1] elements == null
(this.front == 0) ==> (size(this.theArray[])-1 == 0)
this.theArray[0..this.currentSize-1] elements == this.theArray[this.currentSize-1]
this.theArray[this.front+1..] elements == this.theArray[this.currentSize-1]
this.theArray[0..this.front-1] elements == this.theArray[this.currentSize-1]
===========================================================================
DataStructures.QueueAr.dequeue():::ENTER;condition="not(currentSize == 0)"
this.currentSize >= 2
this.front != this.back
===========================================================================
DataStructures.QueueAr.dequeue():::ENTER;condition="not(currentSize == theArray.length)"
this.theArray != null
this.theArray.getClass().getName() == java.lang.Object[].class
this.front >= 0
this.back >= 0
this.theArray[this.front] != null
this.theArray[this.back] != null
this.currentSize <= size(this.theArray[])
(size(this.theArray[])-1 == 0) ==> (this.front == 0)
this.front <= size(this.theArray[])-1
(size(this.theArray[])-1 == 0) ==> (this.back == 0)
this.back <= size(this.theArray[])-1
===========================================================================
DataStructures.QueueAr.dequeue():::ENTER;condition="isEmpty()"
this.front == this.back
this.theArray.getClass().getName() == java.lang.Object[].class
this.currentSize == 1
this.theArray[this.front+1..] elements == null
this.theArray[0..this.front-1] elements == null
this.currentSize <= size(this.theArray[])
(size(this.theArray[])-1 == 0) ==> (this.front == 0)
(this.front == 0) ==> (size(this.theArray[])-1 == 0)
this.front <= size(this.theArray[])-1
this.theArray[0..this.currentSize-1] elements == this.theArray[this.currentSize-1]
this.theArray[this.front+1..] elements == this.theArray[this.currentSize-1]
this.theArray[0..this.front-1] elements == this.theArray[this.currentSize-1]
===========================================================================
DataStructures.QueueAr.dequeue():::ENTER;condition="not(isEmpty())"
this.theArray != null
this.theArray.getClass().getName() == java.lang.Object[].class
this.currentSize >= 2
this.front >= 0
this.back >= 0
this.theArray[this.front] != null
this.theArray[this.back] != null
this.currentSize <= size(this.theArray[])
this.front != this.back
this.front <= size(this.theArray[])-1
this.back <= size(this.theArray[])-1
===========================================================================
DataStructures.QueueAr.dequeue():::EXIT93
(this.currentSize < size(this.theArray[])-1)  <==>  (orig(this.currentSize) <= size(this.theArray[])-1)
(this.currentSize < size(this.theArray[])-1)  ==>  (this.front != orig(this.front))
(this.currentSize < size(this.theArray[])-1)  ==>  (this.theArray[] is a subset of orig(this.theArray[]))
(this.currentSize < size(this.theArray[])-1)  ==>  (this.theArray[this.back+1..] is a subset of orig(this.theArray[this.back+1..]))
(this.currentSize < size(this.theArray[])-1)  ==>  (this.theArray[this.back+1..] is a subset of orig(this.theArray[this.back..]))
(this.currentSize < size(this.theArray[])-1)  ==>  (this.theArray[this.back] in orig(this.theArray[0..this.back]))
(this.currentSize < size(this.theArray[])-1)  ==>  (this.theArray[this.currentSize] in orig(this.theArray[0..post(this.currentSize)]))
(this.currentSize < size(this.theArray[])-1)  ==>  (this.theArray[this.front+1..] is a subset of orig(this.theArray[post(this.front)..]))
(this.currentSize < size(this.theArray[])-1)  ==>  (this.theArray[this.front..] is a subset of orig(this.theArray[post(this.front)..]))
(this.currentSize < size(this.theArray[])-1)  ==>  (this.theArray[this.front] == orig(this.theArray[post(this.front)]))
(this.currentSize == 0)  <==>  (orig(this.currentSize) == 1)
(this.currentSize == 0)  <==>  (this.back == orig(this.front))
(this.currentSize == 0)  ==>  ((orig(this.front) == 0) ==> (size(this.theArray[])-1 == 0))
(this.currentSize == 0)  ==>  ((orig(this.front) == 0) ==> (this.front == 0))
(this.currentSize == 0)  ==>  ((this.back == 0) ==> (size(this.theArray[])-1 == 0))
(this.currentSize == 0)  ==>  ((this.back == 0) ==> (this.front == 0))
(this.currentSize == 0)  ==>  (orig(this.theArray[0..post(this.currentSize)-1]) == [])
(this.currentSize == 0)  ==>  (orig(this.theArray[0..post(this.currentSize)]) elements == orig(this.theArray[post(this.currentSize)]))
(this.currentSize == 0)  ==>  (orig(this.theArray[0..post(this.currentSize)]) elements == orig(this.theArray[post(this.front)]))
(this.currentSize == 0)  ==>  (orig(this.theArray[post(this.currentSize)]) == orig(this.theArray[post(this.front)]))
(this.currentSize == 0)  ==>  (this.currentSize <= orig(this.front))
(this.currentSize == 0)  ==>  (this.currentSize <= this.back)
(this.currentSize == 0)  ==>  (this.currentSize <= this.front)
(this.currentSize == 0)  ==>  (this.currentSize is a pointer)
(this.currentSize == 0)  ==>  (this.front != orig(this.currentSize))
(this.currentSize == 0)  ==>  (this.theArray[0..this.back-1] == orig(this.theArray[0..this.back-1]))
(this.currentSize == 0)  ==>  (this.theArray[0..this.currentSize-1] == [])
(this.currentSize == 0)  ==>  (this.theArray[0..this.currentSize] == [null])
(this.currentSize == 0)  ==>  (this.theArray[0..this.front-1] is a subsequence of orig(this.theArray[post(this.front)..]))
(this.currentSize == 0)  ==>  (this.theArray[0..this.front-1] is a subsequence of orig(this.theArray[this.back..]))
(this.currentSize == 0)  ==>  (this.theArray[0..this.front-1] is a subsequence of orig(this.theArray[this.currentSize..]))
(this.currentSize == 0)  ==>  (this.theArray[0..this.front-1] is a subsequence of orig(this.theArray[this.front..]))
(this.currentSize == 0)  ==>  (this.theArray[0..this.front-1] is a subset of orig(this.theArray[0..post(this.currentSize)]))
(this.currentSize == 0)  ==>  (this.theArray[0..this.front-1] is a subset of orig(this.theArray[0..post(this.front)-1]))
(this.currentSize == 0)  ==>  (this.theArray[0..this.front-1] is a subset of orig(this.theArray[0..post(this.front)]))
(this.currentSize == 0)  ==>  (this.theArray[0..this.front-1] is a subset of orig(this.theArray[0..this.back]))
(this.currentSize == 0)  ==>  (this.theArray[0..this.front-1] is a subset of orig(this.theArray[0..this.front]))
(this.currentSize == 0)  ==>  (this.theArray[0..this.front-1] is a subset of orig(this.theArray[post(this.front)+1..]))
(this.currentSize == 0)  ==>  (this.theArray[0..this.front-1] is a subset of orig(this.theArray[post(this.front)..]))
(this.currentSize == 0)  ==>  (this.theArray[0..this.front-1] is a subset of orig(this.theArray[this.back..]))
(this.currentSize == 0)  ==>  (this.theArray[0..this.front-1] is a subset of orig(this.theArray[this.currentSize..]))
(this.currentSize == 0)  ==>  (this.theArray[0..this.front-1] is a subset of orig(this.theArray[this.front..]))
(this.currentSize == 0)  ==>  (this.theArray[] elements == null)
(this.currentSize == 0)  ==>  (this.theArray[] elements == this.theArray[orig(this.front)])
(this.currentSize == 0)  ==>  (this.theArray[] elements == this.theArray[this.back])
(this.currentSize == 0)  ==>  (this.theArray[] elements == this.theArray[this.currentSize])
(this.currentSize == 0)  ==>  (this.theArray[] elements == this.theArray[this.front])
(this.currentSize == 0)  ==>  (this.theArray[].getClass().getName() elements == null)
(this.currentSize == 0)  ==>  (this.theArray[this.back+1..] == orig(this.theArray[this.back+1..]))
(this.currentSize == 0)  ==>  (this.theArray[this.currentSize+1..] elements == orig(this.theArray[post(this.currentSize)]))
(this.currentSize == 0)  ==>  (this.theArray[this.currentSize+1..] elements == orig(this.theArray[post(this.front)]))
(this.currentSize == 0)  ==>  (this.theArray[this.currentSize+1..] is a subset of orig(this.theArray[0..post(this.currentSize)]))
(this.currentSize == 0)  ==>  (this.theArray[this.currentSize+1..] is a subset of orig(this.theArray[0..post(this.front)]))
(this.currentSize == 0)  ==>  (this.theArray[this.currentSize+1..] is a subset of orig(this.theArray[0..this.back]))
(this.currentSize == 0)  ==>  (this.theArray[this.currentSize+1..] is a subset of orig(this.theArray[0..this.front]))
(this.currentSize == 0)  ==>  (this.theArray[this.currentSize+1..] is a subset of orig(this.theArray[post(this.front)..]))
(this.currentSize == 0)  ==>  (this.theArray[this.currentSize..] elements == null)
(this.currentSize == 0)  ==>  (this.theArray[this.currentSize..] elements == this.theArray[orig(this.front)])
(this.currentSize == 0)  ==>  (this.theArray[this.currentSize..] elements == this.theArray[this.back])
(this.currentSize == 0)  ==>  (this.theArray[this.currentSize..] elements == this.theArray[this.currentSize])
(this.currentSize == 0)  ==>  (this.theArray[this.currentSize..] elements == this.theArray[this.front])
(this.currentSize == 0)  ==>  (this.theArray[this.currentSize] == this.theArray[orig(this.front)])
(this.currentSize == 0)  ==>  (this.theArray[this.currentSize] == this.theArray[this.back])
(this.currentSize == 0)  ==>  (this.theArray[this.currentSize] == this.theArray[this.front])
(this.currentSize == 0)  ==>  (this.theArray[this.front+1..] is a subsequence of orig(this.theArray[post(this.front)..]))
(this.currentSize == 0)  ==>  (this.theArray[this.front+1..] is a subset of orig(this.theArray[0..post(this.currentSize)]))
(this.currentSize == 0)  ==>  (this.theArray[this.front+1..] is a subset of orig(this.theArray[0..post(this.front)]))
(this.currentSize == 0)  ==>  (this.theArray[this.front+1..] is a subset of orig(this.theArray[0..this.back]))
(this.currentSize == 0)  ==>  (this.theArray[this.front+1..] is a subset of orig(this.theArray[0..this.front]))
(this.currentSize == 0)  ==>  (this.theArray[this.front+1..] is a subset of orig(this.theArray[post(this.front)..]))
(this.currentSize == size(this.theArray[])-1)  <==>  (orig(this.currentSize) == size(this.theArray[]))
(this.currentSize == size(this.theArray[])-1)  ==>  ((this.currentSize == 0) ==> (orig(this.front) == 0))
(this.currentSize == size(this.theArray[])-1)  ==>  ((this.currentSize == 0) ==> (this.back == 0))
(this.currentSize == size(this.theArray[])-1)  ==>  ((this.currentSize == 0) ==> (this.front == 0))
(this.currentSize == size(this.theArray[])-1)  ==>  (orig(this.theArray[0..post(this.currentSize)]) contains no duplicates)
(this.currentSize == size(this.theArray[])-1)  ==>  (orig(this.theArray[0..post(this.currentSize)]) elements != null)
(this.currentSize == size(this.theArray[])-1)  ==>  (orig(this.theArray[]) contains no duplicates)
(this.currentSize == size(this.theArray[])-1)  ==>  (orig(this.theArray[]) elements != null)
(this.currentSize == size(this.theArray[])-1)  ==>  (orig(this.theArray[post(this.currentSize)..]) elements == orig(this.theArray[post(this.currentSize)]))
(this.currentSize == size(this.theArray[])-1)  ==>  (orig(this.theArray[this.currentSize..]) == [])
(this.currentSize == size(this.theArray[])-1)  ==>  (this.currentSize >= orig(this.front))
(this.currentSize == size(this.theArray[])-1)  ==>  (this.currentSize >= this.back)
(this.currentSize == size(this.theArray[])-1)  ==>  (this.currentSize >= this.front)
(this.currentSize == size(this.theArray[])-1)  ==>  (this.theArray[0..this.currentSize] contains no duplicates)
(this.currentSize == size(this.theArray[])-1)  ==>  (this.theArray[] contains no duplicates)
(this.currentSize == size(this.theArray[])-1)  ==>  (this.theArray[this.currentSize+1..] == [])
(this.currentSize == size(this.theArray[])-1)  ==>  (this.theArray[this.currentSize..] elements == this.theArray[this.currentSize])
(this.front < size(this.theArray[])-1)  ==>  (this.front != orig(this.front))
(this.front < size(this.theArray[])-1)  ==>  (this.theArray[this.back] in orig(this.theArray[0..this.back]))
(this.front < size(this.theArray[])-1)  ==>  (this.theArray[this.back] in orig(this.theArray[]))
(this.front < size(this.theArray[])-1)  ==>  (this.theArray[this.front] == orig(this.theArray[post(this.front)]))
(this.front == 0)  <==>  (orig(this.front) == size(this.theArray[])-1)
(this.front == 0)  <==>  (this.front <= orig(this.front))
(this.front == 0)  ==>  ((orig(this.front) == 0) ==> (this.back == 0))
(this.front == 0)  ==>  ((orig(this.front) == 0) ==> (this.currentSize == 0))
(this.front == 0)  ==>  (orig(this.theArray[0..post(this.currentSize)-1]) elements != null)
(this.front == 0)  ==>  (orig(this.theArray[0..post(this.front)-1]) == [])
(this.front == 0)  ==>  (orig(this.theArray[0..post(this.front)]) elements == orig(this.theArray[post(this.front)]))
(this.front == 0)  ==>  (orig(this.theArray[this.front..]) elements != null)
(this.front == 0)  ==>  (orig(this.theArray[this.front..]) elements == orig(this.theArray[this.front]))
(this.front == 0)  ==>  (this.back <= orig(this.front))
(this.front == 0)  ==>  (this.currentSize <= orig(this.front))
(this.front == 0)  ==>  (this.currentSize >= this.front)
(this.front == 0)  ==>  (this.front < orig(this.currentSize))
(this.front == 0)  ==>  (this.front <= this.back)
(this.front == 0)  ==>  (this.front is a pointer)
(this.front == 0)  ==>  (this.theArray[0..this.back-1] == orig(this.theArray[0..this.back-1]))
(this.front == 0)  ==>  (this.theArray[0..this.currentSize-1] == orig(this.theArray[0..post(this.currentSize)-1]))
(this.front == 0)  ==>  (this.theArray[0..this.currentSize-1] elements != null)
(this.front == 0)  ==>  (this.theArray[0..this.front-1] == [])
(this.front == 0)  ==>  (this.theArray[0..this.front] elements == this.theArray[this.front])
(this.front == 0)  ==>  (this.theArray[orig(this.front)+1..] == [])
(this.front == 0)  ==>  (this.theArray[orig(this.front)..] == [null])
(this.front == 0)  ==>  (this.theArray[this.back+1..] elements == null)
(this.front == 0)  ==>  (this.theArray[this.currentSize+1..] elements == orig(this.theArray[post(this.currentSize)]))
(this.front == 0)  ==>  (this.theArray[this.currentSize+1..] is a subsequence of orig(this.theArray[post(this.currentSize)..]))
(this.front == 0)  ==>  (this.theArray[this.currentSize+1..] is a subset of orig(this.theArray[0..post(this.currentSize)]))
(this.front == 0)  ==>  (this.theArray[this.currentSize..] elements == null)
(this.front == 0)  ==>  (this.theArray[this.currentSize..] elements == this.theArray[orig(this.front)])
(this.front == 0)  ==>  (this.theArray[this.currentSize..] elements == this.theArray[this.currentSize])
(this.front == 0)  ==>  (this.theArray[this.currentSize] == this.theArray[orig(this.front)])
(this.front == size(this.theArray[])-1)  ==>  ((this.currentSize == 0) ==> (orig(this.front) == 0))
(this.front == size(this.theArray[])-1)  ==>  ((this.currentSize == 0) ==> (size(this.theArray[])-1 == 0))
(this.front == size(this.theArray[])-1)  ==>  ((this.currentSize == 0) ==> (this.back == 0))
(this.front == size(this.theArray[])-1)  ==>  ((this.currentSize == 0) ==> (this.front == 0))
(this.front == size(this.theArray[])-1)  ==>  ((this.front == 0) ==> (orig(this.front) == 0))
(this.front == size(this.theArray[])-1)  ==>  ((this.front == 0) ==> (this.back == 0))
(this.front == size(this.theArray[])-1)  ==>  ((this.front == 0) ==> (this.currentSize == 0))
(this.front == size(this.theArray[])-1)  ==>  (orig(this.theArray[post(this.front)+1..]) == [])
(this.front == size(this.theArray[])-1)  ==>  (orig(this.theArray[post(this.front)..]) elements == orig(this.theArray[post(this.front)]))
(this.front == size(this.theArray[])-1)  ==>  (orig(this.theArray[this.front..]) elements != null)
(this.front == size(this.theArray[])-1)  ==>  (this.back != orig(this.currentSize))
(this.front == size(this.theArray[])-1)  ==>  (this.currentSize <= this.front)
(this.front == size(this.theArray[])-1)  ==>  (this.front >= orig(this.front))
(this.front == size(this.theArray[])-1)  ==>  (this.front >= this.back)
(this.front == size(this.theArray[])-1)  ==>  (this.theArray[this.front+1..] == [])
(this.front == size(this.theArray[])-1)  ==>  (this.theArray[this.front..] elements == this.theArray[this.front])
===========================================================================
DataStructures.QueueAr.dequeue():::EXIT93;condition="currentSize == 0"
===========================================================================
DataStructures.QueueAr.dequeue():::EXIT93;condition="not(currentSize == 0)"
===========================================================================
DataStructures.QueueAr.dequeue():::EXIT93;condition="not(orig(currentSize == 0))"
===========================================================================
DataStructures.QueueAr.dequeue():::EXIT93;condition="not(currentSize == theArray.length)"
===========================================================================
DataStructures.QueueAr.dequeue():::EXIT93;condition="orig(currentSize == theArray.length)"
===========================================================================
DataStructures.QueueAr.dequeue():::EXIT93;condition="not(orig(currentSize == theArray.length))"
===========================================================================
DataStructures.QueueAr.dequeue():::EXIT93;condition="isEmpty()"
===========================================================================
DataStructures.QueueAr.dequeue():::EXIT93;condition="not(isEmpty())"
===========================================================================
DataStructures.QueueAr.dequeue():::EXIT93;condition="not(orig(isEmpty()))"
===========================================================================
DataStructures.QueueAr.dequeue():::EXIT93;condition="++front == theArray.length"
===========================================================================
DataStructures.QueueAr.dequeue():::EXIT93;condition="not(++front == theArray.length)"
===========================================================================
DataStructures.QueueAr.dequeue():::EXIT93;condition="orig(++front == theArray.length)"
===========================================================================
DataStructures.QueueAr.dequeue():::EXIT93;condition="not(orig(++front == theArray.length))"
===========================================================================
DataStructures.QueueAr.dequeue():::EXIT
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.back == orig(this.back)
size(this.theArray[]) == orig(size(this.theArray[]))
this.theArray[this.currentSize] == this.theArray[orig(this.currentSize)-1]
this.theArray[orig(this.front)+1..] == orig(this.theArray[this.front+1..])
this.theArray[0..orig(this.front)-1] == orig(this.theArray[0..this.front-1])
orig(this.theArray[post(this.currentSize)]) == orig(this.theArray[this.currentSize-1])
(this.currentSize < size(this.theArray[])-1)  <==>  (orig(this.currentSize) <= size(this.theArray[])-1)
(this.currentSize < size(this.theArray[])-1)  ==>  (this.front != orig(this.front))
(this.currentSize < size(this.theArray[])-1)  ==>  (this.theArray[] is a subset of orig(this.theArray[]))
(this.currentSize < size(this.theArray[])-1)  ==>  (this.theArray[this.back+1..] is a subset of orig(this.theArray[this.back+1..]))
(this.currentSize < size(this.theArray[])-1)  ==>  (this.theArray[this.back+1..] is a subset of orig(this.theArray[this.back..]))
(this.currentSize < size(this.theArray[])-1)  ==>  (this.theArray[this.back] in orig(this.theArray[0..this.back]))
(this.currentSize < size(this.theArray[])-1)  ==>  (this.theArray[this.currentSize] in orig(this.theArray[0..post(this.currentSize)]))
(this.currentSize < size(this.theArray[])-1)  ==>  (this.theArray[this.front+1..] is a subset of orig(this.theArray[post(this.front)..]))
(this.currentSize < size(this.theArray[])-1)  ==>  (this.theArray[this.front..] is a subset of orig(this.theArray[post(this.front)..]))
(this.currentSize < size(this.theArray[])-1)  ==>  (this.theArray[this.front] == orig(this.theArray[post(this.front)]))
(this.currentSize == 0)  <==>  (orig(this.currentSize) == 1)
(this.currentSize == 0)  <==>  (this.back == orig(this.front))
(this.currentSize == 0)  ==>  ((orig(this.front) == 0) ==> (size(this.theArray[])-1 == 0))
(this.currentSize == 0)  ==>  ((orig(this.front) == 0) ==> (this.front == 0))
(this.currentSize == 0)  ==>  ((this.back == 0) ==> (size(this.theArray[])-1 == 0))
(this.currentSize == 0)  ==>  ((this.back == 0) ==> (this.front == 0))
(this.currentSize == 0)  ==>  (orig(this.theArray[0..post(this.currentSize)-1]) == [])
(this.currentSize == 0)  ==>  (orig(this.theArray[0..post(this.currentSize)]) elements == orig(this.theArray[post(this.currentSize)]))
(this.currentSize == 0)  ==>  (orig(this.theArray[0..post(this.currentSize)]) elements == orig(this.theArray[post(this.front)]))
(this.currentSize == 0)  ==>  (orig(this.theArray[post(this.currentSize)]) == orig(this.theArray[post(this.front)]))
(this.currentSize == 0)  ==>  (this.currentSize <= orig(this.front))
(this.currentSize == 0)  ==>  (this.currentSize <= this.back)
(this.currentSize == 0)  ==>  (this.currentSize <= this.front)
(this.currentSize == 0)  ==>  (this.currentSize is a pointer)
(this.currentSize == 0)  ==>  (this.front != orig(this.currentSize))
(this.currentSize == 0)  ==>  (this.theArray[0..this.back-1] == orig(this.theArray[0..this.back-1]))
(this.currentSize == 0)  ==>  (this.theArray[0..this.currentSize-1] == [])
(this.currentSize == 0)  ==>  (this.theArray[0..this.currentSize] == [null])
(this.currentSize == 0)  ==>  (this.theArray[0..this.front-1] is a subsequence of orig(this.theArray[post(this.front)..]))
(this.currentSize == 0)  ==>  (this.theArray[0..this.front-1] is a subsequence of orig(this.theArray[this.back..]))
(this.currentSize == 0)  ==>  (this.theArray[0..this.front-1] is a subsequence of orig(this.theArray[this.currentSize..]))
(this.currentSize == 0)  ==>  (this.theArray[0..this.front-1] is a subsequence of orig(this.theArray[this.front..]))
(this.currentSize == 0)  ==>  (this.theArray[0..this.front-1] is a subset of orig(this.theArray[0..post(this.currentSize)]))
(this.currentSize == 0)  ==>  (this.theArray[0..this.front-1] is a subset of orig(this.theArray[0..post(this.front)-1]))
(this.currentSize == 0)  ==>  (this.theArray[0..this.front-1] is a subset of orig(this.theArray[0..post(this.front)]))
(this.currentSize == 0)  ==>  (this.theArray[0..this.front-1] is a subset of orig(this.theArray[0..this.back]))
(this.currentSize == 0)  ==>  (this.theArray[0..this.front-1] is a subset of orig(this.theArray[0..this.front]))
(this.currentSize == 0)  ==>  (this.theArray[0..this.front-1] is a subset of orig(this.theArray[post(this.front)+1..]))
(this.currentSize == 0)  ==>  (this.theArray[0..this.front-1] is a subset of orig(this.theArray[post(this.front)..]))
(this.currentSize == 0)  ==>  (this.theArray[0..this.front-1] is a subset of orig(this.theArray[this.back..]))
(this.currentSize == 0)  ==>  (this.theArray[0..this.front-1] is a subset of orig(this.theArray[this.currentSize..]))
(this.currentSize == 0)  ==>  (this.theArray[0..this.front-1] is a subset of orig(this.theArray[this.front..]))
(this.currentSize == 0)  ==>  (this.theArray[] elements == null)
(this.currentSize == 0)  ==>  (this.theArray[] elements == this.theArray[orig(this.front)])
(this.currentSize == 0)  ==>  (this.theArray[] elements == this.theArray[this.back])
(this.currentSize == 0)  ==>  (this.theArray[] elements == this.theArray[this.currentSize])
(this.currentSize == 0)  ==>  (this.theArray[] elements == this.theArray[this.front])
(this.currentSize == 0)  ==>  (this.theArray[].getClass().getName() elements == null)
(this.currentSize == 0)  ==>  (this.theArray[this.back+1..] == orig(this.theArray[this.back+1..]))
(this.currentSize == 0)  ==>  (this.theArray[this.currentSize+1..] elements == orig(this.theArray[post(this.currentSize)]))
(this.currentSize == 0)  ==>  (this.theArray[this.currentSize+1..] elements == orig(this.theArray[post(this.front)]))
(this.currentSize == 0)  ==>  (this.theArray[this.currentSize+1..] is a subset of orig(this.theArray[0..post(this.currentSize)]))
(this.currentSize == 0)  ==>  (this.theArray[this.currentSize+1..] is a subset of orig(this.theArray[0..post(this.front)]))
(this.currentSize == 0)  ==>  (this.theArray[this.currentSize+1..] is a subset of orig(this.theArray[0..this.back]))
(this.currentSize == 0)  ==>  (this.theArray[this.currentSize+1..] is a subset of orig(this.theArray[0..this.front]))
(this.currentSize == 0)  ==>  (this.theArray[this.currentSize+1..] is a subset of orig(this.theArray[post(this.front)..]))
(this.currentSize == 0)  ==>  (this.theArray[this.currentSize..] elements == null)
(this.currentSize == 0)  ==>  (this.theArray[this.currentSize..] elements == this.theArray[orig(this.front)])
(this.currentSize == 0)  ==>  (this.theArray[this.currentSize..] elements == this.theArray[this.back])
(this.currentSize == 0)  ==>  (this.theArray[this.currentSize..] elements == this.theArray[this.currentSize])
(this.currentSize == 0)  ==>  (this.theArray[this.currentSize..] elements == this.theArray[this.front])
(this.currentSize == 0)  ==>  (this.theArray[this.currentSize] == this.theArray[orig(this.front)])
(this.currentSize == 0)  ==>  (this.theArray[this.currentSize] == this.theArray[this.back])
(this.currentSize == 0)  ==>  (this.theArray[this.currentSize] == this.theArray[this.front])
(this.currentSize == 0)  ==>  (this.theArray[this.front+1..] is a subsequence of orig(this.theArray[post(this.front)..]))
(this.currentSize == 0)  ==>  (this.theArray[this.front+1..] is a subset of orig(this.theArray[0..post(this.currentSize)]))
(this.currentSize == 0)  ==>  (this.theArray[this.front+1..] is a subset of orig(this.theArray[0..post(this.front)]))
(this.currentSize == 0)  ==>  (this.theArray[this.front+1..] is a subset of orig(this.theArray[0..this.back]))
(this.currentSize == 0)  ==>  (this.theArray[this.front+1..] is a subset of orig(this.theArray[0..this.front]))
(this.currentSize == 0)  ==>  (this.theArray[this.front+1..] is a subset of orig(this.theArray[post(this.front)..]))
(this.currentSize == size(this.theArray[])-1)  <==>  (orig(this.currentSize) == size(this.theArray[]))
(this.currentSize == size(this.theArray[])-1)  ==>  ((this.currentSize == 0) ==> (orig(this.front) == 0))
(this.currentSize == size(this.theArray[])-1)  ==>  ((this.currentSize == 0) ==> (this.back == 0))
(this.currentSize == size(this.theArray[])-1)  ==>  ((this.currentSize == 0) ==> (this.front == 0))
(this.currentSize == size(this.theArray[])-1)  ==>  (orig(this.theArray[0..post(this.currentSize)]) contains no duplicates)
(this.currentSize == size(this.theArray[])-1)  ==>  (orig(this.theArray[0..post(this.currentSize)]) elements != null)
(this.currentSize == size(this.theArray[])-1)  ==>  (orig(this.theArray[]) contains no duplicates)
(this.currentSize == size(this.theArray[])-1)  ==>  (orig(this.theArray[]) elements != null)
(this.currentSize == size(this.theArray[])-1)  ==>  (orig(this.theArray[post(this.currentSize)..]) elements == orig(this.theArray[post(this.currentSize)]))
(this.currentSize == size(this.theArray[])-1)  ==>  (orig(this.theArray[this.currentSize..]) == [])
(this.currentSize == size(this.theArray[])-1)  ==>  (this.currentSize >= orig(this.front))
(this.currentSize == size(this.theArray[])-1)  ==>  (this.currentSize >= this.back)
(this.currentSize == size(this.theArray[])-1)  ==>  (this.currentSize >= this.front)
(this.currentSize == size(this.theArray[])-1)  ==>  (this.theArray[0..this.currentSize] contains no duplicates)
(this.currentSize == size(this.theArray[])-1)  ==>  (this.theArray[] contains no duplicates)
(this.currentSize == size(this.theArray[])-1)  ==>  (this.theArray[this.currentSize+1..] == [])
(this.currentSize == size(this.theArray[])-1)  ==>  (this.theArray[this.currentSize..] elements == this.theArray[this.currentSize])
(this.front < size(this.theArray[])-1)  ==>  (this.front != orig(this.front))
(this.front < size(this.theArray[])-1)  ==>  (this.theArray[this.back] in orig(this.theArray[0..this.back]))
(this.front < size(this.theArray[])-1)  ==>  (this.theArray[this.back] in orig(this.theArray[]))
(this.front < size(this.theArray[])-1)  ==>  (this.theArray[this.front] == orig(this.theArray[post(this.front)]))
(this.front == 0)  <==>  (orig(this.front) == size(this.theArray[])-1)
(this.front == 0)  <==>  (this.front <= orig(this.front))
(this.front == 0)  ==>  ((orig(this.front) == 0) ==> (this.back == 0))
(this.front == 0)  ==>  ((orig(this.front) == 0) ==> (this.currentSize == 0))
(this.front == 0)  ==>  (orig(this.theArray[0..post(this.currentSize)-1]) elements != null)
(this.front == 0)  ==>  (orig(this.theArray[0..post(this.front)-1]) == [])
(this.front == 0)  ==>  (orig(this.theArray[0..post(this.front)]) elements == orig(this.theArray[post(this.front)]))
(this.front == 0)  ==>  (orig(this.theArray[this.front..]) elements != null)
(this.front == 0)  ==>  (orig(this.theArray[this.front..]) elements == orig(this.theArray[this.front]))
(this.front == 0)  ==>  (this.back <= orig(this.front))
(this.front == 0)  ==>  (this.currentSize <= orig(this.front))
(this.front == 0)  ==>  (this.currentSize >= this.front)
(this.front == 0)  ==>  (this.front < orig(this.currentSize))
(this.front == 0)  ==>  (this.front <= this.back)
(this.front == 0)  ==>  (this.front is a pointer)
(this.front == 0)  ==>  (this.theArray[0..this.back-1] == orig(this.theArray[0..this.back-1]))
(this.front == 0)  ==>  (this.theArray[0..this.currentSize-1] == orig(this.theArray[0..post(this.currentSize)-1]))
(this.front == 0)  ==>  (this.theArray[0..this.currentSize-1] elements != null)
(this.front == 0)  ==>  (this.theArray[0..this.front-1] == [])
(this.front == 0)  ==>  (this.theArray[0..this.front] elements == this.theArray[this.front])
(this.front == 0)  ==>  (this.theArray[orig(this.front)+1..] == [])
(this.front == 0)  ==>  (this.theArray[orig(this.front)..] == [null])
(this.front == 0)  ==>  (this.theArray[this.back+1..] elements == null)
(this.front == 0)  ==>  (this.theArray[this.currentSize+1..] elements == orig(this.theArray[post(this.currentSize)]))
(this.front == 0)  ==>  (this.theArray[this.currentSize+1..] is a subsequence of orig(this.theArray[post(this.currentSize)..]))
(this.front == 0)  ==>  (this.theArray[this.currentSize+1..] is a subset of orig(this.theArray[0..post(this.currentSize)]))
(this.front == 0)  ==>  (this.theArray[this.currentSize..] elements == null)
(this.front == 0)  ==>  (this.theArray[this.currentSize..] elements == this.theArray[orig(this.front)])
(this.front == 0)  ==>  (this.theArray[this.currentSize..] elements == this.theArray[this.currentSize])
(this.front == 0)  ==>  (this.theArray[this.currentSize] == this.theArray[orig(this.front)])
(this.front == size(this.theArray[])-1)  ==>  ((this.currentSize == 0) ==> (orig(this.front) == 0))
(this.front == size(this.theArray[])-1)  ==>  ((this.currentSize == 0) ==> (size(this.theArray[])-1 == 0))
(this.front == size(this.theArray[])-1)  ==>  ((this.currentSize == 0) ==> (this.back == 0))
(this.front == size(this.theArray[])-1)  ==>  ((this.currentSize == 0) ==> (this.front == 0))
(this.front == size(this.theArray[])-1)  ==>  ((this.front == 0) ==> (orig(this.front) == 0))
(this.front == size(this.theArray[])-1)  ==>  ((this.front == 0) ==> (this.back == 0))
(this.front == size(this.theArray[])-1)  ==>  ((this.front == 0) ==> (this.currentSize == 0))
(this.front == size(this.theArray[])-1)  ==>  (orig(this.theArray[post(this.front)+1..]) == [])
(this.front == size(this.theArray[])-1)  ==>  (orig(this.theArray[post(this.front)..]) elements == orig(this.theArray[post(this.front)]))
(this.front == size(this.theArray[])-1)  ==>  (orig(this.theArray[this.front..]) elements != null)
(this.front == size(this.theArray[])-1)  ==>  (this.back != orig(this.currentSize))
(this.front == size(this.theArray[])-1)  ==>  (this.currentSize <= this.front)
(this.front == size(this.theArray[])-1)  ==>  (this.front >= orig(this.front))
(this.front == size(this.theArray[])-1)  ==>  (this.front >= this.back)
(this.front == size(this.theArray[])-1)  ==>  (this.theArray[this.front+1..] == [])
(this.front == size(this.theArray[])-1)  ==>  (this.theArray[this.front..] elements == this.theArray[this.front])
return != null
return.getClass().getName() is printable
this.theArray[orig(this.front)] == null
this.theArray.getClass().getName() != return.getClass().getName()
this.currentSize - orig(this.currentSize) + 1 == 0
(size(this.theArray[])-1 == 0) ==> (this.currentSize == 0)
this.currentSize <= size(this.theArray[])-1
return.getClass().getName() in orig(this.theArray[].getClass().getName())
orig(this.currentSize) <= size(this.theArray[])
(size(this.theArray[])-1 == 0) ==> (orig(this.front) == 0)
orig(this.front) <= size(this.theArray[])-1
this.theArray[this.currentSize+1..] is a subset of orig(this.theArray[post(this.currentSize)..])
===========================================================================
DataStructures.QueueAr.dequeue():::EXIT;condition="currentSize == 0"
this.back == orig(this.front)
this.theArray[this.currentSize] == this.theArray[this.front]
this.theArray[this.currentSize] == this.theArray[this.back]
this.theArray[this.currentSize] == this.theArray[orig(this.front)]
this.theArray[this.currentSize] == this.theArray[orig(this.back)]
this.theArray[this.back+1..] == orig(this.theArray[post(this.back)+1..])
this.theArray[this.back+1..] == orig(this.theArray[this.front+1..])
this.theArray[this.back+1..] == orig(this.theArray[this.back+1..])
this.theArray[0..this.back-1] == orig(this.theArray[0..post(this.back)-1])
this.theArray[0..this.back-1] == orig(this.theArray[0..this.front-1])
this.theArray[0..this.back-1] == orig(this.theArray[0..this.back-1])
orig(this.theArray[post(this.currentSize)]) == orig(this.theArray[post(this.front)])
this.theArray[] elements == null
this.theArray[].getClass().getName() elements == null
this.currentSize == 0
this.theArray[0..this.currentSize] == [null]
this.theArray[0..this.currentSize-1] == []
this.theArray[] elements == this.theArray[this.currentSize]
this.currentSize <= this.front
this.currentSize <= this.back
(this.back == 0) ==> (this.front == 0)
this.front != orig(this.currentSize)
(this.back == 0) ==> (size(this.theArray[])-1 == 0)
this.theArray[this.currentSize+1..] elements == orig(this.theArray[post(this.currentSize)])
this.theArray[this.currentSize+1..] is a subset of orig(this.theArray[0..post(this.currentSize)])
this.theArray[this.currentSize+1..] is a subset of orig(this.theArray[post(this.front)..])
this.theArray[this.currentSize+1..] is a subset of orig(this.theArray[0..post(this.front)])
this.theArray[this.currentSize+1..] is a subset of orig(this.theArray[0..this.front])
this.theArray[this.front+1..] is a subset of orig(this.theArray[0..post(this.currentSize)])
this.theArray[this.front+1..] is a subsequence of orig(this.theArray[post(this.front)..])
this.theArray[this.front+1..] is a subset of orig(this.theArray[post(this.front)..])
this.theArray[this.front+1..] is a subset of orig(this.theArray[0..post(this.front)])
this.theArray[this.front+1..] is a subset of orig(this.theArray[0..this.front])
this.theArray[0..this.front-1] is a subset of orig(this.theArray[0..post(this.currentSize)])
this.theArray[0..this.front-1] is a subsequence of orig(this.theArray[post(this.front)..])
this.theArray[0..this.front-1] is a subset of orig(this.theArray[post(this.front)..])
this.theArray[0..this.front-1] is a subset of orig(this.theArray[post(this.front)+1..])
this.theArray[0..this.front-1] is a subset of orig(this.theArray[0..post(this.front)])
this.theArray[0..this.front-1] is a subset of orig(this.theArray[0..post(this.front)-1])
this.theArray[0..this.front-1] is a subsequence of orig(this.theArray[this.currentSize..])
this.theArray[0..this.front-1] is a subset of orig(this.theArray[this.currentSize..])
this.theArray[0..this.front-1] is a subsequence of orig(this.theArray[this.front..])
this.theArray[0..this.front-1] is a subset of orig(this.theArray[this.front..])
this.theArray[0..this.front-1] is a subset of orig(this.theArray[0..this.front])
orig(this.theArray[0..post(this.currentSize)]) elements == orig(this.theArray[post(this.currentSize)])
===========================================================================
DataStructures.QueueAr.dequeue():::EXIT;condition="not(currentSize == 0)"
this.theArray[this.front] == orig(this.theArray[post(this.front)])
this.theArray[this.back] == orig(this.theArray[post(this.back)])
this.theArray[this.back] == orig(this.theArray[this.back])
this.currentSize >= 1
this.theArray[this.front] != null
this.theArray[this.back] != null
this.front != orig(this.front)
this.back != orig(this.front)
===========================================================================
DataStructures.QueueAr.dequeue():::EXIT;condition="not(orig(currentSize == 0))"
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.back == orig(this.back)
size(this.theArray[]) == orig(size(this.theArray[]))
this.theArray[this.currentSize] == this.theArray[orig(this.currentSize)-1]
this.theArray[orig(this.front)+1..] == orig(this.theArray[this.front+1..])
this.theArray[0..orig(this.front)-1] == orig(this.theArray[0..this.front-1])
orig(this.theArray[post(this.currentSize)]) == orig(this.theArray[this.currentSize-1])
this.theArray != null
this.theArray.getClass().getName() == java.lang.Object[].class
this.currentSize >= 0
this.front >= 0
this.back >= 0
return != null
return.getClass().getName() is printable
orig(this.front) >= 0
this.theArray[orig(this.front)] == null
orig(this.theArray[this.front]) != null
orig(this.theArray[this.back]) != null
this.theArray.getClass().getName() != return.getClass().getName()
this.currentSize - orig(this.currentSize) + 1 == 0
(size(this.theArray[])-1 == 0) ==> (this.currentSize == 0)
this.currentSize <= size(this.theArray[])-1
(size(this.theArray[])-1 == 0) ==> (this.front == 0)
this.front <= size(this.theArray[])-1
(size(this.theArray[])-1 == 0) ==> (this.back == 0)
this.back <= size(this.theArray[])-1
return.getClass().getName() in orig(this.theArray[].getClass().getName())
orig(this.currentSize) <= size(this.theArray[])
(size(this.theArray[])-1 == 0) ==> (orig(this.front) == 0)
orig(this.front) <= size(this.theArray[])-1
this.theArray[this.currentSize+1..] is a subset of orig(this.theArray[post(this.currentSize)..])
===========================================================================
DataStructures.QueueAr.dequeue():::EXIT;condition="not(currentSize == theArray.length)"
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.back == orig(this.back)
size(this.theArray[]) == orig(size(this.theArray[]))
this.theArray[this.currentSize] == this.theArray[orig(this.currentSize)-1]
this.theArray[orig(this.front)+1..] == orig(this.theArray[this.front+1..])
this.theArray[0..orig(this.front)-1] == orig(this.theArray[0..this.front-1])
orig(this.theArray[post(this.currentSize)]) == orig(this.theArray[this.currentSize-1])
this.theArray != null
this.theArray.getClass().getName() == java.lang.Object[].class
this.currentSize >= 0
this.front >= 0
this.back >= 0
return != null
return.getClass().getName() is printable
this.theArray[orig(this.front)] == null
this.theArray.getClass().getName() != return.getClass().getName()
this.currentSize - orig(this.currentSize) + 1 == 0
(size(this.theArray[])-1 == 0) ==> (this.currentSize == 0)
this.currentSize <= size(this.theArray[])-1
(size(this.theArray[])-1 == 0) ==> (this.front == 0)
this.front <= size(this.theArray[])-1
(size(this.theArray[])-1 == 0) ==> (this.back == 0)
this.back <= size(this.theArray[])-1
return.getClass().getName() in orig(this.theArray[].getClass().getName())
orig(this.currentSize) <= size(this.theArray[])
(size(this.theArray[])-1 == 0) ==> (orig(this.front) == 0)
orig(this.front) <= size(this.theArray[])-1
this.theArray[this.currentSize+1..] is a subset of orig(this.theArray[post(this.currentSize)..])
===========================================================================
DataStructures.QueueAr.dequeue():::EXIT;condition="orig(currentSize == theArray.length)"
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.currentSize == size(this.theArray[])-1
this.currentSize == orig(size(this.theArray[]))-1
this.back == orig(this.back)
orig(this.currentSize) == size(this.theArray[])
orig(this.currentSize) == orig(size(this.theArray[]))
this.theArray[this.currentSize] == this.theArray[orig(this.currentSize)-1]
this.theArray[orig(this.front)+1..] == orig(this.theArray[this.front+1..])
this.theArray[0..orig(this.front)-1] == orig(this.theArray[0..this.front-1])
orig(this.theArray[post(this.currentSize)]) == orig(this.theArray[this.currentSize-1])
this.theArray != null
this.theArray.getClass().getName() == java.lang.Object[].class
this.theArray[] contains no duplicates
this.front >= 0
this.back >= 0
return != null
return.getClass().getName() is printable
orig(this.theArray[]) contains no duplicates
orig(this.theArray[]) elements != null
orig(this.front) >= 0
this.theArray[this.currentSize+1..] == []
this.theArray[orig(this.front)] == null
this.theArray.getClass().getName() != return.getClass().getName()
(this.currentSize == 0) ==> (this.front == 0)
this.currentSize >= this.front
(this.currentSize == 0) ==> (this.back == 0)
this.currentSize >= this.back
(this.currentSize == 0) ==> (orig(this.front) == 0)
this.currentSize >= orig(this.front)
return.getClass().getName() in orig(this.theArray[].getClass().getName())
this.theArray[this.currentSize..] elements == this.theArray[this.currentSize]
orig(this.theArray[post(this.currentSize)..]) elements == orig(this.theArray[post(this.currentSize)])
===========================================================================
DataStructures.QueueAr.dequeue():::EXIT;condition="not(orig(currentSize == theArray.length))"
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.back == orig(this.back)
size(this.theArray[]) == orig(size(this.theArray[]))
this.theArray[this.currentSize] == this.theArray[orig(this.currentSize)-1]
this.theArray[this.front] == orig(this.theArray[post(this.front)])
this.theArray[orig(this.front)+1..] == orig(this.theArray[this.front+1..])
this.theArray[0..orig(this.front)-1] == orig(this.theArray[0..this.front-1])
orig(this.theArray[post(this.currentSize)]) == orig(this.theArray[this.currentSize-1])
this.theArray != null
this.theArray.getClass().getName() == java.lang.Object[].class
this.currentSize >= 0
this.front >= 0
this.back >= 0
return != null
return.getClass().getName() is printable
orig(this.front) >= 0
this.theArray[orig(this.front)] == null
orig(this.theArray[this.front]) != null
orig(this.theArray[this.back]) != null
this.theArray.getClass().getName() != return.getClass().getName()
this.theArray[] is a subset of orig(this.theArray[])
this.currentSize - orig(this.currentSize) + 1 == 0
this.currentSize < size(this.theArray[])-1
this.front != orig(this.front)
this.front <= size(this.theArray[])-1
this.back <= size(this.theArray[])-1
return.getClass().getName() in orig(this.theArray[].getClass().getName())
orig(this.currentSize) <= size(this.theArray[])-1
orig(this.front) <= size(this.theArray[])-1
this.theArray[this.currentSize] in orig(this.theArray[0..post(this.currentSize)])
this.theArray[this.currentSize] in orig(this.theArray[0..this.currentSize])
this.theArray[this.currentSize+1..] is a subset of orig(this.theArray[post(this.currentSize)..])
this.theArray[0..this.currentSize] is a subset of orig(this.theArray[0..this.currentSize])
this.theArray[0..this.currentSize-1] is a subset of orig(this.theArray[0..this.currentSize])
this.theArray[this.front..] is a subset of orig(this.theArray[post(this.front)..])
this.theArray[this.front+1..] is a subset of orig(this.theArray[post(this.front)..])
this.theArray[0..this.front-1] is a subset of orig(this.theArray[0..this.currentSize])
this.theArray[this.back] in orig(this.theArray[0..this.back])
this.theArray[this.back+1..] is a subset of orig(this.theArray[this.back..])
this.theArray[this.back+1..] is a subset of orig(this.theArray[this.back+1..])
this.theArray[orig(this.currentSize)] in orig(this.theArray[post(this.currentSize)..])
this.theArray[orig(this.currentSize)] in orig(this.theArray[0..this.currentSize])
this.theArray[orig(this.currentSize)+1..] is a subset of orig(this.theArray[post(this.currentSize)..])
this.theArray[orig(this.currentSize)+1..] is a subset of orig(this.theArray[this.currentSize..])
this.theArray[0..orig(this.currentSize)] is a subset of orig(this.theArray[0..this.currentSize])
this.theArray[orig(this.front)] in orig(this.theArray[0..this.currentSize])
this.theArray[0..orig(this.front)] is a subset of orig(this.theArray[0..this.currentSize])
===========================================================================
DataStructures.QueueAr.dequeue():::EXIT;condition="isEmpty()"
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.back == orig(this.front)
this.back == orig(this.back)
size(this.theArray[]) == orig(size(this.theArray[]))
this.theArray[this.currentSize] == this.theArray[this.front]
this.theArray[this.currentSize] == this.theArray[this.back]
this.theArray[this.currentSize] == this.theArray[orig(this.currentSize)-1]
this.theArray[this.currentSize] == this.theArray[orig(this.front)]
this.theArray[this.currentSize] == this.theArray[orig(this.back)]
this.theArray[this.back+1..] == orig(this.theArray[post(this.back)+1..])
this.theArray[this.back+1..] == orig(this.theArray[this.front+1..])
this.theArray[this.back+1..] == orig(this.theArray[this.back+1..])
this.theArray[0..this.back-1] == orig(this.theArray[0..post(this.back)-1])
this.theArray[0..this.back-1] == orig(this.theArray[0..this.front-1])
this.theArray[0..this.back-1] == orig(this.theArray[0..this.back-1])
orig(this.theArray[post(this.currentSize)]) == orig(this.theArray[post(this.front)])
orig(this.theArray[post(this.currentSize)]) == orig(this.theArray[this.currentSize-1])
this.theArray.getClass().getName() == java.lang.Object[].class
this.theArray[] elements == null
this.theArray[].getClass().getName() elements == null
this.currentSize == 0
this.front >= 0
return.getClass().getName() is printable
this.theArray[0..this.currentSize] == [null]
this.theArray[0..this.currentSize-1] == []
this.theArray.getClass().getName() != return.getClass().getName()
this.theArray[] elements == this.theArray[this.currentSize]
this.currentSize <= this.front
this.currentSize <= this.back
this.currentSize <= size(this.theArray[])-1
(this.back == 0) ==> (this.front == 0)
this.front != orig(this.currentSize)
(size(this.theArray[])-1 == 0) ==> (this.front == 0)
this.front <= size(this.theArray[])-1
(size(this.theArray[])-1 == 0) ==> (this.back == 0)
(this.back == 0) ==> (size(this.theArray[])-1 == 0)
this.back <= size(this.theArray[])-1
return.getClass().getName() in orig(this.theArray[].getClass().getName())
orig(this.currentSize) <= size(this.theArray[])
this.theArray[this.currentSize+1..] elements == orig(this.theArray[post(this.currentSize)])
this.theArray[this.currentSize+1..] is a subset of orig(this.theArray[0..post(this.currentSize)])
this.theArray[this.currentSize+1..] is a subset of orig(this.theArray[post(this.front)..])
this.theArray[this.currentSize+1..] is a subset of orig(this.theArray[0..post(this.front)])
this.theArray[this.currentSize+1..] is a subset of orig(this.theArray[0..this.front])
this.theArray[this.front+1..] is a subset of orig(this.theArray[0..post(this.currentSize)])
this.theArray[this.front+1..] is a subsequence of orig(this.theArray[post(this.front)..])
this.theArray[this.front+1..] is a subset of orig(this.theArray[post(this.front)..])
this.theArray[this.front+1..] is a subset of orig(this.theArray[0..post(this.front)])
this.theArray[this.front+1..] is a subset of orig(this.theArray[0..this.front])
this.theArray[0..this.front-1] is a subset of orig(this.theArray[0..post(this.currentSize)])
this.theArray[0..this.front-1] is a subsequence of orig(this.theArray[post(this.front)..])
this.theArray[0..this.front-1] is a subset of orig(this.theArray[post(this.front)..])
this.theArray[0..this.front-1] is a subset of orig(this.theArray[post(this.front)+1..])
this.theArray[0..this.front-1] is a subset of orig(this.theArray[0..post(this.front)])
this.theArray[0..this.front-1] is a subset of orig(this.theArray[0..post(this.front)-1])
this.theArray[0..this.front-1] is a subsequence of orig(this.theArray[this.currentSize..])
this.theArray[0..this.front-1] is a subset of orig(this.theArray[this.currentSize..])
this.theArray[0..this.front-1] is a subsequence of orig(this.theArray[this.front..])
this.theArray[0..this.front-1] is a subset of orig(this.theArray[this.front..])
this.theArray[0..this.front-1] is a subset of orig(this.theArray[0..this.front])
orig(this.theArray[0..post(this.currentSize)]) elements == orig(this.theArray[post(this.currentSize)])
===========================================================================
DataStructures.QueueAr.dequeue():::EXIT;condition="not(isEmpty())"
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.back == orig(this.back)
size(this.theArray[]) == orig(size(this.theArray[]))
this.theArray[this.currentSize] == this.theArray[orig(this.currentSize)-1]
this.theArray[this.front] == orig(this.theArray[post(this.front)])
this.theArray[this.back] == orig(this.theArray[post(this.back)])
this.theArray[this.back] == orig(this.theArray[this.back])
this.theArray[orig(this.front)+1..] == orig(this.theArray[this.front+1..])
this.theArray[0..orig(this.front)-1] == orig(this.theArray[0..this.front-1])
orig(this.theArray[post(this.currentSize)]) == orig(this.theArray[this.currentSize-1])
this.theArray != null
this.theArray.getClass().getName() == java.lang.Object[].class
this.currentSize >= 1
this.front >= 0
this.back >= 0
return != null
return.getClass().getName() is printable
this.theArray[this.front] != null
this.theArray[this.back] != null
this.theArray[orig(this.front)] == null
this.theArray.getClass().getName() != return.getClass().getName()
this.currentSize - orig(this.currentSize) + 1 == 0
this.currentSize <= size(this.theArray[])-1
this.front != orig(this.front)
this.front <= size(this.theArray[])-1
this.back != orig(this.front)
this.back <= size(this.theArray[])-1
return.getClass().getName() in orig(this.theArray[].getClass().getName())
orig(this.currentSize) <= size(this.theArray[])
orig(this.front) <= size(this.theArray[])-1
this.theArray[this.currentSize+1..] is a subset of orig(this.theArray[post(this.currentSize)..])
===========================================================================
DataStructures.QueueAr.dequeue():::EXIT;condition="not(orig(isEmpty()))"
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.back == orig(this.back)
size(this.theArray[]) == orig(size(this.theArray[]))
this.theArray[this.currentSize] == this.theArray[orig(this.currentSize)-1]
this.theArray[orig(this.front)+1..] == orig(this.theArray[this.front+1..])
this.theArray[0..orig(this.front)-1] == orig(this.theArray[0..this.front-1])
orig(this.theArray[post(this.currentSize)]) == orig(this.theArray[this.currentSize-1])
this.theArray != null
this.theArray.getClass().getName() == java.lang.Object[].class
this.currentSize >= 0
this.front >= 0
this.back >= 0
return != null
return.getClass().getName() is printable
orig(this.front) >= 0
this.theArray[orig(this.front)] == null
orig(this.theArray[this.front]) != null
orig(this.theArray[this.back]) != null
this.theArray.getClass().getName() != return.getClass().getName()
this.currentSize - orig(this.currentSize) + 1 == 0
(size(this.theArray[])-1 == 0) ==> (this.currentSize == 0)
this.currentSize <= size(this.theArray[])-1
(size(this.theArray[])-1 == 0) ==> (this.front == 0)
this.front <= size(this.theArray[])-1
(size(this.theArray[])-1 == 0) ==> (this.back == 0)
this.back <= size(this.theArray[])-1
return.getClass().getName() in orig(this.theArray[].getClass().getName())
orig(this.currentSize) <= size(this.theArray[])
(size(this.theArray[])-1 == 0) ==> (orig(this.front) == 0)
orig(this.front) <= size(this.theArray[])-1
this.theArray[this.currentSize+1..] is a subset of orig(this.theArray[post(this.currentSize)..])
===========================================================================
DataStructures.QueueAr.dequeue():::EXIT;condition="++front == theArray.length"
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.front == size(this.theArray[])-1
this.front == orig(size(this.theArray[]))-1
this.back == orig(this.back)
size(this.theArray[]) == orig(size(this.theArray[]))
this.theArray[this.currentSize] == this.theArray[orig(this.currentSize)-1]
this.theArray[orig(this.front)+1..] == orig(this.theArray[this.front+1..])
this.theArray[0..orig(this.front)-1] == orig(this.theArray[0..this.front-1])
orig(this.theArray[post(this.currentSize)]) == orig(this.theArray[this.currentSize-1])
this.theArray != null
this.theArray.getClass().getName() == java.lang.Object[].class
this.back >= 0
return != null
return.getClass().getName() is printable
orig(this.front) >= 0
this.theArray[this.front+1..] == []
this.theArray[orig(this.front)] == null
orig(this.theArray[this.front..]) elements != null
orig(this.theArray[this.back]) != null
this.theArray.getClass().getName() != return.getClass().getName()
(this.currentSize == 0) ==> (this.front == 0)
(this.front == 0) ==> (this.currentSize == 0)
this.currentSize <= this.front
(this.currentSize == 0) ==> (this.back == 0)
this.currentSize - orig(this.currentSize) + 1 == 0
(this.currentSize == 0) ==> (orig(this.front) == 0)
(this.front == 0) ==> (this.back == 0)
this.front >= this.back
(this.front == 0) ==> (orig(this.front) == 0)
this.front >= orig(this.front)
this.back != orig(this.currentSize)
return.getClass().getName() in orig(this.theArray[].getClass().getName())
orig(this.currentSize) <= size(this.theArray[])
this.theArray[this.currentSize+1..] is a subset of orig(this.theArray[post(this.currentSize)..])
this.theArray[this.front..] elements == this.theArray[this.front]
orig(this.theArray[post(this.front)..]) elements == orig(this.theArray[post(this.front)])
===========================================================================
DataStructures.QueueAr.dequeue():::EXIT;condition="not(++front == theArray.length)"
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.back == orig(this.back)
size(this.theArray[]) == orig(size(this.theArray[]))
this.theArray[this.currentSize] == this.theArray[orig(this.currentSize)-1]
this.theArray[this.front] == orig(this.theArray[post(this.front)])
this.theArray[orig(this.front)+1..] == orig(this.theArray[this.front+1..])
this.theArray[0..orig(this.front)-1] == orig(this.theArray[0..this.front-1])
orig(this.theArray[post(this.currentSize)]) == orig(this.theArray[this.currentSize-1])
this.theArray != null
this.theArray.getClass().getName() == java.lang.Object[].class
this.currentSize >= 0
this.front >= 0
this.back >= 0
return != null
return.getClass().getName() is printable
orig(this.front) >= 0
this.theArray[orig(this.front)] == null
orig(this.theArray[this.front]) != null
orig(this.theArray[this.back]) != null
this.theArray.getClass().getName() != return.getClass().getName()
this.currentSize - orig(this.currentSize) + 1 == 0
this.currentSize <= size(this.theArray[])-1
this.front != orig(this.front)
this.front < size(this.theArray[])-1
this.back <= size(this.theArray[])-1
return.getClass().getName() in orig(this.theArray[].getClass().getName())
this.theArray[this.back] in orig(this.theArray[])
orig(this.currentSize) <= size(this.theArray[])
orig(this.front) <= size(this.theArray[])-1
this.theArray[this.currentSize+1..] is a subset of orig(this.theArray[post(this.currentSize)..])
this.theArray[this.back] in orig(this.theArray[0..this.back])
===========================================================================
DataStructures.QueueAr.dequeue():::EXIT;condition="orig(++front == theArray.length)"
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.back == orig(this.back)
orig(this.front) == size(this.theArray[])-1
orig(this.front) == orig(size(this.theArray[]))-1
size(this.theArray[]) == orig(size(this.theArray[]))
this.theArray[this.currentSize] == this.theArray[orig(this.currentSize)-1]
this.theArray[this.currentSize] == this.theArray[orig(this.front)]
this.theArray[0..this.currentSize-1] == orig(this.theArray[0..post(this.currentSize)-1])
this.theArray[0..this.back-1] == orig(this.theArray[0..post(this.back)-1])
this.theArray[0..this.back-1] == orig(this.theArray[0..this.back-1])
this.theArray[0..orig(this.front)-1] == orig(this.theArray[0..this.front-1])
orig(this.theArray[post(this.currentSize)]) == orig(this.theArray[this.currentSize-1])
this.theArray != null
this.theArray.getClass().getName() == java.lang.Object[].class
this.currentSize >= 0
this.front == 0
return != null
return.getClass().getName() is printable
this.theArray[this.currentSize..] elements == null
this.theArray[0..this.currentSize-1] elements != null
this.theArray[0..this.front-1] == []
this.theArray[this.back+1..] elements == null
this.theArray[orig(this.front)..] == [null]
orig(this.theArray[this.front..]) elements != null
orig(this.theArray[this.back]) != null
this.theArray.getClass().getName() != return.getClass().getName()
this.currentSize >= this.front
this.currentSize - orig(this.currentSize) + 1 == 0
(orig(this.front) == 0) ==> (this.currentSize == 0)
this.currentSize <= orig(this.front)
this.front <= this.back
this.front < orig(this.currentSize)
this.front <= orig(this.front)
(orig(this.front) == 0) ==> (this.back == 0)
this.back <= orig(this.front)
return.getClass().getName() in orig(this.theArray[].getClass().getName())
orig(this.currentSize) <= size(this.theArray[])
this.theArray[this.currentSize..] elements == this.theArray[this.currentSize]
this.theArray[this.currentSize+1..] elements == orig(this.theArray[post(this.currentSize)])
this.theArray[this.currentSize+1..] is a subsequence of orig(this.theArray[post(this.currentSize)..])
this.theArray[this.currentSize+1..] is a subset of orig(this.theArray[post(this.currentSize)..])
this.theArray[this.currentSize+1..] is a subset of orig(this.theArray[0..post(this.currentSize)])
this.theArray[0..this.front] elements == this.theArray[this.front]
orig(this.theArray[0..post(this.front)]) elements == orig(this.theArray[post(this.front)])
orig(this.theArray[this.front..]) elements == orig(this.theArray[this.front])
===========================================================================
DataStructures.QueueAr.dequeue():::EXIT;condition="not(orig(++front == theArray.length))"
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.back == orig(this.back)
size(this.theArray[]) == orig(size(this.theArray[]))
this.theArray[this.currentSize] == this.theArray[orig(this.currentSize)-1]
this.theArray[this.front] == orig(this.theArray[post(this.front)])
this.theArray[this.front-1] == this.theArray[orig(this.front)]
this.theArray[this.front..] == orig(this.theArray[post(this.front)..])
this.theArray[this.front..] == orig(this.theArray[this.front+1..])
this.theArray[this.front+1..] == orig(this.theArray[post(this.front)+1..])
this.theArray[0..orig(this.front)-1] == orig(this.theArray[0..this.front-1])
orig(this.theArray[post(this.currentSize)]) == orig(this.theArray[this.currentSize-1])
orig(this.theArray[post(this.front)-1]) == orig(this.theArray[this.front])
this.theArray != null
this.theArray.getClass().getName() == java.lang.Object[].class
this.currentSize >= 0
this.front >= 1
this.back >= 0
return != null
return.getClass().getName() is printable
orig(this.front) >= 0
this.theArray[this.front-1] == null
orig(this.theArray[this.front]) != null
orig(this.theArray[this.back]) != null
this.theArray.getClass().getName() != return.getClass().getName()
this.currentSize - orig(this.currentSize) + 1 == 0
this.currentSize <= size(this.theArray[])-1
this.front - orig(this.front) - 1 == 0
this.front <= size(this.theArray[])-1
this.back <= size(this.theArray[])-1
return.getClass().getName() in orig(this.theArray[].getClass().getName())
this.theArray[this.currentSize] in orig(this.theArray[])
this.theArray[this.back] in orig(this.theArray[])
orig(this.currentSize) <= size(this.theArray[])
orig(this.front) < size(this.theArray[])-1
this.theArray[this.currentSize] in orig(this.theArray[0..post(this.currentSize)])
this.theArray[this.currentSize+1..] is a subset of orig(this.theArray[post(this.currentSize)..])
this.theArray[this.back] in orig(this.theArray[this.back..])
this.theArray[this.back] in orig(this.theArray[0..this.back])
===========================================================================
DataStructures.QueueAr.dequeueAll():::ENTER
this.currentSize == size(this.theArray[])
this.back == size(this.theArray[])-1
this.theArray[this.currentSize-1] == this.theArray[this.back]
(this.currentSize == 1)  <==>  (this.front == this.back)
(this.currentSize == 1)  ==>  (this has only one value)
(this.currentSize == 1)  ==>  (this.back is a pointer)
(this.currentSize == 1)  ==>  (this.theArray has only one value)
(this.currentSize == 1)  ==>  (this.theArray[0..this.back-1] == [])
(this.currentSize == 1)  ==>  (this.theArray[0..this.front] contains no nulls and has only one value, of length 1)
(this.currentSize == 1)  ==>  (this.theArray[0..this.front] elements == this.theArray[this.back])
(this.currentSize == 1)  ==>  (this.theArray[0..this.front] elements has only one value)
(this.currentSize == 1)  ==>  (this.theArray[] contains no nulls and has only one value, of length 1)
(this.currentSize == 1)  ==>  (this.theArray[] elements == this.theArray[this.back])
(this.currentSize == 1)  ==>  (this.theArray[] elements == this.theArray[this.front])
(this.currentSize == 1)  ==>  (this.theArray[] elements has only one value)
(this.currentSize == 1)  ==>  (this.theArray[].getClass().getName() == [java.lang.Object])
(this.currentSize == 1)  ==>  (this.theArray[].getClass().getName() elements == java.lang.Object.class)
(this.currentSize == 1)  ==>  (this.theArray[this.back..] contains no nulls and has only one value, of length 1)
(this.currentSize == 1)  ==>  (this.theArray[this.back..] elements == this.theArray[this.front])
(this.currentSize == 1)  ==>  (this.theArray[this.back..] elements has only one value)
(this.currentSize == 1)  ==>  (this.theArray[this.front+1..] == [])
this.front == 0
this.theArray[this.currentSize..] == []
this.theArray[0..this.front] elements == this.theArray[this.front]
this.theArray[this.back..] elements == this.theArray[this.back]
===========================================================================
DataStructures.QueueAr.dequeueAll():::ENTER;condition="currentSize == 0"
===========================================================================
DataStructures.QueueAr.dequeueAll():::ENTER;condition="not(currentSize == theArray.length)"
this.currentSize == size(this.theArray[])
this.back == size(this.theArray[])-1
this.theArray[this.currentSize-1] == this.theArray[this.back]
this.theArray.getClass().getName() == java.lang.Object[].class
this.front == 0
this.theArray[this.currentSize..] == []
this.theArray[0..this.front] elements == this.theArray[this.front]
this.theArray[this.back..] elements == this.theArray[this.back]
===========================================================================
DataStructures.QueueAr.dequeueAll():::ENTER;condition="isEmpty()"
this.currentSize == size(this.theArray[])
this.back == size(this.theArray[])-1
this.theArray[this.currentSize-1] == this.theArray[this.back]
this.theArray.getClass().getName() == java.lang.Object[].class
this.front == 0
this.theArray[this.currentSize..] == []
this.theArray[0..this.front] elements == this.theArray[this.front]
this.theArray[this.back..] elements == this.theArray[this.back]
===========================================================================
DataStructures.QueueAr.dequeueAll():::ENTER;condition="++front == theArray.length"
this.currentSize == size(this.theArray[])
this.front == this.back
this.front == size(this.theArray[])-1
this.theArray[this.currentSize-1] == this.theArray[this.front]
this has only one value
this.theArray has only one value
this.theArray.getClass().getName() == java.lang.Object[].class
this.theArray[] contains no nulls and has only one value, of length 1
this.theArray[] elements has only one value
this.theArray[].getClass().getName() == [java.lang.Object]
this.theArray[].getClass().getName() elements == java.lang.Object.class
this.currentSize == 1
this.theArray[this.currentSize..] == []
this.theArray[] elements == this.theArray[this.front]
===========================================================================
DataStructures.QueueAr.dequeueAll():::ENTER;condition="not(++front == theArray.length)"
this.currentSize == size(this.theArray[])
this.back == size(this.theArray[])-1
this.theArray[this.currentSize-1] == this.theArray[this.back]
this.theArray.getClass().getName() == java.lang.Object[].class
this.currentSize one of { 2, 10, 30 }
this.front == 0
this.theArray[this.currentSize..] == []
this.theArray[0..this.front] elements == this.theArray[this.front]
this.theArray[this.back..] elements == this.theArray[this.back]
===========================================================================
DataStructures.QueueAr.dequeueAll():::ENTER;condition="++back == theArray.length"
this.currentSize == size(this.theArray[])
this.back == size(this.theArray[])-1
this.theArray[this.currentSize-1] == this.theArray[this.back]
this.theArray.getClass().getName() == java.lang.Object[].class
this.front == 0
this.theArray[this.currentSize..] == []
this.theArray[0..this.front] elements == this.theArray[this.front]
this.theArray[this.back..] elements == this.theArray[this.back]
===========================================================================
DataStructures.QueueAr.dequeueAll():::ENTER;condition="not(isFull())"
this.currentSize == size(this.theArray[])
this.back == size(this.theArray[])-1
this.theArray[this.currentSize-1] == this.theArray[this.back]
this.theArray.getClass().getName() == java.lang.Object[].class
this.front == 0
this.theArray[this.currentSize..] == []
this.theArray[0..this.front] elements == this.theArray[this.front]
this.theArray[this.back..] elements == this.theArray[this.back]
===========================================================================
DataStructures.QueueAr.dequeueAll():::EXIT
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.currentSize == this.front
this.currentSize == orig(this.front)
this.back == orig(this.back)
this.back == size(this.theArray[])-1
this.back == orig(size(this.theArray[]))-1
orig(this.currentSize) == size(this.theArray[])
this.theArray[this.currentSize] == this.theArray[this.back]
this.theArray[this.currentSize] == this.theArray[orig(this.currentSize)-1]
this.theArray[this.currentSize] == this.theArray[orig(this.back)]
(orig(this.currentSize) == 1)  <==>  (this.currentSize == this.back)
(orig(this.currentSize) == 1)  ==>  (orig(this) has only one value)
(orig(this.currentSize) == 1)  ==>  (orig(this.theArray[0..this.back-1]) == [])
(orig(this.currentSize) == 1)  ==>  (orig(this.theArray[0..this.front]) contains no nulls and has only one value, of length 1)
(orig(this.currentSize) == 1)  ==>  (orig(this.theArray[0..this.front]) elements == orig(this.theArray[this.back]))
(orig(this.currentSize) == 1)  ==>  (orig(this.theArray[0..this.front]) elements has only one value)
(orig(this.currentSize) == 1)  ==>  (orig(this.theArray[]) contains no nulls and has only one value, of length 1)
(orig(this.currentSize) == 1)  ==>  (orig(this.theArray[]) elements == orig(this.theArray[this.back]))
(orig(this.currentSize) == 1)  ==>  (orig(this.theArray[]) elements == orig(this.theArray[this.front]))
(orig(this.currentSize) == 1)  ==>  (orig(this.theArray[]) elements has only one value)
(orig(this.currentSize) == 1)  ==>  (orig(this.theArray[].getClass().getName()) == [java.lang.Object])
(orig(this.currentSize) == 1)  ==>  (orig(this.theArray[].getClass().getName()) elements == java.lang.Object.class)
(orig(this.currentSize) == 1)  ==>  (orig(this.theArray[this.back..]) contains no nulls and has only one value, of length 1)
(orig(this.currentSize) == 1)  ==>  (orig(this.theArray[this.back..]) elements == orig(this.theArray[this.front]))
(orig(this.currentSize) == 1)  ==>  (orig(this.theArray[this.back..]) elements has only one value)
(orig(this.currentSize) == 1)  ==>  (orig(this.theArray[this.front+1..]) == [])
(orig(this.currentSize) == 1)  ==>  (this.back is a pointer)
(orig(this.currentSize) == 1)  ==>  (this.theArray has only one value)
(orig(this.currentSize) == 1)  ==>  (this.theArray[] == [null])
(orig(this.currentSize) == 1)  ==>  (this.theArray[].getClass().getName() == [null])
(orig(this.currentSize) == 1)  ==>  (this.theArray[this.currentSize+1..] == [])
this.theArray[] elements == null
this.theArray[].getClass().getName() elements == null
this.currentSize == 0
this.theArray[0..this.currentSize] == [null]
this.theArray[0..this.currentSize-1] == []
this.theArray[] elements == this.theArray[this.currentSize]
===========================================================================
DataStructures.QueueAr.dequeueAll():::EXIT;condition="currentSize == 0"
===========================================================================
DataStructures.QueueAr.dequeueAll():::EXIT;condition="not(orig(currentSize == 0))"
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.currentSize == this.front
this.currentSize == orig(this.front)
this.back == orig(this.back)
this.back == size(this.theArray[])-1
this.back == orig(size(this.theArray[]))-1
orig(this.currentSize) == size(this.theArray[])
orig(this.currentSize) == orig(size(this.theArray[]))
this.theArray[this.currentSize] == this.theArray[this.back]
this.theArray[this.currentSize] == this.theArray[orig(this.currentSize)-1]
this.theArray[this.currentSize] == this.theArray[orig(this.back)]
orig(this.theArray[this.currentSize-1]) == orig(this.theArray[this.back])
this.theArray.getClass().getName() == java.lang.Object[].class
this.theArray[] elements == null
this.theArray[].getClass().getName() elements == null
this.currentSize == 0
this.theArray[0..this.currentSize] == [null]
this.theArray[0..this.currentSize-1] == []
this.theArray[] elements == this.theArray[this.currentSize]
orig(this.theArray[0..this.front]) elements == orig(this.theArray[this.front])
orig(this.theArray[this.back..]) elements == orig(this.theArray[this.back])
===========================================================================
DataStructures.QueueAr.dequeueAll():::EXIT;condition="not(currentSize == theArray.length)"
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.currentSize == this.front
this.currentSize == orig(this.front)
this.back == orig(this.back)
this.back == size(this.theArray[])-1
this.back == orig(size(this.theArray[]))-1
orig(this.currentSize) == size(this.theArray[])
this.theArray[this.currentSize] == this.theArray[this.back]
this.theArray[this.currentSize] == this.theArray[orig(this.currentSize)-1]
this.theArray[this.currentSize] == this.theArray[orig(this.back)]
this.theArray.getClass().getName() == java.lang.Object[].class
this.theArray[] elements == null
this.theArray[].getClass().getName() elements == null
this.currentSize == 0
this.theArray[0..this.currentSize] == [null]
this.theArray[0..this.currentSize-1] == []
this.theArray[] elements == this.theArray[this.currentSize]
===========================================================================
DataStructures.QueueAr.dequeueAll():::EXIT;condition="orig(currentSize == theArray.length)"
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.currentSize == this.front
this.currentSize == orig(this.front)
this.back == orig(this.back)
this.back == size(this.theArray[])-1
this.back == orig(size(this.theArray[]))-1
orig(this.currentSize) == size(this.theArray[])
orig(this.currentSize) == orig(size(this.theArray[]))
this.theArray[this.currentSize] == this.theArray[this.back]
this.theArray[this.currentSize] == this.theArray[orig(this.currentSize)-1]
this.theArray[this.currentSize] == this.theArray[orig(this.back)]
orig(this.theArray[this.currentSize-1]) == orig(this.theArray[this.back])
this.theArray.getClass().getName() == java.lang.Object[].class
this.theArray[] elements == null
this.theArray[].getClass().getName() elements == null
this.currentSize == 0
this.theArray[0..this.currentSize] == [null]
this.theArray[0..this.currentSize-1] == []
this.theArray[] elements == this.theArray[this.currentSize]
orig(this.theArray[0..this.front]) elements == orig(this.theArray[this.front])
orig(this.theArray[this.back..]) elements == orig(this.theArray[this.back])
===========================================================================
DataStructures.QueueAr.dequeueAll():::EXIT;condition="isEmpty()"
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.currentSize == this.front
this.currentSize == orig(this.front)
this.back == orig(this.back)
this.back == size(this.theArray[])-1
this.back == orig(size(this.theArray[]))-1
orig(this.currentSize) == size(this.theArray[])
this.theArray[this.currentSize] == this.theArray[this.back]
this.theArray[this.currentSize] == this.theArray[orig(this.currentSize)-1]
this.theArray[this.currentSize] == this.theArray[orig(this.back)]
this.theArray.getClass().getName() == java.lang.Object[].class
this.theArray[] elements == null
this.theArray[].getClass().getName() elements == null
this.currentSize == 0
this.theArray[0..this.currentSize] == [null]
this.theArray[0..this.currentSize-1] == []
this.theArray[] elements == this.theArray[this.currentSize]
===========================================================================
DataStructures.QueueAr.dequeueAll():::EXIT;condition="not(orig(isEmpty()))"
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.currentSize == this.front
this.currentSize == orig(this.front)
this.back == orig(this.back)
this.back == size(this.theArray[])-1
this.back == orig(size(this.theArray[]))-1
orig(this.currentSize) == size(this.theArray[])
orig(this.currentSize) == orig(size(this.theArray[]))
this.theArray[this.currentSize] == this.theArray[this.back]
this.theArray[this.currentSize] == this.theArray[orig(this.currentSize)-1]
this.theArray[this.currentSize] == this.theArray[orig(this.back)]
orig(this.theArray[this.currentSize-1]) == orig(this.theArray[this.back])
this.theArray.getClass().getName() == java.lang.Object[].class
this.theArray[] elements == null
this.theArray[].getClass().getName() elements == null
this.currentSize == 0
this.theArray[0..this.currentSize] == [null]
this.theArray[0..this.currentSize-1] == []
this.theArray[] elements == this.theArray[this.currentSize]
orig(this.theArray[0..this.front]) elements == orig(this.theArray[this.front])
orig(this.theArray[this.back..]) elements == orig(this.theArray[this.back])
===========================================================================
DataStructures.QueueAr.dequeueAll():::EXIT;condition="++front == theArray.length"
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.currentSize == this.front
this.currentSize == this.back
this.currentSize == orig(this.front)
this.currentSize == orig(this.back)
this.currentSize == size(this.theArray[])-1
this.currentSize == orig(size(this.theArray[]))-1
orig(this.currentSize) == size(this.theArray[])
this.theArray[this.currentSize] == this.theArray[orig(this.currentSize)-1]
this.theArray has only one value
this.theArray.getClass().getName() == java.lang.Object[].class
this.theArray[] == [null]
this.theArray[] elements == null
this.theArray[].getClass().getName() == [null]
this.theArray[].getClass().getName() elements == null
this.theArray[this.currentSize+1..] == []
this.theArray[] elements == this.theArray[this.currentSize]
===========================================================================
DataStructures.QueueAr.dequeueAll():::EXIT;condition="not(++front == theArray.length)"
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.currentSize == this.front
this.currentSize == orig(this.front)
this.back == orig(this.back)
this.back == size(this.theArray[])-1
this.back == orig(size(this.theArray[]))-1
orig(this.currentSize) == size(this.theArray[])
this.theArray[this.currentSize] == this.theArray[this.back]
this.theArray[this.currentSize] == this.theArray[this.back-1]
this.theArray[this.currentSize] == this.theArray[orig(this.currentSize)-1]
this.theArray[this.currentSize] == this.theArray[orig(this.back)]
this.theArray[this.currentSize] == this.theArray[orig(this.back)-1]
this.theArray.getClass().getName() == java.lang.Object[].class
this.theArray[] elements == null
this.theArray[].getClass().getName() elements == null
this.currentSize == 0
this.theArray[0..this.currentSize] == [null]
this.theArray[0..this.currentSize-1] == []
this.theArray[] elements == this.theArray[this.currentSize]
===========================================================================
DataStructures.QueueAr.dequeueAll():::EXIT;condition="orig(++front == theArray.length)"
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.currentSize == this.front
this.currentSize == this.back
this.currentSize == orig(this.front)
this.currentSize == orig(this.back)
this.currentSize == size(this.theArray[])-1
this.currentSize == orig(size(this.theArray[]))-1
orig(this.currentSize) == size(this.theArray[])
orig(this.currentSize) == orig(size(this.theArray[]))
this.theArray[this.currentSize] == this.theArray[orig(this.currentSize)-1]
orig(this.theArray[this.currentSize-1]) == orig(this.theArray[this.front])
this.theArray has only one value
this.theArray.getClass().getName() == java.lang.Object[].class
this.theArray[] == [null]
this.theArray[] elements == null
this.theArray[].getClass().getName() == [null]
this.theArray[].getClass().getName() elements == null
orig(this) has only one value
orig(this.theArray[]) contains no nulls and has only one value, of length 1
orig(this.theArray[]) elements has only one value
orig(this.theArray[].getClass().getName()) == [java.lang.Object]
orig(this.theArray[].getClass().getName()) elements == java.lang.Object.class
orig(this.currentSize) == 1
this.theArray[this.currentSize+1..] == []
this.theArray[] elements == this.theArray[this.currentSize]
orig(this.theArray[]) elements == orig(this.theArray[this.front])
===========================================================================
DataStructures.QueueAr.dequeueAll():::EXIT;condition="not(orig(++front == theArray.length))"
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.currentSize == this.front
this.currentSize == orig(this.front)
this.back == orig(this.back)
this.back == size(this.theArray[])-1
this.back == orig(size(this.theArray[]))-1
orig(this.currentSize) == size(this.theArray[])
orig(this.currentSize) == orig(size(this.theArray[]))
this.theArray[this.currentSize] == this.theArray[this.back]
this.theArray[this.currentSize] == this.theArray[this.back-1]
this.theArray[this.currentSize] == this.theArray[orig(this.currentSize)-1]
this.theArray[this.currentSize] == this.theArray[orig(this.back)]
this.theArray[this.currentSize] == this.theArray[orig(this.back)-1]
orig(this.theArray[this.currentSize-1]) == orig(this.theArray[this.back])
this.theArray.getClass().getName() == java.lang.Object[].class
this.theArray[] elements == null
this.theArray[].getClass().getName() elements == null
this.currentSize == 0
orig(this.currentSize) one of { 2, 10, 30 }
this.theArray[0..this.currentSize] == [null]
this.theArray[0..this.currentSize-1] == []
this.theArray[] elements == this.theArray[this.currentSize]
orig(this.theArray[0..this.front]) elements == orig(this.theArray[this.front])
orig(this.theArray[this.back..]) elements == orig(this.theArray[this.back])
===========================================================================
DataStructures.QueueAr.dequeueAll():::EXIT;condition="++back == theArray.length"
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.currentSize == this.front
this.currentSize == orig(this.front)
this.back == orig(this.back)
this.back == size(this.theArray[])-1
this.back == orig(size(this.theArray[]))-1
orig(this.currentSize) == size(this.theArray[])
this.theArray[this.currentSize] == this.theArray[this.back]
this.theArray[this.currentSize] == this.theArray[orig(this.currentSize)-1]
this.theArray[this.currentSize] == this.theArray[orig(this.back)]
this.theArray.getClass().getName() == java.lang.Object[].class
this.theArray[] elements == null
this.theArray[].getClass().getName() elements == null
this.currentSize == 0
this.theArray[0..this.currentSize] == [null]
this.theArray[0..this.currentSize-1] == []
this.theArray[] elements == this.theArray[this.currentSize]
===========================================================================
DataStructures.QueueAr.dequeueAll():::EXIT;condition="not(isFull())"
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.currentSize == this.front
this.currentSize == orig(this.front)
this.back == orig(this.back)
this.back == size(this.theArray[])-1
this.back == orig(size(this.theArray[]))-1
orig(this.currentSize) == size(this.theArray[])
this.theArray[this.currentSize] == this.theArray[this.back]
this.theArray[this.currentSize] == this.theArray[orig(this.currentSize)-1]
this.theArray[this.currentSize] == this.theArray[orig(this.back)]
this.theArray.getClass().getName() == java.lang.Object[].class
this.theArray[] elements == null
this.theArray[].getClass().getName() elements == null
this.currentSize == 0
this.theArray[0..this.currentSize] == [null]
this.theArray[0..this.currentSize-1] == []
this.theArray[] elements == this.theArray[this.currentSize]
===========================================================================
DataStructures.QueueAr.dequeueAll():::EXIT;condition="orig(++back == theArray.length)"
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.currentSize == this.front
this.currentSize == orig(this.front)
this.back == orig(this.back)
this.back == size(this.theArray[])-1
this.back == orig(size(this.theArray[]))-1
orig(this.currentSize) == size(this.theArray[])
orig(this.currentSize) == orig(size(this.theArray[]))
this.theArray[this.currentSize] == this.theArray[this.back]
this.theArray[this.currentSize] == this.theArray[orig(this.currentSize)-1]
this.theArray[this.currentSize] == this.theArray[orig(this.back)]
orig(this.theArray[this.currentSize-1]) == orig(this.theArray[this.back])
this.theArray.getClass().getName() == java.lang.Object[].class
this.theArray[] elements == null
this.theArray[].getClass().getName() elements == null
this.currentSize == 0
this.theArray[0..this.currentSize] == [null]
this.theArray[0..this.currentSize-1] == []
this.theArray[] elements == this.theArray[this.currentSize]
orig(this.theArray[0..this.front]) elements == orig(this.theArray[this.front])
orig(this.theArray[this.back..]) elements == orig(this.theArray[this.back])
===========================================================================
DataStructures.QueueAr.dequeueAll():::EXIT;condition="orig(isFull())"
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.currentSize == this.front
this.currentSize == orig(this.front)
this.back == orig(this.back)
this.back == size(this.theArray[])-1
this.back == orig(size(this.theArray[]))-1
orig(this.currentSize) == size(this.theArray[])
orig(this.currentSize) == orig(size(this.theArray[]))
this.theArray[this.currentSize] == this.theArray[this.back]
this.theArray[this.currentSize] == this.theArray[orig(this.currentSize)-1]
this.theArray[this.currentSize] == this.theArray[orig(this.back)]
orig(this.theArray[this.currentSize-1]) == orig(this.theArray[this.back])
this.theArray.getClass().getName() == java.lang.Object[].class
this.theArray[] elements == null
this.theArray[].getClass().getName() elements == null
this.currentSize == 0
this.theArray[0..this.currentSize] == [null]
this.theArray[0..this.currentSize-1] == []
this.theArray[] elements == this.theArray[this.currentSize]
orig(this.theArray[0..this.front]) elements == orig(this.theArray[this.front])
orig(this.theArray[this.back..]) elements == orig(this.theArray[this.back])
===========================================================================
DataStructures.QueueAr.enqueue(java.lang.Object):::ENTER
(this.currentSize == size(this.theArray[])-1)  ==>  ((this.currentSize == 0) ==> (this.back == 0))
(this.currentSize == size(this.theArray[])-1)  ==>  (this.currentSize >= this.back)
(this.currentSize == size(this.theArray[])-1)  ==>  (this.currentSize >= this.front)
(this.currentSize == size(this.theArray[])-1)  ==>  (this.theArray[0..this.currentSize] contains no duplicates)
(this.currentSize == size(this.theArray[])-1)  ==>  (this.theArray[] contains no duplicates)
(this.currentSize == size(this.theArray[])-1)  ==>  (this.theArray[this.currentSize+1..] == [])
(this.currentSize == size(this.theArray[])-1)  ==>  (this.theArray[this.currentSize..] elements == this.theArray[this.currentSize])
(this.front == size(this.theArray[])-1)  ==>  ((this.currentSize == 0) ==> (size(this.theArray[])-1 == 0))
(this.front == size(this.theArray[])-1)  ==>  ((this.currentSize == 0) ==> (this.back == 0))
(this.front == size(this.theArray[])-1)  ==>  ((this.front == 0) ==> (this.back == 0))
(this.front == size(this.theArray[])-1)  ==>  ((this.front == 0) ==> (this.currentSize == 0))
(this.front == size(this.theArray[])-1)  ==>  (this.currentSize <= this.front)
(this.front == size(this.theArray[])-1)  ==>  (this.currentSize >= this.back)
(this.front == size(this.theArray[])-1)  ==>  (this.front >= this.back)
(this.front == size(this.theArray[])-1)  ==>  (this.theArray[this.front+1..] == [])
(this.front == size(this.theArray[])-1)  ==>  (this.theArray[this.front..] elements == this.theArray[this.front])
x != null
x.getClass().getName() is printable
this.theArray.getClass().getName() != x.getClass().getName()
(this.currentSize == 0) ==> (this.front == 0)
(size(this.theArray[])-1 == 0) ==> (this.currentSize == 0)
this.currentSize <= size(this.theArray[])-1
===========================================================================
DataStructures.QueueAr.enqueue(java.lang.Object):::ENTER;condition="not(currentSize == 0)"
===========================================================================
DataStructures.QueueAr.enqueue(java.lang.Object):::ENTER;condition="currentSize == theArray.length"
this.currentSize == size(this.theArray[])-1
this.theArray != null
this.theArray.getClass().getName() == java.lang.Object[].class
this.theArray[] contains no duplicates
this.front >= 0
this.back >= 0
x != null
x.getClass().getName() is printable
this.theArray[this.currentSize+1..] == []
this.theArray.getClass().getName() != x.getClass().getName()
(this.currentSize == 0) ==> (this.front == 0)
this.currentSize >= this.front
(this.currentSize == 0) ==> (this.back == 0)
this.currentSize >= this.back
this.theArray[this.currentSize..] elements == this.theArray[this.currentSize]
===========================================================================
DataStructures.QueueAr.enqueue(java.lang.Object):::ENTER;condition="not(currentSize == theArray.length)"
this.theArray != null
this.theArray.getClass().getName() == java.lang.Object[].class
this.currentSize >= 0
this.front >= 0
this.back >= 0
x != null
x.getClass().getName() is printable
this.theArray.getClass().getName() != x.getClass().getName()
(this.currentSize == 0) ==> (this.front == 0)
this.currentSize < size(this.theArray[])-1
this.front <= size(this.theArray[])-1
this.back <= size(this.theArray[])-1
===========================================================================
DataStructures.QueueAr.enqueue(java.lang.Object):::ENTER;condition="not(isEmpty())"
this.theArray != null
this.theArray.getClass().getName() == java.lang.Object[].class
this.currentSize >= 0
this.front >= 0
this.back >= 0
x != null
x.getClass().getName() is printable
this.theArray.getClass().getName() != x.getClass().getName()
(this.currentSize == 0) ==> (this.front == 0)
(size(this.theArray[])-1 == 0) ==> (this.currentSize == 0)
this.currentSize <= size(this.theArray[])-1
(size(this.theArray[])-1 == 0) ==> (this.front == 0)
this.front <= size(this.theArray[])-1
(size(this.theArray[])-1 == 0) ==> (this.back == 0)
this.back <= size(this.theArray[])-1
===========================================================================
DataStructures.QueueAr.enqueue(java.lang.Object):::ENTER;condition="++front == theArray.length"
this.front == size(this.theArray[])-1
this.theArray != null
this.theArray.getClass().getName() == java.lang.Object[].class
this.back >= 0
x != null
x.getClass().getName() is printable
this.theArray[this.front+1..] == []
this.theArray.getClass().getName() != x.getClass().getName()
(this.currentSize == 0) ==> (this.front == 0)
(this.front == 0) ==> (this.currentSize == 0)
this.currentSize <= this.front
(this.currentSize == 0) ==> (this.back == 0)
this.currentSize >= this.back
(this.front == 0) ==> (this.back == 0)
this.front >= this.back
this.theArray[this.front..] elements == this.theArray[this.front]
===========================================================================
DataStructures.QueueAr.enqueue(java.lang.Object):::ENTER;condition="not(++front == theArray.length)"
this.theArray != null
this.theArray.getClass().getName() == java.lang.Object[].class
this.currentSize >= 0
this.front >= 0
this.back >= 0
x != null
x.getClass().getName() is printable
this.theArray.getClass().getName() != x.getClass().getName()
(this.currentSize == 0) ==> (this.front == 0)
this.currentSize <= size(this.theArray[])-1
this.front < size(this.theArray[])-1
this.back <= size(this.theArray[])-1
===========================================================================
DataStructures.QueueAr.enqueue(java.lang.Object):::EXIT
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.front == orig(this.front)
orig(x) == this.theArray[this.back]
size(this.theArray[]) == orig(size(this.theArray[]))
this.theArray[this.currentSize-1] == this.theArray[orig(this.currentSize)]
this.theArray[this.back+1..] == orig(this.theArray[post(this.back)+1..])
this.theArray[0..this.back-1] == orig(this.theArray[0..post(this.back)-1])
orig(this.theArray[post(this.currentSize)-1]) == orig(this.theArray[this.currentSize])
(this.back < size(this.theArray[])-1)  ==>  (orig(this.theArray[this.currentSize]) in this.theArray[])
(this.back < size(this.theArray[])-1)  ==>  (orig(this.theArray[this.currentSize]) in this.theArray[orig(this.currentSize)..])
(this.back < size(this.theArray[])-1)  ==>  (orig(this.theArray[this.front]) in this.theArray[])
(this.back < size(this.theArray[])-1)  ==>  (orig(this.theArray[this.front]) in this.theArray[this.front..])
(this.back < size(this.theArray[])-1)  ==>  (this.back != orig(this.back))
(this.back < size(this.theArray[])-1)  ==>  (this.theArray[orig(this.back)] == orig(this.theArray[this.back]))
(this.back == 0)  <==>  (orig(this.back) == size(this.theArray[])-1)
(this.back == 0)  <==>  (this.back <= orig(this.back))
(this.back == 0)  ==>  ((orig(this.back) == 0) ==> (orig(this.currentSize) == 0))
(this.back == 0)  ==>  ((orig(this.back) == 0) ==> (this.front == 0))
(this.back == 0)  ==>  ((this.front == 0) ==> (orig(this.currentSize) == 0))
(this.back == 0)  ==>  ((this.front >> orig(this.currentSize) == 0))
(this.back == 0)  ==>  (orig(this.currentSize) <= orig(this.back))
(this.back == 0)  ==>  (orig(this.theArray[0..post(this.back)]) == [null])
(this.back == 0)  ==>  (orig(this.theArray[0..post(this.back)]) elements == null)
(this.back == 0)  ==>  (orig(this.theArray[0..post(this.back)]) elements == orig(this.theArray[post(this.back)]))
(this.back == 0)  ==>  (orig(this.theArray[0..this.front-1]) elements == null)
(this.back == 0)  ==>  (orig(this.theArray[0..this.front-1]) elements == orig(this.theArray[post(this.back)]))
(this.back == 0)  ==>  (orig(this.theArray[this.back+1..]) == [])
(this.back == 0)  ==>  (orig(this.theArray[this.back..]) elements == orig(this.theArray[this.back]))
(this.back == 0)  ==>  (this.back <= orig(this.currentSize))
(this.back == 0)  ==>  (this.back is a pointer)
(this.back == 0)  ==>  (this.currentSize > this.back)
(this.back == 0)  ==>  (this.currentSize >= 1)
(this.back == 0)  ==>  (this.front <= orig(this.back))
(this.back == 0)  ==>  (this.front >= this.back)
(this.back == 0)  ==>  (this.theArray[0..this.back-1] == [])
(this.back == 0)  ==>  (this.theArray[0..this.back] elements != null)
(this.back == 0)  ==>  (this.theArray[0..this.back] elements == orig(x))
(this.back == 0)  ==>  (this.theArray[orig(this.back)+1..] == [])
(this.back == 0)  ==>  (this.theArray[orig(this.back)..] elements == this.theArray[orig(this.back)])
(this.back == 0)  ==>  (this.theArray[this.currentSize..] == orig(this.theArray[post(this.currentSize)..]))
(this.back == 0)  ==>  (this.theArray[this.front+1..] == orig(this.theArray[this.front+1..]))
(this.back == size(this.theArray[])-1)  ==>  ((orig(this.back) == 0) ==> (this.front == 0))
(this.back == size(this.theArray[])-1)  ==>  ((orig(this.back) >> this.currentSize == 0))
(this.back == size(this.theArray[])-1)  ==>  ((orig(this.currentSize) == 0) ==> (orig(this.back) == 0))
(this.back == size(this.theArray[])-1)  ==>  ((orig(this.currentSize) == 0) ==> (size(this.theArray[])-1 == 0))
(this.back == size(this.theArray[])-1)  ==>  ((size(this.theArray[]) >> this.currentSize == 0))
(this.back == size(this.theArray[])-1)  ==>  ((size(this.theArray[])-1 >> this.currentSize == 0))
(this.back == size(this.theArray[])-1)  ==>  ((this.back == 0) ==> (orig(this.back) == 0))
(this.back == size(this.theArray[])-1)  ==>  ((this.back == 0) ==> (orig(this.currentSize) == 0))
(this.back == size(this.theArray[])-1)  ==>  ((this.back == 0) ==> (this.front == 0))
(this.back == size(this.theArray[])-1)  ==>  (orig(this.theArray[0..this.front-1]) elements == null)
(this.back == size(this.theArray[])-1)  ==>  (orig(this.theArray[0..this.front-1]) elements == orig(this.theArray[post(this.back)]))
(this.back == size(this.theArray[])-1)  ==>  (orig(this.theArray[post(this.back)..]) == [null])
(this.back == size(this.theArray[])-1)  ==>  (orig(this.theArray[post(this.back)..]) elements == null)
(this.back == size(this.theArray[])-1)  ==>  (orig(this.theArray[post(this.back)..]) elements == orig(this.theArray[post(this.back)]))
(this.back == size(this.theArray[])-1)  ==>  (orig(this.theArray[this.back+1..]) elements == null)
(this.back == size(this.theArray[])-1)  ==>  (orig(this.theArray[this.back..]) contains no duplicates)
(this.back == size(this.theArray[])-1)  ==>  (orig(this.theArray[this.front..]) contains no duplicates)
(this.back == size(this.theArray[])-1)  ==>  (this.back >= orig(this.back))
(this.back == size(this.theArray[])-1)  ==>  (this.back >= orig(this.currentSize))
(this.back == size(this.theArray[])-1)  ==>  (this.currentSize + this.front - size(this.theArray[]) == 0)
(this.back == size(this.theArray[])-1)  ==>  (this.currentSize + this.front - size(this.theArray[])-1 - 1 == 0)
(this.back == size(this.theArray[])-1)  ==>  (this.currentSize + this.front - this.back - 1 == 0)
(this.back == size(this.theArray[])-1)  ==>  (this.front + orig(this.currentSize) - size(this.theArray[]) + 1 == 0)
(this.back == size(this.theArray[])-1)  ==>  (this.front + orig(this.currentSize) - size(this.theArray[])-1 == 0)
(this.back == size(this.theArray[])-1)  ==>  (this.front - this.back + orig(this.currentSize) == 0)
(this.back == size(this.theArray[])-1)  ==>  (this.front <= orig(this.back))
(this.back == size(this.theArray[])-1)  ==>  (this.front <= this.back)
(this.back == size(this.theArray[])-1)  ==>  (this.theArray[0..orig(this.back)-1] == orig(this.theArray[0..this.back-1]))
(this.back == size(this.theArray[])-1)  ==>  (this.theArray[0..orig(this.currentSize)-1] == orig(this.theArray[0..this.currentSize-1]))
(this.back == size(this.theArray[])-1)  ==>  (this.theArray[0..this.front-1] == orig(this.theArray[0..this.front-1]))
(this.back == size(this.theArray[])-1)  ==>  (this.theArray[0..this.front-1] elements == null)
(this.back == size(this.theArray[])-1)  ==>  (this.theArray[0..this.front-1] elements == orig(this.theArray[post(this.back)]))
(this.back == size(this.theArray[])-1)  ==>  (this.theArray[this.back+1..] == [])
(this.back == size(this.theArray[])-1)  ==>  (this.theArray[this.back..] elements == orig(x))
(this.back == size(this.theArray[])-1)  ==>  (this.theArray[this.front..] contains no duplicates)
(this.back == size(this.theArray[])-1)  ==>  (this.theArray[this.front..] elements != null)
(this.currentSize <= size(this.theArray[])-1)  <==>  (orig(this.currentSize) < size(this.theArray[])-1)
(this.currentSize <= size(this.theArray[])-1)  ==>  (orig(this.theArray[this.currentSize]) in this.theArray[orig(this.currentSize)..])
(this.currentSize <= size(this.theArray[])-1)  ==>  (orig(this.theArray[this.front]) in this.theArray[this.front..])
(this.currentSize <= size(this.theArray[])-1)  ==>  (this.back != orig(this.back))
(this.currentSize <= size(this.theArray[])-1)  ==>  (this.theArray[] is a superset of orig(this.theArray[]))
(this.currentSize <= size(this.theArray[])-1)  ==>  (this.theArray[orig(this.back)] == orig(this.theArray[this.back]))
(this.currentSize == 1)  <==>  (orig(this.currentSize) == 0)
(this.currentSize == 1)  <==>  (this.front == this.back)
(this.currentSize == 1)  ==>  (orig(this.back) == size(this.theArray[])-1)
(this.currentSize == 1)  ==>  (orig(this.currentSize) <= orig(this.back))
(this.currentSize == 1)  ==>  (orig(this.currentSize) is a pointer)
(this.currentSize == 1)  ==>  (orig(this.theArray[0..post(this.back)]) == [null])
(this.currentSize == 1)  ==>  (orig(this.theArray[0..this.back-1]) elements == this.theArray[orig(this.back)])
(this.currentSize == 1)  ==>  (orig(this.theArray[0..this.back]) elements == null)
(this.currentSize == 1)  ==>  (orig(this.theArray[0..this.back]) elements == orig(this.theArray[post(this.back)]))
(this.currentSize == 1)  ==>  (orig(this.theArray[0..this.back]) elements == orig(this.theArray[this.back]))
(this.currentSize == 1)  ==>  (orig(this.theArray[0..this.back]) elements == orig(this.theArray[this.currentSize]))
(this.currentSize == 1)  ==>  (orig(this.theArray[0..this.back]) elements == orig(this.theArray[this.front]))
(this.currentSize == 1)  ==>  (orig(this.theArray[0..this.currentSize-1]) == [])
(this.currentSize == 1)  ==>  (orig(this.theArray[0..this.currentSize]) == [null])
(this.currentSize == 1)  ==>  (orig(this.theArray[0..this.front-1]) == [])
(this.currentSize == 1)  ==>  (orig(this.theArray[0..this.front]) == [null])
(this.currentSize == 1)  ==>  (orig(this.theArray[]) elements == null)
(this.currentSize == 1)  ==>  (orig(this.theArray[]) elements == orig(this.theArray[post(this.back)]))
(this.currentSize == 1)  ==>  (orig(this.theArray[]) elements == orig(this.theArray[this.back]))
(this.currentSize == 1)  ==>  (orig(this.theArray[]) elements == orig(this.theArray[this.currentSize]))
(this.currentSize == 1)  ==>  (orig(this.theArray[]) elements == orig(this.theArray[this.front]))
(this.currentSize == 1)  ==>  (orig(this.theArray[].getClass().getName()) elements == null)
(this.currentSize == 1)  ==>  (orig(this.theArray[post(this.back)..]) elements == null)
(this.currentSize == 1)  ==>  (orig(this.theArray[post(this.back)..]) elements == orig(this.theArray[post(this.back)]))
(this.currentSize == 1)  ==>  (orig(this.theArray[post(this.back)..]) elements == orig(this.theArray[this.back]))
(this.currentSize == 1)  ==>  (orig(this.theArray[post(this.back)..]) elements == orig(this.theArray[this.currentSize]))
(this.currentSize == 1)  ==>  (orig(this.theArray[post(this.back)..]) elements == orig(this.theArray[this.front]))
(this.currentSize == 1)  ==>  (orig(this.theArray[post(this.currentSize)..]) elements == this.theArray[orig(this.back)])
(this.currentSize == 1)  ==>  (orig(this.theArray[this.back+1..]) == [])
(this.currentSize == 1)  ==>  (orig(this.theArray[this.back..]) == [null])
(this.currentSize == 1)  ==>  (orig(this.theArray[this.currentSize..]) elements == null)
(this.currentSize == 1)  ==>  (orig(this.theArray[this.currentSize..]) elements == orig(this.theArray[post(this.back)]))
(this.currentSize == 1)  ==>  (orig(this.theArray[this.currentSize..]) elements == orig(this.theArray[this.back]))
(this.currentSize == 1)  ==>  (orig(this.theArray[this.currentSize..]) elements == orig(this.theArray[this.currentSize]))
(this.currentSize == 1)  ==>  (orig(this.theArray[this.currentSize..]) elements == orig(this.theArray[this.front]))
(this.currentSize == 1)  ==>  (orig(this.theArray[this.currentSize]) == orig(this.theArray[this.back]))
(this.currentSize == 1)  ==>  (orig(this.theArray[this.front+1..]) elements == this.theArray[orig(this.back)])
(this.currentSize == 1)  ==>  (orig(this.theArray[this.front..]) elements == null)
(this.currentSize == 1)  ==>  (orig(this.theArray[this.front..]) elements == orig(this.theArray[post(this.back)]))
(this.currentSize == 1)  ==>  (orig(this.theArray[this.front..]) elements == orig(this.theArray[this.back]))
(this.currentSize == 1)  ==>  (orig(this.theArray[this.front..]) elements == orig(this.theArray[this.currentSize]))
(this.currentSize == 1)  ==>  (orig(this.theArray[this.front..]) elements == orig(this.theArray[this.front]))
(this.currentSize == 1)  ==>  (orig(x) == this.theArray[this.currentSize-1])
(this.currentSize == 1)  ==>  (orig(x) == this.theArray[this.front])
(this.currentSize == 1)  ==>  (this.back <= orig(this.back))
(this.currentSize == 1)  ==>  (this.back == 0)
(this.currentSize == 1)  ==>  (this.back is a pointer)
(this.currentSize == 1)  ==>  (this.currentSize > this.back)
(this.currentSize == 1)  ==>  (this.currentSize > this.front)
(this.currentSize == 1)  ==>  (this.front <= orig(this.back))
(this.currentSize == 1)  ==>  (this.front == 0)
(this.currentSize == 1)  ==>  (this.front == orig(this.currentSize))
(this.currentSize == 1)  ==>  (this.front is a pointer)
(this.currentSize == 1)  ==>  (this.theArray[0..orig(this.currentSize)-1] == [])
(this.currentSize == 1)  ==>  (this.theArray[0..this.back-1] == [])
(this.currentSize == 1)  ==>  (this.theArray[0..this.back] elements != null)
(this.currentSize == 1)  ==>  (this.theArray[0..this.back] elements == orig(x))
(this.currentSize == 1)  ==>  (this.theArray[0..this.back] elements == this.theArray[this.currentSize-1])
(this.currentSize == 1)  ==>  (this.theArray[0..this.back] elements == this.theArray[this.front])
(this.currentSize == 1)  ==>  (this.theArray[0..this.currentSize-1] elements != null)
(this.currentSize == 1)  ==>  (this.theArray[0..this.currentSize-1] elements == orig(x))
(this.currentSize == 1)  ==>  (this.theArray[0..this.currentSize-1] elements == this.theArray[this.currentSize-1])
(this.currentSize == 1)  ==>  (this.theArray[0..this.currentSize-1] elements == this.theArray[this.front])
(this.currentSize == 1)  ==>  (this.theArray[0..this.front-1] == [])
(this.currentSize == 1)  ==>  (this.theArray[0..this.front] elements != null)
(this.currentSize == 1)  ==>  (this.theArray[0..this.front] elements == orig(x))
(this.currentSize == 1)  ==>  (this.theArray[0..this.front] elements == this.theArray[this.currentSize-1])
(this.currentSize == 1)  ==>  (this.theArray[0..this.front] elements == this.theArray[this.front])
(this.currentSize == 1)  ==>  (this.theArray[orig(this.back)+1..] == [])
(this.currentSize == 1)  ==>  (this.theArray[orig(this.back)..] elements == this.theArray[orig(this.back)])
(this.currentSize == 1)  ==>  (this.theArray[this.back+1..] elements == this.theArray[orig(this.back)])
(this.currentSize == 1)  ==>  (this.theArray[this.currentSize..] == orig(this.theArray[0..this.back-1]))
(this.currentSize == 1)  ==>  (this.theArray[this.currentSize..] == orig(this.theArray[post(this.currentSize)..]))
(this.currentSize == 1)  ==>  (this.theArray[this.currentSize..] == orig(this.theArray[this.front+1..]))
(this.currentSize == 1)  ==>  (this.theArray[this.currentSize..] elements == this.theArray[orig(this.back)])
(this.currentSize == 1)  ==>  (this.theArray[this.front+1..] elements == this.theArray[orig(this.back)])
(this.currentSize == size(this.theArray[]))  <==>  (orig(this.currentSize) == size(this.theArray[])-1)
(this.currentSize == size(this.theArray[]))  ==>  ((orig(this.currentSize) == 0) ==> (orig(this.back) == 0))
(this.currentSize == size(this.theArray[]))  ==>  (orig(this.currentSize) >= orig(this.back))
(this.currentSize == size(this.theArray[]))  ==>  (orig(this.theArray[0..this.currentSize]) contains no duplicates)
(this.currentSize == size(this.theArray[]))  ==>  (orig(this.theArray[]) contains no duplicates)
(this.currentSize == size(this.theArray[]))  ==>  (orig(this.theArray[post(this.currentSize)..]) == [])
(this.currentSize == size(this.theArray[]))  ==>  (orig(this.theArray[this.currentSize..]) elements == orig(this.theArray[this.currentSize]))
(this.currentSize == size(this.theArray[]))  ==>  (this.back <= orig(this.currentSize))
(this.currentSize == size(this.theArray[]))  ==>  (this.front <= orig(this.currentSize))
(this.currentSize == size(this.theArray[]))  ==>  (this.theArray[0..this.currentSize-1] contains no duplicates)
(this.currentSize == size(this.theArray[]))  ==>  (this.theArray[0..this.currentSize-1] elements != null)
(this.currentSize == size(this.theArray[]))  ==>  (this.theArray[] contains no duplicates)
(this.currentSize == size(this.theArray[]))  ==>  (this.theArray[] elements != null)
(this.currentSize == size(this.theArray[]))  ==>  (this.theArray[orig(this.currentSize)..] elements == this.theArray[this.currentSize-1])
(this.currentSize == size(this.theArray[]))  ==>  (this.theArray[this.currentSize..] == [])
(this.currentSize >= 2)  <==>  (orig(this.currentSize) >= 1)
(this.currentSize >= 2)  <==>  (orig(this.theArray[this.back]) != null)
(this.currentSize >= 2)  <==>  (orig(this.theArray[this.front]) != null)
(this.currentSize >= 2)  <==>  (this.front != this.back)
(this.currentSize >= 2)  ==>  ((orig(this.back) >> this.currentSize == 0))
(this.currentSize >= 2)  ==>  (this.back != orig(this.back))
(this.currentSize >= 2)  ==>  (this.currentSize - orig(this.currentSize) - 1 == 0)
(this.currentSize >= 2)  ==>  (this.theArray[orig(this.back)] != null)
(this.currentSize >= 2)  ==>  (this.theArray[orig(this.back)] == orig(this.theArray[this.back]))
(this.currentSize >= 2)  ==>  (this.theArray[this.front] == orig(this.theArray[this.front]))
(this.front < size(this.theArray[])-1)  ==>  (orig(this.theArray[this.front]) in this.theArray[])
(this.front < size(this.theArray[])-1)  ==>  (orig(this.theArray[this.front]) in this.theArray[this.front..])
(this.front < size(this.theArray[])-1)  ==>  (this.back != orig(this.back))
(this.front < size(this.theArray[])-1)  ==>  (this.theArray[orig(this.back)] == orig(this.theArray[this.back]))
(this.front == size(this.theArray[])-1)  ==>  ((orig(this.currentSize) == 0) ==> (orig(this.back) == 0))
(this.front == size(this.theArray[])-1)  ==>  ((orig(this.currentSize) == 0) ==> (size(this.theArray[])-1 == 0))
(this.front == size(this.theArray[])-1)  ==>  ((size(this.theArray[]) >> this.currentSize == 0))
(this.front == size(this.theArray[])-1)  ==>  ((size(this.theArray[])-1 >> this.currentSize == 0))
(this.front == size(this.theArray[])-1)  ==>  ((this.front == 0) ==> (orig(this.back) == 0))
(this.front == size(this.theArray[])-1)  ==>  ((this.front == 0) ==> (orig(this.currentSize) == 0))
(this.front == size(this.theArray[])-1)  ==>  ((this.front == 0) ==> (this.back == 0))
(this.front == size(this.theArray[])-1)  ==>  (orig(this.currentSize) >= orig(this.back))
(this.front == size(this.theArray[])-1)  ==>  (orig(this.theArray[this.front+1..]) == [])
(this.front == size(this.theArray[])-1)  ==>  (orig(this.theArray[this.front..]) elements == orig(this.theArray[this.front]))
(this.front == size(this.theArray[])-1)  ==>  (this.back <= orig(this.currentSize))
(this.front == size(this.theArray[])-1)  ==>  (this.currentSize > orig(this.back))
(this.front == size(this.theArray[])-1)  ==>  (this.currentSize > this.back)
(this.front == size(this.theArray[])-1)  ==>  (this.front >= orig(this.back))
(this.front == size(this.theArray[])-1)  ==>  (this.front >= orig(this.currentSize))
(this.front == size(this.theArray[])-1)  ==>  (this.front >= this.back)
(this.front == size(this.theArray[])-1)  ==>  (this.theArray[0..orig(this.back)] elements != null)
(this.front == size(this.theArray[])-1)  ==>  (this.theArray[0..this.back] elements != null)
(this.front == size(this.theArray[])-1)  ==>  (this.theArray[this.currentSize..] == orig(this.theArray[post(this.currentSize)..]))
(this.front == size(this.theArray[])-1)  ==>  (this.theArray[this.front+1..] == [])
(this.front == size(this.theArray[])-1)  ==>  (this.theArray[this.front..] elements != null)
(this.front == size(this.theArray[])-1)  ==>  (this.theArray[this.front..] elements == this.theArray[this.front])
this.currentSize >= 1
this.theArray[this.front] != null
orig(this.theArray[post(this.back)]) == null
this.theArray.getClass().getName() != orig(x.getClass().getName())
orig(x.getClass().getName()) in this.theArray[].getClass().getName()
(this.front >> this.currentSize == 0)
(this.back >> this.currentSize == 0)
this.currentSize - orig(this.currentSize) - 1 == 0
(orig(this.currentSize) == 0) ==> (this.front == 0)
(orig(this.currentSize) == 0) ==> (this.back == 0)
(size(this.theArray[])-1 == 0) ==> (orig(this.currentSize) == 0)
orig(this.currentSize) <= size(this.theArray[])-1
(size(this.theArray[])-1 == 0) ==> (orig(this.back) == 0)
orig(this.back) <= size(this.theArray[])-1
===========================================================================
DataStructures.QueueAr.enqueue(java.lang.Object):::EXIT;condition="not(currentSize == 0)"
===========================================================================
DataStructures.QueueAr.enqueue(java.lang.Object):::EXIT;condition="orig(currentSize == 0)"
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.front == this.back
this.front == orig(this.currentSize)
this.front == orig(this.front)
orig(this.back) == size(this.theArray[])-1
orig(this.back) == orig(size(this.theArray[]))-1
orig(x) == this.theArray[this.currentSize-1]
orig(x) == this.theArray[this.front]
orig(x) == this.theArray[this.back]
orig(x) == this.theArray[orig(this.currentSize)]
orig(x) == this.theArray[orig(this.front)]
size(this.theArray[]) == orig(size(this.theArray[]))
this.theArray[this.currentSize..] == orig(this.theArray[post(this.currentSize)..])
this.theArray[this.currentSize..] == orig(this.theArray[post(this.front)+1..])
this.theArray[this.currentSize..] == orig(this.theArray[post(this.back)+1..])
this.theArray[this.currentSize..] == orig(this.theArray[this.currentSize+1..])
this.theArray[this.currentSize..] == orig(this.theArray[this.front+1..])
this.theArray[this.currentSize..] == orig(this.theArray[0..this.back-1])
orig(this.theArray[post(this.currentSize)-1]) == orig(this.theArray[this.currentSize])
orig(this.theArray[this.currentSize]) == orig(this.theArray[this.back])
this.theArray != null
this.theArray.getClass().getName() == java.lang.Object[].class
this.currentSize == 1
this.front == 0
orig(this.theArray[]) elements == null
orig(this.theArray[].getClass().getName()) elements == null
orig(x.getClass().getName()) is printable
this.theArray[0..this.front] elements != null
this.theArray[0..this.front-1] == []
orig(this.theArray[0..this.currentSize]) == [null]
this.theArray.getClass().getName() != orig(x.getClass().getName())
orig(x.getClass().getName()) in this.theArray[].getClass().getName()
this.currentSize <= size(this.theArray[])
this.front <= orig(this.back)
orig(this.theArray[]) elements == orig(this.theArray[this.currentSize])
this.theArray[0..this.front] elements == orig(x)
this.theArray[this.currentSize..] elements == this.theArray[orig(this.back)]
this.theArray[orig(this.back)..] elements == this.theArray[orig(this.back)]
===========================================================================
DataStructures.QueueAr.enqueue(java.lang.Object):::EXIT;condition="not(orig(currentSize == 0))"
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.front == orig(this.front)
orig(x) == this.theArray[this.back]
size(this.theArray[]) == orig(size(this.theArray[]))
this.theArray[this.currentSize-1] == this.theArray[orig(this.currentSize)]
this.theArray[this.front] == orig(this.theArray[post(this.front)])
this.theArray[this.front] == orig(this.theArray[this.front])
this.theArray[this.back+1..] == orig(this.theArray[post(this.back)+1..])
this.theArray[0..this.back-1] == orig(this.theArray[0..post(this.back)-1])
this.theArray[orig(this.back)] == orig(this.theArray[this.back])
orig(this.theArray[post(this.currentSize)-1]) == orig(this.theArray[this.currentSize])
this.theArray != null
this.theArray.getClass().getName() == java.lang.Object[].class
this.currentSize >= 2
this.front >= 0
this.back >= 0
orig(this.currentSize) >= 1
orig(this.back) >= 0
orig(x) != null
orig(x.getClass().getName()) is printable
this.theArray[this.front] != null
this.theArray[orig(this.back)] != null
orig(this.theArray[post(this.back)]) == null
this.theArray.getClass().getName() != orig(x.getClass().getName())
orig(x.getClass().getName()) in this.theArray[].getClass().getName()
(this.front >> this.currentSize == 0)
(this.back >> this.currentSize == 0)
this.currentSize - orig(this.currentSize) - 1 == 0
(orig(this.back) >> this.currentSize == 0)
this.currentSize <= size(this.theArray[])
this.front != this.back
this.front <= size(this.theArray[])-1
this.back != orig(this.back)
this.back <= size(this.theArray[])-1
orig(this.currentSize) <= size(this.theArray[])-1
orig(this.back) <= size(this.theArray[])-1
===========================================================================
DataStructures.QueueAr.enqueue(java.lang.Object):::EXIT;condition="currentSize == theArray.length"
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.currentSize == size(this.theArray[])
this.currentSize == orig(size(this.theArray[]))
this.front == orig(this.front)
orig(this.currentSize) == size(this.theArray[])-1
orig(x) == this.theArray[this.back]
this.theArray[this.currentSize-1] == this.theArray[orig(this.currentSize)]
this.theArray[this.back+1..] == orig(this.theArray[post(this.back)+1..])
this.theArray[0..this.back-1] == orig(this.theArray[0..post(this.back)-1])
orig(this.theArray[post(this.currentSize)-1]) == orig(this.theArray[this.currentSize])
this.theArray != null
this.theArray.getClass().getName() == java.lang.Object[].class
this.theArray[] contains no duplicates
this.theArray[] elements != null
this.front >= 0
this.back >= 0
this.theArray[this.currentSize..] == []
orig(this.theArray[post(this.back)]) == null
this.theArray.getClass().getName() != orig(x.getClass().getName())
orig(x.getClass().getName()) in this.theArray[].getClass().getName()
(orig(this.currentSize) == 0) ==> (this.front == 0)
this.front <= orig(this.currentSize)
(orig(this.currentSize) == 0) ==> (this.back == 0)
this.back <= orig(this.currentSize)
this.theArray[orig(this.currentSize)..] elements == this.theArray[this.currentSize-1]
===========================================================================
DataStructures.QueueAr.enqueue(java.lang.Object):::EXIT;condition="not(currentSize == theArray.length)"
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.front == orig(this.front)
orig(x) == this.theArray[this.back]
size(this.theArray[]) == orig(size(this.theArray[]))
this.theArray[this.currentSize-1] == this.theArray[orig(this.currentSize)]
this.theArray[this.back+1..] == orig(this.theArray[post(this.back)+1..])
this.theArray[0..this.back-1] == orig(this.theArray[0..post(this.back)-1])
this.theArray[orig(this.back)] == orig(this.theArray[this.back])
orig(this.theArray[post(this.currentSize)-1]) == orig(this.theArray[this.currentSize])
this.theArray != null
this.theArray.getClass().getName() == java.lang.Object[].class
this.currentSize >= 1
this.front >= 0
this.back >= 0
this.theArray[this.front] != null
orig(this.theArray[post(this.back)]) == null
this.theArray.getClass().getName() != orig(x.getClass().getName())
this.theArray[] is a superset of orig(this.theArray[])
orig(x.getClass().getName()) in this.theArray[].getClass().getName()
(this.front >> this.currentSize == 0)
(this.back >> this.currentSize == 0)
this.currentSize - orig(this.currentSize) - 1 == 0
this.currentSize <= size(this.theArray[])-1
(orig(this.currentSize) == 0) ==> (this.front == 0)
this.front <= size(this.theArray[])-1
(orig(this.currentSize) == 0) ==> (this.back == 0)
this.back != orig(this.back)
this.back <= size(this.theArray[])-1
orig(this.currentSize) < size(this.theArray[])-1
orig(this.back) <= size(this.theArray[])-1
orig(this.theArray[post(this.currentSize)]) in this.theArray[0..this.currentSize]
orig(this.theArray[post(this.back)]) in this.theArray[0..this.currentSize]
orig(this.theArray[this.currentSize]) in this.theArray[0..this.currentSize]
orig(this.theArray[this.front]) in this.theArray[this.front..]
orig(this.theArray[this.currentSize]) in this.theArray[orig(this.currentSize)..]
===========================================================================
DataStructures.QueueAr.enqueue(java.lang.Object):::EXIT;condition="not(orig(currentSize == theArray.length))"
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.front == orig(this.front)
orig(x) == this.theArray[this.back]
size(this.theArray[]) == orig(size(this.theArray[]))
this.theArray[this.currentSize-1] == this.theArray[orig(this.currentSize)]
this.theArray[this.back+1..] == orig(this.theArray[post(this.back)+1..])
this.theArray[0..this.back-1] == orig(this.theArray[0..post(this.back)-1])
orig(this.theArray[post(this.currentSize)-1]) == orig(this.theArray[this.currentSize])
this.theArray != null
this.theArray.getClass().getName() == java.lang.Object[].class
this.currentSize >= 1
this.front >= 0
this.back >= 0
orig(this.currentSize) >= 0
orig(this.back) >= 0
orig(x) != null
orig(x.getClass().getName()) is printable
this.theArray[this.front] != null
orig(this.theArray[post(this.back)]) == null
this.theArray.getClass().getName() != orig(x.getClass().getName())
orig(x.getClass().getName()) in this.theArray[].getClass().getName()
(this.front >> this.currentSize == 0)
(this.back >> this.currentSize == 0)
this.currentSize - orig(this.currentSize) - 1 == 0
this.currentSize <= size(this.theArray[])
(orig(this.currentSize) == 0) ==> (this.front == 0)
(size(this.theArray[])-1 == 0) ==> (this.front == 0)
this.front <= size(this.theArray[])-1
(orig(this.currentSize) == 0) ==> (this.back == 0)
(size(this.theArray[])-1 == 0) ==> (this.back == 0)
this.back <= size(this.theArray[])-1
(size(this.theArray[])-1 == 0) ==> (orig(this.currentSize) == 0)
orig(this.currentSize) <= size(this.theArray[])-1
(size(this.theArray[])-1 == 0) ==> (orig(this.back) == 0)
orig(this.back) <= size(this.theArray[])-1
===========================================================================
DataStructures.QueueAr.enqueue(java.lang.Object):::EXIT;condition="not(isEmpty())"
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.front == orig(this.front)
orig(x) == this.theArray[this.back]
size(this.theArray[]) == orig(size(this.theArray[]))
this.theArray[this.currentSize-1] == this.theArray[orig(this.currentSize)]
this.theArray[this.back+1..] == orig(this.theArray[post(this.back)+1..])
this.theArray[0..this.back-1] == orig(this.theArray[0..post(this.back)-1])
orig(this.theArray[post(this.currentSize)-1]) == orig(this.theArray[this.currentSize])
this.theArray != null
this.theArray.getClass().getName() == java.lang.Object[].class
this.currentSize >= 1
this.front >= 0
this.back >= 0
this.theArray[this.front] != null
orig(this.theArray[post(this.back)]) == null
this.theArray.getClass().getName() != orig(x.getClass().getName())
orig(x.getClass().getName()) in this.theArray[].getClass().getName()
(this.front >> this.currentSize == 0)
(this.back >> this.currentSize == 0)
this.currentSize - orig(this.currentSize) - 1 == 0
this.currentSize <= size(this.theArray[])
(orig(this.currentSize) == 0) ==> (this.front == 0)
(size(this.theArray[])-1 == 0) ==> (this.front == 0)
this.front <= size(this.theArray[])-1
(orig(this.currentSize) == 0) ==> (this.back == 0)
(size(this.theArray[])-1 == 0) ==> (this.back == 0)
this.back <= size(this.theArray[])-1
(size(this.theArray[])-1 == 0) ==> (orig(this.currentSize) == 0)
orig(this.currentSize) <= size(this.theArray[])-1
(size(this.theArray[])-1 == 0) ==> (orig(this.back) == 0)
orig(this.back) <= size(this.theArray[])-1
===========================================================================
DataStructures.QueueAr.enqueue(java.lang.Object):::EXIT;condition="orig(isEmpty())"
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.front == this.back
this.front == orig(this.currentSize)
this.front == orig(this.front)
orig(this.back) == size(this.theArray[])-1
orig(this.back) == orig(size(this.theArray[]))-1
orig(x) == this.theArray[this.currentSize-1]
orig(x) == this.theArray[this.front]
orig(x) == this.theArray[this.back]
orig(x) == this.theArray[orig(this.currentSize)]
orig(x) == this.theArray[orig(this.front)]
size(this.theArray[]) == orig(size(this.theArray[]))
this.theArray[this.currentSize..] == orig(this.theArray[post(this.currentSize)..])
this.theArray[this.currentSize..] == orig(this.theArray[post(this.front)+1..])
this.theArray[this.currentSize..] == orig(this.theArray[post(this.back)+1..])
this.theArray[this.currentSize..] == orig(this.theArray[this.currentSize+1..])
this.theArray[this.currentSize..] == orig(this.theArray[this.front+1..])
this.theArray[this.currentSize..] == orig(this.theArray[0..this.back-1])
orig(this.theArray[post(this.currentSize)-1]) == orig(this.theArray[this.currentSize])
orig(this.theArray[this.currentSize]) == orig(this.theArray[this.back])
this.theArray != null
this.theArray.getClass().getName() == java.lang.Object[].class
this.currentSize == 1
this.front == 0
orig(this.theArray[]) elements == null
orig(this.theArray[].getClass().getName()) elements == null
orig(x.getClass().getName()) is printable
this.theArray[0..this.front] elements != null
this.theArray[0..this.front-1] == []
orig(this.theArray[0..this.currentSize]) == [null]
this.theArray.getClass().getName() != orig(x.getClass().getName())
orig(x.getClass().getName()) in this.theArray[].getClass().getName()
this.currentSize <= size(this.theArray[])
this.front <= orig(this.back)
orig(this.theArray[]) elements == orig(this.theArray[this.currentSize])
this.theArray[0..this.front] elements == orig(x)
this.theArray[this.currentSize..] elements == this.theArray[orig(this.back)]
this.theArray[orig(this.back)..] elements == this.theArray[orig(this.back)]
===========================================================================
DataStructures.QueueAr.enqueue(java.lang.Object):::EXIT;condition="not(orig(isEmpty()))"
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.front == orig(this.front)
orig(x) == this.theArray[this.back]
size(this.theArray[]) == orig(size(this.theArray[]))
this.theArray[this.currentSize-1] == this.theArray[orig(this.currentSize)]
this.theArray[this.front] == orig(this.theArray[post(this.front)])
this.theArray[this.front] == orig(this.theArray[this.front])
this.theArray[this.back+1..] == orig(this.theArray[post(this.back)+1..])
this.theArray[0..this.back-1] == orig(this.theArray[0..post(this.back)-1])
this.theArray[orig(this.back)] == orig(this.theArray[this.back])
orig(this.theArray[post(this.currentSize)-1]) == orig(this.theArray[this.currentSize])
this.theArray != null
this.theArray.getClass().getName() == java.lang.Object[].class
this.currentSize >= 2
this.front >= 0
this.back >= 0
orig(this.currentSize) >= 1
orig(this.back) >= 0
orig(x) != null
orig(x.getClass().getName()) is printable
this.theArray[this.front] != null
this.theArray[orig(this.back)] != null
orig(this.theArray[post(this.back)]) == null
this.theArray.getClass().getName() != orig(x.getClass().getName())
orig(x.getClass().getName()) in this.theArray[].getClass().getName()
(this.front >> this.currentSize == 0)
(this.back >> this.currentSize == 0)
this.currentSize - orig(this.currentSize) - 1 == 0
(orig(this.back) >> this.currentSize == 0)
this.currentSize <= size(this.theArray[])
this.front != this.back
this.front <= size(this.theArray[])-1
this.back != orig(this.back)
this.back <= size(this.theArray[])-1
orig(this.currentSize) <= size(this.theArray[])-1
orig(this.back) <= size(this.theArray[])-1
===========================================================================
DataStructures.QueueAr.enqueue(java.lang.Object):::EXIT;condition="++front == theArray.length"
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.front == orig(this.front)
this.front == size(this.theArray[])-1
this.front == orig(size(this.theArray[]))-1
orig(x) == this.theArray[this.back]
size(this.theArray[]) == orig(size(this.theArray[]))
this.theArray[this.currentSize-1] == this.theArray[orig(this.currentSize)]
this.theArray[this.currentSize..] == orig(this.theArray[post(this.currentSize)..])
this.theArray[this.currentSize..] == orig(this.theArray[this.currentSize+1..])
this.theArray[this.back+1..] == orig(this.theArray[post(this.back)+1..])
this.theArray[0..this.back-1] == orig(this.theArray[0..post(this.back)-1])
orig(this.theArray[post(this.currentSize)-1]) == orig(this.theArray[this.currentSize])
this.theArray != null
this.theArray.getClass().getName() == java.lang.Object[].class
this.back >= 0
this.theArray[this.front..] elements != null
this.theArray[this.front+1..] == []
this.theArray[0..this.back] elements != null
this.theArray[0..orig(this.back)] elements != null
orig(this.theArray[post(this.back)]) == null
this.theArray.getClass().getName() != orig(x.getClass().getName())
orig(x.getClass().getName()) in this.theArray[].getClass().getName()
(this.front >> this.currentSize == 0)
this.currentSize > this.back
this.currentSize - orig(this.currentSize) - 1 == 0
this.currentSize > orig(this.back)
(size(this.theArray[]) >> this.currentSize == 0)
this.currentSize <= size(this.theArray[])
(this.front == 0) ==> (this.back == 0)
this.front >= this.back
(orig(this.currentSize) == 0) ==> (this.front == 0)
(this.front == 0) ==> (orig(this.currentSize) == 0)
this.front >= orig(this.currentSize)
(this.front == 0) ==> (orig(this.back) == 0)
this.front >= orig(this.back)
(orig(this.currentSize) == 0) ==> (this.back == 0)
this.back <= orig(this.currentSize)
this.theArray[this.front..] elements == this.theArray[this.front]
===========================================================================
DataStructures.QueueAr.enqueue(java.lang.Object):::EXIT;condition="not(++front == theArray.length)"
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.front == orig(this.front)
orig(x) == this.theArray[this.back]
size(this.theArray[]) == orig(size(this.theArray[]))
this.theArray[this.currentSize-1] == this.theArray[orig(this.currentSize)]
this.theArray[this.back+1..] == orig(this.theArray[post(this.back)+1..])
this.theArray[0..this.back-1] == orig(this.theArray[0..post(this.back)-1])
this.theArray[orig(this.back)] == orig(this.theArray[this.back])
orig(this.theArray[post(this.currentSize)-1]) == orig(this.theArray[this.currentSize])
this.theArray != null
this.theArray.getClass().getName() == java.lang.Object[].class
this.currentSize >= 1
this.front >= 0
this.back >= 0
this.theArray[this.front] != null
orig(this.theArray[post(this.back)]) == null
this.theArray.getClass().getName() != orig(x.getClass().getName())
orig(this.theArray[this.front]) in this.theArray[]
orig(x.getClass().getName()) in this.theArray[].getClass().getName()
(this.front >> this.currentSize == 0)
(this.back >> this.currentSize == 0)
this.currentSize - orig(this.currentSize) - 1 == 0
this.currentSize <= size(this.theArray[])
(orig(this.currentSize) == 0) ==> (this.front == 0)
this.front < size(this.theArray[])-1
(orig(this.currentSize) == 0) ==> (this.back == 0)
this.back != orig(this.back)
this.back <= size(this.theArray[])-1
orig(this.currentSize) <= size(this.theArray[])-1
orig(this.back) <= size(this.theArray[])-1
orig(this.theArray[this.front]) in this.theArray[this.front..]
===========================================================================
DataStructures.QueueAr.enqueue(java.lang.Object):::EXIT;condition="orig(++front == theArray.length)"
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.front == orig(this.front)
this.front == size(this.theArray[])-1
this.front == orig(size(this.theArray[]))-1
orig(x) == this.theArray[this.back]
size(this.theArray[]) == orig(size(this.theArray[]))
this.theArray[this.currentSize-1] == this.theArray[orig(this.currentSize)]
this.theArray[this.currentSize..] == orig(this.theArray[post(this.currentSize)..])
this.theArray[this.currentSize..] == orig(this.theArray[this.currentSize+1..])
this.theArray[this.back+1..] == orig(this.theArray[post(this.back)+1..])
this.theArray[0..this.back-1] == orig(this.theArray[0..post(this.back)-1])
orig(this.theArray[post(this.currentSize)-1]) == orig(this.theArray[this.currentSize])
this.theArray != null
this.theArray.getClass().getName() == java.lang.Object[].class
this.back >= 0
orig(this.back) >= 0
orig(x.getClass().getName()) is printable
this.theArray[this.front..] elements != null
this.theArray[this.front+1..] == []
this.theArray[0..this.back] elements != null
this.theArray[0..orig(this.back)] elements != null
orig(this.theArray[post(this.back)]) == null
this.theArray.getClass().getName() != orig(x.getClass().getName())
orig(x.getClass().getName()) in this.theArray[].getClass().getName()
(this.front >> this.currentSize == 0)
this.currentSize > this.back
this.currentSize - orig(this.currentSize) - 1 == 0
this.currentSize > orig(this.back)
(size(this.theArray[]) >> this.currentSize == 0)
this.currentSize <= size(this.theArray[])
(this.front == 0) ==> (this.back == 0)
this.front >= this.back
(orig(this.currentSize) == 0) ==> (this.front == 0)
(this.front == 0) ==> (orig(this.currentSize) == 0)
this.front >= orig(this.currentSize)
(this.front == 0) ==> (orig(this.back) == 0)
this.front >= orig(this.back)
(orig(this.currentSize) == 0) ==> (this.back == 0)
this.back <= orig(this.currentSize)
(orig(this.currentSize) == 0) ==> (orig(this.back) == 0)
orig(this.currentSize) >= orig(this.back)
this.theArray[this.front..] elements == this.theArray[this.front]
orig(this.theArray[this.front..]) elements == orig(this.theArray[this.front])
===========================================================================
DataStructures.QueueAr.enqueue(java.lang.Object):::EXIT;condition="not(orig(++front == theArray.length))"
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.front == orig(this.front)
orig(x) == this.theArray[this.back]
size(this.theArray[]) == orig(size(this.theArray[]))
this.theArray[this.currentSize-1] == this.theArray[orig(this.currentSize)]
this.theArray[this.back+1..] == orig(this.theArray[post(this.back)+1..])
this.theArray[0..this.back-1] == orig(this.theArray[0..post(this.back)-1])
this.theArray[orig(this.back)] == orig(this.theArray[this.back])
orig(this.theArray[post(this.currentSize)-1]) == orig(this.theArray[this.currentSize])
this.theArray != null
this.theArray.getClass().getName() == java.lang.Object[].class
this.currentSize >= 1
this.front >= 0
this.back >= 0
orig(this.currentSize) >= 0
orig(this.back) >= 0
orig(x) != null
orig(x.getClass().getName()) is printable
this.theArray[this.front] != null
orig(this.theArray[post(this.back)]) == null
this.theArray.getClass().getName() != orig(x.getClass().getName())
orig(this.theArray[this.front]) in this.theArray[]
orig(x.getClass().getName()) in this.theArray[].getClass().getName()
(this.front >> this.currentSize == 0)
(this.back >> this.currentSize == 0)
this.currentSize - orig(this.currentSize) - 1 == 0
this.currentSize <= size(this.theArray[])
(orig(this.currentSize) == 0) ==> (this.front == 0)
this.front < size(this.theArray[])-1
(orig(this.currentSize) == 0) ==> (this.back == 0)
this.back != orig(this.back)
this.back <= size(this.theArray[])-1
orig(this.currentSize) <= size(this.theArray[])-1
orig(this.back) <= size(this.theArray[])-1
orig(this.theArray[this.front]) in this.theArray[this.front..]
===========================================================================
DataStructures.QueueAr.enqueue(java.lang.Object):::EXIT;condition="++back == theArray.length"
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.front == orig(this.front)
this.back == size(this.theArray[])-1
this.back == orig(size(this.theArray[]))-1
orig(x) == this.theArray[this.back]
size(this.theArray[]) == orig(size(this.theArray[]))
this.theArray[this.currentSize-1] == this.theArray[orig(this.currentSize)]
this.theArray[0..this.front-1] == orig(this.theArray[0..post(this.front)-1])
this.theArray[0..this.front-1] == orig(this.theArray[0..this.front-1])
this.theArray[0..this.back-1] == orig(this.theArray[0..post(this.back)-1])
this.theArray[0..orig(this.currentSize)-1] == orig(this.theArray[0..this.currentSize-1])
this.theArray[0..orig(this.back)-1] == orig(this.theArray[0..this.back-1])
orig(this.theArray[post(this.currentSize)-1]) == orig(this.theArray[this.currentSize])
this.theArray != null
this.theArray.getClass().getName() == java.lang.Object[].class
this.front >= 0
orig(this.back) >= 0
orig(x.getClass().getName()) is printable
this.theArray[this.front..] contains no duplicates
this.theArray[this.front..] elements != null
this.theArray[0..this.front-1] elements == null
this.theArray[this.back+1..] == []
orig(this.theArray[post(this.back)..]) == [null]
orig(this.theArray[post(this.back)..]) elements == null
orig(this.theArray[this.front..]) contains no duplicates
orig(this.theArray[this.back..]) contains no duplicates
orig(this.theArray[this.back+1..]) elements == null
this.theArray.getClass().getName() != orig(x.getClass().getName())
orig(x.getClass().getName()) in this.theArray[].getClass().getName()
(this.front >> this.currentSize == 0)
(this.back >> this.currentSize == 0)
this.currentSize - orig(this.currentSize) - 1 == 0
(orig(this.back) >> this.currentSize == 0)
(size(this.theArray[]) >> this.currentSize == 0)
this.currentSize <= size(this.theArray[])
(this.back == 0) ==> (this.front == 0)
this.front <= this.back
(orig(this.currentSize) == 0) ==> (this.front == 0)
(orig(this.back) == 0) ==> (this.front == 0)
this.front <= orig(this.back)
(orig(this.currentSize) == 0) ==> (this.back == 0)
(this.back == 0) ==> (orig(this.currentSize) == 0)
this.back >= orig(this.currentSize)
(this.back == 0) ==> (orig(this.back) == 0)
this.back >= orig(this.back)
(orig(this.currentSize) == 0) ==> (orig(this.back) == 0)
this.theArray[this.back..] elements == orig(x)
this.theArray[0..this.front-1] elements == orig(this.theArray[post(this.back)])
orig(this.theArray[post(this.back)..]) elements == orig(this.theArray[post(this.back)])
this.currentSize + this.front - this.back - 1 == 0
this.currentSize + this.front - size(this.theArray[]) == 0
this.front - this.back + orig(this.currentSize) == 0
this.front + orig(this.currentSize) - size(this.theArray[]) + 1 == 0
===========================================================================
DataStructures.QueueAr.enqueue(java.lang.Object):::EXIT;condition="not(++back == theArray.length)"
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.front == orig(this.front)
orig(x) == this.theArray[this.back]
size(this.theArray[]) == orig(size(this.theArray[]))
this.theArray[this.currentSize-1] == this.theArray[orig(this.currentSize)]
this.theArray[this.back+1..] == orig(this.theArray[post(this.back)+1..])
this.theArray[0..this.back-1] == orig(this.theArray[0..post(this.back)-1])
this.theArray[orig(this.back)] == orig(this.theArray[this.back])
orig(this.theArray[post(this.currentSize)-1]) == orig(this.theArray[this.currentSize])
this.theArray != null
this.theArray.getClass().getName() == java.lang.Object[].class
this.currentSize >= 1
this.front >= 0
this.back >= 0
orig(this.currentSize) >= 0
orig(this.back) >= 0
orig(x) != null
orig(x.getClass().getName()) is printable
this.theArray[this.front] != null
orig(this.theArray[post(this.back)]) == null
this.theArray.getClass().getName() != orig(x.getClass().getName())
orig(this.theArray[this.currentSize]) in this.theArray[]
orig(this.theArray[this.front]) in this.theArray[]
orig(x.getClass().getName()) in this.theArray[].getClass().getName()
(this.front >> this.currentSize == 0)
(this.back >> this.currentSize == 0)
this.currentSize - orig(this.currentSize) - 1 == 0
this.currentSize <= size(this.theArray[])
(orig(this.currentSize) == 0) ==> (this.front == 0)
this.front <= size(this.theArray[])-1
(orig(this.currentSize) == 0) ==> (this.back == 0)
this.back != orig(this.back)
this.back < size(this.theArray[])-1
orig(this.currentSize) <= size(this.theArray[])-1
orig(this.back) <= size(this.theArray[])-1
orig(this.theArray[this.front]) in this.theArray[this.front..]
orig(this.theArray[this.currentSize]) in this.theArray[orig(this.currentSize)..]
===========================================================================
DataStructures.QueueAr.enqueue(java.lang.Object):::EXIT;condition="isFull()"
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.currentSize == size(this.theArray[])
this.currentSize == orig(size(this.theArray[]))
this.front == orig(this.front)
orig(this.currentSize) == size(this.theArray[])-1
orig(this.currentSize) == orig(size(this.theArray[]))-1
orig(x) == this.theArray[this.back]
this.theArray[this.currentSize-1] == this.theArray[orig(this.currentSize)]
this.theArray[this.back+1..] == orig(this.theArray[post(this.back)+1..])
this.theArray[0..this.back-1] == orig(this.theArray[0..post(this.back)-1])
orig(this.theArray[post(this.currentSize)-1]) == orig(this.theArray[this.currentSize])
this.theArray != null
this.theArray.getClass().getName() == java.lang.Object[].class
this.theArray[] contains no duplicates
this.theArray[] elements != null
this.front >= 0
this.back >= 0
orig(this.theArray[]) contains no duplicates
orig(this.back) >= 0
orig(x.getClass().getName()) is printable
this.theArray[this.currentSize..] == []
orig(this.theArray[post(this.back)]) == null
this.theArray.getClass().getName() != orig(x.getClass().getName())
orig(x.getClass().getName()) in this.theArray[].getClass().getName()
(orig(this.currentSize) == 0) ==> (this.front == 0)
this.front <= orig(this.currentSize)
(orig(this.currentSize) == 0) ==> (this.back == 0)
this.back <= orig(this.currentSize)
(orig(this.currentSize) == 0) ==> (orig(this.back) == 0)
orig(this.currentSize) >= orig(this.back)
this.theArray[orig(this.currentSize)..] elements == this.theArray[this.currentSize-1]
orig(this.theArray[this.currentSize..]) elements == orig(this.theArray[this.currentSize])
===========================================================================
DataStructures.QueueAr.enqueue(java.lang.Object):::EXIT;condition="not(isFull())"
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.front == orig(this.front)
orig(x) == this.theArray[this.back]
size(this.theArray[]) == orig(size(this.theArray[]))
this.theArray[this.currentSize-1] == this.theArray[orig(this.currentSize)]
this.theArray[this.back+1..] == orig(this.theArray[post(this.back)+1..])
this.theArray[0..this.back-1] == orig(this.theArray[0..post(this.back)-1])
this.theArray[orig(this.back)] == orig(this.theArray[this.back])
orig(this.theArray[post(this.currentSize)-1]) == orig(this.theArray[this.currentSize])
this.theArray != null
this.theArray.getClass().getName() == java.lang.Object[].class
this.currentSize >= 1
this.front >= 0
this.back >= 0
orig(this.currentSize) >= 0
orig(this.back) >= 0
orig(x) != null
orig(x.getClass().getName()) is printable
this.theArray[this.front] != null
orig(this.theArray[post(this.back)]) == null
this.theArray.getClass().getName() != orig(x.getClass().getName())
this.theArray[] is a superset of orig(this.theArray[])
orig(x.getClass().getName()) in this.theArray[].getClass().getName()
(this.front >> this.currentSize == 0)
(this.back >> this.currentSize == 0)
this.currentSize - orig(this.currentSize) - 1 == 0
this.currentSize <= size(this.theArray[])-1
(orig(this.currentSize) == 0) ==> (this.front == 0)
this.front <= size(this.theArray[])-1
(orig(this.currentSize) == 0) ==> (this.back == 0)
this.back != orig(this.back)
this.back <= size(this.theArray[])-1
orig(this.currentSize) < size(this.theArray[])-1
orig(this.back) <= size(this.theArray[])-1
orig(this.theArray[post(this.currentSize)]) in this.theArray[0..this.currentSize]
orig(this.theArray[post(this.back)]) in this.theArray[0..this.currentSize]
orig(this.theArray[this.currentSize]) in this.theArray[0..this.currentSize]
orig(this.theArray[this.front]) in this.theArray[this.front..]
orig(this.theArray[this.currentSize]) in this.theArray[orig(this.currentSize)..]
===========================================================================
DataStructures.QueueAr.enqueue(java.lang.Object):::EXIT;condition="orig(++back == theArray.length)"
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.front == orig(this.front)
orig(this.back) == size(this.theArray[])-1
orig(this.back) == orig(size(this.theArray[]))-1
orig(x) == this.theArray[this.back]
size(this.theArray[]) == orig(size(this.theArray[]))
this.theArray[this.currentSize-1] == this.theArray[orig(this.currentSize)]
this.theArray[this.currentSize..] == orig(this.theArray[post(this.currentSize)..])
this.theArray[this.currentSize..] == orig(this.theArray[this.currentSize+1..])
this.theArray[this.front+1..] == orig(this.theArray[post(this.front)+1..])
this.theArray[this.front+1..] == orig(this.theArray[this.front+1..])
this.theArray[this.back+1..] == orig(this.theArray[post(this.back)+1..])
orig(this.theArray[post(this.currentSize)-1]) == orig(this.theArray[this.currentSize])
this.theArray != null
this.theArray.getClass().getName() == java.lang.Object[].class
this.currentSize >= 1
this.front >= 0
this.back == 0
orig(this.currentSize) >= 0
orig(x.getClass().getName()) is printable
this.theArray[this.front] != null
this.theArray[0..this.back] elements != null
this.theArray[0..this.back-1] == []
orig(this.theArray[0..post(this.back)]) == [null]
orig(this.theArray[0..post(this.back)]) elements == null
orig(this.theArray[0..this.front-1]) elements == null
this.theArray.getClass().getName() != orig(x.getClass().getName())
orig(x.getClass().getName()) in this.theArray[].getClass().getName()
(this.front >> this.currentSize == 0)
this.currentSize > this.back
this.currentSize - orig(this.currentSize) - 1 == 0
this.currentSize <= size(this.theArray[])
this.front >= this.back
(orig(this.currentSize) == 0) ==> (this.front == 0)
(this.front == 0) ==> (orig(this.currentSize) == 0)
(this.front >> orig(this.currentSize) == 0)
(orig(this.back) == 0) ==> (this.front == 0)
this.front <= orig(this.back)
this.back <= orig(this.currentSize)
this.back <= orig(this.back)
(orig(this.back) == 0) ==> (orig(this.currentSize) == 0)
orig(this.currentSize) <= orig(this.back)
this.theArray[0..this.back] elements == orig(x)
this.theArray[orig(this.back)..] elements == this.theArray[orig(this.back)]
orig(this.theArray[0..post(this.back)]) elements == orig(this.theArray[post(this.back)])
orig(this.theArray[0..this.front-1]) elements == orig(this.theArray[post(this.back)])
orig(this.theArray[this.back..]) elements == orig(this.theArray[this.back])
===========================================================================
DataStructures.QueueAr.enqueue(java.lang.Object):::EXIT;condition="not(orig(++back == theArray.length))"
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.front == orig(this.front)
orig(x) == this.theArray[this.back]
size(this.theArray[]) == orig(size(this.theArray[]))
this.theArray[this.currentSize-1] == this.theArray[orig(this.currentSize)]
this.theArray[this.front] == orig(this.theArray[post(this.front)])
this.theArray[this.front] == orig(this.theArray[this.front])
this.theArray[this.back-1] == this.theArray[orig(this.back)]
this.theArray[this.back-1] == orig(this.theArray[post(this.back)-1])
this.theArray[this.back-1] == orig(this.theArray[this.back])
this.theArray[this.back+1..] == orig(this.theArray[post(this.back)+1..])
this.theArray[0..this.back-1] == orig(this.theArray[0..post(this.back)-1])
this.theArray[0..this.back-1] == orig(this.theArray[0..this.back])
this.theArray[0..orig(this.back)-1] == orig(this.theArray[0..this.back-1])
orig(this.theArray[post(this.currentSize)-1]) == orig(this.theArray[this.currentSize])
this.theArray != null
this.theArray.getClass().getName() == java.lang.Object[].class
this.currentSize >= 2
this.front >= 0
this.back >= 1
orig(this.currentSize) >= 1
orig(this.back) >= 0
orig(x) != null
orig(x.getClass().getName()) is printable
this.theArray[this.front] != null
this.theArray[this.back-1] != null
orig(this.theArray[post(this.back)]) == null
this.theArray.getClass().getName() != orig(x.getClass().getName())
orig(x.getClass().getName()) in this.theArray[].getClass().getName()
(this.front >> this.currentSize == 0)
(this.back >> this.currentSize == 0)
this.currentSize - orig(this.currentSize) - 1 == 0
(orig(this.back) >> this.currentSize == 0)
this.currentSize <= size(this.theArray[])
this.front != this.back
this.front <= size(this.theArray[])-1
this.back - orig(this.back) - 1 == 0
this.back <= size(this.theArray[])-1
orig(this.currentSize) <= size(this.theArray[])-1
orig(this.back) < size(this.theArray[])-1
===========================================================================
DataStructures.QueueAr.enqueue(java.lang.Object):::EXIT;condition="not(orig(isFull()))"
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.front == orig(this.front)
orig(x) == this.theArray[this.back]
size(this.theArray[]) == orig(size(this.theArray[]))
this.theArray[this.currentSize-1] == this.theArray[orig(this.currentSize)]
this.theArray[this.back+1..] == orig(this.theArray[post(this.back)+1..])
this.theArray[0..this.back-1] == orig(this.theArray[0..post(this.back)-1])
orig(this.theArray[post(this.currentSize)-1]) == orig(this.theArray[this.currentSize])
this.theArray != null
this.theArray.getClass().getName() == java.lang.Object[].class
this.currentSize >= 1
this.front >= 0
this.back >= 0
orig(this.currentSize) >= 0
orig(this.back) >= 0
orig(x) != null
orig(x.getClass().getName()) is printable
this.theArray[this.front] != null
orig(this.theArray[post(this.back)]) == null
this.theArray.getClass().getName() != orig(x.getClass().getName())
orig(x.getClass().getName()) in this.theArray[].getClass().getName()
(this.front >> this.currentSize == 0)
(this.back >> this.currentSize == 0)
this.currentSize - orig(this.currentSize) - 1 == 0
this.currentSize <= size(this.theArray[])
(orig(this.currentSize) == 0) ==> (this.front == 0)
(size(this.theArray[])-1 == 0) ==> (this.front == 0)
this.front <= size(this.theArray[])-1
(orig(this.currentSize) == 0) ==> (this.back == 0)
(size(this.theArray[])-1 == 0) ==> (this.back == 0)
this.back <= size(this.theArray[])-1
(size(this.theArray[])-1 == 0) ==> (orig(this.currentSize) == 0)
orig(this.currentSize) <= size(this.theArray[])-1
(size(this.theArray[])-1 == 0) ==> (orig(this.back) == 0)
orig(this.back) <= size(this.theArray[])-1
===========================================================================
DataStructures.QueueAr.getFront():::ENTER
(this.currentSize <= size(this.theArray[])-1)  ==>  ((size(this.theArray[])-1 == 0) ==> (this.currentSize == 0))
(this.currentSize == 0)  ==>  ((this.back == 0) ==> (size(this.theArray[])-1 == 0))
(this.currentSize == 0)  ==>  ((this.back == 0) ==> (this.front == 0))
(this.currentSize == 0)  ==>  (this.currentSize <= size(this.theArray[])-1)
(this.currentSize == 0)  ==>  (this.currentSize <= this.back)
(this.currentSize == 0)  ==>  (this.currentSize <= this.front)
(this.currentSize == 0)  ==>  (this.currentSize is a pointer)
(this.currentSize == 0)  ==>  (this.theArray[0..this.currentSize-1] == [])
(this.currentSize == 0)  ==>  (this.theArray[0..this.currentSize] == [null])
(this.currentSize == 0)  ==>  (this.theArray[] elements == null)
(this.currentSize == 0)  ==>  (this.theArray[] elements == this.theArray[this.back])
(this.currentSize == 0)  ==>  (this.theArray[] elements == this.theArray[this.currentSize])
(this.currentSize == 0)  ==>  (this.theArray[] elements == this.theArray[this.front])
(this.currentSize == 0)  ==>  (this.theArray[].getClass().getName() elements == null)
(this.currentSize == 0)  ==>  (this.theArray[this.currentSize..] elements == null)
(this.currentSize == 0)  ==>  (this.theArray[this.currentSize..] elements == this.theArray[this.back])
(this.currentSize == 0)  ==>  (this.theArray[this.currentSize..] elements == this.theArray[this.currentSize])
(this.currentSize == 0)  ==>  (this.theArray[this.currentSize..] elements == this.theArray[this.front])
(this.currentSize == 0)  ==>  (this.theArray[this.currentSize] == this.theArray[this.back])
(this.currentSize == 0)  ==>  (this.theArray[this.currentSize] == this.theArray[this.front])
(this.currentSize == size(this.theArray[]))  ==>  (this.theArray[0..this.currentSize-1] contains no duplicates)
(this.currentSize == size(this.theArray[]))  ==>  (this.theArray[0..this.currentSize-1] elements != null)
(this.currentSize == size(this.theArray[]))  ==>  (this.theArray[] contains no duplicates)
(this.currentSize == size(this.theArray[]))  ==>  (this.theArray[] elements != null)
(this.currentSize == size(this.theArray[]))  ==>  (this.theArray[this.currentSize..] == [])
===========================================================================
DataStructures.QueueAr.getFront():::ENTER;condition="currentSize == 0"
this.theArray[this.currentSize] == this.theArray[this.front]
this.theArray[this.currentSize] == this.theArray[this.back]
this.theArray[] elements == null
this.theArray[].getClass().getName() elements == null
this.currentSize == 0
this.theArray[0..this.currentSize] == [null]
this.theArray[0..this.currentSize-1] == []
this.theArray[] elements == this.theArray[this.currentSize]
this.currentSize <= this.front
this.currentSize <= this.back
this.currentSize <= size(this.theArray[])-1
(this.back == 0) ==> (this.front == 0)
(this.back == 0) ==> (size(this.theArray[])-1 == 0)
===========================================================================
DataStructures.QueueAr.getFront():::ENTER;condition="not(currentSize == 0)"
this.currentSize >= 1
this.theArray[this.front] != null
this.theArray[this.back] != null
===========================================================================
DataStructures.QueueAr.getFront():::ENTER;condition="currentSize == theArray.length"
this.currentSize == size(this.theArray[])
this.theArray != null
this.theArray.getClass().getName() == java.lang.Object[].class
this.theArray[] contains no duplicates
this.theArray[] elements != null
this.front >= 0
this.back >= 0
this.theArray[this.currentSize..] == []
(size(this.theArray[])-1 == 0) ==> (this.front == 0)
this.front <= size(this.theArray[])-1
(size(this.theArray[])-1 == 0) ==> (this.back == 0)
this.back <= size(this.theArray[])-1
===========================================================================
DataStructures.QueueAr.getFront():::ENTER;condition="not(currentSize == theArray.length)"
this.theArray != null
this.theArray.getClass().getName() == java.lang.Object[].class
this.currentSize >= 0
this.front >= 0
this.back >= 0
(size(this.theArray[])-1 == 0) ==> (this.currentSize == 0)
this.currentSize <= size(this.theArray[])-1
(size(this.theArray[])-1 == 0) ==> (this.front == 0)
this.front <= size(this.theArray[])-1
(size(this.theArray[])-1 == 0) ==> (this.back == 0)
this.back <= size(this.theArray[])-1
===========================================================================
DataStructures.QueueAr.getFront():::EXIT75
return == this.theArray[this.currentSize]
return == this.theArray[this.back]
return == this.theArray[orig(this.currentSize)]
return == this.theArray[orig(this.back)]
return == orig(this.theArray[post(this.currentSize)])
return == orig(this.theArray[post(this.back)])
return == orig(this.theArray[this.currentSize])
return == orig(this.theArray[this.back])
this.theArray[] elements == null
this.theArray[].getClass().getName() elements == null
this.currentSize == 0
return == null
this.theArray[0..this.currentSize] == [null]
this.theArray[0..this.currentSize-1] == []
this.theArray[] elements == return
this.currentSize <= this.front
this.currentSize <= this.back
this.currentSize <= size(this.theArray[])-1
(this.back == 0) ==> (this.front == 0)
(this.back == 0) ==> (size(this.theArray[])-1 == 0)
===========================================================================
DataStructures.QueueAr.getFront():::EXIT75;condition="currentSize == 0"
===========================================================================
DataStructures.QueueAr.getFront():::EXIT75;condition="orig(currentSize == 0)"
===========================================================================
DataStructures.QueueAr.getFront():::EXIT75;condition="not(currentSize == theArray.length)"
return == this.theArray[this.currentSize]
return == this.theArray[this.back]
return == this.theArray[orig(this.currentSize)]
return == this.theArray[orig(this.back)]
return == orig(this.theArray[post(this.currentSize)])
return == orig(this.theArray[post(this.back)])
return == orig(this.theArray[this.currentSize])
return == orig(this.theArray[this.back])
this.theArray[] elements == null
this.theArray[].getClass().getName() elements == null
this.currentSize == 0
return == null
this.theArray[0..this.currentSize] == [null]
this.theArray[0..this.currentSize-1] == []
this.theArray[] elements == return
this.currentSize <= this.front
this.currentSize <= this.back
(this.back == 0) ==> (this.front == 0)
(this.back == 0) ==> (size(this.theArray[])-1 == 0)
===========================================================================
DataStructures.QueueAr.getFront():::EXIT75;condition="not(orig(currentSize == theArray.length))"
return == this.theArray[this.currentSize]
return == this.theArray[this.back]
return == this.theArray[orig(this.currentSize)]
return == this.theArray[orig(this.back)]
return == orig(this.theArray[post(this.currentSize)])
return == orig(this.theArray[post(this.back)])
return == orig(this.theArray[this.currentSize])
return == orig(this.theArray[this.back])
this.theArray[] elements == null
this.theArray[].getClass().getName() elements == null
this.currentSize == 0
return == null
this.theArray[0..this.currentSize] == [null]
this.theArray[0..this.currentSize-1] == []
this.theArray[] elements == return
this.currentSize <= this.front
this.currentSize <= this.back
(this.back == 0) ==> (this.front == 0)
(this.back == 0) ==> (size(this.theArray[])-1 == 0)
===========================================================================
DataStructures.QueueAr.getFront():::EXIT75;condition="isEmpty()"
===========================================================================
DataStructures.QueueAr.getFront():::EXIT75;condition="orig(isEmpty())"
===========================================================================
DataStructures.QueueAr.getFront():::EXIT76
(this.currentSize == size(this.theArray[]))  ==>  (this.theArray[0..this.currentSize-1] contains no duplicates)
(this.currentSize == size(this.theArray[]))  ==>  (this.theArray[0..this.currentSize-1] elements != null)
(this.currentSize == size(this.theArray[]))  ==>  (this.theArray[] contains no duplicates)
(this.currentSize == size(this.theArray[]))  ==>  (this.theArray[] elements != null)
(this.currentSize == size(this.theArray[]))  ==>  (this.theArray[this.currentSize..] == [])
this.currentSize >= 1
return != null
this.theArray[this.back] != null
===========================================================================
DataStructures.QueueAr.getFront():::EXIT76;condition="not(currentSize == 0)"
===========================================================================
DataStructures.QueueAr.getFront():::EXIT76;condition="not(orig(currentSize == 0))"
===========================================================================
DataStructures.QueueAr.getFront():::EXIT76;condition="currentSize == theArray.length"
===========================================================================
DataStructures.QueueAr.getFront():::EXIT76;condition="not(currentSize == theArray.length)"
this.currentSize >= 1
return != null
this.theArray[this.back] != null
===========================================================================
DataStructures.QueueAr.getFront():::EXIT76;condition="orig(currentSize == theArray.length)"
===========================================================================
DataStructures.QueueAr.getFront():::EXIT76;condition="not(orig(currentSize == theArray.length))"
this.currentSize >= 1
return != null
this.theArray[this.back] != null
===========================================================================
DataStructures.QueueAr.getFront():::EXIT76;condition="not(isEmpty())"
===========================================================================
DataStructures.QueueAr.getFront():::EXIT76;condition="not(orig(isEmpty()))"
===========================================================================
DataStructures.QueueAr.getFront():::EXIT
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.theArray[] == orig(this.theArray[])
this.currentSize == orig(this.currentSize)
this.front == orig(this.front)
this.back == orig(this.back)
return == this.theArray[this.front]
return == this.theArray[orig(this.front)]
return == orig(this.theArray[post(this.front)])
return == orig(this.theArray[this.front])
(this.currentSize <= size(this.theArray[])-1)  ==>  ((size(this.theArray[])-1 == 0) ==> (this.currentSize == 0))
(this.currentSize == 0)  <==>  (return == null)
(this.currentSize == 0)  <==>  (this.theArray[this.back] == null)
(this.currentSize == 0)  ==>  ((this.back == 0) ==> (size(this.theArray[])-1 == 0))
(this.currentSize == 0)  ==>  ((this.back == 0) ==> (this.front == 0))
(this.currentSize == 0)  ==>  (orig(this.theArray[0..post(this.currentSize)]) == [null])
(this.currentSize == 0)  ==>  (orig(this.theArray[0..this.currentSize]) == [null])
(this.currentSize == 0)  ==>  (orig(this.theArray[post(this.currentSize)]) == null)
(this.currentSize == 0)  ==>  (orig(this.theArray[this.currentSize]) == null)
(this.currentSize == 0)  ==>  (return == orig(this.theArray[post(this.currentSize)]))
(this.currentSize == 0)  ==>  (return == orig(this.theArray[this.currentSize]))
(this.currentSize == 0)  ==>  (return == this.theArray[orig(this.currentSize)])
(this.currentSize == 0)  ==>  (return == this.theArray[this.back])
(this.currentSize == 0)  ==>  (return == this.theArray[this.currentSize])
(this.currentSize == 0)  ==>  (this.currentSize <= size(this.theArray[])-1)
(this.currentSize == 0)  ==>  (this.currentSize <= this.back)
(this.currentSize == 0)  ==>  (this.currentSize <= this.front)
(this.currentSize == 0)  ==>  (this.currentSize is a pointer)
(this.currentSize == 0)  ==>  (this.theArray[0..orig(this.currentSize)] == [null])
(this.currentSize == 0)  ==>  (this.theArray[0..this.currentSize-1] == [])
(this.currentSize == 0)  ==>  (this.theArray[0..this.currentSize] == [null])
(this.currentSize == 0)  ==>  (this.theArray[] elements == null)
(this.currentSize == 0)  ==>  (this.theArray[] elements == orig(this.theArray[post(this.currentSize)]))
(this.currentSize == 0)  ==>  (this.theArray[] elements == orig(this.theArray[this.currentSize]))
(this.currentSize == 0)  ==>  (this.theArray[] elements == return)
(this.currentSize == 0)  ==>  (this.theArray[] elements == this.theArray[orig(this.currentSize)])
(this.currentSize == 0)  ==>  (this.theArray[] elements == this.theArray[this.back])
(this.currentSize == 0)  ==>  (this.theArray[] elements == this.theArray[this.currentSize])
(this.currentSize == 0)  ==>  (this.theArray[].getClass().getName() elements == null)
(this.currentSize == 0)  ==>  (this.theArray[orig(this.currentSize)] == null)
(this.currentSize == 0)  ==>  (this.theArray[this.currentSize..] elements == null)
(this.currentSize == 0)  ==>  (this.theArray[this.currentSize..] elements == orig(this.theArray[post(this.currentSize)]))
(this.currentSize == 0)  ==>  (this.theArray[this.currentSize..] elements == orig(this.theArray[this.currentSize]))
(this.currentSize == 0)  ==>  (this.theArray[this.currentSize..] elements == return)
(this.currentSize == 0)  ==>  (this.theArray[this.currentSize..] elements == this.theArray[orig(this.currentSize)])
(this.currentSize == 0)  ==>  (this.theArray[this.currentSize..] elements == this.theArray[this.back])
(this.currentSize == 0)  ==>  (this.theArray[this.currentSize..] elements == this.theArray[this.currentSize])
(this.currentSize == 0)  ==>  (this.theArray[this.currentSize] == null)
(this.currentSize == size(this.theArray[]))  ==>  (this.theArray[0..this.currentSize-1] contains no duplicates)
(this.currentSize == size(this.theArray[]))  ==>  (this.theArray[0..this.currentSize-1] elements != null)
(this.currentSize == size(this.theArray[]))  ==>  (this.theArray[] contains no duplicates)
(this.currentSize == size(this.theArray[]))  ==>  (this.theArray[] elements != null)
(this.currentSize == size(this.theArray[]))  ==>  (this.theArray[this.currentSize..] == [])
return.getClass().getName() is printable
this.theArray.getClass().getName() != return.getClass().getName()
return.getClass().getName() in this.theArray[].getClass().getName()
===========================================================================
DataStructures.QueueAr.getFront():::EXIT;condition="currentSize == 0"
return == this.theArray[this.currentSize]
return == this.theArray[this.back]
return == this.theArray[orig(this.currentSize)]
return == this.theArray[orig(this.back)]
return == orig(this.theArray[post(this.currentSize)])
return == orig(this.theArray[post(this.back)])
return == orig(this.theArray[this.currentSize])
return == orig(this.theArray[this.back])
this.theArray[] elements == null
this.theArray[].getClass().getName() elements == null
this.currentSize == 0
return == null
this.theArray[0..this.currentSize] == [null]
this.theArray[0..this.currentSize-1] == []
this.theArray[] elements == return
this.currentSize <= this.front
this.currentSize <= this.back
this.currentSize <= size(this.theArray[])-1
(this.back == 0) ==> (this.front == 0)
(this.back == 0) ==> (size(this.theArray[])-1 == 0)
===========================================================================
DataStructures.QueueAr.getFront():::EXIT;condition="not(currentSize == 0)"
this.currentSize >= 1
return != null
this.theArray[this.back] != null
===========================================================================
DataStructures.QueueAr.getFront():::EXIT;condition="orig(currentSize == 0)"
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.theArray[] == orig(this.theArray[])
this.currentSize == orig(this.currentSize)
this.front == orig(this.front)
this.back == orig(this.back)
return == this.theArray[this.currentSize]
return == this.theArray[this.front]
return == this.theArray[this.back]
return == this.theArray[orig(this.currentSize)]
return == this.theArray[orig(this.front)]
return == this.theArray[orig(this.back)]
return == orig(this.theArray[post(this.currentSize)])
return == orig(this.theArray[post(this.front)])
return == orig(this.theArray[post(this.back)])
return == orig(this.theArray[this.currentSize])
return == orig(this.theArray[this.front])
return == orig(this.theArray[this.back])
this.theArray != null
this.theArray.getClass().getName() == java.lang.Object[].class
this.theArray[] elements == null
this.theArray[].getClass().getName() elements == null
this.currentSize == 0
this.front >= 0
this.back >= 0
return == null
this.theArray[0..this.currentSize] == [null]
this.theArray[0..this.currentSize-1] == []
this.theArray[] elements == return
this.currentSize <= this.front
this.currentSize <= this.back
this.currentSize <= size(this.theArray[])-1
(this.back == 0) ==> (this.front == 0)
(size(this.theArray[])-1 == 0) ==> (this.front == 0)
this.front <= size(this.theArray[])-1
(size(this.theArray[])-1 == 0) ==> (this.back == 0)
(this.back == 0) ==> (size(this.theArray[])-1 == 0)
this.back <= size(this.theArray[])-1
===========================================================================
DataStructures.QueueAr.getFront():::EXIT;condition="not(orig(currentSize == 0))"
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.theArray[] == orig(this.theArray[])
this.currentSize == orig(this.currentSize)
this.front == orig(this.front)
this.back == orig(this.back)
return == this.theArray[this.front]
return == this.theArray[orig(this.front)]
return == orig(this.theArray[post(this.front)])
return == orig(this.theArray[this.front])
this.theArray != null
this.theArray.getClass().getName() == java.lang.Object[].class
this.currentSize >= 1
this.front >= 0
this.back >= 0
return != null
return.getClass().getName() is printable
this.theArray[this.back] != null
this.theArray.getClass().getName() != return.getClass().getName()
return.getClass().getName() in this.theArray[].getClass().getName()
this.currentSize <= size(this.theArray[])
(size(this.theArray[])-1 == 0) ==> (this.front == 0)
this.front <= size(this.theArray[])-1
(size(this.theArray[])-1 == 0) ==> (this.back == 0)
this.back <= size(this.theArray[])-1
===========================================================================
DataStructures.QueueAr.getFront():::EXIT;condition="currentSize == theArray.length"
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.theArray[] == orig(this.theArray[])
this.currentSize == orig(this.currentSize)
this.currentSize == size(this.theArray[])
this.currentSize == orig(size(this.theArray[]))
this.front == orig(this.front)
this.back == orig(this.back)
return == this.theArray[this.front]
return == this.theArray[orig(this.front)]
return == orig(this.theArray[post(this.front)])
return == orig(this.theArray[this.front])
this.theArray != null
this.theArray.getClass().getName() == java.lang.Object[].class
this.theArray[] contains no duplicates
this.theArray[] elements != null
this.front >= 0
this.back >= 0
return.getClass().getName() is printable
this.theArray[this.currentSize..] == []
this.theArray.getClass().getName() != return.getClass().getName()
return.getClass().getName() in this.theArray[].getClass().getName()
(size(this.theArray[])-1 == 0) ==> (this.front == 0)
this.front <= size(this.theArray[])-1
(size(this.theArray[])-1 == 0) ==> (this.back == 0)
this.back <= size(this.theArray[])-1
===========================================================================
DataStructures.QueueAr.getFront():::EXIT;condition="not(currentSize == theArray.length)"
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.theArray[] == orig(this.theArray[])
this.currentSize == orig(this.currentSize)
this.front == orig(this.front)
this.back == orig(this.back)
return == this.theArray[this.front]
return == this.theArray[orig(this.front)]
return == orig(this.theArray[post(this.front)])
return == orig(this.theArray[this.front])
this.theArray != null
this.theArray.getClass().getName() == java.lang.Object[].class
this.currentSize >= 0
this.front >= 0
this.back >= 0
return.getClass().getName() is printable
this.theArray.getClass().getName() != return.getClass().getName()
return.getClass().getName() in this.theArray[].getClass().getName()
(size(this.theArray[])-1 == 0) ==> (this.currentSize == 0)
this.currentSize <= size(this.theArray[])-1
(size(this.theArray[])-1 == 0) ==> (this.front == 0)
this.front <= size(this.theArray[])-1
(size(this.theArray[])-1 == 0) ==> (this.back == 0)
this.back <= size(this.theArray[])-1
===========================================================================
DataStructures.QueueAr.getFront():::EXIT;condition="orig(currentSize == theArray.length)"
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.theArray[] == orig(this.theArray[])
this.currentSize == orig(this.currentSize)
this.currentSize == size(this.theArray[])
this.currentSize == orig(size(this.theArray[]))
this.front == orig(this.front)
this.back == orig(this.back)
return == this.theArray[this.front]
return == this.theArray[orig(this.front)]
return == orig(this.theArray[post(this.front)])
return == orig(this.theArray[this.front])
this.theArray != null
this.theArray.getClass().getName() == java.lang.Object[].class
this.theArray[] contains no duplicates
this.theArray[] elements != null
this.front >= 0
this.back >= 0
return.getClass().getName() is printable
this.theArray[this.currentSize..] == []
this.theArray.getClass().getName() != return.getClass().getName()
return.getClass().getName() in this.theArray[].getClass().getName()
(size(this.theArray[])-1 == 0) ==> (this.front == 0)
this.front <= size(this.theArray[])-1
(size(this.theArray[])-1 == 0) ==> (this.back == 0)
this.back <= size(this.theArray[])-1
===========================================================================
DataStructures.QueueAr.getFront():::EXIT;condition="not(orig(currentSize == theArray.length))"
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.theArray[] == orig(this.theArray[])
this.currentSize == orig(this.currentSize)
this.front == orig(this.front)
this.back == orig(this.back)
return == this.theArray[this.front]
return == this.theArray[orig(this.front)]
return == orig(this.theArray[post(this.front)])
return == orig(this.theArray[this.front])
this.theArray != null
this.theArray.getClass().getName() == java.lang.Object[].class
this.currentSize >= 0
this.front >= 0
this.back >= 0
return.getClass().getName() is printable
this.theArray.getClass().getName() != return.getClass().getName()
return.getClass().getName() in this.theArray[].getClass().getName()
(size(this.theArray[])-1 == 0) ==> (this.currentSize == 0)
this.currentSize <= size(this.theArray[])-1
(size(this.theArray[])-1 == 0) ==> (this.front == 0)
this.front <= size(this.theArray[])-1
(size(this.theArray[])-1 == 0) ==> (this.back == 0)
this.back <= size(this.theArray[])-1
===========================================================================
DataStructures.QueueAr.getFront():::EXIT;condition="isEmpty()"
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.theArray[] == orig(this.theArray[])
this.currentSize == orig(this.currentSize)
this.front == orig(this.front)
this.back == orig(this.back)
return == this.theArray[this.currentSize]
return == this.theArray[this.front]
return == this.theArray[this.back]
return == this.theArray[orig(this.currentSize)]
return == this.theArray[orig(this.front)]
return == this.theArray[orig(this.back)]
return == orig(this.theArray[post(this.currentSize)])
return == orig(this.theArray[post(this.front)])
return == orig(this.theArray[post(this.back)])
return == orig(this.theArray[this.currentSize])
return == orig(this.theArray[this.front])
return == orig(this.theArray[this.back])
this.theArray != null
this.theArray.getClass().getName() == java.lang.Object[].class
this.theArray[] elements == null
this.theArray[].getClass().getName() elements == null
this.currentSize == 0
this.front >= 0
this.back >= 0
return == null
this.theArray[0..this.currentSize] == [null]
this.theArray[0..this.currentSize-1] == []
this.theArray[] elements == return
this.currentSize <= this.front
this.currentSize <= this.back
this.currentSize <= size(this.theArray[])-1
(this.back == 0) ==> (this.front == 0)
(size(this.theArray[])-1 == 0) ==> (this.front == 0)
this.front <= size(this.theArray[])-1
(size(this.theArray[])-1 == 0) ==> (this.back == 0)
(this.back == 0) ==> (size(this.theArray[])-1 == 0)
this.back <= size(this.theArray[])-1
===========================================================================
DataStructures.QueueAr.getFront():::EXIT;condition="not(isEmpty())"
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.theArray[] == orig(this.theArray[])
this.currentSize == orig(this.currentSize)
this.front == orig(this.front)
this.back == orig(this.back)
return == this.theArray[this.front]
return == this.theArray[orig(this.front)]
return == orig(this.theArray[post(this.front)])
return == orig(this.theArray[this.front])
this.theArray != null
this.theArray.getClass().getName() == java.lang.Object[].class
this.currentSize >= 1
this.front >= 0
this.back >= 0
return != null
return.getClass().getName() is printable
this.theArray[this.back] != null
this.theArray.getClass().getName() != return.getClass().getName()
return.getClass().getName() in this.theArray[].getClass().getName()
this.currentSize <= size(this.theArray[])
(size(this.theArray[])-1 == 0) ==> (this.front == 0)
this.front <= size(this.theArray[])-1
(size(this.theArray[])-1 == 0) ==> (this.back == 0)
this.back <= size(this.theArray[])-1
===========================================================================
DataStructures.QueueAr.getFront():::EXIT;condition="orig(isEmpty())"
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.theArray[] == orig(this.theArray[])
this.currentSize == orig(this.currentSize)
this.front == orig(this.front)
this.back == orig(this.back)
return == this.theArray[this.currentSize]
return == this.theArray[this.front]
return == this.theArray[this.back]
return == this.theArray[orig(this.currentSize)]
return == this.theArray[orig(this.front)]
return == this.theArray[orig(this.back)]
return == orig(this.theArray[post(this.currentSize)])
return == orig(this.theArray[post(this.front)])
return == orig(this.theArray[post(this.back)])
return == orig(this.theArray[this.currentSize])
return == orig(this.theArray[this.front])
return == orig(this.theArray[this.back])
this.theArray != null
this.theArray.getClass().getName() == java.lang.Object[].class
this.theArray[] elements == null
this.theArray[].getClass().getName() elements == null
this.currentSize == 0
this.front >= 0
this.back >= 0
return == null
this.theArray[0..this.currentSize] == [null]
this.theArray[0..this.currentSize-1] == []
this.theArray[] elements == return
this.currentSize <= this.front
this.currentSize <= this.back
this.currentSize <= size(this.theArray[])-1
(this.back == 0) ==> (this.front == 0)
(size(this.theArray[])-1 == 0) ==> (this.front == 0)
this.front <= size(this.theArray[])-1
(size(this.theArray[])-1 == 0) ==> (this.back == 0)
(this.back == 0) ==> (size(this.theArray[])-1 == 0)
this.back <= size(this.theArray[])-1
===========================================================================
DataStructures.QueueAr.getFront():::EXIT;condition="not(orig(isEmpty()))"
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.theArray[] == orig(this.theArray[])
this.currentSize == orig(this.currentSize)
this.front == orig(this.front)
this.back == orig(this.back)
return == this.theArray[this.front]
return == this.theArray[orig(this.front)]
return == orig(this.theArray[post(this.front)])
return == orig(this.theArray[this.front])
this.theArray != null
this.theArray.getClass().getName() == java.lang.Object[].class
this.currentSize >= 1
this.front >= 0
this.back >= 0
return != null
return.getClass().getName() is printable
this.theArray[this.back] != null
this.theArray.getClass().getName() != return.getClass().getName()
return.getClass().getName() in this.theArray[].getClass().getName()
this.currentSize <= size(this.theArray[])
(size(this.theArray[])-1 == 0) ==> (this.front == 0)
this.front <= size(this.theArray[])-1
(size(this.theArray[])-1 == 0) ==> (this.back == 0)
this.back <= size(this.theArray[])-1
===========================================================================
DataStructures.QueueAr.isEmpty():::ENTER
===========================================================================
DataStructures.QueueAr.isEmpty():::EXIT
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.theArray[] == orig(this.theArray[])
this.currentSize == orig(this.currentSize)
this.front == orig(this.front)
this.back == orig(this.back)
(this.currentSize == 0)  <==>  (return == true)
(this.currentSize == 0)  ==>  ((this.back == 0) ==> (size(this.theArray[])-1 == 0))
(this.currentSize == 0)  ==>  ((this.back == 0) ==> (this.front == 0))
(this.currentSize == 0)  ==>  (orig(this.theArray[0..post(this.currentSize)]) == [null])
(this.currentSize == 0)  ==>  (orig(this.theArray[0..this.currentSize]) == [null])
(this.currentSize == 0)  ==>  (this.currentSize <= size(this.theArray[])-1)
(this.currentSize == 0)  ==>  (this.currentSize <= this.back)
(this.currentSize == 0)  ==>  (this.currentSize <= this.front)
(this.currentSize == 0)  ==>  (this.currentSize is a pointer)
(this.currentSize == 0)  ==>  (this.theArray[0..orig(this.currentSize)] == [null])
(this.currentSize == 0)  ==>  (this.theArray[0..this.currentSize-1] == [])
(this.currentSize == 0)  ==>  (this.theArray[0..this.currentSize] == [null])
(this.currentSize == 0)  ==>  (this.theArray[] elements == null)
(this.currentSize == 0)  ==>  (this.theArray[] elements == orig(this.theArray[post(this.currentSize)]))
(this.currentSize == 0)  ==>  (this.theArray[] elements == orig(this.theArray[this.currentSize]))
(this.currentSize == 0)  ==>  (this.theArray[] elements == this.theArray[orig(this.currentSize)])
(this.currentSize == 0)  ==>  (this.theArray[] elements == this.theArray[this.back])
(this.currentSize == 0)  ==>  (this.theArray[] elements == this.theArray[this.currentSize])
(this.currentSize == 0)  ==>  (this.theArray[] elements == this.theArray[this.front])
(this.currentSize == 0)  ==>  (this.theArray[].getClass().getName() elements == null)
(this.currentSize == 0)  ==>  (this.theArray[this.currentSize..] elements == null)
(this.currentSize == 0)  ==>  (this.theArray[this.currentSize..] elements == orig(this.theArray[post(this.currentSize)]))
(this.currentSize == 0)  ==>  (this.theArray[this.currentSize..] elements == orig(this.theArray[this.currentSize]))
(this.currentSize == 0)  ==>  (this.theArray[this.currentSize..] elements == this.theArray[orig(this.currentSize)])
(this.currentSize == 0)  ==>  (this.theArray[this.currentSize..] elements == this.theArray[this.back])
(this.currentSize == 0)  ==>  (this.theArray[this.currentSize..] elements == this.theArray[this.currentSize])
(this.currentSize == 0)  ==>  (this.theArray[this.currentSize..] elements == this.theArray[this.front])
(this.currentSize == 0)  ==>  (this.theArray[this.currentSize] == this.theArray[this.back])
(this.currentSize == 0)  ==>  (this.theArray[this.currentSize] == this.theArray[this.front])
===========================================================================
DataStructures.QueueAr.isEmpty():::EXIT;condition="return == true"
this.theArray[this.currentSize] == this.theArray[this.front]
this.theArray[this.currentSize] == this.theArray[this.back]
this.theArray[this.currentSize] == this.theArray[orig(this.front)]
this.theArray[this.currentSize] == this.theArray[orig(this.back)]
this.theArray[this.currentSize] == orig(this.theArray[post(this.front)])
this.theArray[this.currentSize] == orig(this.theArray[post(this.back)])
this.theArray[this.currentSize] == orig(this.theArray[this.front])
this.theArray[this.currentSize] == orig(this.theArray[this.back])
this.theArray[] elements == null
this.theArray[].getClass().getName() elements == null
this.currentSize == 0
return == true
this.theArray[0..this.currentSize] == [null]
this.theArray[0..this.currentSize-1] == []
this.theArray[] elements == this.theArray[this.currentSize]
this.currentSize <= this.front
this.currentSize <= this.back
this.currentSize <= size(this.theArray[])-1
(this.back == 0) ==> (this.front == 0)
(this.back == 0) ==> (size(this.theArray[])-1 == 0)
===========================================================================
DataStructures.QueueAr.isEmpty():::EXIT;condition="not(return == true)"
this.currentSize >= 1
return == false
this.theArray[this.front] != null
this.theArray[this.back] != null
===========================================================================
DataStructures.QueueAr.isEmpty():::EXIT;condition="currentSize == 0"
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.theArray[] == orig(this.theArray[])
this.currentSize == orig(this.currentSize)
this.front == orig(this.front)
this.back == orig(this.back)
this.theArray[this.currentSize] == this.theArray[this.front]
this.theArray[this.currentSize] == this.theArray[this.back]
this.theArray[this.currentSize] == this.theArray[orig(this.front)]
this.theArray[this.currentSize] == this.theArray[orig(this.back)]
this.theArray[this.currentSize] == orig(this.theArray[post(this.front)])
this.theArray[this.currentSize] == orig(this.theArray[post(this.back)])
this.theArray[this.currentSize] == orig(this.theArray[this.front])
this.theArray[this.currentSize] == orig(this.theArray[this.back])
this.theArray != null
this.theArray.getClass().getName() == java.lang.Object[].class
this.theArray[] elements == null
this.theArray[].getClass().getName() elements == null
this.currentSize == 0
this.front >= 0
this.back >= 0
return == true
this.theArray[0..this.currentSize] == [null]
this.theArray[0..this.currentSize-1] == []
this.theArray[] elements == this.theArray[this.currentSize]
this.currentSize <= this.front
this.currentSize <= this.back
this.currentSize <= size(this.theArray[])-1
(this.back == 0) ==> (this.front == 0)
(size(this.theArray[])-1 == 0) ==> (this.front == 0)
this.front <= size(this.theArray[])-1
(size(this.theArray[])-1 == 0) ==> (this.back == 0)
(this.back == 0) ==> (size(this.theArray[])-1 == 0)
this.back <= size(this.theArray[])-1
===========================================================================
DataStructures.QueueAr.isEmpty():::EXIT;condition="not(currentSize == 0)"
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.theArray[] == orig(this.theArray[])
this.currentSize == orig(this.currentSize)
this.front == orig(this.front)
this.back == orig(this.back)
this.theArray != null
this.theArray.getClass().getName() == java.lang.Object[].class
this.currentSize >= 1
this.front >= 0
this.back >= 0
return == false
this.theArray[this.front] != null
this.theArray[this.back] != null
this.currentSize <= size(this.theArray[])
(size(this.theArray[])-1 == 0) ==> (this.front == 0)
this.front <= size(this.theArray[])-1
(size(this.theArray[])-1 == 0) ==> (this.back == 0)
this.back <= size(this.theArray[])-1
===========================================================================
DataStructures.QueueAr.isEmpty():::EXIT;condition="orig(currentSize == 0)"
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.theArray[] == orig(this.theArray[])
this.currentSize == orig(this.currentSize)
this.front == orig(this.front)
this.back == orig(this.back)
this.theArray[this.currentSize] == this.theArray[this.front]
this.theArray[this.currentSize] == this.theArray[this.back]
this.theArray[this.currentSize] == this.theArray[orig(this.front)]
this.theArray[this.currentSize] == this.theArray[orig(this.back)]
this.theArray[this.currentSize] == orig(this.theArray[post(this.front)])
this.theArray[this.currentSize] == orig(this.theArray[post(this.back)])
this.theArray[this.currentSize] == orig(this.theArray[this.front])
this.theArray[this.currentSize] == orig(this.theArray[this.back])
this.theArray != null
this.theArray.getClass().getName() == java.lang.Object[].class
this.theArray[] elements == null
this.theArray[].getClass().getName() elements == null
this.currentSize == 0
this.front >= 0
this.back >= 0
return == true
this.theArray[0..this.currentSize] == [null]
this.theArray[0..this.currentSize-1] == []
this.theArray[] elements == this.theArray[this.currentSize]
this.currentSize <= this.front
this.currentSize <= this.back
this.currentSize <= size(this.theArray[])-1
(this.back == 0) ==> (this.front == 0)
(size(this.theArray[])-1 == 0) ==> (this.front == 0)
this.front <= size(this.theArray[])-1
(size(this.theArray[])-1 == 0) ==> (this.back == 0)
(this.back == 0) ==> (size(this.theArray[])-1 == 0)
this.back <= size(this.theArray[])-1
===========================================================================
DataStructures.QueueAr.isEmpty():::EXIT;condition="not(orig(currentSize == 0))"
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.theArray[] == orig(this.theArray[])
this.currentSize == orig(this.currentSize)
this.front == orig(this.front)
this.back == orig(this.back)
this.theArray != null
this.theArray.getClass().getName() == java.lang.Object[].class
this.currentSize >= 1
this.front >= 0
this.back >= 0
return == false
this.theArray[this.front] != null
this.theArray[this.back] != null
this.currentSize <= size(this.theArray[])
(size(this.theArray[])-1 == 0) ==> (this.front == 0)
this.front <= size(this.theArray[])-1
(size(this.theArray[])-1 == 0) ==> (this.back == 0)
this.back <= size(this.theArray[])-1
===========================================================================
DataStructures.QueueAr.isFull():::ENTER
(this.currentSize == 0)  ==>  ((this.back == 0) ==> (size(this.theArray[])-1 == 0))
(this.currentSize == 0)  ==>  ((this.back == 0) ==> (this.front == 0))
(this.currentSize == 0)  ==>  (this.currentSize <= size(this.theArray[])-1)
(this.currentSize == 0)  ==>  (this.currentSize <= this.back)
(this.currentSize == 0)  ==>  (this.currentSize <= this.front)
(this.currentSize == 0)  ==>  (this.currentSize is a pointer)
(this.currentSize == 0)  ==>  (this.theArray[0..this.currentSize-1] == [])
(this.currentSize == 0)  ==>  (this.theArray[0..this.currentSize] == [null])
(this.currentSize == 0)  ==>  (this.theArray[] elements == null)
(this.currentSize == 0)  ==>  (this.theArray[] elements == this.theArray[this.back])
(this.currentSize == 0)  ==>  (this.theArray[] elements == this.theArray[this.currentSize])
(this.currentSize == 0)  ==>  (this.theArray[] elements == this.theArray[this.front])
(this.currentSize == 0)  ==>  (this.theArray[].getClass().getName() elements == null)
(this.currentSize == 0)  ==>  (this.theArray[this.currentSize..] elements == null)
(this.currentSize == 0)  ==>  (this.theArray[this.currentSize..] elements == this.theArray[this.back])
(this.currentSize == 0)  ==>  (this.theArray[this.currentSize..] elements == this.theArray[this.currentSize])
(this.currentSize == 0)  ==>  (this.theArray[this.currentSize..] elements == this.theArray[this.front])
(this.currentSize == 0)  ==>  (this.theArray[this.currentSize] == this.theArray[this.back])
(this.currentSize == 0)  ==>  (this.theArray[this.currentSize] == this.theArray[this.front])
===========================================================================
DataStructures.QueueAr.isFull():::ENTER;condition="currentSize == 0"
this.theArray[this.currentSize] == this.theArray[this.front]
this.theArray[this.currentSize] == this.theArray[this.back]
this.theArray[] elements == null
this.theArray[].getClass().getName() elements == null
this.currentSize == 0
this.theArray[0..this.currentSize] == [null]
this.theArray[0..this.currentSize-1] == []
this.theArray[] elements == this.theArray[this.currentSize]
this.currentSize <= this.front
this.currentSize <= this.back
this.currentSize <= size(this.theArray[])-1
(this.back == 0) ==> (this.front == 0)
(this.back == 0) ==> (size(this.theArray[])-1 == 0)
===========================================================================
DataStructures.QueueAr.isFull():::ENTER;condition="not(currentSize == 0)"
this.currentSize >= 1
this.theArray[this.front] != null
this.theArray[this.back] != null
===========================================================================
DataStructures.QueueAr.isFull():::EXIT
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.theArray[] == orig(this.theArray[])
this.currentSize == orig(this.currentSize)
this.front == orig(this.front)
this.back == orig(this.back)
(return == false)  <==>  (this.currentSize <= size(this.theArray[])-1)
(return == false)  ==>  ((size(this.theArray[])-1 == 0) ==> (this.currentSize == 0))
(return == true)  <==>  (this.currentSize == size(this.theArray[]))
(return == true)  ==>  (this.theArray[0..this.currentSize-1] contains no duplicates)
(return == true)  ==>  (this.theArray[0..this.currentSize-1] elements != null)
(return == true)  ==>  (this.theArray[] contains no duplicates)
(return == true)  ==>  (this.theArray[] elements != null)
(return == true)  ==>  (this.theArray[this.currentSize..] == [])
(this.currentSize == 0)  ==>  ((this.back == 0) ==> (size(this.theArray[])-1 == 0))
(this.currentSize == 0)  ==>  ((this.back == 0) ==> (this.front == 0))
(this.currentSize == 0)  ==>  (orig(this.theArray[0..post(this.currentSize)]) == [null])
(this.currentSize == 0)  ==>  (orig(this.theArray[0..this.currentSize]) == [null])
(this.currentSize == 0)  ==>  (return == false)
(this.currentSize == 0)  ==>  (this.currentSize <= size(this.theArray[])-1)
(this.currentSize == 0)  ==>  (this.currentSize <= this.back)
(this.currentSize == 0)  ==>  (this.currentSize <= this.front)
(this.currentSize == 0)  ==>  (this.currentSize is a pointer)
(this.currentSize == 0)  ==>  (this.theArray[0..orig(this.currentSize)] == [null])
(this.currentSize == 0)  ==>  (this.theArray[0..this.currentSize-1] == [])
(this.currentSize == 0)  ==>  (this.theArray[0..this.currentSize] == [null])
(this.currentSize == 0)  ==>  (this.theArray[] elements == null)
(this.currentSize == 0)  ==>  (this.theArray[] elements == orig(this.theArray[post(this.currentSize)]))
(this.currentSize == 0)  ==>  (this.theArray[] elements == orig(this.theArray[this.currentSize]))
(this.currentSize == 0)  ==>  (this.theArray[] elements == this.theArray[orig(this.currentSize)])
(this.currentSize == 0)  ==>  (this.theArray[] elements == this.theArray[this.back])
(this.currentSize == 0)  ==>  (this.theArray[] elements == this.theArray[this.currentSize])
(this.currentSize == 0)  ==>  (this.theArray[] elements == this.theArray[this.front])
(this.currentSize == 0)  ==>  (this.theArray[].getClass().getName() elements == null)
(this.currentSize == 0)  ==>  (this.theArray[this.currentSize..] elements == null)
(this.currentSize == 0)  ==>  (this.theArray[this.currentSize..] elements == orig(this.theArray[post(this.currentSize)]))
(this.currentSize == 0)  ==>  (this.theArray[this.currentSize..] elements == orig(this.theArray[this.currentSize]))
(this.currentSize == 0)  ==>  (this.theArray[this.currentSize..] elements == this.theArray[orig(this.currentSize)])
(this.currentSize == 0)  ==>  (this.theArray[this.currentSize..] elements == this.theArray[this.back])
(this.currentSize == 0)  ==>  (this.theArray[this.currentSize..] elements == this.theArray[this.currentSize])
(this.currentSize == 0)  ==>  (this.theArray[this.currentSize..] elements == this.theArray[this.front])
(this.currentSize == 0)  ==>  (this.theArray[this.currentSize] == this.theArray[this.back])
(this.currentSize == 0)  ==>  (this.theArray[this.currentSize] == this.theArray[this.front])
===========================================================================
DataStructures.QueueAr.isFull():::EXIT;condition="return == true"
this.currentSize == size(this.theArray[])
this.currentSize == orig(size(this.theArray[]))
this.theArray[] contains no duplicates
this.theArray[] elements != null
return == true
this.theArray[this.currentSize..] == []
===========================================================================
DataStructures.QueueAr.isFull():::EXIT;condition="not(return == true)"
return == false
(size(this.theArray[])-1 == 0) ==> (this.currentSize == 0)
this.currentSize <= size(this.theArray[])-1
===========================================================================
DataStructures.QueueAr.isFull():::EXIT;condition="currentSize == 0"
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.theArray[] == orig(this.theArray[])
this.currentSize == orig(this.currentSize)
this.front == orig(this.front)
this.back == orig(this.back)
this.theArray[this.currentSize] == this.theArray[this.front]
this.theArray[this.currentSize] == this.theArray[this.back]
this.theArray[this.currentSize] == this.theArray[orig(this.front)]
this.theArray[this.currentSize] == this.theArray[orig(this.back)]
this.theArray[this.currentSize] == orig(this.theArray[post(this.front)])
this.theArray[this.currentSize] == orig(this.theArray[post(this.back)])
this.theArray[this.currentSize] == orig(this.theArray[this.front])
this.theArray[this.currentSize] == orig(this.theArray[this.back])
this.theArray != null
this.theArray.getClass().getName() == java.lang.Object[].class
this.theArray[] elements == null
this.theArray[].getClass().getName() elements == null
this.currentSize == 0
this.front >= 0
this.back >= 0
return == false
this.theArray[0..this.currentSize] == [null]
this.theArray[0..this.currentSize-1] == []
this.theArray[] elements == this.theArray[this.currentSize]
this.currentSize <= this.front
this.currentSize <= this.back
this.currentSize <= size(this.theArray[])-1
(this.back == 0) ==> (this.front == 0)
(size(this.theArray[])-1 == 0) ==> (this.front == 0)
this.front <= size(this.theArray[])-1
(size(this.theArray[])-1 == 0) ==> (this.back == 0)
(this.back == 0) ==> (size(this.theArray[])-1 == 0)
this.back <= size(this.theArray[])-1
===========================================================================
DataStructures.QueueAr.isFull():::EXIT;condition="not(currentSize == 0)"
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.theArray[] == orig(this.theArray[])
this.currentSize == orig(this.currentSize)
this.front == orig(this.front)
this.back == orig(this.back)
this.theArray != null
this.theArray.getClass().getName() == java.lang.Object[].class
this.currentSize >= 1
this.front >= 0
this.back >= 0
this.theArray[this.front] != null
this.theArray[this.back] != null
this.currentSize <= size(this.theArray[])
(size(this.theArray[])-1 == 0) ==> (this.front == 0)
this.front <= size(this.theArray[])-1
(size(this.theArray[])-1 == 0) ==> (this.back == 0)
this.back <= size(this.theArray[])-1
===========================================================================
DataStructures.QueueAr.isFull():::EXIT;condition="orig(currentSize == 0)"
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.theArray[] == orig(this.theArray[])
this.currentSize == orig(this.currentSize)
this.front == orig(this.front)
this.back == orig(this.back)
this.theArray[this.currentSize] == this.theArray[this.front]
this.theArray[this.currentSize] == this.theArray[this.back]
this.theArray[this.currentSize] == this.theArray[orig(this.front)]
this.theArray[this.currentSize] == this.theArray[orig(this.back)]
this.theArray[this.currentSize] == orig(this.theArray[post(this.front)])
this.theArray[this.currentSize] == orig(this.theArray[post(this.back)])
this.theArray[this.currentSize] == orig(this.theArray[this.front])
this.theArray[this.currentSize] == orig(this.theArray[this.back])
this.theArray != null
this.theArray.getClass().getName() == java.lang.Object[].class
this.theArray[] elements == null
this.theArray[].getClass().getName() elements == null
this.currentSize == 0
this.front >= 0
this.back >= 0
return == false
this.theArray[0..this.currentSize] == [null]
this.theArray[0..this.currentSize-1] == []
this.theArray[] elements == this.theArray[this.currentSize]
this.currentSize <= this.front
this.currentSize <= this.back
this.currentSize <= size(this.theArray[])-1
(this.back == 0) ==> (this.front == 0)
(size(this.theArray[])-1 == 0) ==> (this.front == 0)
this.front <= size(this.theArray[])-1
(size(this.theArray[])-1 == 0) ==> (this.back == 0)
(this.back == 0) ==> (size(this.theArray[])-1 == 0)
this.back <= size(this.theArray[])-1
===========================================================================
DataStructures.QueueAr.isFull():::EXIT;condition="not(orig(currentSize == 0))"
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.theArray[] == orig(this.theArray[])
this.currentSize == orig(this.currentSize)
this.front == orig(this.front)
this.back == orig(this.back)
this.theArray != null
this.theArray.getClass().getName() == java.lang.Object[].class
this.currentSize >= 1
this.front >= 0
this.back >= 0
this.theArray[this.front] != null
this.theArray[this.back] != null
this.currentSize <= size(this.theArray[])
(size(this.theArray[])-1 == 0) ==> (this.front == 0)
this.front <= size(this.theArray[])-1
(size(this.theArray[])-1 == 0) ==> (this.back == 0)
this.back <= size(this.theArray[])-1
===========================================================================
DataStructures.QueueAr.isFull():::EXIT;condition="currentSize == theArray.length"
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.theArray[] == orig(this.theArray[])
this.currentSize == orig(this.currentSize)
this.currentSize == size(this.theArray[])
this.currentSize == orig(size(this.theArray[]))
this.front == orig(this.front)
this.back == orig(this.back)
this.theArray != null
this.theArray.getClass().getName() == java.lang.Object[].class
this.theArray[] contains no duplicates
this.theArray[] elements != null
this.front >= 0
this.back >= 0
return == true
this.theArray[this.currentSize..] == []
(size(this.theArray[])-1 == 0) ==> (this.front == 0)
this.front <= size(this.theArray[])-1
(size(this.theArray[])-1 == 0) ==> (this.back == 0)
this.back <= size(this.theArray[])-1
===========================================================================
DataStructures.QueueAr.isFull():::EXIT;condition="not(currentSize == theArray.length)"
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.theArray[] == orig(this.theArray[])
this.currentSize == orig(this.currentSize)
this.front == orig(this.front)
this.back == orig(this.back)
this.theArray != null
this.theArray.getClass().getName() == java.lang.Object[].class
this.currentSize >= 0
this.front >= 0
this.back >= 0
return == false
(size(this.theArray[])-1 == 0) ==> (this.currentSize == 0)
this.currentSize <= size(this.theArray[])-1
(size(this.theArray[])-1 == 0) ==> (this.front == 0)
this.front <= size(this.theArray[])-1
(size(this.theArray[])-1 == 0) ==> (this.back == 0)
this.back <= size(this.theArray[])-1
===========================================================================
DataStructures.QueueAr.isFull():::EXIT;condition="orig(currentSize == theArray.length)"
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.theArray[] == orig(this.theArray[])
this.currentSize == orig(this.currentSize)
this.currentSize == size(this.theArray[])
this.currentSize == orig(size(this.theArray[]))
this.front == orig(this.front)
this.back == orig(this.back)
this.theArray != null
this.theArray.getClass().getName() == java.lang.Object[].class
this.theArray[] contains no duplicates
this.theArray[] elements != null
this.front >= 0
this.back >= 0
return == true
this.theArray[this.currentSize..] == []
(size(this.theArray[])-1 == 0) ==> (this.front == 0)
this.front <= size(this.theArray[])-1
(size(this.theArray[])-1 == 0) ==> (this.back == 0)
this.back <= size(this.theArray[])-1
===========================================================================
DataStructures.QueueAr.isFull():::EXIT;condition="not(orig(currentSize == theArray.length))"
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.theArray[] == orig(this.theArray[])
this.currentSize == orig(this.currentSize)
this.front == orig(this.front)
this.back == orig(this.back)
this.theArray != null
this.theArray.getClass().getName() == java.lang.Object[].class
this.currentSize >= 0
this.front >= 0
this.back >= 0
return == false
(size(this.theArray[])-1 == 0) ==> (this.currentSize == 0)
this.currentSize <= size(this.theArray[])-1
(size(this.theArray[])-1 == 0) ==> (this.front == 0)
this.front <= size(this.theArray[])-1
(size(this.theArray[])-1 == 0) ==> (this.back == 0)
this.back <= size(this.theArray[])-1
===========================================================================
DataStructures.QueueAr.makeEmpty():::ENTER
(this.currentSize == 0) ==> (this.front == 0)
(this.back == 0) ==> (this.front == 0)
(this.back == 0) ==> (size(this.theArray[])-1 == 0)
===========================================================================
DataStructures.QueueAr.makeEmpty():::ENTER;condition="currentSize == 0"
===========================================================================
DataStructures.QueueAr.makeEmpty():::ENTER;condition="not(currentSize == theArray.length)"
this.theArray != null
this.theArray.getClass().getName() == java.lang.Object[].class
this.currentSize >= 0
this.front >= 0
(this.currentSize == 0) ==> (this.front == 0)
this.currentSize <= size(this.theArray[])
(this.back == 0) ==> (this.front == 0)
(size(this.theArray[])-1 == 0) ==> (this.front == 0)
this.front <= size(this.theArray[])-1
(size(this.theArray[])-1 == 0) ==> (this.back == 0)
(this.back == 0) ==> (size(this.theArray[])-1 == 0)
this.back <= size(this.theArray[])-1
===========================================================================
DataStructures.QueueAr.makeEmpty():::EXIT
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.currentSize == this.front
this.back == size(this.theArray[])-1
this.back == orig(size(this.theArray[]))-1
size(this.theArray[]) == orig(size(this.theArray[]))
this.theArray[this.currentSize] == this.theArray[this.back]
this.theArray[this.currentSize] == this.theArray[orig(this.front)]
this.theArray[this.currentSize] == this.theArray[orig(this.back)]
(orig(this.currentSize) == 0)  <==>  (this.currentSize == orig(this.currentSize))
(orig(this.currentSize) == 0)  ==>  (orig(this.currentSize) is a pointer)
(orig(this.currentSize) == 0)  ==>  (orig(this.front) == 0)
(orig(this.currentSize) == 0)  ==>  (orig(this.front) is a pointer)
(orig(this.currentSize) == 0)  ==>  (orig(this.theArray[0..post(this.currentSize)]) == [null])
(orig(this.currentSize) == 0)  ==>  (orig(this.theArray[0..this.back]) elements == null)
(orig(this.currentSize) == 0)  ==>  (orig(this.theArray[0..this.back]) elements == orig(this.theArray[post(this.back)]))
(orig(this.currentSize) == 0)  ==>  (orig(this.theArray[0..this.back]) elements == orig(this.theArray[post(this.currentSize)]))
(orig(this.currentSize) == 0)  ==>  (orig(this.theArray[0..this.back]) elements == orig(this.theArray[this.back]))
(orig(this.currentSize) == 0)  ==>  (orig(this.theArray[0..this.back]) elements == orig(this.theArray[this.front]))
(orig(this.currentSize) == 0)  ==>  (orig(this.theArray[0..this.back]) elements == this.theArray[this.currentSize])
(orig(this.currentSize) == 0)  ==>  (orig(this.theArray[0..this.currentSize-1]) == [])
(orig(this.currentSize) == 0)  ==>  (orig(this.theArray[0..this.front-1]) == [])
(orig(this.currentSize) == 0)  ==>  (orig(this.theArray[0..this.front]) == [null])
(orig(this.currentSize) == 0)  ==>  (orig(this.theArray[]) elements == null)
(orig(this.currentSize) == 0)  ==>  (orig(this.theArray[]) elements == orig(this.theArray[post(this.back)]))
(orig(this.currentSize) == 0)  ==>  (orig(this.theArray[]) elements == orig(this.theArray[post(this.currentSize)]))
(orig(this.currentSize) == 0)  ==>  (orig(this.theArray[]) elements == orig(this.theArray[this.back]))
(orig(this.currentSize) == 0)  ==>  (orig(this.theArray[]) elements == orig(this.theArray[this.front]))
(orig(this.currentSize) == 0)  ==>  (orig(this.theArray[]) elements == this.theArray[this.currentSize])
(orig(this.currentSize) == 0)  ==>  (orig(this.theArray[].getClass().getName()) elements == null)
(orig(this.currentSize) == 0)  ==>  (orig(this.theArray[post(this.back)..]) == [null])
(orig(this.currentSize) == 0)  ==>  (orig(this.theArray[this.back+1..]) == [])
(orig(this.currentSize) == 0)  ==>  (orig(this.theArray[this.back..]) == [null])
(orig(this.currentSize) == 0)  ==>  (orig(this.theArray[this.currentSize..]) elements == null)
(orig(this.currentSize) == 0)  ==>  (orig(this.theArray[this.currentSize..]) elements == orig(this.theArray[post(this.back)]))
(orig(this.currentSize) == 0)  ==>  (orig(this.theArray[this.currentSize..]) elements == orig(this.theArray[post(this.currentSize)]))
(orig(this.currentSize) == 0)  ==>  (orig(this.theArray[this.currentSize..]) elements == orig(this.theArray[this.back]))
(orig(this.currentSize) == 0)  ==>  (orig(this.theArray[this.currentSize..]) elements == orig(this.theArray[this.front]))
(orig(this.currentSize) == 0)  ==>  (orig(this.theArray[this.currentSize..]) elements == this.theArray[this.currentSize])
(orig(this.currentSize) == 0)  ==>  (orig(this.theArray[this.front..]) elements == null)
(orig(this.currentSize) == 0)  ==>  (orig(this.theArray[this.front..]) elements == orig(this.theArray[post(this.back)]))
(orig(this.currentSize) == 0)  ==>  (orig(this.theArray[this.front..]) elements == orig(this.theArray[post(this.currentSize)]))
(orig(this.currentSize) == 0)  ==>  (orig(this.theArray[this.front..]) elements == orig(this.theArray[this.back]))
(orig(this.currentSize) == 0)  ==>  (orig(this.theArray[this.front..]) elements == orig(this.theArray[this.front]))
(orig(this.currentSize) == 0)  ==>  (orig(this.theArray[this.front..]) elements == this.theArray[this.currentSize])
(orig(this.currentSize) == 0)  ==>  (this.back == orig(this.back))
(orig(this.currentSize) == 0)  ==>  (this.currentSize == orig(this.front))
(orig(this.currentSize) == 0)  ==>  (this.theArray[0..orig(this.back)] elements == orig(this.theArray[post(this.back)]))
(orig(this.currentSize) == 0)  ==>  (this.theArray[0..orig(this.back)] elements == orig(this.theArray[post(this.currentSize)]))
(orig(this.currentSize) == 0)  ==>  (this.theArray[0..orig(this.back)] elements == orig(this.theArray[this.back]))
(orig(this.currentSize) == 0)  ==>  (this.theArray[0..orig(this.back)] elements == orig(this.theArray[this.front]))
(orig(this.currentSize) == 0)  ==>  (this.theArray[0..orig(this.currentSize)-1] == [])
(orig(this.currentSize) == 0)  ==>  (this.theArray[0..orig(this.front)-1] == [])
(orig(this.currentSize) == 0)  ==>  (this.theArray[0..orig(this.front)] == [null])
(orig(this.currentSize) == 0)  ==>  (this.theArray[] == orig(this.theArray[]))
(orig(this.currentSize) == 0)  ==>  (this.theArray[] elements == orig(this.theArray[post(this.back)]))
(orig(this.currentSize) == 0)  ==>  (this.theArray[] elements == orig(this.theArray[post(this.currentSize)]))
(orig(this.currentSize) == 0)  ==>  (this.theArray[] elements == orig(this.theArray[this.back]))
(orig(this.currentSize) == 0)  ==>  (this.theArray[] elements == orig(this.theArray[this.front]))
(orig(this.currentSize) == 0)  ==>  (this.theArray[orig(this.back)+1..] == [])
(orig(this.currentSize) == 0)  ==>  (this.theArray[orig(this.back)..] == [null])
(orig(this.currentSize) == 0)  ==>  (this.theArray[orig(this.currentSize)..] elements == orig(this.theArray[post(this.back)]))
(orig(this.currentSize) == 0)  ==>  (this.theArray[orig(this.currentSize)..] elements == orig(this.theArray[post(this.currentSize)]))
(orig(this.currentSize) == 0)  ==>  (this.theArray[orig(this.currentSize)..] elements == orig(this.theArray[this.back]))
(orig(this.currentSize) == 0)  ==>  (this.theArray[orig(this.currentSize)..] elements == orig(this.theArray[this.front]))
(orig(this.currentSize) == 0)  ==>  (this.theArray[orig(this.front)..] elements == orig(this.theArray[post(this.back)]))
(orig(this.currentSize) == 0)  ==>  (this.theArray[orig(this.front)..] elements == orig(this.theArray[post(this.currentSize)]))
(orig(this.currentSize) == 0)  ==>  (this.theArray[orig(this.front)..] elements == orig(this.theArray[this.back]))
(orig(this.currentSize) == 0)  ==>  (this.theArray[orig(this.front)..] elements == orig(this.theArray[this.front]))
(orig(this.currentSize) == 0)  ==>  (this.theArray[this.currentSize] == orig(this.theArray[post(this.back)]))
(orig(this.currentSize) == 0)  ==>  (this.theArray[this.currentSize] == orig(this.theArray[this.back]))
(orig(this.currentSize) == size(this.theArray[]))  ==>  (orig(this.front) == 0)
(orig(this.currentSize) == size(this.theArray[]))  ==>  (orig(this.front) is a pointer)
(orig(this.currentSize) == size(this.theArray[]))  ==>  (orig(this.theArray[0..post(this.currentSize)]) elements == orig(this.theArray[this.front]))
(orig(this.currentSize) == size(this.theArray[]))  ==>  (orig(this.theArray[0..this.front-1]) == [])
(orig(this.currentSize) == size(this.theArray[]))  ==>  (orig(this.theArray[0..this.front]) elements == orig(this.theArray[post(this.currentSize)]))
(orig(this.currentSize) == size(this.theArray[]))  ==>  (orig(this.theArray[0..this.front]) elements == orig(this.theArray[this.front]))
(orig(this.currentSize) == size(this.theArray[]))  ==>  (orig(this.theArray[post(this.back)..]) elements == orig(this.theArray[this.back]))
(orig(this.currentSize) == size(this.theArray[]))  ==>  (orig(this.theArray[post(this.back)..]) elements == orig(this.theArray[this.currentSize-1]))
(orig(this.currentSize) == size(this.theArray[]))  ==>  (orig(this.theArray[this.back+1..]) == [])
(orig(this.currentSize) == size(this.theArray[]))  ==>  (orig(this.theArray[this.back..]) elements == orig(this.theArray[post(this.back)]))
(orig(this.currentSize) == size(this.theArray[]))  ==>  (orig(this.theArray[this.back..]) elements == orig(this.theArray[this.back]))
(orig(this.currentSize) == size(this.theArray[]))  ==>  (orig(this.theArray[this.back..]) elements == orig(this.theArray[this.currentSize-1]))
(orig(this.currentSize) == size(this.theArray[]))  ==>  (orig(this.theArray[this.currentSize-1]) == orig(this.theArray[this.back]))
(orig(this.currentSize) == size(this.theArray[]))  ==>  (orig(this.theArray[this.currentSize..]) == [])
(orig(this.currentSize) == size(this.theArray[]))  ==>  (this.back == orig(this.back))
(orig(this.currentSize) == size(this.theArray[]))  ==>  (this.currentSize == orig(this.front))
(orig(this.currentSize) == size(this.theArray[]))  ==>  (this.theArray[0..orig(this.back)] elements == this.theArray[orig(this.currentSize)-1])
(orig(this.currentSize) == size(this.theArray[]))  ==>  (this.theArray[0..orig(this.currentSize)-1] elements == this.theArray[orig(this.currentSize)-1])
(orig(this.currentSize) == size(this.theArray[]))  ==>  (this.theArray[0..orig(this.front)-1] == [])
(orig(this.currentSize) == size(this.theArray[]))  ==>  (this.theArray[0..orig(this.front)] == [null])
(orig(this.currentSize) == size(this.theArray[]))  ==>  (this.theArray[] elements == this.theArray[orig(this.currentSize)-1])
(orig(this.currentSize) == size(this.theArray[]))  ==>  (this.theArray[orig(this.back)+1..] == [])
(orig(this.currentSize) == size(this.theArray[]))  ==>  (this.theArray[orig(this.back)..] == [null])
(orig(this.currentSize) == size(this.theArray[]))  ==>  (this.theArray[orig(this.currentSize)..] == [])
(orig(this.currentSize) == size(this.theArray[]))  ==>  (this.theArray[orig(this.front)..] elements == this.theArray[orig(this.currentSize)-1])
(orig(this.currentSize) == size(this.theArray[]))  ==>  (this.theArray[this.currentSize] == this.theArray[orig(this.currentSize)-1])
(this.back >= orig(this.currentSize))  ==>  ((orig(this.back) == 0) ==> (orig(this.currentSize) == 0))
(this.back >= orig(this.currentSize))  ==>  ((this.back == 0) ==> (orig(this.currentSize) == 0))
(this.back >= orig(this.currentSize))  ==>  (this.theArray[0..orig(this.back)-1] is a subset of orig(this.theArray[0..post(this.back)-1]))
(this.back >= orig(this.currentSize))  ==>  (this.theArray[0..orig(this.currentSize)-1] is a subset of orig(this.theArray[0..post(this.back)-1]))
(this.back >= orig(this.currentSize))  ==>  (this.theArray[] is a subset of orig(this.theArray[]))
(this.back >= orig(this.currentSize))  ==>  (this.theArray[orig(this.front)+1..] is a subset of orig(this.theArray[0..post(this.back)-1]))
(this.back >= orig(this.currentSize))  ==>  (this.theArray[orig(this.front)+1..] is a subset of orig(this.theArray[post(this.currentSize)+1..]))
(this.back >= orig(this.currentSize))  ==>  (this.theArray[this.currentSize+1..] is a subset of orig(this.theArray[0..post(this.back)-1]))
this.theArray[] elements == null
this.theArray[].getClass().getName() elements == null
this.currentSize == 0
this.theArray[0..this.currentSize] == [null]
this.theArray[0..this.currentSize-1] == []
this.theArray[] elements == this.theArray[this.currentSize]
this.currentSize <= this.back
this.currentSize <= orig(this.currentSize)
this.currentSize <= orig(this.front)
this.currentSize <= orig(this.back)
(this.back == 0) ==> (orig(this.front) == 0)
this.back >= orig(this.front)
(orig(this.back) == 0) ==> (this.back == 0)
(this.back == 0) ==> (orig(this.back) == 0)
this.back >= orig(this.back)
orig(this.currentSize) <= size(this.theArray[])
this.theArray[0..orig(this.front)-1] is a subset of orig(this.theArray[0..post(this.back)-1])
this.theArray[0..orig(this.front)-1] is a subset of orig(this.theArray[0..this.currentSize-1])
this.theArray[0..orig(this.front)-1] is a subset of orig(this.theArray[0..this.front])
this.theArray[0..orig(this.front)-1] is a subset of orig(this.theArray[0..this.front-1])
this.theArray[orig(this.back)+1..] is a subset of orig(this.theArray[post(this.currentSize)+1..])
this.theArray[orig(this.back)+1..] is a subset of orig(this.theArray[0..post(this.back)-1])
this.theArray[orig(this.back)+1..] is a subset of orig(this.theArray[this.back..])
this.theArray[orig(this.back)+1..] is a subset of orig(this.theArray[this.back+1..])
orig(this.theArray[0..post(this.currentSize)]) elements == orig(this.theArray[post(this.currentSize)])
orig(this.theArray[post(this.back)..]) elements == orig(this.theArray[post(this.back)])
===========================================================================
DataStructures.QueueAr.makeEmpty():::EXIT;condition="currentSize == 0"
===========================================================================
DataStructures.QueueAr.makeEmpty():::EXIT;condition="orig(currentSize == 0)"
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.theArray[] == orig(this.theArray[])
this.currentSize == this.front
this.currentSize == orig(this.currentSize)
this.currentSize == orig(this.front)
this.back == orig(this.back)
this.back == size(this.theArray[])-1
this.back == orig(size(this.theArray[]))-1
this.theArray[this.currentSize] == this.theArray[this.back]
this.theArray[this.currentSize] == this.theArray[orig(this.back)]
this.theArray[this.currentSize] == orig(this.theArray[post(this.back)])
this.theArray[this.currentSize] == orig(this.theArray[this.back])
this.theArray.getClass().getName() == java.lang.Object[].class
this.theArray[] elements == null
this.theArray[].getClass().getName() elements == null
this.currentSize == 0
this.theArray[0..this.currentSize] == [null]
this.theArray[0..this.currentSize-1] == []
this.theArray[] elements == this.theArray[this.currentSize]
===========================================================================
DataStructures.QueueAr.makeEmpty():::EXIT;condition="not(orig(currentSize == 0))"
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.currentSize == this.front
this.back == size(this.theArray[])-1
this.back == orig(size(this.theArray[]))-1
size(this.theArray[]) == orig(size(this.theArray[]))
this.theArray[this.currentSize] == this.theArray[this.back]
this.theArray[this.currentSize] == this.theArray[orig(this.currentSize)-1]
this.theArray[this.currentSize] == this.theArray[orig(this.front)]
this.theArray[this.currentSize] == this.theArray[orig(this.back)]
this.theArray != null
this.theArray.getClass().getName() == java.lang.Object[].class
this.theArray[] elements == null
this.theArray[].getClass().getName() elements == null
this.currentSize == 0
orig(this.currentSize) >= 1
orig(this.front) >= 0
this.theArray[0..this.currentSize] == [null]
this.theArray[0..this.currentSize-1] == []
orig(this.theArray[this.front]) != null
orig(this.theArray[this.back]) != null
this.theArray[] elements == this.theArray[this.currentSize]
this.currentSize <= this.back
this.currentSize < orig(this.currentSize)
this.currentSize <= orig(this.front)
this.currentSize <= orig(this.back)
(this.back == 0) ==> (orig(this.front) == 0)
this.back >= orig(this.front)
(orig(this.back) == 0) ==> (this.back == 0)
(this.back == 0) ==> (orig(this.back) == 0)
this.back >= orig(this.back)
orig(this.currentSize) <= size(this.theArray[])
(orig(this.back) == 0) ==> (orig(this.front) == 0)
this.theArray[orig(this.currentSize)..] is a subset of orig(this.theArray[0..post(this.back)-1])
this.theArray[0..orig(this.front)-1] is a subset of orig(this.theArray[0..post(this.back)-1])
this.theArray[0..orig(this.front)-1] is a subset of orig(this.theArray[0..this.currentSize-1])
this.theArray[0..orig(this.front)-1] is a subset of orig(this.theArray[0..this.front])
this.theArray[0..orig(this.front)-1] is a subset of orig(this.theArray[0..this.front-1])
this.theArray[orig(this.back)+1..] is a subset of orig(this.theArray[post(this.currentSize)+1..])
this.theArray[orig(this.back)+1..] is a subset of orig(this.theArray[0..post(this.back)-1])
this.theArray[orig(this.back)+1..] is a subset of orig(this.theArray[this.back..])
this.theArray[orig(this.back)+1..] is a subset of orig(this.theArray[this.back+1..])
orig(this.theArray[0..post(this.currentSize)]) elements == orig(this.theArray[post(this.currentSize)])
orig(this.theArray[post(this.back)..]) elements == orig(this.theArray[post(this.back)])
===========================================================================
DataStructures.QueueAr.makeEmpty():::EXIT;condition="not(currentSize == theArray.length)"
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.currentSize == this.front
this.back == size(this.theArray[])-1
this.back == orig(size(this.theArray[]))-1
size(this.theArray[]) == orig(size(this.theArray[]))
this.theArray[this.currentSize] == this.theArray[this.back]
this.theArray[this.currentSize] == this.theArray[orig(this.front)]
this.theArray[this.currentSize] == this.theArray[orig(this.back)]
this.theArray != null
this.theArray.getClass().getName() == java.lang.Object[].class
this.theArray[] elements == null
this.theArray[].getClass().getName() elements == null
this.currentSize == 0
this.theArray[0..this.currentSize] == [null]
this.theArray[0..this.currentSize-1] == []
this.theArray[] elements == this.theArray[this.currentSize]
this.currentSize <= this.back
this.currentSize <= orig(this.currentSize)
this.currentSize <= orig(this.front)
this.currentSize <= orig(this.back)
(this.back == 0) ==> (orig(this.front) == 0)
this.back >= orig(this.front)
(orig(this.back) == 0) ==> (this.back == 0)
(this.back == 0) ==> (orig(this.back) == 0)
this.back >= orig(this.back)
orig(this.currentSize) <= size(this.theArray[])
this.theArray[0..orig(this.front)-1] is a subset of orig(this.theArray[0..post(this.back)-1])
this.theArray[0..orig(this.front)-1] is a subset of orig(this.theArray[0..this.currentSize-1])
this.theArray[0..orig(this.front)-1] is a subset of orig(this.theArray[0..this.front])
this.theArray[0..orig(this.front)-1] is a subset of orig(this.theArray[0..this.front-1])
this.theArray[orig(this.back)+1..] is a subset of orig(this.theArray[post(this.currentSize)+1..])
this.theArray[orig(this.back)+1..] is a subset of orig(this.theArray[0..post(this.back)-1])
this.theArray[orig(this.back)+1..] is a subset of orig(this.theArray[this.back..])
this.theArray[orig(this.back)+1..] is a subset of orig(this.theArray[this.back+1..])
orig(this.theArray[0..post(this.currentSize)]) elements == orig(this.theArray[post(this.currentSize)])
orig(this.theArray[post(this.back)..]) elements == orig(this.theArray[post(this.back)])
===========================================================================
DataStructures.QueueAr.makeEmpty():::EXIT;condition="orig(currentSize == theArray.length)"
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.currentSize == this.front
this.currentSize == orig(this.front)
this.back == orig(this.back)
this.back == size(this.theArray[])-1
this.back == orig(size(this.theArray[]))-1
orig(this.currentSize) == size(this.theArray[])
orig(this.currentSize) == orig(size(this.theArray[]))
this.theArray[this.currentSize] == this.theArray[this.back]
this.theArray[this.currentSize] == this.theArray[orig(this.currentSize)-1]
this.theArray[this.currentSize] == this.theArray[orig(this.back)]
orig(this.theArray[this.currentSize-1]) == orig(this.theArray[this.back])
this.theArray.getClass().getName() == java.lang.Object[].class
this.theArray[] elements == null
this.theArray[].getClass().getName() elements == null
this.currentSize == 0
this.theArray[0..this.currentSize] == [null]
this.theArray[0..this.currentSize-1] == []
this.theArray[] elements == this.theArray[this.currentSize]
orig(this.theArray[0..this.front]) elements == orig(this.theArray[this.front])
orig(this.theArray[this.back..]) elements == orig(this.theArray[this.back])
===========================================================================
DataStructures.QueueAr.makeEmpty():::EXIT;condition="not(orig(currentSize == theArray.length))"
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.currentSize == this.front
this.back == size(this.theArray[])-1
this.back == orig(size(this.theArray[]))-1
size(this.theArray[]) == orig(size(this.theArray[]))
this.theArray[this.currentSize] == this.theArray[this.back]
this.theArray[this.currentSize] == this.theArray[orig(this.currentSize)]
this.theArray[this.currentSize] == this.theArray[orig(this.front)]
this.theArray[this.currentSize] == this.theArray[orig(this.back)]
this.theArray != null
this.theArray.getClass().getName() == java.lang.Object[].class
this.theArray[] elements == null
this.theArray[].getClass().getName() elements == null
this.currentSize == 0
orig(this.currentSize) >= 0
orig(this.front) >= 0
this.theArray[0..this.currentSize] == [null]
this.theArray[0..this.currentSize-1] == []
this.theArray[] is a subset of orig(this.theArray[])
this.theArray[] elements == this.theArray[this.currentSize]
this.theArray[] is a subset of orig(this.theArray[0..this.currentSize])
this.currentSize <= this.back
this.currentSize <= orig(this.currentSize)
this.currentSize <= orig(this.front)
this.currentSize <= orig(this.back)
(this.back == 0) ==> (orig(this.currentSize) == 0)
this.back >= orig(this.currentSize)
(this.back == 0) ==> (orig(this.front) == 0)
this.back >= orig(this.front)
(orig(this.back) == 0) ==> (this.back == 0)
(this.back == 0) ==> (orig(this.back) == 0)
this.back >= orig(this.back)
(orig(this.currentSize) == 0) ==> (orig(this.front) == 0)
(orig(this.back) == 0) ==> (orig(this.currentSize) == 0)
(orig(this.back) == 0) ==> (orig(this.front) == 0)
this.theArray[this.currentSize+1..] is a subset of orig(this.theArray[0..post(this.back)-1])
this.theArray[this.currentSize+1..] is a subset of orig(this.theArray[0..this.currentSize])
this.theArray[0..this.currentSize] is a subsequence of orig(this.theArray[0..this.currentSize])
this.theArray[0..this.currentSize] is a subset of orig(this.theArray[0..this.currentSize])
this.theArray[orig(this.currentSize)..] is a subset of orig(this.theArray[0..this.currentSize])
this.theArray[orig(this.currentSize)+1..] is a subset of orig(this.theArray[post(this.currentSize)+1..])
this.theArray[orig(this.currentSize)+1..] is a subset of orig(this.theArray[0..post(this.back)-1])
this.theArray[orig(this.currentSize)+1..] is a subset of orig(this.theArray[0..this.currentSize])
this.theArray[0..orig(this.currentSize)] is a subset of orig(this.theArray[0..this.currentSize])
this.theArray[0..orig(this.currentSize)-1] is a subset of orig(this.theArray[0..post(this.back)-1])
this.theArray[0..orig(this.currentSize)-1] is a subset of orig(this.theArray[0..this.currentSize])
this.theArray[orig(this.front)..] is a subset of orig(this.theArray[0..this.currentSize])
this.theArray[orig(this.front)+1..] is a subset of orig(this.theArray[post(this.currentSize)+1..])
this.theArray[orig(this.front)+1..] is a subset of orig(this.theArray[0..post(this.back)-1])
this.theArray[orig(this.front)+1..] is a subset of orig(this.theArray[0..this.currentSize])
this.theArray[0..orig(this.front)] is a subset of orig(this.theArray[0..this.currentSize])
this.theArray[0..orig(this.front)-1] is a subset of orig(this.theArray[0..post(this.back)-1])
this.theArray[0..orig(this.front)-1] is a subset of orig(this.theArray[0..this.currentSize])
this.theArray[0..orig(this.front)-1] is a subset of orig(this.theArray[0..this.currentSize-1])
this.theArray[0..orig(this.front)-1] is a subset of orig(this.theArray[0..this.front])
this.theArray[0..orig(this.front)-1] is a subset of orig(this.theArray[0..this.front-1])
this.theArray[orig(this.back)..] is a subset of orig(this.theArray[0..this.currentSize])
this.theArray[orig(this.back)+1..] is a subset of orig(this.theArray[post(this.currentSize)+1..])
this.theArray[orig(this.back)+1..] is a subset of orig(this.theArray[0..post(this.back)-1])
this.theArray[orig(this.back)+1..] is a subset of orig(this.theArray[0..this.currentSize])
this.theArray[orig(this.back)+1..] is a subset of orig(this.theArray[this.back..])
this.theArray[orig(this.back)+1..] is a subset of orig(this.theArray[this.back+1..])
this.theArray[0..orig(this.back)] is a subset of orig(this.theArray[0..this.currentSize])
this.theArray[0..orig(this.back)-1] is a subset of orig(this.theArray[0..post(this.back)-1])
this.theArray[0..orig(this.back)-1] is a subset of orig(this.theArray[0..this.currentSize])
orig(this.theArray[0..post(this.currentSize)]) elements == orig(this.theArray[post(this.currentSize)])
orig(this.theArray[post(this.back)..]) elements == orig(this.theArray[post(this.back)])
