===========================================================================
DataStructures.QueueAr:::OBJECT
    Variables: this this.theArray this.theArray.getClass().getName() this.theArray[] this.theArray[].getClass().getName() this.currentSize this.front this.back size(this.theArray[]) size(this.theArray[])-1 this.theArray[this.currentSize] this.theArray[this.currentSize-1] this.theArray[this.currentSize..] this.theArray[this.currentSize+1..] this.theArray[0..this.currentSize] this.theArray[0..this.currentSize-1] this.theArray[this.front] this.theArray[this.front-1] this.theArray[this.front..] this.theArray[this.front+1..] this.theArray[0..this.front] this.theArray[0..this.front-1] this.theArray[this.back] this.theArray[this.back-1] this.theArray[this.back..] this.theArray[this.back+1..] this.theArray[0..this.back] this.theArray[0..this.back-1]
this.theArray != null
this.theArray.getClass().getName() == java.lang.Object[].class.getName()
this.currentSize >= 0
this.front >= 0
this.back >= 0
this.currentSize <= daikon.Quant.size(this.theArray)
(!(daikon.Quant.size(this.theArray)-1 == 0)) || (this.front == 0)
this.front <= daikon.Quant.size(this.theArray)-1
(!(daikon.Quant.size(this.theArray)-1 == 0)) || (this.back == 0)
this.back <= daikon.Quant.size(this.theArray)-1
===========================================================================
DataStructures.QueueAr.QueueAr(int):::ENTER
    Variables: capacity
===========================================================================
DataStructures.QueueAr.QueueAr(int):::EXIT
    Variables: this this.theArray this.theArray.getClass().getName() this.theArray[] this.theArray[].getClass().getName() this.currentSize this.front this.back capacity orig(capacity) size(this.theArray[]) size(this.theArray[])-1 this.theArray[this.currentSize] this.theArray[this.currentSize-1] this.theArray[this.currentSize..] this.theArray[this.currentSize+1..] this.theArray[0..this.currentSize] this.theArray[0..this.currentSize-1] this.theArray[this.front] this.theArray[this.front-1] this.theArray[this.front..] this.theArray[this.front+1..] this.theArray[0..this.front] this.theArray[0..this.front-1] this.theArray[this.back] this.theArray[this.back-1] this.theArray[this.back..] this.theArray[this.back+1..] this.theArray[0..this.back] this.theArray[0..this.back-1] this.theArray[capacity] this.theArray[capacity-1] this.theArray[capacity..] this.theArray[capacity+1..] this.theArray[0..capacity] this.theArray[0..capacity-1] this.theArray[orig(capacity)] this.theArray[orig(capacity)-1] this.theArray[orig(capacity)..] this.theArray[orig(capacity)+1..] this.theArray[0..orig(capacity)] this.theArray[0..orig(capacity)-1]
this.currentSize == this.front
this.back == daikon.Quant.size(this.theArray)-1
\old(capacity) == daikon.Quant.size(this.theArray)
daikon.Quant.getElement_Object(this.theArray, this.currentSize) == daikon.Quant.getElement_Object(this.theArray, this.back)
daikon.Quant.getElement_Object(this.theArray, this.currentSize) == daikon.Quant.getElement_Object(this.theArray, \old(capacity)-1)
daikon.Quant.eltsEqual(this.theArray, null)
daikon.Quant.eltsEqual(daikon.Quant.typeArray(this.theArray), null)
this.currentSize == 0
("oneOf.java.jpp: SEQUENCE unimplemented" != null)
("oneOf.java.jpp: SEQUENCE unimplemented" != null)
daikon.Quant.eltsEqual(this.theArray, daikon.Quant.getElement_Object(this.theArray, this.currentSize))
this.currentSize <= this.back
===========================================================================
DataStructures.QueueAr.dequeue():::ENTER
    Variables: this this.theArray this.theArray.getClass().getName() this.theArray[] this.theArray[].getClass().getName() this.currentSize this.front this.back size(this.theArray[]) size(this.theArray[])-1 this.theArray[this.currentSize] this.theArray[this.currentSize-1] this.theArray[this.currentSize..] this.theArray[this.currentSize+1..] this.theArray[0..this.currentSize] this.theArray[0..this.currentSize-1] this.theArray[this.front] this.theArray[this.front-1] this.theArray[this.front..] this.theArray[this.front+1..] this.theArray[0..this.front] this.theArray[0..this.front-1] this.theArray[this.back] this.theArray[this.back-1] this.theArray[this.back..] this.theArray[this.back+1..] this.theArray[0..this.back] this.theArray[0..this.back-1]
daikon.Quant.getElement_Object(this.theArray, this.front) != null
daikon.Quant.getElement_Object(this.theArray, this.back) != null
===========================================================================
DataStructures.QueueAr.dequeue():::EXIT93
    Variables: this this.theArray this.theArray.getClass().getName() this.theArray[] this.theArray[].getClass().getName() this.currentSize this.front this.back return return.getClass().getName() orig(this) orig(this.theArray) orig(this.theArray.getClass().getName()) orig(this.theArray[]) orig(this.theArray[].getClass().getName()) orig(this.currentSize) orig(this.front) orig(this.back) size(this.theArray[]) size(this.theArray[])-1 orig(size(this.theArray[])) orig(size(this.theArray[]))-1 this.theArray[this.currentSize] this.theArray[this.currentSize-1] this.theArray[this.currentSize..] this.theArray[this.currentSize+1..] this.theArray[0..this.currentSize] this.theArray[0..this.currentSize-1] this.theArray[this.front] this.theArray[this.front-1] this.theArray[this.front..] this.theArray[this.front+1..] this.theArray[0..this.front] this.theArray[0..this.front-1] this.theArray[this.back] this.theArray[this.back-1] this.theArray[this.back..] this.theArray[this.back+1..] this.theArray[0..this.back] this.theArray[0..this.back-1] this.theArray[orig(this.currentSize)] this.theArray[orig(this.currentSize)-1] this.theArray[orig(this.currentSize)..] this.theArray[orig(this.currentSize)+1..] this.theArray[0..orig(this.currentSize)] this.theArray[0..orig(this.currentSize)-1] this.theArray[orig(this.front)] this.theArray[orig(this.front)-1] this.theArray[orig(this.front)..] this.theArray[orig(this.front)+1..] this.theArray[0..orig(this.front)] this.theArray[0..orig(this.front)-1] this.theArray[orig(this.back)] this.theArray[orig(this.back)-1] this.theArray[orig(this.back)..] this.theArray[orig(this.back)+1..] this.theArray[0..orig(this.back)] this.theArray[0..orig(this.back)-1] orig(this.theArray[post(this.currentSize)]) orig(this.theArray[post(this.currentSize)-1]) orig(this.theArray[post(this.currentSize)..]) orig(this.theArray[post(this.currentSize)+1..]) orig(this.theArray[0..post(this.currentSize)]) orig(this.theArray[0..post(this.currentSize)-1]) orig(this.theArray[post(this.front)]) orig(this.theArray[post(this.front)-1]) orig(this.theArray[post(this.front)..]) orig(this.theArray[post(this.front)+1..]) orig(this.theArray[0..post(this.front)]) orig(this.theArray[0..post(this.front)-1]) orig(this.theArray[post(this.back)]) orig(this.theArray[post(this.back)-1]) orig(this.theArray[post(this.back)..]) orig(this.theArray[post(this.back)+1..]) orig(this.theArray[0..post(this.back)]) orig(this.theArray[0..post(this.back)-1]) orig(this.theArray[this.currentSize]) orig(this.theArray[this.currentSize-1]) orig(this.theArray[this.currentSize..]) orig(this.theArray[this.currentSize+1..]) orig(this.theArray[0..this.currentSize]) orig(this.theArray[0..this.currentSize-1]) orig(this.theArray[this.front]) orig(this.theArray[this.front-1]) orig(this.theArray[this.front..]) orig(this.theArray[this.front+1..]) orig(this.theArray[0..this.front]) orig(this.theArray[0..this.front-1]) orig(this.theArray[this.back]) orig(this.theArray[this.back-1]) orig(this.theArray[this.back..]) orig(this.theArray[this.back+1..]) orig(this.theArray[0..this.back]) orig(this.theArray[0..this.back-1])
assignable this.theArray[*], this.currentSize, this.front, this.theArray[this.currentSize], this.theArray[this.currentSize-1], this.theArray[this.currentSize..], this.theArray[this.currentSize+1..], this.theArray[0..this.currentSize], this.theArray[0..this.currentSize-1], this.theArray[this.front], this.theArray[this.front-1], this.theArray[this.front..], this.theArray[this.front+1..], this.theArray[0..this.front], this.theArray[0..this.front-1], this.theArray[this.back], this.theArray[this.back-1], this.theArray[this.back..], this.theArray[this.back+1..], this.theArray[0..this.back], this.theArray[0..this.back-1]
===========================================================================
DataStructures.QueueAr.dequeue():::EXIT
    Variables: this this.theArray this.theArray.getClass().getName() this.theArray[] this.theArray[].getClass().getName() this.currentSize this.front this.back return return.getClass().getName() orig(this) orig(this.theArray) orig(this.theArray.getClass().getName()) orig(this.theArray[]) orig(this.theArray[].getClass().getName()) orig(this.currentSize) orig(this.front) orig(this.back) size(this.theArray[]) size(this.theArray[])-1 orig(size(this.theArray[])) orig(size(this.theArray[]))-1 this.theArray[this.currentSize] this.theArray[this.currentSize-1] this.theArray[this.currentSize..] this.theArray[this.currentSize+1..] this.theArray[0..this.currentSize] this.theArray[0..this.currentSize-1] this.theArray[this.front] this.theArray[this.front-1] this.theArray[this.front..] this.theArray[this.front+1..] this.theArray[0..this.front] this.theArray[0..this.front-1] this.theArray[this.back] this.theArray[this.back-1] this.theArray[this.back..] this.theArray[this.back+1..] this.theArray[0..this.back] this.theArray[0..this.back-1] this.theArray[orig(this.currentSize)] this.theArray[orig(this.currentSize)-1] this.theArray[orig(this.currentSize)..] this.theArray[orig(this.currentSize)+1..] this.theArray[0..orig(this.currentSize)] this.theArray[0..orig(this.currentSize)-1] this.theArray[orig(this.front)] this.theArray[orig(this.front)-1] this.theArray[orig(this.front)..] this.theArray[orig(this.front)+1..] this.theArray[0..orig(this.front)] this.theArray[0..orig(this.front)-1] this.theArray[orig(this.back)] this.theArray[orig(this.back)-1] this.theArray[orig(this.back)..] this.theArray[orig(this.back)+1..] this.theArray[0..orig(this.back)] this.theArray[0..orig(this.back)-1] orig(this.theArray[post(this.currentSize)]) orig(this.theArray[post(this.currentSize)-1]) orig(this.theArray[post(this.currentSize)..]) orig(this.theArray[post(this.currentSize)+1..]) orig(this.theArray[0..post(this.currentSize)]) orig(this.theArray[0..post(this.currentSize)-1]) orig(this.theArray[post(this.front)]) orig(this.theArray[post(this.front)-1]) orig(this.theArray[post(this.front)..]) orig(this.theArray[post(this.front)+1..]) orig(this.theArray[0..post(this.front)]) orig(this.theArray[0..post(this.front)-1]) orig(this.theArray[post(this.back)]) orig(this.theArray[post(this.back)-1]) orig(this.theArray[post(this.back)..]) orig(this.theArray[post(this.back)+1..]) orig(this.theArray[0..post(this.back)]) orig(this.theArray[0..post(this.back)-1]) orig(this.theArray[this.currentSize]) orig(this.theArray[this.currentSize-1]) orig(this.theArray[this.currentSize..]) orig(this.theArray[this.currentSize+1..]) orig(this.theArray[0..this.currentSize]) orig(this.theArray[0..this.currentSize-1]) orig(this.theArray[this.front]) orig(this.theArray[this.front-1]) orig(this.theArray[this.front..]) orig(this.theArray[this.front+1..]) orig(this.theArray[0..this.front]) orig(this.theArray[0..this.front-1]) orig(this.theArray[this.back]) orig(this.theArray[this.back-1]) orig(this.theArray[this.back..]) orig(this.theArray[this.back+1..]) orig(this.theArray[0..this.back]) orig(this.theArray[0..this.back-1])
assignable this.theArray[*], this.currentSize, this.front, this.theArray[this.currentSize], this.theArray[this.currentSize-1], this.theArray[this.currentSize..], this.theArray[this.currentSize+1..], this.theArray[0..this.currentSize], this.theArray[0..this.currentSize-1], this.theArray[this.front], this.theArray[this.front-1], this.theArray[this.front..], this.theArray[this.front+1..], this.theArray[0..this.front], this.theArray[0..this.front-1], this.theArray[this.back], this.theArray[this.back-1], this.theArray[this.back..], this.theArray[this.back+1..], this.theArray[0..this.back], this.theArray[0..this.back-1]
this.theArray == \old(this.theArray)
this.theArray.getClass().getName() == \old(this.theArray.getClass().getName())
this.back == \old(this.back)
daikon.Quant.size(this.theArray) == \old(daikon.Quant.size(this.theArray))
daikon.Quant.getElement_Object(this.theArray, this.currentSize) == daikon.Quant.getElement_Object(this.theArray, \old(this.currentSize)-1)
daikon.Quant.pairwiseEqual(daikon.Quant.slice(this.theArray, \old(this.front)+1, daikon.Quant.size(this.theArray)), \old(daikon.Quant.slice(this.theArray, this.front+1, daikon.Quant.size(this.theArray))))
daikon.Quant.pairwiseEqual(daikon.Quant.slice(this.theArray, 0, \old(this.front)-1), \old(daikon.Quant.slice(this.theArray, 0, this.front-1)))
\old(daikon.Quant.getElement_Object(this.theArray, \new(this.currentSize))) == \old(daikon.Quant.getElement_Object(this.theArray, this.currentSize-1))
\result != null
warning: method daikon.inv.unary.string.PrintableString.format(OutputFormat:JML) needs to be implemented: return.getClass().getName() is printable
daikon.Quant.getElement_Object(this.theArray, \old(this.front)) == null
this.theArray.getClass().getName() != \result.getClass().getName()
this.currentSize - \old(this.currentSize) + 1 == 0
(!(daikon.Quant.size(this.theArray)-1 == 0)) || (this.currentSize == 0)
this.currentSize <= daikon.Quant.size(this.theArray)-1
daikon.Quant.memberOf(\result.getClass().getName() , \old(daikon.Quant.typeArray(this.theArray)) )
\old(this.currentSize) <= daikon.Quant.size(this.theArray)
(!(daikon.Quant.size(this.theArray)-1 == 0)) || (\old(this.front) == 0)
\old(this.front) <= daikon.Quant.size(this.theArray)-1
daikon.Quant.subsetOf(daikon.Quant.slice(this.theArray, this.currentSize+1, daikon.Quant.size(this.theArray)), \old(daikon.Quant.slice(this.theArray, \new(this.currentSize), daikon.Quant.size(this.theArray))))
===========================================================================
DataStructures.QueueAr.dequeueAll():::ENTER
    Variables: this this.theArray this.theArray.getClass().getName() this.theArray[] this.theArray[].getClass().getName() this.currentSize this.front this.back size(this.theArray[]) size(this.theArray[])-1 this.theArray[this.currentSize] this.theArray[this.currentSize-1] this.theArray[this.currentSize..] this.theArray[this.currentSize+1..] this.theArray[0..this.currentSize] this.theArray[0..this.currentSize-1] this.theArray[this.front] this.theArray[this.front-1] this.theArray[this.front..] this.theArray[this.front+1..] this.theArray[0..this.front] this.theArray[0..this.front-1] this.theArray[this.back] this.theArray[this.back-1] this.theArray[this.back..] this.theArray[this.back+1..] this.theArray[0..this.back] this.theArray[0..this.back-1]
this.currentSize == daikon.Quant.size(this.theArray)
this.back == daikon.Quant.size(this.theArray)-1
daikon.Quant.getElement_Object(this.theArray, this.currentSize-1) == daikon.Quant.getElement_Object(this.theArray, this.back)
this.front == 0
("oneOf.java.jpp: SEQUENCE unimplemented" != null)
daikon.Quant.eltsEqual(daikon.Quant.slice(this.theArray, 0, this.front), daikon.Quant.getElement_Object(this.theArray, this.front))
daikon.Quant.eltsEqual(daikon.Quant.slice(this.theArray, this.back, daikon.Quant.size(this.theArray)), daikon.Quant.getElement_Object(this.theArray, this.back))
===========================================================================
DataStructures.QueueAr.dequeueAll():::EXIT
    Variables: this this.theArray this.theArray.getClass().getName() this.theArray[] this.theArray[].getClass().getName() this.currentSize this.front this.back orig(this) orig(this.theArray) orig(this.theArray.getClass().getName()) orig(this.theArray[]) orig(this.theArray[].getClass().getName()) orig(this.currentSize) orig(this.front) orig(this.back) size(this.theArray[]) size(this.theArray[])-1 orig(size(this.theArray[])) orig(size(this.theArray[]))-1 this.theArray[this.currentSize] this.theArray[this.currentSize-1] this.theArray[this.currentSize..] this.theArray[this.currentSize+1..] this.theArray[0..this.currentSize] this.theArray[0..this.currentSize-1] this.theArray[this.front] this.theArray[this.front-1] this.theArray[this.front..] this.theArray[this.front+1..] this.theArray[0..this.front] this.theArray[0..this.front-1] this.theArray[this.back] this.theArray[this.back-1] this.theArray[this.back..] this.theArray[this.back+1..] this.theArray[0..this.back] this.theArray[0..this.back-1] this.theArray[orig(this.currentSize)] this.theArray[orig(this.currentSize)-1] this.theArray[orig(this.currentSize)..] this.theArray[orig(this.currentSize)+1..] this.theArray[0..orig(this.currentSize)] this.theArray[0..orig(this.currentSize)-1] this.theArray[orig(this.front)] this.theArray[orig(this.front)-1] this.theArray[orig(this.front)..] this.theArray[orig(this.front)+1..] this.theArray[0..orig(this.front)] this.theArray[0..orig(this.front)-1] this.theArray[orig(this.back)] this.theArray[orig(this.back)-1] this.theArray[orig(this.back)..] this.theArray[orig(this.back)+1..] this.theArray[0..orig(this.back)] this.theArray[0..orig(this.back)-1] orig(this.theArray[post(this.currentSize)]) orig(this.theArray[post(this.currentSize)-1]) orig(this.theArray[post(this.currentSize)..]) orig(this.theArray[post(this.currentSize)+1..]) orig(this.theArray[0..post(this.currentSize)]) orig(this.theArray[0..post(this.currentSize)-1]) orig(this.theArray[post(this.front)]) orig(this.theArray[post(this.front)-1]) orig(this.theArray[post(this.front)..]) orig(this.theArray[post(this.front)+1..]) orig(this.theArray[0..post(this.front)]) orig(this.theArray[0..post(this.front)-1]) orig(this.theArray[post(this.back)]) orig(this.theArray[post(this.back)-1]) orig(this.theArray[post(this.back)..]) orig(this.theArray[post(this.back)+1..]) orig(this.theArray[0..post(this.back)]) orig(this.theArray[0..post(this.back)-1]) orig(this.theArray[this.currentSize]) orig(this.theArray[this.currentSize-1]) orig(this.theArray[this.currentSize..]) orig(this.theArray[this.currentSize+1..]) orig(this.theArray[0..this.currentSize]) orig(this.theArray[0..this.currentSize-1]) orig(this.theArray[this.front]) orig(this.theArray[this.front-1]) orig(this.theArray[this.front..]) orig(this.theArray[this.front+1..]) orig(this.theArray[0..this.front]) orig(this.theArray[0..this.front-1]) orig(this.theArray[this.back]) orig(this.theArray[this.back-1]) orig(this.theArray[this.back..]) orig(this.theArray[this.back+1..]) orig(this.theArray[0..this.back]) orig(this.theArray[0..this.back-1])
assignable this.theArray[*], this.currentSize, this.theArray[this.currentSize], this.theArray[this.currentSize-1], this.theArray[this.currentSize+1..], this.theArray[0..this.currentSize], this.theArray[0..this.currentSize-1], this.theArray[this.front], this.theArray[this.front-1], this.theArray[this.front..], this.theArray[this.front+1..], this.theArray[0..this.front], this.theArray[this.back], this.theArray[this.back-1], this.theArray[this.back..], this.theArray[0..this.back], this.theArray[0..this.back-1]
this.theArray == \old(this.theArray)
this.theArray.getClass().getName() == \old(this.theArray.getClass().getName())
this.currentSize == this.front
this.currentSize == \old(this.front)
this.back == \old(this.back)
this.back == daikon.Quant.size(this.theArray)-1
this.back == \old(daikon.Quant.size(this.theArray))-1
\old(this.currentSize) == daikon.Quant.size(this.theArray)
daikon.Quant.getElement_Object(this.theArray, this.currentSize) == daikon.Quant.getElement_Object(this.theArray, this.back)
daikon.Quant.getElement_Object(this.theArray, this.currentSize) == daikon.Quant.getElement_Object(this.theArray, \old(this.currentSize)-1)
daikon.Quant.getElement_Object(this.theArray, this.currentSize) == daikon.Quant.getElement_Object(this.theArray, \old(this.back))
daikon.Quant.eltsEqual(this.theArray, null)
daikon.Quant.eltsEqual(daikon.Quant.typeArray(this.theArray), null)
this.currentSize == 0
("oneOf.java.jpp: SEQUENCE unimplemented" != null)
("oneOf.java.jpp: SEQUENCE unimplemented" != null)
daikon.Quant.eltsEqual(this.theArray, daikon.Quant.getElement_Object(this.theArray, this.currentSize))
===========================================================================
DataStructures.QueueAr.enqueue(java.lang.Object):::ENTER
    Variables: this this.theArray this.theArray.getClass().getName() this.theArray[] this.theArray[].getClass().getName() this.currentSize this.front this.back x x.getClass().getName() size(this.theArray[]) size(this.theArray[])-1 this.theArray[this.currentSize] this.theArray[this.currentSize-1] this.theArray[this.currentSize..] this.theArray[this.currentSize+1..] this.theArray[0..this.currentSize] this.theArray[0..this.currentSize-1] this.theArray[this.front] this.theArray[this.front-1] this.theArray[this.front..] this.theArray[this.front+1..] this.theArray[0..this.front] this.theArray[0..this.front-1] this.theArray[this.back] this.theArray[this.back-1] this.theArray[this.back..] this.theArray[this.back+1..] this.theArray[0..this.back] this.theArray[0..this.back-1]
x != null
warning: method daikon.inv.unary.string.PrintableString.format(OutputFormat:JML) needs to be implemented: x.getClass().getName() is printable
this.theArray.getClass().getName() != x.getClass().getName()
(!(this.currentSize == 0)) || (this.front == 0)
(!(daikon.Quant.size(this.theArray)-1 == 0)) || (this.currentSize == 0)
this.currentSize <= daikon.Quant.size(this.theArray)-1
===========================================================================
DataStructures.QueueAr.enqueue(java.lang.Object):::EXIT
    Variables: this this.theArray this.theArray.getClass().getName() this.theArray[] this.theArray[].getClass().getName() this.currentSize this.front this.back x x.getClass().getName() orig(this) orig(this.theArray) orig(this.theArray.getClass().getName()) orig(this.theArray[]) orig(this.theArray[].getClass().getName()) orig(this.currentSize) orig(this.front) orig(this.back) orig(x) orig(x.getClass().getName()) size(this.theArray[]) size(this.theArray[])-1 orig(size(this.theArray[])) orig(size(this.theArray[]))-1 this.theArray[this.currentSize] this.theArray[this.currentSize-1] this.theArray[this.currentSize..] this.theArray[this.currentSize+1..] this.theArray[0..this.currentSize] this.theArray[0..this.currentSize-1] this.theArray[this.front] this.theArray[this.front-1] this.theArray[this.front..] this.theArray[this.front+1..] this.theArray[0..this.front] this.theArray[0..this.front-1] this.theArray[this.back] this.theArray[this.back-1] this.theArray[this.back..] this.theArray[this.back+1..] this.theArray[0..this.back] this.theArray[0..this.back-1] this.theArray[orig(this.currentSize)] this.theArray[orig(this.currentSize)-1] this.theArray[orig(this.currentSize)..] this.theArray[orig(this.currentSize)+1..] this.theArray[0..orig(this.currentSize)] this.theArray[0..orig(this.currentSize)-1] this.theArray[orig(this.front)] this.theArray[orig(this.front)-1] this.theArray[orig(this.front)..] this.theArray[orig(this.front)+1..] this.theArray[0..orig(this.front)] this.theArray[0..orig(this.front)-1] this.theArray[orig(this.back)] this.theArray[orig(this.back)-1] this.theArray[orig(this.back)..] this.theArray[orig(this.back)+1..] this.theArray[0..orig(this.back)] this.theArray[0..orig(this.back)-1] orig(this.theArray[post(this.currentSize)]) orig(this.theArray[post(this.currentSize)-1]) orig(this.theArray[post(this.currentSize)..]) orig(this.theArray[post(this.currentSize)+1..]) orig(this.theArray[0..post(this.currentSize)]) orig(this.theArray[0..post(this.currentSize)-1]) orig(this.theArray[post(this.front)]) orig(this.theArray[post(this.front)-1]) orig(this.theArray[post(this.front)..]) orig(this.theArray[post(this.front)+1..]) orig(this.theArray[0..post(this.front)]) orig(this.theArray[0..post(this.front)-1]) orig(this.theArray[post(this.back)]) orig(this.theArray[post(this.back)-1]) orig(this.theArray[post(this.back)..]) orig(this.theArray[post(this.back)+1..]) orig(this.theArray[0..post(this.back)]) orig(this.theArray[0..post(this.back)-1]) orig(this.theArray[this.currentSize]) orig(this.theArray[this.currentSize-1]) orig(this.theArray[this.currentSize..]) orig(this.theArray[this.currentSize+1..]) orig(this.theArray[0..this.currentSize]) orig(this.theArray[0..this.currentSize-1]) orig(this.theArray[this.front]) orig(this.theArray[this.front-1]) orig(this.theArray[this.front..]) orig(this.theArray[this.front+1..]) orig(this.theArray[0..this.front]) orig(this.theArray[0..this.front-1]) orig(this.theArray[this.back]) orig(this.theArray[this.back-1]) orig(this.theArray[this.back..]) orig(this.theArray[this.back+1..]) orig(this.theArray[0..this.back]) orig(this.theArray[0..this.back-1])
assignable this.theArray[*], this.currentSize, this.back, this.theArray[this.currentSize], this.theArray[this.currentSize-1], this.theArray[this.currentSize..], this.theArray[this.currentSize+1..], this.theArray[0..this.currentSize], this.theArray[0..this.currentSize-1], this.theArray[this.front], this.theArray[this.front-1], this.theArray[this.front..], this.theArray[this.front+1..], this.theArray[0..this.front], this.theArray[0..this.front-1], this.theArray[this.back], this.theArray[this.back-1], this.theArray[this.back..], this.theArray[this.back+1..], this.theArray[0..this.back], this.theArray[0..this.back-1]
this.theArray == \old(this.theArray)
this.theArray.getClass().getName() == \old(this.theArray.getClass().getName())
this.front == \old(this.front)
\old(x) == daikon.Quant.getElement_Object(this.theArray, this.back)
daikon.Quant.size(this.theArray) == \old(daikon.Quant.size(this.theArray))
daikon.Quant.getElement_Object(this.theArray, this.currentSize-1) == daikon.Quant.getElement_Object(this.theArray, \old(this.currentSize))
daikon.Quant.pairwiseEqual(daikon.Quant.slice(this.theArray, this.back+1, daikon.Quant.size(this.theArray)), \old(daikon.Quant.slice(this.theArray, \new(this.back)+1, daikon.Quant.size(this.theArray))))
daikon.Quant.pairwiseEqual(daikon.Quant.slice(this.theArray, 0, this.back-1), \old(daikon.Quant.slice(this.theArray, 0, \new(this.back)-1)))
\old(daikon.Quant.getElement_Object(this.theArray, \new(this.currentSize)-1)) == \old(daikon.Quant.getElement_Object(this.theArray, this.currentSize))
this.currentSize >= 1
daikon.Quant.getElement_Object(this.theArray, this.front) != null
\old(daikon.Quant.getElement_Object(this.theArray, \new(this.back))) == null
this.theArray.getClass().getName() != \old(x.getClass().getName())
daikon.Quant.memberOf(\old(x.getClass().getName()) , daikon.Quant.typeArray(this.theArray) )
(this.front >> this.currentSize == 0)
(this.back >> this.currentSize == 0)
this.currentSize - \old(this.currentSize) - 1 == 0
(!(\old(this.currentSize) == 0)) || (this.front == 0)
(!(\old(this.currentSize) == 0)) || (this.back == 0)
(!(daikon.Quant.size(this.theArray)-1 == 0)) || (\old(this.currentSize) == 0)
\old(this.currentSize) <= daikon.Quant.size(this.theArray)-1
(!(daikon.Quant.size(this.theArray)-1 == 0)) || (\old(this.back) == 0)
\old(this.back) <= daikon.Quant.size(this.theArray)-1
===========================================================================
DataStructures.QueueAr.getFront():::ENTER
    Variables: this this.theArray this.theArray.getClass().getName() this.theArray[] this.theArray[].getClass().getName() this.currentSize this.front this.back size(this.theArray[]) size(this.theArray[])-1 this.theArray[this.currentSize] this.theArray[this.currentSize-1] this.theArray[this.currentSize..] this.theArray[this.currentSize+1..] this.theArray[0..this.currentSize] this.theArray[0..this.currentSize-1] this.theArray[this.front] this.theArray[this.front-1] this.theArray[this.front..] this.theArray[this.front+1..] this.theArray[0..this.front] this.theArray[0..this.front-1] this.theArray[this.back] this.theArray[this.back-1] this.theArray[this.back..] this.theArray[this.back+1..] this.theArray[0..this.back] this.theArray[0..this.back-1]
===========================================================================
DataStructures.QueueAr.getFront():::EXIT75
    Variables: this this.theArray this.theArray.getClass().getName() this.theArray[] this.theArray[].getClass().getName() this.currentSize this.front this.back return return.getClass().getName() orig(this) orig(this.theArray) orig(this.theArray.getClass().getName()) orig(this.theArray[]) orig(this.theArray[].getClass().getName()) orig(this.currentSize) orig(this.front) orig(this.back) size(this.theArray[]) size(this.theArray[])-1 orig(size(this.theArray[])) orig(size(this.theArray[]))-1 this.theArray[this.currentSize] this.theArray[this.currentSize-1] this.theArray[this.currentSize..] this.theArray[this.currentSize+1..] this.theArray[0..this.currentSize] this.theArray[0..this.currentSize-1] this.theArray[this.front] this.theArray[this.front-1] this.theArray[this.front..] this.theArray[this.front+1..] this.theArray[0..this.front] this.theArray[0..this.front-1] this.theArray[this.back] this.theArray[this.back-1] this.theArray[this.back..] this.theArray[this.back+1..] this.theArray[0..this.back] this.theArray[0..this.back-1] this.theArray[orig(this.currentSize)] this.theArray[orig(this.currentSize)-1] this.theArray[orig(this.currentSize)..] this.theArray[orig(this.currentSize)+1..] this.theArray[0..orig(this.currentSize)] this.theArray[0..orig(this.currentSize)-1] this.theArray[orig(this.front)] this.theArray[orig(this.front)-1] this.theArray[orig(this.front)..] this.theArray[orig(this.front)+1..] this.theArray[0..orig(this.front)] this.theArray[0..orig(this.front)-1] this.theArray[orig(this.back)] this.theArray[orig(this.back)-1] this.theArray[orig(this.back)..] this.theArray[orig(this.back)+1..] this.theArray[0..orig(this.back)] this.theArray[0..orig(this.back)-1] orig(this.theArray[post(this.currentSize)]) orig(this.theArray[post(this.currentSize)-1]) orig(this.theArray[post(this.currentSize)..]) orig(this.theArray[post(this.currentSize)+1..]) orig(this.theArray[0..post(this.currentSize)]) orig(this.theArray[0..post(this.currentSize)-1]) orig(this.theArray[post(this.front)]) orig(this.theArray[post(this.front)-1]) orig(this.theArray[post(this.front)..]) orig(this.theArray[post(this.front)+1..]) orig(this.theArray[0..post(this.front)]) orig(this.theArray[0..post(this.front)-1]) orig(this.theArray[post(this.back)]) orig(this.theArray[post(this.back)-1]) orig(this.theArray[post(this.back)..]) orig(this.theArray[post(this.back)+1..]) orig(this.theArray[0..post(this.back)]) orig(this.theArray[0..post(this.back)-1]) orig(this.theArray[this.currentSize]) orig(this.theArray[this.currentSize-1]) orig(this.theArray[this.currentSize..]) orig(this.theArray[this.currentSize+1..]) orig(this.theArray[0..this.currentSize]) orig(this.theArray[0..this.currentSize-1]) orig(this.theArray[this.front]) orig(this.theArray[this.front-1]) orig(this.theArray[this.front..]) orig(this.theArray[this.front+1..]) orig(this.theArray[0..this.front]) orig(this.theArray[0..this.front-1]) orig(this.theArray[this.back]) orig(this.theArray[this.back-1]) orig(this.theArray[this.back..]) orig(this.theArray[this.back+1..]) orig(this.theArray[0..this.back]) orig(this.theArray[0..this.back-1])
assignable this.theArray[this.currentSize-1], this.theArray[this.front-1], this.theArray[this.back-1]
\result == daikon.Quant.getElement_Object(this.theArray, this.currentSize)
\result == daikon.Quant.getElement_Object(this.theArray, this.back)
\result == daikon.Quant.getElement_Object(this.theArray, \old(this.currentSize))
\result == daikon.Quant.getElement_Object(this.theArray, \old(this.back))
\result == \old(daikon.Quant.getElement_Object(this.theArray, \new(this.currentSize)))
\result == \old(daikon.Quant.getElement_Object(this.theArray, \new(this.back)))
\result == \old(daikon.Quant.getElement_Object(this.theArray, this.currentSize))
\result == \old(daikon.Quant.getElement_Object(this.theArray, this.back))
daikon.Quant.eltsEqual(this.theArray, null)
daikon.Quant.eltsEqual(daikon.Quant.typeArray(this.theArray), null)
this.currentSize == 0
\result == null
("oneOf.java.jpp: SEQUENCE unimplemented" != null)
("oneOf.java.jpp: SEQUENCE unimplemented" != null)
daikon.Quant.eltsEqual(this.theArray, \result)
this.currentSize <= this.front
this.currentSize <= this.back
this.currentSize <= daikon.Quant.size(this.theArray)-1
(!(this.back == 0)) || (this.front == 0)
(!(this.back == 0)) || (daikon.Quant.size(this.theArray)-1 == 0)
===========================================================================
DataStructures.QueueAr.getFront():::EXIT76
    Variables: this this.theArray this.theArray.getClass().getName() this.theArray[] this.theArray[].getClass().getName() this.currentSize this.front this.back return return.getClass().getName() orig(this) orig(this.theArray) orig(this.theArray.getClass().getName()) orig(this.theArray[]) orig(this.theArray[].getClass().getName()) orig(this.currentSize) orig(this.front) orig(this.back) size(this.theArray[]) size(this.theArray[])-1 orig(size(this.theArray[])) orig(size(this.theArray[]))-1 this.theArray[this.currentSize] this.theArray[this.currentSize-1] this.theArray[this.currentSize..] this.theArray[this.currentSize+1..] this.theArray[0..this.currentSize] this.theArray[0..this.currentSize-1] this.theArray[this.front] this.theArray[this.front-1] this.theArray[this.front..] this.theArray[this.front+1..] this.theArray[0..this.front] this.theArray[0..this.front-1] this.theArray[this.back] this.theArray[this.back-1] this.theArray[this.back..] this.theArray[this.back+1..] this.theArray[0..this.back] this.theArray[0..this.back-1] this.theArray[orig(this.currentSize)] this.theArray[orig(this.currentSize)-1] this.theArray[orig(this.currentSize)..] this.theArray[orig(this.currentSize)+1..] this.theArray[0..orig(this.currentSize)] this.theArray[0..orig(this.currentSize)-1] this.theArray[orig(this.front)] this.theArray[orig(this.front)-1] this.theArray[orig(this.front)..] this.theArray[orig(this.front)+1..] this.theArray[0..orig(this.front)] this.theArray[0..orig(this.front)-1] this.theArray[orig(this.back)] this.theArray[orig(this.back)-1] this.theArray[orig(this.back)..] this.theArray[orig(this.back)+1..] this.theArray[0..orig(this.back)] this.theArray[0..orig(this.back)-1] orig(this.theArray[post(this.currentSize)]) orig(this.theArray[post(this.currentSize)-1]) orig(this.theArray[post(this.currentSize)..]) orig(this.theArray[post(this.currentSize)+1..]) orig(this.theArray[0..post(this.currentSize)]) orig(this.theArray[0..post(this.currentSize)-1]) orig(this.theArray[post(this.front)]) orig(this.theArray[post(this.front)-1]) orig(this.theArray[post(this.front)..]) orig(this.theArray[post(this.front)+1..]) orig(this.theArray[0..post(this.front)]) orig(this.theArray[0..post(this.front)-1]) orig(this.theArray[post(this.back)]) orig(this.theArray[post(this.back)-1]) orig(this.theArray[post(this.back)..]) orig(this.theArray[post(this.back)+1..]) orig(this.theArray[0..post(this.back)]) orig(this.theArray[0..post(this.back)-1]) orig(this.theArray[this.currentSize]) orig(this.theArray[this.currentSize-1]) orig(this.theArray[this.currentSize..]) orig(this.theArray[this.currentSize+1..]) orig(this.theArray[0..this.currentSize]) orig(this.theArray[0..this.currentSize-1]) orig(this.theArray[this.front]) orig(this.theArray[this.front-1]) orig(this.theArray[this.front..]) orig(this.theArray[this.front+1..]) orig(this.theArray[0..this.front]) orig(this.theArray[0..this.front-1]) orig(this.theArray[this.back]) orig(this.theArray[this.back-1]) orig(this.theArray[this.back..]) orig(this.theArray[this.back+1..]) orig(this.theArray[0..this.back]) orig(this.theArray[0..this.back-1])
assignable this.theArray[this.currentSize], this.theArray[this.currentSize+1..], this.theArray[0..this.currentSize], this.theArray[this.front-1], this.theArray[this.back-1]
this.currentSize >= 1
\result != null
warning: method daikon.inv.unary.string.PrintableString.format(OutputFormat:JML) needs to be implemented: return.getClass().getName() is printable
daikon.Quant.getElement_Object(this.theArray, this.back) != null
this.theArray.getClass().getName() != \result.getClass().getName()
daikon.Quant.memberOf(\result.getClass().getName() , daikon.Quant.typeArray(this.theArray) )
===========================================================================
DataStructures.QueueAr.getFront():::EXIT
    Variables: this this.theArray this.theArray.getClass().getName() this.theArray[] this.theArray[].getClass().getName() this.currentSize this.front this.back return return.getClass().getName() orig(this) orig(this.theArray) orig(this.theArray.getClass().getName()) orig(this.theArray[]) orig(this.theArray[].getClass().getName()) orig(this.currentSize) orig(this.front) orig(this.back) size(this.theArray[]) size(this.theArray[])-1 orig(size(this.theArray[])) orig(size(this.theArray[]))-1 this.theArray[this.currentSize] this.theArray[this.currentSize-1] this.theArray[this.currentSize..] this.theArray[this.currentSize+1..] this.theArray[0..this.currentSize] this.theArray[0..this.currentSize-1] this.theArray[this.front] this.theArray[this.front-1] this.theArray[this.front..] this.theArray[this.front+1..] this.theArray[0..this.front] this.theArray[0..this.front-1] this.theArray[this.back] this.theArray[this.back-1] this.theArray[this.back..] this.theArray[this.back+1..] this.theArray[0..this.back] this.theArray[0..this.back-1] this.theArray[orig(this.currentSize)] this.theArray[orig(this.currentSize)-1] this.theArray[orig(this.currentSize)..] this.theArray[orig(this.currentSize)+1..] this.theArray[0..orig(this.currentSize)] this.theArray[0..orig(this.currentSize)-1] this.theArray[orig(this.front)] this.theArray[orig(this.front)-1] this.theArray[orig(this.front)..] this.theArray[orig(this.front)+1..] this.theArray[0..orig(this.front)] this.theArray[0..orig(this.front)-1] this.theArray[orig(this.back)] this.theArray[orig(this.back)-1] this.theArray[orig(this.back)..] this.theArray[orig(this.back)+1..] this.theArray[0..orig(this.back)] this.theArray[0..orig(this.back)-1] orig(this.theArray[post(this.currentSize)]) orig(this.theArray[post(this.currentSize)-1]) orig(this.theArray[post(this.currentSize)..]) orig(this.theArray[post(this.currentSize)+1..]) orig(this.theArray[0..post(this.currentSize)]) orig(this.theArray[0..post(this.currentSize)-1]) orig(this.theArray[post(this.front)]) orig(this.theArray[post(this.front)-1]) orig(this.theArray[post(this.front)..]) orig(this.theArray[post(this.front)+1..]) orig(this.theArray[0..post(this.front)]) orig(this.theArray[0..post(this.front)-1]) orig(this.theArray[post(this.back)]) orig(this.theArray[post(this.back)-1]) orig(this.theArray[post(this.back)..]) orig(this.theArray[post(this.back)+1..]) orig(this.theArray[0..post(this.back)]) orig(this.theArray[0..post(this.back)-1]) orig(this.theArray[this.currentSize]) orig(this.theArray[this.currentSize-1]) orig(this.theArray[this.currentSize..]) orig(this.theArray[this.currentSize+1..]) orig(this.theArray[0..this.currentSize]) orig(this.theArray[0..this.currentSize-1]) orig(this.theArray[this.front]) orig(this.theArray[this.front-1]) orig(this.theArray[this.front..]) orig(this.theArray[this.front+1..]) orig(this.theArray[0..this.front]) orig(this.theArray[0..this.front-1]) orig(this.theArray[this.back]) orig(this.theArray[this.back-1]) orig(this.theArray[this.back..]) orig(this.theArray[this.back+1..]) orig(this.theArray[0..this.back]) orig(this.theArray[0..this.back-1])
assignable this.theArray[this.currentSize], this.theArray[this.currentSize-1], this.theArray[this.currentSize+1..], this.theArray[0..this.currentSize], this.theArray[this.front-1], this.theArray[this.back-1]
this.theArray == \old(this.theArray)
this.theArray.getClass().getName() == \old(this.theArray.getClass().getName())
daikon.Quant.pairwiseEqual(this.theArray, \old(this.theArray))
this.currentSize == \old(this.currentSize)
this.front == \old(this.front)
this.back == \old(this.back)
\result == daikon.Quant.getElement_Object(this.theArray, this.front)
\result == daikon.Quant.getElement_Object(this.theArray, \old(this.front))
\result == \old(daikon.Quant.getElement_Object(this.theArray, \new(this.front)))
\result == \old(daikon.Quant.getElement_Object(this.theArray, this.front))
(this.currentSize == 0)  <==>  (\result == null)
(this.currentSize == 0)  <==>  (daikon.Quant.getElement_Object(this.theArray, this.back) == null)
(this.currentSize == 0)  ==>  ((!(this.back == 0)) || (daikon.Quant.size(this.theArray)-1 == 0))
(this.currentSize == 0)  ==>  ((!(this.back == 0)) || (this.front == 0))
(this.currentSize == 0)  ==>  (("oneOf.java.jpp: SEQUENCE unimplemented" != null))
(this.currentSize == 0)  ==>  (("oneOf.java.jpp: SEQUENCE unimplemented" != null))
(this.currentSize == 0)  ==>  (\old(daikon.Quant.getElement_Object(this.theArray, \new(this.currentSize))) == null)
(this.currentSize == 0)  ==>  (\old(daikon.Quant.getElement_Object(this.theArray, this.currentSize)) == null)
(this.currentSize == 0)  ==>  (\result == \old(daikon.Quant.getElement_Object(this.theArray, \new(this.currentSize))))
(this.currentSize == 0)  ==>  (\result == \old(daikon.Quant.getElement_Object(this.theArray, this.currentSize)))
(this.currentSize == 0)  ==>  (\result == daikon.Quant.getElement_Object(this.theArray, \old(this.currentSize)))
(this.currentSize == 0)  ==>  (\result == daikon.Quant.getElement_Object(this.theArray, this.back))
(this.currentSize == 0)  ==>  (\result == daikon.Quant.getElement_Object(this.theArray, this.currentSize))
(this.currentSize == 0)  ==>  (this.currentSize <= daikon.Quant.size(this.theArray)-1)
(this.currentSize == 0)  ==>  (this.currentSize <= this.back)
(this.currentSize == 0)  ==>  (this.currentSize <= this.front)
(this.currentSize == 0)  ==>  (this.currentSize is a pointer)
(this.currentSize == 0)  ==>  (("oneOf.java.jpp: SEQUENCE unimplemented" != null))
(this.currentSize == 0)  ==>  (("oneOf.java.jpp: SEQUENCE unimplemented" != null))
(this.currentSize == 0)  ==>  (("oneOf.java.jpp: SEQUENCE unimplemented" != null))
(this.currentSize == 0)  ==>  (daikon.Quant.eltsEqual(this.theArray, null))
(this.currentSize == 0)  ==>  (daikon.Quant.eltsEqual(this.theArray, \old(daikon.Quant.getElement_Object(this.theArray, \new(this.currentSize)))))
(this.currentSize == 0)  ==>  (daikon.Quant.eltsEqual(this.theArray, \old(daikon.Quant.getElement_Object(this.theArray, this.currentSize))))
(this.currentSize == 0)  ==>  (daikon.Quant.eltsEqual(this.theArray, \result))
(this.currentSize == 0)  ==>  (daikon.Quant.eltsEqual(this.theArray, daikon.Quant.getElement_Object(this.theArray, \old(this.currentSize))))
(this.currentSize == 0)  ==>  (daikon.Quant.eltsEqual(this.theArray, daikon.Quant.getElement_Object(this.theArray, this.back)))
(this.currentSize == 0)  ==>  (daikon.Quant.eltsEqual(this.theArray, daikon.Quant.getElement_Object(this.theArray, this.currentSize)))
(this.currentSize == 0)  ==>  (daikon.Quant.eltsEqual(daikon.Quant.typeArray(this.theArray), null))
(this.currentSize == 0)  ==>  (daikon.Quant.getElement_Object(this.theArray, \old(this.currentSize)) == null)
(this.currentSize == 0)  ==>  (daikon.Quant.eltsEqual(daikon.Quant.slice(this.theArray, this.currentSize, daikon.Quant.size(this.theArray)), null))
(this.currentSize == 0)  ==>  (daikon.Quant.eltsEqual(daikon.Quant.slice(this.theArray, this.currentSize, daikon.Quant.size(this.theArray)), \old(daikon.Quant.getElement_Object(this.theArray, \new(this.currentSize)))))
(this.currentSize == 0)  ==>  (daikon.Quant.eltsEqual(daikon.Quant.slice(this.theArray, this.currentSize, daikon.Quant.size(this.theArray)), \old(daikon.Quant.getElement_Object(this.theArray, this.currentSize))))
(this.currentSize == 0)  ==>  (daikon.Quant.eltsEqual(daikon.Quant.slice(this.theArray, this.currentSize, daikon.Quant.size(this.theArray)), \result))
(this.currentSize == 0)  ==>  (daikon.Quant.eltsEqual(daikon.Quant.slice(this.theArray, this.currentSize, daikon.Quant.size(this.theArray)), daikon.Quant.getElement_Object(this.theArray, \old(this.currentSize))))
(this.currentSize == 0)  ==>  (daikon.Quant.eltsEqual(daikon.Quant.slice(this.theArray, this.currentSize, daikon.Quant.size(this.theArray)), daikon.Quant.getElement_Object(this.theArray, this.back)))
(this.currentSize == 0)  ==>  (daikon.Quant.eltsEqual(daikon.Quant.slice(this.theArray, this.currentSize, daikon.Quant.size(this.theArray)), daikon.Quant.getElement_Object(this.theArray, this.currentSize)))
(this.currentSize == 0)  ==>  (daikon.Quant.getElement_Object(this.theArray, this.currentSize) == null)
(\result != null)  ==>  (warning: method daikon.inv.unary.string.PrintableString.format(OutputFormat:JML) needs to be implemented: return.getClass().getName() is printable)
(\result != null)  ==>  (this.theArray.getClass().getName() != \result.getClass().getName())
(\result != null)  ==>  (daikon.Quant.memberOf(\result.getClass().getName() , daikon.Quant.typeArray(this.theArray) ))
===========================================================================
DataStructures.QueueAr.isEmpty():::ENTER
    Variables: this this.theArray this.theArray.getClass().getName() this.theArray[] this.theArray[].getClass().getName() this.currentSize this.front this.back size(this.theArray[]) size(this.theArray[])-1 this.theArray[this.currentSize] this.theArray[this.currentSize-1] this.theArray[this.currentSize..] this.theArray[this.currentSize+1..] this.theArray[0..this.currentSize] this.theArray[0..this.currentSize-1] this.theArray[this.front] this.theArray[this.front-1] this.theArray[this.front..] this.theArray[this.front+1..] this.theArray[0..this.front] this.theArray[0..this.front-1] this.theArray[this.back] this.theArray[this.back-1] this.theArray[this.back..] this.theArray[this.back+1..] this.theArray[0..this.back] this.theArray[0..this.back-1]
===========================================================================
DataStructures.QueueAr.isEmpty():::EXIT
    Variables: this this.theArray this.theArray.getClass().getName() this.theArray[] this.theArray[].getClass().getName() this.currentSize this.front this.back return orig(this) orig(this.theArray) orig(this.theArray.getClass().getName()) orig(this.theArray[]) orig(this.theArray[].getClass().getName()) orig(this.currentSize) orig(this.front) orig(this.back) size(this.theArray[]) size(this.theArray[])-1 orig(size(this.theArray[])) orig(size(this.theArray[]))-1 this.theArray[this.currentSize] this.theArray[this.currentSize-1] this.theArray[this.currentSize..] this.theArray[this.currentSize+1..] this.theArray[0..this.currentSize] this.theArray[0..this.currentSize-1] this.theArray[this.front] this.theArray[this.front-1] this.theArray[this.front..] this.theArray[this.front+1..] this.theArray[0..this.front] this.theArray[0..this.front-1] this.theArray[this.back] this.theArray[this.back-1] this.theArray[this.back..] this.theArray[this.back+1..] this.theArray[0..this.back] this.theArray[0..this.back-1] this.theArray[orig(this.currentSize)] this.theArray[orig(this.currentSize)-1] this.theArray[orig(this.currentSize)..] this.theArray[orig(this.currentSize)+1..] this.theArray[0..orig(this.currentSize)] this.theArray[0..orig(this.currentSize)-1] this.theArray[orig(this.front)] this.theArray[orig(this.front)-1] this.theArray[orig(this.front)..] this.theArray[orig(this.front)+1..] this.theArray[0..orig(this.front)] this.theArray[0..orig(this.front)-1] this.theArray[orig(this.back)] this.theArray[orig(this.back)-1] this.theArray[orig(this.back)..] this.theArray[orig(this.back)+1..] this.theArray[0..orig(this.back)] this.theArray[0..orig(this.back)-1] orig(this.theArray[post(this.currentSize)]) orig(this.theArray[post(this.currentSize)-1]) orig(this.theArray[post(this.currentSize)..]) orig(this.theArray[post(this.currentSize)+1..]) orig(this.theArray[0..post(this.currentSize)]) orig(this.theArray[0..post(this.currentSize)-1]) orig(this.theArray[post(this.front)]) orig(this.theArray[post(this.front)-1]) orig(this.theArray[post(this.front)..]) orig(this.theArray[post(this.front)+1..]) orig(this.theArray[0..post(this.front)]) orig(this.theArray[0..post(this.front)-1]) orig(this.theArray[post(this.back)]) orig(this.theArray[post(this.back)-1]) orig(this.theArray[post(this.back)..]) orig(this.theArray[post(this.back)+1..]) orig(this.theArray[0..post(this.back)]) orig(this.theArray[0..post(this.back)-1]) orig(this.theArray[this.currentSize]) orig(this.theArray[this.currentSize-1]) orig(this.theArray[this.currentSize..]) orig(this.theArray[this.currentSize+1..]) orig(this.theArray[0..this.currentSize]) orig(this.theArray[0..this.currentSize-1]) orig(this.theArray[this.front]) orig(this.theArray[this.front-1]) orig(this.theArray[this.front..]) orig(this.theArray[this.front+1..]) orig(this.theArray[0..this.front]) orig(this.theArray[0..this.front-1]) orig(this.theArray[this.back]) orig(this.theArray[this.back-1]) orig(this.theArray[this.back..]) orig(this.theArray[this.back+1..]) orig(this.theArray[0..this.back]) orig(this.theArray[0..this.back-1])
assignable this.theArray[this.currentSize], this.theArray[this.currentSize-1], this.theArray[this.currentSize+1..], this.theArray[0..this.currentSize], this.theArray[this.front-1], this.theArray[this.back-1]
this.theArray == \old(this.theArray)
this.theArray.getClass().getName() == \old(this.theArray.getClass().getName())
daikon.Quant.pairwiseEqual(this.theArray, \old(this.theArray))
this.currentSize == \old(this.currentSize)
this.front == \old(this.front)
this.back == \old(this.back)
(this.currentSize == 0)  <==>  (\result == true)
(this.currentSize == 0)  ==>  ((!(this.back == 0)) || (daikon.Quant.size(this.theArray)-1 == 0))
(this.currentSize == 0)  ==>  ((!(this.back == 0)) || (this.front == 0))
(this.currentSize == 0)  ==>  (("oneOf.java.jpp: SEQUENCE unimplemented" != null))
(this.currentSize == 0)  ==>  (("oneOf.java.jpp: SEQUENCE unimplemented" != null))
(this.currentSize == 0)  ==>  (this.currentSize <= daikon.Quant.size(this.theArray)-1)
(this.currentSize == 0)  ==>  (this.currentSize <= this.back)
(this.currentSize == 0)  ==>  (this.currentSize <= this.front)
(this.currentSize == 0)  ==>  (this.currentSize is a pointer)
(this.currentSize == 0)  ==>  (("oneOf.java.jpp: SEQUENCE unimplemented" != null))
(this.currentSize == 0)  ==>  (("oneOf.java.jpp: SEQUENCE unimplemented" != null))
(this.currentSize == 0)  ==>  (("oneOf.java.jpp: SEQUENCE unimplemented" != null))
(this.currentSize == 0)  ==>  (daikon.Quant.eltsEqual(this.theArray, null))
(this.currentSize == 0)  ==>  (daikon.Quant.eltsEqual(this.theArray, \old(daikon.Quant.getElement_Object(this.theArray, \new(this.currentSize)))))
(this.currentSize == 0)  ==>  (daikon.Quant.eltsEqual(this.theArray, \old(daikon.Quant.getElement_Object(this.theArray, this.currentSize))))
(this.currentSize == 0)  ==>  (daikon.Quant.eltsEqual(this.theArray, daikon.Quant.getElement_Object(this.theArray, \old(this.currentSize))))
(this.currentSize == 0)  ==>  (daikon.Quant.eltsEqual(this.theArray, daikon.Quant.getElement_Object(this.theArray, this.back)))
(this.currentSize == 0)  ==>  (daikon.Quant.eltsEqual(this.theArray, daikon.Quant.getElement_Object(this.theArray, this.currentSize)))
(this.currentSize == 0)  ==>  (daikon.Quant.eltsEqual(this.theArray, daikon.Quant.getElement_Object(this.theArray, this.front)))
(this.currentSize == 0)  ==>  (daikon.Quant.eltsEqual(daikon.Quant.typeArray(this.theArray), null))
(this.currentSize == 0)  ==>  (daikon.Quant.eltsEqual(daikon.Quant.slice(this.theArray, this.currentSize, daikon.Quant.size(this.theArray)), null))
(this.currentSize == 0)  ==>  (daikon.Quant.eltsEqual(daikon.Quant.slice(this.theArray, this.currentSize, daikon.Quant.size(this.theArray)), \old(daikon.Quant.getElement_Object(this.theArray, \new(this.currentSize)))))
(this.currentSize == 0)  ==>  (daikon.Quant.eltsEqual(daikon.Quant.slice(this.theArray, this.currentSize, daikon.Quant.size(this.theArray)), \old(daikon.Quant.getElement_Object(this.theArray, this.currentSize))))
(this.currentSize == 0)  ==>  (daikon.Quant.eltsEqual(daikon.Quant.slice(this.theArray, this.currentSize, daikon.Quant.size(this.theArray)), daikon.Quant.getElement_Object(this.theArray, \old(this.currentSize))))
(this.currentSize == 0)  ==>  (daikon.Quant.eltsEqual(daikon.Quant.slice(this.theArray, this.currentSize, daikon.Quant.size(this.theArray)), daikon.Quant.getElement_Object(this.theArray, this.back)))
(this.currentSize == 0)  ==>  (daikon.Quant.eltsEqual(daikon.Quant.slice(this.theArray, this.currentSize, daikon.Quant.size(this.theArray)), daikon.Quant.getElement_Object(this.theArray, this.currentSize)))
(this.currentSize == 0)  ==>  (daikon.Quant.eltsEqual(daikon.Quant.slice(this.theArray, this.currentSize, daikon.Quant.size(this.theArray)), daikon.Quant.getElement_Object(this.theArray, this.front)))
(this.currentSize == 0)  ==>  (daikon.Quant.getElement_Object(this.theArray, this.currentSize) == daikon.Quant.getElement_Object(this.theArray, this.back))
(this.currentSize == 0)  ==>  (daikon.Quant.getElement_Object(this.theArray, this.currentSize) == daikon.Quant.getElement_Object(this.theArray, this.front))
===========================================================================
DataStructures.QueueAr.isFull():::ENTER
    Variables: this this.theArray this.theArray.getClass().getName() this.theArray[] this.theArray[].getClass().getName() this.currentSize this.front this.back size(this.theArray[]) size(this.theArray[])-1 this.theArray[this.currentSize] this.theArray[this.currentSize-1] this.theArray[this.currentSize..] this.theArray[this.currentSize+1..] this.theArray[0..this.currentSize] this.theArray[0..this.currentSize-1] this.theArray[this.front] this.theArray[this.front-1] this.theArray[this.front..] this.theArray[this.front+1..] this.theArray[0..this.front] this.theArray[0..this.front-1] this.theArray[this.back] this.theArray[this.back-1] this.theArray[this.back..] this.theArray[this.back+1..] this.theArray[0..this.back] this.theArray[0..this.back-1]
===========================================================================
DataStructures.QueueAr.isFull():::EXIT
    Variables: this this.theArray this.theArray.getClass().getName() this.theArray[] this.theArray[].getClass().getName() this.currentSize this.front this.back return orig(this) orig(this.theArray) orig(this.theArray.getClass().getName()) orig(this.theArray[]) orig(this.theArray[].getClass().getName()) orig(this.currentSize) orig(this.front) orig(this.back) size(this.theArray[]) size(this.theArray[])-1 orig(size(this.theArray[])) orig(size(this.theArray[]))-1 this.theArray[this.currentSize] this.theArray[this.currentSize-1] this.theArray[this.currentSize..] this.theArray[this.currentSize+1..] this.theArray[0..this.currentSize] this.theArray[0..this.currentSize-1] this.theArray[this.front] this.theArray[this.front-1] this.theArray[this.front..] this.theArray[this.front+1..] this.theArray[0..this.front] this.theArray[0..this.front-1] this.theArray[this.back] this.theArray[this.back-1] this.theArray[this.back..] this.theArray[this.back+1..] this.theArray[0..this.back] this.theArray[0..this.back-1] this.theArray[orig(this.currentSize)] this.theArray[orig(this.currentSize)-1] this.theArray[orig(this.currentSize)..] this.theArray[orig(this.currentSize)+1..] this.theArray[0..orig(this.currentSize)] this.theArray[0..orig(this.currentSize)-1] this.theArray[orig(this.front)] this.theArray[orig(this.front)-1] this.theArray[orig(this.front)..] this.theArray[orig(this.front)+1..] this.theArray[0..orig(this.front)] this.theArray[0..orig(this.front)-1] this.theArray[orig(this.back)] this.theArray[orig(this.back)-1] this.theArray[orig(this.back)..] this.theArray[orig(this.back)+1..] this.theArray[0..orig(this.back)] this.theArray[0..orig(this.back)-1] orig(this.theArray[post(this.currentSize)]) orig(this.theArray[post(this.currentSize)-1]) orig(this.theArray[post(this.currentSize)..]) orig(this.theArray[post(this.currentSize)+1..]) orig(this.theArray[0..post(this.currentSize)]) orig(this.theArray[0..post(this.currentSize)-1]) orig(this.theArray[post(this.front)]) orig(this.theArray[post(this.front)-1]) orig(this.theArray[post(this.front)..]) orig(this.theArray[post(this.front)+1..]) orig(this.theArray[0..post(this.front)]) orig(this.theArray[0..post(this.front)-1]) orig(this.theArray[post(this.back)]) orig(this.theArray[post(this.back)-1]) orig(this.theArray[post(this.back)..]) orig(this.theArray[post(this.back)+1..]) orig(this.theArray[0..post(this.back)]) orig(this.theArray[0..post(this.back)-1]) orig(this.theArray[this.currentSize]) orig(this.theArray[this.currentSize-1]) orig(this.theArray[this.currentSize..]) orig(this.theArray[this.currentSize+1..]) orig(this.theArray[0..this.currentSize]) orig(this.theArray[0..this.currentSize-1]) orig(this.theArray[this.front]) orig(this.theArray[this.front-1]) orig(this.theArray[this.front..]) orig(this.theArray[this.front+1..]) orig(this.theArray[0..this.front]) orig(this.theArray[0..this.front-1]) orig(this.theArray[this.back]) orig(this.theArray[this.back-1]) orig(this.theArray[this.back..]) orig(this.theArray[this.back+1..]) orig(this.theArray[0..this.back]) orig(this.theArray[0..this.back-1])
assignable this.theArray[this.currentSize], this.theArray[this.currentSize-1], this.theArray[this.currentSize+1..], this.theArray[0..this.currentSize], this.theArray[this.front-1], this.theArray[this.back-1]
this.theArray == \old(this.theArray)
this.theArray.getClass().getName() == \old(this.theArray.getClass().getName())
daikon.Quant.pairwiseEqual(this.theArray, \old(this.theArray))
this.currentSize == \old(this.currentSize)
this.front == \old(this.front)
this.back == \old(this.back)
(\result == false)  <==>  (this.currentSize <= daikon.Quant.size(this.theArray)-1)
(\result == false)  ==>  ((!(daikon.Quant.size(this.theArray)-1 == 0)) || (this.currentSize == 0))
(\result == true)  <==>  (this.currentSize == daikon.Quant.size(this.theArray))
(\result == true)  ==>  (daikon.Quant.noDups(daikon.Quant.slice(this.theArray, 0, this.currentSize-1)))
(\result == true)  ==>  (daikon.Quant.eltsNotEqual(daikon.Quant.slice(this.theArray, 0, this.currentSize-1), null))
(\result == true)  ==>  (daikon.Quant.noDups(this.theArray))
(\result == true)  ==>  (daikon.Quant.eltsNotEqual(this.theArray, null))
(\result == true)  ==>  (("oneOf.java.jpp: SEQUENCE unimplemented" != null))
===========================================================================
DataStructures.QueueAr.makeEmpty():::ENTER
    Variables: this this.theArray this.theArray.getClass().getName() this.theArray[] this.theArray[].getClass().getName() this.currentSize this.front this.back size(this.theArray[]) size(this.theArray[])-1 this.theArray[this.currentSize] this.theArray[this.currentSize-1] this.theArray[this.currentSize..] this.theArray[this.currentSize+1..] this.theArray[0..this.currentSize] this.theArray[0..this.currentSize-1] this.theArray[this.front] this.theArray[this.front-1] this.theArray[this.front..] this.theArray[this.front+1..] this.theArray[0..this.front] this.theArray[0..this.front-1] this.theArray[this.back] this.theArray[this.back-1] this.theArray[this.back..] this.theArray[this.back+1..] this.theArray[0..this.back] this.theArray[0..this.back-1]
(!(this.currentSize == 0)) || (this.front == 0)
(!(this.back == 0)) || (this.front == 0)
(!(this.back == 0)) || (daikon.Quant.size(this.theArray)-1 == 0)
===========================================================================
DataStructures.QueueAr.makeEmpty():::EXIT
    Variables: this this.theArray this.theArray.getClass().getName() this.theArray[] this.theArray[].getClass().getName() this.currentSize this.front this.back orig(this) orig(this.theArray) orig(this.theArray.getClass().getName()) orig(this.theArray[]) orig(this.theArray[].getClass().getName()) orig(this.currentSize) orig(this.front) orig(this.back) size(this.theArray[]) size(this.theArray[])-1 orig(size(this.theArray[])) orig(size(this.theArray[]))-1 this.theArray[this.currentSize] this.theArray[this.currentSize-1] this.theArray[this.currentSize..] this.theArray[this.currentSize+1..] this.theArray[0..this.currentSize] this.theArray[0..this.currentSize-1] this.theArray[this.front] this.theArray[this.front-1] this.theArray[this.front..] this.theArray[this.front+1..] this.theArray[0..this.front] this.theArray[0..this.front-1] this.theArray[this.back] this.theArray[this.back-1] this.theArray[this.back..] this.theArray[this.back+1..] this.theArray[0..this.back] this.theArray[0..this.back-1] this.theArray[orig(this.currentSize)] this.theArray[orig(this.currentSize)-1] this.theArray[orig(this.currentSize)..] this.theArray[orig(this.currentSize)+1..] this.theArray[0..orig(this.currentSize)] this.theArray[0..orig(this.currentSize)-1] this.theArray[orig(this.front)] this.theArray[orig(this.front)-1] this.theArray[orig(this.front)..] this.theArray[orig(this.front)+1..] this.theArray[0..orig(this.front)] this.theArray[0..orig(this.front)-1] this.theArray[orig(this.back)] this.theArray[orig(this.back)-1] this.theArray[orig(this.back)..] this.theArray[orig(this.back)+1..] this.theArray[0..orig(this.back)] this.theArray[0..orig(this.back)-1] orig(this.theArray[post(this.currentSize)]) orig(this.theArray[post(this.currentSize)-1]) orig(this.theArray[post(this.currentSize)..]) orig(this.theArray[post(this.currentSize)+1..]) orig(this.theArray[0..post(this.currentSize)]) orig(this.theArray[0..post(this.currentSize)-1]) orig(this.theArray[post(this.front)]) orig(this.theArray[post(this.front)-1]) orig(this.theArray[post(this.front)..]) orig(this.theArray[post(this.front)+1..]) orig(this.theArray[0..post(this.front)]) orig(this.theArray[0..post(this.front)-1]) orig(this.theArray[post(this.back)]) orig(this.theArray[post(this.back)-1]) orig(this.theArray[post(this.back)..]) orig(this.theArray[post(this.back)+1..]) orig(this.theArray[0..post(this.back)]) orig(this.theArray[0..post(this.back)-1]) orig(this.theArray[this.currentSize]) orig(this.theArray[this.currentSize-1]) orig(this.theArray[this.currentSize..]) orig(this.theArray[this.currentSize+1..]) orig(this.theArray[0..this.currentSize]) orig(this.theArray[0..this.currentSize-1]) orig(this.theArray[this.front]) orig(this.theArray[this.front-1]) orig(this.theArray[this.front..]) orig(this.theArray[this.front+1..]) orig(this.theArray[0..this.front]) orig(this.theArray[0..this.front-1]) orig(this.theArray[this.back]) orig(this.theArray[this.back-1]) orig(this.theArray[this.back..]) orig(this.theArray[this.back+1..]) orig(this.theArray[0..this.back]) orig(this.theArray[0..this.back-1])
assignable this.theArray[*], this.currentSize, this.front, this.back, this.theArray[this.currentSize], this.theArray[this.currentSize-1], this.theArray[this.currentSize..], this.theArray[this.currentSize+1..], this.theArray[0..this.currentSize], this.theArray[0..this.currentSize-1], this.theArray[this.front], this.theArray[this.front-1], this.theArray[this.front..], this.theArray[this.front+1..], this.theArray[0..this.front], this.theArray[0..this.front-1], this.theArray[this.back], this.theArray[this.back-1], this.theArray[this.back..], this.theArray[this.back+1..], this.theArray[0..this.back], this.theArray[0..this.back-1]
this.theArray == \old(this.theArray)
this.theArray.getClass().getName() == \old(this.theArray.getClass().getName())
this.currentSize == this.front
this.back == daikon.Quant.size(this.theArray)-1
this.back == \old(daikon.Quant.size(this.theArray))-1
daikon.Quant.size(this.theArray) == \old(daikon.Quant.size(this.theArray))
daikon.Quant.getElement_Object(this.theArray, this.currentSize) == daikon.Quant.getElement_Object(this.theArray, this.back)
daikon.Quant.getElement_Object(this.theArray, this.currentSize) == daikon.Quant.getElement_Object(this.theArray, \old(this.front))
daikon.Quant.getElement_Object(this.theArray, this.currentSize) == daikon.Quant.getElement_Object(this.theArray, \old(this.back))
daikon.Quant.eltsEqual(this.theArray, null)
daikon.Quant.eltsEqual(daikon.Quant.typeArray(this.theArray), null)
this.currentSize == 0
("oneOf.java.jpp: SEQUENCE unimplemented" != null)
("oneOf.java.jpp: SEQUENCE unimplemented" != null)
daikon.Quant.eltsEqual(this.theArray, daikon.Quant.getElement_Object(this.theArray, this.currentSize))
this.currentSize <= this.back
this.currentSize <= \old(this.currentSize)
this.currentSize <= \old(this.front)
this.currentSize <= \old(this.back)
(!(this.back == 0)) || (\old(this.front) == 0)
this.back >= \old(this.front)
(!(\old(this.back) == 0)) || (this.back == 0)
(!(this.back == 0)) || (\old(this.back) == 0)
this.back >= \old(this.back)
\old(this.currentSize) <= daikon.Quant.size(this.theArray)
daikon.Quant.subsetOf(daikon.Quant.slice(this.theArray, 0, \old(this.front)-1), \old(daikon.Quant.slice(this.theArray, 0, \new(this.back)-1)))
daikon.Quant.subsetOf(daikon.Quant.slice(this.theArray, 0, \old(this.front)-1), \old(daikon.Quant.slice(this.theArray, 0, this.currentSize-1)))
daikon.Quant.subsetOf(daikon.Quant.slice(this.theArray, 0, \old(this.front)-1), \old(daikon.Quant.slice(this.theArray, 0, this.front)))
daikon.Quant.subsetOf(daikon.Quant.slice(this.theArray, 0, \old(this.front)-1), \old(daikon.Quant.slice(this.theArray, 0, this.front-1)))
daikon.Quant.subsetOf(daikon.Quant.slice(this.theArray, \old(this.back)+1, daikon.Quant.size(this.theArray)), \old(daikon.Quant.slice(this.theArray, \new(this.currentSize)+1, daikon.Quant.size(this.theArray))))
daikon.Quant.subsetOf(daikon.Quant.slice(this.theArray, \old(this.back)+1, daikon.Quant.size(this.theArray)), \old(daikon.Quant.slice(this.theArray, 0, \new(this.back)-1)))
daikon.Quant.subsetOf(daikon.Quant.slice(this.theArray, \old(this.back)+1, daikon.Quant.size(this.theArray)), \old(daikon.Quant.slice(this.theArray, this.back, daikon.Quant.size(this.theArray))))
daikon.Quant.subsetOf(daikon.Quant.slice(this.theArray, \old(this.back)+1, daikon.Quant.size(this.theArray)), \old(daikon.Quant.slice(this.theArray, this.back+1, daikon.Quant.size(this.theArray))))
daikon.Quant.eltsEqual(\old(daikon.Quant.slice(this.theArray, 0, \new(this.currentSize))), \old(daikon.Quant.getElement_Object(this.theArray, \new(this.currentSize))))
daikon.Quant.eltsEqual(\old(daikon.Quant.slice(this.theArray, \new(this.back), daikon.Quant.size(this.theArray))), \old(daikon.Quant.getElement_Object(this.theArray, \new(this.back))))
