===========================================================================
DataStructures.QueueAr:::OBJECT
this.theArray != null
this.theArray.getClass().getName() == java.lang.Object[].class
this.currentSize >= 0
this.front >= 0
this.back >= 0
this.currentSize <= size(this.theArray[])
(size(this.theArray[])-1 == 0) ==> (this.front == 0)
this.front <= size(this.theArray[])-1
(size(this.theArray[])-1 == 0) ==> (this.back == 0)
this.back <= size(this.theArray[])-1
===========================================================================
DataStructures.QueueAr.QueueAr(int):::ENTER
===========================================================================
DataStructures.QueueAr.QueueAr(int):::EXIT
this.currentSize == this.front
this.back == size(this.theArray[])-1
orig(capacity) == size(this.theArray[])
this.theArray[this.currentSize] == this.theArray[this.back]
this.theArray[this.currentSize] == this.theArray[orig(capacity)-1]
this.theArray[] elements == null
this.theArray[].getClass().getName() elements == null
this.currentSize == 0
this.theArray[0..this.currentSize] == [null]
this.theArray[orig(capacity)..] == []
this.theArray[] elements == this.theArray[this.currentSize]
this.currentSize <= this.back
===========================================================================
DataStructures.QueueAr.dequeue():::ENTER
this.theArray[this.front] != null
this.theArray[this.back] != null
===========================================================================
DataStructures.QueueAr.dequeue():::EXIT93
===========================================================================
DataStructures.QueueAr.dequeue():::EXIT
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.back == orig(this.back)
size(this.theArray[]) == orig(size(this.theArray[]))
this.theArray[this.currentSize] == this.theArray[orig(this.currentSize)-1]
this.theArray[orig(this.front)+1..] == orig(this.theArray[this.front+1..])
this.theArray[0..orig(this.front)-1] == orig(this.theArray[0..this.front-1])
orig(this.theArray[post(this.currentSize)]) == orig(this.theArray[this.currentSize-1])
return != null
return.getClass().getName() is printable
this.theArray[orig(this.front)] == null
this.theArray.getClass().getName() != return.getClass().getName()
this.currentSize - orig(this.currentSize) + 1 == 0
(size(this.theArray[])-1 == 0) ==> (this.currentSize == 0)
this.currentSize <= size(this.theArray[])-1
return.getClass().getName() in orig(this.theArray[].getClass().getName())
orig(this.currentSize) <= size(this.theArray[])
(size(this.theArray[])-1 == 0) ==> (orig(this.front) == 0)
orig(this.front) <= size(this.theArray[])-1
this.theArray[this.currentSize+1..] is a subset of orig(this.theArray[post(this.currentSize)..])
===========================================================================
DataStructures.QueueAr.dequeueAll():::ENTER
this.currentSize == size(this.theArray[])
this.back == size(this.theArray[])-1
this.theArray[this.currentSize-1] == this.theArray[this.back]
this.front == 0
this.theArray[this.currentSize..] == []
this.theArray[0..this.front] elements == this.theArray[this.front]
this.theArray[this.back..] elements == this.theArray[this.back]
===========================================================================
DataStructures.QueueAr.dequeueAll():::EXIT
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.currentSize == this.front
this.currentSize == orig(this.front)
this.back == orig(this.back)
this.back == size(this.theArray[])-1
this.back == orig(size(this.theArray[]))-1
orig(this.currentSize) == size(this.theArray[])
this.theArray[this.currentSize] == this.theArray[this.back]
this.theArray[this.currentSize] == this.theArray[orig(this.currentSize)-1]
this.theArray[this.currentSize] == this.theArray[orig(this.back)]
this.theArray[] elements == null
this.theArray[].getClass().getName() elements == null
this.currentSize == 0
this.theArray[0..this.currentSize] == [null]
this.theArray[0..this.currentSize-1] == []
this.theArray[] elements == this.theArray[this.currentSize]
===========================================================================
DataStructures.QueueAr.enqueue(java.lang.Object):::ENTER
x != null
x.getClass().getName() is printable
this.theArray.getClass().getName() != x.getClass().getName()
(this.currentSize == 0) ==> (this.front == 0)
(size(this.theArray[])-1 == 0) ==> (this.currentSize == 0)
this.currentSize <= size(this.theArray[])-1
===========================================================================
DataStructures.QueueAr.enqueue(java.lang.Object):::EXIT
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.front == orig(this.front)
orig(x) == this.theArray[this.back]
size(this.theArray[]) == orig(size(this.theArray[]))
this.theArray[this.currentSize-1] == this.theArray[orig(this.currentSize)]
this.theArray[this.back+1..] == orig(this.theArray[post(this.back)+1..])
this.theArray[0..this.back-1] == orig(this.theArray[0..post(this.back)-1])
orig(this.theArray[post(this.currentSize)-1]) == orig(this.theArray[this.currentSize])
this.currentSize >= 1
this.theArray[this.front] != null
orig(this.theArray[post(this.back)]) == null
this.theArray.getClass().getName() != orig(x.getClass().getName())
orig(x.getClass().getName()) in this.theArray[].getClass().getName()
(this.front >> this.currentSize == 0)
(this.back >> this.currentSize == 0)
this.currentSize - orig(this.currentSize) - 1 == 0
(orig(this.currentSize) == 0) ==> (this.front == 0)
(orig(this.currentSize) == 0) ==> (this.back == 0)
(size(this.theArray[])-1 == 0) ==> (orig(this.currentSize) == 0)
orig(this.currentSize) <= size(this.theArray[])-1
(size(this.theArray[])-1 == 0) ==> (orig(this.back) == 0)
orig(this.back) <= size(this.theArray[])-1
===========================================================================
DataStructures.QueueAr.getFront():::ENTER
===========================================================================
DataStructures.QueueAr.getFront():::EXIT75
return == this.theArray[this.currentSize]
return == this.theArray[this.back]
return == this.theArray[orig(this.currentSize)]
return == this.theArray[orig(this.back)]
return == orig(this.theArray[post(this.currentSize)])
return == orig(this.theArray[post(this.back)])
return == orig(this.theArray[this.currentSize])
return == orig(this.theArray[this.back])
this.theArray[] elements == null
this.theArray[].getClass().getName() elements == null
this.currentSize == 0
return == null
this.theArray[0..this.currentSize] == [null]
this.theArray[0..this.currentSize-1] == []
this.theArray[] elements == return
this.currentSize <= this.front
this.currentSize <= this.back
this.currentSize <= size(this.theArray[])-1
(this.back == 0) ==> (this.front == 0)
(this.back == 0) ==> (size(this.theArray[])-1 == 0)
===========================================================================
DataStructures.QueueAr.getFront():::EXIT76
this.currentSize >= 1
return != null
this.theArray[this.back] != null
===========================================================================
DataStructures.QueueAr.getFront():::EXIT
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.theArray[] == orig(this.theArray[])
this.currentSize == orig(this.currentSize)
this.front == orig(this.front)
this.back == orig(this.back)
return == this.theArray[this.front]
return == this.theArray[orig(this.front)]
return == orig(this.theArray[post(this.front)])
return == orig(this.theArray[this.front])
(this.currentSize == 0)  <==>  (return == null)
(this.currentSize == 0)  <==>  (this.theArray[this.back] == null)
(this.currentSize == 0)  ==>  ((this.back == 0) ==> (size(this.theArray[])-1 == 0))
(this.currentSize == 0)  ==>  ((this.back == 0) ==> (this.front == 0))
(this.currentSize == 0)  ==>  (orig(this.theArray[0..post(this.currentSize)]) == [null])
(this.currentSize == 0)  ==>  (orig(this.theArray[0..this.currentSize]) == [null])
(this.currentSize == 0)  ==>  (orig(this.theArray[post(this.currentSize)]) == null)
(this.currentSize == 0)  ==>  (orig(this.theArray[this.currentSize]) == null)
(this.currentSize == 0)  ==>  (return == orig(this.theArray[post(this.currentSize)]))
(this.currentSize == 0)  ==>  (return == orig(this.theArray[this.currentSize]))
(this.currentSize == 0)  ==>  (return == this.theArray[orig(this.currentSize)])
(this.currentSize == 0)  ==>  (return == this.theArray[this.back])
(this.currentSize == 0)  ==>  (return == this.theArray[this.currentSize])
(this.currentSize == 0)  ==>  (this.currentSize <= size(this.theArray[])-1)
(this.currentSize == 0)  ==>  (this.currentSize <= this.back)
(this.currentSize == 0)  ==>  (this.currentSize <= this.front)
(this.currentSize == 0)  ==>  (this.currentSize is a pointer)
(this.currentSize == 0)  ==>  (this.theArray[0..orig(this.currentSize)] == [null])
(this.currentSize == 0)  ==>  (this.theArray[0..this.currentSize-1] == [])
(this.currentSize == 0)  ==>  (this.theArray[0..this.currentSize] == [null])
(this.currentSize == 0)  ==>  (this.theArray[] elements == null)
(this.currentSize == 0)  ==>  (this.theArray[] elements == orig(this.theArray[post(this.currentSize)]))
(this.currentSize == 0)  ==>  (this.theArray[] elements == orig(this.theArray[this.currentSize]))
(this.currentSize == 0)  ==>  (this.theArray[] elements == return)
(this.currentSize == 0)  ==>  (this.theArray[] elements == this.theArray[orig(this.currentSize)])
(this.currentSize == 0)  ==>  (this.theArray[] elements == this.theArray[this.back])
(this.currentSize == 0)  ==>  (this.theArray[] elements == this.theArray[this.currentSize])
(this.currentSize == 0)  ==>  (this.theArray[].getClass().getName() elements == null)
(this.currentSize == 0)  ==>  (this.theArray[orig(this.currentSize)] == null)
(this.currentSize == 0)  ==>  (this.theArray[this.currentSize..] elements == null)
(this.currentSize == 0)  ==>  (this.theArray[this.currentSize..] elements == orig(this.theArray[post(this.currentSize)]))
(this.currentSize == 0)  ==>  (this.theArray[this.currentSize..] elements == orig(this.theArray[this.currentSize]))
(this.currentSize == 0)  ==>  (this.theArray[this.currentSize..] elements == return)
(this.currentSize == 0)  ==>  (this.theArray[this.currentSize..] elements == this.theArray[orig(this.currentSize)])
(this.currentSize == 0)  ==>  (this.theArray[this.currentSize..] elements == this.theArray[this.back])
(this.currentSize == 0)  ==>  (this.theArray[this.currentSize..] elements == this.theArray[this.currentSize])
(this.currentSize == 0)  ==>  (this.theArray[this.currentSize] == null)
return.getClass().getName() is printable
this.theArray.getClass().getName() != return.getClass().getName()
return.getClass().getName() in this.theArray[].getClass().getName()
===========================================================================
DataStructures.QueueAr.isEmpty():::ENTER
===========================================================================
DataStructures.QueueAr.isEmpty():::EXIT
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.theArray[] == orig(this.theArray[])
this.currentSize == orig(this.currentSize)
this.front == orig(this.front)
this.back == orig(this.back)
(this.currentSize == 0)  <==>  (return == true)
(this.currentSize == 0)  ==>  ((this.back == 0) ==> (size(this.theArray[])-1 == 0))
(this.currentSize == 0)  ==>  ((this.back == 0) ==> (this.front == 0))
(this.currentSize == 0)  ==>  (orig(this.theArray[0..post(this.currentSize)]) == [null])
(this.currentSize == 0)  ==>  (orig(this.theArray[0..this.currentSize]) == [null])
(this.currentSize == 0)  ==>  (this.currentSize <= size(this.theArray[])-1)
(this.currentSize == 0)  ==>  (this.currentSize <= this.back)
(this.currentSize == 0)  ==>  (this.currentSize <= this.front)
(this.currentSize == 0)  ==>  (this.currentSize is a pointer)
(this.currentSize == 0)  ==>  (this.theArray[0..orig(this.currentSize)] == [null])
(this.currentSize == 0)  ==>  (this.theArray[0..this.currentSize-1] == [])
(this.currentSize == 0)  ==>  (this.theArray[0..this.currentSize] == [null])
(this.currentSize == 0)  ==>  (this.theArray[] elements == null)
(this.currentSize == 0)  ==>  (this.theArray[] elements == orig(this.theArray[post(this.currentSize)]))
(this.currentSize == 0)  ==>  (this.theArray[] elements == orig(this.theArray[this.currentSize]))
(this.currentSize == 0)  ==>  (this.theArray[] elements == this.theArray[orig(this.currentSize)])
(this.currentSize == 0)  ==>  (this.theArray[] elements == this.theArray[this.back])
(this.currentSize == 0)  ==>  (this.theArray[] elements == this.theArray[this.currentSize])
(this.currentSize == 0)  ==>  (this.theArray[] elements == this.theArray[this.front])
(this.currentSize == 0)  ==>  (this.theArray[].getClass().getName() elements == null)
(this.currentSize == 0)  ==>  (this.theArray[this.currentSize..] elements == null)
(this.currentSize == 0)  ==>  (this.theArray[this.currentSize..] elements == orig(this.theArray[post(this.currentSize)]))
(this.currentSize == 0)  ==>  (this.theArray[this.currentSize..] elements == orig(this.theArray[this.currentSize]))
(this.currentSize == 0)  ==>  (this.theArray[this.currentSize..] elements == this.theArray[orig(this.currentSize)])
(this.currentSize == 0)  ==>  (this.theArray[this.currentSize..] elements == this.theArray[this.back])
(this.currentSize == 0)  ==>  (this.theArray[this.currentSize..] elements == this.theArray[this.currentSize])
(this.currentSize == 0)  ==>  (this.theArray[this.currentSize..] elements == this.theArray[this.front])
(this.currentSize == 0)  ==>  (this.theArray[this.currentSize] == this.theArray[this.back])
(this.currentSize == 0)  ==>  (this.theArray[this.currentSize] == this.theArray[this.front])
===========================================================================
DataStructures.QueueAr.isEmpty():::EXIT;condition="return == true"
this.theArray[this.currentSize] == this.theArray[this.front]
this.theArray[this.currentSize] == this.theArray[this.back]
this.theArray[this.currentSize] == this.theArray[orig(this.front)]
this.theArray[this.currentSize] == this.theArray[orig(this.back)]
this.theArray[this.currentSize] == orig(this.theArray[post(this.front)])
this.theArray[this.currentSize] == orig(this.theArray[post(this.back)])
this.theArray[this.currentSize] == orig(this.theArray[this.front])
this.theArray[this.currentSize] == orig(this.theArray[this.back])
this.theArray[] elements == null
this.theArray[].getClass().getName() elements == null
this.currentSize == 0
return == true
this.theArray[0..this.currentSize] == [null]
this.theArray[0..this.currentSize-1] == []
this.theArray[] elements == this.theArray[this.currentSize]
this.currentSize <= this.front
this.currentSize <= this.back
this.currentSize <= size(this.theArray[])-1
(this.back == 0) ==> (this.front == 0)
(this.back == 0) ==> (size(this.theArray[])-1 == 0)
===========================================================================
DataStructures.QueueAr.isEmpty():::EXIT;condition="not(return == true)"
this.currentSize >= 1
return == false
this.theArray[this.front] != null
this.theArray[this.back] != null
===========================================================================
DataStructures.QueueAr.isFull():::ENTER
===========================================================================
DataStructures.QueueAr.isFull():::EXIT
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.theArray[] == orig(this.theArray[])
this.currentSize == orig(this.currentSize)
this.front == orig(this.front)
this.back == orig(this.back)
(return == false)  <==>  (this.currentSize <= size(this.theArray[])-1)
(return == false)  ==>  ((size(this.theArray[])-1 == 0) ==> (this.currentSize == 0))
(return == true)  <==>  (this.currentSize == size(this.theArray[]))
(return == true)  ==>  (this.theArray[0..this.currentSize-1] contains no duplicates)
(return == true)  ==>  (this.theArray[0..this.currentSize-1] elements != null)
(return == true)  ==>  (this.theArray[] contains no duplicates)
(return == true)  ==>  (this.theArray[] elements != null)
(return == true)  ==>  (this.theArray[this.currentSize..] == [])
===========================================================================
DataStructures.QueueAr.isFull():::EXIT;condition="return == true"
this.currentSize == size(this.theArray[])
this.currentSize == orig(size(this.theArray[]))
this.theArray[] contains no duplicates
this.theArray[] elements != null
return == true
this.theArray[this.currentSize..] == []
===========================================================================
DataStructures.QueueAr.isFull():::EXIT;condition="not(return == true)"
return == false
(size(this.theArray[])-1 == 0) ==> (this.currentSize == 0)
this.currentSize <= size(this.theArray[])-1
===========================================================================
DataStructures.QueueAr.makeEmpty():::ENTER
(this.currentSize == 0) ==> (this.front == 0)
(this.back == 0) ==> (this.front == 0)
(this.back == 0) ==> (size(this.theArray[])-1 == 0)
===========================================================================
DataStructures.QueueAr.makeEmpty():::EXIT
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.currentSize == this.front
this.back == size(this.theArray[])-1
this.back == orig(size(this.theArray[]))-1
size(this.theArray[]) == orig(size(this.theArray[]))
this.theArray[this.currentSize] == this.theArray[this.back]
this.theArray[this.currentSize] == this.theArray[orig(this.front)]
this.theArray[this.currentSize] == this.theArray[orig(this.back)]
this.theArray[] elements == null
this.theArray[].getClass().getName() elements == null
this.currentSize == 0
this.theArray[0..this.currentSize] == [null]
this.theArray[0..this.currentSize-1] == []
this.theArray[] elements == this.theArray[this.currentSize]
this.currentSize <= this.back
this.currentSize <= orig(this.currentSize)
this.currentSize <= orig(this.front)
this.currentSize <= orig(this.back)
(this.back == 0) ==> (orig(this.front) == 0)
this.back >= orig(this.front)
(orig(this.back) == 0) ==> (this.back == 0)
(this.back == 0) ==> (orig(this.back) == 0)
this.back >= orig(this.back)
orig(this.currentSize) <= size(this.theArray[])
this.theArray[0..orig(this.front)-1] is a subset of orig(this.theArray[0..post(this.back)-1])
this.theArray[0..orig(this.front)-1] is a subset of orig(this.theArray[0..this.currentSize-1])
this.theArray[0..orig(this.front)-1] is a subset of orig(this.theArray[0..this.front])
this.theArray[0..orig(this.front)-1] is a subset of orig(this.theArray[0..this.front-1])
this.theArray[orig(this.back)+1..] is a subset of orig(this.theArray[post(this.currentSize)+1..])
this.theArray[orig(this.back)+1..] is a subset of orig(this.theArray[0..post(this.back)-1])
this.theArray[orig(this.back)+1..] is a subset of orig(this.theArray[this.back..])
this.theArray[orig(this.back)+1..] is a subset of orig(this.theArray[this.back+1..])
orig(this.theArray[0..post(this.currentSize)]) elements == orig(this.theArray[post(this.currentSize)])
orig(this.theArray[post(this.back)..]) elements == orig(this.theArray[post(this.back)])
