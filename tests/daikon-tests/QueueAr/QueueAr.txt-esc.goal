===========================================================================
DataStructures.QueueAr:::OBJECT
    Variables: this this.theArray this.theArray.getClass().getName() this.theArray[] this.theArray[].getClass().getName() this.currentSize this.front this.back size(this.theArray[]) size(this.theArray[])-1 this.theArray[this.currentSize] this.theArray[this.currentSize-1] this.theArray[this.currentSize..] this.theArray[this.currentSize+1..] this.theArray[0..this.currentSize] this.theArray[0..this.currentSize-1] this.theArray[this.front] this.theArray[this.front-1] this.theArray[this.front..] this.theArray[this.front+1..] this.theArray[0..this.front] this.theArray[0..this.front-1] this.theArray[this.back] this.theArray[this.back-1] this.theArray[this.back..] this.theArray[this.back+1..] this.theArray[0..this.back] this.theArray[0..this.back-1]
this.theArray != null
\typeof(this.theArray) == \type(java.lang.Object[])
this.currentSize >= 0
this.front >= 0
this.back >= 0
this.currentSize <= this.theArray.length
(this.theArray.length-1 == 0) ==> (this.front == 0)
this.front <= this.theArray.length-1
(this.theArray.length-1 == 0) ==> (this.back == 0)
this.back <= this.theArray.length-1
===========================================================================
DataStructures.QueueAr.QueueAr(int):::ENTER
    Variables: capacity
===========================================================================
DataStructures.QueueAr.QueueAr(int):::EXIT
    Variables: this this.theArray this.theArray.getClass().getName() this.theArray[] this.theArray[].getClass().getName() this.currentSize this.front this.back capacity orig(capacity) size(this.theArray[]) size(this.theArray[])-1 this.theArray[this.currentSize] this.theArray[this.currentSize-1] this.theArray[this.currentSize..] this.theArray[this.currentSize+1..] this.theArray[0..this.currentSize] this.theArray[0..this.currentSize-1] this.theArray[this.front] this.theArray[this.front-1] this.theArray[this.front..] this.theArray[this.front+1..] this.theArray[0..this.front] this.theArray[0..this.front-1] this.theArray[this.back] this.theArray[this.back-1] this.theArray[this.back..] this.theArray[this.back+1..] this.theArray[0..this.back] this.theArray[0..this.back-1] this.theArray[capacity] this.theArray[capacity-1] this.theArray[capacity..] this.theArray[capacity+1..] this.theArray[0..capacity] this.theArray[0..capacity-1] this.theArray[orig(capacity)] this.theArray[orig(capacity)-1] this.theArray[orig(capacity)..] this.theArray[orig(capacity)+1..] this.theArray[0..orig(capacity)] this.theArray[0..orig(capacity)-1]
      Unmodified variables: capacity
this.currentSize == this.front
this.back == this.theArray.length-1
\old(capacity) == this.theArray.length
this.theArray[this.currentSize] == this.theArray[this.back]
this.theArray[this.currentSize] == this.theArray[\old(capacity)-1]
(\forall int i; (0 <= i && i <= this.theArray.length-1) ==> (this.theArray[i] == null))
(\forall int i; (0 <= i && i <= this.theArray.length-1) ==> (\typeof(this.theArray[i]) == \typeof(null)))
this.currentSize == 0
(\forall int i; (0 <= i && i <= this.currentSize) ==> (this.theArray[i] == null))
(\forall int i; (\old(capacity) <= i && i <= this.theArray.length-1) ==> (this.theArray[i] != null))
(\forall int i; (0 <= i && i <= this.theArray.length-1) ==> (this.theArray[i] == this.theArray[this.currentSize]))
this.currentSize <= this.back
===========================================================================
DataStructures.QueueAr.dequeue():::ENTER
    Variables: this this.theArray this.theArray.getClass().getName() this.theArray[] this.theArray[].getClass().getName() this.currentSize this.front this.back size(this.theArray[]) size(this.theArray[])-1 this.theArray[this.currentSize] this.theArray[this.currentSize-1] this.theArray[this.currentSize..] this.theArray[this.currentSize+1..] this.theArray[0..this.currentSize] this.theArray[0..this.currentSize-1] this.theArray[this.front] this.theArray[this.front-1] this.theArray[this.front..] this.theArray[this.front+1..] this.theArray[0..this.front] this.theArray[0..this.front-1] this.theArray[this.back] this.theArray[this.back-1] this.theArray[this.back..] this.theArray[this.back+1..] this.theArray[0..this.back] this.theArray[0..this.back-1]
this.theArray[this.front] != null
this.theArray[this.back] != null
===========================================================================
DataStructures.QueueAr.dequeue():::EXIT93
    Variables: this this.theArray this.theArray.getClass().getName() this.theArray[] this.theArray[].getClass().getName() this.currentSize this.front this.back return return.getClass().getName() orig(this) orig(this.theArray) orig(this.theArray.getClass().getName()) orig(this.theArray[]) orig(this.theArray[].getClass().getName()) orig(this.currentSize) orig(this.front) orig(this.back) size(this.theArray[]) size(this.theArray[])-1 orig(size(this.theArray[])) orig(size(this.theArray[]))-1 this.theArray[this.currentSize] this.theArray[this.currentSize-1] this.theArray[this.currentSize..] this.theArray[this.currentSize+1..] this.theArray[0..this.currentSize] this.theArray[0..this.currentSize-1] this.theArray[this.front] this.theArray[this.front-1] this.theArray[this.front..] this.theArray[this.front+1..] this.theArray[0..this.front] this.theArray[0..this.front-1] this.theArray[this.back] this.theArray[this.back-1] this.theArray[this.back..] this.theArray[this.back+1..] this.theArray[0..this.back] this.theArray[0..this.back-1] this.theArray[orig(this.currentSize)] this.theArray[orig(this.currentSize)-1] this.theArray[orig(this.currentSize)..] this.theArray[orig(this.currentSize)+1..] this.theArray[0..orig(this.currentSize)] this.theArray[0..orig(this.currentSize)-1] this.theArray[orig(this.front)] this.theArray[orig(this.front)-1] this.theArray[orig(this.front)..] this.theArray[orig(this.front)+1..] this.theArray[0..orig(this.front)] this.theArray[0..orig(this.front)-1] this.theArray[orig(this.back)] this.theArray[orig(this.back)-1] this.theArray[orig(this.back)..] this.theArray[orig(this.back)+1..] this.theArray[0..orig(this.back)] this.theArray[0..orig(this.back)-1] orig(this.theArray[post(this.currentSize)]) orig(this.theArray[post(this.currentSize)-1]) orig(this.theArray[post(this.currentSize)..]) orig(this.theArray[post(this.currentSize)+1..]) orig(this.theArray[0..post(this.currentSize)]) orig(this.theArray[0..post(this.currentSize)-1]) orig(this.theArray[post(this.front)]) orig(this.theArray[post(this.front)-1]) orig(this.theArray[post(this.front)..]) orig(this.theArray[post(this.front)+1..]) orig(this.theArray[0..post(this.front)]) orig(this.theArray[0..post(this.front)-1]) orig(this.theArray[post(this.back)]) orig(this.theArray[post(this.back)-1]) orig(this.theArray[post(this.back)..]) orig(this.theArray[post(this.back)+1..]) orig(this.theArray[0..post(this.back)]) orig(this.theArray[0..post(this.back)-1]) orig(this.theArray[this.currentSize]) orig(this.theArray[this.currentSize-1]) orig(this.theArray[this.currentSize..]) orig(this.theArray[this.currentSize+1..]) orig(this.theArray[0..this.currentSize]) orig(this.theArray[0..this.currentSize-1]) orig(this.theArray[this.front]) orig(this.theArray[this.front-1]) orig(this.theArray[this.front..]) orig(this.theArray[this.front+1..]) orig(this.theArray[0..this.front]) orig(this.theArray[0..this.front-1]) orig(this.theArray[this.back]) orig(this.theArray[this.back-1]) orig(this.theArray[this.back..]) orig(this.theArray[this.back+1..]) orig(this.theArray[0..this.back]) orig(this.theArray[0..this.back-1])
      Modified variables: this.theArray[] this.theArray[].getClass().getName() this.currentSize this.front this.theArray[this.currentSize] this.theArray[this.currentSize-1] this.theArray[this.currentSize..] this.theArray[this.currentSize+1..] this.theArray[0..this.currentSize] this.theArray[0..this.currentSize-1] this.theArray[this.front] this.theArray[this.front-1] this.theArray[this.front..] this.theArray[this.front+1..] this.theArray[0..this.front] this.theArray[0..this.front-1] this.theArray[this.back] this.theArray[this.back-1] this.theArray[this.back..] this.theArray[this.back+1..] this.theArray[0..this.back] this.theArray[0..this.back-1]
      Unmodified variables: this this.theArray this.theArray.getClass().getName() this.back size(this.theArray[])
modifies this.theArray[*], this.currentSize, this.front, this.theArray[this.currentSize], this.theArray[this.currentSize-1], this.theArray[this.currentSize..], this.theArray[this.currentSize+1..], this.theArray[0..this.currentSize], this.theArray[0..this.currentSize-1], this.theArray[this.front], this.theArray[this.front-1], this.theArray[this.front..], this.theArray[this.front+1..], this.theArray[0..this.front], this.theArray[0..this.front-1], this.theArray[this.back], this.theArray[this.back-1], this.theArray[this.back..], this.theArray[this.back+1..], this.theArray[0..this.back], this.theArray[0..this.back-1]
===========================================================================
DataStructures.QueueAr.dequeue():::EXIT
    Variables: this this.theArray this.theArray.getClass().getName() this.theArray[] this.theArray[].getClass().getName() this.currentSize this.front this.back return return.getClass().getName() orig(this) orig(this.theArray) orig(this.theArray.getClass().getName()) orig(this.theArray[]) orig(this.theArray[].getClass().getName()) orig(this.currentSize) orig(this.front) orig(this.back) size(this.theArray[]) size(this.theArray[])-1 orig(size(this.theArray[])) orig(size(this.theArray[]))-1 this.theArray[this.currentSize] this.theArray[this.currentSize-1] this.theArray[this.currentSize..] this.theArray[this.currentSize+1..] this.theArray[0..this.currentSize] this.theArray[0..this.currentSize-1] this.theArray[this.front] this.theArray[this.front-1] this.theArray[this.front..] this.theArray[this.front+1..] this.theArray[0..this.front] this.theArray[0..this.front-1] this.theArray[this.back] this.theArray[this.back-1] this.theArray[this.back..] this.theArray[this.back+1..] this.theArray[0..this.back] this.theArray[0..this.back-1] this.theArray[orig(this.currentSize)] this.theArray[orig(this.currentSize)-1] this.theArray[orig(this.currentSize)..] this.theArray[orig(this.currentSize)+1..] this.theArray[0..orig(this.currentSize)] this.theArray[0..orig(this.currentSize)-1] this.theArray[orig(this.front)] this.theArray[orig(this.front)-1] this.theArray[orig(this.front)..] this.theArray[orig(this.front)+1..] this.theArray[0..orig(this.front)] this.theArray[0..orig(this.front)-1] this.theArray[orig(this.back)] this.theArray[orig(this.back)-1] this.theArray[orig(this.back)..] this.theArray[orig(this.back)+1..] this.theArray[0..orig(this.back)] this.theArray[0..orig(this.back)-1] orig(this.theArray[post(this.currentSize)]) orig(this.theArray[post(this.currentSize)-1]) orig(this.theArray[post(this.currentSize)..]) orig(this.theArray[post(this.currentSize)+1..]) orig(this.theArray[0..post(this.currentSize)]) orig(this.theArray[0..post(this.currentSize)-1]) orig(this.theArray[post(this.front)]) orig(this.theArray[post(this.front)-1]) orig(this.theArray[post(this.front)..]) orig(this.theArray[post(this.front)+1..]) orig(this.theArray[0..post(this.front)]) orig(this.theArray[0..post(this.front)-1]) orig(this.theArray[post(this.back)]) orig(this.theArray[post(this.back)-1]) orig(this.theArray[post(this.back)..]) orig(this.theArray[post(this.back)+1..]) orig(this.theArray[0..post(this.back)]) orig(this.theArray[0..post(this.back)-1]) orig(this.theArray[this.currentSize]) orig(this.theArray[this.currentSize-1]) orig(this.theArray[this.currentSize..]) orig(this.theArray[this.currentSize+1..]) orig(this.theArray[0..this.currentSize]) orig(this.theArray[0..this.currentSize-1]) orig(this.theArray[this.front]) orig(this.theArray[this.front-1]) orig(this.theArray[this.front..]) orig(this.theArray[this.front+1..]) orig(this.theArray[0..this.front]) orig(this.theArray[0..this.front-1]) orig(this.theArray[this.back]) orig(this.theArray[this.back-1]) orig(this.theArray[this.back..]) orig(this.theArray[this.back+1..]) orig(this.theArray[0..this.back]) orig(this.theArray[0..this.back-1])
      Modified variables: this.theArray[] this.theArray[].getClass().getName() this.currentSize this.front this.theArray[this.currentSize] this.theArray[this.currentSize-1] this.theArray[this.currentSize..] this.theArray[this.currentSize+1..] this.theArray[0..this.currentSize] this.theArray[0..this.currentSize-1] this.theArray[this.front] this.theArray[this.front-1] this.theArray[this.front..] this.theArray[this.front+1..] this.theArray[0..this.front] this.theArray[0..this.front-1] this.theArray[this.back] this.theArray[this.back-1] this.theArray[this.back..] this.theArray[this.back+1..] this.theArray[0..this.back] this.theArray[0..this.back-1]
      Unmodified variables: this this.theArray this.theArray.getClass().getName() this.back size(this.theArray[])
modifies this.theArray[*], this.currentSize, this.front, this.theArray[this.currentSize], this.theArray[this.currentSize-1], this.theArray[this.currentSize..], this.theArray[this.currentSize+1..], this.theArray[0..this.currentSize], this.theArray[0..this.currentSize-1], this.theArray[this.front], this.theArray[this.front-1], this.theArray[this.front..], this.theArray[this.front+1..], this.theArray[0..this.front], this.theArray[0..this.front-1], this.theArray[this.back], this.theArray[this.back-1], this.theArray[this.back..], this.theArray[this.back+1..], this.theArray[0..this.back], this.theArray[0..this.back-1]
this.theArray[this.currentSize] == this.theArray[\old(this.currentSize)-1]
warning: method daikon.inv.binary.twoSequence.SeqSeqIntEqual.format(OutputFormat:ESC/Java) needs to be implemented: this.theArray[orig(this.front)+1..] == orig(this.theArray[this.front+1..])
warning: method daikon.inv.binary.twoSequence.SeqSeqIntEqual.format(OutputFormat:ESC/Java) needs to be implemented: this.theArray[0..orig(this.front)-1] == orig(this.theArray[0..this.front-1])
\old(this.theArray[\new(this.currentSize)]) == \old(this.theArray[this.currentSize-1])
\result != null
warning: method daikon.inv.unary.string.PrintableString.format(OutputFormat:ESC/Java) needs to be implemented: return.getClass().getName() is printable
this.theArray[\old(this.front)] == null
\typeof(this.theArray) != \typeof(\result)
this.currentSize - \old(this.currentSize) + 1 == 0
(this.theArray.length-1 == 0) ==> (this.currentSize == 0)
this.currentSize <= this.theArray.length-1
!(\forall int i; (0 <= i && i <= \old(this.theArray.length-1)) ==> (\old(\typeof(this.theArray[i])) != \typeof(\result)))
\old(this.currentSize) <= this.theArray.length
(this.theArray.length-1 == 0) ==> (\old(this.front) == 0)
\old(this.front) <= this.theArray.length-1
warning: method daikon.inv.binary.twoSequence.SubSet.format_esc() needs to be implemented: this.theArray[this.currentSize+1..] is a subset of orig(this.theArray[post(this.currentSize)..])
===========================================================================
DataStructures.QueueAr.dequeueAll():::ENTER
    Variables: this this.theArray this.theArray.getClass().getName() this.theArray[] this.theArray[].getClass().getName() this.currentSize this.front this.back size(this.theArray[]) size(this.theArray[])-1 this.theArray[this.currentSize] this.theArray[this.currentSize-1] this.theArray[this.currentSize..] this.theArray[this.currentSize+1..] this.theArray[0..this.currentSize] this.theArray[0..this.currentSize-1] this.theArray[this.front] this.theArray[this.front-1] this.theArray[this.front..] this.theArray[this.front+1..] this.theArray[0..this.front] this.theArray[0..this.front-1] this.theArray[this.back] this.theArray[this.back-1] this.theArray[this.back..] this.theArray[this.back+1..] this.theArray[0..this.back] this.theArray[0..this.back-1]
this.currentSize == this.theArray.length
this.back == this.theArray.length-1
this.theArray[this.currentSize-1] == this.theArray[this.back]
this.front == 0
(\forall int i; (this.currentSize <= i && i <= this.theArray.length-1) ==> (this.theArray[i] != null))
(\forall int i; (0 <= i && i <= this.front) ==> (this.theArray[i] == this.theArray[this.front]))
(\forall int i; (this.back <= i && i <= this.theArray.length-1) ==> (this.theArray[i] == this.theArray[this.back]))
===========================================================================
DataStructures.QueueAr.dequeueAll():::EXIT
    Variables: this this.theArray this.theArray.getClass().getName() this.theArray[] this.theArray[].getClass().getName() this.currentSize this.front this.back orig(this) orig(this.theArray) orig(this.theArray.getClass().getName()) orig(this.theArray[]) orig(this.theArray[].getClass().getName()) orig(this.currentSize) orig(this.front) orig(this.back) size(this.theArray[]) size(this.theArray[])-1 orig(size(this.theArray[])) orig(size(this.theArray[]))-1 this.theArray[this.currentSize] this.theArray[this.currentSize-1] this.theArray[this.currentSize..] this.theArray[this.currentSize+1..] this.theArray[0..this.currentSize] this.theArray[0..this.currentSize-1] this.theArray[this.front] this.theArray[this.front-1] this.theArray[this.front..] this.theArray[this.front+1..] this.theArray[0..this.front] this.theArray[0..this.front-1] this.theArray[this.back] this.theArray[this.back-1] this.theArray[this.back..] this.theArray[this.back+1..] this.theArray[0..this.back] this.theArray[0..this.back-1] this.theArray[orig(this.currentSize)] this.theArray[orig(this.currentSize)-1] this.theArray[orig(this.currentSize)..] this.theArray[orig(this.currentSize)+1..] this.theArray[0..orig(this.currentSize)] this.theArray[0..orig(this.currentSize)-1] this.theArray[orig(this.front)] this.theArray[orig(this.front)-1] this.theArray[orig(this.front)..] this.theArray[orig(this.front)+1..] this.theArray[0..orig(this.front)] this.theArray[0..orig(this.front)-1] this.theArray[orig(this.back)] this.theArray[orig(this.back)-1] this.theArray[orig(this.back)..] this.theArray[orig(this.back)+1..] this.theArray[0..orig(this.back)] this.theArray[0..orig(this.back)-1] orig(this.theArray[post(this.currentSize)]) orig(this.theArray[post(this.currentSize)-1]) orig(this.theArray[post(this.currentSize)..]) orig(this.theArray[post(this.currentSize)+1..]) orig(this.theArray[0..post(this.currentSize)]) orig(this.theArray[0..post(this.currentSize)-1]) orig(this.theArray[post(this.front)]) orig(this.theArray[post(this.front)-1]) orig(this.theArray[post(this.front)..]) orig(this.theArray[post(this.front)+1..]) orig(this.theArray[0..post(this.front)]) orig(this.theArray[0..post(this.front)-1]) orig(this.theArray[post(this.back)]) orig(this.theArray[post(this.back)-1]) orig(this.theArray[post(this.back)..]) orig(this.theArray[post(this.back)+1..]) orig(this.theArray[0..post(this.back)]) orig(this.theArray[0..post(this.back)-1]) orig(this.theArray[this.currentSize]) orig(this.theArray[this.currentSize-1]) orig(this.theArray[this.currentSize..]) orig(this.theArray[this.currentSize+1..]) orig(this.theArray[0..this.currentSize]) orig(this.theArray[0..this.currentSize-1]) orig(this.theArray[this.front]) orig(this.theArray[this.front-1]) orig(this.theArray[this.front..]) orig(this.theArray[this.front+1..]) orig(this.theArray[0..this.front]) orig(this.theArray[0..this.front-1]) orig(this.theArray[this.back]) orig(this.theArray[this.back-1]) orig(this.theArray[this.back..]) orig(this.theArray[this.back+1..]) orig(this.theArray[0..this.back]) orig(this.theArray[0..this.back-1])
      Modified variables: this.theArray[] this.theArray[].getClass().getName() this.currentSize this.theArray[this.currentSize] this.theArray[this.currentSize-1] this.theArray[this.currentSize+1..] this.theArray[0..this.currentSize] this.theArray[0..this.currentSize-1] this.theArray[this.front] this.theArray[this.front-1] this.theArray[this.front..] this.theArray[this.front+1..] this.theArray[0..this.front] this.theArray[this.back] this.theArray[this.back-1] this.theArray[this.back..] this.theArray[0..this.back] this.theArray[0..this.back-1]
      Unmodified variables: this this.theArray this.theArray.getClass().getName() this.front this.back size(this.theArray[]) this.theArray[this.currentSize..] this.theArray[0..this.front-1] this.theArray[this.back+1..]
modifies this.theArray[*], this.currentSize, this.theArray[this.currentSize], this.theArray[this.currentSize-1], this.theArray[this.currentSize+1..], this.theArray[0..this.currentSize], this.theArray[0..this.currentSize-1], this.theArray[this.front], this.theArray[this.front-1], this.theArray[this.front..], this.theArray[this.front+1..], this.theArray[0..this.front], this.theArray[this.back], this.theArray[this.back-1], this.theArray[this.back..], this.theArray[0..this.back], this.theArray[0..this.back-1]
this.currentSize == this.front
this.currentSize == \old(this.front)
this.back == this.theArray.length-1
this.back == \old(this.theArray.length)-1
\old(this.currentSize) == this.theArray.length
this.theArray[this.currentSize] == this.theArray[this.back]
this.theArray[this.currentSize] == this.theArray[\old(this.currentSize)-1]
this.theArray[this.currentSize] == this.theArray[\old(this.back)]
(\forall int i; (0 <= i && i <= this.theArray.length-1) ==> (this.theArray[i] == null))
(\forall int i; (0 <= i && i <= this.theArray.length-1) ==> (\typeof(this.theArray[i]) == \typeof(null)))
this.currentSize == 0
(\forall int i; (0 <= i && i <= this.currentSize) ==> (this.theArray[i] == null))
(\forall int i; (0 <= i && i <= this.currentSize-1) ==> (this.theArray[i] != null))
(\forall int i; (0 <= i && i <= this.theArray.length-1) ==> (this.theArray[i] == this.theArray[this.currentSize]))
===========================================================================
DataStructures.QueueAr.enqueue(java.lang.Object):::ENTER
    Variables: this this.theArray this.theArray.getClass().getName() this.theArray[] this.theArray[].getClass().getName() this.currentSize this.front this.back x x.getClass().getName() size(this.theArray[]) size(this.theArray[])-1 this.theArray[this.currentSize] this.theArray[this.currentSize-1] this.theArray[this.currentSize..] this.theArray[this.currentSize+1..] this.theArray[0..this.currentSize] this.theArray[0..this.currentSize-1] this.theArray[this.front] this.theArray[this.front-1] this.theArray[this.front..] this.theArray[this.front+1..] this.theArray[0..this.front] this.theArray[0..this.front-1] this.theArray[this.back] this.theArray[this.back-1] this.theArray[this.back..] this.theArray[this.back+1..] this.theArray[0..this.back] this.theArray[0..this.back-1]
x != null
warning: method daikon.inv.unary.string.PrintableString.format(OutputFormat:ESC/Java) needs to be implemented: x.getClass().getName() is printable
\typeof(this.theArray) != \typeof(x)
(this.currentSize == 0) ==> (this.front == 0)
(this.theArray.length-1 == 0) ==> (this.currentSize == 0)
this.currentSize <= this.theArray.length-1
===========================================================================
DataStructures.QueueAr.enqueue(java.lang.Object):::EXIT
    Variables: this this.theArray this.theArray.getClass().getName() this.theArray[] this.theArray[].getClass().getName() this.currentSize this.front this.back x x.getClass().getName() orig(this) orig(this.theArray) orig(this.theArray.getClass().getName()) orig(this.theArray[]) orig(this.theArray[].getClass().getName()) orig(this.currentSize) orig(this.front) orig(this.back) orig(x) orig(x.getClass().getName()) size(this.theArray[]) size(this.theArray[])-1 orig(size(this.theArray[])) orig(size(this.theArray[]))-1 this.theArray[this.currentSize] this.theArray[this.currentSize-1] this.theArray[this.currentSize..] this.theArray[this.currentSize+1..] this.theArray[0..this.currentSize] this.theArray[0..this.currentSize-1] this.theArray[this.front] this.theArray[this.front-1] this.theArray[this.front..] this.theArray[this.front+1..] this.theArray[0..this.front] this.theArray[0..this.front-1] this.theArray[this.back] this.theArray[this.back-1] this.theArray[this.back..] this.theArray[this.back+1..] this.theArray[0..this.back] this.theArray[0..this.back-1] this.theArray[orig(this.currentSize)] this.theArray[orig(this.currentSize)-1] this.theArray[orig(this.currentSize)..] this.theArray[orig(this.currentSize)+1..] this.theArray[0..orig(this.currentSize)] this.theArray[0..orig(this.currentSize)-1] this.theArray[orig(this.front)] this.theArray[orig(this.front)-1] this.theArray[orig(this.front)..] this.theArray[orig(this.front)+1..] this.theArray[0..orig(this.front)] this.theArray[0..orig(this.front)-1] this.theArray[orig(this.back)] this.theArray[orig(this.back)-1] this.theArray[orig(this.back)..] this.theArray[orig(this.back)+1..] this.theArray[0..orig(this.back)] this.theArray[0..orig(this.back)-1] orig(this.theArray[post(this.currentSize)]) orig(this.theArray[post(this.currentSize)-1]) orig(this.theArray[post(this.currentSize)..]) orig(this.theArray[post(this.currentSize)+1..]) orig(this.theArray[0..post(this.currentSize)]) orig(this.theArray[0..post(this.currentSize)-1]) orig(this.theArray[post(this.front)]) orig(this.theArray[post(this.front)-1]) orig(this.theArray[post(this.front)..]) orig(this.theArray[post(this.front)+1..]) orig(this.theArray[0..post(this.front)]) orig(this.theArray[0..post(this.front)-1]) orig(this.theArray[post(this.back)]) orig(this.theArray[post(this.back)-1]) orig(this.theArray[post(this.back)..]) orig(this.theArray[post(this.back)+1..]) orig(this.theArray[0..post(this.back)]) orig(this.theArray[0..post(this.back)-1]) orig(this.theArray[this.currentSize]) orig(this.theArray[this.currentSize-1]) orig(this.theArray[this.currentSize..]) orig(this.theArray[this.currentSize+1..]) orig(this.theArray[0..this.currentSize]) orig(this.theArray[0..this.currentSize-1]) orig(this.theArray[this.front]) orig(this.theArray[this.front-1]) orig(this.theArray[this.front..]) orig(this.theArray[this.front+1..]) orig(this.theArray[0..this.front]) orig(this.theArray[0..this.front-1]) orig(this.theArray[this.back]) orig(this.theArray[this.back-1]) orig(this.theArray[this.back..]) orig(this.theArray[this.back+1..]) orig(this.theArray[0..this.back]) orig(this.theArray[0..this.back-1])
      Modified variables: this.theArray[] this.theArray[].getClass().getName() this.currentSize this.back this.theArray[this.currentSize] this.theArray[this.currentSize-1] this.theArray[this.currentSize..] this.theArray[this.currentSize+1..] this.theArray[0..this.currentSize] this.theArray[0..this.currentSize-1] this.theArray[this.front] this.theArray[this.front-1] this.theArray[this.front..] this.theArray[this.front+1..] this.theArray[0..this.front] this.theArray[0..this.front-1] this.theArray[this.back] this.theArray[this.back-1] this.theArray[this.back..] this.theArray[this.back+1..] this.theArray[0..this.back] this.theArray[0..this.back-1]
      Unmodified variables: this this.theArray this.theArray.getClass().getName() this.front x x.getClass().getName() size(this.theArray[])
modifies this.theArray[*], this.currentSize, this.back, this.theArray[this.currentSize], this.theArray[this.currentSize-1], this.theArray[this.currentSize..], this.theArray[this.currentSize+1..], this.theArray[0..this.currentSize], this.theArray[0..this.currentSize-1], this.theArray[this.front], this.theArray[this.front-1], this.theArray[this.front..], this.theArray[this.front+1..], this.theArray[0..this.front], this.theArray[0..this.front-1], this.theArray[this.back], this.theArray[this.back-1], this.theArray[this.back..], this.theArray[this.back+1..], this.theArray[0..this.back], this.theArray[0..this.back-1]
\old(x) == this.theArray[this.back]
this.theArray[this.currentSize-1] == this.theArray[\old(this.currentSize)]
warning: method daikon.inv.binary.twoSequence.SeqSeqIntEqual.format(OutputFormat:ESC/Java) needs to be implemented: this.theArray[this.back+1..] == orig(this.theArray[post(this.back)+1..])
warning: method daikon.inv.binary.twoSequence.SeqSeqIntEqual.format(OutputFormat:ESC/Java) needs to be implemented: this.theArray[0..this.back-1] == orig(this.theArray[0..post(this.back)-1])
\old(this.theArray[\new(this.currentSize)-1]) == \old(this.theArray[this.currentSize])
this.currentSize >= 1
this.theArray[this.front] != null
\old(this.theArray[\new(this.back)]) == null
\typeof(this.theArray) != \old(\typeof(x))
!(\forall int i; (0 <= i && i <= this.theArray.length-1) ==> (\typeof(this.theArray[i]) != \old(\typeof(x))))
(this.front >> this.currentSize == 0)
(this.back >> this.currentSize == 0)
this.currentSize - \old(this.currentSize) - 1 == 0
(\old(this.currentSize) == 0) ==> (this.front == 0)
(\old(this.currentSize) == 0) ==> (this.back == 0)
(this.theArray.length-1 == 0) ==> (\old(this.currentSize) == 0)
\old(this.currentSize) <= this.theArray.length-1
(this.theArray.length-1 == 0) ==> (\old(this.back) == 0)
\old(this.back) <= this.theArray.length-1
===========================================================================
DataStructures.QueueAr.getFront():::ENTER
    Variables: this this.theArray this.theArray.getClass().getName() this.theArray[] this.theArray[].getClass().getName() this.currentSize this.front this.back size(this.theArray[]) size(this.theArray[])-1 this.theArray[this.currentSize] this.theArray[this.currentSize-1] this.theArray[this.currentSize..] this.theArray[this.currentSize+1..] this.theArray[0..this.currentSize] this.theArray[0..this.currentSize-1] this.theArray[this.front] this.theArray[this.front-1] this.theArray[this.front..] this.theArray[this.front+1..] this.theArray[0..this.front] this.theArray[0..this.front-1] this.theArray[this.back] this.theArray[this.back-1] this.theArray[this.back..] this.theArray[this.back+1..] this.theArray[0..this.back] this.theArray[0..this.back-1]
===========================================================================
DataStructures.QueueAr.getFront():::EXIT75
    Variables: this this.theArray this.theArray.getClass().getName() this.theArray[] this.theArray[].getClass().getName() this.currentSize this.front this.back return return.getClass().getName() orig(this) orig(this.theArray) orig(this.theArray.getClass().getName()) orig(this.theArray[]) orig(this.theArray[].getClass().getName()) orig(this.currentSize) orig(this.front) orig(this.back) size(this.theArray[]) size(this.theArray[])-1 orig(size(this.theArray[])) orig(size(this.theArray[]))-1 this.theArray[this.currentSize] this.theArray[this.currentSize-1] this.theArray[this.currentSize..] this.theArray[this.currentSize+1..] this.theArray[0..this.currentSize] this.theArray[0..this.currentSize-1] this.theArray[this.front] this.theArray[this.front-1] this.theArray[this.front..] this.theArray[this.front+1..] this.theArray[0..this.front] this.theArray[0..this.front-1] this.theArray[this.back] this.theArray[this.back-1] this.theArray[this.back..] this.theArray[this.back+1..] this.theArray[0..this.back] this.theArray[0..this.back-1] this.theArray[orig(this.currentSize)] this.theArray[orig(this.currentSize)-1] this.theArray[orig(this.currentSize)..] this.theArray[orig(this.currentSize)+1..] this.theArray[0..orig(this.currentSize)] this.theArray[0..orig(this.currentSize)-1] this.theArray[orig(this.front)] this.theArray[orig(this.front)-1] this.theArray[orig(this.front)..] this.theArray[orig(this.front)+1..] this.theArray[0..orig(this.front)] this.theArray[0..orig(this.front)-1] this.theArray[orig(this.back)] this.theArray[orig(this.back)-1] this.theArray[orig(this.back)..] this.theArray[orig(this.back)+1..] this.theArray[0..orig(this.back)] this.theArray[0..orig(this.back)-1] orig(this.theArray[post(this.currentSize)]) orig(this.theArray[post(this.currentSize)-1]) orig(this.theArray[post(this.currentSize)..]) orig(this.theArray[post(this.currentSize)+1..]) orig(this.theArray[0..post(this.currentSize)]) orig(this.theArray[0..post(this.currentSize)-1]) orig(this.theArray[post(this.front)]) orig(this.theArray[post(this.front)-1]) orig(this.theArray[post(this.front)..]) orig(this.theArray[post(this.front)+1..]) orig(this.theArray[0..post(this.front)]) orig(this.theArray[0..post(this.front)-1]) orig(this.theArray[post(this.back)]) orig(this.theArray[post(this.back)-1]) orig(this.theArray[post(this.back)..]) orig(this.theArray[post(this.back)+1..]) orig(this.theArray[0..post(this.back)]) orig(this.theArray[0..post(this.back)-1]) orig(this.theArray[this.currentSize]) orig(this.theArray[this.currentSize-1]) orig(this.theArray[this.currentSize..]) orig(this.theArray[this.currentSize+1..]) orig(this.theArray[0..this.currentSize]) orig(this.theArray[0..this.currentSize-1]) orig(this.theArray[this.front]) orig(this.theArray[this.front-1]) orig(this.theArray[this.front..]) orig(this.theArray[this.front+1..]) orig(this.theArray[0..this.front]) orig(this.theArray[0..this.front-1]) orig(this.theArray[this.back]) orig(this.theArray[this.back-1]) orig(this.theArray[this.back..]) orig(this.theArray[this.back+1..]) orig(this.theArray[0..this.back]) orig(this.theArray[0..this.back-1])
      Modified variables: this.theArray[this.currentSize-1] this.theArray[this.front-1] this.theArray[this.back-1]
      Unmodified variables: this this.theArray this.theArray.getClass().getName() this.theArray[] this.theArray[].getClass().getName() this.currentSize this.front this.back size(this.theArray[]) this.theArray[this.currentSize] this.theArray[this.currentSize..] this.theArray[this.currentSize+1..] this.theArray[0..this.currentSize] this.theArray[0..this.currentSize-1] this.theArray[this.front] this.theArray[this.front..] this.theArray[this.front+1..] this.theArray[0..this.front] this.theArray[0..this.front-1] this.theArray[this.back] this.theArray[this.back..] this.theArray[this.back+1..] this.theArray[0..this.back] this.theArray[0..this.back-1]
modifies this.theArray[this.currentSize-1], this.theArray[this.front-1], this.theArray[this.back-1]
\result == this.theArray[this.currentSize]
\result == this.theArray[this.back]
\result == this.theArray[\old(this.currentSize)]
\result == this.theArray[\old(this.back)]
\result == \old(this.theArray[\new(this.currentSize)])
\result == \old(this.theArray[\new(this.back)])
\result == \old(this.theArray[this.currentSize])
\result == \old(this.theArray[this.back])
(\forall int i; (0 <= i && i <= this.theArray.length-1) ==> (this.theArray[i] == null))
(\forall int i; (0 <= i && i <= this.theArray.length-1) ==> (\typeof(this.theArray[i]) == \typeof(null)))
this.currentSize == 0
\result == null
(\forall int i; (0 <= i && i <= this.currentSize) ==> (this.theArray[i] == null))
(\forall int i; (0 <= i && i <= this.currentSize-1) ==> (this.theArray[i] != null))
(\forall int i; (0 <= i && i <= this.theArray.length-1) ==> (this.theArray[i] == \result))
this.currentSize <= this.front
this.currentSize <= this.back
this.currentSize <= this.theArray.length-1
(this.back == 0) ==> (this.front == 0)
(this.back == 0) ==> (this.theArray.length-1 == 0)
===========================================================================
DataStructures.QueueAr.getFront():::EXIT76
    Variables: this this.theArray this.theArray.getClass().getName() this.theArray[] this.theArray[].getClass().getName() this.currentSize this.front this.back return return.getClass().getName() orig(this) orig(this.theArray) orig(this.theArray.getClass().getName()) orig(this.theArray[]) orig(this.theArray[].getClass().getName()) orig(this.currentSize) orig(this.front) orig(this.back) size(this.theArray[]) size(this.theArray[])-1 orig(size(this.theArray[])) orig(size(this.theArray[]))-1 this.theArray[this.currentSize] this.theArray[this.currentSize-1] this.theArray[this.currentSize..] this.theArray[this.currentSize+1..] this.theArray[0..this.currentSize] this.theArray[0..this.currentSize-1] this.theArray[this.front] this.theArray[this.front-1] this.theArray[this.front..] this.theArray[this.front+1..] this.theArray[0..this.front] this.theArray[0..this.front-1] this.theArray[this.back] this.theArray[this.back-1] this.theArray[this.back..] this.theArray[this.back+1..] this.theArray[0..this.back] this.theArray[0..this.back-1] this.theArray[orig(this.currentSize)] this.theArray[orig(this.currentSize)-1] this.theArray[orig(this.currentSize)..] this.theArray[orig(this.currentSize)+1..] this.theArray[0..orig(this.currentSize)] this.theArray[0..orig(this.currentSize)-1] this.theArray[orig(this.front)] this.theArray[orig(this.front)-1] this.theArray[orig(this.front)..] this.theArray[orig(this.front)+1..] this.theArray[0..orig(this.front)] this.theArray[0..orig(this.front)-1] this.theArray[orig(this.back)] this.theArray[orig(this.back)-1] this.theArray[orig(this.back)..] this.theArray[orig(this.back)+1..] this.theArray[0..orig(this.back)] this.theArray[0..orig(this.back)-1] orig(this.theArray[post(this.currentSize)]) orig(this.theArray[post(this.currentSize)-1]) orig(this.theArray[post(this.currentSize)..]) orig(this.theArray[post(this.currentSize)+1..]) orig(this.theArray[0..post(this.currentSize)]) orig(this.theArray[0..post(this.currentSize)-1]) orig(this.theArray[post(this.front)]) orig(this.theArray[post(this.front)-1]) orig(this.theArray[post(this.front)..]) orig(this.theArray[post(this.front)+1..]) orig(this.theArray[0..post(this.front)]) orig(this.theArray[0..post(this.front)-1]) orig(this.theArray[post(this.back)]) orig(this.theArray[post(this.back)-1]) orig(this.theArray[post(this.back)..]) orig(this.theArray[post(this.back)+1..]) orig(this.theArray[0..post(this.back)]) orig(this.theArray[0..post(this.back)-1]) orig(this.theArray[this.currentSize]) orig(this.theArray[this.currentSize-1]) orig(this.theArray[this.currentSize..]) orig(this.theArray[this.currentSize+1..]) orig(this.theArray[0..this.currentSize]) orig(this.theArray[0..this.currentSize-1]) orig(this.theArray[this.front]) orig(this.theArray[this.front-1]) orig(this.theArray[this.front..]) orig(this.theArray[this.front+1..]) orig(this.theArray[0..this.front]) orig(this.theArray[0..this.front-1]) orig(this.theArray[this.back]) orig(this.theArray[this.back-1]) orig(this.theArray[this.back..]) orig(this.theArray[this.back+1..]) orig(this.theArray[0..this.back]) orig(this.theArray[0..this.back-1])
      Modified variables: this.theArray[this.currentSize] this.theArray[this.currentSize+1..] this.theArray[0..this.currentSize] this.theArray[this.front-1] this.theArray[this.back-1]
      Unmodified variables: this this.theArray this.theArray.getClass().getName() this.theArray[] this.theArray[].getClass().getName() this.currentSize this.front this.back size(this.theArray[]) this.theArray[this.currentSize-1] this.theArray[this.currentSize..] this.theArray[0..this.currentSize-1] this.theArray[this.front] this.theArray[this.front..] this.theArray[this.front+1..] this.theArray[0..this.front] this.theArray[0..this.front-1] this.theArray[this.back] this.theArray[this.back..] this.theArray[this.back+1..] this.theArray[0..this.back] this.theArray[0..this.back-1]
modifies this.theArray[this.currentSize], this.theArray[this.currentSize+1..], this.theArray[0..this.currentSize], this.theArray[this.front-1], this.theArray[this.back-1]
this.currentSize >= 1
\result != null
warning: method daikon.inv.unary.string.PrintableString.format(OutputFormat:ESC/Java) needs to be implemented: return.getClass().getName() is printable
this.theArray[this.back] != null
\typeof(this.theArray) != \typeof(\result)
!(\forall int i; (0 <= i && i <= this.theArray.length-1) ==> (\typeof(this.theArray[i]) != \typeof(\result)))
===========================================================================
DataStructures.QueueAr.getFront():::EXIT
    Variables: this this.theArray this.theArray.getClass().getName() this.theArray[] this.theArray[].getClass().getName() this.currentSize this.front this.back return return.getClass().getName() orig(this) orig(this.theArray) orig(this.theArray.getClass().getName()) orig(this.theArray[]) orig(this.theArray[].getClass().getName()) orig(this.currentSize) orig(this.front) orig(this.back) size(this.theArray[]) size(this.theArray[])-1 orig(size(this.theArray[])) orig(size(this.theArray[]))-1 this.theArray[this.currentSize] this.theArray[this.currentSize-1] this.theArray[this.currentSize..] this.theArray[this.currentSize+1..] this.theArray[0..this.currentSize] this.theArray[0..this.currentSize-1] this.theArray[this.front] this.theArray[this.front-1] this.theArray[this.front..] this.theArray[this.front+1..] this.theArray[0..this.front] this.theArray[0..this.front-1] this.theArray[this.back] this.theArray[this.back-1] this.theArray[this.back..] this.theArray[this.back+1..] this.theArray[0..this.back] this.theArray[0..this.back-1] this.theArray[orig(this.currentSize)] this.theArray[orig(this.currentSize)-1] this.theArray[orig(this.currentSize)..] this.theArray[orig(this.currentSize)+1..] this.theArray[0..orig(this.currentSize)] this.theArray[0..orig(this.currentSize)-1] this.theArray[orig(this.front)] this.theArray[orig(this.front)-1] this.theArray[orig(this.front)..] this.theArray[orig(this.front)+1..] this.theArray[0..orig(this.front)] this.theArray[0..orig(this.front)-1] this.theArray[orig(this.back)] this.theArray[orig(this.back)-1] this.theArray[orig(this.back)..] this.theArray[orig(this.back)+1..] this.theArray[0..orig(this.back)] this.theArray[0..orig(this.back)-1] orig(this.theArray[post(this.currentSize)]) orig(this.theArray[post(this.currentSize)-1]) orig(this.theArray[post(this.currentSize)..]) orig(this.theArray[post(this.currentSize)+1..]) orig(this.theArray[0..post(this.currentSize)]) orig(this.theArray[0..post(this.currentSize)-1]) orig(this.theArray[post(this.front)]) orig(this.theArray[post(this.front)-1]) orig(this.theArray[post(this.front)..]) orig(this.theArray[post(this.front)+1..]) orig(this.theArray[0..post(this.front)]) orig(this.theArray[0..post(this.front)-1]) orig(this.theArray[post(this.back)]) orig(this.theArray[post(this.back)-1]) orig(this.theArray[post(this.back)..]) orig(this.theArray[post(this.back)+1..]) orig(this.theArray[0..post(this.back)]) orig(this.theArray[0..post(this.back)-1]) orig(this.theArray[this.currentSize]) orig(this.theArray[this.currentSize-1]) orig(this.theArray[this.currentSize..]) orig(this.theArray[this.currentSize+1..]) orig(this.theArray[0..this.currentSize]) orig(this.theArray[0..this.currentSize-1]) orig(this.theArray[this.front]) orig(this.theArray[this.front-1]) orig(this.theArray[this.front..]) orig(this.theArray[this.front+1..]) orig(this.theArray[0..this.front]) orig(this.theArray[0..this.front-1]) orig(this.theArray[this.back]) orig(this.theArray[this.back-1]) orig(this.theArray[this.back..]) orig(this.theArray[this.back+1..]) orig(this.theArray[0..this.back]) orig(this.theArray[0..this.back-1])
      Modified variables: this.theArray[this.currentSize] this.theArray[this.currentSize-1] this.theArray[this.currentSize+1..] this.theArray[0..this.currentSize] this.theArray[this.front-1] this.theArray[this.back-1]
      Unmodified variables: this this.theArray this.theArray.getClass().getName() this.theArray[] this.theArray[].getClass().getName() this.currentSize this.front this.back size(this.theArray[]) this.theArray[this.currentSize..] this.theArray[0..this.currentSize-1] this.theArray[this.front] this.theArray[this.front..] this.theArray[this.front+1..] this.theArray[0..this.front] this.theArray[0..this.front-1] this.theArray[this.back] this.theArray[this.back..] this.theArray[this.back+1..] this.theArray[0..this.back] this.theArray[0..this.back-1]
modifies this.theArray[this.currentSize], this.theArray[this.currentSize-1], this.theArray[this.currentSize+1..], this.theArray[0..this.currentSize], this.theArray[this.front-1], this.theArray[this.back-1]
\result == this.theArray[this.front]
\result == this.theArray[\old(this.front)]
\result == \old(this.theArray[\new(this.front)])
\result == \old(this.theArray[this.front])
(this.currentSize == 0)  ==  (\result == null)
(this.currentSize == 0)  ==  (this.theArray[this.back] == null)
(this.currentSize == 0)  ==>  ((this.back == 0) ==> (this.theArray.length-1 == 0))
(this.currentSize == 0)  ==>  ((this.back == 0) ==> (this.front == 0))
(this.currentSize == 0)  ==>  ((\forall int i; (0 <= i && i <= this.currentSize) ==> (\old(this.theArray[i]) == null)))
(this.currentSize == 0)  ==>  ((\forall int i; (0 <= i && i <= \old(this.currentSize)) ==> (\old(this.theArray[i]) == null)))
(this.currentSize == 0)  ==>  (\old(this.theArray[\new(this.currentSize)]) == null)
(this.currentSize == 0)  ==>  (\old(this.theArray[this.currentSize]) == null)
(this.currentSize == 0)  ==>  (\result == \old(this.theArray[\new(this.currentSize)]))
(this.currentSize == 0)  ==>  (\result == \old(this.theArray[this.currentSize]))
(this.currentSize == 0)  ==>  (\result == this.theArray[\old(this.currentSize)])
(this.currentSize == 0)  ==>  (\result == this.theArray[this.back])
(this.currentSize == 0)  ==>  (\result == this.theArray[this.currentSize])
(this.currentSize == 0)  ==>  (this.currentSize <= this.theArray.length-1)
(this.currentSize == 0)  ==>  (this.currentSize <= this.back)
(this.currentSize == 0)  ==>  (this.currentSize <= this.front)
(this.currentSize == 0)  ==>  (this.currentSize is a pointer)
(this.currentSize == 0)  ==>  ((\forall int i; (0 <= i && i <= \old(this.currentSize)) ==> (this.theArray[i] == null)))
(this.currentSize == 0)  ==>  ((\forall int i; (0 <= i && i <= this.currentSize-1) ==> (this.theArray[i] != null)))
(this.currentSize == 0)  ==>  ((\forall int i; (0 <= i && i <= this.currentSize) ==> (this.theArray[i] == null)))
(this.currentSize == 0)  ==>  ((\forall int i; (0 <= i && i <= this.theArray.length-1) ==> (this.theArray[i] == null)))
(this.currentSize == 0)  ==>  ((\forall int i; (0 <= i && i <= this.theArray.length-1) ==> (this.theArray[i] == \old(this.theArray[\new(this.currentSize)]))))
(this.currentSize == 0)  ==>  ((\forall int i; (0 <= i && i <= this.theArray.length-1) ==> (this.theArray[i] == \old(this.theArray[this.currentSize]))))
(this.currentSize == 0)  ==>  ((\forall int i; (0 <= i && i <= this.theArray.length-1) ==> (this.theArray[i] == \result)))
(this.currentSize == 0)  ==>  ((\forall int i; (0 <= i && i <= this.theArray.length-1) ==> (this.theArray[i] == this.theArray[\old(this.currentSize)])))
(this.currentSize == 0)  ==>  ((\forall int i; (0 <= i && i <= this.theArray.length-1) ==> (this.theArray[i] == this.theArray[this.back])))
(this.currentSize == 0)  ==>  ((\forall int i; (0 <= i && i <= this.theArray.length-1) ==> (this.theArray[i] == this.theArray[this.currentSize])))
(this.currentSize == 0)  ==>  ((\forall int i; (0 <= i && i <= this.theArray.length-1) ==> (\typeof(this.theArray[i]) == \typeof(null))))
(this.currentSize == 0)  ==>  (this.theArray[\old(this.currentSize)] == null)
(this.currentSize == 0)  ==>  ((\forall int i; (this.currentSize <= i && i <= this.theArray.length-1) ==> (this.theArray[i] == null)))
(this.currentSize == 0)  ==>  ((\forall int i; (this.currentSize <= i && i <= this.theArray.length-1) ==> (this.theArray[i] == \old(this.theArray[\new(this.currentSize)]))))
(this.currentSize == 0)  ==>  ((\forall int i; (this.currentSize <= i && i <= this.theArray.length-1) ==> (this.theArray[i] == \old(this.theArray[this.currentSize]))))
(this.currentSize == 0)  ==>  ((\forall int i; (this.currentSize <= i && i <= this.theArray.length-1) ==> (this.theArray[i] == \result)))
(this.currentSize == 0)  ==>  ((\forall int i; (this.currentSize <= i && i <= this.theArray.length-1) ==> (this.theArray[i] == this.theArray[\old(this.currentSize)])))
(this.currentSize == 0)  ==>  ((\forall int i; (this.currentSize <= i && i <= this.theArray.length-1) ==> (this.theArray[i] == this.theArray[this.back])))
(this.currentSize == 0)  ==>  ((\forall int i; (this.currentSize <= i && i <= this.theArray.length-1) ==> (this.theArray[i] == this.theArray[this.currentSize])))
(this.currentSize == 0)  ==>  (this.theArray[this.currentSize] == null)
(\result != null)  ==>  (warning: method daikon.inv.unary.string.PrintableString.format(OutputFormat:ESC/Java) needs to be implemented: return.getClass().getName() is printable)
(\result != null)  ==>  (\typeof(this.theArray) != \typeof(\result))
(\result != null)  ==>  (!(\forall int i; (0 <= i && i <= this.theArray.length-1) ==> (\typeof(this.theArray[i]) != \typeof(\result))))
===========================================================================
DataStructures.QueueAr.isEmpty():::ENTER
    Variables: this this.theArray this.theArray.getClass().getName() this.theArray[] this.theArray[].getClass().getName() this.currentSize this.front this.back size(this.theArray[]) size(this.theArray[])-1 this.theArray[this.currentSize] this.theArray[this.currentSize-1] this.theArray[this.currentSize..] this.theArray[this.currentSize+1..] this.theArray[0..this.currentSize] this.theArray[0..this.currentSize-1] this.theArray[this.front] this.theArray[this.front-1] this.theArray[this.front..] this.theArray[this.front+1..] this.theArray[0..this.front] this.theArray[0..this.front-1] this.theArray[this.back] this.theArray[this.back-1] this.theArray[this.back..] this.theArray[this.back+1..] this.theArray[0..this.back] this.theArray[0..this.back-1]
===========================================================================
DataStructures.QueueAr.isEmpty():::EXIT
    Variables: this this.theArray this.theArray.getClass().getName() this.theArray[] this.theArray[].getClass().getName() this.currentSize this.front this.back return orig(this) orig(this.theArray) orig(this.theArray.getClass().getName()) orig(this.theArray[]) orig(this.theArray[].getClass().getName()) orig(this.currentSize) orig(this.front) orig(this.back) size(this.theArray[]) size(this.theArray[])-1 orig(size(this.theArray[])) orig(size(this.theArray[]))-1 this.theArray[this.currentSize] this.theArray[this.currentSize-1] this.theArray[this.currentSize..] this.theArray[this.currentSize+1..] this.theArray[0..this.currentSize] this.theArray[0..this.currentSize-1] this.theArray[this.front] this.theArray[this.front-1] this.theArray[this.front..] this.theArray[this.front+1..] this.theArray[0..this.front] this.theArray[0..this.front-1] this.theArray[this.back] this.theArray[this.back-1] this.theArray[this.back..] this.theArray[this.back+1..] this.theArray[0..this.back] this.theArray[0..this.back-1] this.theArray[orig(this.currentSize)] this.theArray[orig(this.currentSize)-1] this.theArray[orig(this.currentSize)..] this.theArray[orig(this.currentSize)+1..] this.theArray[0..orig(this.currentSize)] this.theArray[0..orig(this.currentSize)-1] this.theArray[orig(this.front)] this.theArray[orig(this.front)-1] this.theArray[orig(this.front)..] this.theArray[orig(this.front)+1..] this.theArray[0..orig(this.front)] this.theArray[0..orig(this.front)-1] this.theArray[orig(this.back)] this.theArray[orig(this.back)-1] this.theArray[orig(this.back)..] this.theArray[orig(this.back)+1..] this.theArray[0..orig(this.back)] this.theArray[0..orig(this.back)-1] orig(this.theArray[post(this.currentSize)]) orig(this.theArray[post(this.currentSize)-1]) orig(this.theArray[post(this.currentSize)..]) orig(this.theArray[post(this.currentSize)+1..]) orig(this.theArray[0..post(this.currentSize)]) orig(this.theArray[0..post(this.currentSize)-1]) orig(this.theArray[post(this.front)]) orig(this.theArray[post(this.front)-1]) orig(this.theArray[post(this.front)..]) orig(this.theArray[post(this.front)+1..]) orig(this.theArray[0..post(this.front)]) orig(this.theArray[0..post(this.front)-1]) orig(this.theArray[post(this.back)]) orig(this.theArray[post(this.back)-1]) orig(this.theArray[post(this.back)..]) orig(this.theArray[post(this.back)+1..]) orig(this.theArray[0..post(this.back)]) orig(this.theArray[0..post(this.back)-1]) orig(this.theArray[this.currentSize]) orig(this.theArray[this.currentSize-1]) orig(this.theArray[this.currentSize..]) orig(this.theArray[this.currentSize+1..]) orig(this.theArray[0..this.currentSize]) orig(this.theArray[0..this.currentSize-1]) orig(this.theArray[this.front]) orig(this.theArray[this.front-1]) orig(this.theArray[this.front..]) orig(this.theArray[this.front+1..]) orig(this.theArray[0..this.front]) orig(this.theArray[0..this.front-1]) orig(this.theArray[this.back]) orig(this.theArray[this.back-1]) orig(this.theArray[this.back..]) orig(this.theArray[this.back+1..]) orig(this.theArray[0..this.back]) orig(this.theArray[0..this.back-1])
      Modified variables: this.theArray[this.currentSize] this.theArray[this.currentSize-1] this.theArray[this.currentSize+1..] this.theArray[0..this.currentSize] this.theArray[this.front-1] this.theArray[this.back-1]
      Unmodified variables: this this.theArray this.theArray.getClass().getName() this.theArray[] this.theArray[].getClass().getName() this.currentSize this.front this.back size(this.theArray[]) this.theArray[this.currentSize..] this.theArray[0..this.currentSize-1] this.theArray[this.front] this.theArray[this.front..] this.theArray[this.front+1..] this.theArray[0..this.front] this.theArray[0..this.front-1] this.theArray[this.back] this.theArray[this.back..] this.theArray[this.back+1..] this.theArray[0..this.back] this.theArray[0..this.back-1]
modifies this.theArray[this.currentSize], this.theArray[this.currentSize-1], this.theArray[this.currentSize+1..], this.theArray[0..this.currentSize], this.theArray[this.front-1], this.theArray[this.back-1]
(this.currentSize == 0)  ==  (\result == true)
(this.currentSize == 0)  ==>  ((this.back == 0) ==> (this.theArray.length-1 == 0))
(this.currentSize == 0)  ==>  ((this.back == 0) ==> (this.front == 0))
(this.currentSize == 0)  ==>  ((\forall int i; (0 <= i && i <= this.currentSize) ==> (\old(this.theArray[i]) == null)))
(this.currentSize == 0)  ==>  ((\forall int i; (0 <= i && i <= \old(this.currentSize)) ==> (\old(this.theArray[i]) == null)))
(this.currentSize == 0)  ==>  (this.currentSize <= this.theArray.length-1)
(this.currentSize == 0)  ==>  (this.currentSize <= this.back)
(this.currentSize == 0)  ==>  (this.currentSize <= this.front)
(this.currentSize == 0)  ==>  (this.currentSize is a pointer)
(this.currentSize == 0)  ==>  ((\forall int i; (0 <= i && i <= \old(this.currentSize)) ==> (this.theArray[i] == null)))
(this.currentSize == 0)  ==>  ((\forall int i; (0 <= i && i <= this.currentSize-1) ==> (this.theArray[i] != null)))
(this.currentSize == 0)  ==>  ((\forall int i; (0 <= i && i <= this.currentSize) ==> (this.theArray[i] == null)))
(this.currentSize == 0)  ==>  ((\forall int i; (0 <= i && i <= this.theArray.length-1) ==> (this.theArray[i] == null)))
(this.currentSize == 0)  ==>  ((\forall int i; (0 <= i && i <= this.theArray.length-1) ==> (this.theArray[i] == \old(this.theArray[\new(this.currentSize)]))))
(this.currentSize == 0)  ==>  ((\forall int i; (0 <= i && i <= this.theArray.length-1) ==> (this.theArray[i] == \old(this.theArray[this.currentSize]))))
(this.currentSize == 0)  ==>  ((\forall int i; (0 <= i && i <= this.theArray.length-1) ==> (this.theArray[i] == this.theArray[\old(this.currentSize)])))
(this.currentSize == 0)  ==>  ((\forall int i; (0 <= i && i <= this.theArray.length-1) ==> (this.theArray[i] == this.theArray[this.back])))
(this.currentSize == 0)  ==>  ((\forall int i; (0 <= i && i <= this.theArray.length-1) ==> (this.theArray[i] == this.theArray[this.currentSize])))
(this.currentSize == 0)  ==>  ((\forall int i; (0 <= i && i <= this.theArray.length-1) ==> (this.theArray[i] == this.theArray[this.front])))
(this.currentSize == 0)  ==>  ((\forall int i; (0 <= i && i <= this.theArray.length-1) ==> (\typeof(this.theArray[i]) == \typeof(null))))
(this.currentSize == 0)  ==>  ((\forall int i; (this.currentSize <= i && i <= this.theArray.length-1) ==> (this.theArray[i] == null)))
(this.currentSize == 0)  ==>  ((\forall int i; (this.currentSize <= i && i <= this.theArray.length-1) ==> (this.theArray[i] == \old(this.theArray[\new(this.currentSize)]))))
(this.currentSize == 0)  ==>  ((\forall int i; (this.currentSize <= i && i <= this.theArray.length-1) ==> (this.theArray[i] == \old(this.theArray[this.currentSize]))))
(this.currentSize == 0)  ==>  ((\forall int i; (this.currentSize <= i && i <= this.theArray.length-1) ==> (this.theArray[i] == this.theArray[\old(this.currentSize)])))
(this.currentSize == 0)  ==>  ((\forall int i; (this.currentSize <= i && i <= this.theArray.length-1) ==> (this.theArray[i] == this.theArray[this.back])))
(this.currentSize == 0)  ==>  ((\forall int i; (this.currentSize <= i && i <= this.theArray.length-1) ==> (this.theArray[i] == this.theArray[this.currentSize])))
(this.currentSize == 0)  ==>  ((\forall int i; (this.currentSize <= i && i <= this.theArray.length-1) ==> (this.theArray[i] == this.theArray[this.front])))
(this.currentSize == 0)  ==>  (this.theArray[this.currentSize] == this.theArray[this.back])
(this.currentSize == 0)  ==>  (this.theArray[this.currentSize] == this.theArray[this.front])
===========================================================================
DataStructures.QueueAr.isFull():::ENTER
    Variables: this this.theArray this.theArray.getClass().getName() this.theArray[] this.theArray[].getClass().getName() this.currentSize this.front this.back size(this.theArray[]) size(this.theArray[])-1 this.theArray[this.currentSize] this.theArray[this.currentSize-1] this.theArray[this.currentSize..] this.theArray[this.currentSize+1..] this.theArray[0..this.currentSize] this.theArray[0..this.currentSize-1] this.theArray[this.front] this.theArray[this.front-1] this.theArray[this.front..] this.theArray[this.front+1..] this.theArray[0..this.front] this.theArray[0..this.front-1] this.theArray[this.back] this.theArray[this.back-1] this.theArray[this.back..] this.theArray[this.back+1..] this.theArray[0..this.back] this.theArray[0..this.back-1]
===========================================================================
DataStructures.QueueAr.isFull():::EXIT
    Variables: this this.theArray this.theArray.getClass().getName() this.theArray[] this.theArray[].getClass().getName() this.currentSize this.front this.back return orig(this) orig(this.theArray) orig(this.theArray.getClass().getName()) orig(this.theArray[]) orig(this.theArray[].getClass().getName()) orig(this.currentSize) orig(this.front) orig(this.back) size(this.theArray[]) size(this.theArray[])-1 orig(size(this.theArray[])) orig(size(this.theArray[]))-1 this.theArray[this.currentSize] this.theArray[this.currentSize-1] this.theArray[this.currentSize..] this.theArray[this.currentSize+1..] this.theArray[0..this.currentSize] this.theArray[0..this.currentSize-1] this.theArray[this.front] this.theArray[this.front-1] this.theArray[this.front..] this.theArray[this.front+1..] this.theArray[0..this.front] this.theArray[0..this.front-1] this.theArray[this.back] this.theArray[this.back-1] this.theArray[this.back..] this.theArray[this.back+1..] this.theArray[0..this.back] this.theArray[0..this.back-1] this.theArray[orig(this.currentSize)] this.theArray[orig(this.currentSize)-1] this.theArray[orig(this.currentSize)..] this.theArray[orig(this.currentSize)+1..] this.theArray[0..orig(this.currentSize)] this.theArray[0..orig(this.currentSize)-1] this.theArray[orig(this.front)] this.theArray[orig(this.front)-1] this.theArray[orig(this.front)..] this.theArray[orig(this.front)+1..] this.theArray[0..orig(this.front)] this.theArray[0..orig(this.front)-1] this.theArray[orig(this.back)] this.theArray[orig(this.back)-1] this.theArray[orig(this.back)..] this.theArray[orig(this.back)+1..] this.theArray[0..orig(this.back)] this.theArray[0..orig(this.back)-1] orig(this.theArray[post(this.currentSize)]) orig(this.theArray[post(this.currentSize)-1]) orig(this.theArray[post(this.currentSize)..]) orig(this.theArray[post(this.currentSize)+1..]) orig(this.theArray[0..post(this.currentSize)]) orig(this.theArray[0..post(this.currentSize)-1]) orig(this.theArray[post(this.front)]) orig(this.theArray[post(this.front)-1]) orig(this.theArray[post(this.front)..]) orig(this.theArray[post(this.front)+1..]) orig(this.theArray[0..post(this.front)]) orig(this.theArray[0..post(this.front)-1]) orig(this.theArray[post(this.back)]) orig(this.theArray[post(this.back)-1]) orig(this.theArray[post(this.back)..]) orig(this.theArray[post(this.back)+1..]) orig(this.theArray[0..post(this.back)]) orig(this.theArray[0..post(this.back)-1]) orig(this.theArray[this.currentSize]) orig(this.theArray[this.currentSize-1]) orig(this.theArray[this.currentSize..]) orig(this.theArray[this.currentSize+1..]) orig(this.theArray[0..this.currentSize]) orig(this.theArray[0..this.currentSize-1]) orig(this.theArray[this.front]) orig(this.theArray[this.front-1]) orig(this.theArray[this.front..]) orig(this.theArray[this.front+1..]) orig(this.theArray[0..this.front]) orig(this.theArray[0..this.front-1]) orig(this.theArray[this.back]) orig(this.theArray[this.back-1]) orig(this.theArray[this.back..]) orig(this.theArray[this.back+1..]) orig(this.theArray[0..this.back]) orig(this.theArray[0..this.back-1])
      Modified variables: this.theArray[this.currentSize] this.theArray[this.currentSize-1] this.theArray[this.currentSize+1..] this.theArray[0..this.currentSize] this.theArray[this.front-1] this.theArray[this.back-1]
      Unmodified variables: this this.theArray this.theArray.getClass().getName() this.theArray[] this.theArray[].getClass().getName() this.currentSize this.front this.back size(this.theArray[]) this.theArray[this.currentSize..] this.theArray[0..this.currentSize-1] this.theArray[this.front] this.theArray[this.front..] this.theArray[this.front+1..] this.theArray[0..this.front] this.theArray[0..this.front-1] this.theArray[this.back] this.theArray[this.back..] this.theArray[this.back+1..] this.theArray[0..this.back] this.theArray[0..this.back-1]
modifies this.theArray[this.currentSize], this.theArray[this.currentSize-1], this.theArray[this.currentSize+1..], this.theArray[0..this.currentSize], this.theArray[this.front-1], this.theArray[this.back-1]
(\result == false)  ==  (this.currentSize <= this.theArray.length-1)
(\result == false)  ==>  ((this.theArray.length-1 == 0) ==> (this.currentSize == 0))
(\result == true)  ==  (this.currentSize == this.theArray.length)
(\result == true)  ==>  (warning: method daikon.inv.unary.sequence.NoDuplicates.format(OutputFormat:ESC/Java) needs to be implemented: this.theArray[0..this.currentSize-1] contains no duplicates)
(\result == true)  ==>  ((\forall int i; (0 <= i && i <= this.currentSize-1) ==> (this.theArray[i] != null)))
(\result == true)  ==>  (warning: method daikon.inv.unary.sequence.NoDuplicates.format(OutputFormat:ESC/Java) needs to be implemented: this.theArray[] contains no duplicates)
(\result == true)  ==>  (\nonnullelements(this.theArray))
(\result == true)  ==>  ((\forall int i; (this.currentSize <= i && i <= this.theArray.length-1) ==> (this.theArray[i] != null)))
===========================================================================
DataStructures.QueueAr.makeEmpty():::ENTER
    Variables: this this.theArray this.theArray.getClass().getName() this.theArray[] this.theArray[].getClass().getName() this.currentSize this.front this.back size(this.theArray[]) size(this.theArray[])-1 this.theArray[this.currentSize] this.theArray[this.currentSize-1] this.theArray[this.currentSize..] this.theArray[this.currentSize+1..] this.theArray[0..this.currentSize] this.theArray[0..this.currentSize-1] this.theArray[this.front] this.theArray[this.front-1] this.theArray[this.front..] this.theArray[this.front+1..] this.theArray[0..this.front] this.theArray[0..this.front-1] this.theArray[this.back] this.theArray[this.back-1] this.theArray[this.back..] this.theArray[this.back+1..] this.theArray[0..this.back] this.theArray[0..this.back-1]
(this.currentSize == 0) ==> (this.front == 0)
(this.back == 0) ==> (this.front == 0)
(this.back == 0) ==> (this.theArray.length-1 == 0)
===========================================================================
DataStructures.QueueAr.makeEmpty():::EXIT
    Variables: this this.theArray this.theArray.getClass().getName() this.theArray[] this.theArray[].getClass().getName() this.currentSize this.front this.back orig(this) orig(this.theArray) orig(this.theArray.getClass().getName()) orig(this.theArray[]) orig(this.theArray[].getClass().getName()) orig(this.currentSize) orig(this.front) orig(this.back) size(this.theArray[]) size(this.theArray[])-1 orig(size(this.theArray[])) orig(size(this.theArray[]))-1 this.theArray[this.currentSize] this.theArray[this.currentSize-1] this.theArray[this.currentSize..] this.theArray[this.currentSize+1..] this.theArray[0..this.currentSize] this.theArray[0..this.currentSize-1] this.theArray[this.front] this.theArray[this.front-1] this.theArray[this.front..] this.theArray[this.front+1..] this.theArray[0..this.front] this.theArray[0..this.front-1] this.theArray[this.back] this.theArray[this.back-1] this.theArray[this.back..] this.theArray[this.back+1..] this.theArray[0..this.back] this.theArray[0..this.back-1] this.theArray[orig(this.currentSize)] this.theArray[orig(this.currentSize)-1] this.theArray[orig(this.currentSize)..] this.theArray[orig(this.currentSize)+1..] this.theArray[0..orig(this.currentSize)] this.theArray[0..orig(this.currentSize)-1] this.theArray[orig(this.front)] this.theArray[orig(this.front)-1] this.theArray[orig(this.front)..] this.theArray[orig(this.front)+1..] this.theArray[0..orig(this.front)] this.theArray[0..orig(this.front)-1] this.theArray[orig(this.back)] this.theArray[orig(this.back)-1] this.theArray[orig(this.back)..] this.theArray[orig(this.back)+1..] this.theArray[0..orig(this.back)] this.theArray[0..orig(this.back)-1] orig(this.theArray[post(this.currentSize)]) orig(this.theArray[post(this.currentSize)-1]) orig(this.theArray[post(this.currentSize)..]) orig(this.theArray[post(this.currentSize)+1..]) orig(this.theArray[0..post(this.currentSize)]) orig(this.theArray[0..post(this.currentSize)-1]) orig(this.theArray[post(this.front)]) orig(this.theArray[post(this.front)-1]) orig(this.theArray[post(this.front)..]) orig(this.theArray[post(this.front)+1..]) orig(this.theArray[0..post(this.front)]) orig(this.theArray[0..post(this.front)-1]) orig(this.theArray[post(this.back)]) orig(this.theArray[post(this.back)-1]) orig(this.theArray[post(this.back)..]) orig(this.theArray[post(this.back)+1..]) orig(this.theArray[0..post(this.back)]) orig(this.theArray[0..post(this.back)-1]) orig(this.theArray[this.currentSize]) orig(this.theArray[this.currentSize-1]) orig(this.theArray[this.currentSize..]) orig(this.theArray[this.currentSize+1..]) orig(this.theArray[0..this.currentSize]) orig(this.theArray[0..this.currentSize-1]) orig(this.theArray[this.front]) orig(this.theArray[this.front-1]) orig(this.theArray[this.front..]) orig(this.theArray[this.front+1..]) orig(this.theArray[0..this.front]) orig(this.theArray[0..this.front-1]) orig(this.theArray[this.back]) orig(this.theArray[this.back-1]) orig(this.theArray[this.back..]) orig(this.theArray[this.back+1..]) orig(this.theArray[0..this.back]) orig(this.theArray[0..this.back-1])
      Modified variables: this.theArray[] this.theArray[].getClass().getName() this.currentSize this.front this.back this.theArray[this.currentSize] this.theArray[this.currentSize-1] this.theArray[this.currentSize..] this.theArray[this.currentSize+1..] this.theArray[0..this.currentSize] this.theArray[0..this.currentSize-1] this.theArray[this.front] this.theArray[this.front-1] this.theArray[this.front..] this.theArray[this.front+1..] this.theArray[0..this.front] this.theArray[0..this.front-1] this.theArray[this.back] this.theArray[this.back-1] this.theArray[this.back..] this.theArray[this.back+1..] this.theArray[0..this.back] this.theArray[0..this.back-1]
      Unmodified variables: this this.theArray this.theArray.getClass().getName() size(this.theArray[])
modifies this.theArray[*], this.currentSize, this.front, this.back, this.theArray[this.currentSize], this.theArray[this.currentSize-1], this.theArray[this.currentSize..], this.theArray[this.currentSize+1..], this.theArray[0..this.currentSize], this.theArray[0..this.currentSize-1], this.theArray[this.front], this.theArray[this.front-1], this.theArray[this.front..], this.theArray[this.front+1..], this.theArray[0..this.front], this.theArray[0..this.front-1], this.theArray[this.back], this.theArray[this.back-1], this.theArray[this.back..], this.theArray[this.back+1..], this.theArray[0..this.back], this.theArray[0..this.back-1]
this.currentSize == this.front
this.back == this.theArray.length-1
this.back == \old(this.theArray.length)-1
this.theArray[this.currentSize] == this.theArray[this.back]
this.theArray[this.currentSize] == this.theArray[\old(this.front)]
this.theArray[this.currentSize] == this.theArray[\old(this.back)]
(\forall int i; (0 <= i && i <= this.theArray.length-1) ==> (this.theArray[i] == null))
(\forall int i; (0 <= i && i <= this.theArray.length-1) ==> (\typeof(this.theArray[i]) == \typeof(null)))
this.currentSize == 0
(\forall int i; (0 <= i && i <= this.currentSize) ==> (this.theArray[i] == null))
(\forall int i; (0 <= i && i <= this.currentSize-1) ==> (this.theArray[i] != null))
(\forall int i; (0 <= i && i <= this.theArray.length-1) ==> (this.theArray[i] == this.theArray[this.currentSize]))
this.currentSize <= this.back
this.currentSize <= \old(this.currentSize)
this.currentSize <= \old(this.front)
this.currentSize <= \old(this.back)
(this.back == 0) ==> (\old(this.front) == 0)
this.back >= \old(this.front)
(\old(this.back) == 0) ==> (this.back == 0)
(this.back == 0) ==> (\old(this.back) == 0)
this.back >= \old(this.back)
\old(this.currentSize) <= this.theArray.length
warning: method daikon.inv.binary.twoSequence.SubSet.format_esc() needs to be implemented: this.theArray[0..orig(this.front)-1] is a subset of orig(this.theArray[0..post(this.back)-1])
warning: method daikon.inv.binary.twoSequence.SubSet.format_esc() needs to be implemented: this.theArray[0..orig(this.front)-1] is a subset of orig(this.theArray[0..this.currentSize-1])
warning: method daikon.inv.binary.twoSequence.SubSet.format_esc() needs to be implemented: this.theArray[0..orig(this.front)-1] is a subset of orig(this.theArray[0..this.front])
warning: method daikon.inv.binary.twoSequence.SubSet.format_esc() needs to be implemented: this.theArray[0..orig(this.front)-1] is a subset of orig(this.theArray[0..this.front-1])
warning: method daikon.inv.binary.twoSequence.SubSet.format_esc() needs to be implemented: this.theArray[orig(this.back)+1..] is a subset of orig(this.theArray[post(this.currentSize)+1..])
warning: method daikon.inv.binary.twoSequence.SubSet.format_esc() needs to be implemented: this.theArray[orig(this.back)+1..] is a subset of orig(this.theArray[0..post(this.back)-1])
warning: method daikon.inv.binary.twoSequence.SubSet.format_esc() needs to be implemented: this.theArray[orig(this.back)+1..] is a subset of orig(this.theArray[this.back..])
warning: method daikon.inv.binary.twoSequence.SubSet.format_esc() needs to be implemented: this.theArray[orig(this.back)+1..] is a subset of orig(this.theArray[this.back+1..])
(\forall int i; (0 <= i && i <= this.currentSize) ==> (\old(this.theArray[i]) == \old(this.theArray[\new(this.currentSize)])))
(\forall int i; (this.back <= i && i <= \old(this.theArray.length-1)) ==> (\old(this.theArray[i]) == \old(this.theArray[\new(this.back)])))
