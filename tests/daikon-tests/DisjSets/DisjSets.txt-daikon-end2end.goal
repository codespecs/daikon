===========================================================================
DataStructures.DisjSets:::OBJECT
this.s != null
this.s[] elements >= -1
this.s[i] != i
this.s[] elements <= size(this.s[])-1
===========================================================================
DataStructures.DisjSets.DisjSets(int):::ENTER
numElements >= 1
===========================================================================
DataStructures.DisjSets.DisjSets(int):::EXIT
orig(numElements) == size(this.s[])
this.s[] elements == -1
this.s[i] < i
this.s[orig(numElements)..] == []
this.s[] elements == this.s[orig(numElements)-1]
size(this.s[])-1 > this.s[orig(numElements)-1]
===========================================================================
DataStructures.DisjSets.find(int):::ENTER
x >= 0
(size(this.s[])-1 == 0) ==> (x == 0)
x <= size(this.s[])-1
x != this.s[x]
size(this.s[])-1 >= this.s[x]
===========================================================================
DataStructures.DisjSets.find(int):::EXIT68
return == orig(x)
===========================================================================
DataStructures.DisjSets.find(int):::EXIT68;condition="orig(s[x] < 0)"
===========================================================================
DataStructures.DisjSets.find(int):::EXIT68;condition="s[x] < 0"
===========================================================================
DataStructures.DisjSets.find(int):::EXIT70
this.s[orig(x)] >= 0
return in this.s[]
return != orig(x)
this.s[return] < this.s[orig(x)]
===========================================================================
DataStructures.DisjSets.find(int):::EXIT70;condition="not(orig(s[x] < 0))"
===========================================================================
DataStructures.DisjSets.find(int):::EXIT70;condition="not(s[x] < 0)"
===========================================================================
DataStructures.DisjSets.find(int):::EXIT
this.s == orig(this.s)
this.s[] == orig(this.s[])
(this.s[orig(x)] == -1)  <==>  (return == orig(x))
(this.s[orig(x)] == -1)  ==>  (orig(x) > this.s[orig(x)])
(this.s[orig(x)] == -1)  ==>  (return > this.s[orig(x)])
(this.s[orig(x)] == -1)  ==>  (size(this.s[])-1 > this.s[orig(x)])
(this.s[orig(x)] == -1)  ==>  (this.s[] elements >= this.s[orig(x)])
(this.s[orig(x)] == -1)  ==>  ({-1} subset of this.s[0..orig(x)])
(this.s[orig(x)] == -1)  ==>  ({-1} subset of this.s[orig(x)..])
(this.s[orig(x)] >= 0)  <==>  (return != orig(x))
(this.s[orig(x)] >= 0)  <==>  (this.s[return] < this.s[orig(x)])
(this.s[orig(x)] >= 0)  ==>  (return in this.s[])
return >= 0
this.s[return] == -1
{-1} subset of this.s[return..]
{-1} subset of this.s[0..return]
this.s[] elements >= this.s[return]
(size(this.s[])-1 == 0) ==> (return == 0)
return <= size(this.s[])-1
return > this.s[return]
(size(this.s[])-1 == 0) ==> (orig(x) == 0)
orig(x) <= size(this.s[])-1
orig(x) > this.s[return]
orig(x) != this.s[orig(x)]
size(this.s[])-1 > this.s[return]
size(this.s[])-1 >= this.s[orig(x)]
this.s[return] <= this.s[orig(x)]
===========================================================================
DataStructures.DisjSets.find(int):::EXIT;condition="orig(s[x] < 0)"
return == orig(x)
===========================================================================
DataStructures.DisjSets.find(int):::EXIT;condition="not(orig(s[x] < 0))"
this.s[orig(x)] >= 0
return in this.s[]
return != orig(x)
this.s[return] < this.s[orig(x)]
===========================================================================
DataStructures.DisjSets.find(int):::EXIT;condition="s[x] < 0"
this.s == orig(this.s)
this.s[] == orig(this.s[])
return == orig(x)
this.s != null
this.s[] elements >= -1
this.s[i] != i
{-1} subset of this.s[]
return >= 0
this.s[return] == -1
{-1} subset of this.s[return..]
{-1} subset of this.s[0..return]
this.s[] elements <= size(this.s[])-1
this.s[] elements >= this.s[return]
(size(this.s[])-1 == 0) ==> (return == 0)
return <= size(this.s[])-1
return > this.s[return]
size(this.s[])-1 > this.s[return]
===========================================================================
DataStructures.DisjSets.find(int):::EXIT;condition="not(s[x] < 0)"
this.s == orig(this.s)
this.s[] == orig(this.s[])
this.s != null
this.s[] elements >= -1
this.s[i] != i
{-1} subset of this.s[]
return >= 0
orig(x) >= 0
this.s[return] == -1
{-1} subset of this.s[return..]
{-1} subset of this.s[0..return]
this.s[orig(x)] >= 0
return in this.s[]
this.s[] elements <= size(this.s[])-1
this.s[] elements >= this.s[return]
return != orig(x)
return <= size(this.s[])-1
return > this.s[return]
orig(x) <= size(this.s[])-1
orig(x) > this.s[return]
orig(x) != this.s[orig(x)]
size(this.s[])-1 > this.s[return]
size(this.s[])-1 >= this.s[orig(x)]
this.s[return] < this.s[orig(x)]
===========================================================================
DataStructures.DisjSets.unionCareful(int, int):::ENTER
set1 >= 0
set2 >= 0
(size(this.s[])-1 == 0) ==> (set1 == 0)
set1 <= size(this.s[])-1
set1 != this.s[set1]
(size(this.s[])-1 == 0) ==> (set2 == 0)
set2 <= size(this.s[])-1
set2 != this.s[set2]
size(this.s[])-1 >= this.s[set1]
size(this.s[])-1 >= this.s[set2]
===========================================================================
DataStructures.DisjSets.unionCareful(int, int):::EXIT
this.s == orig(this.s)
size(this.s[]) == orig(size(this.s[]))
this.s[orig(set1)] == orig(this.s[post(set1)])
this.s[orig(set1)] == orig(this.s[set1])
this.s[] >= orig(this.s[]) (elementwise)
this.s[] is a bitwise subset of orig(this.s[]) (elementwise)
this.s[] is a superset of orig(this.s[])
orig(this.s[]) elements <= size(this.s[])-1
(size(this.s[])-1 == 0) ==> (orig(set1) == 0)
orig(set1) <= size(this.s[])-1
orig(set1) != this.s[orig(set1)]
(size(this.s[])-1 == 0) ==> (orig(set2) == 0)
orig(set2) <= size(this.s[])-1
orig(set2) != this.s[orig(set2)]
size(this.s[])-1 >= this.s[orig(set1)]
size(this.s[])-1 >= this.s[orig(set2)]
size(this.s[])-1 >= orig(this.s[set2])
(orig(this.s[set2]) == 0) ==> (this.s[orig(set2)] == 0)
===========================================================================
DataStructures.DisjSets.unionDisjoint(int, int):::ENTER
this.s[root1] == this.s[root2]
root1 >= 0
root2 >= 0
this.s[root1] == -1
{-1} subset of this.s[root1..]
{-1} subset of this.s[0..root1]
{-1} subset of this.s[root2..]
{-1} subset of this.s[0..root2]
this.s[] elements >= this.s[root1]
root1 != root2
root1 <= size(this.s[])-1
root1 > this.s[root1]
root2 <= size(this.s[])-1
root2 > this.s[root1]
size(this.s[])-1 > this.s[root1]
===========================================================================
DataStructures.DisjSets.unionDisjoint(int, int):::EXIT
this.s == orig(this.s)
orig(root1) == this.s[orig(root2)]
size(this.s[]) == orig(size(this.s[]))
this.s[orig(root1)] == orig(this.s[post(root1)])
this.s[orig(root1)] == orig(this.s[post(root2)])
this.s[orig(root1)] == orig(this.s[root1])
this.s[orig(root1)] == orig(this.s[root2])
this.s[orig(root1)] == -1
{-1} subset of this.s[orig(root1)..]
{-1} subset of this.s[0..orig(root1)]
this.s[] > orig(this.s[]) (lexically)
this.s[] >= orig(this.s[]) (elementwise)
this.s[] is a bitwise subset of orig(this.s[]) (elementwise)
this.s[] is a superset of orig(this.s[])
this.s[] elements >= this.s[orig(root1)]
orig(this.s[]) elements <= size(this.s[])-1
orig(this.s[]) elements >= this.s[orig(root1)]
orig(root1) <= size(this.s[])-1
orig(root1) > this.s[orig(root1)]
orig(root2) <= size(this.s[])-1
orig(root2) > this.s[orig(root1)]
size(this.s[])-1 > this.s[orig(root1)]
