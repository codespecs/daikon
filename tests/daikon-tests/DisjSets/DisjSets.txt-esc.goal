===========================================================================
DataStructures.DisjSets:::OBJECT
    Variables: this this.s this.s[] size(this.s[]) size(this.s[])-1
this.s != null
(\forall int i; (0 <= i && i <= this.s.length-1) ==> (this.s[i] >= -1))
(\forall int i; (0 <= i && i <= this.s.length-1) ==> (this.s[i] != i))
(\forall int i; (0 <= i && i <= this.s.length-1) ==> (this.s[i] <= this.s.length-1))
===========================================================================
DataStructures.DisjSets.DisjSets(int):::ENTER
    Variables: numElements
numElements >= 1
===========================================================================
DataStructures.DisjSets.DisjSets(int):::EXIT
    Variables: this this.s this.s[] numElements orig(numElements) size(this.s[]) size(this.s[])-1 this.s[numElements] this.s[numElements-1] this.s[numElements..] this.s[numElements+1..] this.s[0..numElements] this.s[0..numElements-1] this.s[orig(numElements)] this.s[orig(numElements)-1] this.s[orig(numElements)..] this.s[orig(numElements)+1..] this.s[0..orig(numElements)] this.s[0..orig(numElements)-1]
      Unmodified variables: numElements
\old(numElements) == this.s.length
(\forall int i; (0 <= i && i <= this.s.length-1) ==> (this.s[i] == -1))
(\forall int i; (0 <= i && i <= this.s.length-1) ==> (this.s[i] < i))
warning: method daikon.inv.unary.sequence.OneOfSequence.format(OutputFormat:ESC/Java) needs to be implemented: this.s[orig(numElements)..] == []
(\forall int i; (0 <= i && i <= this.s.length-1) ==> (this.s[i] == this.s[\old(numElements)-1]))
this.s.length-1 > this.s[\old(numElements)-1]
===========================================================================
DataStructures.DisjSets.find(int):::ENTER
    Variables: this this.s this.s[] x size(this.s[]) size(this.s[])-1 this.s[x] this.s[x-1] this.s[x..] this.s[x+1..] this.s[0..x] this.s[0..x-1]
x >= 0
(this.s.length-1 == 0) ==> (x == 0)
x <= this.s.length-1
x != this.s[x]
this.s.length-1 >= this.s[x]
===========================================================================
DataStructures.DisjSets.find(int):::EXIT68
    Variables: this this.s this.s[] x return orig(this) orig(this.s) orig(this.s[]) orig(x) size(this.s[]) size(this.s[])-1 orig(size(this.s[])) orig(size(this.s[]))-1 this.s[x] this.s[x-1] this.s[x..] this.s[x+1..] this.s[0..x] this.s[0..x-1] this.s[return] this.s[return-1] this.s[return..] this.s[return+1..] this.s[0..return] this.s[0..return-1] this.s[orig(x)] this.s[orig(x)-1] this.s[orig(x)..] this.s[orig(x)+1..] this.s[0..orig(x)] this.s[0..orig(x)-1] orig(this.s[post(x)]) orig(this.s[post(x)-1]) orig(this.s[post(x)..]) orig(this.s[post(x)+1..]) orig(this.s[0..post(x)]) orig(this.s[0..post(x)-1]) orig(this.s[post(return)]) orig(this.s[post(return)-1]) orig(this.s[post(return)..]) orig(this.s[post(return)+1..]) orig(this.s[0..post(return)]) orig(this.s[0..post(return)-1]) orig(this.s[x]) orig(this.s[x-1]) orig(this.s[x..]) orig(this.s[x+1..]) orig(this.s[0..x]) orig(this.s[0..x-1])
      Modified primitive arguments: this.s[x-1]
      Unmodified variables: this this.s this.s[] x size(this.s[]) this.s[x] this.s[x..] this.s[x+1..] this.s[0..x] this.s[0..x-1]
\result == \old(x)
===========================================================================
DataStructures.DisjSets.find(int):::EXIT70
    Variables: this this.s this.s[] x return orig(this) orig(this.s) orig(this.s[]) orig(x) size(this.s[]) size(this.s[])-1 orig(size(this.s[])) orig(size(this.s[]))-1 this.s[x] this.s[x-1] this.s[x..] this.s[x+1..] this.s[0..x] this.s[0..x-1] this.s[return] this.s[return-1] this.s[return..] this.s[return+1..] this.s[0..return] this.s[0..return-1] this.s[orig(x)] this.s[orig(x)-1] this.s[orig(x)..] this.s[orig(x)+1..] this.s[0..orig(x)] this.s[0..orig(x)-1] orig(this.s[post(x)]) orig(this.s[post(x)-1]) orig(this.s[post(x)..]) orig(this.s[post(x)+1..]) orig(this.s[0..post(x)]) orig(this.s[0..post(x)-1]) orig(this.s[post(return)]) orig(this.s[post(return)-1]) orig(this.s[post(return)..]) orig(this.s[post(return)+1..]) orig(this.s[0..post(return)]) orig(this.s[0..post(return)-1]) orig(this.s[x]) orig(this.s[x-1]) orig(this.s[x..]) orig(this.s[x+1..]) orig(this.s[0..x]) orig(this.s[0..x-1])
      Modified primitive arguments: this.s[x-1]
      Unmodified variables: this this.s this.s[] x size(this.s[]) this.s[x] this.s[x..] this.s[x+1..] this.s[0..x] this.s[0..x-1]
this.s[\old(x)] >= 0
!(\forall int i; (0 <= i && i <= this.s.length-1) ==> (this.s[i] != \result))
\result != \old(x)
this.s[\result] < this.s[\old(x)]
===========================================================================
DataStructures.DisjSets.find(int):::EXIT
    Variables: this this.s this.s[] x return orig(this) orig(this.s) orig(this.s[]) orig(x) size(this.s[]) size(this.s[])-1 orig(size(this.s[])) orig(size(this.s[]))-1 this.s[x] this.s[x-1] this.s[x..] this.s[x+1..] this.s[0..x] this.s[0..x-1] this.s[return] this.s[return-1] this.s[return..] this.s[return+1..] this.s[0..return] this.s[0..return-1] this.s[orig(x)] this.s[orig(x)-1] this.s[orig(x)..] this.s[orig(x)+1..] this.s[0..orig(x)] this.s[0..orig(x)-1] orig(this.s[post(x)]) orig(this.s[post(x)-1]) orig(this.s[post(x)..]) orig(this.s[post(x)+1..]) orig(this.s[0..post(x)]) orig(this.s[0..post(x)-1]) orig(this.s[post(return)]) orig(this.s[post(return)-1]) orig(this.s[post(return)..]) orig(this.s[post(return)+1..]) orig(this.s[0..post(return)]) orig(this.s[0..post(return)-1]) orig(this.s[x]) orig(this.s[x-1]) orig(this.s[x..]) orig(this.s[x+1..]) orig(this.s[0..x]) orig(this.s[0..x-1])
      Modified primitive arguments: this.s[x-1]
      Unmodified variables: this this.s this.s[] x size(this.s[]) this.s[x] this.s[x..] this.s[x+1..] this.s[0..x] this.s[0..x-1]
(this.s[\old(x)] == -1)  ==  (\result == \old(x))
(this.s[\old(x)] == -1)  ==>  (\old(x) > this.s[\old(x)])
(this.s[\old(x)] == -1)  ==>  (\result > this.s[\old(x)])
(this.s[\old(x)] == -1)  ==>  (this.s.length-1 > this.s[\old(x)])
(this.s[\old(x)] == -1)  ==>  ((\forall int i; (0 <= i && i <= this.s.length-1) ==> (this.s[i] >= this.s[\old(x)])))
(this.s[\old(x)] == -1)  ==>  (warning: method daikon.inv.unary.sequence.CommonSequence.format(OutputFormat:ESC/Java) needs to be implemented: {-1} subset of this.s[0..orig(x)])
(this.s[\old(x)] == -1)  ==>  (warning: method daikon.inv.unary.sequence.CommonSequence.format(OutputFormat:ESC/Java) needs to be implemented: {-1} subset of this.s[orig(x)..])
(this.s[\old(x)] >= 0)  ==  (\result != \old(x))
(this.s[\old(x)] >= 0)  ==  (this.s[\result] < this.s[\old(x)])
(this.s[\old(x)] >= 0)  ==>  (!(\forall int i; (0 <= i && i <= this.s.length-1) ==> (this.s[i] != \result)))
\result >= 0
this.s[\result] == -1
warning: method daikon.inv.unary.sequence.CommonSequence.format(OutputFormat:ESC/Java) needs to be implemented: {-1} subset of this.s[return..]
warning: method daikon.inv.unary.sequence.CommonSequence.format(OutputFormat:ESC/Java) needs to be implemented: {-1} subset of this.s[0..return]
(\forall int i; (0 <= i && i <= this.s.length-1) ==> (this.s[i] >= this.s[\result]))
(this.s.length-1 == 0) ==> (\result == 0)
\result <= this.s.length-1
\result > this.s[\result]
(this.s.length-1 == 0) ==> (\old(x) == 0)
\old(x) <= this.s.length-1
\old(x) > this.s[\result]
\old(x) != this.s[\old(x)]
this.s.length-1 > this.s[\result]
this.s.length-1 >= this.s[\old(x)]
this.s[\result] <= this.s[\old(x)]
===========================================================================
DataStructures.DisjSets.unionCareful(int, int):::ENTER
    Variables: this this.s this.s[] set1 set2 size(this.s[]) size(this.s[])-1 this.s[set1] this.s[set1-1] this.s[set1..] this.s[set1+1..] this.s[0..set1] this.s[0..set1-1] this.s[set2] this.s[set2-1] this.s[set2..] this.s[set2+1..] this.s[0..set2] this.s[0..set2-1]
set1 >= 0
set2 >= 0
(this.s.length-1 == 0) ==> (set1 == 0)
set1 <= this.s.length-1
set1 != this.s[set1]
(this.s.length-1 == 0) ==> (set2 == 0)
set2 <= this.s.length-1
set2 != this.s[set2]
this.s.length-1 >= this.s[set1]
this.s.length-1 >= this.s[set2]
===========================================================================
DataStructures.DisjSets.unionCareful(int, int):::EXIT
    Variables: this this.s this.s[] set1 set2 orig(this) orig(this.s) orig(this.s[]) orig(set1) orig(set2) size(this.s[]) size(this.s[])-1 orig(size(this.s[])) orig(size(this.s[]))-1 this.s[set1] this.s[set1-1] this.s[set1..] this.s[set1+1..] this.s[0..set1] this.s[0..set1-1] this.s[set2] this.s[set2-1] this.s[set2..] this.s[set2+1..] this.s[0..set2] this.s[0..set2-1] this.s[orig(set1)] this.s[orig(set1)-1] this.s[orig(set1)..] this.s[orig(set1)+1..] this.s[0..orig(set1)] this.s[0..orig(set1)-1] this.s[orig(set2)] this.s[orig(set2)-1] this.s[orig(set2)..] this.s[orig(set2)+1..] this.s[0..orig(set2)] this.s[0..orig(set2)-1] orig(this.s[post(set1)]) orig(this.s[post(set1)-1]) orig(this.s[post(set1)..]) orig(this.s[post(set1)+1..]) orig(this.s[0..post(set1)]) orig(this.s[0..post(set1)-1]) orig(this.s[post(set2)]) orig(this.s[post(set2)-1]) orig(this.s[post(set2)..]) orig(this.s[post(set2)+1..]) orig(this.s[0..post(set2)]) orig(this.s[0..post(set2)-1]) orig(this.s[set1]) orig(this.s[set1-1]) orig(this.s[set1..]) orig(this.s[set1+1..]) orig(this.s[0..set1]) orig(this.s[0..set1-1]) orig(this.s[set2]) orig(this.s[set2-1]) orig(this.s[set2..]) orig(this.s[set2+1..]) orig(this.s[0..set2]) orig(this.s[0..set2-1])
      Modified variables: this.s[]
      Modified primitive arguments: this.s[set1-1] this.s[set1..] this.s[set1+1..] this.s[0..set1] this.s[0..set1-1] this.s[set2] this.s[set2-1] this.s[set2..] this.s[set2+1..] this.s[0..set2] this.s[0..set2-1]
      Unmodified variables: this this.s set1 set2 size(this.s[]) this.s[set1]
modifies this.s[*]
this.s[\old(set1)] == \old(this.s[\new(set1)])
this.s[\old(set1)] == \old(this.s[set1])
(\forall int i, j; (0 <= i && i <= this.s.length-1 && 0 <= j && j <= \old(this.s.length-1) && i == j) ==> (this.s[i] >= \old(this.s[j])))
(\forall int i, j; (0 <= i && i <= \old(this.s.length-1) && 0 <= j && j <= this.s.length-1 && i == j) ==> (\old(this.s[i]) == (this.s[j] | \old(this.s[i]))))
warning: method daikon.inv.binary.twoSequence.SuperSet.format_esc() needs to be implemented: this.s[] is a superset of orig(this.s[])
(\forall int i; (0 <= i && i <= \old(this.s.length-1)) ==> (\old(this.s[i]) <= this.s.length-1))
(this.s.length-1 == 0) ==> (\old(set1) == 0)
\old(set1) <= this.s.length-1
\old(set1) != this.s[\old(set1)]
(this.s.length-1 == 0) ==> (\old(set2) == 0)
\old(set2) <= this.s.length-1
\old(set2) != this.s[\old(set2)]
this.s.length-1 >= this.s[\old(set1)]
this.s.length-1 >= this.s[\old(set2)]
this.s.length-1 >= \old(this.s[set2])
(\old(this.s[set2]) == 0) ==> (this.s[\old(set2)] == 0)
===========================================================================
DataStructures.DisjSets.unionDisjoint(int, int):::ENTER
    Variables: this this.s this.s[] root1 root2 size(this.s[]) size(this.s[])-1 this.s[root1] this.s[root1-1] this.s[root1..] this.s[root1+1..] this.s[0..root1] this.s[0..root1-1] this.s[root2] this.s[root2-1] this.s[root2..] this.s[root2+1..] this.s[0..root2] this.s[0..root2-1]
this.s[root1] == this.s[root2]
root1 >= 0
root2 >= 0
this.s[root1] == -1
warning: method daikon.inv.unary.sequence.CommonSequence.format(OutputFormat:ESC/Java) needs to be implemented: {-1} subset of this.s[root1..]
warning: method daikon.inv.unary.sequence.CommonSequence.format(OutputFormat:ESC/Java) needs to be implemented: {-1} subset of this.s[0..root1]
warning: method daikon.inv.unary.sequence.CommonSequence.format(OutputFormat:ESC/Java) needs to be implemented: {-1} subset of this.s[root2..]
warning: method daikon.inv.unary.sequence.CommonSequence.format(OutputFormat:ESC/Java) needs to be implemented: {-1} subset of this.s[0..root2]
(\forall int i; (0 <= i && i <= this.s.length-1) ==> (this.s[i] >= this.s[root1]))
root1 != root2
root1 <= this.s.length-1
root1 > this.s[root1]
root2 <= this.s.length-1
root2 > this.s[root1]
this.s.length-1 > this.s[root1]
===========================================================================
DataStructures.DisjSets.unionDisjoint(int, int):::EXIT
    Variables: this this.s this.s[] root1 root2 orig(this) orig(this.s) orig(this.s[]) orig(root1) orig(root2) size(this.s[]) size(this.s[])-1 orig(size(this.s[])) orig(size(this.s[]))-1 this.s[root1] this.s[root1-1] this.s[root1..] this.s[root1+1..] this.s[0..root1] this.s[0..root1-1] this.s[root2] this.s[root2-1] this.s[root2..] this.s[root2+1..] this.s[0..root2] this.s[0..root2-1] this.s[orig(root1)] this.s[orig(root1)-1] this.s[orig(root1)..] this.s[orig(root1)+1..] this.s[0..orig(root1)] this.s[0..orig(root1)-1] this.s[orig(root2)] this.s[orig(root2)-1] this.s[orig(root2)..] this.s[orig(root2)+1..] this.s[0..orig(root2)] this.s[0..orig(root2)-1] orig(this.s[post(root1)]) orig(this.s[post(root1)-1]) orig(this.s[post(root1)..]) orig(this.s[post(root1)+1..]) orig(this.s[0..post(root1)]) orig(this.s[0..post(root1)-1]) orig(this.s[post(root2)]) orig(this.s[post(root2)-1]) orig(this.s[post(root2)..]) orig(this.s[post(root2)+1..]) orig(this.s[0..post(root2)]) orig(this.s[0..post(root2)-1]) orig(this.s[root1]) orig(this.s[root1-1]) orig(this.s[root1..]) orig(this.s[root1+1..]) orig(this.s[0..root1]) orig(this.s[0..root1-1]) orig(this.s[root2]) orig(this.s[root2-1]) orig(this.s[root2..]) orig(this.s[root2+1..]) orig(this.s[0..root2]) orig(this.s[0..root2-1])
      Modified variables: this.s[]
      Modified primitive arguments: this.s[root1-1] this.s[root1..] this.s[root1+1..] this.s[0..root1] this.s[0..root1-1] this.s[root2] this.s[root2-1] this.s[root2..] this.s[0..root2]
      Unmodified variables: this this.s root1 root2 size(this.s[]) this.s[root1] this.s[root2+1..] this.s[0..root2-1]
modifies this.s[*]
\old(root1) == this.s[\old(root2)]
this.s[\old(root1)] == \old(this.s[\new(root1)])
this.s[\old(root1)] == \old(this.s[\new(root2)])
this.s[\old(root1)] == \old(this.s[root1])
this.s[\old(root1)] == \old(this.s[root2])
this.s[\old(root1)] == -1
warning: method daikon.inv.unary.sequence.CommonSequence.format(OutputFormat:ESC/Java) needs to be implemented: {-1} subset of this.s[orig(root1)..]
warning: method daikon.inv.unary.sequence.CommonSequence.format(OutputFormat:ESC/Java) needs to be implemented: {-1} subset of this.s[0..orig(root1)]
warning: method daikon.inv.binary.twoSequence.SeqSeqIntGreaterThan.format(OutputFormat:ESC/Java) needs to be implemented: this.s[] > orig(this.s[]) (lexically)
(\forall int i, j; (0 <= i && i <= this.s.length-1 && 0 <= j && j <= \old(this.s.length-1) && i == j) ==> (this.s[i] >= \old(this.s[j])))
(\forall int i, j; (0 <= i && i <= \old(this.s.length-1) && 0 <= j && j <= this.s.length-1 && i == j) ==> (\old(this.s[i]) == (this.s[j] | \old(this.s[i]))))
warning: method daikon.inv.binary.twoSequence.SuperSet.format_esc() needs to be implemented: this.s[] is a superset of orig(this.s[])
(\forall int i; (0 <= i && i <= this.s.length-1) ==> (this.s[i] >= this.s[\old(root1)]))
(\forall int i; (0 <= i && i <= \old(this.s.length-1)) ==> (\old(this.s[i]) <= this.s.length-1))
(\forall int i; (0 <= i && i <= \old(this.s.length-1)) ==> (\old(this.s[i]) >= this.s[\old(root1)]))
\old(root1) <= this.s.length-1
\old(root1) > this.s[\old(root1)]
\old(root2) <= this.s.length-1
\old(root2) > this.s[\old(root1)]
this.s.length-1 > this.s[\old(root1)]
