package agora;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;

public class AgoraTest {

  /*@ invariant this != null; */
  /*@
  @ public normal_behavior // Generated by Daikon
  @ requires args != null;
  @ requires args.getClass().getName() == java.lang.String[].class.getName();
  @ requires daikon.Quant.pairwiseEqual(daikon.Quant.collectObject(args, "toString()"), new String[] {  });
  @ ensures daikon.Quant.pairwiseEqual(args, \old(args));
  @ ensures daikon.Quant.pairwiseEqual(daikon.Quant.collectObject(args, "toString()"), new String[] {  });
  @*/
  public static void main(String[] args) {
    AgoraTest a = new AgoraTest();
    a.emptySequence(new ArrayList<>());
    a.emptySequence(new LinkedList<>());
    a.emptySequence(new ArrayList<>());
    a.emptySequence(new LinkedList<>());
    a.emptySequence(new ArrayList<>());
    a.emptySequence(new LinkedList<>());
    a.emptySequence(new ArrayList<>());
    a.emptySequence(new LinkedList<>());
    a.emptySequence(new ArrayList<>());
    a.emptySequence(new LinkedList<>());

    a.emptyString(new String(""));
    a.emptyString(new String(""));
    a.emptyString(new String(""));
    a.emptyString(new String(""));
    a.emptyString(new String(""));
    a.emptyString(new String(""));
    a.emptyString(new String(""));
    a.emptyString(new String(""));
    a.emptyString(new String(""));
    a.emptyString(new String(""));

    a.stringParameter1("22");
    a.stringParameter1("122");
    a.stringParameter1("-322");
    a.stringParameter1("3.14159");
    a.stringParameter1("1.618");
    a.stringParameter1("-333333333");
    a.stringParameter1("1234567890");
    a.stringParameter1("22");
    a.stringParameter1("22");

    a.stringParameter1("22");
    a.stringParameter1("122");
    a.stringParameter1("-322");
    a.stringParameter1("3.14159");
    a.stringParameter1("1.618");
    a.stringParameter1("-333333333");
    a.stringParameter1("1234567890");
    a.stringParameter1("22");
    a.stringParameter1("22");
    a.stringParameter1("");
  }

  /*@
  @ private normal_behavior // Generated by Daikon
  @ requires All the elements of lst[..].getClass().getName() are Numeric;
  @ requires All the elements of lst[..].getClass().getName() are TimeOfDays: HH:MM 12-hour format, optional leading 0, mandatory meridiems (AM/PM);
  @ requires All the elements of lst[..].getClass().getName() are TimeOfDays: HH:MM 24-hour format, optional leading 0;
  @ requires All the elements of lst[..].getClass().getName() are TimeOfDays: HH:MM:SS 24-hour format with optional leading 0;
  @ requires All the elements of lst[..].getClass().getName() are Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional);
  @ requires All the elements of lst[..].getClass().getName() are dates. Format: DD/MM/YYYY;
  @ requires All the elements of lst[..].getClass().getName() are dates. Format: MM/DD/YYYY;
  @ requires All the elements of lst[..].getClass().getName() are dates. Format: YYYY-MM-DD;
  @ requires All the elements of lst[..].getClass().getName() are emails;
  @ ensures daikon.Quant.pairwiseEqual(lst, \old(lst));
  @ ensures All the elements of lst[..].getClass().getName() are Numeric;
  @ ensures All the elements of lst[..].getClass().getName() are TimeOfDays: HH:MM 12-hour format, optional leading 0, mandatory meridiems (AM/PM);
  @ ensures All the elements of lst[..].getClass().getName() are TimeOfDays: HH:MM 24-hour format, optional leading 0;
  @ ensures All the elements of lst[..].getClass().getName() are TimeOfDays: HH:MM:SS 24-hour format with optional leading 0;
  @ ensures All the elements of lst[..].getClass().getName() are Timestamp. Format: YYYY-MM-DDTHH:MM:SS.mmZ (Miliseconds are optional);
  @ ensures All the elements of lst[..].getClass().getName() are dates. Format: DD/MM/YYYY;
  @ ensures All the elements of lst[..].getClass().getName() are dates. Format: MM/DD/YYYY;
  @ ensures All the elements of lst[..].getClass().getName() are dates. Format: YYYY-MM-DD;
  @ ensures All the elements of lst[..].getClass().getName() are emails;
  @*/
  void emptySequence(List<String> lst) {}

  /*@
  @ private normal_behavior // Generated by Daikon
  @ requires s.toString().equals("");
  @ requires daikon.inv.unary.string.IsNumeric.PATTERN.matcher(s.toString).matches();
  @ ensures s.toString().equals(\old(s.toString()));
  @ ensures s.toString().equals("");
  @ ensures daikon.inv.unary.string.IsNumeric.PATTERN.matcher(s.toString).matches();
  @*/
  void emptyString(String s) {}

  /*@
  @ private normal_behavior // Generated by Daikon
  @ requires s != null;
  @ requires daikon.inv.unary.string.IsNumeric.PATTERN.matcher(s.toString).matches();
  @ ensures s.toString().equals(\old(s.toString()));
  @ ensures daikon.inv.unary.string.IsNumeric.PATTERN.matcher(s.toString).matches();
  @*/
  void stringParameter1(String s) {}

  /*@
  @ private normal_behavior // Generated by Daikon
  @ requires true;
  @*/
  void stringParameter2(String s) {}

  /*@
  @ private normal_behavior // Generated by Daikon
  @ requires true;
  @*/
  void stringParameter3(String s) {}
}
