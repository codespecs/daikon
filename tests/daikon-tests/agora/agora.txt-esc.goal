===========================================================================
agora.AgoraTest:::OBJECT
    Variables: this
this != null
===========================================================================
agora.AgoraTest.AgoraTest():::EXIT
    Variables: this
===========================================================================
agora.AgoraTest.emptySequence(java.util.List):::ENTER
    Variables: this lst lst[] lst[].getClass().getName() lst.getClass().getName() size(lst[]) size(lst[])-1
warning: method daikon.inv.unary.sequence.OneOfSequence.format(OutputFormat:ESC/Java) needs to be implemented: lst[] == []
warning: method daikon.inv.unary.stringsequence.OneOfStringSequence.format(OutputFormat:ESC/Java) needs to be implemented: lst[].getClass().getName() == []
warning: method daikon.inv.unary.string.PrintableString.format(OutputFormat:ESC/Java) needs to be implemented: lst.getClass().getName() is printable
===========================================================================
agora.AgoraTest.emptySequence(java.util.List):::EXIT
    Variables: this lst lst[] lst[].getClass().getName() lst.getClass().getName() orig(this) orig(lst) orig(lst[]) orig(lst[].getClass().getName()) orig(lst.getClass().getName()) size(lst[]) size(lst[])-1 orig(size(lst[])) orig(size(lst[]))-1
      Unmodified variables: this lst lst[] lst[].getClass().getName() lst.getClass().getName() size(lst[])
warning: method daikon.inv.unary.sequence.OneOfSequence.format(OutputFormat:ESC/Java) needs to be implemented: lst[] == []
warning: method daikon.inv.unary.stringsequence.OneOfStringSequence.format(OutputFormat:ESC/Java) needs to be implemented: lst[].getClass().getName() == []
===========================================================================
agora.AgoraTest.emptyString(java.lang.String):::ENTER
    Variables: this s s.toString
warning: method daikon.inv.unary.string.OneOfString.format(OutputFormat:ESC/Java) needs to be implemented: s.toString == ""
===========================================================================
agora.AgoraTest.emptyString(java.lang.String):::EXIT
    Variables: this s s.toString orig(this) orig(s) orig(s.toString)
      Unmodified variables: this s s.toString
warning: method daikon.inv.unary.string.OneOfString.format(OutputFormat:ESC/Java) needs to be implemented: s.toString == ""
===========================================================================
agora.AgoraTest.main(java.lang.String[]):::ENTER
    Variables: args args.getClass().getName() args[] args[].toString size(args[]) size(args[])-1
args != null
\typeof(args) == \type(java.lang.String[])
(args.length == 0) && ((\forall int i; (0 <= i && i <= args.length-1) ==> (args[i] != null)))
warning: method daikon.inv.unary.stringsequence.OneOfStringSequence.format(OutputFormat:ESC/Java) needs to be implemented: args[].toString == []
===========================================================================
agora.AgoraTest.main(java.lang.String[]):::EXIT
    Variables: args args.getClass().getName() args[] args[].toString orig(args) orig(args.getClass().getName()) orig(args[]) orig(args[].toString) size(args[]) size(args[])-1 orig(size(args[])) orig(size(args[]))-1
      Unmodified variables: args args.getClass().getName() args[] args[].toString size(args[])
(args.length == 0) && ((\forall int i; (0 <= i && i <= args.length-1) ==> (args[i] != null)))
warning: method daikon.inv.unary.stringsequence.OneOfStringSequence.format(OutputFormat:ESC/Java) needs to be implemented: args[].toString == []
===========================================================================
agora.AgoraTest.stringParameter1(java.lang.String):::ENTER
    Variables: this s s.toString
s != null
daikon.inv.unary.string.IsNumeric.PATTERN.matcher(s.toString).matches()
warning: method daikon.inv.unary.string.PrintableString.format(OutputFormat:ESC/Java) needs to be implemented: s.toString is printable
===========================================================================
agora.AgoraTest.stringParameter1(java.lang.String):::EXIT
    Variables: this s s.toString orig(this) orig(s) orig(s.toString)
      Unmodified variables: this s s.toString
daikon.inv.unary.string.IsNumeric.PATTERN.matcher(s.toString).matches()
warning: method daikon.inv.unary.string.PrintableString.format(OutputFormat:ESC/Java) needs to be implemented: s.toString is printable
