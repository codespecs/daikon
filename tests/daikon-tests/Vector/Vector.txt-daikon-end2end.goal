===========================================================================
javautil.Vector13:::CLASS
===========================================================================
javautil.Vector13:::OBJECT
this.elementData != null
this.elementData.getClass().getName() == java.lang.Object[].class
this.elementCount >= 0
this.capacityIncrement >= 0
this.elementData[this.elementCount..] elements == null
===========================================================================
javautil.Vector13.Vector13():::EXIT
this.elementCount == this.capacityIncrement
this.elementData[] contains only nulls and has only one value, of length 10
this.elementData[] elements == null
this.elementData[].getClass().getName() == [null, null, null, null, null, null, null, null, null, null]
this.elementData[].getClass().getName() elements == null
this.elementCount == 0
size(this.elementData[]) == 10
this.elementData[this.elementCount+1..] contains only nulls and has only one value, of length 9
this.elementData[0..this.elementCount] == [null]
this.elementData[0..this.elementCount-1] == []
this.elementData[] elements == this.elementData[this.elementCount]
===========================================================================
javautil.Vector13.Vector13(int):::ENTER
initialCapacity >= 0
===========================================================================
javautil.Vector13.Vector13(int):::EXIT
this.elementCount == this.capacityIncrement
orig(initialCapacity) == size(this.elementData[])
this.elementData[] elements == null
this.elementData[].getClass().getName() elements == null
this.elementCount == 0
this.elementData[orig(initialCapacity)..] == []
this.elementCount <= orig(initialCapacity)
===========================================================================
javautil.Vector13.Vector13(int, int):::ENTER
initialCapacity >= 0
capacityIncrement >= 0
===========================================================================
javautil.Vector13.Vector13(int, int):::EXIT
this.capacityIncrement == orig(capacityIncrement)
orig(initialCapacity) == size(this.elementData[])
this.elementData[] elements == null
this.elementData[].getClass().getName() elements == null
this.elementCount == 0
this.elementData[orig(initialCapacity)..] == []
this.elementCount <= this.capacityIncrement
this.elementCount <= orig(initialCapacity)
===========================================================================
javautil.Vector13.addElement(java.lang.Object):::ENTER
obj.getClass().getName() is printable
this.elementData.getClass().getName() != obj.getClass().getName()
(size(this.elementData[]) == 0) ==> (this.elementCount == 0)
this.elementCount <= size(this.elementData[])
===========================================================================
javautil.Vector13.addElement(java.lang.Object):::ENTER;condition="not(elementCount == 0)"
===========================================================================
javautil.Vector13.addElement(java.lang.Object):::EXIT
this.elementData.getClass().getName() == orig(this.elementData.getClass().getName())
this.capacityIncrement == orig(this.capacityIncrement)
this.elementData[this.elementCount-1] == this.elementData[orig(this.elementCount)]
this.elementData[0..orig(this.elementCount)-1] == orig(this.elementData[0..this.elementCount-1])
(this.elementCount == 1)  <==>  (orig(this.elementCount) == 0)
(this.elementCount == 1)  ==>  ((orig(size(this.elementData[]))-1 == 0) ==> (size(this.elementData[])-1 == 0))
(this.elementCount == 1)  ==>  (orig(size(this.elementData[])) % size(this.elementData[]) == 0)
(this.elementCount == 1)  ==>  (orig(size(this.elementData[])) is a bitwise subset of size(this.elementData[]))
(this.elementCount == 1)  ==>  (orig(this.elementCount) is a pointer)
(this.elementCount == 1)  ==>  (orig(this.elementData[]) elements == null)
(this.elementCount == 1)  ==>  (orig(this.elementData[].getClass().getName()) elements == null)
(this.elementCount == 1)  ==>  (size(this.elementData[]) >= 1)
(this.elementCount == 1)  ==>  (size(this.elementData[])-1 is a bitwise subset of orig(size(this.elementData[]))-1)
(this.elementCount == 1)  ==>  (this.capacityIncrement >= orig(this.elementCount))
(this.elementCount == 1)  ==>  (this.elementCount == (org.plumelib.util.MathPlume.gcd(size(this.elementData[]), orig(size(this.elementData[]))-1)))
(this.elementCount == 1)  ==>  (this.elementData[0..orig(this.elementCount)-1] == [])
(this.elementCount == 1)  ==>  (this.elementData[0..this.elementCount-1] elements == this.elementData[this.elementCount-1])
(this.elementCount >= 2)  <==>  (orig(this.elementCount) >= 1)
(this.elementCount >= 2)  ==>  (orig(size(this.elementData[])) >= 1)
(this.elementCount >= 2)  ==>  (size(this.elementData[]) >= 2)
(this.elementCount >= 2)  ==>  (this.elementCount - orig(this.elementCount) - 1 == 0)
this.elementCount >= 1
size(this.elementData[]) >= 1
this.elementData.getClass().getName() != orig(obj.getClass().getName())
orig(obj.getClass().getName()) in this.elementData[].getClass().getName()
this.elementCount - orig(this.elementCount) - 1 == 0
this.elementCount <= size(this.elementData[])
(size(this.elementData[])-1 == 0) ==> (orig(this.elementCount) == 0)
orig(this.elementCount) <= size(this.elementData[])-1
size(this.elementData[]) >= orig(size(this.elementData[]))
size(this.elementData[])-1 >= orig(size(this.elementData[]))-1
===========================================================================
javautil.Vector13.addElement(java.lang.Object):::EXIT;condition="not(elementCount == 0)"
===========================================================================
javautil.Vector13.addElement(java.lang.Object):::EXIT;condition="orig(elementCount == 0)"
this.elementData.getClass().getName() == orig(this.elementData.getClass().getName())
this.capacityIncrement == orig(this.capacityIncrement)
this.elementData[this.elementCount-1] == this.elementData[orig(this.elementCount)]
this.elementData != null
this.elementData.getClass().getName() == java.lang.Object[].class
this.elementCount == 1
this.capacityIncrement >= 0
orig(this.elementData) != null
orig(this.elementData[]) elements == null
orig(this.elementData[].getClass().getName()) elements == null
orig(this.elementCount) == 0
orig(obj.getClass().getName()) is printable
size(this.elementData[]) >= 1
this.elementData[this.elementCount..] elements == null
this.elementData[0..orig(this.elementCount)-1] == []
this.elementData.getClass().getName() != orig(obj.getClass().getName())
orig(obj.getClass().getName()) in this.elementData[].getClass().getName()
this.elementCount <= size(this.elementData[])
this.capacityIncrement >= orig(this.elementCount)
orig(this.elementCount) <= size(this.elementData[])-1
orig(this.elementCount) <= orig(size(this.elementData[]))
orig(size(this.elementData[])) % size(this.elementData[]) == 0
orig(size(this.elementData[])) is a bitwise subset of size(this.elementData[])
size(this.elementData[]) >= orig(size(this.elementData[]))
(orig(size(this.elementData[]))-1 == 0) ==> (size(this.elementData[])-1 == 0)
size(this.elementData[])-1 >= orig(size(this.elementData[]))-1
size(this.elementData[])-1 is a bitwise subset of orig(size(this.elementData[]))-1
this.elementData[0..this.elementCount-1] elements == this.elementData[this.elementCount-1]
this.elementCount == (org.plumelib.util.MathPlume.gcd(size(this.elementData[]), orig(size(this.elementData[]))-1))
===========================================================================
javautil.Vector13.addElement(java.lang.Object):::EXIT;condition="not(orig(elementCount == 0))"
this.elementData.getClass().getName() == orig(this.elementData.getClass().getName())
this.capacityIncrement == orig(this.capacityIncrement)
this.elementData[this.elementCount-1] == this.elementData[orig(this.elementCount)]
this.elementData[orig(this.elementCount)-1] == orig(this.elementData[this.elementCount-1])
this.elementData[0..orig(this.elementCount)-1] == orig(this.elementData[0..this.elementCount-1])
this.elementData != null
this.elementData.getClass().getName() == java.lang.Object[].class
this.elementCount >= 2
this.capacityIncrement >= 0
orig(this.elementData) != null
orig(this.elementCount) >= 1
orig(obj.getClass().getName()) is printable
size(this.elementData[]) >= 2
orig(size(this.elementData[])) >= 1
this.elementData[this.elementCount..] elements == null
orig(this.elementData[this.elementCount..]) elements == null
this.elementData.getClass().getName() != orig(obj.getClass().getName())
orig(obj.getClass().getName()) in this.elementData[].getClass().getName()
this.elementCount - orig(this.elementCount) - 1 == 0
this.elementCount <= size(this.elementData[])
orig(this.elementCount) <= size(this.elementData[])-1
orig(this.elementCount) <= orig(size(this.elementData[]))
size(this.elementData[]) >= orig(size(this.elementData[]))
size(this.elementData[])-1 >= orig(size(this.elementData[]))-1
===========================================================================
javautil.Vector13.clone():::ENTER
(this.elementCount == 0)  ==>  (this.elementCount <= this.capacityIncrement)
(this.elementCount == 0)  ==>  (this.elementCount is a pointer)
(this.elementCount == 0)  ==>  (this.elementData[0..this.elementCount-1] == [])
(this.elementCount == 0)  ==>  (this.elementData[] elements == null)
(this.elementCount == 0)  ==>  (this.elementData[].getClass().getName() elements == null)
(size(this.elementData[]) == 0) ==> (this.elementCount == 0)
this.elementCount <= size(this.elementData[])
===========================================================================
javautil.Vector13.clone():::ENTER;condition="elementCount == 0"
this.elementData[] elements == null
this.elementData[].getClass().getName() elements == null
this.elementCount == 0
this.elementData[0..this.elementCount-1] == []
this.elementCount <= this.capacityIncrement
===========================================================================
javautil.Vector13.clone():::ENTER;condition="not(elementCount == 0)"
this.elementCount >= 1
===========================================================================
javautil.Vector13.clone():::EXIT
this.elementData == orig(this.elementData)
this.elementData.getClass().getName() == orig(this.elementData.getClass().getName())
this.elementData[] == orig(this.elementData[])
this.elementCount == orig(this.elementCount)
this.capacityIncrement == orig(this.capacityIncrement)
(this.elementCount == 0)  ==>  (this.elementCount <= this.capacityIncrement)
(this.elementCount == 0)  ==>  (this.elementCount is a pointer)
(this.elementCount == 0)  ==>  (this.elementData[0..this.elementCount-1] == [])
(this.elementCount == 0)  ==>  (this.elementData[] elements == null)
(this.elementCount == 0)  ==>  (this.elementData[].getClass().getName() elements == null)
return != null
return.getClass().getName() == javautil.Vector13.class
this.elementData.getClass().getName() != return.getClass().getName()
(size(this.elementData[]) == 0) ==> (this.elementCount == 0)
this.elementCount <= size(this.elementData[])
===========================================================================
javautil.Vector13.clone():::EXIT;condition="elementCount == 0"
this.elementData[] elements == null
this.elementData[].getClass().getName() elements == null
this.elementCount == 0
this.elementData[0..this.elementCount-1] == []
this.elementCount <= this.capacityIncrement
===========================================================================
javautil.Vector13.clone():::EXIT;condition="not(elementCount == 0)"
this.elementCount >= 1
===========================================================================
javautil.Vector13.clone():::EXIT;condition="orig(elementCount == 0)"
this.elementData == orig(this.elementData)
this.elementData.getClass().getName() == orig(this.elementData.getClass().getName())
this.elementData[] == orig(this.elementData[])
this.elementCount == orig(this.elementCount)
this.capacityIncrement == orig(this.capacityIncrement)
this.elementData != null
this.elementData.getClass().getName() == java.lang.Object[].class
this.elementData[] elements == null
this.elementData[].getClass().getName() elements == null
this.elementCount == 0
this.capacityIncrement >= 0
return != null
return.getClass().getName() == javautil.Vector13.class
this.elementData[0..this.elementCount-1] == []
this.elementData.getClass().getName() != return.getClass().getName()
this.elementCount <= this.capacityIncrement
this.elementCount <= size(this.elementData[])
===========================================================================
javautil.Vector13.clone():::EXIT;condition="not(orig(elementCount == 0))"
this.elementData == orig(this.elementData)
this.elementData.getClass().getName() == orig(this.elementData.getClass().getName())
this.elementData[] == orig(this.elementData[])
this.elementCount == orig(this.elementCount)
this.capacityIncrement == orig(this.capacityIncrement)
this.elementData != null
this.elementData.getClass().getName() == java.lang.Object[].class
this.elementCount >= 1
this.capacityIncrement >= 0
return != null
return.getClass().getName() == javautil.Vector13.class
this.elementData[this.elementCount..] elements == null
this.elementData.getClass().getName() != return.getClass().getName()
this.elementCount <= size(this.elementData[])
===========================================================================
javautil.Vector13.contains(java.lang.Object):::ENTER
(this.elementCount == 0)  ==>  (this.elementCount <= this.capacityIncrement)
(this.elementCount == 0)  ==>  (this.elementCount is a pointer)
(this.elementCount == 0)  ==>  (this.elementData[0..this.elementCount-1] == [])
(this.elementCount == 0)  ==>  (this.elementData[] elements == null)
(this.elementCount == 0)  ==>  (this.elementData[].getClass().getName() elements == null)
elem != null
elem.getClass().getName() is printable
this.elementData.getClass().getName() != elem.getClass().getName()
(size(this.elementData[]) == 0) ==> (this.elementCount == 0)
this.elementCount <= size(this.elementData[])
===========================================================================
javautil.Vector13.contains(java.lang.Object):::ENTER;condition="elementCount == 0"
this.elementData[] elements == null
this.elementData[].getClass().getName() elements == null
this.elementCount == 0
this.elementData[0..this.elementCount-1] == []
this.elementCount <= this.capacityIncrement
===========================================================================
javautil.Vector13.contains(java.lang.Object):::ENTER;condition="not(elementCount == 0)"
this.elementCount >= 1
===========================================================================
javautil.Vector13.contains(java.lang.Object):::EXIT
this.elementData == orig(this.elementData)
this.elementData.getClass().getName() == orig(this.elementData.getClass().getName())
this.elementData[] == orig(this.elementData[])
this.elementCount == orig(this.elementCount)
this.capacityIncrement == orig(this.capacityIncrement)
(return == true)  ==>  (orig(elem.getClass().getName()) in this.elementData[].getClass().getName())
(return == true)  ==>  (this.elementCount >= 1)
(this.elementCount == 0)  ==>  (return == false)
(this.elementCount == 0)  ==>  (this.elementCount <= this.capacityIncrement)
(this.elementCount == 0)  ==>  (this.elementCount is a pointer)
(this.elementCount == 0)  ==>  (this.elementData[0..this.elementCount-1] == [])
(this.elementCount == 0)  ==>  (this.elementData[] elements == null)
(this.elementCount == 0)  ==>  (this.elementData[].getClass().getName() elements == null)
this.elementData.getClass().getName() != orig(elem.getClass().getName())
(size(this.elementData[]) == 0) ==> (this.elementCount == 0)
this.elementCount <= size(this.elementData[])
===========================================================================
javautil.Vector13.contains(java.lang.Object):::EXIT;condition="return == true"
this.elementCount >= 1
return == true
orig(elem.getClass().getName()) in this.elementData[].getClass().getName()
===========================================================================
javautil.Vector13.contains(java.lang.Object):::EXIT;condition="not(return == true)"
return == false
===========================================================================
javautil.Vector13.contains(java.lang.Object):::EXIT;condition="elementCount == 0"
this.elementData == orig(this.elementData)
this.elementData.getClass().getName() == orig(this.elementData.getClass().getName())
this.elementData[] == orig(this.elementData[])
this.elementCount == orig(this.elementCount)
this.capacityIncrement == orig(this.capacityIncrement)
this.elementData != null
this.elementData.getClass().getName() == java.lang.Object[].class
this.elementData[] elements == null
this.elementData[].getClass().getName() elements == null
this.elementCount == 0
this.capacityIncrement >= 0
return == false
this.elementData[0..this.elementCount-1] == []
this.elementData.getClass().getName() != orig(elem.getClass().getName())
this.elementCount <= this.capacityIncrement
this.elementCount <= size(this.elementData[])
===========================================================================
javautil.Vector13.contains(java.lang.Object):::EXIT;condition="not(elementCount == 0)"
this.elementData == orig(this.elementData)
this.elementData.getClass().getName() == orig(this.elementData.getClass().getName())
this.elementData[] == orig(this.elementData[])
this.elementCount == orig(this.elementCount)
this.capacityIncrement == orig(this.capacityIncrement)
this.elementData != null
this.elementData.getClass().getName() == java.lang.Object[].class
this.elementCount >= 1
this.capacityIncrement >= 0
this.elementData[this.elementCount..] elements == null
this.elementData.getClass().getName() != orig(elem.getClass().getName())
this.elementCount <= size(this.elementData[])
===========================================================================
javautil.Vector13.contains(java.lang.Object):::EXIT;condition="orig(elementCount == 0)"
this.elementData == orig(this.elementData)
this.elementData.getClass().getName() == orig(this.elementData.getClass().getName())
this.elementData[] == orig(this.elementData[])
this.elementCount == orig(this.elementCount)
this.capacityIncrement == orig(this.capacityIncrement)
this.elementData != null
this.elementData.getClass().getName() == java.lang.Object[].class
this.elementData[] elements == null
this.elementData[].getClass().getName() elements == null
this.elementCount == 0
this.capacityIncrement >= 0
return == false
orig(elem) != null
orig(elem.getClass().getName()) is printable
this.elementData[0..this.elementCount-1] == []
this.elementData.getClass().getName() != orig(elem.getClass().getName())
this.elementCount <= this.capacityIncrement
this.elementCount <= size(this.elementData[])
===========================================================================
javautil.Vector13.contains(java.lang.Object):::EXIT;condition="not(orig(elementCount == 0))"
this.elementData == orig(this.elementData)
this.elementData.getClass().getName() == orig(this.elementData.getClass().getName())
this.elementData[] == orig(this.elementData[])
this.elementCount == orig(this.elementCount)
this.capacityIncrement == orig(this.capacityIncrement)
this.elementData != null
this.elementData.getClass().getName() == java.lang.Object[].class
this.elementCount >= 1
this.capacityIncrement >= 0
orig(elem) != null
orig(elem.getClass().getName()) is printable
this.elementData[this.elementCount..] elements == null
this.elementData.getClass().getName() != orig(elem.getClass().getName())
this.elementCount <= size(this.elementData[])
===========================================================================
javautil.Vector13.copyInto(java.lang.Object[]):::ENTER
this.elementData.getClass().getName() == anArray.getClass().getName()
anArray != null
anArray[this.elementCount..] elements are equal
(size(this.elementData[]) == 0) ==> (this.elementCount == 0)
this.elementCount <= size(this.elementData[])
(size(anArray[]) == 0) ==> (this.elementCount == 0)
this.elementCount <= size(anArray[])
===========================================================================
javautil.Vector13.copyInto(java.lang.Object[]):::EXIT
this.elementData == orig(this.elementData)
this.elementData.getClass().getName() == orig(this.elementData.getClass().getName())
this.elementData.getClass().getName() == orig(anArray.getClass().getName())
this.elementData[] == orig(this.elementData[])
this.elementCount == orig(this.elementCount)
this.capacityIncrement == orig(this.capacityIncrement)
this.elementData[0..this.elementCount-1] == anArray[0..this.elementCount-1]
this.elementData[0..orig(this.elementCount)-1] == anArray[0..this.elementCount-1]
anArray[this.elementCount..] == orig(anArray[post(this.elementCount)..])
anArray[this.elementCount..] == orig(anArray[this.elementCount..])
anArray[0..this.elementCount-1] == orig(this.elementData[0..post(this.elementCount)-1])
anArray[0..this.elementCount-1] == orig(this.elementData[0..this.elementCount-1])
anArray[this.elementCount..] elements are equal
(size(this.elementData[]) == 0) ==> (this.elementCount == 0)
this.elementCount <= size(this.elementData[])
(orig(size(anArray[])) == 0) ==> (this.elementCount == 0)
this.elementCount <= orig(size(anArray[]))
===========================================================================
javautil.Vector13.elementAt(int):::ENTER
index >= 0
this.elementCount > index
this.elementCount <= size(this.elementData[])
(size(this.elementData[])-1 == 0) ==> (index == 0)
index <= size(this.elementData[])-1
===========================================================================
javautil.Vector13.elementAt(int):::ENTER;condition="not(elementCount == 0)"
===========================================================================
javautil.Vector13.elementAt(int):::EXIT
this.elementData == orig(this.elementData)
this.elementData.getClass().getName() == orig(this.elementData.getClass().getName())
this.elementData[] == orig(this.elementData[])
this.elementCount == orig(this.elementCount)
this.capacityIncrement == orig(this.capacityIncrement)
return.getClass().getName() is printable
this.elementData.getClass().getName() != return.getClass().getName()
return.getClass().getName() in this.elementData[].getClass().getName()
this.elementCount > orig(index)
this.elementCount <= size(this.elementData[])
(size(this.elementData[])-1 == 0) ==> (orig(index) == 0)
orig(index) <= size(this.elementData[])-1
===========================================================================
javautil.Vector13.elementAt(int):::EXIT;condition="not(elementCount == 0)"
===========================================================================
javautil.Vector13.elementAt(int):::EXIT;condition="not(orig(elementCount == 0))"
this.elementData == orig(this.elementData)
this.elementData.getClass().getName() == orig(this.elementData.getClass().getName())
this.elementData[] == orig(this.elementData[])
this.elementCount == orig(this.elementCount)
this.capacityIncrement == orig(this.capacityIncrement)
this.elementData != null
this.elementData.getClass().getName() == java.lang.Object[].class
this.capacityIncrement >= 0
return.getClass().getName() is printable
orig(index) >= 0
this.elementData[this.elementCount..] elements == null
this.elementData.getClass().getName() != return.getClass().getName()
return.getClass().getName() in this.elementData[].getClass().getName()
this.elementCount > orig(index)
this.elementCount <= size(this.elementData[])
(size(this.elementData[])-1 == 0) ==> (orig(index) == 0)
orig(index) <= size(this.elementData[])-1
===========================================================================
javautil.Vector13.elementAt(int):::EXIT;condition="not(index >= elementCount)"
this.elementData == orig(this.elementData)
this.elementData.getClass().getName() == orig(this.elementData.getClass().getName())
this.elementData[] == orig(this.elementData[])
this.elementCount == orig(this.elementCount)
this.capacityIncrement == orig(this.capacityIncrement)
this.elementData != null
this.elementData.getClass().getName() == java.lang.Object[].class
this.capacityIncrement >= 0
return.getClass().getName() is printable
orig(index) >= 0
this.elementData[this.elementCount..] elements == null
this.elementData.getClass().getName() != return.getClass().getName()
return.getClass().getName() in this.elementData[].getClass().getName()
this.elementCount > orig(index)
this.elementCount <= size(this.elementData[])
(size(this.elementData[])-1 == 0) ==> (orig(index) == 0)
orig(index) <= size(this.elementData[])-1
===========================================================================
javautil.Vector13.elementAt(int):::EXIT;condition="not(orig(index >= elementCount))"
this.elementData == orig(this.elementData)
this.elementData.getClass().getName() == orig(this.elementData.getClass().getName())
this.elementData[] == orig(this.elementData[])
this.elementCount == orig(this.elementCount)
this.capacityIncrement == orig(this.capacityIncrement)
this.elementData != null
this.elementData.getClass().getName() == java.lang.Object[].class
this.capacityIncrement >= 0
return.getClass().getName() is printable
orig(index) >= 0
this.elementData[this.elementCount..] elements == null
this.elementData.getClass().getName() != return.getClass().getName()
return.getClass().getName() in this.elementData[].getClass().getName()
this.elementCount > orig(index)
this.elementCount <= size(this.elementData[])
(size(this.elementData[])-1 == 0) ==> (orig(index) == 0)
orig(index) <= size(this.elementData[])-1
===========================================================================
javautil.Vector13.elements():::ENTER
(this.elementCount == 0)  ==>  (this.elementCount <= this.capacityIncrement)
(this.elementCount == 0)  ==>  (this.elementCount is a pointer)
(this.elementCount == 0)  ==>  (this.elementData[0..this.elementCount-1] == [])
(this.elementCount == 0)  ==>  (this.elementData[] elements == null)
(this.elementCount == 0)  ==>  (this.elementData[].getClass().getName() elements == null)
(size(this.elementData[]) == 0) ==> (this.elementCount == 0)
this.elementCount <= size(this.elementData[])
===========================================================================
javautil.Vector13.elements():::ENTER;condition="elementCount == 0"
this.elementData[] elements == null
this.elementData[].getClass().getName() elements == null
this.elementCount == 0
this.elementData[0..this.elementCount-1] == []
this.elementCount <= this.capacityIncrement
===========================================================================
javautil.Vector13.elements():::ENTER;condition="not(elementCount == 0)"
this.elementCount >= 1
===========================================================================
javautil.Vector13.elements():::EXIT
this.elementData == orig(this.elementData)
this.elementData.getClass().getName() == orig(this.elementData.getClass().getName())
this.elementData[] == orig(this.elementData[])
this.elementCount == orig(this.elementCount)
this.capacityIncrement == orig(this.capacityIncrement)
(this.elementCount == 0)  ==>  (this.elementCount <= this.capacityIncrement)
(this.elementCount == 0)  ==>  (this.elementCount is a pointer)
(this.elementCount == 0)  ==>  (this.elementData[0..this.elementCount-1] == [])
(this.elementCount == 0)  ==>  (this.elementData[] elements == null)
(this.elementCount == 0)  ==>  (this.elementData[].getClass().getName() elements == null)
return != null
return.getClass().getName() == javautil.VectorEnumerator13.class
this.elementData.getClass().getName() != return.getClass().getName()
(size(this.elementData[]) == 0) ==> (this.elementCount == 0)
this.elementCount <= size(this.elementData[])
===========================================================================
javautil.Vector13.elements():::EXIT;condition="elementCount == 0"
this.elementData[] elements == null
this.elementData[].getClass().getName() elements == null
this.elementCount == 0
this.elementData[0..this.elementCount-1] == []
this.elementCount <= this.capacityIncrement
===========================================================================
javautil.Vector13.elements():::EXIT;condition="not(elementCount == 0)"
this.elementCount >= 1
===========================================================================
javautil.Vector13.elements():::EXIT;condition="orig(elementCount == 0)"
this.elementData == orig(this.elementData)
this.elementData.getClass().getName() == orig(this.elementData.getClass().getName())
this.elementData[] == orig(this.elementData[])
this.elementCount == orig(this.elementCount)
this.capacityIncrement == orig(this.capacityIncrement)
this.elementData != null
this.elementData.getClass().getName() == java.lang.Object[].class
this.elementData[] elements == null
this.elementData[].getClass().getName() elements == null
this.elementCount == 0
this.capacityIncrement >= 0
return != null
return.getClass().getName() == javautil.VectorEnumerator13.class
this.elementData[0..this.elementCount-1] == []
this.elementData.getClass().getName() != return.getClass().getName()
this.elementCount <= this.capacityIncrement
this.elementCount <= size(this.elementData[])
===========================================================================
javautil.Vector13.elements():::EXIT;condition="not(orig(elementCount == 0))"
this.elementData == orig(this.elementData)
this.elementData.getClass().getName() == orig(this.elementData.getClass().getName())
this.elementData[] == orig(this.elementData[])
this.elementCount == orig(this.elementCount)
this.capacityIncrement == orig(this.capacityIncrement)
this.elementData != null
this.elementData.getClass().getName() == java.lang.Object[].class
this.elementCount >= 1
this.capacityIncrement >= 0
return != null
return.getClass().getName() == javautil.VectorEnumerator13.class
this.elementData[this.elementCount..] elements == null
this.elementData.getClass().getName() != return.getClass().getName()
this.elementCount <= size(this.elementData[])
===========================================================================
javautil.Vector13.ensureCapacity(int):::ENTER
minCapacity >= 0
(size(this.elementData[]) == 0) ==> (this.elementCount == 0)
this.elementCount <= size(this.elementData[])
===========================================================================
javautil.Vector13.ensureCapacity(int):::EXIT
this.elementData.getClass().getName() == orig(this.elementData.getClass().getName())
this.elementCount == orig(this.elementCount)
this.capacityIncrement == orig(this.capacityIncrement)
this.elementData[0..this.elementCount-1] == orig(this.elementData[0..post(this.elementCount)-1])
this.elementData[0..this.elementCount-1] == orig(this.elementData[0..this.elementCount-1])
(orig(minCapacity) <= orig(size(this.elementData[])))  ==>  ((orig(size(this.elementData[])) == 0) ==> (orig(minCapacity) == 0))
(orig(minCapacity) <= orig(size(this.elementData[])))  ==>  (this.elementData == orig(this.elementData))
(orig(minCapacity) <= orig(size(this.elementData[])))  ==>  (this.elementData[] == orig(this.elementData[]))
(size(this.elementData[])-1 >= orig(size(this.elementData[])))  ==>  ((size(this.elementData[])-1 == 0) ==> (orig(size(this.elementData[])) == 0))
(size(this.elementData[])-1 >= orig(size(this.elementData[])))  ==>  ((size(this.elementData[])-1 == 0) ==> (this.elementCount == 0))
(size(this.elementData[])-1 >= orig(size(this.elementData[])))  ==>  (orig(minCapacity) - orig(size(this.elementData[])) - 1 == 0)
(size(this.elementData[])-1 >= orig(size(this.elementData[])))  ==>  (orig(this.elementData[]) is a subsequence of this.elementData[0..orig(minCapacity)-1])
(size(this.elementData[])-1 >= orig(size(this.elementData[])))  ==>  (orig(this.elementData[]) is a subset of this.elementData[0..orig(minCapacity)-1])
(size(this.elementData[])-1 >= orig(size(this.elementData[])))  ==>  (orig(this.elementData[this.elementCount..]) is a subsequence of this.elementData[0..orig(minCapacity)-1])
(size(this.elementData[])-1 >= orig(size(this.elementData[])))  ==>  (orig(this.elementData[this.elementCount..]) is a subsequence of this.elementData[orig(this.capacityIncrement)..])
(size(this.elementData[])-1 >= orig(size(this.elementData[])))  ==>  (orig(this.elementData[this.elementCount..]) is a subsequence of this.elementData[this.capacityIncrement..])
(size(this.elementData[])-1 >= orig(size(this.elementData[])))  ==>  (this.capacityIncrement <= size(this.elementData[]))
(size(this.elementData[])-1 >= orig(size(this.elementData[])))  ==>  (this.elementCount < orig(minCapacity))
(size(this.elementData[])-1 >= orig(size(this.elementData[])))  ==>  (this.elementCount <= size(this.elementData[])-1)
orig(this.elementData[]) is a subsequence of this.elementData[]
this.elementData[] is a superset of orig(this.elementData[])
(size(this.elementData[]) == 0) ==> (this.elementCount == 0)
this.elementCount <= size(this.elementData[])
(orig(size(this.elementData[])) == 0) ==> (this.elementCount == 0)
this.elementCount <= orig(size(this.elementData[]))
(size(this.elementData[]) == 0) ==> (orig(minCapacity) == 0)
orig(minCapacity) <= size(this.elementData[])
(size(this.elementData[]) == 0) ==> (orig(size(this.elementData[])) == 0)
size(this.elementData[]) >= orig(size(this.elementData[]))
size(this.elementData[])-1 >= orig(size(this.elementData[]))-1
orig(this.elementData[this.elementCount..]) is a subsequence of this.elementData[this.elementCount..]
===========================================================================
javautil.Vector13.ensureCapacity(int):::EXIT;condition="not(minCapacity > elementData.length)"
===========================================================================
javautil.Vector13.ensureCapacity(int):::EXIT;condition="orig(minCapacity > elementData.length)"
this.elementData.getClass().getName() == orig(this.elementData.getClass().getName())
this.elementCount == orig(this.elementCount)
this.capacityIncrement == orig(this.capacityIncrement)
this.elementData[this.elementCount] == this.elementData[orig(minCapacity)-1]
this.elementData[0..this.elementCount-1] == orig(this.elementData[0..post(this.elementCount)-1])
this.elementData[0..this.elementCount-1] == orig(this.elementData[0..this.elementCount-1])
this.elementData != null
this.elementData.getClass().getName() == java.lang.Object[].class
this.elementCount >= 0
this.capacityIncrement >= 0
orig(this.elementData) != null
this.elementData[this.elementCount..] elements == null
orig(this.elementData[this.elementCount..]) elements == null
this.elementData[] is a superset of orig(this.elementData[])
this.elementCount < orig(minCapacity)
(size(this.elementData[])-1 == 0) ==> (this.elementCount == 0)
this.elementCount <= size(this.elementData[])-1
(orig(size(this.elementData[])) == 0) ==> (this.elementCount == 0)
this.elementCount <= orig(size(this.elementData[]))
this.capacityIncrement <= size(this.elementData[])
orig(this.elementData[]) is a subset of this.elementData[0..this.elementCount]
orig(this.elementData[]) is a subsequence of this.elementData[0..orig(minCapacity)-1]
orig(this.elementData[]) is a subset of this.elementData[0..orig(minCapacity)-1]
orig(minCapacity) <= size(this.elementData[])
orig(minCapacity) - orig(size(this.elementData[])) - 1 == 0
(size(this.elementData[])-1 == 0) ==> (orig(size(this.elementData[])) == 0)
size(this.elementData[])-1 >= orig(size(this.elementData[]))
this.elementData[this.elementCount..] elements == this.elementData[this.elementCount]
orig(this.elementData[this.elementCount..]) is a subsequence of this.elementData[this.elementCount..]
orig(this.elementData[this.elementCount..]) is a subsequence of this.elementData[this.elementCount+1..]
orig(this.elementData[this.elementCount..]) is a subsequence of this.elementData[this.capacityIncrement..]
orig(this.elementData[this.elementCount..]) is a subsequence of this.elementData[0..orig(minCapacity)-1]
===========================================================================
javautil.Vector13.ensureCapacity(int):::EXIT;condition="not(orig(minCapacity > elementData.length))"
this.elementData == orig(this.elementData)
this.elementData.getClass().getName() == orig(this.elementData.getClass().getName())
this.elementData[] == orig(this.elementData[])
this.elementCount == orig(this.elementCount)
this.capacityIncrement == orig(this.capacityIncrement)
this.elementData != null
this.elementData.getClass().getName() == java.lang.Object[].class
this.elementCount >= 0
this.capacityIncrement >= 0
orig(minCapacity) >= 0
this.elementData[this.elementCount..] elements == null
(size(this.elementData[]) == 0) ==> (this.elementCount == 0)
this.elementCount <= size(this.elementData[])
(size(this.elementData[]) == 0) ==> (orig(minCapacity) == 0)
orig(minCapacity) <= size(this.elementData[])
===========================================================================
javautil.Vector13.ensureCapacityHelper(int):::ENTER
minCapacity >= 1
this.elementCount < minCapacity
(size(this.elementData[]) == 0) ==> (this.elementCount == 0)
this.elementCount <= size(this.elementData[])
minCapacity > size(this.elementData[])
===========================================================================
javautil.Vector13.ensureCapacityHelper(int):::ENTER;condition="not(minCapacity > elementData.length)"
===========================================================================
javautil.Vector13.ensureCapacityHelper(int):::EXIT
this.elementData.getClass().getName() == orig(this.elementData.getClass().getName())
this.elementCount == orig(this.elementCount)
this.capacityIncrement == orig(this.capacityIncrement)
this.elementData[this.elementCount] == this.elementData[orig(minCapacity)-1]
this.elementData[0..this.elementCount-1] == orig(this.elementData[0..post(this.elementCount)-1])
this.elementData[0..this.elementCount-1] == orig(this.elementData[0..this.elementCount-1])
size(this.elementData[]) >= 1
this.elementData[] is a superset of orig(this.elementData[])
this.elementCount < orig(minCapacity)
(size(this.elementData[])-1 == 0) ==> (this.elementCount == 0)
this.elementCount <= size(this.elementData[])-1
(orig(size(this.elementData[])) == 0) ==> (this.elementCount == 0)
this.elementCount <= orig(size(this.elementData[]))
this.capacityIncrement <= size(this.elementData[])
orig(this.elementData[]) is a subset of this.elementData[0..this.elementCount]
orig(this.elementData[]) is a subsequence of this.elementData[0..orig(minCapacity)-1]
orig(this.elementData[]) is a subset of this.elementData[0..orig(minCapacity)-1]
orig(minCapacity) <= size(this.elementData[])
(size(this.elementData[])-1 == 0) ==> (orig(size(this.elementData[])) == 0)
size(this.elementData[])-1 >= orig(size(this.elementData[]))
this.elementData[this.elementCount..] elements == this.elementData[this.elementCount]
orig(this.elementData[this.elementCount..]) is a subsequence of this.elementData[this.elementCount..]
orig(this.elementData[this.elementCount..]) is a subsequence of this.elementData[this.elementCount+1..]
orig(this.elementData[this.elementCount..]) is a subsequence of this.elementData[this.capacityIncrement..]
orig(this.elementData[this.elementCount..]) is a subsequence of this.elementData[0..orig(minCapacity)-1]
===========================================================================
javautil.Vector13.ensureCapacityHelper(int):::EXIT;condition="not(minCapacity > elementData.length)"
===========================================================================
javautil.Vector13.ensureCapacityHelper(int):::EXIT;condition="orig(minCapacity > elementData.length)"
this.elementData.getClass().getName() == orig(this.elementData.getClass().getName())
this.elementCount == orig(this.elementCount)
this.capacityIncrement == orig(this.capacityIncrement)
this.elementData[this.elementCount] == this.elementData[orig(minCapacity)-1]
this.elementData[0..this.elementCount-1] == orig(this.elementData[0..post(this.elementCount)-1])
this.elementData[0..this.elementCount-1] == orig(this.elementData[0..this.elementCount-1])
this.elementData != null
this.elementData.getClass().getName() == java.lang.Object[].class
this.elementCount >= 0
this.capacityIncrement >= 0
orig(this.elementData) != null
orig(minCapacity) >= 1
size(this.elementData[]) >= 1
this.elementData[this.elementCount..] elements == null
orig(this.elementData[this.elementCount..]) elements == null
this.elementData[] is a superset of orig(this.elementData[])
this.elementCount < orig(minCapacity)
(size(this.elementData[])-1 == 0) ==> (this.elementCount == 0)
this.elementCount <= size(this.elementData[])-1
(orig(size(this.elementData[])) == 0) ==> (this.elementCount == 0)
this.elementCount <= orig(size(this.elementData[]))
this.capacityIncrement <= size(this.elementData[])
orig(this.elementData[]) is a subset of this.elementData[0..this.elementCount]
orig(this.elementData[]) is a subsequence of this.elementData[0..orig(minCapacity)-1]
orig(this.elementData[]) is a subset of this.elementData[0..orig(minCapacity)-1]
orig(minCapacity) <= size(this.elementData[])
orig(minCapacity) > orig(size(this.elementData[]))
(size(this.elementData[])-1 == 0) ==> (orig(size(this.elementData[])) == 0)
size(this.elementData[])-1 >= orig(size(this.elementData[]))
this.elementData[this.elementCount..] elements == this.elementData[this.elementCount]
orig(this.elementData[this.elementCount..]) is a subsequence of this.elementData[this.elementCount..]
orig(this.elementData[this.elementCount..]) is a subsequence of this.elementData[this.elementCount+1..]
orig(this.elementData[this.elementCount..]) is a subsequence of this.elementData[this.capacityIncrement..]
orig(this.elementData[this.elementCount..]) is a subsequence of this.elementData[0..orig(minCapacity)-1]
===========================================================================
javautil.Vector13.firstElement():::ENTER
this.elementCount >= 1
this.elementCount <= size(this.elementData[])
===========================================================================
javautil.Vector13.firstElement():::ENTER;condition="not(elementCount == 0)"
===========================================================================
javautil.Vector13.firstElement():::EXIT
this.elementData == orig(this.elementData)
this.elementData.getClass().getName() == orig(this.elementData.getClass().getName())
this.elementData[] == orig(this.elementData[])
this.elementCount == orig(this.elementCount)
this.capacityIncrement == orig(this.capacityIncrement)
this.elementCount >= 1
return.getClass().getName() is printable
this.elementData.getClass().getName() != return.getClass().getName()
return.getClass().getName() in this.elementData[].getClass().getName()
this.elementCount <= size(this.elementData[])
===========================================================================
javautil.Vector13.firstElement():::EXIT;condition="not(elementCount == 0)"
===========================================================================
javautil.Vector13.firstElement():::EXIT;condition="not(orig(elementCount == 0))"
this.elementData == orig(this.elementData)
this.elementData.getClass().getName() == orig(this.elementData.getClass().getName())
this.elementData[] == orig(this.elementData[])
this.elementCount == orig(this.elementCount)
this.capacityIncrement == orig(this.capacityIncrement)
this.elementData != null
this.elementData.getClass().getName() == java.lang.Object[].class
this.elementCount >= 1
this.capacityIncrement >= 0
return.getClass().getName() is printable
this.elementData[this.elementCount..] elements == null
this.elementData.getClass().getName() != return.getClass().getName()
return.getClass().getName() in this.elementData[].getClass().getName()
this.elementCount <= size(this.elementData[])
===========================================================================
javautil.Vector13.indexOf(java.lang.Object):::ENTER
(this.elementCount == 0)  ==>  (this.elementCount <= this.capacityIncrement)
(this.elementCount == 0)  ==>  (this.elementCount is a pointer)
(this.elementCount == 0)  ==>  (this.elementData[0..this.elementCount-1] == [])
(this.elementCount == 0)  ==>  (this.elementData[] elements == null)
(this.elementCount == 0)  ==>  (this.elementData[].getClass().getName() elements == null)
elem != null
elem.getClass().getName() is printable
this.elementData.getClass().getName() != elem.getClass().getName()
(size(this.elementData[]) == 0) ==> (this.elementCount == 0)
this.elementCount <= size(this.elementData[])
===========================================================================
javautil.Vector13.indexOf(java.lang.Object):::ENTER;condition="elementCount == 0"
this.elementData[] elements == null
this.elementData[].getClass().getName() elements == null
this.elementCount == 0
this.elementData[0..this.elementCount-1] == []
this.elementCount <= this.capacityIncrement
===========================================================================
javautil.Vector13.indexOf(java.lang.Object):::ENTER;condition="not(elementCount == 0)"
this.elementCount >= 1
===========================================================================
javautil.Vector13.indexOf(java.lang.Object):::EXIT
this.elementData == orig(this.elementData)
this.elementData.getClass().getName() == orig(this.elementData.getClass().getName())
this.elementData[] == orig(this.elementData[])
this.elementCount == orig(this.elementCount)
this.capacityIncrement == orig(this.capacityIncrement)
(this.elementCount == 0)  ==>  (return == -1)
(this.elementCount == 0)  ==>  (this.capacityIncrement > return)
(this.elementCount == 0)  ==>  (this.elementCount <= this.capacityIncrement)
(this.elementCount == 0)  ==>  (this.elementCount is a pointer)
(this.elementCount == 0)  ==>  (this.elementData[0..return] == [])
(this.elementCount == 0)  ==>  (this.elementData[0..this.elementCount-1] == [])
(this.elementCount == 0)  ==>  (this.elementData[] elements == null)
(this.elementCount == 0)  ==>  (this.elementData[].getClass().getName() elements == null)
(this.elementCount == 0)  ==>  (this.elementData[return+1..] elements == null)
return >= -1
this.elementData.getClass().getName() != orig(elem.getClass().getName())
this.elementCount > return
(size(this.elementData[]) == 0) ==> (this.elementCount == 0)
this.elementCount <= size(this.elementData[])
return <= size(this.elementData[])-1
===========================================================================
javautil.Vector13.indexOf(java.lang.Object):::EXIT;condition="elementCount == 0"
this.elementData[] elements == null
this.elementData[].getClass().getName() elements == null
this.elementCount == 0
return == -1
this.elementData[0..return] == []
this.elementCount <= this.capacityIncrement
this.capacityIncrement > return
===========================================================================
javautil.Vector13.indexOf(java.lang.Object):::EXIT;condition="not(elementCount == 0)"
this.elementCount >= 1
===========================================================================
javautil.Vector13.indexOf(java.lang.Object):::EXIT;condition="orig(elementCount == 0)"
this.elementData == orig(this.elementData)
this.elementData.getClass().getName() == orig(this.elementData.getClass().getName())
this.elementData[] == orig(this.elementData[])
this.elementCount == orig(this.elementCount)
this.capacityIncrement == orig(this.capacityIncrement)
this.elementData != null
this.elementData.getClass().getName() == java.lang.Object[].class
this.elementData[] elements == null
this.elementData[].getClass().getName() elements == null
this.elementCount == 0
this.capacityIncrement >= 0
return == -1
orig(elem) != null
orig(elem.getClass().getName()) is printable
this.elementData[0..return] == []
this.elementData.getClass().getName() != orig(elem.getClass().getName())
this.elementCount <= this.capacityIncrement
this.elementCount <= size(this.elementData[])
this.capacityIncrement > return
return <= size(this.elementData[])-1
===========================================================================
javautil.Vector13.indexOf(java.lang.Object):::EXIT;condition="not(orig(elementCount == 0))"
this.elementData == orig(this.elementData)
this.elementData.getClass().getName() == orig(this.elementData.getClass().getName())
this.elementData[] == orig(this.elementData[])
this.elementCount == orig(this.elementCount)
this.capacityIncrement == orig(this.capacityIncrement)
this.elementData != null
this.elementData.getClass().getName() == java.lang.Object[].class
this.elementCount >= 1
this.capacityIncrement >= 0
return >= -1
orig(elem) != null
orig(elem.getClass().getName()) is printable
this.elementData[this.elementCount..] elements == null
this.elementData.getClass().getName() != orig(elem.getClass().getName())
this.elementCount > return
this.elementCount <= size(this.elementData[])
return <= size(this.elementData[])-1
===========================================================================
javautil.Vector13.indexOf(java.lang.Object, int):::ENTER
(this.elementCount == 0)  ==>  (this.elementCount <= index)
(this.elementCount == 0)  ==>  (this.elementCount <= this.capacityIncrement)
(this.elementCount == 0)  ==>  (this.elementCount is a pointer)
(this.elementCount == 0)  ==>  (this.elementData[0..this.elementCount-1] == [])
(this.elementCount == 0)  ==>  (this.elementData[] elements == null)
(this.elementCount == 0)  ==>  (this.elementData[].getClass().getName() elements == null)
elem != null
elem.getClass().getName() is printable
index >= 0
this.elementData.getClass().getName() != elem.getClass().getName()
(size(this.elementData[]) == 0) ==> (this.elementCount == 0)
this.elementCount <= size(this.elementData[])
===========================================================================
javautil.Vector13.indexOf(java.lang.Object, int):::ENTER;condition="elementCount == 0"
this.elementData[] elements == null
this.elementData[].getClass().getName() elements == null
this.elementCount == 0
this.elementData[0..this.elementCount-1] == []
this.elementCount <= this.capacityIncrement
this.elementCount <= index
===========================================================================
javautil.Vector13.indexOf(java.lang.Object, int):::ENTER;condition="not(elementCount == 0)"
this.elementCount >= 1
size(this.elementData[]) >= 1
===========================================================================
javautil.Vector13.indexOf(java.lang.Object, int):::EXIT274
this.elementCount >= 1
return >= 0
this.elementData[return] != null
orig(elem.getClass().getName()) in this.elementData[].getClass().getName()
this.elementCount > orig(index)
return >= orig(index)
(size(this.elementData[])-1 == 0) ==> (return == 0)
(size(this.elementData[])-1 == 0) ==> (orig(index) == 0)
orig(index) <= size(this.elementData[])-1
===========================================================================
javautil.Vector13.indexOf(java.lang.Object, int):::EXIT274;condition="not(elementCount == 0)"
===========================================================================
javautil.Vector13.indexOf(java.lang.Object, int):::EXIT274;condition="not(orig(elementCount == 0))"
return >= 0
this.elementData[return] != null
orig(elem.getClass().getName()) in this.elementData[].getClass().getName()
this.elementCount > orig(index)
return >= orig(index)
(size(this.elementData[])-1 == 0) ==> (return == 0)
(size(this.elementData[])-1 == 0) ==> (orig(index) == 0)
orig(index) <= size(this.elementData[])-1
===========================================================================
javautil.Vector13.indexOf(java.lang.Object, int):::EXIT277
(this.elementCount == 0)  ==>  (this.elementCount <= orig(index))
(this.elementCount == 0)  ==>  (this.elementCount <= this.capacityIncrement)
(this.elementCount == 0)  ==>  (this.elementCount is a pointer)
(this.elementCount == 0)  ==>  (this.elementData[0..this.elementCount-1] == [])
(this.elementCount == 0)  ==>  (this.elementData[] elements == null)
(this.elementCount == 0)  ==>  (this.elementData[].getClass().getName() elements == null)
return == -1
this.elementData[0..return] == []
this.capacityIncrement > return
return < orig(index)
===========================================================================
javautil.Vector13.indexOf(java.lang.Object, int):::EXIT277;condition="elementCount == 0"
===========================================================================
javautil.Vector13.indexOf(java.lang.Object, int):::EXIT277;condition="not(elementCount == 0)"
return < size(this.elementData[])-1
===========================================================================
javautil.Vector13.indexOf(java.lang.Object, int):::EXIT277;condition="orig(elementCount == 0)"
===========================================================================
javautil.Vector13.indexOf(java.lang.Object, int):::EXIT277;condition="not(orig(elementCount == 0))"
return == -1
this.elementData[0..return] == []
this.capacityIncrement > return
return < orig(index)
return < size(this.elementData[])-1
===========================================================================
javautil.Vector13.indexOf(java.lang.Object, int):::EXIT
this.elementData == orig(this.elementData)
this.elementData.getClass().getName() == orig(this.elementData.getClass().getName())
this.elementData[] == orig(this.elementData[])
this.elementCount == orig(this.elementCount)
this.capacityIncrement == orig(this.capacityIncrement)
(return == -1)  <==>  (return < orig(index))
(return == -1)  ==>  (this.capacityIncrement > return)
(return == -1)  ==>  (this.elementData[0..return] == [])
(return >= 0)  <==>  (return >= orig(index))
(return >= 0)  ==>  ((size(this.elementData[])-1 == 0) ==> (orig(index) == 0))
(return >= 0)  ==>  ((size(this.elementData[])-1 == 0) ==> (return == 0))
(return >= 0)  ==>  (orig(elem.getClass().getName()) in this.elementData[].getClass().getName())
(return >= 0)  ==>  (orig(index) <= size(this.elementData[])-1)
(return >= 0)  ==>  (orig(this.elementData[post(return)]) != null)
(return >= 0)  ==>  (this.elementCount > orig(index))
(return >= 0)  ==>  (this.elementCount >= 1)
(return >= 0)  ==>  (this.elementData[return] != null)
(this.elementCount == 0)  ==>  (return < orig(index))
(this.elementCount == 0)  ==>  (return == -1)
(this.elementCount == 0)  ==>  (this.capacityIncrement > return)
(this.elementCount == 0)  ==>  (this.elementCount <= orig(index))
(this.elementCount == 0)  ==>  (this.elementCount <= this.capacityIncrement)
(this.elementCount == 0)  ==>  (this.elementCount is a pointer)
(this.elementCount == 0)  ==>  (this.elementData[0..return] == [])
(this.elementCount == 0)  ==>  (this.elementData[0..this.elementCount-1] == [])
(this.elementCount == 0)  ==>  (this.elementData[] elements == null)
(this.elementCount == 0)  ==>  (this.elementData[].getClass().getName() elements == null)
(this.elementCount == 0)  ==>  (this.elementData[return+1..] elements == null)
return >= -1
this.elementData.getClass().getName() != orig(elem.getClass().getName())
this.elementCount > return
(size(this.elementData[]) == 0) ==> (this.elementCount == 0)
this.elementCount <= size(this.elementData[])
(return == 0) ==> (orig(index) == 0)
return <= size(this.elementData[])-1
===========================================================================
javautil.Vector13.indexOf(java.lang.Object, int):::EXIT;condition="elementCount == 0"
this.elementData[] elements == null
this.elementData[].getClass().getName() elements == null
this.elementCount == 0
return == -1
this.elementData[0..return] == []
this.elementCount <= this.capacityIncrement
this.elementCount <= orig(index)
this.capacityIncrement > return
return < orig(index)
===========================================================================
javautil.Vector13.indexOf(java.lang.Object, int):::EXIT;condition="not(elementCount == 0)"
this.elementCount >= 1
size(this.elementData[]) >= 1
===========================================================================
javautil.Vector13.indexOf(java.lang.Object, int):::EXIT;condition="orig(elementCount == 0)"
this.elementData == orig(this.elementData)
this.elementData.getClass().getName() == orig(this.elementData.getClass().getName())
this.elementData[] == orig(this.elementData[])
this.elementCount == orig(this.elementCount)
this.capacityIncrement == orig(this.capacityIncrement)
this.elementData != null
this.elementData.getClass().getName() == java.lang.Object[].class
this.elementData[] elements == null
this.elementData[].getClass().getName() elements == null
this.elementCount == 0
this.capacityIncrement >= 0
return == -1
orig(elem) != null
orig(elem.getClass().getName()) is printable
orig(index) >= 0
this.elementData[0..return] == []
this.elementData.getClass().getName() != orig(elem.getClass().getName())
this.elementCount <= this.capacityIncrement
this.elementCount <= orig(index)
this.elementCount <= size(this.elementData[])
this.capacityIncrement > return
return < orig(index)
return <= size(this.elementData[])-1
===========================================================================
javautil.Vector13.indexOf(java.lang.Object, int):::EXIT;condition="not(orig(elementCount == 0))"
this.elementData == orig(this.elementData)
this.elementData.getClass().getName() == orig(this.elementData.getClass().getName())
this.elementData[] == orig(this.elementData[])
this.elementCount == orig(this.elementCount)
this.capacityIncrement == orig(this.capacityIncrement)
this.elementData != null
this.elementData.getClass().getName() == java.lang.Object[].class
this.elementCount >= 1
this.capacityIncrement >= 0
return >= -1
orig(elem) != null
orig(elem.getClass().getName()) is printable
orig(index) >= 0
size(this.elementData[]) >= 1
this.elementData[this.elementCount..] elements == null
this.elementData.getClass().getName() != orig(elem.getClass().getName())
this.elementCount > return
this.elementCount <= size(this.elementData[])
(return == 0) ==> (orig(index) == 0)
return <= size(this.elementData[])-1
===========================================================================
javautil.Vector13.insertElementAt(java.lang.Object, int):::ENTER
obj.getClass().getName() is printable
index >= 0
this.elementData.getClass().getName() != obj.getClass().getName()
(this.elementCount == 0) ==> (index == 0)
this.elementCount >= index
(size(this.elementData[]) == 0) ==> (this.elementCount == 0)
this.elementCount <= size(this.elementData[])
(size(this.elementData[]) == 0) ==> (index == 0)
index <= size(this.elementData[])
===========================================================================
javautil.Vector13.insertElementAt(java.lang.Object, int):::ENTER;condition="not(elementCount == 0)"
===========================================================================
javautil.Vector13.insertElementAt(java.lang.Object, int):::ENTER;condition="not(index >= elementCount)"
this.elementData != null
this.elementData.getClass().getName() == java.lang.Object[].class
this.elementCount >= 0
this.capacityIncrement >= 0
obj.getClass().getName() is printable
index >= 0
this.elementData[this.elementCount..] elements == null
this.elementData.getClass().getName() != obj.getClass().getName()
(this.elementCount == 0) ==> (index == 0)
this.elementCount >= index
(size(this.elementData[]) == 0) ==> (this.elementCount == 0)
this.elementCount <= size(this.elementData[])
(size(this.elementData[]) == 0) ==> (index == 0)
index <= size(this.elementData[])
===========================================================================
javautil.Vector13.insertElementAt(java.lang.Object, int):::ENTER;condition="not(index < 0)"
this.elementData != null
this.elementData.getClass().getName() == java.lang.Object[].class
this.elementCount >= 0
this.capacityIncrement >= 0
obj.getClass().getName() is printable
index >= 0
this.elementData[this.elementCount..] elements == null
this.elementData.getClass().getName() != obj.getClass().getName()
(this.elementCount == 0) ==> (index == 0)
this.elementCount >= index
(size(this.elementData[]) == 0) ==> (this.elementCount == 0)
this.elementCount <= size(this.elementData[])
(size(this.elementData[]) == 0) ==> (index == 0)
index <= size(this.elementData[])
===========================================================================
javautil.Vector13.insertElementAt(java.lang.Object, int):::EXIT
this.elementData.getClass().getName() == orig(this.elementData.getClass().getName())
this.capacityIncrement == orig(this.capacityIncrement)
this.elementData[this.elementCount-1] == this.elementData[orig(this.elementCount)]
this.elementData[0..orig(index)-1] == orig(this.elementData[0..post(index)-1])
this.elementData[0..orig(index)-1] == orig(this.elementData[0..index-1])
(orig(this.elementCount) == orig(index))  ==>  (orig(this.elementData[index..]) elements == null)
(orig(this.elementCount) == orig(index))  ==>  (size(this.elementData[]) >= 1)
(orig(this.elementCount) == orig(index))  ==>  (this.elementCount - orig(index) - 1 == 0)
(orig(this.elementCount) == orig(index))  ==>  (this.elementCount >= 1)
(orig(this.elementCount) == orig(index))  ==>  (this.elementData[0..orig(index)-1] == orig(this.elementData[0..this.elementCount-1]))
(orig(this.elementCount) == orig(index))  ==>  (this.elementData[orig(index)+1..] elements == null)
(orig(this.elementCount) == orig(index))  ==>  (this.elementData[this.elementCount-1] == this.elementData[orig(index)])
(orig(this.elementCount) > orig(index))  ==>  ((orig(size(this.elementData[]))-1 == 0) ==> (orig(index) == 0))
(orig(this.elementCount) > orig(index))  ==>  ((orig(size(this.elementData[]))-1 >> this.elementCount == 0))
(orig(this.elementCount) > orig(index))  ==>  ((size(this.elementData[])-1 >> this.elementCount == 0))
(orig(this.elementCount) > orig(index))  ==>  (orig(index) < size(this.elementData[])-1)
(orig(this.elementCount) > orig(index))  ==>  (orig(index) <= orig(size(this.elementData[]))-1)
(orig(this.elementCount) > orig(index))  ==>  (orig(this.elementCount) >= 1)
(orig(this.elementCount) > orig(index))  ==>  (this.elementCount >= 2)
(this.elementCount == 1)  <==>  (orig(this.elementCount) == 0)
(this.elementCount == 1)  ==>  ((orig(size(this.elementData[]))-1 == 0) ==> (size(this.elementData[])-1 == 0))
(this.elementCount == 1)  ==>  (orig(index) == 0)
(this.elementCount == 1)  ==>  (orig(index) is a pointer)
(this.elementCount == 1)  ==>  (orig(size(this.elementData[])) % size(this.elementData[]) == 0)
(this.elementCount == 1)  ==>  (orig(size(this.elementData[])) is a bitwise subset of size(this.elementData[]))
(this.elementCount == 1)  ==>  (orig(this.elementCount) == orig(index))
(this.elementCount == 1)  ==>  (orig(this.elementCount) is a pointer)
(this.elementCount == 1)  ==>  (orig(this.elementData[0..this.elementCount-1]) == [])
(this.elementCount == 1)  ==>  (orig(this.elementData[]) elements == null)
(this.elementCount == 1)  ==>  (orig(this.elementData[].getClass().getName()) elements == null)
(this.elementCount == 1)  ==>  (orig(this.elementData[index..]) elements == null)
(this.elementCount == 1)  ==>  (size(this.elementData[]) >= 1)
(this.elementCount == 1)  ==>  (size(this.elementData[])-1 is a bitwise subset of orig(size(this.elementData[]))-1)
(this.elementCount == 1)  ==>  (this.capacityIncrement >= orig(index))
(this.elementCount == 1)  ==>  (this.capacityIncrement >= orig(this.elementCount))
(this.elementCount == 1)  ==>  (this.elementCount == (org.plumelib.util.MathPlume.gcd(size(this.elementData[]), orig(size(this.elementData[]))-1)))
(this.elementCount == 1)  ==>  (this.elementData[0..orig(index)-1] == [])
(this.elementCount == 1)  ==>  (this.elementData[0..orig(index)] elements == this.elementData[orig(index)])
(this.elementCount == 1)  ==>  (this.elementData[0..orig(index)] elements == this.elementData[this.elementCount-1])
(this.elementCount == 1)  ==>  (this.elementData[0..orig(this.elementCount)-1] == [])
(this.elementCount == 1)  ==>  (this.elementData[0..this.elementCount-1] elements == this.elementData[orig(index)])
(this.elementCount == 1)  ==>  (this.elementData[0..this.elementCount-1] elements == this.elementData[this.elementCount-1])
(this.elementCount == 1)  ==>  (this.elementData[orig(index)+1..] elements == null)
(this.elementCount == 1)  ==>  (this.elementData[this.elementCount-1] == this.elementData[orig(index)])
(this.elementCount >= 2)  <==>  (orig(this.elementCount) >= 1)
(this.elementCount >= 2)  ==>  ((orig(size(this.elementData[]))-1 >> this.elementCount == 0))
(this.elementCount >= 2)  ==>  (size(this.elementData[]) >= 2)
(this.elementCount >= 2)  ==>  (this.elementCount - orig(this.elementCount) - 1 == 0)
this.elementCount >= 1
this.elementData.getClass().getName() != orig(obj.getClass().getName())
orig(obj.getClass().getName()) in this.elementData[].getClass().getName()
this.elementCount - orig(this.elementCount) - 1 == 0
this.elementCount > orig(index)
this.elementCount <= size(this.elementData[])
(size(this.elementData[])-1 == 0) ==> (orig(this.elementCount) == 0)
orig(this.elementCount) <= size(this.elementData[])-1
(size(this.elementData[])-1 == 0) ==> (orig(index) == 0)
orig(index) <= size(this.elementData[])-1
size(this.elementData[]) >= orig(size(this.elementData[]))
size(this.elementData[])-1 >= orig(size(this.elementData[]))-1
===========================================================================
javautil.Vector13.insertElementAt(java.lang.Object, int):::EXIT;condition="not(elementCount == 0)"
===========================================================================
javautil.Vector13.insertElementAt(java.lang.Object, int):::EXIT;condition="orig(elementCount == 0)"
this.elementData.getClass().getName() == orig(this.elementData.getClass().getName())
this.capacityIncrement == orig(this.capacityIncrement)
orig(this.elementCount) == orig(index)
this.elementData[this.elementCount-1] == this.elementData[orig(index)]
this.elementData != null
this.elementData.getClass().getName() == java.lang.Object[].class
this.elementCount == 1
this.capacityIncrement >= 0
orig(this.elementData) != null
orig(this.elementData[]) elements == null
orig(this.elementData[].getClass().getName()) elements == null
orig(obj.getClass().getName()) is printable
orig(index) == 0
size(this.elementData[]) >= 1
this.elementData[this.elementCount..] elements == null
this.elementData[0..orig(index)-1] == []
this.elementData.getClass().getName() != orig(obj.getClass().getName())
orig(obj.getClass().getName()) in this.elementData[].getClass().getName()
this.elementCount <= size(this.elementData[])
this.capacityIncrement >= orig(index)
orig(index) <= size(this.elementData[])-1
orig(index) <= orig(size(this.elementData[]))
orig(size(this.elementData[])) % size(this.elementData[]) == 0
orig(size(this.elementData[])) is a bitwise subset of size(this.elementData[])
size(this.elementData[]) >= orig(size(this.elementData[]))
(orig(size(this.elementData[]))-1 == 0) ==> (size(this.elementData[])-1 == 0)
size(this.elementData[])-1 >= orig(size(this.elementData[]))-1
size(this.elementData[])-1 is a bitwise subset of orig(size(this.elementData[]))-1
this.elementData[0..orig(index)] elements == this.elementData[orig(index)]
this.elementCount == (org.plumelib.util.MathPlume.gcd(size(this.elementData[]), orig(size(this.elementData[]))-1))
===========================================================================
javautil.Vector13.insertElementAt(java.lang.Object, int):::EXIT;condition="not(orig(elementCount == 0))"
this.elementData.getClass().getName() == orig(this.elementData.getClass().getName())
this.capacityIncrement == orig(this.capacityIncrement)
this.elementData[this.elementCount-1] == this.elementData[orig(this.elementCount)]
this.elementData[0..orig(index)-1] == orig(this.elementData[0..post(index)-1])
this.elementData[0..orig(index)-1] == orig(this.elementData[0..index-1])
this.elementData != null
this.elementData.getClass().getName() == java.lang.Object[].class
this.elementCount >= 2
this.capacityIncrement >= 0
orig(this.elementData) != null
orig(this.elementCount) >= 1
orig(obj.getClass().getName()) is printable
orig(index) >= 0
size(this.elementData[]) >= 2
this.elementData[this.elementCount..] elements == null
orig(this.elementData[this.elementCount..]) elements == null
this.elementData.getClass().getName() != orig(obj.getClass().getName())
orig(this.elementData[this.elementCount-1]) in this.elementData[]
orig(obj.getClass().getName()) in this.elementData[].getClass().getName()
this.elementCount - orig(this.elementCount) - 1 == 0
this.elementCount > orig(index)
this.elementCount <= size(this.elementData[])
(orig(size(this.elementData[]))-1 >> this.elementCount == 0)
orig(this.elementCount) >= orig(index)
orig(this.elementCount) <= size(this.elementData[])-1
orig(this.elementCount) <= orig(size(this.elementData[]))
orig(index) <= size(this.elementData[])-1
orig(index) <= orig(size(this.elementData[]))
size(this.elementData[]) >= orig(size(this.elementData[]))
size(this.elementData[])-1 >= orig(size(this.elementData[]))-1
orig(this.elementData[this.elementCount-1]) in this.elementData[0..this.elementCount-1]
===========================================================================
javautil.Vector13.insertElementAt(java.lang.Object, int):::EXIT;condition="not(index >= elementCount)"
this.elementData.getClass().getName() == orig(this.elementData.getClass().getName())
this.capacityIncrement == orig(this.capacityIncrement)
this.elementData[this.elementCount-1] == this.elementData[orig(this.elementCount)]
this.elementData[0..orig(index)-1] == orig(this.elementData[0..post(index)-1])
this.elementData[0..orig(index)-1] == orig(this.elementData[0..index-1])
this.elementData != null
this.elementData.getClass().getName() == java.lang.Object[].class
this.elementCount >= 1
this.capacityIncrement >= 0
this.elementData[this.elementCount..] elements == null
this.elementData.getClass().getName() != orig(obj.getClass().getName())
orig(obj.getClass().getName()) in this.elementData[].getClass().getName()
this.elementCount - orig(this.elementCount) - 1 == 0
this.elementCount > orig(index)
this.elementCount <= size(this.elementData[])
(size(this.elementData[])-1 == 0) ==> (orig(this.elementCount) == 0)
orig(this.elementCount) <= size(this.elementData[])-1
(size(this.elementData[])-1 == 0) ==> (orig(index) == 0)
orig(index) <= size(this.elementData[])-1
size(this.elementData[]) >= orig(size(this.elementData[]))
size(this.elementData[])-1 >= orig(size(this.elementData[]))-1
===========================================================================
javautil.Vector13.insertElementAt(java.lang.Object, int):::EXIT;condition="orig(index >= elementCount)"
this.elementData.getClass().getName() == orig(this.elementData.getClass().getName())
this.capacityIncrement == orig(this.capacityIncrement)
orig(this.elementCount) == orig(index)
this.elementData[this.elementCount-1] == this.elementData[orig(index)]
this.elementData[0..orig(index)-1] == orig(this.elementData[0..post(index)-1])
this.elementData[0..orig(index)-1] == orig(this.elementData[0..this.elementCount-1])
this.elementData[0..orig(index)-1] == orig(this.elementData[0..index-1])
this.elementData != null
this.elementData.getClass().getName() == java.lang.Object[].class
this.elementCount >= 1
this.capacityIncrement >= 0
orig(this.elementData) != null
orig(obj.getClass().getName()) is printable
orig(index) >= 0
size(this.elementData[]) >= 1
this.elementData[this.elementCount..] elements == null
orig(this.elementData[index..]) elements == null
this.elementData.getClass().getName() != orig(obj.getClass().getName())
orig(obj.getClass().getName()) in this.elementData[].getClass().getName()
this.elementCount - orig(index) - 1 == 0
this.elementCount <= size(this.elementData[])
(size(this.elementData[])-1 == 0) ==> (orig(index) == 0)
orig(index) <= size(this.elementData[])-1
(orig(size(this.elementData[])) == 0) ==> (orig(index) == 0)
orig(index) <= orig(size(this.elementData[]))
size(this.elementData[]) >= orig(size(this.elementData[]))
size(this.elementData[])-1 >= orig(size(this.elementData[]))-1
===========================================================================
javautil.Vector13.insertElementAt(java.lang.Object, int):::EXIT;condition="not(orig(index >= elementCount))"
this.elementData.getClass().getName() == orig(this.elementData.getClass().getName())
this.capacityIncrement == orig(this.capacityIncrement)
this.elementData[this.elementCount-1] == this.elementData[orig(this.elementCount)]
this.elementData[this.elementCount-1] == orig(this.elementData[this.elementCount-1])
this.elementData[0..orig(index)-1] == orig(this.elementData[0..post(index)-1])
this.elementData[0..orig(index)-1] == orig(this.elementData[0..index-1])
this.elementData != null
this.elementData.getClass().getName() == java.lang.Object[].class
this.elementCount >= 2
this.capacityIncrement >= 0
orig(this.elementData) != null
orig(this.elementCount) >= 1
orig(obj.getClass().getName()) is printable
orig(index) >= 0
this.elementData[this.elementCount..] elements == null
orig(this.elementData[this.elementCount..]) elements == null
this.elementData.getClass().getName() != orig(obj.getClass().getName())
orig(this.elementData[index]) in this.elementData[]
orig(obj.getClass().getName()) in this.elementData[].getClass().getName()
this.elementCount - orig(this.elementCount) - 1 == 0
this.elementCount > orig(index)
this.elementCount <= size(this.elementData[])
(size(this.elementData[])-1 >> this.elementCount == 0)
(orig(size(this.elementData[]))-1 >> this.elementCount == 0)
orig(this.elementCount) > orig(index)
orig(this.elementCount) <= size(this.elementData[])-1
orig(this.elementCount) <= orig(size(this.elementData[]))
orig(index) < size(this.elementData[])-1
(orig(size(this.elementData[]))-1 == 0) ==> (orig(index) == 0)
orig(index) <= orig(size(this.elementData[]))-1
size(this.elementData[]) >= orig(size(this.elementData[]))
size(this.elementData[])-1 >= orig(size(this.elementData[]))-1
orig(this.elementData[index]) in this.elementData[0..this.elementCount-1]
orig(this.elementData[index]) in this.elementData[orig(index)..]
orig(this.elementData[index]) in this.elementData[orig(index)+1..]
===========================================================================
javautil.Vector13.insertElementAt(java.lang.Object, int):::EXIT;condition="not(index < 0)"
this.elementData.getClass().getName() == orig(this.elementData.getClass().getName())
this.capacityIncrement == orig(this.capacityIncrement)
this.elementData[this.elementCount-1] == this.elementData[orig(this.elementCount)]
this.elementData[0..orig(index)-1] == orig(this.elementData[0..post(index)-1])
this.elementData[0..orig(index)-1] == orig(this.elementData[0..index-1])
this.elementData != null
this.elementData.getClass().getName() == java.lang.Object[].class
this.elementCount >= 1
this.capacityIncrement >= 0
this.elementData[this.elementCount..] elements == null
this.elementData.getClass().getName() != orig(obj.getClass().getName())
orig(obj.getClass().getName()) in this.elementData[].getClass().getName()
this.elementCount - orig(this.elementCount) - 1 == 0
this.elementCount > orig(index)
this.elementCount <= size(this.elementData[])
(size(this.elementData[])-1 == 0) ==> (orig(this.elementCount) == 0)
orig(this.elementCount) <= size(this.elementData[])-1
(size(this.elementData[])-1 == 0) ==> (orig(index) == 0)
orig(index) <= size(this.elementData[])-1
size(this.elementData[]) >= orig(size(this.elementData[]))
size(this.elementData[])-1 >= orig(size(this.elementData[]))-1
===========================================================================
javautil.Vector13.insertElementAt(java.lang.Object, int):::EXIT;condition="not(orig(index < 0))"
this.elementData.getClass().getName() == orig(this.elementData.getClass().getName())
this.capacityIncrement == orig(this.capacityIncrement)
this.elementData[this.elementCount-1] == this.elementData[orig(this.elementCount)]
this.elementData[0..orig(index)-1] == orig(this.elementData[0..post(index)-1])
this.elementData[0..orig(index)-1] == orig(this.elementData[0..index-1])
this.elementData != null
this.elementData.getClass().getName() == java.lang.Object[].class
this.elementCount >= 1
this.capacityIncrement >= 0
orig(this.elementData) != null
orig(this.elementCount) >= 0
orig(obj.getClass().getName()) is printable
orig(index) >= 0
this.elementData[this.elementCount..] elements == null
orig(this.elementData[this.elementCount..]) elements == null
this.elementData.getClass().getName() != orig(obj.getClass().getName())
orig(obj.getClass().getName()) in this.elementData[].getClass().getName()
this.elementCount - orig(this.elementCount) - 1 == 0
this.elementCount > orig(index)
this.elementCount <= size(this.elementData[])
(orig(this.elementCount) == 0) ==> (orig(index) == 0)
orig(this.elementCount) >= orig(index)
(size(this.elementData[])-1 == 0) ==> (orig(this.elementCount) == 0)
orig(this.elementCount) <= size(this.elementData[])-1
(orig(size(this.elementData[])) == 0) ==> (orig(this.elementCount) == 0)
orig(this.elementCount) <= orig(size(this.elementData[]))
(size(this.elementData[])-1 == 0) ==> (orig(index) == 0)
orig(index) <= size(this.elementData[])-1
(orig(size(this.elementData[])) == 0) ==> (orig(index) == 0)
orig(index) <= orig(size(this.elementData[]))
size(this.elementData[]) >= orig(size(this.elementData[]))
size(this.elementData[])-1 >= orig(size(this.elementData[]))-1
===========================================================================
javautil.Vector13.isEmpty():::ENTER
(size(this.elementData[]) == 0) ==> (this.elementCount == 0)
this.elementCount <= size(this.elementData[])
===========================================================================
javautil.Vector13.isEmpty():::EXIT
this.elementData == orig(this.elementData)
this.elementData.getClass().getName() == orig(this.elementData.getClass().getName())
this.elementData[] == orig(this.elementData[])
this.elementCount == orig(this.elementCount)
this.capacityIncrement == orig(this.capacityIncrement)
(this.elementCount == 0)  <==>  (return == true)
(this.elementCount == 0)  ==>  (this.elementCount <= this.capacityIncrement)
(this.elementCount == 0)  ==>  (this.elementCount is a pointer)
(this.elementCount == 0)  ==>  (this.elementData[0..this.elementCount-1] == [])
(this.elementCount == 0)  ==>  (this.elementData[] elements == null)
(this.elementCount == 0)  ==>  (this.elementData[].getClass().getName() elements == null)
(size(this.elementData[]) == 0) ==> (this.elementCount == 0)
this.elementCount <= size(this.elementData[])
===========================================================================
javautil.Vector13.isEmpty():::EXIT;condition="return == true"
this.elementData[] elements == null
this.elementData[].getClass().getName() elements == null
this.elementCount == 0
return == true
this.elementData[0..this.elementCount-1] == []
this.elementCount <= this.capacityIncrement
===========================================================================
javautil.Vector13.isEmpty():::EXIT;condition="not(return == true)"
this.elementCount >= 1
return == false
===========================================================================
javautil.Vector13.isEmpty():::EXIT;condition="elementCount == 0"
this.elementData == orig(this.elementData)
this.elementData.getClass().getName() == orig(this.elementData.getClass().getName())
this.elementData[] == orig(this.elementData[])
this.elementCount == orig(this.elementCount)
this.capacityIncrement == orig(this.capacityIncrement)
this.elementData != null
this.elementData.getClass().getName() == java.lang.Object[].class
this.elementData[] elements == null
this.elementData[].getClass().getName() elements == null
this.elementCount == 0
this.capacityIncrement >= 0
return == true
this.elementData[0..this.elementCount-1] == []
this.elementCount <= this.capacityIncrement
this.elementCount <= size(this.elementData[])
===========================================================================
javautil.Vector13.isEmpty():::EXIT;condition="not(elementCount == 0)"
this.elementData == orig(this.elementData)
this.elementData.getClass().getName() == orig(this.elementData.getClass().getName())
this.elementData[] == orig(this.elementData[])
this.elementCount == orig(this.elementCount)
this.capacityIncrement == orig(this.capacityIncrement)
this.elementData != null
this.elementData.getClass().getName() == java.lang.Object[].class
this.elementCount >= 1
this.capacityIncrement >= 0
return == false
this.elementData[this.elementCount..] elements == null
this.elementCount <= size(this.elementData[])
===========================================================================
javautil.Vector13.isEmpty():::EXIT;condition="orig(elementCount == 0)"
this.elementData == orig(this.elementData)
this.elementData.getClass().getName() == orig(this.elementData.getClass().getName())
this.elementData[] == orig(this.elementData[])
this.elementCount == orig(this.elementCount)
this.capacityIncrement == orig(this.capacityIncrement)
this.elementData != null
this.elementData.getClass().getName() == java.lang.Object[].class
this.elementData[] elements == null
this.elementData[].getClass().getName() elements == null
this.elementCount == 0
this.capacityIncrement >= 0
return == true
this.elementData[0..this.elementCount-1] == []
this.elementCount <= this.capacityIncrement
this.elementCount <= size(this.elementData[])
===========================================================================
javautil.Vector13.isEmpty():::EXIT;condition="not(orig(elementCount == 0))"
this.elementData == orig(this.elementData)
this.elementData.getClass().getName() == orig(this.elementData.getClass().getName())
this.elementData[] == orig(this.elementData[])
this.elementCount == orig(this.elementCount)
this.capacityIncrement == orig(this.capacityIncrement)
this.elementData != null
this.elementData.getClass().getName() == java.lang.Object[].class
this.elementCount >= 1
this.capacityIncrement >= 0
return == false
this.elementData[this.elementCount..] elements == null
this.elementCount <= size(this.elementData[])
===========================================================================
javautil.Vector13.lastElement():::ENTER
this.elementCount >= 1
this.elementCount <= size(this.elementData[])
===========================================================================
javautil.Vector13.lastElement():::ENTER;condition="not(elementCount == 0)"
===========================================================================
javautil.Vector13.lastElement():::EXIT
this.elementData == orig(this.elementData)
this.elementData.getClass().getName() == orig(this.elementData.getClass().getName())
this.elementData[] == orig(this.elementData[])
this.elementCount == orig(this.elementCount)
this.capacityIncrement == orig(this.capacityIncrement)
this.elementCount >= 1
return.getClass().getName() is printable
this.elementData.getClass().getName() != return.getClass().getName()
return.getClass().getName() in this.elementData[].getClass().getName()
this.elementCount <= size(this.elementData[])
===========================================================================
javautil.Vector13.lastElement():::EXIT;condition="not(elementCount == 0)"
===========================================================================
javautil.Vector13.lastElement():::EXIT;condition="not(orig(elementCount == 0))"
this.elementData == orig(this.elementData)
this.elementData.getClass().getName() == orig(this.elementData.getClass().getName())
this.elementData[] == orig(this.elementData[])
this.elementCount == orig(this.elementCount)
this.capacityIncrement == orig(this.capacityIncrement)
this.elementData != null
this.elementData.getClass().getName() == java.lang.Object[].class
this.elementCount >= 1
this.capacityIncrement >= 0
return.getClass().getName() is printable
this.elementData[this.elementCount..] elements == null
this.elementData.getClass().getName() != return.getClass().getName()
return.getClass().getName() in this.elementData[].getClass().getName()
this.elementCount <= size(this.elementData[])
===========================================================================
javautil.Vector13.lastIndexOf(java.lang.Object):::ENTER
(this.elementCount == 0)  ==>  (this.elementCount <= this.capacityIncrement)
(this.elementCount == 0)  ==>  (this.elementCount is a pointer)
(this.elementCount == 0)  ==>  (this.elementData[0..this.elementCount-1] == [])
(this.elementCount == 0)  ==>  (this.elementData[] elements == null)
(this.elementCount == 0)  ==>  (this.elementData[].getClass().getName() elements == null)
elem != null
elem.getClass().getName() is printable
this.elementData.getClass().getName() != elem.getClass().getName()
(size(this.elementData[]) == 0) ==> (this.elementCount == 0)
this.elementCount <= size(this.elementData[])
===========================================================================
javautil.Vector13.lastIndexOf(java.lang.Object):::ENTER;condition="elementCount == 0"
this.elementData[] elements == null
this.elementData[].getClass().getName() elements == null
this.elementCount == 0
this.elementData[0..this.elementCount-1] == []
this.elementCount <= this.capacityIncrement
===========================================================================
javautil.Vector13.lastIndexOf(java.lang.Object):::ENTER;condition="not(elementCount == 0)"
this.elementCount >= 1
===========================================================================
javautil.Vector13.lastIndexOf(java.lang.Object):::EXIT
this.elementData == orig(this.elementData)
this.elementData.getClass().getName() == orig(this.elementData.getClass().getName())
this.elementData[] == orig(this.elementData[])
this.elementCount == orig(this.elementCount)
this.capacityIncrement == orig(this.capacityIncrement)
(this.elementCount == 0)  ==>  (return == -1)
(this.elementCount == 0)  ==>  (this.capacityIncrement > return)
(this.elementCount == 0)  ==>  (this.elementCount <= this.capacityIncrement)
(this.elementCount == 0)  ==>  (this.elementCount is a pointer)
(this.elementCount == 0)  ==>  (this.elementData[0..return] == [])
(this.elementCount == 0)  ==>  (this.elementData[0..this.elementCount-1] == [])
(this.elementCount == 0)  ==>  (this.elementData[] elements == null)
(this.elementCount == 0)  ==>  (this.elementData[].getClass().getName() elements == null)
(this.elementCount == 0)  ==>  (this.elementData[return+1..] elements == null)
return >= -1
this.elementData.getClass().getName() != orig(elem.getClass().getName())
this.elementCount > return
(size(this.elementData[]) == 0) ==> (this.elementCount == 0)
this.elementCount <= size(this.elementData[])
return <= size(this.elementData[])-1
===========================================================================
javautil.Vector13.lastIndexOf(java.lang.Object):::EXIT;condition="elementCount == 0"
this.elementData[] elements == null
this.elementData[].getClass().getName() elements == null
this.elementCount == 0
return == -1
this.elementData[0..return] == []
this.elementCount <= this.capacityIncrement
this.capacityIncrement > return
===========================================================================
javautil.Vector13.lastIndexOf(java.lang.Object):::EXIT;condition="not(elementCount == 0)"
this.elementCount >= 1
===========================================================================
javautil.Vector13.lastIndexOf(java.lang.Object):::EXIT;condition="orig(elementCount == 0)"
this.elementData == orig(this.elementData)
this.elementData.getClass().getName() == orig(this.elementData.getClass().getName())
this.elementData[] == orig(this.elementData[])
this.elementCount == orig(this.elementCount)
this.capacityIncrement == orig(this.capacityIncrement)
this.elementData != null
this.elementData.getClass().getName() == java.lang.Object[].class
this.elementData[] elements == null
this.elementData[].getClass().getName() elements == null
this.elementCount == 0
this.capacityIncrement >= 0
return == -1
orig(elem) != null
orig(elem.getClass().getName()) is printable
this.elementData[0..return] == []
this.elementData.getClass().getName() != orig(elem.getClass().getName())
this.elementCount <= this.capacityIncrement
this.elementCount <= size(this.elementData[])
this.capacityIncrement > return
return <= size(this.elementData[])-1
===========================================================================
javautil.Vector13.lastIndexOf(java.lang.Object):::EXIT;condition="not(orig(elementCount == 0))"
this.elementData == orig(this.elementData)
this.elementData.getClass().getName() == orig(this.elementData.getClass().getName())
this.elementData[] == orig(this.elementData[])
this.elementCount == orig(this.elementCount)
this.capacityIncrement == orig(this.capacityIncrement)
this.elementData != null
this.elementData.getClass().getName() == java.lang.Object[].class
this.elementCount >= 1
this.capacityIncrement >= 0
return >= -1
orig(elem) != null
orig(elem.getClass().getName()) is printable
this.elementData[this.elementCount..] elements == null
this.elementData.getClass().getName() != orig(elem.getClass().getName())
this.elementCount > return
this.elementCount <= size(this.elementData[])
return <= size(this.elementData[])-1
===========================================================================
javautil.Vector13.lastIndexOf(java.lang.Object, int):::ENTER
(this.elementCount == 0)  <==>  (index == -1)
(this.elementCount == 0)  ==>  (this.capacityIncrement > index)
(this.elementCount == 0)  ==>  (this.elementCount <= this.capacityIncrement)
(this.elementCount == 0)  ==>  (this.elementCount is a pointer)
(this.elementCount == 0)  ==>  (this.elementData[0..index] == [])
(this.elementCount == 0)  ==>  (this.elementData[0..this.elementCount-1] == [])
(this.elementCount == 0)  ==>  (this.elementData[] elements == null)
(this.elementCount == 0)  ==>  (this.elementData[].getClass().getName() elements == null)
(this.elementCount == 0)  ==>  (this.elementData[index+1..] elements == null)
elem != null
elem.getClass().getName() is printable
index >= -1
this.elementData.getClass().getName() != elem.getClass().getName()
this.elementCount > index
(size(this.elementData[]) == 0) ==> (this.elementCount == 0)
this.elementCount <= size(this.elementData[])
index <= size(this.elementData[])-1
===========================================================================
javautil.Vector13.lastIndexOf(java.lang.Object, int):::ENTER;condition="elementCount == 0"
this.elementData[] elements == null
this.elementData[].getClass().getName() elements == null
this.elementCount == 0
index == -1
this.elementData[0..this.elementCount-1] == []
this.elementCount <= this.capacityIncrement
this.capacityIncrement > index
===========================================================================
javautil.Vector13.lastIndexOf(java.lang.Object, int):::ENTER;condition="not(elementCount == 0)"
this.elementCount >= 1
index >= 0
size(this.elementData[]) >= 1
(size(this.elementData[])-1 == 0) ==> (index == 0)
===========================================================================
javautil.Vector13.lastIndexOf(java.lang.Object, int):::EXIT307
this.elementCount >= 1
return >= 0
orig(index) >= 0
this.elementData[return] != null
orig(elem.getClass().getName()) in this.elementData[].getClass().getName()
(orig(index) == 0) ==> (return == 0)
(size(this.elementData[])-1 == 0) ==> (return == 0)
(size(this.elementData[])-1 == 0) ==> (orig(index) == 0)
===========================================================================
javautil.Vector13.lastIndexOf(java.lang.Object, int):::EXIT307;condition="not(elementCount == 0)"
===========================================================================
javautil.Vector13.lastIndexOf(java.lang.Object, int):::EXIT307;condition="not(orig(elementCount == 0))"
return >= 0
this.elementData[return] != null
orig(elem.getClass().getName()) in this.elementData[].getClass().getName()
(orig(index) == 0) ==> (return == 0)
(size(this.elementData[])-1 == 0) ==> (return == 0)
===========================================================================
javautil.Vector13.lastIndexOf(java.lang.Object, int):::EXIT310
(this.elementCount == 0)  <==>  (orig(index) == -1)
(this.elementCount == 0)  <==>  (return == orig(index))
(this.elementCount == 0)  ==>  (this.capacityIncrement > orig(index))
(this.elementCount == 0)  ==>  (this.elementCount <= this.capacityIncrement)
(this.elementCount == 0)  ==>  (this.elementCount is a pointer)
(this.elementCount == 0)  ==>  (this.elementData[0..orig(index)] == [])
(this.elementCount == 0)  ==>  (this.elementData[0..this.elementCount-1] == [])
(this.elementCount == 0)  ==>  (this.elementData[] elements == null)
(this.elementCount == 0)  ==>  (this.elementData[].getClass().getName() elements == null)
(this.elementCount == 0)  ==>  (this.elementData[orig(index)+1..] elements == null)
return == -1
this.elementData[0..return] == []
this.capacityIncrement > return
===========================================================================
javautil.Vector13.lastIndexOf(java.lang.Object, int):::EXIT310;condition="elementCount == 0"
===========================================================================
javautil.Vector13.lastIndexOf(java.lang.Object, int):::EXIT310;condition="not(elementCount == 0)"
return < orig(index)
return < size(this.elementData[])-1
===========================================================================
javautil.Vector13.lastIndexOf(java.lang.Object, int):::EXIT310;condition="orig(elementCount == 0)"
===========================================================================
javautil.Vector13.lastIndexOf(java.lang.Object, int):::EXIT310;condition="not(orig(elementCount == 0))"
return == -1
this.elementData[0..return] == []
this.capacityIncrement > return
return < orig(index)
return < size(this.elementData[])-1
===========================================================================
javautil.Vector13.lastIndexOf(java.lang.Object, int):::EXIT
this.elementData == orig(this.elementData)
this.elementData.getClass().getName() == orig(this.elementData.getClass().getName())
this.elementData[] == orig(this.elementData[])
this.elementCount == orig(this.elementCount)
this.capacityIncrement == orig(this.capacityIncrement)
(return == -1)  ==>  (orig(index) >= -1)
(return == -1)  ==>  (this.capacityIncrement > return)
(return == -1)  ==>  (this.elementData[0..return] == [])
(return >= 0)  ==>  ((orig(index) == 0) ==> (return == 0))
(return >= 0)  ==>  ((size(this.elementData[])-1 == 0) ==> (orig(index) == 0))
(return >= 0)  ==>  ((size(this.elementData[])-1 == 0) ==> (return == 0))
(return >= 0)  ==>  (orig(elem.getClass().getName()) in this.elementData[].getClass().getName())
(return >= 0)  ==>  (orig(index) >= 0)
(return >= 0)  ==>  (orig(this.elementData[post(return)]) != null)
(return >= 0)  ==>  (this.elementCount >= 1)
(return >= 0)  ==>  (this.elementData[return] != null)
(this.elementCount == 0)  <==>  (orig(index) == -1)
(this.elementCount == 0)  ==>  (return == -1)
(this.elementCount == 0)  ==>  (return == orig(index))
(this.elementCount == 0)  ==>  (this.capacityIncrement > orig(index))
(this.elementCount == 0)  ==>  (this.capacityIncrement > return)
(this.elementCount == 0)  ==>  (this.elementCount <= this.capacityIncrement)
(this.elementCount == 0)  ==>  (this.elementCount is a pointer)
(this.elementCount == 0)  ==>  (this.elementData[0..orig(index)] == [])
(this.elementCount == 0)  ==>  (this.elementData[0..return] == [])
(this.elementCount == 0)  ==>  (this.elementData[0..this.elementCount-1] == [])
(this.elementCount == 0)  ==>  (this.elementData[] elements == null)
(this.elementCount == 0)  ==>  (this.elementData[].getClass().getName() elements == null)
(this.elementCount == 0)  ==>  (this.elementData[orig(index)+1..] elements == null)
(this.elementCount == 0)  ==>  (this.elementData[return+1..] elements == null)
return >= -1
this.elementData.getClass().getName() != orig(elem.getClass().getName())
this.elementCount > return
this.elementCount > orig(index)
(size(this.elementData[]) == 0) ==> (this.elementCount == 0)
this.elementCount <= size(this.elementData[])
return <= orig(index)
return <= size(this.elementData[])-1
orig(index) <= size(this.elementData[])-1
===========================================================================
javautil.Vector13.lastIndexOf(java.lang.Object, int):::EXIT;condition="elementCount == 0"
return == orig(index)
this.elementData[] elements == null
this.elementData[].getClass().getName() elements == null
this.elementCount == 0
return == -1
this.elementData[0..return] == []
this.elementCount <= this.capacityIncrement
this.capacityIncrement > return
===========================================================================
javautil.Vector13.lastIndexOf(java.lang.Object, int):::EXIT;condition="not(elementCount == 0)"
this.elementCount >= 1
size(this.elementData[]) >= 1
(size(this.elementData[])-1 == 0) ==> (orig(index) == 0)
===========================================================================
javautil.Vector13.lastIndexOf(java.lang.Object, int):::EXIT;condition="orig(elementCount == 0)"
this.elementData == orig(this.elementData)
this.elementData.getClass().getName() == orig(this.elementData.getClass().getName())
this.elementData[] == orig(this.elementData[])
this.elementCount == orig(this.elementCount)
this.capacityIncrement == orig(this.capacityIncrement)
return == orig(index)
this.elementData != null
this.elementData.getClass().getName() == java.lang.Object[].class
this.elementData[] elements == null
this.elementData[].getClass().getName() elements == null
this.elementCount == 0
this.capacityIncrement >= 0
return == -1
orig(elem) != null
orig(elem.getClass().getName()) is printable
this.elementData[0..return] == []
this.elementData.getClass().getName() != orig(elem.getClass().getName())
this.elementCount <= this.capacityIncrement
this.elementCount <= size(this.elementData[])
this.capacityIncrement > return
return <= size(this.elementData[])-1
===========================================================================
javautil.Vector13.lastIndexOf(java.lang.Object, int):::EXIT;condition="not(orig(elementCount == 0))"
this.elementData == orig(this.elementData)
this.elementData.getClass().getName() == orig(this.elementData.getClass().getName())
this.elementData[] == orig(this.elementData[])
this.elementCount == orig(this.elementCount)
this.capacityIncrement == orig(this.capacityIncrement)
this.elementData != null
this.elementData.getClass().getName() == java.lang.Object[].class
this.elementCount >= 1
this.capacityIncrement >= 0
return >= -1
orig(elem) != null
orig(elem.getClass().getName()) is printable
orig(index) >= 0
size(this.elementData[]) >= 1
this.elementData[this.elementCount..] elements == null
this.elementData.getClass().getName() != orig(elem.getClass().getName())
this.elementCount > return
this.elementCount > orig(index)
this.elementCount <= size(this.elementData[])
return <= orig(index)
return <= size(this.elementData[])-1
(size(this.elementData[])-1 == 0) ==> (orig(index) == 0)
orig(index) <= size(this.elementData[])-1
===========================================================================
javautil.Vector13.removeAllElements():::ENTER
(size(this.elementData[]) == 0) ==> (this.elementCount == 0)
this.elementCount <= size(this.elementData[])
===========================================================================
javautil.Vector13.removeAllElements():::ENTER;condition="elementCount == 0"
===========================================================================
javautil.Vector13.removeAllElements():::EXIT
this.elementData == orig(this.elementData)
this.elementData.getClass().getName() == orig(this.elementData.getClass().getName())
this.capacityIncrement == orig(this.capacityIncrement)
size(this.elementData[]) == orig(size(this.elementData[]))
this.elementData[orig(this.elementCount)..] == orig(this.elementData[this.elementCount..])
(orig(this.elementCount) == 0)  <==>  (this.elementCount == orig(this.elementCount))
(orig(this.elementCount) == 0)  ==>  (orig(this.elementCount) is a pointer)
(orig(this.elementCount) == 0)  ==>  (orig(this.elementData[0..this.elementCount-1]) == [])
(orig(this.elementCount) == 0)  ==>  (orig(this.elementData[]) elements == null)
(orig(this.elementCount) == 0)  ==>  (orig(this.elementData[].getClass().getName()) elements == null)
(orig(this.elementCount) == 0)  ==>  (this.capacityIncrement >= orig(this.elementCount))
(orig(this.elementCount) == 0)  ==>  (this.elementData[0..orig(this.elementCount)-1] == [])
(orig(this.elementCount) == 0)  ==>  (this.elementData[] == orig(this.elementData[]))
this.elementData[] elements == null
this.elementData[].getClass().getName() elements == null
this.elementCount == 0
this.elementData[0..this.elementCount-1] == []
this.elementCount <= this.capacityIncrement
this.elementCount <= orig(this.elementCount)
this.elementCount <= size(this.elementData[])
(size(this.elementData[]) == 0) ==> (orig(this.elementCount) == 0)
orig(this.elementCount) <= size(this.elementData[])
===========================================================================
javautil.Vector13.removeAllElements():::EXIT;condition="elementCount == 0"
===========================================================================
javautil.Vector13.removeAllElements():::EXIT;condition="orig(elementCount == 0)"
this.elementData == orig(this.elementData)
this.elementData.getClass().getName() == orig(this.elementData.getClass().getName())
this.elementData[] == orig(this.elementData[])
this.elementCount == orig(this.elementCount)
this.capacityIncrement == orig(this.capacityIncrement)
this.elementData != null
this.elementData.getClass().getName() == java.lang.Object[].class
this.elementData[] elements == null
this.elementData[].getClass().getName() elements == null
this.elementCount == 0
this.capacityIncrement >= 0
this.elementData[0..this.elementCount-1] == []
this.elementCount <= this.capacityIncrement
this.elementCount <= size(this.elementData[])
===========================================================================
javautil.Vector13.removeAllElements():::EXIT;condition="not(orig(elementCount == 0))"
this.elementData == orig(this.elementData)
this.elementData.getClass().getName() == orig(this.elementData.getClass().getName())
this.capacityIncrement == orig(this.capacityIncrement)
size(this.elementData[]) == orig(size(this.elementData[]))
this.elementData[this.elementCount] == this.elementData[orig(this.elementCount)-1]
this.elementData[orig(this.elementCount)..] == orig(this.elementData[this.elementCount..])
this.elementData != null
this.elementData.getClass().getName() == java.lang.Object[].class
this.elementData[] elements == null
this.elementData[].getClass().getName() elements == null
this.elementCount == 0
this.capacityIncrement >= 0
orig(this.elementCount) >= 1
this.elementData[0..this.elementCount] == [null]
this.elementData[0..this.elementCount-1] == []
this.elementData[] elements == this.elementData[this.elementCount]
this.elementCount <= this.capacityIncrement
this.elementCount < orig(this.elementCount)
this.elementCount <= size(this.elementData[])-1
orig(this.elementCount) <= size(this.elementData[])
orig(this.elementData[0..post(this.elementCount)]) elements == orig(this.elementData[post(this.elementCount)])
===========================================================================
javautil.Vector13.removeElement(java.lang.Object):::ENTER
obj != null
obj.getClass().getName() is printable
this.elementData.getClass().getName() != obj.getClass().getName()
(size(this.elementData[]) == 0) ==> (this.elementCount == 0)
this.elementCount <= size(this.elementData[])
===========================================================================
javautil.Vector13.removeElement(java.lang.Object):::ENTER;condition="elementCount == 0"
this.elementCount one of { 0, 1 }
this.elementData[0..this.elementCount-1] elements has only one value
this.elementData[0..this.elementCount-1] elements != null
===========================================================================
javautil.Vector13.removeElement(java.lang.Object):::ENTER;condition="not(elementCount == 0)"
this.elementCount >= 1
===========================================================================
javautil.Vector13.removeElement(java.lang.Object):::EXIT480
this.elementData[this.elementCount] == this.elementData[orig(this.elementCount)-1]
this.elementData[this.elementCount+1..] == orig(this.elementData[post(this.elementCount)+1..])
this.elementData[this.elementCount+1..] == orig(this.elementData[this.elementCount..])
orig(this.elementData[post(this.elementCount)]) == orig(this.elementData[this.elementCount-1])
(this.elementCount == 0)  <==>  (orig(this.elementCount) == 1)
(this.elementCount == 0)  ==>  ((this.capacityIncrement == 0) ==> (size(this.elementData[])-1 == 0))
(this.elementCount == 0)  ==>  (orig(obj) has only one value)
(this.elementCount == 0)  ==>  (orig(obj.getClass().getName()) == java.lang.Object.class)
(this.elementCount == 0)  ==>  (orig(obj.getClass().getName()) is a substring of this.elementData.getClass().getName())
(this.elementCount == 0)  ==>  (orig(this.elementData[0..post(this.elementCount)-1]) == [])
(this.elementCount == 0)  ==>  (orig(this.elementData[0..post(this.elementCount)]) contains no nulls and has only one value, of length 1)
(this.elementCount == 0)  ==>  (orig(this.elementData[0..post(this.elementCount)]) elements == orig(this.elementData[post(this.elementCount)]))
(this.elementCount == 0)  ==>  (orig(this.elementData[0..post(this.elementCount)]) elements has only one value)
(this.elementCount == 0)  ==>  (size(this.elementData[]) >= 1)
(this.elementCount == 0)  ==>  (this.elementCount <= this.capacityIncrement)
(this.elementCount == 0)  ==>  (this.elementCount is a pointer)
(this.elementCount == 0)  ==>  (this.elementData[0..this.elementCount-1] == [])
(this.elementCount == 0)  ==>  (this.elementData[0..this.elementCount] == [null])
(this.elementCount == 0)  ==>  (this.elementData[] elements == null)
(this.elementCount == 0)  ==>  (this.elementData[] elements == this.elementData[this.elementCount])
(this.elementCount == 0)  ==>  (this.elementData[].getClass().getName() elements == null)
return == true
orig(this.elementCount) >= 1
this.elementCount - orig(this.elementCount) + 1 == 0
(size(this.elementData[])-1 == 0) ==> (this.elementCount == 0)
this.elementCount <= size(this.elementData[])-1
orig(obj.getClass().getName()) in orig(this.elementData[].getClass().getName())
this.elementData[this.elementCount..] elements == this.elementData[this.elementCount]
this.elementData[0..this.elementCount-1] is a subset of orig(this.elementData[0..post(this.elementCount)])
===========================================================================
javautil.Vector13.removeElement(java.lang.Object):::EXIT480;condition="return == true"
===========================================================================
javautil.Vector13.removeElement(java.lang.Object):::EXIT480;condition="elementCount == 0"
this.elementData[this.elementCount] == this.elementData[orig(this.elementCount)-1]
this.elementData[this.elementCount+1..] == orig(this.elementData[post(this.elementCount)+1..])
this.elementData[this.elementCount+1..] == orig(this.elementData[this.elementCount..])
orig(this.elementData[post(this.elementCount)]) == orig(this.elementData[this.elementCount-1])
return == true
orig(this.elementCount) == 1
orig(obj) has only one value
orig(obj.getClass().getName()) == java.lang.Object.class
size(this.elementData[]) >= 1
this.elementData[0..this.elementCount] == [null]
orig(this.elementData[0..post(this.elementCount)]) contains no nulls and has only one value, of length 1
orig(this.elementData[0..post(this.elementCount)]) elements has only one value
orig(obj.getClass().getName()) is a substring of this.elementData.getClass().getName()
this.elementData[] elements == this.elementData[this.elementCount]
this.elementCount <= size(this.elementData[])-1
(this.capacityIncrement == 0) ==> (size(this.elementData[])-1 == 0)
orig(obj.getClass().getName()) in orig(this.elementData[].getClass().getName())
orig(this.elementData[0..post(this.elementCount)]) elements == orig(this.elementData[post(this.elementCount)])
===========================================================================
javautil.Vector13.removeElement(java.lang.Object):::EXIT480;condition="not(elementCount == 0)"
this.elementData[this.elementCount] == this.elementData[orig(this.elementCount)-1]
this.elementData[this.elementCount+1..] == orig(this.elementData[post(this.elementCount)+1..])
this.elementData[this.elementCount+1..] == orig(this.elementData[this.elementCount..])
orig(this.elementData[post(this.elementCount)]) == orig(this.elementData[this.elementCount-1])
return == true
orig(this.elementCount) >= 2
size(this.elementData[]) >= 2
this.elementCount - orig(this.elementCount) + 1 == 0
this.elementCount <= size(this.elementData[])-1
orig(obj.getClass().getName()) in orig(this.elementData[].getClass().getName())
this.elementData[this.elementCount..] elements == this.elementData[this.elementCount]
this.elementData[this.elementCount-1] in orig(this.elementData[0..post(this.elementCount)])
this.elementData[0..this.elementCount-1] is a subset of orig(this.elementData[0..post(this.elementCount)])
===========================================================================
javautil.Vector13.removeElement(java.lang.Object):::EXIT480;condition="not(orig(elementCount == 0))"
this.elementData[this.elementCount] == this.elementData[orig(this.elementCount)-1]
this.elementData[this.elementCount+1..] == orig(this.elementData[post(this.elementCount)+1..])
this.elementData[this.elementCount+1..] == orig(this.elementData[this.elementCount..])
orig(this.elementData[post(this.elementCount)]) == orig(this.elementData[this.elementCount-1])
return == true
this.elementCount - orig(this.elementCount) + 1 == 0
(size(this.elementData[])-1 == 0) ==> (this.elementCount == 0)
this.elementCount <= size(this.elementData[])-1
orig(obj.getClass().getName()) in orig(this.elementData[].getClass().getName())
this.elementData[this.elementCount..] elements == this.elementData[this.elementCount]
this.elementData[0..this.elementCount-1] is a subset of orig(this.elementData[0..post(this.elementCount)])
===========================================================================
javautil.Vector13.removeElement(java.lang.Object):::EXIT482
this.elementData[] == orig(this.elementData[])
this.elementCount == orig(this.elementCount)
(this.elementCount == 0)  ==>  (this.elementCount <= this.capacityIncrement)
(this.elementCount == 0)  ==>  (this.elementCount is a pointer)
(this.elementCount == 0)  ==>  (this.elementData[0..this.elementCount-1] == [])
(this.elementCount == 0)  ==>  (this.elementData[] elements == null)
(this.elementCount == 0)  ==>  (this.elementData[].getClass().getName() elements == null)
return == false
===========================================================================
javautil.Vector13.removeElement(java.lang.Object):::EXIT482;condition="not(return == true)"
===========================================================================
javautil.Vector13.removeElement(java.lang.Object):::EXIT482;condition="elementCount == 0"
this.elementData[] == orig(this.elementData[])
this.elementCount == orig(this.elementCount)
return == false
===========================================================================
javautil.Vector13.removeElement(java.lang.Object):::EXIT482;condition="not(elementCount == 0)"
this.elementData[] == orig(this.elementData[])
this.elementCount == orig(this.elementCount)
return == false
===========================================================================
javautil.Vector13.removeElement(java.lang.Object):::EXIT482;condition="orig(elementCount == 0)"
===========================================================================
javautil.Vector13.removeElement(java.lang.Object):::EXIT482;condition="not(orig(elementCount == 0))"
this.elementData[] == orig(this.elementData[])
this.elementCount == orig(this.elementCount)
this.elementCount >= 1
return == false
===========================================================================
javautil.Vector13.removeElement(java.lang.Object):::EXIT
this.elementData == orig(this.elementData)
this.elementData.getClass().getName() == orig(this.elementData.getClass().getName())
this.capacityIncrement == orig(this.capacityIncrement)
size(this.elementData[]) == orig(size(this.elementData[]))
this.elementData[orig(this.elementCount)..] == orig(this.elementData[this.elementCount..])
(orig(this.elementCount) == 0)  ==>  (orig(this.elementCount) is a pointer)
(orig(this.elementCount) == 0)  ==>  (orig(this.elementData[0..post(this.elementCount)-1]) == [])
(orig(this.elementCount) == 0)  ==>  (orig(this.elementData[0..this.elementCount-1]) == [])
(orig(this.elementCount) == 0)  ==>  (orig(this.elementData[]) elements == null)
(orig(this.elementCount) == 0)  ==>  (orig(this.elementData[].getClass().getName()) elements == null)
(orig(this.elementCount) == 0)  ==>  (orig(this.elementData[post(this.elementCount)..]) elements == null)
(orig(this.elementCount) == 0)  ==>  (return == false)
(orig(this.elementCount) == 0)  ==>  (this.capacityIncrement >= orig(this.elementCount))
(orig(this.elementCount) == 0)  ==>  (this.elementCount <= this.capacityIncrement)
(orig(this.elementCount) == 0)  ==>  (this.elementCount == 0)
(orig(this.elementCount) == 0)  ==>  (this.elementCount == orig(this.elementCount))
(orig(this.elementCount) == 0)  ==>  (this.elementCount is a pointer)
(orig(this.elementCount) == 0)  ==>  (this.elementData[0..orig(this.elementCount)-1] == [])
(orig(this.elementCount) == 0)  ==>  (this.elementData[0..this.elementCount-1] == [])
(orig(this.elementCount) == 0)  ==>  (this.elementData[] == orig(this.elementData[]))
(orig(this.elementCount) == 0)  ==>  (this.elementData[] elements == null)
(orig(this.elementCount) == 0)  ==>  (this.elementData[].getClass().getName() elements == null)
(return == false)  <==>  (this.elementCount == orig(this.elementCount))
(return == false)  ==>  (orig(this.elementData[post(this.elementCount)..]) elements == null)
(return == false)  ==>  (this.elementData[] == orig(this.elementData[]))
(return == true)  <==>  (this.elementCount - orig(this.elementCount) + 1 == 0)
(return == true)  ==>  ((size(this.elementData[])-1 == 0) ==> (this.elementCount == 0))
(return == true)  ==>  (orig(obj.getClass().getName()) in orig(this.elementData[].getClass().getName()))
(return == true)  ==>  (orig(this.elementCount) >= 1)
(return == true)  ==>  (orig(this.elementData[post(this.elementCount)]) == orig(this.elementData[this.elementCount-1]))
(return == true)  ==>  (this.elementCount <= size(this.elementData[])-1)
(return == true)  ==>  (this.elementData[0..this.elementCount-1] is a subset of orig(this.elementData[0..post(this.elementCount)]))
(return == true)  ==>  (this.elementData[this.elementCount+1..] == orig(this.elementData[post(this.elementCount)+1..]))
(return == true)  ==>  (this.elementData[this.elementCount..] elements == this.elementData[orig(this.elementCount)-1])
(return == true)  ==>  (this.elementData[this.elementCount..] elements == this.elementData[this.elementCount])
(return == true)  ==>  (this.elementData[this.elementCount] == this.elementData[orig(this.elementCount)-1])
(this.elementCount == 0)  ==>  (orig(this.elementCount) one of { 0, 1 })
(this.elementCount == 0)  ==>  (orig(this.elementData[0..post(this.elementCount)-1]) == [])
(this.elementCount == 0)  ==>  (orig(this.elementData[0..this.elementCount-1]) elements != null)
(this.elementCount == 0)  ==>  (orig(this.elementData[0..this.elementCount-1]) elements has only one value)
(this.elementCount == 0)  ==>  (this.elementCount <= this.capacityIncrement)
(this.elementCount == 0)  ==>  (this.elementCount is a pointer)
(this.elementCount == 0)  ==>  (this.elementData[0..this.elementCount-1] == [])
(this.elementCount == 0)  ==>  (this.elementData[] elements == null)
(this.elementCount == 0)  ==>  (this.elementData[].getClass().getName() elements == null)
this.elementData.getClass().getName() != orig(obj.getClass().getName())
(orig(this.elementCount) == 0) ==> (this.elementCount == 0)
this.elementCount <= orig(this.elementCount)
(size(this.elementData[]) == 0) ==> (this.elementCount == 0)
this.elementCount <= size(this.elementData[])
(size(this.elementData[]) == 0) ==> (orig(this.elementCount) == 0)
orig(this.elementCount) <= size(this.elementData[])
this.elementData[0..this.elementCount-1] is a subset of orig(this.elementData[0..this.elementCount-1])
===========================================================================
javautil.Vector13.removeElement(java.lang.Object):::EXIT;condition="return == true"
this.elementData[this.elementCount] == this.elementData[orig(this.elementCount)-1]
this.elementData[this.elementCount+1..] == orig(this.elementData[post(this.elementCount)+1..])
this.elementData[this.elementCount+1..] == orig(this.elementData[this.elementCount..])
orig(this.elementData[post(this.elementCount)]) == orig(this.elementData[this.elementCount-1])
return == true
orig(this.elementCount) >= 1
this.elementCount - orig(this.elementCount) + 1 == 0
(size(this.elementData[])-1 == 0) ==> (this.elementCount == 0)
this.elementCount <= size(this.elementData[])-1
orig(obj.getClass().getName()) in orig(this.elementData[].getClass().getName())
this.elementData[this.elementCount..] elements == this.elementData[this.elementCount]
this.elementData[0..this.elementCount-1] is a subset of orig(this.elementData[0..post(this.elementCount)])
===========================================================================
javautil.Vector13.removeElement(java.lang.Object):::EXIT;condition="not(return == true)"
this.elementData[] == orig(this.elementData[])
this.elementCount == orig(this.elementCount)
return == false
===========================================================================
javautil.Vector13.removeElement(java.lang.Object):::EXIT;condition="elementCount == 0"
this.elementData == orig(this.elementData)
this.elementData.getClass().getName() == orig(this.elementData.getClass().getName())
this.capacityIncrement == orig(this.capacityIncrement)
size(this.elementData[]) == orig(size(this.elementData[]))
this.elementData[orig(this.elementCount)..] == orig(this.elementData[this.elementCount..])
this.elementData != null
this.elementData.getClass().getName() == java.lang.Object[].class
this.elementData[] elements == null
this.elementData[].getClass().getName() elements == null
this.elementCount == 0
this.capacityIncrement >= 0
this.elementData[0..this.elementCount-1] == []
this.elementData.getClass().getName() != orig(obj.getClass().getName())
this.elementCount <= this.capacityIncrement
this.elementCount <= orig(this.elementCount)
this.elementCount <= size(this.elementData[])
(size(this.elementData[]) == 0) ==> (orig(this.elementCount) == 0)
orig(this.elementCount) <= size(this.elementData[])
===========================================================================
javautil.Vector13.removeElement(java.lang.Object):::EXIT;condition="not(elementCount == 0)"
this.elementData == orig(this.elementData)
this.elementData.getClass().getName() == orig(this.elementData.getClass().getName())
this.capacityIncrement == orig(this.capacityIncrement)
size(this.elementData[]) == orig(size(this.elementData[]))
this.elementData[orig(this.elementCount)..] == orig(this.elementData[this.elementCount..])
this.elementData != null
this.elementData.getClass().getName() == java.lang.Object[].class
this.elementCount >= 1
this.capacityIncrement >= 0
this.elementData[this.elementCount..] elements == null
this.elementData.getClass().getName() != orig(obj.getClass().getName())
this.elementCount <= orig(this.elementCount)
this.elementCount <= size(this.elementData[])
this.elementData[this.elementCount-1] in orig(this.elementData[])
orig(this.elementCount) <= size(this.elementData[])
this.elementData[this.elementCount-1] in orig(this.elementData[0..this.elementCount-1])
this.elementData[0..this.elementCount-1] is a subset of orig(this.elementData[0..this.elementCount-1])
===========================================================================
javautil.Vector13.removeElement(java.lang.Object):::EXIT;condition="orig(elementCount == 0)"
this.elementData == orig(this.elementData)
this.elementData.getClass().getName() == orig(this.elementData.getClass().getName())
this.elementData[] == orig(this.elementData[])
this.elementCount == orig(this.elementCount)
this.capacityIncrement == orig(this.capacityIncrement)
this.elementData != null
this.elementData.getClass().getName() == java.lang.Object[].class
this.elementData[] elements == null
this.elementData[].getClass().getName() elements == null
this.elementCount == 0
this.capacityIncrement >= 0
return == false
orig(obj) != null
orig(obj.getClass().getName()) is printable
this.elementData[0..this.elementCount-1] == []
this.elementData.getClass().getName() != orig(obj.getClass().getName())
this.elementCount <= this.capacityIncrement
this.elementCount <= size(this.elementData[])
===========================================================================
javautil.Vector13.removeElement(java.lang.Object):::EXIT;condition="not(orig(elementCount == 0))"
this.elementData == orig(this.elementData)
this.elementData.getClass().getName() == orig(this.elementData.getClass().getName())
this.capacityIncrement == orig(this.capacityIncrement)
size(this.elementData[]) == orig(size(this.elementData[]))
this.elementData[orig(this.elementCount)..] == orig(this.elementData[this.elementCount..])
this.elementData != null
this.elementData.getClass().getName() == java.lang.Object[].class
this.elementCount >= 0
this.capacityIncrement >= 0
orig(this.elementCount) >= 1
orig(obj) != null
orig(obj.getClass().getName()) is printable
this.elementData[this.elementCount..] elements == null
this.elementData.getClass().getName() != orig(obj.getClass().getName())
this.elementCount <= orig(this.elementCount)
this.elementCount <= size(this.elementData[])
orig(this.elementCount) <= size(this.elementData[])
this.elementData[0..this.elementCount-1] is a subset of orig(this.elementData[0..this.elementCount-1])
===========================================================================
javautil.Vector13.removeElementAt(int):::ENTER
(this.elementCount == 1)  ==>  (index == 0)
(this.elementCount == 1)  ==>  (index is a pointer)
(this.elementCount == 1)  ==>  (size(this.elementData[]) >= 1)
(this.elementCount == 1)  ==>  (this.capacityIncrement >= index)
(this.elementCount == 1)  ==>  (this.elementData[0..index-1] == [])
(this.elementCount == 1)  ==>  (this.elementData[0..index] contains no nulls and has only one value, of length 1)
(this.elementCount == 1)  ==>  (this.elementData[0..index] elements != null)
(this.elementCount == 1)  ==>  (this.elementData[0..index] elements == this.elementData[index])
(this.elementCount == 1)  ==>  (this.elementData[0..index] elements == this.elementData[this.elementCount-1])
(this.elementCount == 1)  ==>  (this.elementData[0..index] elements has only one value)
(this.elementCount == 1)  ==>  (this.elementData[0..this.elementCount-1] contains no nulls and has only one value, of length 1)
(this.elementCount == 1)  ==>  (this.elementData[0..this.elementCount-1] elements != null)
(this.elementCount == 1)  ==>  (this.elementData[0..this.elementCount-1] elements == this.elementData[index])
(this.elementCount == 1)  ==>  (this.elementData[0..this.elementCount-1] elements == this.elementData[this.elementCount-1])
(this.elementCount == 1)  ==>  (this.elementData[0..this.elementCount-1] elements has only one value)
(this.elementCount == 1)  ==>  (this.elementData[index+1..] elements == null)
(this.elementCount == 1)  ==>  (this.elementData[this.elementCount-1] == this.elementData[index])
(this.elementCount >= 2)  ==>  (size(this.elementData[]) >= 2)
this.elementCount >= 1
index >= 0
this.elementCount > index
this.elementCount <= size(this.elementData[])
(size(this.elementData[])-1 == 0) ==> (index == 0)
index <= size(this.elementData[])-1
===========================================================================
javautil.Vector13.removeElementAt(int):::ENTER;condition="elementCount == 0"
this.elementData[this.elementCount-1] == this.elementData[index]
this.elementCount == 1
index == 0
this.elementData[0..this.elementCount-1] contains no nulls and has only one value, of length 1
this.elementData[0..this.elementCount-1] elements has only one value
this.elementData[0..this.elementCount-1] elements != null
this.elementData[0..index-1] == []
this.capacityIncrement >= index
this.elementData[0..this.elementCount-1] elements == this.elementData[this.elementCount-1]
===========================================================================
javautil.Vector13.removeElementAt(int):::ENTER;condition="not(elementCount == 0)"
this.elementCount >= 2
size(this.elementData[]) >= 2
===========================================================================
javautil.Vector13.removeElementAt(int):::ENTER;condition="index >= elementCount"
this.elementData[this.elementCount-1] == this.elementData[index]
this.elementData != null
this.elementData.getClass().getName() == java.lang.Object[].class
this.elementCount >= 1
this.capacityIncrement >= 0
index >= 0
size(this.elementData[]) >= 1
this.elementData[this.elementCount..] elements == null
this.elementCount - index - 1 == 0
this.elementCount <= size(this.elementData[])
(size(this.elementData[])-1 == 0) ==> (index == 0)
index <= size(this.elementData[])-1
===========================================================================
javautil.Vector13.removeElementAt(int):::ENTER;condition="not(index >= elementCount)"
this.elementData != null
this.elementData.getClass().getName() == java.lang.Object[].class
this.elementCount >= 2
this.capacityIncrement >= 0
index >= 0
size(this.elementData[]) >= 2
this.elementData[this.elementCount..] elements == null
this.elementCount > index
this.elementCount <= size(this.elementData[])
index < size(this.elementData[])-1
===========================================================================
javautil.Vector13.removeElementAt(int):::EXIT
this.elementData == orig(this.elementData)
this.elementData.getClass().getName() == orig(this.elementData.getClass().getName())
this.capacityIncrement == orig(this.capacityIncrement)
size(this.elementData[]) == orig(size(this.elementData[]))
this.elementData[this.elementCount] == this.elementData[orig(this.elementCount)-1]
this.elementData[this.elementCount+1..] == orig(this.elementData[post(this.elementCount)+1..])
this.elementData[this.elementCount+1..] == orig(this.elementData[this.elementCount..])
this.elementData[0..orig(index)-1] == orig(this.elementData[0..post(index)-1])
this.elementData[0..orig(index)-1] == orig(this.elementData[0..index-1])
orig(this.elementData[post(this.elementCount)]) == orig(this.elementData[this.elementCount-1])
(this.elementCount == 0)  <==>  (orig(this.elementCount) == 1)
(this.elementCount == 0)  ==>  (orig(index) == 0)
(this.elementCount == 0)  ==>  (orig(index) is a pointer)
(this.elementCount == 0)  ==>  (orig(this.elementData[0..index]) contains no nulls and has only one value, of length 1)
(this.elementCount == 0)  ==>  (orig(this.elementData[0..index]) elements != null)
(this.elementCount == 0)  ==>  (orig(this.elementData[0..index]) elements == orig(this.elementData[index]))
(this.elementCount == 0)  ==>  (orig(this.elementData[0..index]) elements == orig(this.elementData[post(this.elementCount)]))
(this.elementCount == 0)  ==>  (orig(this.elementData[0..index]) elements has only one value)
(this.elementCount == 0)  ==>  (orig(this.elementData[0..post(this.elementCount)-1]) == [])
(this.elementCount == 0)  ==>  (orig(this.elementData[0..post(this.elementCount)]) contains no nulls and has only one value, of length 1)
(this.elementCount == 0)  ==>  (orig(this.elementData[0..post(this.elementCount)]) elements != null)
(this.elementCount == 0)  ==>  (orig(this.elementData[0..post(this.elementCount)]) elements == orig(this.elementData[index]))
(this.elementCount == 0)  ==>  (orig(this.elementData[0..post(this.elementCount)]) elements == orig(this.elementData[post(this.elementCount)]))
(this.elementCount == 0)  ==>  (orig(this.elementData[0..post(this.elementCount)]) elements has only one value)
(this.elementCount == 0)  ==>  (size(this.elementData[]) >= 1)
(this.elementCount == 0)  ==>  (this.capacityIncrement >= orig(index))
(this.elementCount == 0)  ==>  (this.elementCount <= this.capacityIncrement)
(this.elementCount == 0)  ==>  (this.elementCount == orig(index))
(this.elementCount == 0)  ==>  (this.elementCount is a pointer)
(this.elementCount == 0)  ==>  (this.elementData[0..orig(index)-1] == [])
(this.elementCount == 0)  ==>  (this.elementData[0..orig(index)] == [null])
(this.elementCount == 0)  ==>  (this.elementData[0..this.elementCount-1] == [])
(this.elementCount == 0)  ==>  (this.elementData[0..this.elementCount] == [null])
(this.elementCount == 0)  ==>  (this.elementData[] elements == null)
(this.elementCount == 0)  ==>  (this.elementData[] elements == this.elementData[orig(index)])
(this.elementCount == 0)  ==>  (this.elementData[] elements == this.elementData[this.elementCount])
(this.elementCount == 0)  ==>  (this.elementData[].getClass().getName() elements == null)
(this.elementCount == 0)  ==>  (this.elementData[orig(index)..] elements == null)
(this.elementCount == 0)  ==>  (this.elementData[orig(index)..] elements == this.elementData[orig(index)])
(this.elementCount == 0)  ==>  (this.elementData[orig(index)..] elements == this.elementData[this.elementCount])
(this.elementCount == 0)  ==>  (this.elementData[this.elementCount+1..] == orig(this.elementData[index+1..]))
(this.elementCount == 0)  ==>  (this.elementData[this.elementCount..] elements == this.elementData[orig(index)])
(this.elementCount == orig(index))  ==>  (orig(this.elementCount) - orig(index) - 1 == 0)
(this.elementCount == orig(index))  ==>  (orig(this.elementCount) >= 1)
(this.elementCount == orig(index))  ==>  (size(this.elementData[]) >= 1)
(this.elementCount == orig(index))  ==>  (this.elementData[0..this.elementCount-1] == orig(this.elementData[0..post(this.elementCount)-1]))
(this.elementCount == orig(index))  ==>  (this.elementData[orig(index)..] elements == null)
(this.elementCount == orig(index))  ==>  (this.elementData[orig(index)..] elements == this.elementData[orig(index)])
(this.elementCount == orig(index))  ==>  (this.elementData[orig(index)..] elements == this.elementData[this.elementCount])
(this.elementCount == orig(index))  ==>  (this.elementData[this.elementCount+1..] == orig(this.elementData[index+1..]))
(this.elementCount == orig(index))  ==>  (this.elementData[this.elementCount..] elements == this.elementData[orig(index)])
(this.elementCount > orig(index))  ==>  (orig(index) < size(this.elementData[])-1)
(this.elementCount > orig(index))  ==>  (orig(this.elementCount) >= 2)
(this.elementCount > orig(index))  ==>  (orig(this.elementData[post(this.elementCount)..]) is a subsequence of this.elementData[orig(index)..])
(this.elementCount > orig(index))  ==>  (size(this.elementData[]) >= 2)
(this.elementCount > orig(index))  ==>  (this.elementCount >= 1)
(this.elementCount > orig(index))  ==>  (this.elementData[0..orig(index)] is a subset of orig(this.elementData[0..post(this.elementCount)]))
(this.elementCount > orig(index))  ==>  (this.elementData[orig(index)] in orig(this.elementData[0..post(this.elementCount)]))
(this.elementCount > orig(index))  ==>  (this.elementData[orig(index)] in orig(this.elementData[]))
(this.elementCount > orig(index))  ==>  (this.elementData[orig(index)] in orig(this.elementData[index+1..]))
(this.elementCount > orig(index))  ==>  (this.elementData[orig(index)] in orig(this.elementData[index..]))
(this.elementCount > orig(index))  ==>  (this.elementData[this.elementCount-1] == orig(this.elementData[post(this.elementCount)]))
this.elementCount - orig(this.elementCount) + 1 == 0
(this.elementCount == 0) ==> (orig(index) == 0)
this.elementCount >= orig(index)
(size(this.elementData[])-1 == 0) ==> (this.elementCount == 0)
this.elementCount <= size(this.elementData[])-1
orig(this.elementCount) <= size(this.elementData[])
(size(this.elementData[])-1 == 0) ==> (orig(index) == 0)
orig(index) <= size(this.elementData[])-1
this.elementData[this.elementCount..] elements == this.elementData[this.elementCount]
this.elementData[0..this.elementCount-1] is a subset of orig(this.elementData[0..post(this.elementCount)])
orig(this.elementData[index+1..]) is a subsequence of this.elementData[orig(index)..]
===========================================================================
javautil.Vector13.removeElementAt(int):::EXIT;condition="elementCount == 0"
this.elementCount == orig(index)
this.elementData[this.elementCount+1..] == orig(this.elementData[post(index)+1..])
this.elementData[this.elementCount+1..] == orig(this.elementData[index+1..])
this.elementData[] elements == null
this.elementData[].getClass().getName() elements == null
this.elementCount == 0
this.elementData[0..this.elementCount] == [null]
this.elementData[0..this.elementCount-1] == []
orig(this.elementData[0..index]) contains no nulls and has only one value, of length 1
orig(this.elementData[0..index]) elements has only one value
orig(this.elementData[0..index]) elements != null
this.elementData[] elements == this.elementData[this.elementCount]
this.elementCount <= this.capacityIncrement
orig(this.elementData[0..index]) elements == orig(this.elementData[index])
===========================================================================
javautil.Vector13.removeElementAt(int):::EXIT;condition="not(elementCount == 0)"
this.elementCount >= 1
size(this.elementData[]) >= 2
this.elementData[this.elementCount-1] in orig(this.elementData[])
this.elementData[this.elementCount-1] in orig(this.elementData[0..post(this.elementCount)])
===========================================================================
javautil.Vector13.removeElementAt(int):::EXIT;condition="not(orig(elementCount == 0))"
this.elementData == orig(this.elementData)
this.elementData.getClass().getName() == orig(this.elementData.getClass().getName())
this.capacityIncrement == orig(this.capacityIncrement)
size(this.elementData[]) == orig(size(this.elementData[]))
this.elementData[this.elementCount] == this.elementData[orig(this.elementCount)-1]
this.elementData[this.elementCount+1..] == orig(this.elementData[post(this.elementCount)+1..])
this.elementData[this.elementCount+1..] == orig(this.elementData[this.elementCount..])
this.elementData[0..orig(index)-1] == orig(this.elementData[0..post(index)-1])
this.elementData[0..orig(index)-1] == orig(this.elementData[0..index-1])
orig(this.elementData[post(this.elementCount)]) == orig(this.elementData[this.elementCount-1])
this.elementData != null
this.elementData.getClass().getName() == java.lang.Object[].class
this.elementCount >= 0
this.capacityIncrement >= 0
orig(this.elementCount) >= 1
orig(index) >= 0
this.elementData[this.elementCount..] elements == null
this.elementCount - orig(this.elementCount) + 1 == 0
(this.elementCount == 0) ==> (orig(index) == 0)
this.elementCount >= orig(index)
(size(this.elementData[])-1 == 0) ==> (this.elementCount == 0)
this.elementCount <= size(this.elementData[])-1
orig(this.elementCount) > orig(index)
orig(this.elementCount) <= size(this.elementData[])
(size(this.elementData[])-1 == 0) ==> (orig(index) == 0)
orig(index) <= size(this.elementData[])-1
this.elementData[this.elementCount..] elements == this.elementData[this.elementCount]
this.elementData[0..this.elementCount-1] is a subset of orig(this.elementData[0..post(this.elementCount)])
orig(this.elementData[index+1..]) is a subsequence of this.elementData[orig(index)..]
===========================================================================
javautil.Vector13.removeElementAt(int):::EXIT;condition="index >= elementCount"
this.elementData == orig(this.elementData)
this.elementData.getClass().getName() == orig(this.elementData.getClass().getName())
this.elementCount == orig(index)
this.capacityIncrement == orig(this.capacityIncrement)
size(this.elementData[]) == orig(size(this.elementData[]))
this.elementData[this.elementCount] == this.elementData[orig(this.elementCount)-1]
this.elementData[this.elementCount+1..] == orig(this.elementData[post(this.elementCount)+1..])
this.elementData[this.elementCount+1..] == orig(this.elementData[post(index)+1..])
this.elementData[this.elementCount+1..] == orig(this.elementData[this.elementCount..])
this.elementData[this.elementCount+1..] == orig(this.elementData[index+1..])
this.elementData[0..this.elementCount-1] == orig(this.elementData[0..post(this.elementCount)-1])
this.elementData[0..this.elementCount-1] == orig(this.elementData[0..post(index)-1])
this.elementData[0..this.elementCount-1] == orig(this.elementData[0..index-1])
this.elementData != null
this.elementData.getClass().getName() == java.lang.Object[].class
this.elementCount >= 0
this.capacityIncrement >= 0
size(this.elementData[]) >= 1
this.elementData[this.elementCount..] elements == null
this.elementCount - orig(this.elementCount) + 1 == 0
(size(this.elementData[])-1 == 0) ==> (this.elementCount == 0)
this.elementCount <= size(this.elementData[])-1
orig(this.elementCount) <= size(this.elementData[])
this.elementData[this.elementCount..] elements == this.elementData[this.elementCount]
===========================================================================
javautil.Vector13.removeElementAt(int):::EXIT;condition="not(index >= elementCount)"
this.elementData == orig(this.elementData)
this.elementData.getClass().getName() == orig(this.elementData.getClass().getName())
this.capacityIncrement == orig(this.capacityIncrement)
size(this.elementData[]) == orig(size(this.elementData[]))
this.elementData[this.elementCount] == this.elementData[orig(this.elementCount)-1]
this.elementData[this.elementCount-1] == orig(this.elementData[post(this.elementCount)])
this.elementData[this.elementCount-1] == orig(this.elementData[this.elementCount-1])
this.elementData[this.elementCount+1..] == orig(this.elementData[post(this.elementCount)+1..])
this.elementData[this.elementCount+1..] == orig(this.elementData[this.elementCount..])
this.elementData[0..orig(index)-1] == orig(this.elementData[0..post(index)-1])
this.elementData[0..orig(index)-1] == orig(this.elementData[0..index-1])
this.elementData != null
this.elementData.getClass().getName() == java.lang.Object[].class
this.elementCount >= 1
this.capacityIncrement >= 0
size(this.elementData[]) >= 2
this.elementData[this.elementCount..] elements == null
this.elementCount - orig(this.elementCount) + 1 == 0
this.elementCount > orig(index)
this.elementCount <= size(this.elementData[])-1
this.elementData[orig(index)] in orig(this.elementData[])
orig(this.elementCount) <= size(this.elementData[])
orig(index) < size(this.elementData[])-1
this.elementData[this.elementCount..] elements == this.elementData[this.elementCount]
this.elementData[0..this.elementCount-1] is a subset of orig(this.elementData[0..post(this.elementCount)])
this.elementData[orig(index)] in orig(this.elementData[0..post(this.elementCount)])
this.elementData[orig(index)] in orig(this.elementData[index..])
this.elementData[orig(index)] in orig(this.elementData[index+1..])
orig(this.elementData[post(this.elementCount)..]) is a subsequence of this.elementData[orig(index)..]
orig(this.elementData[index+1..]) is a subsequence of this.elementData[orig(index)..]
this.elementData[0..orig(index)] is a subset of orig(this.elementData[0..post(this.elementCount)])
===========================================================================
javautil.Vector13.removeElementAt(int):::EXIT;condition="not(orig(index >= elementCount))"
this.elementData == orig(this.elementData)
this.elementData.getClass().getName() == orig(this.elementData.getClass().getName())
this.capacityIncrement == orig(this.capacityIncrement)
size(this.elementData[]) == orig(size(this.elementData[]))
this.elementData[this.elementCount] == this.elementData[orig(this.elementCount)-1]
this.elementData[this.elementCount+1..] == orig(this.elementData[post(this.elementCount)+1..])
this.elementData[this.elementCount+1..] == orig(this.elementData[this.elementCount..])
this.elementData[0..orig(index)-1] == orig(this.elementData[0..post(index)-1])
this.elementData[0..orig(index)-1] == orig(this.elementData[0..index-1])
orig(this.elementData[post(this.elementCount)]) == orig(this.elementData[this.elementCount-1])
this.elementData != null
this.elementData.getClass().getName() == java.lang.Object[].class
this.elementCount >= 0
this.capacityIncrement >= 0
orig(this.elementCount) >= 1
orig(index) >= 0
this.elementData[this.elementCount..] elements == null
this.elementCount - orig(this.elementCount) + 1 == 0
(this.elementCount == 0) ==> (orig(index) == 0)
this.elementCount >= orig(index)
(size(this.elementData[])-1 == 0) ==> (this.elementCount == 0)
this.elementCount <= size(this.elementData[])-1
orig(this.elementCount) > orig(index)
orig(this.elementCount) <= size(this.elementData[])
(size(this.elementData[])-1 == 0) ==> (orig(index) == 0)
orig(index) <= size(this.elementData[])-1
this.elementData[this.elementCount..] elements == this.elementData[this.elementCount]
this.elementData[0..this.elementCount-1] is a subset of orig(this.elementData[0..post(this.elementCount)])
orig(this.elementData[index+1..]) is a subsequence of this.elementData[orig(index)..]
===========================================================================
javautil.Vector13.removeElementAt(int):::EXIT;condition="not(index < 0)"
this.elementData == orig(this.elementData)
this.elementData.getClass().getName() == orig(this.elementData.getClass().getName())
this.capacityIncrement == orig(this.capacityIncrement)
size(this.elementData[]) == orig(size(this.elementData[]))
this.elementData[this.elementCount] == this.elementData[orig(this.elementCount)-1]
this.elementData[this.elementCount+1..] == orig(this.elementData[post(this.elementCount)+1..])
this.elementData[this.elementCount+1..] == orig(this.elementData[this.elementCount..])
this.elementData[0..orig(index)-1] == orig(this.elementData[0..post(index)-1])
this.elementData[0..orig(index)-1] == orig(this.elementData[0..index-1])
orig(this.elementData[post(this.elementCount)]) == orig(this.elementData[this.elementCount-1])
this.elementData != null
this.elementData.getClass().getName() == java.lang.Object[].class
this.elementCount >= 0
this.capacityIncrement >= 0
orig(this.elementCount) >= 1
orig(index) >= 0
this.elementData[this.elementCount..] elements == null
this.elementCount - orig(this.elementCount) + 1 == 0
(this.elementCount == 0) ==> (orig(index) == 0)
this.elementCount >= orig(index)
(size(this.elementData[])-1 == 0) ==> (this.elementCount == 0)
this.elementCount <= size(this.elementData[])-1
orig(this.elementCount) > orig(index)
orig(this.elementCount) <= size(this.elementData[])
(size(this.elementData[])-1 == 0) ==> (orig(index) == 0)
orig(index) <= size(this.elementData[])-1
this.elementData[this.elementCount..] elements == this.elementData[this.elementCount]
this.elementData[0..this.elementCount-1] is a subset of orig(this.elementData[0..post(this.elementCount)])
orig(this.elementData[index+1..]) is a subsequence of this.elementData[orig(index)..]
===========================================================================
javautil.Vector13.removeElementAt(int):::EXIT;condition="not(orig(index < 0))"
this.elementData == orig(this.elementData)
this.elementData.getClass().getName() == orig(this.elementData.getClass().getName())
this.capacityIncrement == orig(this.capacityIncrement)
size(this.elementData[]) == orig(size(this.elementData[]))
this.elementData[this.elementCount] == this.elementData[orig(this.elementCount)-1]
this.elementData[this.elementCount+1..] == orig(this.elementData[post(this.elementCount)+1..])
this.elementData[this.elementCount+1..] == orig(this.elementData[this.elementCount..])
this.elementData[0..orig(index)-1] == orig(this.elementData[0..post(index)-1])
this.elementData[0..orig(index)-1] == orig(this.elementData[0..index-1])
orig(this.elementData[post(this.elementCount)]) == orig(this.elementData[this.elementCount-1])
this.elementData != null
this.elementData.getClass().getName() == java.lang.Object[].class
this.elementCount >= 0
this.capacityIncrement >= 0
orig(this.elementCount) >= 1
orig(index) >= 0
this.elementData[this.elementCount..] elements == null
this.elementCount - orig(this.elementCount) + 1 == 0
(this.elementCount == 0) ==> (orig(index) == 0)
this.elementCount >= orig(index)
(size(this.elementData[])-1 == 0) ==> (this.elementCount == 0)
this.elementCount <= size(this.elementData[])-1
orig(this.elementCount) > orig(index)
orig(this.elementCount) <= size(this.elementData[])
(size(this.elementData[])-1 == 0) ==> (orig(index) == 0)
orig(index) <= size(this.elementData[])-1
this.elementData[this.elementCount..] elements == this.elementData[this.elementCount]
this.elementData[0..this.elementCount-1] is a subset of orig(this.elementData[0..post(this.elementCount)])
orig(this.elementData[index+1..]) is a subsequence of this.elementData[orig(index)..]
===========================================================================
javautil.Vector13.setElementAt(java.lang.Object, int):::ENTER
obj.getClass().getName() is printable
index >= 0
this.elementData.getClass().getName() != obj.getClass().getName()
this.elementCount > index
this.elementCount <= size(this.elementData[])
(size(this.elementData[])-1 == 0) ==> (index == 0)
index <= size(this.elementData[])-1
===========================================================================
javautil.Vector13.setElementAt(java.lang.Object, int):::ENTER;condition="not(elementCount == 0)"
===========================================================================
javautil.Vector13.setElementAt(java.lang.Object, int):::ENTER;condition="not(index >= elementCount)"
this.elementData != null
this.elementData.getClass().getName() == java.lang.Object[].class
this.capacityIncrement >= 0
obj.getClass().getName() is printable
index >= 0
this.elementData[this.elementCount..] elements == null
this.elementData.getClass().getName() != obj.getClass().getName()
this.elementCount > index
this.elementCount <= size(this.elementData[])
(size(this.elementData[])-1 == 0) ==> (index == 0)
index <= size(this.elementData[])-1
===========================================================================
javautil.Vector13.setElementAt(java.lang.Object, int):::EXIT
this.elementData == orig(this.elementData)
this.elementData.getClass().getName() == orig(this.elementData.getClass().getName())
this.elementCount == orig(this.elementCount)
this.capacityIncrement == orig(this.capacityIncrement)
size(this.elementData[]) == orig(size(this.elementData[]))
this.elementData[this.elementCount..] == orig(this.elementData[post(this.elementCount)..])
this.elementData[this.elementCount..] == orig(this.elementData[this.elementCount..])
this.elementData[orig(index)+1..] == orig(this.elementData[post(index)+1..])
this.elementData[orig(index)+1..] == orig(this.elementData[index+1..])
this.elementData[0..orig(index)-1] == orig(this.elementData[0..post(index)-1])
this.elementData[0..orig(index)-1] == orig(this.elementData[0..index-1])
this.elementData.getClass().getName() != orig(obj.getClass().getName())
orig(this.elementData[this.elementCount-1]) in this.elementData[]
orig(obj.getClass().getName()) in this.elementData[].getClass().getName()
this.elementCount > orig(index)
this.elementCount <= size(this.elementData[])
(size(this.elementData[])-1 == 0) ==> (orig(index) == 0)
orig(index) <= size(this.elementData[])-1
orig(this.elementData[this.elementCount-1]) in this.elementData[0..this.elementCount-1]
===========================================================================
javautil.Vector13.setElementAt(java.lang.Object, int):::EXIT;condition="not(elementCount == 0)"
===========================================================================
javautil.Vector13.setElementAt(java.lang.Object, int):::EXIT;condition="not(orig(elementCount == 0))"
this.elementData == orig(this.elementData)
this.elementData.getClass().getName() == orig(this.elementData.getClass().getName())
this.elementCount == orig(this.elementCount)
this.capacityIncrement == orig(this.capacityIncrement)
size(this.elementData[]) == orig(size(this.elementData[]))
this.elementData[this.elementCount..] == orig(this.elementData[post(this.elementCount)..])
this.elementData[this.elementCount..] == orig(this.elementData[this.elementCount..])
this.elementData[orig(index)+1..] == orig(this.elementData[post(index)+1..])
this.elementData[orig(index)+1..] == orig(this.elementData[index+1..])
this.elementData[0..orig(index)-1] == orig(this.elementData[0..post(index)-1])
this.elementData[0..orig(index)-1] == orig(this.elementData[0..index-1])
this.elementData != null
this.elementData.getClass().getName() == java.lang.Object[].class
this.capacityIncrement >= 0
orig(obj.getClass().getName()) is printable
orig(index) >= 0
this.elementData[this.elementCount..] elements == null
this.elementData.getClass().getName() != orig(obj.getClass().getName())
orig(this.elementData[this.elementCount-1]) in this.elementData[]
orig(obj.getClass().getName()) in this.elementData[].getClass().getName()
this.elementCount > orig(index)
this.elementCount <= size(this.elementData[])
(size(this.elementData[])-1 == 0) ==> (orig(index) == 0)
orig(index) <= size(this.elementData[])-1
orig(this.elementData[this.elementCount-1]) in this.elementData[0..this.elementCount-1]
===========================================================================
javautil.Vector13.setElementAt(java.lang.Object, int):::EXIT;condition="not(index >= elementCount)"
this.elementData == orig(this.elementData)
this.elementData.getClass().getName() == orig(this.elementData.getClass().getName())
this.elementCount == orig(this.elementCount)
this.capacityIncrement == orig(this.capacityIncrement)
size(this.elementData[]) == orig(size(this.elementData[]))
this.elementData[this.elementCount..] == orig(this.elementData[post(this.elementCount)..])
this.elementData[this.elementCount..] == orig(this.elementData[this.elementCount..])
this.elementData[orig(index)+1..] == orig(this.elementData[post(index)+1..])
this.elementData[orig(index)+1..] == orig(this.elementData[index+1..])
this.elementData[0..orig(index)-1] == orig(this.elementData[0..post(index)-1])
this.elementData[0..orig(index)-1] == orig(this.elementData[0..index-1])
this.elementData != null
this.elementData.getClass().getName() == java.lang.Object[].class
this.capacityIncrement >= 0
this.elementData[this.elementCount..] elements == null
this.elementData.getClass().getName() != orig(obj.getClass().getName())
orig(this.elementData[this.elementCount-1]) in this.elementData[]
orig(obj.getClass().getName()) in this.elementData[].getClass().getName()
this.elementCount > orig(index)
this.elementCount <= size(this.elementData[])
(size(this.elementData[])-1 == 0) ==> (orig(index) == 0)
orig(index) <= size(this.elementData[])-1
orig(this.elementData[this.elementCount-1]) in this.elementData[0..this.elementCount-1]
===========================================================================
javautil.Vector13.setElementAt(java.lang.Object, int):::EXIT;condition="not(orig(index >= elementCount))"
this.elementData == orig(this.elementData)
this.elementData.getClass().getName() == orig(this.elementData.getClass().getName())
this.elementCount == orig(this.elementCount)
this.capacityIncrement == orig(this.capacityIncrement)
size(this.elementData[]) == orig(size(this.elementData[]))
this.elementData[this.elementCount..] == orig(this.elementData[post(this.elementCount)..])
this.elementData[this.elementCount..] == orig(this.elementData[this.elementCount..])
this.elementData[orig(index)+1..] == orig(this.elementData[post(index)+1..])
this.elementData[orig(index)+1..] == orig(this.elementData[index+1..])
this.elementData[0..orig(index)-1] == orig(this.elementData[0..post(index)-1])
this.elementData[0..orig(index)-1] == orig(this.elementData[0..index-1])
this.elementData != null
this.elementData.getClass().getName() == java.lang.Object[].class
this.capacityIncrement >= 0
orig(obj.getClass().getName()) is printable
orig(index) >= 0
this.elementData[this.elementCount..] elements == null
this.elementData.getClass().getName() != orig(obj.getClass().getName())
orig(this.elementData[this.elementCount-1]) in this.elementData[]
orig(obj.getClass().getName()) in this.elementData[].getClass().getName()
this.elementCount > orig(index)
this.elementCount <= size(this.elementData[])
(size(this.elementData[])-1 == 0) ==> (orig(index) == 0)
orig(index) <= size(this.elementData[])-1
orig(this.elementData[this.elementCount-1]) in this.elementData[0..this.elementCount-1]
===========================================================================
javautil.Vector13.setSize(int):::ENTER
newSize >= 0
(size(this.elementData[]) == 0) ==> (this.elementCount == 0)
this.elementCount <= size(this.elementData[])
===========================================================================
javautil.Vector13.setSize(int):::EXIT
this.elementData.getClass().getName() == orig(this.elementData.getClass().getName())
this.elementCount == orig(newSize)
this.capacityIncrement == orig(this.capacityIncrement)
(size(this.elementData[])-1 >= orig(size(this.elementData[])))  ==>  ((size(this.elementData[])-1 == 0) ==> (orig(size(this.elementData[])) == 0))
(size(this.elementData[])-1 >= orig(size(this.elementData[])))  ==>  ((size(this.elementData[])-1 == 0) ==> (orig(this.elementCount) == 0))
(size(this.elementData[])-1 >= orig(size(this.elementData[])))  ==>  (orig(this.elementCount) <= size(this.elementData[])-1)
(size(this.elementData[])-1 >= orig(size(this.elementData[])))  ==>  (orig(this.elementData[]) is a subsequence of this.elementData[0..this.elementCount-1])
(size(this.elementData[])-1 >= orig(size(this.elementData[])))  ==>  (orig(this.elementData[]) is a subsequence of this.elementData[])
(size(this.elementData[])-1 >= orig(size(this.elementData[])))  ==>  (orig(this.elementData[]) is a subset of this.elementData[0..this.elementCount-1])
(size(this.elementData[])-1 >= orig(size(this.elementData[])))  ==>  (orig(this.elementData[this.elementCount..]) is a subsequence of this.elementData[orig(this.capacityIncrement)..])
(size(this.elementData[])-1 >= orig(size(this.elementData[])))  ==>  (orig(this.elementData[this.elementCount..]) is a subsequence of this.elementData[this.capacityIncrement..])
(size(this.elementData[])-1 >= orig(size(this.elementData[])))  ==>  (this.capacityIncrement - size(this.elementData[]) + orig(size(this.elementData[])) == 0)
(size(this.elementData[])-1 >= orig(size(this.elementData[])))  ==>  (this.capacityIncrement - size(this.elementData[]) + orig(size(this.elementData[]))-1 + 1 == 0)
(size(this.elementData[])-1 >= orig(size(this.elementData[])))  ==>  (this.capacityIncrement - size(this.elementData[])-1 + orig(size(this.elementData[])) - 1 == 0)
(size(this.elementData[])-1 >= orig(size(this.elementData[])))  ==>  (this.capacityIncrement - size(this.elementData[])-1 + orig(size(this.elementData[]))-1 == 0)
(size(this.elementData[])-1 >= orig(size(this.elementData[])))  ==>  (this.capacityIncrement <= size(this.elementData[]))
(size(this.elementData[])-1 >= orig(size(this.elementData[])))  ==>  (this.capacityIncrement >= 1)
(size(this.elementData[])-1 >= orig(size(this.elementData[])))  ==>  (this.elementCount - this.capacityIncrement - orig(size(this.elementData[])) == 0)
(size(this.elementData[])-1 >= orig(size(this.elementData[])))  ==>  (this.elementCount - this.capacityIncrement - orig(size(this.elementData[]))-1 - 1 == 0)
(size(this.elementData[])-1 >= orig(size(this.elementData[])))  ==>  (this.elementCount == size(this.elementData[]))
(size(this.elementData[])-1 >= orig(size(this.elementData[])))  ==>  (this.elementCount >= this.capacityIncrement)
(size(this.elementData[])-1 >= orig(size(this.elementData[])))  ==>  (this.elementData[0..orig(this.elementCount)-1] == orig(this.elementData[0..this.elementCount-1]))
(size(this.elementData[])-1 >= orig(size(this.elementData[])))  ==>  (this.elementData[] is a superset of orig(this.elementData[]))
(size(this.elementData[])-1 >= orig(size(this.elementData[])))  ==>  (this.elementData[this.elementCount..] == [])
(size(this.elementData[])-1 >= orig(size(this.elementData[])))  ==>  (this.elementData[this.elementCount..] is a subset of orig(this.elementData[this.elementCount..]))
(this.elementData[this.elementCount..] elements == null)  <==>  (size(this.elementData[]) == orig(size(this.elementData[])))
(this.elementData[this.elementCount..] elements == null)  <==>  (this.elementCount <= orig(size(this.elementData[])))
(this.elementData[this.elementCount..] elements == null)  ==>  ((orig(size(this.elementData[])) == 0) ==> (this.capacityIncrement == 0))
(this.elementData[this.elementCount..] elements == null)  ==>  ((orig(size(this.elementData[])) == 0) ==> (this.elementCount == 0))
(this.elementData[this.elementCount..] elements == null)  ==>  (this.elementData == orig(this.elementData))
(this.elementData[this.elementCount..] elements == null)  ==>  (this.elementData[0..this.elementCount-1] == orig(this.elementData[0..newSize-1]))
(this.elementData[this.elementCount..] elements == null)  ==>  (this.elementData[0..this.elementCount-1] == orig(this.elementData[0..post(newSize)-1]))
(this.elementData[this.elementCount..] elements == null)  ==>  (this.elementData[0..this.elementCount-1] == orig(this.elementData[0..post(this.elementCount)-1]))
(this.elementData[this.elementCount..] elements == null)  ==>  (this.elementData[orig(this.elementCount)..] == orig(this.elementData[this.elementCount..]))
this.elementData[orig(this.elementCount)..] elements == null
(size(this.elementData[]) == 0) ==> (this.elementCount == 0)
this.elementCount <= size(this.elementData[])
(size(this.elementData[]) == 0) ==> (this.capacityIncrement == 0)
(size(this.elementData[]) == 0) ==> (orig(this.elementCount) == 0)
orig(this.elementCount) <= size(this.elementData[])
(size(this.elementData[]) == 0) ==> (orig(size(this.elementData[])) == 0)
size(this.elementData[]) >= orig(size(this.elementData[]))
size(this.elementData[])-1 >= orig(size(this.elementData[]))-1
orig(this.elementData[this.elementCount..]) is a subsequence of this.elementData[orig(this.elementCount)..]
size(this.elementData[]) == (java.lang.Math.max(this.elementCount, orig(size(this.elementData[]))))
===========================================================================
javautil.Vector13.setSize(int):::EXIT;condition="not((newSize > elementCount)&&(newSize > elementData.length))"
===========================================================================
javautil.Vector13.setSize(int):::EXIT;condition="orig((newSize > elementCount)&&(newSize > elementData.length))"
this.elementData.getClass().getName() == orig(this.elementData.getClass().getName())
this.elementCount == orig(newSize)
this.elementCount == size(this.elementData[])
this.capacityIncrement == orig(this.capacityIncrement)
this.elementData[this.elementCount-1] == this.elementData[orig(this.elementCount)]
this.elementData[0..orig(this.elementCount)-1] == orig(this.elementData[0..this.elementCount-1])
this.elementData != null
this.elementData.getClass().getName() == java.lang.Object[].class
this.capacityIncrement >= 1
orig(this.elementData) != null
orig(this.elementCount) >= 0
this.elementData[this.elementCount-1] == null
this.elementData[this.elementCount..] == []
this.elementData[orig(this.elementCount)..] elements == null
orig(this.elementData[this.elementCount..]) elements == null
orig(this.elementData[]) is a subsequence of this.elementData[]
this.elementData[] is a superset of orig(this.elementData[])
this.elementCount >= this.capacityIncrement
orig(this.elementData[]) is a subset of this.elementData[0..orig(this.elementCount)]
(size(this.elementData[])-1 == 0) ==> (orig(this.elementCount) == 0)
orig(this.elementCount) <= size(this.elementData[])-1
(orig(size(this.elementData[])) == 0) ==> (orig(this.elementCount) == 0)
orig(this.elementCount) <= orig(size(this.elementData[]))
(size(this.elementData[])-1 == 0) ==> (orig(size(this.elementData[])) == 0)
size(this.elementData[])-1 >= orig(size(this.elementData[]))
this.elementData[orig(this.elementCount)..] elements == this.elementData[this.elementCount-1]
this.elementData[this.elementCount..] is a subset of orig(this.elementData[this.elementCount..])
orig(this.elementData[this.elementCount..]) is a subsequence of this.elementData[this.capacityIncrement..]
orig(this.elementData[this.elementCount..]) is a subsequence of this.elementData[orig(this.elementCount)..]
orig(this.elementData[this.elementCount..]) is a subsequence of this.elementData[orig(this.elementCount)+1..]
this.elementCount - this.capacityIncrement - orig(size(this.elementData[])) == 0
this.elementCount - this.capacityIncrement - orig(size(this.elementData[]))-1 - 1 == 0
this.capacityIncrement - size(this.elementData[])-1 + orig(size(this.elementData[])) - 1 == 0
this.capacityIncrement - size(this.elementData[])-1 + orig(size(this.elementData[]))-1 == 0
===========================================================================
javautil.Vector13.setSize(int):::EXIT;condition="not(orig((newSize > elementCount)&&(newSize > elementData.length)))"
this.elementData == orig(this.elementData)
this.elementData.getClass().getName() == orig(this.elementData.getClass().getName())
this.elementCount == orig(newSize)
this.capacityIncrement == orig(this.capacityIncrement)
size(this.elementData[]) == orig(size(this.elementData[]))
this.elementData[0..this.elementCount-1] == orig(this.elementData[0..post(this.elementCount)-1])
this.elementData[0..this.elementCount-1] == orig(this.elementData[0..post(newSize)-1])
this.elementData[0..this.elementCount-1] == orig(this.elementData[0..newSize-1])
this.elementData[orig(this.elementCount)..] == orig(this.elementData[this.elementCount..])
this.elementData != null
this.elementData.getClass().getName() == java.lang.Object[].class
this.elementCount >= 0
this.capacityIncrement >= 0
orig(this.elementCount) >= 0
this.elementData[this.elementCount..] elements == null
this.elementData[orig(this.elementCount)..] elements == null
(size(this.elementData[]) == 0) ==> (this.elementCount == 0)
this.elementCount <= size(this.elementData[])
(size(this.elementData[]) == 0) ==> (this.capacityIncrement == 0)
(size(this.elementData[]) == 0) ==> (orig(this.elementCount) == 0)
orig(this.elementCount) <= size(this.elementData[])
===========================================================================
javautil.Vector13.size():::ENTER
(size(this.elementData[]) == 0) ==> (this.elementCount == 0)
this.elementCount <= size(this.elementData[])
===========================================================================
javautil.Vector13.size():::EXIT
this.elementData == orig(this.elementData)
this.elementData.getClass().getName() == orig(this.elementData.getClass().getName())
this.elementData[] == orig(this.elementData[])
this.elementCount == return
this.capacityIncrement == orig(this.capacityIncrement)
return == orig(this.elementCount)
return >= 0
this.elementData[return..] elements == null
(size(this.elementData[]) == 0) ==> (return == 0)
return <= size(this.elementData[])
===========================================================================
javautil.Vector13.toString():::ENTER
(this.elementCount == 0)  ==>  (this.elementCount is a pointer)
(this.elementCount == 0)  ==>  (this.elementData[] elements == null)
(this.elementCount == 0)  ==>  (this.elementData[].getClass().getName() elements == null)
===========================================================================
javautil.Vector13.toString():::ENTER;condition="elementCount == 0"
this.elementData[] elements == null
this.elementData[].getClass().getName() elements == null
this.elementCount == 0
===========================================================================
javautil.Vector13.toString():::ENTER;condition="not(elementCount == 0)"
this.elementCount >= 1
===========================================================================
javautil.Vector13.toString():::EXIT
this.elementData == orig(this.elementData)
this.elementData.getClass().getName() == orig(this.elementData.getClass().getName())
this.elementData[] == orig(this.elementData[])
this.elementCount == orig(this.elementCount)
this.capacityIncrement == orig(this.capacityIncrement)
(this.elementCount == 0)  ==>  (return.toString == "[]")
(this.elementCount == 0)  ==>  (this.elementCount is a pointer)
(this.elementCount == 0)  ==>  (this.elementData[] elements == null)
(this.elementCount == 0)  ==>  (this.elementData[].getClass().getName() elements == null)
return != null
return.toString is printable
===========================================================================
javautil.Vector13.toString():::EXIT;condition="elementCount == 0"
this.elementData[] elements == null
this.elementData[].getClass().getName() elements == null
this.elementCount == 0
return.toString == "[]"
===========================================================================
javautil.Vector13.toString():::EXIT;condition="not(elementCount == 0)"
this.elementCount >= 1
===========================================================================
javautil.Vector13.toString():::EXIT;condition="orig(elementCount == 0)"
this.elementData == orig(this.elementData)
this.elementData.getClass().getName() == orig(this.elementData.getClass().getName())
this.elementData[] == orig(this.elementData[])
this.elementCount == orig(this.elementCount)
this.capacityIncrement == orig(this.capacityIncrement)
this.elementData != null
this.elementData.getClass().getName() == java.lang.Object[].class
this.elementData[] elements == null
this.elementData[].getClass().getName() elements == null
this.elementCount == 0
this.capacityIncrement >= 0
return != null
return.toString == "[]"
===========================================================================
javautil.Vector13.toString():::EXIT;condition="not(orig(elementCount == 0))"
this.elementData == orig(this.elementData)
this.elementData.getClass().getName() == orig(this.elementData.getClass().getName())
this.elementData[] == orig(this.elementData[])
this.elementCount == orig(this.elementCount)
this.capacityIncrement == orig(this.capacityIncrement)
this.elementData != null
this.elementData.getClass().getName() == java.lang.Object[].class
this.elementCount >= 1
this.capacityIncrement >= 0
return != null
return.toString is printable
===========================================================================
javautil.Vector13.trimToSize():::ENTER
(size(this.elementData[]) == 0) ==> (this.elementCount == 0)
this.elementCount <= size(this.elementData[])
===========================================================================
javautil.Vector13.trimToSize():::EXIT
this.elementData.getClass().getName() == orig(this.elementData.getClass().getName())
this.elementData[] == orig(this.elementData[0..post(this.elementCount)-1])
this.elementData[] == orig(this.elementData[0..this.elementCount-1])
this.elementCount == orig(this.elementCount)
this.elementCount == size(this.elementData[])
this.capacityIncrement == orig(this.capacityIncrement)
this.elementData[this.elementCount..] == []
(orig(size(this.elementData[])) == 0) ==> (this.elementCount == 0)
this.elementCount <= orig(size(this.elementData[]))
size(this.elementData[])-1 <= orig(size(this.elementData[]))-1
this.elementData[this.elementCount..] is a subset of orig(this.elementData[this.elementCount..])
