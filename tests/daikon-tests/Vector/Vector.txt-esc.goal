===========================================================================
javautil.Vector13:::CLASS
    Variables: javautil.Vector13.serialVersionUID
===========================================================================
javautil.Vector13:::OBJECT
    Variables: this this.elementData this.elementData.getClass().getName() this.elementData[] this.elementData[].getClass().getName() this.elementCount this.capacityIncrement javautil.Vector13.serialVersionUID size(this.elementData[]) size(this.elementData[])-1 this.elementData[this.elementCount] this.elementData[this.elementCount-1] this.elementData[this.elementCount..] this.elementData[this.elementCount+1..] this.elementData[0..this.elementCount] this.elementData[0..this.elementCount-1] this.elementData[this.capacityIncrement] this.elementData[this.capacityIncrement-1] this.elementData[this.capacityIncrement..] this.elementData[this.capacityIncrement+1..] this.elementData[0..this.capacityIncrement] this.elementData[0..this.capacityIncrement-1]
this.elementData != null
\typeof(this.elementData) == \type(java.lang.Object[])
this.elementCount >= 0
this.capacityIncrement >= 0
(\forall int i; (this.elementCount <= i && i <= this.elementData.length-1) ==> (this.elementData[i] == null))
===========================================================================
javautil.Vector13.Vector13():::EXIT
    Variables: this this.elementData this.elementData.getClass().getName() this.elementData[] this.elementData[].getClass().getName() this.elementCount this.capacityIncrement javautil.Vector13.serialVersionUID size(this.elementData[]) size(this.elementData[])-1 this.elementData[this.elementCount] this.elementData[this.elementCount-1] this.elementData[this.elementCount..] this.elementData[this.elementCount+1..] this.elementData[0..this.elementCount] this.elementData[0..this.elementCount-1] this.elementData[this.capacityIncrement] this.elementData[this.capacityIncrement-1] this.elementData[this.capacityIncrement..] this.elementData[this.capacityIncrement+1..] this.elementData[0..this.capacityIncrement] this.elementData[0..this.capacityIncrement-1]
this.elementCount == this.capacityIncrement
(this.elementData.length == 10) && ((\forall int i; (0 <= i && i <= this.elementData.length-1) ==> (this.elementData[i] == null)))
(\forall int i; (0 <= i && i <= this.elementData.length-1) ==> (this.elementData[i] == null))
\elemtype(this.elementData) == \typeof(null)
(\forall int i; (0 <= i && i <= this.elementData.length-1) ==> (\typeof(this.elementData[i]) == \typeof(null)))
this.elementCount == 0
this.elementData.length == 10
(\forall int i; (this.elementCount+1 <= i && i <= this.elementData.length-1) ==> (this.elementData[i] == null))
(\forall int i; (0 <= i && i <= this.elementCount) ==> (this.elementData[i] == null))
(\forall int i; (0 <= i && i <= this.elementCount-1) ==> (this.elementData[i] != null))
(\forall int i; (0 <= i && i <= this.elementData.length-1) ==> (this.elementData[i] == this.elementData[this.elementCount]))
===========================================================================
javautil.Vector13.Vector13(int):::ENTER
    Variables: initialCapacity
initialCapacity >= 0
===========================================================================
javautil.Vector13.Vector13(int):::EXIT
    Variables: this this.elementData this.elementData.getClass().getName() this.elementData[] this.elementData[].getClass().getName() this.elementCount this.capacityIncrement javautil.Vector13.serialVersionUID initialCapacity orig(initialCapacity) size(this.elementData[]) size(this.elementData[])-1 this.elementData[this.elementCount] this.elementData[this.elementCount-1] this.elementData[this.elementCount..] this.elementData[this.elementCount+1..] this.elementData[0..this.elementCount] this.elementData[0..this.elementCount-1] this.elementData[this.capacityIncrement] this.elementData[this.capacityIncrement-1] this.elementData[this.capacityIncrement..] this.elementData[this.capacityIncrement+1..] this.elementData[0..this.capacityIncrement] this.elementData[0..this.capacityIncrement-1] this.elementData[initialCapacity] this.elementData[initialCapacity-1] this.elementData[initialCapacity..] this.elementData[initialCapacity+1..] this.elementData[0..initialCapacity] this.elementData[0..initialCapacity-1] this.elementData[orig(initialCapacity)] this.elementData[orig(initialCapacity)-1] this.elementData[orig(initialCapacity)..] this.elementData[orig(initialCapacity)+1..] this.elementData[0..orig(initialCapacity)] this.elementData[0..orig(initialCapacity)-1]
      Unmodified variables: initialCapacity
this.elementCount == this.capacityIncrement
\old(initialCapacity) == this.elementData.length
(\forall int i; (0 <= i && i <= this.elementData.length-1) ==> (this.elementData[i] == null))
(\forall int i; (0 <= i && i <= this.elementData.length-1) ==> (\typeof(this.elementData[i]) == \typeof(null)))
this.elementCount == 0
(\forall int i; (\old(initialCapacity) <= i && i <= this.elementData.length-1) ==> (this.elementData[i] != null))
this.elementCount <= \old(initialCapacity)
===========================================================================
javautil.Vector13.Vector13(int, int):::ENTER
    Variables: initialCapacity capacityIncrement
initialCapacity >= 0
capacityIncrement >= 0
===========================================================================
javautil.Vector13.Vector13(int, int):::EXIT
    Variables: this this.elementData this.elementData.getClass().getName() this.elementData[] this.elementData[].getClass().getName() this.elementCount this.capacityIncrement javautil.Vector13.serialVersionUID initialCapacity capacityIncrement orig(initialCapacity) orig(capacityIncrement) size(this.elementData[]) size(this.elementData[])-1 this.elementData[this.elementCount] this.elementData[this.elementCount-1] this.elementData[this.elementCount..] this.elementData[this.elementCount+1..] this.elementData[0..this.elementCount] this.elementData[0..this.elementCount-1] this.elementData[this.capacityIncrement] this.elementData[this.capacityIncrement-1] this.elementData[this.capacityIncrement..] this.elementData[this.capacityIncrement+1..] this.elementData[0..this.capacityIncrement] this.elementData[0..this.capacityIncrement-1] this.elementData[initialCapacity] this.elementData[initialCapacity-1] this.elementData[initialCapacity..] this.elementData[initialCapacity+1..] this.elementData[0..initialCapacity] this.elementData[0..initialCapacity-1] this.elementData[capacityIncrement] this.elementData[capacityIncrement-1] this.elementData[capacityIncrement..] this.elementData[capacityIncrement+1..] this.elementData[0..capacityIncrement] this.elementData[0..capacityIncrement-1] this.elementData[orig(initialCapacity)] this.elementData[orig(initialCapacity)-1] this.elementData[orig(initialCapacity)..] this.elementData[orig(initialCapacity)+1..] this.elementData[0..orig(initialCapacity)] this.elementData[0..orig(initialCapacity)-1] this.elementData[orig(capacityIncrement)] this.elementData[orig(capacityIncrement)-1] this.elementData[orig(capacityIncrement)..] this.elementData[orig(capacityIncrement)+1..] this.elementData[0..orig(capacityIncrement)] this.elementData[0..orig(capacityIncrement)-1]
      Unmodified variables: initialCapacity capacityIncrement
this.capacityIncrement == \old(capacityIncrement)
\old(initialCapacity) == this.elementData.length
(\forall int i; (0 <= i && i <= this.elementData.length-1) ==> (this.elementData[i] == null))
(\forall int i; (0 <= i && i <= this.elementData.length-1) ==> (\typeof(this.elementData[i]) == \typeof(null)))
this.elementCount == 0
(\forall int i; (\old(initialCapacity) <= i && i <= this.elementData.length-1) ==> (this.elementData[i] != null))
this.elementCount <= this.capacityIncrement
this.elementCount <= \old(initialCapacity)
===========================================================================
javautil.Vector13.addElement(java.lang.Object):::ENTER
    Variables: this this.elementData this.elementData.getClass().getName() this.elementData[] this.elementData[].getClass().getName() this.elementCount this.capacityIncrement javautil.Vector13.serialVersionUID obj obj.getClass().getName() size(this.elementData[]) size(this.elementData[])-1 this.elementData[this.elementCount] this.elementData[this.elementCount-1] this.elementData[this.elementCount..] this.elementData[this.elementCount+1..] this.elementData[0..this.elementCount] this.elementData[0..this.elementCount-1] this.elementData[this.capacityIncrement] this.elementData[this.capacityIncrement-1] this.elementData[this.capacityIncrement..] this.elementData[this.capacityIncrement+1..] this.elementData[0..this.capacityIncrement] this.elementData[0..this.capacityIncrement-1]
(obj != null)  ==>  (warning: method daikon.inv.unary.string.PrintableString.format(OutputFormat:ESC/Java) needs to be implemented: obj.getClass().getName() is printable)
(obj != null)  ==>  (\typeof(this.elementData) != \typeof(obj))
(this.elementData.length == 0) ==> (this.elementCount == 0)
this.elementCount <= this.elementData.length
===========================================================================
javautil.Vector13.addElement(java.lang.Object):::EXIT
    Variables: this this.elementData this.elementData.getClass().getName() this.elementData[] this.elementData[].getClass().getName() this.elementCount this.capacityIncrement javautil.Vector13.serialVersionUID obj obj.getClass().getName() orig(this) orig(this.elementData) orig(this.elementData.getClass().getName()) orig(this.elementData[]) orig(this.elementData[].getClass().getName()) orig(this.elementCount) orig(this.capacityIncrement) orig(obj) orig(obj.getClass().getName()) size(this.elementData[]) size(this.elementData[])-1 orig(size(this.elementData[])) orig(size(this.elementData[]))-1 this.elementData[this.elementCount] this.elementData[this.elementCount-1] this.elementData[this.elementCount..] this.elementData[this.elementCount+1..] this.elementData[0..this.elementCount] this.elementData[0..this.elementCount-1] this.elementData[this.capacityIncrement] this.elementData[this.capacityIncrement-1] this.elementData[this.capacityIncrement..] this.elementData[this.capacityIncrement+1..] this.elementData[0..this.capacityIncrement] this.elementData[0..this.capacityIncrement-1] this.elementData[orig(this.elementCount)] this.elementData[orig(this.elementCount)-1] this.elementData[orig(this.elementCount)..] this.elementData[orig(this.elementCount)+1..] this.elementData[0..orig(this.elementCount)] this.elementData[0..orig(this.elementCount)-1] this.elementData[orig(this.capacityIncrement)] this.elementData[orig(this.capacityIncrement)-1] this.elementData[orig(this.capacityIncrement)..] this.elementData[orig(this.capacityIncrement)+1..] this.elementData[0..orig(this.capacityIncrement)] this.elementData[0..orig(this.capacityIncrement)-1] orig(this.elementData[post(this.elementCount)]) orig(this.elementData[post(this.elementCount)-1]) orig(this.elementData[post(this.elementCount)..]) orig(this.elementData[post(this.elementCount)+1..]) orig(this.elementData[0..post(this.elementCount)]) orig(this.elementData[0..post(this.elementCount)-1]) orig(this.elementData[post(this.capacityIncrement)]) orig(this.elementData[post(this.capacityIncrement)-1]) orig(this.elementData[post(this.capacityIncrement)..]) orig(this.elementData[post(this.capacityIncrement)+1..]) orig(this.elementData[0..post(this.capacityIncrement)]) orig(this.elementData[0..post(this.capacityIncrement)-1]) orig(this.elementData[this.elementCount]) orig(this.elementData[this.elementCount-1]) orig(this.elementData[this.elementCount..]) orig(this.elementData[this.elementCount+1..]) orig(this.elementData[0..this.elementCount]) orig(this.elementData[0..this.elementCount-1]) orig(this.elementData[this.capacityIncrement]) orig(this.elementData[this.capacityIncrement-1]) orig(this.elementData[this.capacityIncrement..]) orig(this.elementData[this.capacityIncrement+1..]) orig(this.elementData[0..this.capacityIncrement]) orig(this.elementData[0..this.capacityIncrement-1])
      Modified variables: this.elementData this.elementData[] this.elementData[].getClass().getName() this.elementCount size(this.elementData[]) this.elementData[this.elementCount] this.elementData[this.elementCount-1] this.elementData[this.elementCount..] this.elementData[this.elementCount+1..] this.elementData[0..this.elementCount] this.elementData[0..this.elementCount-1] this.elementData[this.capacityIncrement] this.elementData[this.capacityIncrement-1] this.elementData[this.capacityIncrement..] this.elementData[this.capacityIncrement+1..] this.elementData[0..this.capacityIncrement] this.elementData[0..this.capacityIncrement-1]
      Unmodified variables: this this.elementData.getClass().getName() this.capacityIncrement obj obj.getClass().getName()
modifies this.elementData, this.elementData[*], this.elementCount, this.elementData[this.elementCount], this.elementData[this.elementCount-1], this.elementData[this.elementCount..], this.elementData[this.elementCount+1..], this.elementData[0..this.elementCount], this.elementData[0..this.elementCount-1], this.elementData[this.capacityIncrement], this.elementData[this.capacityIncrement-1], this.elementData[this.capacityIncrement..], this.elementData[this.capacityIncrement+1..], this.elementData[0..this.capacityIncrement], this.elementData[0..this.capacityIncrement-1]
this.elementData[this.elementCount-1] == this.elementData[\old(this.elementCount)]
warning: method daikon.inv.binary.twoSequence.SeqSeqIntEqual.format(OutputFormat:ESC/Java) needs to be implemented: this.elementData[0..orig(this.elementCount)-1] == orig(this.elementData[0..this.elementCount-1])
this.elementCount >= 1
this.elementData.length >= 1
(\old(obj) != null)  ==>  (\typeof(this.elementData) != \old(\typeof(obj)))
(\old(obj) != null)  ==>  (!(\forall int i; (0 <= i && i <= this.elementData.length-1) ==> (\typeof(this.elementData[i]) != \old(\typeof(obj)))))
this.elementCount - \old(this.elementCount) - 1 == 0
this.elementCount <= this.elementData.length
(this.elementData.length-1 == 0) ==> (\old(this.elementCount) == 0)
\old(this.elementCount) <= this.elementData.length-1
this.elementData.length >= \old(this.elementData.length)
this.elementData.length-1 >= \old(this.elementData.length)-1
===========================================================================
javautil.Vector13.clone():::ENTER
    Variables: this this.elementData this.elementData.getClass().getName() this.elementData[] this.elementData[].getClass().getName() this.elementCount this.capacityIncrement javautil.Vector13.serialVersionUID size(this.elementData[]) size(this.elementData[])-1 this.elementData[this.elementCount] this.elementData[this.elementCount-1] this.elementData[this.elementCount..] this.elementData[this.elementCount+1..] this.elementData[0..this.elementCount] this.elementData[0..this.elementCount-1] this.elementData[this.capacityIncrement] this.elementData[this.capacityIncrement-1] this.elementData[this.capacityIncrement..] this.elementData[this.capacityIncrement+1..] this.elementData[0..this.capacityIncrement] this.elementData[0..this.capacityIncrement-1]
(this.elementData.length == 0) ==> (this.elementCount == 0)
this.elementCount <= this.elementData.length
===========================================================================
javautil.Vector13.clone():::EXIT
    Variables: this this.elementData this.elementData.getClass().getName() this.elementData[] this.elementData[].getClass().getName() this.elementCount this.capacityIncrement javautil.Vector13.serialVersionUID return return.getClass().getName() orig(this) orig(this.elementData) orig(this.elementData.getClass().getName()) orig(this.elementData[]) orig(this.elementData[].getClass().getName()) orig(this.elementCount) orig(this.capacityIncrement) size(this.elementData[]) size(this.elementData[])-1 orig(size(this.elementData[])) orig(size(this.elementData[]))-1 this.elementData[this.elementCount] this.elementData[this.elementCount-1] this.elementData[this.elementCount..] this.elementData[this.elementCount+1..] this.elementData[0..this.elementCount] this.elementData[0..this.elementCount-1] this.elementData[this.capacityIncrement] this.elementData[this.capacityIncrement-1] this.elementData[this.capacityIncrement..] this.elementData[this.capacityIncrement+1..] this.elementData[0..this.capacityIncrement] this.elementData[0..this.capacityIncrement-1] this.elementData[orig(this.elementCount)] this.elementData[orig(this.elementCount)-1] this.elementData[orig(this.elementCount)..] this.elementData[orig(this.elementCount)+1..] this.elementData[0..orig(this.elementCount)] this.elementData[0..orig(this.elementCount)-1] this.elementData[orig(this.capacityIncrement)] this.elementData[orig(this.capacityIncrement)-1] this.elementData[orig(this.capacityIncrement)..] this.elementData[orig(this.capacityIncrement)+1..] this.elementData[0..orig(this.capacityIncrement)] this.elementData[0..orig(this.capacityIncrement)-1] orig(this.elementData[post(this.elementCount)]) orig(this.elementData[post(this.elementCount)-1]) orig(this.elementData[post(this.elementCount)..]) orig(this.elementData[post(this.elementCount)+1..]) orig(this.elementData[0..post(this.elementCount)]) orig(this.elementData[0..post(this.elementCount)-1]) orig(this.elementData[post(this.capacityIncrement)]) orig(this.elementData[post(this.capacityIncrement)-1]) orig(this.elementData[post(this.capacityIncrement)..]) orig(this.elementData[post(this.capacityIncrement)+1..]) orig(this.elementData[0..post(this.capacityIncrement)]) orig(this.elementData[0..post(this.capacityIncrement)-1]) orig(this.elementData[this.elementCount]) orig(this.elementData[this.elementCount-1]) orig(this.elementData[this.elementCount..]) orig(this.elementData[this.elementCount+1..]) orig(this.elementData[0..this.elementCount]) orig(this.elementData[0..this.elementCount-1]) orig(this.elementData[this.capacityIncrement]) orig(this.elementData[this.capacityIncrement-1]) orig(this.elementData[this.capacityIncrement..]) orig(this.elementData[this.capacityIncrement+1..]) orig(this.elementData[0..this.capacityIncrement]) orig(this.elementData[0..this.capacityIncrement-1])
      Modified variables: this.elementData[this.elementCount] this.elementData[this.elementCount-1] this.elementData[this.elementCount+1..] this.elementData[0..this.elementCount] this.elementData[this.capacityIncrement] this.elementData[this.capacityIncrement-1] this.elementData[this.capacityIncrement..] this.elementData[this.capacityIncrement+1..] this.elementData[0..this.capacityIncrement] this.elementData[0..this.capacityIncrement-1]
      Unmodified variables: this this.elementData this.elementData.getClass().getName() this.elementData[] this.elementData[].getClass().getName() this.elementCount this.capacityIncrement size(this.elementData[]) this.elementData[this.elementCount..] this.elementData[0..this.elementCount-1]
modifies this.elementData[this.elementCount], this.elementData[this.elementCount-1], this.elementData[this.elementCount+1..], this.elementData[0..this.elementCount], this.elementData[this.capacityIncrement], this.elementData[this.capacityIncrement-1], this.elementData[this.capacityIncrement..], this.elementData[this.capacityIncrement+1..], this.elementData[0..this.capacityIncrement], this.elementData[0..this.capacityIncrement-1]
\result != null
\typeof(\result) == \type(javautil.Vector13)
\typeof(this.elementData) != \typeof(\result)
(this.elementData.length == 0) ==> (this.elementCount == 0)
this.elementCount <= this.elementData.length
===========================================================================
javautil.Vector13.contains(java.lang.Object):::ENTER
    Variables: this this.elementData this.elementData.getClass().getName() this.elementData[] this.elementData[].getClass().getName() this.elementCount this.capacityIncrement javautil.Vector13.serialVersionUID elem elem.getClass().getName() size(this.elementData[]) size(this.elementData[])-1 this.elementData[this.elementCount] this.elementData[this.elementCount-1] this.elementData[this.elementCount..] this.elementData[this.elementCount+1..] this.elementData[0..this.elementCount] this.elementData[0..this.elementCount-1] this.elementData[this.capacityIncrement] this.elementData[this.capacityIncrement-1] this.elementData[this.capacityIncrement..] this.elementData[this.capacityIncrement+1..] this.elementData[0..this.capacityIncrement] this.elementData[0..this.capacityIncrement-1]
elem != null
warning: method daikon.inv.unary.string.PrintableString.format(OutputFormat:ESC/Java) needs to be implemented: elem.getClass().getName() is printable
\typeof(this.elementData) != \typeof(elem)
(this.elementData.length == 0) ==> (this.elementCount == 0)
this.elementCount <= this.elementData.length
===========================================================================
javautil.Vector13.contains(java.lang.Object):::EXIT
    Variables: this this.elementData this.elementData.getClass().getName() this.elementData[] this.elementData[].getClass().getName() this.elementCount this.capacityIncrement javautil.Vector13.serialVersionUID elem elem.getClass().getName() return orig(this) orig(this.elementData) orig(this.elementData.getClass().getName()) orig(this.elementData[]) orig(this.elementData[].getClass().getName()) orig(this.elementCount) orig(this.capacityIncrement) orig(elem) orig(elem.getClass().getName()) size(this.elementData[]) size(this.elementData[])-1 orig(size(this.elementData[])) orig(size(this.elementData[]))-1 this.elementData[this.elementCount] this.elementData[this.elementCount-1] this.elementData[this.elementCount..] this.elementData[this.elementCount+1..] this.elementData[0..this.elementCount] this.elementData[0..this.elementCount-1] this.elementData[this.capacityIncrement] this.elementData[this.capacityIncrement-1] this.elementData[this.capacityIncrement..] this.elementData[this.capacityIncrement+1..] this.elementData[0..this.capacityIncrement] this.elementData[0..this.capacityIncrement-1] this.elementData[orig(this.elementCount)] this.elementData[orig(this.elementCount)-1] this.elementData[orig(this.elementCount)..] this.elementData[orig(this.elementCount)+1..] this.elementData[0..orig(this.elementCount)] this.elementData[0..orig(this.elementCount)-1] this.elementData[orig(this.capacityIncrement)] this.elementData[orig(this.capacityIncrement)-1] this.elementData[orig(this.capacityIncrement)..] this.elementData[orig(this.capacityIncrement)+1..] this.elementData[0..orig(this.capacityIncrement)] this.elementData[0..orig(this.capacityIncrement)-1] orig(this.elementData[post(this.elementCount)]) orig(this.elementData[post(this.elementCount)-1]) orig(this.elementData[post(this.elementCount)..]) orig(this.elementData[post(this.elementCount)+1..]) orig(this.elementData[0..post(this.elementCount)]) orig(this.elementData[0..post(this.elementCount)-1]) orig(this.elementData[post(this.capacityIncrement)]) orig(this.elementData[post(this.capacityIncrement)-1]) orig(this.elementData[post(this.capacityIncrement)..]) orig(this.elementData[post(this.capacityIncrement)+1..]) orig(this.elementData[0..post(this.capacityIncrement)]) orig(this.elementData[0..post(this.capacityIncrement)-1]) orig(this.elementData[this.elementCount]) orig(this.elementData[this.elementCount-1]) orig(this.elementData[this.elementCount..]) orig(this.elementData[this.elementCount+1..]) orig(this.elementData[0..this.elementCount]) orig(this.elementData[0..this.elementCount-1]) orig(this.elementData[this.capacityIncrement]) orig(this.elementData[this.capacityIncrement-1]) orig(this.elementData[this.capacityIncrement..]) orig(this.elementData[this.capacityIncrement+1..]) orig(this.elementData[0..this.capacityIncrement]) orig(this.elementData[0..this.capacityIncrement-1])
      Modified variables: this.elementData[this.elementCount] this.elementData[this.elementCount-1] this.elementData[this.elementCount+1..] this.elementData[0..this.elementCount] this.elementData[this.capacityIncrement] this.elementData[this.capacityIncrement-1] this.elementData[this.capacityIncrement..] this.elementData[this.capacityIncrement+1..] this.elementData[0..this.capacityIncrement] this.elementData[0..this.capacityIncrement-1]
      Unmodified variables: this this.elementData this.elementData.getClass().getName() this.elementData[] this.elementData[].getClass().getName() this.elementCount this.capacityIncrement elem elem.getClass().getName() size(this.elementData[]) this.elementData[this.elementCount..] this.elementData[0..this.elementCount-1]
modifies this.elementData[this.elementCount], this.elementData[this.elementCount-1], this.elementData[this.elementCount+1..], this.elementData[0..this.elementCount], this.elementData[this.capacityIncrement], this.elementData[this.capacityIncrement-1], this.elementData[this.capacityIncrement..], this.elementData[this.capacityIncrement+1..], this.elementData[0..this.capacityIncrement], this.elementData[0..this.capacityIncrement-1]
(\result == true)  ==>  (!(\forall int i; (0 <= i && i <= this.elementData.length-1) ==> (\typeof(this.elementData[i]) != \old(\typeof(elem)))))
(\result == true)  ==>  (this.elementCount >= 1)
\typeof(this.elementData) != \old(\typeof(elem))
(this.elementData.length == 0) ==> (this.elementCount == 0)
this.elementCount <= this.elementData.length
===========================================================================
javautil.Vector13.copyInto(java.lang.Object[]):::ENTER
    Variables: this this.elementData this.elementData.getClass().getName() this.elementData[] this.elementData[].getClass().getName() this.elementCount this.capacityIncrement javautil.Vector13.serialVersionUID anArray anArray.getClass().getName() anArray[] size(this.elementData[]) size(this.elementData[])-1 size(anArray[]) size(anArray[])-1 this.elementData[this.elementCount] this.elementData[this.elementCount-1] this.elementData[this.elementCount..] this.elementData[this.elementCount+1..] this.elementData[0..this.elementCount] this.elementData[0..this.elementCount-1] this.elementData[this.capacityIncrement] this.elementData[this.capacityIncrement-1] this.elementData[this.capacityIncrement..] this.elementData[this.capacityIncrement+1..] this.elementData[0..this.capacityIncrement] this.elementData[0..this.capacityIncrement-1] anArray[this.elementCount] anArray[this.elementCount-1] anArray[this.elementCount..] anArray[this.elementCount+1..] anArray[0..this.elementCount] anArray[0..this.elementCount-1] anArray[this.capacityIncrement] anArray[this.capacityIncrement-1] anArray[this.capacityIncrement..] anArray[this.capacityIncrement+1..] anArray[0..this.capacityIncrement] anArray[0..this.capacityIncrement-1]
\typeof(this.elementData) == \typeof(anArray)
anArray != null
(\forall int i, j; (this.elementCount <= i && i <= anArray.length-1 && this.elementCount <= j && j <= anArray.length-1) ==> (anArray[i] == anArray[j]))
(this.elementData.length == 0) ==> (this.elementCount == 0)
this.elementCount <= this.elementData.length
(anArray.length == 0) ==> (this.elementCount == 0)
this.elementCount <= anArray.length
===========================================================================
javautil.Vector13.copyInto(java.lang.Object[]):::EXIT
    Variables: this this.elementData this.elementData.getClass().getName() this.elementData[] this.elementData[].getClass().getName() this.elementCount this.capacityIncrement javautil.Vector13.serialVersionUID anArray anArray.getClass().getName() anArray[] orig(this) orig(this.elementData) orig(this.elementData.getClass().getName()) orig(this.elementData[]) orig(this.elementData[].getClass().getName()) orig(this.elementCount) orig(this.capacityIncrement) orig(anArray) orig(anArray.getClass().getName()) orig(anArray[]) size(this.elementData[]) size(this.elementData[])-1 size(anArray[]) size(anArray[])-1 orig(size(this.elementData[])) orig(size(this.elementData[]))-1 orig(size(anArray[])) orig(size(anArray[]))-1 this.elementData[this.elementCount] this.elementData[this.elementCount-1] this.elementData[this.elementCount..] this.elementData[this.elementCount+1..] this.elementData[0..this.elementCount] this.elementData[0..this.elementCount-1] this.elementData[this.capacityIncrement] this.elementData[this.capacityIncrement-1] this.elementData[this.capacityIncrement..] this.elementData[this.capacityIncrement+1..] this.elementData[0..this.capacityIncrement] this.elementData[0..this.capacityIncrement-1] this.elementData[orig(this.elementCount)] this.elementData[orig(this.elementCount)-1] this.elementData[orig(this.elementCount)..] this.elementData[orig(this.elementCount)+1..] this.elementData[0..orig(this.elementCount)] this.elementData[0..orig(this.elementCount)-1] this.elementData[orig(this.capacityIncrement)] this.elementData[orig(this.capacityIncrement)-1] this.elementData[orig(this.capacityIncrement)..] this.elementData[orig(this.capacityIncrement)+1..] this.elementData[0..orig(this.capacityIncrement)] this.elementData[0..orig(this.capacityIncrement)-1] anArray[this.elementCount] anArray[this.elementCount-1] anArray[this.elementCount..] anArray[this.elementCount+1..] anArray[0..this.elementCount] anArray[0..this.elementCount-1] orig(this.elementData[post(this.elementCount)]) orig(this.elementData[post(this.elementCount)-1]) orig(this.elementData[post(this.elementCount)..]) orig(this.elementData[post(this.elementCount)+1..]) orig(this.elementData[0..post(this.elementCount)]) orig(this.elementData[0..post(this.elementCount)-1]) orig(anArray[post(this.elementCount)]) orig(anArray[post(this.elementCount)-1]) orig(anArray[post(this.elementCount)..]) orig(anArray[post(this.elementCount)+1..]) orig(anArray[0..post(this.elementCount)]) orig(anArray[0..post(this.elementCount)-1]) anArray[this.capacityIncrement] anArray[this.capacityIncrement-1] anArray[this.capacityIncrement..] anArray[this.capacityIncrement+1..] anArray[0..this.capacityIncrement] anArray[0..this.capacityIncrement-1] orig(this.elementData[post(this.capacityIncrement)]) orig(this.elementData[post(this.capacityIncrement)-1]) orig(this.elementData[post(this.capacityIncrement)..]) orig(this.elementData[post(this.capacityIncrement)+1..]) orig(this.elementData[0..post(this.capacityIncrement)]) orig(this.elementData[0..post(this.capacityIncrement)-1]) orig(anArray[post(this.capacityIncrement)]) orig(anArray[post(this.capacityIncrement)-1]) orig(anArray[post(this.capacityIncrement)..]) orig(anArray[post(this.capacityIncrement)+1..]) orig(anArray[0..post(this.capacityIncrement)]) orig(anArray[0..post(this.capacityIncrement)-1]) anArray[orig(this.elementCount)] anArray[orig(this.elementCount)-1] anArray[orig(this.elementCount)..] anArray[orig(this.elementCount)+1..] anArray[0..orig(this.elementCount)] anArray[0..orig(this.elementCount)-1] anArray[orig(this.capacityIncrement)] anArray[orig(this.capacityIncrement)-1] anArray[orig(this.capacityIncrement)..] anArray[orig(this.capacityIncrement)+1..] anArray[0..orig(this.capacityIncrement)] anArray[0..orig(this.capacityIncrement)-1] orig(this.elementData[this.elementCount]) orig(this.elementData[this.elementCount-1]) orig(this.elementData[this.elementCount..]) orig(this.elementData[this.elementCount+1..]) orig(this.elementData[0..this.elementCount]) orig(this.elementData[0..this.elementCount-1]) orig(this.elementData[this.capacityIncrement]) orig(this.elementData[this.capacityIncrement-1]) orig(this.elementData[this.capacityIncrement..]) orig(this.elementData[this.capacityIncrement+1..]) orig(this.elementData[0..this.capacityIncrement]) orig(this.elementData[0..this.capacityIncrement-1]) orig(anArray[this.elementCount]) orig(anArray[this.elementCount-1]) orig(anArray[this.elementCount..]) orig(anArray[this.elementCount+1..]) orig(anArray[0..this.elementCount]) orig(anArray[0..this.elementCount-1]) orig(anArray[this.capacityIncrement]) orig(anArray[this.capacityIncrement-1]) orig(anArray[this.capacityIncrement..]) orig(anArray[this.capacityIncrement+1..]) orig(anArray[0..this.capacityIncrement]) orig(anArray[0..this.capacityIncrement-1])
      Modified variables: anArray[] this.elementData[this.elementCount] this.elementData[this.elementCount-1] this.elementData[this.elementCount+1..] this.elementData[0..this.elementCount] this.elementData[this.capacityIncrement] this.elementData[this.capacityIncrement-1] this.elementData[this.capacityIncrement..] this.elementData[this.capacityIncrement+1..] this.elementData[0..this.capacityIncrement] this.elementData[0..this.capacityIncrement-1] anArray[this.elementCount] anArray[this.elementCount-1] anArray[this.elementCount+1..] anArray[0..this.elementCount] anArray[0..this.elementCount-1] anArray[this.capacityIncrement] anArray[this.capacityIncrement-1] anArray[this.capacityIncrement..] anArray[this.capacityIncrement+1..] anArray[0..this.capacityIncrement] anArray[0..this.capacityIncrement-1]
      Unmodified variables: this this.elementData this.elementData.getClass().getName() this.elementData[] this.elementData[].getClass().getName() this.elementCount this.capacityIncrement anArray anArray.getClass().getName() size(this.elementData[]) size(anArray[]) this.elementData[this.elementCount..] this.elementData[0..this.elementCount-1] anArray[this.elementCount..]
modifies anArray[*], this.elementData[this.elementCount], this.elementData[this.elementCount-1], this.elementData[this.elementCount+1..], this.elementData[0..this.elementCount], this.elementData[this.capacityIncrement], this.elementData[this.capacityIncrement-1], this.elementData[this.capacityIncrement..], this.elementData[this.capacityIncrement+1..], this.elementData[0..this.capacityIncrement], this.elementData[0..this.capacityIncrement-1], anArray[this.elementCount], anArray[this.elementCount-1], anArray[this.elementCount+1..], anArray[0..this.elementCount], anArray[0..this.elementCount-1], anArray[this.capacityIncrement], anArray[this.capacityIncrement-1], anArray[this.capacityIncrement..], anArray[this.capacityIncrement+1..], anArray[0..this.capacityIncrement], anArray[0..this.capacityIncrement-1]
\typeof(this.elementData) == \old(\typeof(anArray))
warning: method daikon.inv.binary.twoSequence.SeqSeqIntEqual.format(OutputFormat:ESC/Java) needs to be implemented: this.elementData[0..this.elementCount-1] == anArray[0..this.elementCount-1]
warning: method daikon.inv.binary.twoSequence.SeqSeqIntEqual.format(OutputFormat:ESC/Java) needs to be implemented: this.elementData[0..orig(this.elementCount)-1] == anArray[0..this.elementCount-1]
warning: method daikon.inv.binary.twoSequence.SeqSeqIntEqual.format(OutputFormat:ESC/Java) needs to be implemented: anArray[this.elementCount..] == orig(anArray[post(this.elementCount)..])
warning: method daikon.inv.binary.twoSequence.SeqSeqIntEqual.format(OutputFormat:ESC/Java) needs to be implemented: anArray[0..this.elementCount-1] == orig(this.elementData[0..post(this.elementCount)-1])
warning: method daikon.inv.binary.twoSequence.SeqSeqIntEqual.format(OutputFormat:ESC/Java) needs to be implemented: anArray[0..this.elementCount-1] == orig(this.elementData[0..this.elementCount-1])
(\forall int i, j; (this.elementCount <= i && i <= anArray.length-1 && this.elementCount <= j && j <= anArray.length-1) ==> (anArray[i] == anArray[j]))
(this.elementData.length == 0) ==> (this.elementCount == 0)
this.elementCount <= this.elementData.length
(\old(anArray.length) == 0) ==> (this.elementCount == 0)
this.elementCount <= \old(anArray.length)
===========================================================================
javautil.Vector13.elementAt(int):::ENTER
    Variables: this this.elementData this.elementData.getClass().getName() this.elementData[] this.elementData[].getClass().getName() this.elementCount this.capacityIncrement javautil.Vector13.serialVersionUID index size(this.elementData[]) size(this.elementData[])-1 this.elementData[this.elementCount] this.elementData[this.elementCount-1] this.elementData[this.elementCount..] this.elementData[this.elementCount+1..] this.elementData[0..this.elementCount] this.elementData[0..this.elementCount-1] this.elementData[this.capacityIncrement] this.elementData[this.capacityIncrement-1] this.elementData[this.capacityIncrement..] this.elementData[this.capacityIncrement+1..] this.elementData[0..this.capacityIncrement] this.elementData[0..this.capacityIncrement-1] this.elementData[index] this.elementData[index-1] this.elementData[index..] this.elementData[index+1..] this.elementData[0..index] this.elementData[0..index-1]
index >= 0
this.elementCount > index
this.elementCount <= this.elementData.length
(this.elementData.length-1 == 0) ==> (index == 0)
index <= this.elementData.length-1
===========================================================================
javautil.Vector13.elementAt(int):::EXIT
    Variables: this this.elementData this.elementData.getClass().getName() this.elementData[] this.elementData[].getClass().getName() this.elementCount this.capacityIncrement javautil.Vector13.serialVersionUID index return return.getClass().getName() orig(this) orig(this.elementData) orig(this.elementData.getClass().getName()) orig(this.elementData[]) orig(this.elementData[].getClass().getName()) orig(this.elementCount) orig(this.capacityIncrement) orig(index) size(this.elementData[]) size(this.elementData[])-1 orig(size(this.elementData[])) orig(size(this.elementData[]))-1 this.elementData[this.elementCount] this.elementData[this.elementCount-1] this.elementData[this.elementCount..] this.elementData[this.elementCount+1..] this.elementData[0..this.elementCount] this.elementData[0..this.elementCount-1] this.elementData[this.capacityIncrement] this.elementData[this.capacityIncrement-1] this.elementData[this.capacityIncrement..] this.elementData[this.capacityIncrement+1..] this.elementData[0..this.capacityIncrement] this.elementData[0..this.capacityIncrement-1] this.elementData[index] this.elementData[index-1] this.elementData[index..] this.elementData[index+1..] this.elementData[0..index] this.elementData[0..index-1] this.elementData[orig(this.elementCount)] this.elementData[orig(this.elementCount)-1] this.elementData[orig(this.elementCount)..] this.elementData[orig(this.elementCount)+1..] this.elementData[0..orig(this.elementCount)] this.elementData[0..orig(this.elementCount)-1] this.elementData[orig(this.capacityIncrement)] this.elementData[orig(this.capacityIncrement)-1] this.elementData[orig(this.capacityIncrement)..] this.elementData[orig(this.capacityIncrement)+1..] this.elementData[0..orig(this.capacityIncrement)] this.elementData[0..orig(this.capacityIncrement)-1] this.elementData[orig(index)] this.elementData[orig(index)-1] this.elementData[orig(index)..] this.elementData[orig(index)+1..] this.elementData[0..orig(index)] this.elementData[0..orig(index)-1] orig(this.elementData[post(this.elementCount)]) orig(this.elementData[post(this.elementCount)-1]) orig(this.elementData[post(this.elementCount)..]) orig(this.elementData[post(this.elementCount)+1..]) orig(this.elementData[0..post(this.elementCount)]) orig(this.elementData[0..post(this.elementCount)-1]) orig(this.elementData[post(this.capacityIncrement)]) orig(this.elementData[post(this.capacityIncrement)-1]) orig(this.elementData[post(this.capacityIncrement)..]) orig(this.elementData[post(this.capacityIncrement)+1..]) orig(this.elementData[0..post(this.capacityIncrement)]) orig(this.elementData[0..post(this.capacityIncrement)-1]) orig(this.elementData[post(index)]) orig(this.elementData[post(index)-1]) orig(this.elementData[post(index)..]) orig(this.elementData[post(index)+1..]) orig(this.elementData[0..post(index)]) orig(this.elementData[0..post(index)-1]) orig(this.elementData[this.elementCount]) orig(this.elementData[this.elementCount-1]) orig(this.elementData[this.elementCount..]) orig(this.elementData[this.elementCount+1..]) orig(this.elementData[0..this.elementCount]) orig(this.elementData[0..this.elementCount-1]) orig(this.elementData[this.capacityIncrement]) orig(this.elementData[this.capacityIncrement-1]) orig(this.elementData[this.capacityIncrement..]) orig(this.elementData[this.capacityIncrement+1..]) orig(this.elementData[0..this.capacityIncrement]) orig(this.elementData[0..this.capacityIncrement-1]) orig(this.elementData[index]) orig(this.elementData[index-1]) orig(this.elementData[index..]) orig(this.elementData[index+1..]) orig(this.elementData[0..index]) orig(this.elementData[0..index-1])
      Modified variables: this.elementData[this.elementCount] this.elementData[this.elementCount+1..] this.elementData[0..this.elementCount] this.elementData[this.capacityIncrement] this.elementData[this.capacityIncrement-1] this.elementData[this.capacityIncrement..] this.elementData[this.capacityIncrement+1..] this.elementData[0..this.capacityIncrement] this.elementData[0..this.capacityIncrement-1]
      Modified primitive arguments: this.elementData[index-1]
      Unmodified variables: this this.elementData this.elementData.getClass().getName() this.elementData[] this.elementData[].getClass().getName() this.elementCount this.capacityIncrement index size(this.elementData[]) this.elementData[this.elementCount-1] this.elementData[this.elementCount..] this.elementData[0..this.elementCount-1] this.elementData[index] this.elementData[index..] this.elementData[index+1..] this.elementData[0..index] this.elementData[0..index-1]
modifies this.elementData[this.elementCount], this.elementData[this.elementCount+1..], this.elementData[0..this.elementCount], this.elementData[this.capacityIncrement], this.elementData[this.capacityIncrement-1], this.elementData[this.capacityIncrement..], this.elementData[this.capacityIncrement+1..], this.elementData[0..this.capacityIncrement], this.elementData[0..this.capacityIncrement-1]
(\result != null)  ==>  (warning: method daikon.inv.unary.string.PrintableString.format(OutputFormat:ESC/Java) needs to be implemented: return.getClass().getName() is printable)
(\result != null)  ==>  (\typeof(this.elementData) != \typeof(\result))
(\result != null)  ==>  (!(\forall int i; (0 <= i && i <= this.elementData.length-1) ==> (\typeof(this.elementData[i]) != \typeof(\result))))
this.elementCount > \old(index)
this.elementCount <= this.elementData.length
(this.elementData.length-1 == 0) ==> (\old(index) == 0)
\old(index) <= this.elementData.length-1
===========================================================================
javautil.Vector13.elements():::ENTER
    Variables: this this.elementData this.elementData.getClass().getName() this.elementData[] this.elementData[].getClass().getName() this.elementCount this.capacityIncrement javautil.Vector13.serialVersionUID size(this.elementData[]) size(this.elementData[])-1 this.elementData[this.elementCount] this.elementData[this.elementCount-1] this.elementData[this.elementCount..] this.elementData[this.elementCount+1..] this.elementData[0..this.elementCount] this.elementData[0..this.elementCount-1] this.elementData[this.capacityIncrement] this.elementData[this.capacityIncrement-1] this.elementData[this.capacityIncrement..] this.elementData[this.capacityIncrement+1..] this.elementData[0..this.capacityIncrement] this.elementData[0..this.capacityIncrement-1]
(this.elementData.length == 0) ==> (this.elementCount == 0)
this.elementCount <= this.elementData.length
===========================================================================
javautil.Vector13.elements():::EXIT
    Variables: this this.elementData this.elementData.getClass().getName() this.elementData[] this.elementData[].getClass().getName() this.elementCount this.capacityIncrement javautil.Vector13.serialVersionUID return return.getClass().getName() orig(this) orig(this.elementData) orig(this.elementData.getClass().getName()) orig(this.elementData[]) orig(this.elementData[].getClass().getName()) orig(this.elementCount) orig(this.capacityIncrement) size(this.elementData[]) size(this.elementData[])-1 orig(size(this.elementData[])) orig(size(this.elementData[]))-1 this.elementData[this.elementCount] this.elementData[this.elementCount-1] this.elementData[this.elementCount..] this.elementData[this.elementCount+1..] this.elementData[0..this.elementCount] this.elementData[0..this.elementCount-1] this.elementData[this.capacityIncrement] this.elementData[this.capacityIncrement-1] this.elementData[this.capacityIncrement..] this.elementData[this.capacityIncrement+1..] this.elementData[0..this.capacityIncrement] this.elementData[0..this.capacityIncrement-1] this.elementData[orig(this.elementCount)] this.elementData[orig(this.elementCount)-1] this.elementData[orig(this.elementCount)..] this.elementData[orig(this.elementCount)+1..] this.elementData[0..orig(this.elementCount)] this.elementData[0..orig(this.elementCount)-1] this.elementData[orig(this.capacityIncrement)] this.elementData[orig(this.capacityIncrement)-1] this.elementData[orig(this.capacityIncrement)..] this.elementData[orig(this.capacityIncrement)+1..] this.elementData[0..orig(this.capacityIncrement)] this.elementData[0..orig(this.capacityIncrement)-1] orig(this.elementData[post(this.elementCount)]) orig(this.elementData[post(this.elementCount)-1]) orig(this.elementData[post(this.elementCount)..]) orig(this.elementData[post(this.elementCount)+1..]) orig(this.elementData[0..post(this.elementCount)]) orig(this.elementData[0..post(this.elementCount)-1]) orig(this.elementData[post(this.capacityIncrement)]) orig(this.elementData[post(this.capacityIncrement)-1]) orig(this.elementData[post(this.capacityIncrement)..]) orig(this.elementData[post(this.capacityIncrement)+1..]) orig(this.elementData[0..post(this.capacityIncrement)]) orig(this.elementData[0..post(this.capacityIncrement)-1]) orig(this.elementData[this.elementCount]) orig(this.elementData[this.elementCount-1]) orig(this.elementData[this.elementCount..]) orig(this.elementData[this.elementCount+1..]) orig(this.elementData[0..this.elementCount]) orig(this.elementData[0..this.elementCount-1]) orig(this.elementData[this.capacityIncrement]) orig(this.elementData[this.capacityIncrement-1]) orig(this.elementData[this.capacityIncrement..]) orig(this.elementData[this.capacityIncrement+1..]) orig(this.elementData[0..this.capacityIncrement]) orig(this.elementData[0..this.capacityIncrement-1])
      Modified variables: this.elementData[this.elementCount] this.elementData[this.elementCount-1] this.elementData[this.elementCount+1..] this.elementData[0..this.elementCount] this.elementData[this.capacityIncrement] this.elementData[this.capacityIncrement-1] this.elementData[this.capacityIncrement..] this.elementData[this.capacityIncrement+1..] this.elementData[0..this.capacityIncrement] this.elementData[0..this.capacityIncrement-1]
      Unmodified variables: this this.elementData this.elementData.getClass().getName() this.elementData[] this.elementData[].getClass().getName() this.elementCount this.capacityIncrement size(this.elementData[]) this.elementData[this.elementCount..] this.elementData[0..this.elementCount-1]
modifies this.elementData[this.elementCount], this.elementData[this.elementCount-1], this.elementData[this.elementCount+1..], this.elementData[0..this.elementCount], this.elementData[this.capacityIncrement], this.elementData[this.capacityIncrement-1], this.elementData[this.capacityIncrement..], this.elementData[this.capacityIncrement+1..], this.elementData[0..this.capacityIncrement], this.elementData[0..this.capacityIncrement-1]
\result != null
\typeof(\result) == \type(javautil.VectorEnumerator13)
\typeof(this.elementData) != \typeof(\result)
(this.elementData.length == 0) ==> (this.elementCount == 0)
this.elementCount <= this.elementData.length
===========================================================================
javautil.Vector13.ensureCapacity(int):::ENTER
    Variables: this this.elementData this.elementData.getClass().getName() this.elementData[] this.elementData[].getClass().getName() this.elementCount this.capacityIncrement javautil.Vector13.serialVersionUID minCapacity size(this.elementData[]) size(this.elementData[])-1 this.elementData[this.elementCount] this.elementData[this.elementCount-1] this.elementData[this.elementCount..] this.elementData[this.elementCount+1..] this.elementData[0..this.elementCount] this.elementData[0..this.elementCount-1] this.elementData[this.capacityIncrement] this.elementData[this.capacityIncrement-1] this.elementData[this.capacityIncrement..] this.elementData[this.capacityIncrement+1..] this.elementData[0..this.capacityIncrement] this.elementData[0..this.capacityIncrement-1] this.elementData[minCapacity] this.elementData[minCapacity-1] this.elementData[minCapacity..] this.elementData[minCapacity+1..] this.elementData[0..minCapacity] this.elementData[0..minCapacity-1]
minCapacity >= 0
(this.elementData.length == 0) ==> (this.elementCount == 0)
this.elementCount <= this.elementData.length
===========================================================================
javautil.Vector13.ensureCapacity(int):::EXIT
    Variables: this this.elementData this.elementData.getClass().getName() this.elementData[] this.elementData[].getClass().getName() this.elementCount this.capacityIncrement javautil.Vector13.serialVersionUID minCapacity orig(this) orig(this.elementData) orig(this.elementData.getClass().getName()) orig(this.elementData[]) orig(this.elementData[].getClass().getName()) orig(this.elementCount) orig(this.capacityIncrement) orig(minCapacity) size(this.elementData[]) size(this.elementData[])-1 orig(size(this.elementData[])) orig(size(this.elementData[]))-1 this.elementData[this.elementCount] this.elementData[this.elementCount-1] this.elementData[this.elementCount..] this.elementData[this.elementCount+1..] this.elementData[0..this.elementCount] this.elementData[0..this.elementCount-1] this.elementData[this.capacityIncrement] this.elementData[this.capacityIncrement-1] this.elementData[this.capacityIncrement..] this.elementData[this.capacityIncrement+1..] this.elementData[0..this.capacityIncrement] this.elementData[0..this.capacityIncrement-1] this.elementData[minCapacity] this.elementData[minCapacity-1] this.elementData[minCapacity..] this.elementData[minCapacity+1..] this.elementData[0..minCapacity] this.elementData[0..minCapacity-1] this.elementData[orig(this.elementCount)] this.elementData[orig(this.elementCount)-1] this.elementData[orig(this.elementCount)..] this.elementData[orig(this.elementCount)+1..] this.elementData[0..orig(this.elementCount)] this.elementData[0..orig(this.elementCount)-1] this.elementData[orig(this.capacityIncrement)] this.elementData[orig(this.capacityIncrement)-1] this.elementData[orig(this.capacityIncrement)..] this.elementData[orig(this.capacityIncrement)+1..] this.elementData[0..orig(this.capacityIncrement)] this.elementData[0..orig(this.capacityIncrement)-1] this.elementData[orig(minCapacity)] this.elementData[orig(minCapacity)-1] this.elementData[orig(minCapacity)..] this.elementData[orig(minCapacity)+1..] this.elementData[0..orig(minCapacity)] this.elementData[0..orig(minCapacity)-1] orig(this.elementData[post(this.elementCount)]) orig(this.elementData[post(this.elementCount)-1]) orig(this.elementData[post(this.elementCount)..]) orig(this.elementData[post(this.elementCount)+1..]) orig(this.elementData[0..post(this.elementCount)]) orig(this.elementData[0..post(this.elementCount)-1]) orig(this.elementData[post(this.capacityIncrement)]) orig(this.elementData[post(this.capacityIncrement)-1]) orig(this.elementData[post(this.capacityIncrement)..]) orig(this.elementData[post(this.capacityIncrement)+1..]) orig(this.elementData[0..post(this.capacityIncrement)]) orig(this.elementData[0..post(this.capacityIncrement)-1]) orig(this.elementData[post(minCapacity)]) orig(this.elementData[post(minCapacity)-1]) orig(this.elementData[post(minCapacity)..]) orig(this.elementData[post(minCapacity)+1..]) orig(this.elementData[0..post(minCapacity)]) orig(this.elementData[0..post(minCapacity)-1]) orig(this.elementData[this.elementCount]) orig(this.elementData[this.elementCount-1]) orig(this.elementData[this.elementCount..]) orig(this.elementData[this.elementCount+1..]) orig(this.elementData[0..this.elementCount]) orig(this.elementData[0..this.elementCount-1]) orig(this.elementData[this.capacityIncrement]) orig(this.elementData[this.capacityIncrement-1]) orig(this.elementData[this.capacityIncrement..]) orig(this.elementData[this.capacityIncrement+1..]) orig(this.elementData[0..this.capacityIncrement]) orig(this.elementData[0..this.capacityIncrement-1]) orig(this.elementData[minCapacity]) orig(this.elementData[minCapacity-1]) orig(this.elementData[minCapacity..]) orig(this.elementData[minCapacity+1..]) orig(this.elementData[0..minCapacity]) orig(this.elementData[0..minCapacity-1])
      Modified variables: this.elementData this.elementData[] this.elementData[].getClass().getName() size(this.elementData[]) this.elementData[this.elementCount] this.elementData[this.elementCount-1] this.elementData[this.elementCount..] this.elementData[this.elementCount+1..] this.elementData[0..this.elementCount] this.elementData[this.capacityIncrement] this.elementData[this.capacityIncrement-1] this.elementData[this.capacityIncrement..] this.elementData[this.capacityIncrement+1..] this.elementData[0..this.capacityIncrement] this.elementData[0..this.capacityIncrement-1]
      Modified primitive arguments: this.elementData[minCapacity] this.elementData[minCapacity-1] this.elementData[minCapacity..] this.elementData[minCapacity+1..] this.elementData[0..minCapacity] this.elementData[0..minCapacity-1]
      Unmodified variables: this this.elementData.getClass().getName() this.elementCount this.capacityIncrement minCapacity this.elementData[0..this.elementCount-1]
modifies this.elementData, this.elementData[*], this.elementData[this.elementCount], this.elementData[this.elementCount-1], this.elementData[this.elementCount..], this.elementData[this.elementCount+1..], this.elementData[0..this.elementCount], this.elementData[this.capacityIncrement], this.elementData[this.capacityIncrement-1], this.elementData[this.capacityIncrement..], this.elementData[this.capacityIncrement+1..], this.elementData[0..this.capacityIncrement], this.elementData[0..this.capacityIncrement-1]
warning: method daikon.inv.binary.twoSequence.SeqSeqIntEqual.format(OutputFormat:ESC/Java) needs to be implemented: this.elementData[0..this.elementCount-1] == orig(this.elementData[0..post(this.elementCount)-1])
warning: method daikon.inv.binary.twoSequence.SuperSequence.format(OutputFormat:ESC/Java) needs to be implemented: orig(this.elementData[]) is a subsequence of this.elementData[]
warning: method daikon.inv.binary.twoSequence.SuperSet.format_esc() needs to be implemented: this.elementData[] is a superset of orig(this.elementData[])
(this.elementData.length == 0) ==> (this.elementCount == 0)
this.elementCount <= this.elementData.length
(\old(this.elementData.length) == 0) ==> (this.elementCount == 0)
this.elementCount <= \old(this.elementData.length)
(this.elementData.length == 0) ==> (\old(minCapacity) == 0)
\old(minCapacity) <= this.elementData.length
(this.elementData.length == 0) ==> (\old(this.elementData.length) == 0)
this.elementData.length >= \old(this.elementData.length)
this.elementData.length-1 >= \old(this.elementData.length)-1
warning: method daikon.inv.binary.twoSequence.SuperSequence.format(OutputFormat:ESC/Java) needs to be implemented: orig(this.elementData[this.elementCount..]) is a subsequence of this.elementData[this.elementCount..]
===========================================================================
javautil.Vector13.ensureCapacityHelper(int):::ENTER
    Variables: this this.elementData this.elementData.getClass().getName() this.elementData[] this.elementData[].getClass().getName() this.elementCount this.capacityIncrement javautil.Vector13.serialVersionUID minCapacity size(this.elementData[]) size(this.elementData[])-1 this.elementData[this.elementCount] this.elementData[this.elementCount-1] this.elementData[this.elementCount..] this.elementData[this.elementCount+1..] this.elementData[0..this.elementCount] this.elementData[0..this.elementCount-1] this.elementData[this.capacityIncrement] this.elementData[this.capacityIncrement-1] this.elementData[this.capacityIncrement..] this.elementData[this.capacityIncrement+1..] this.elementData[0..this.capacityIncrement] this.elementData[0..this.capacityIncrement-1] this.elementData[minCapacity] this.elementData[minCapacity-1] this.elementData[minCapacity..] this.elementData[minCapacity+1..] this.elementData[0..minCapacity] this.elementData[0..minCapacity-1]
minCapacity >= 1
this.elementCount < minCapacity
(this.elementData.length == 0) ==> (this.elementCount == 0)
this.elementCount <= this.elementData.length
minCapacity > this.elementData.length
===========================================================================
javautil.Vector13.ensureCapacityHelper(int):::EXIT
    Variables: this this.elementData this.elementData.getClass().getName() this.elementData[] this.elementData[].getClass().getName() this.elementCount this.capacityIncrement javautil.Vector13.serialVersionUID minCapacity orig(this) orig(this.elementData) orig(this.elementData.getClass().getName()) orig(this.elementData[]) orig(this.elementData[].getClass().getName()) orig(this.elementCount) orig(this.capacityIncrement) orig(minCapacity) size(this.elementData[]) size(this.elementData[])-1 orig(size(this.elementData[])) orig(size(this.elementData[]))-1 this.elementData[this.elementCount] this.elementData[this.elementCount-1] this.elementData[this.elementCount..] this.elementData[this.elementCount+1..] this.elementData[0..this.elementCount] this.elementData[0..this.elementCount-1] this.elementData[this.capacityIncrement] this.elementData[this.capacityIncrement-1] this.elementData[this.capacityIncrement..] this.elementData[this.capacityIncrement+1..] this.elementData[0..this.capacityIncrement] this.elementData[0..this.capacityIncrement-1] this.elementData[minCapacity] this.elementData[minCapacity-1] this.elementData[minCapacity..] this.elementData[minCapacity+1..] this.elementData[0..minCapacity] this.elementData[0..minCapacity-1] this.elementData[orig(this.elementCount)] this.elementData[orig(this.elementCount)-1] this.elementData[orig(this.elementCount)..] this.elementData[orig(this.elementCount)+1..] this.elementData[0..orig(this.elementCount)] this.elementData[0..orig(this.elementCount)-1] this.elementData[orig(this.capacityIncrement)] this.elementData[orig(this.capacityIncrement)-1] this.elementData[orig(this.capacityIncrement)..] this.elementData[orig(this.capacityIncrement)+1..] this.elementData[0..orig(this.capacityIncrement)] this.elementData[0..orig(this.capacityIncrement)-1] this.elementData[orig(minCapacity)] this.elementData[orig(minCapacity)-1] this.elementData[orig(minCapacity)..] this.elementData[orig(minCapacity)+1..] this.elementData[0..orig(minCapacity)] this.elementData[0..orig(minCapacity)-1] orig(this.elementData[post(this.elementCount)]) orig(this.elementData[post(this.elementCount)-1]) orig(this.elementData[post(this.elementCount)..]) orig(this.elementData[post(this.elementCount)+1..]) orig(this.elementData[0..post(this.elementCount)]) orig(this.elementData[0..post(this.elementCount)-1]) orig(this.elementData[post(this.capacityIncrement)]) orig(this.elementData[post(this.capacityIncrement)-1]) orig(this.elementData[post(this.capacityIncrement)..]) orig(this.elementData[post(this.capacityIncrement)+1..]) orig(this.elementData[0..post(this.capacityIncrement)]) orig(this.elementData[0..post(this.capacityIncrement)-1]) orig(this.elementData[post(minCapacity)]) orig(this.elementData[post(minCapacity)-1]) orig(this.elementData[post(minCapacity)..]) orig(this.elementData[post(minCapacity)+1..]) orig(this.elementData[0..post(minCapacity)]) orig(this.elementData[0..post(minCapacity)-1]) orig(this.elementData[this.elementCount]) orig(this.elementData[this.elementCount-1]) orig(this.elementData[this.elementCount..]) orig(this.elementData[this.elementCount+1..]) orig(this.elementData[0..this.elementCount]) orig(this.elementData[0..this.elementCount-1]) orig(this.elementData[this.capacityIncrement]) orig(this.elementData[this.capacityIncrement-1]) orig(this.elementData[this.capacityIncrement..]) orig(this.elementData[this.capacityIncrement+1..]) orig(this.elementData[0..this.capacityIncrement]) orig(this.elementData[0..this.capacityIncrement-1]) orig(this.elementData[minCapacity]) orig(this.elementData[minCapacity-1]) orig(this.elementData[minCapacity..]) orig(this.elementData[minCapacity+1..]) orig(this.elementData[0..minCapacity]) orig(this.elementData[0..minCapacity-1])
      Modified variables: this.elementData this.elementData[] this.elementData[].getClass().getName() size(this.elementData[]) this.elementData[this.elementCount] this.elementData[this.elementCount-1] this.elementData[this.elementCount..] this.elementData[this.elementCount+1..] this.elementData[0..this.elementCount] this.elementData[this.capacityIncrement] this.elementData[this.capacityIncrement-1] this.elementData[this.capacityIncrement..] this.elementData[this.capacityIncrement+1..] this.elementData[0..this.capacityIncrement] this.elementData[0..this.capacityIncrement-1]
      Modified primitive arguments: this.elementData[minCapacity] this.elementData[minCapacity-1] this.elementData[minCapacity..] this.elementData[minCapacity+1..] this.elementData[0..minCapacity] this.elementData[0..minCapacity-1]
      Unmodified variables: this this.elementData.getClass().getName() this.elementCount this.capacityIncrement minCapacity this.elementData[0..this.elementCount-1]
modifies this.elementData, this.elementData[*], this.elementData[this.elementCount], this.elementData[this.elementCount-1], this.elementData[this.elementCount..], this.elementData[this.elementCount+1..], this.elementData[0..this.elementCount], this.elementData[this.capacityIncrement], this.elementData[this.capacityIncrement-1], this.elementData[this.capacityIncrement..], this.elementData[this.capacityIncrement+1..], this.elementData[0..this.capacityIncrement], this.elementData[0..this.capacityIncrement-1]
this.elementData[this.elementCount] == this.elementData[\old(minCapacity)-1]
warning: method daikon.inv.binary.twoSequence.SeqSeqIntEqual.format(OutputFormat:ESC/Java) needs to be implemented: this.elementData[0..this.elementCount-1] == orig(this.elementData[0..post(this.elementCount)-1])
this.elementData.length >= 1
warning: method daikon.inv.binary.twoSequence.SuperSet.format_esc() needs to be implemented: this.elementData[] is a superset of orig(this.elementData[])
this.elementCount < \old(minCapacity)
(this.elementData.length-1 == 0) ==> (this.elementCount == 0)
this.elementCount <= this.elementData.length-1
(\old(this.elementData.length) == 0) ==> (this.elementCount == 0)
this.elementCount <= \old(this.elementData.length)
this.capacityIncrement <= this.elementData.length
warning: method daikon.inv.binary.twoSequence.SubSet.format_esc() needs to be implemented: orig(this.elementData[]) is a subset of this.elementData[0..this.elementCount]
warning: method daikon.inv.binary.twoSequence.SubSequence.format(OutputFormat:ESC/Java) needs to be implemented: orig(this.elementData[]) is a subsequence of this.elementData[0..orig(minCapacity)-1]
warning: method daikon.inv.binary.twoSequence.SubSet.format_esc() needs to be implemented: orig(this.elementData[]) is a subset of this.elementData[0..orig(minCapacity)-1]
\old(minCapacity) <= this.elementData.length
(this.elementData.length-1 == 0) ==> (\old(this.elementData.length) == 0)
this.elementData.length-1 >= \old(this.elementData.length)
(\forall int i; (this.elementCount <= i && i <= this.elementData.length-1) ==> (this.elementData[i] == this.elementData[this.elementCount]))
warning: method daikon.inv.binary.twoSequence.SuperSequence.format(OutputFormat:ESC/Java) needs to be implemented: orig(this.elementData[this.elementCount..]) is a subsequence of this.elementData[this.elementCount..]
warning: method daikon.inv.binary.twoSequence.SuperSequence.format(OutputFormat:ESC/Java) needs to be implemented: orig(this.elementData[this.elementCount..]) is a subsequence of this.elementData[this.elementCount+1..]
warning: method daikon.inv.binary.twoSequence.SuperSequence.format(OutputFormat:ESC/Java) needs to be implemented: orig(this.elementData[this.elementCount..]) is a subsequence of this.elementData[this.capacityIncrement..]
warning: method daikon.inv.binary.twoSequence.SuperSequence.format(OutputFormat:ESC/Java) needs to be implemented: orig(this.elementData[this.elementCount..]) is a subsequence of this.elementData[0..orig(minCapacity)-1]
===========================================================================
javautil.Vector13.firstElement():::ENTER
    Variables: this this.elementData this.elementData.getClass().getName() this.elementData[] this.elementData[].getClass().getName() this.elementCount this.capacityIncrement javautil.Vector13.serialVersionUID size(this.elementData[]) size(this.elementData[])-1 this.elementData[this.elementCount] this.elementData[this.elementCount-1] this.elementData[this.elementCount..] this.elementData[this.elementCount+1..] this.elementData[0..this.elementCount] this.elementData[0..this.elementCount-1] this.elementData[this.capacityIncrement] this.elementData[this.capacityIncrement-1] this.elementData[this.capacityIncrement..] this.elementData[this.capacityIncrement+1..] this.elementData[0..this.capacityIncrement] this.elementData[0..this.capacityIncrement-1]
this.elementCount >= 1
this.elementCount <= this.elementData.length
===========================================================================
javautil.Vector13.firstElement():::EXIT
    Variables: this this.elementData this.elementData.getClass().getName() this.elementData[] this.elementData[].getClass().getName() this.elementCount this.capacityIncrement javautil.Vector13.serialVersionUID return return.getClass().getName() orig(this) orig(this.elementData) orig(this.elementData.getClass().getName()) orig(this.elementData[]) orig(this.elementData[].getClass().getName()) orig(this.elementCount) orig(this.capacityIncrement) size(this.elementData[]) size(this.elementData[])-1 orig(size(this.elementData[])) orig(size(this.elementData[]))-1 this.elementData[this.elementCount] this.elementData[this.elementCount-1] this.elementData[this.elementCount..] this.elementData[this.elementCount+1..] this.elementData[0..this.elementCount] this.elementData[0..this.elementCount-1] this.elementData[this.capacityIncrement] this.elementData[this.capacityIncrement-1] this.elementData[this.capacityIncrement..] this.elementData[this.capacityIncrement+1..] this.elementData[0..this.capacityIncrement] this.elementData[0..this.capacityIncrement-1] this.elementData[orig(this.elementCount)] this.elementData[orig(this.elementCount)-1] this.elementData[orig(this.elementCount)..] this.elementData[orig(this.elementCount)+1..] this.elementData[0..orig(this.elementCount)] this.elementData[0..orig(this.elementCount)-1] this.elementData[orig(this.capacityIncrement)] this.elementData[orig(this.capacityIncrement)-1] this.elementData[orig(this.capacityIncrement)..] this.elementData[orig(this.capacityIncrement)+1..] this.elementData[0..orig(this.capacityIncrement)] this.elementData[0..orig(this.capacityIncrement)-1] orig(this.elementData[post(this.elementCount)]) orig(this.elementData[post(this.elementCount)-1]) orig(this.elementData[post(this.elementCount)..]) orig(this.elementData[post(this.elementCount)+1..]) orig(this.elementData[0..post(this.elementCount)]) orig(this.elementData[0..post(this.elementCount)-1]) orig(this.elementData[post(this.capacityIncrement)]) orig(this.elementData[post(this.capacityIncrement)-1]) orig(this.elementData[post(this.capacityIncrement)..]) orig(this.elementData[post(this.capacityIncrement)+1..]) orig(this.elementData[0..post(this.capacityIncrement)]) orig(this.elementData[0..post(this.capacityIncrement)-1]) orig(this.elementData[this.elementCount]) orig(this.elementData[this.elementCount-1]) orig(this.elementData[this.elementCount..]) orig(this.elementData[this.elementCount+1..]) orig(this.elementData[0..this.elementCount]) orig(this.elementData[0..this.elementCount-1]) orig(this.elementData[this.capacityIncrement]) orig(this.elementData[this.capacityIncrement-1]) orig(this.elementData[this.capacityIncrement..]) orig(this.elementData[this.capacityIncrement+1..]) orig(this.elementData[0..this.capacityIncrement]) orig(this.elementData[0..this.capacityIncrement-1])
      Modified variables: this.elementData[this.elementCount] this.elementData[this.elementCount+1..] this.elementData[0..this.elementCount] this.elementData[this.capacityIncrement] this.elementData[this.capacityIncrement-1] this.elementData[this.capacityIncrement..] this.elementData[this.capacityIncrement+1..] this.elementData[0..this.capacityIncrement] this.elementData[0..this.capacityIncrement-1]
      Unmodified variables: this this.elementData this.elementData.getClass().getName() this.elementData[] this.elementData[].getClass().getName() this.elementCount this.capacityIncrement size(this.elementData[]) this.elementData[this.elementCount-1] this.elementData[this.elementCount..] this.elementData[0..this.elementCount-1]
modifies this.elementData[this.elementCount], this.elementData[this.elementCount+1..], this.elementData[0..this.elementCount], this.elementData[this.capacityIncrement], this.elementData[this.capacityIncrement-1], this.elementData[this.capacityIncrement..], this.elementData[this.capacityIncrement+1..], this.elementData[0..this.capacityIncrement], this.elementData[0..this.capacityIncrement-1]
this.elementCount >= 1
(\result != null)  ==>  (warning: method daikon.inv.unary.string.PrintableString.format(OutputFormat:ESC/Java) needs to be implemented: return.getClass().getName() is printable)
(\result != null)  ==>  (\typeof(this.elementData) != \typeof(\result))
(\result != null)  ==>  (!(\forall int i; (0 <= i && i <= this.elementData.length-1) ==> (\typeof(this.elementData[i]) != \typeof(\result))))
this.elementCount <= this.elementData.length
===========================================================================
javautil.Vector13.indexOf(java.lang.Object):::ENTER
    Variables: this this.elementData this.elementData.getClass().getName() this.elementData[] this.elementData[].getClass().getName() this.elementCount this.capacityIncrement javautil.Vector13.serialVersionUID elem elem.getClass().getName() size(this.elementData[]) size(this.elementData[])-1 this.elementData[this.elementCount] this.elementData[this.elementCount-1] this.elementData[this.elementCount..] this.elementData[this.elementCount+1..] this.elementData[0..this.elementCount] this.elementData[0..this.elementCount-1] this.elementData[this.capacityIncrement] this.elementData[this.capacityIncrement-1] this.elementData[this.capacityIncrement..] this.elementData[this.capacityIncrement+1..] this.elementData[0..this.capacityIncrement] this.elementData[0..this.capacityIncrement-1]
elem != null
warning: method daikon.inv.unary.string.PrintableString.format(OutputFormat:ESC/Java) needs to be implemented: elem.getClass().getName() is printable
\typeof(this.elementData) != \typeof(elem)
(this.elementData.length == 0) ==> (this.elementCount == 0)
this.elementCount <= this.elementData.length
===========================================================================
javautil.Vector13.indexOf(java.lang.Object):::EXIT
    Variables: this this.elementData this.elementData.getClass().getName() this.elementData[] this.elementData[].getClass().getName() this.elementCount this.capacityIncrement javautil.Vector13.serialVersionUID elem elem.getClass().getName() return orig(this) orig(this.elementData) orig(this.elementData.getClass().getName()) orig(this.elementData[]) orig(this.elementData[].getClass().getName()) orig(this.elementCount) orig(this.capacityIncrement) orig(elem) orig(elem.getClass().getName()) size(this.elementData[]) size(this.elementData[])-1 orig(size(this.elementData[])) orig(size(this.elementData[]))-1 this.elementData[this.elementCount] this.elementData[this.elementCount-1] this.elementData[this.elementCount..] this.elementData[this.elementCount+1..] this.elementData[0..this.elementCount] this.elementData[0..this.elementCount-1] this.elementData[this.capacityIncrement] this.elementData[this.capacityIncrement-1] this.elementData[this.capacityIncrement..] this.elementData[this.capacityIncrement+1..] this.elementData[0..this.capacityIncrement] this.elementData[0..this.capacityIncrement-1] this.elementData[return] this.elementData[return-1] this.elementData[return..] this.elementData[return+1..] this.elementData[0..return] this.elementData[0..return-1] this.elementData[orig(this.elementCount)] this.elementData[orig(this.elementCount)-1] this.elementData[orig(this.elementCount)..] this.elementData[orig(this.elementCount)+1..] this.elementData[0..orig(this.elementCount)] this.elementData[0..orig(this.elementCount)-1] this.elementData[orig(this.capacityIncrement)] this.elementData[orig(this.capacityIncrement)-1] this.elementData[orig(this.capacityIncrement)..] this.elementData[orig(this.capacityIncrement)+1..] this.elementData[0..orig(this.capacityIncrement)] this.elementData[0..orig(this.capacityIncrement)-1] orig(this.elementData[post(this.elementCount)]) orig(this.elementData[post(this.elementCount)-1]) orig(this.elementData[post(this.elementCount)..]) orig(this.elementData[post(this.elementCount)+1..]) orig(this.elementData[0..post(this.elementCount)]) orig(this.elementData[0..post(this.elementCount)-1]) orig(this.elementData[post(this.capacityIncrement)]) orig(this.elementData[post(this.capacityIncrement)-1]) orig(this.elementData[post(this.capacityIncrement)..]) orig(this.elementData[post(this.capacityIncrement)+1..]) orig(this.elementData[0..post(this.capacityIncrement)]) orig(this.elementData[0..post(this.capacityIncrement)-1]) orig(this.elementData[post(return)]) orig(this.elementData[post(return)-1]) orig(this.elementData[post(return)..]) orig(this.elementData[post(return)+1..]) orig(this.elementData[0..post(return)]) orig(this.elementData[0..post(return)-1]) orig(this.elementData[this.elementCount]) orig(this.elementData[this.elementCount-1]) orig(this.elementData[this.elementCount..]) orig(this.elementData[this.elementCount+1..]) orig(this.elementData[0..this.elementCount]) orig(this.elementData[0..this.elementCount-1]) orig(this.elementData[this.capacityIncrement]) orig(this.elementData[this.capacityIncrement-1]) orig(this.elementData[this.capacityIncrement..]) orig(this.elementData[this.capacityIncrement+1..]) orig(this.elementData[0..this.capacityIncrement]) orig(this.elementData[0..this.capacityIncrement-1])
      Modified variables: this.elementData[this.elementCount] this.elementData[this.elementCount-1] this.elementData[this.elementCount+1..] this.elementData[0..this.elementCount] this.elementData[this.capacityIncrement] this.elementData[this.capacityIncrement-1] this.elementData[this.capacityIncrement..] this.elementData[this.capacityIncrement+1..] this.elementData[0..this.capacityIncrement] this.elementData[0..this.capacityIncrement-1]
      Unmodified variables: this this.elementData this.elementData.getClass().getName() this.elementData[] this.elementData[].getClass().getName() this.elementCount this.capacityIncrement elem elem.getClass().getName() size(this.elementData[]) this.elementData[this.elementCount..] this.elementData[0..this.elementCount-1]
modifies this.elementData[this.elementCount], this.elementData[this.elementCount-1], this.elementData[this.elementCount+1..], this.elementData[0..this.elementCount], this.elementData[this.capacityIncrement], this.elementData[this.capacityIncrement-1], this.elementData[this.capacityIncrement..], this.elementData[this.capacityIncrement+1..], this.elementData[0..this.capacityIncrement], this.elementData[0..this.capacityIncrement-1]
\result >= -1
\typeof(this.elementData) != \old(\typeof(elem))
this.elementCount > \result
(this.elementData.length == 0) ==> (this.elementCount == 0)
this.elementCount <= this.elementData.length
\result <= this.elementData.length-1
===========================================================================
javautil.Vector13.indexOf(java.lang.Object, int):::ENTER
    Variables: this this.elementData this.elementData.getClass().getName() this.elementData[] this.elementData[].getClass().getName() this.elementCount this.capacityIncrement javautil.Vector13.serialVersionUID elem elem.getClass().getName() index size(this.elementData[]) size(this.elementData[])-1 this.elementData[this.elementCount] this.elementData[this.elementCount-1] this.elementData[this.elementCount..] this.elementData[this.elementCount+1..] this.elementData[0..this.elementCount] this.elementData[0..this.elementCount-1] this.elementData[this.capacityIncrement] this.elementData[this.capacityIncrement-1] this.elementData[this.capacityIncrement..] this.elementData[this.capacityIncrement+1..] this.elementData[0..this.capacityIncrement] this.elementData[0..this.capacityIncrement-1] this.elementData[index] this.elementData[index-1] this.elementData[index..] this.elementData[index+1..] this.elementData[0..index] this.elementData[0..index-1]
elem != null
warning: method daikon.inv.unary.string.PrintableString.format(OutputFormat:ESC/Java) needs to be implemented: elem.getClass().getName() is printable
index >= 0
\typeof(this.elementData) != \typeof(elem)
(this.elementData.length == 0) ==> (this.elementCount == 0)
this.elementCount <= this.elementData.length
===========================================================================
javautil.Vector13.indexOf(java.lang.Object, int):::EXIT274
    Variables: this this.elementData this.elementData.getClass().getName() this.elementData[] this.elementData[].getClass().getName() this.elementCount this.capacityIncrement javautil.Vector13.serialVersionUID elem elem.getClass().getName() index return orig(this) orig(this.elementData) orig(this.elementData.getClass().getName()) orig(this.elementData[]) orig(this.elementData[].getClass().getName()) orig(this.elementCount) orig(this.capacityIncrement) orig(elem) orig(elem.getClass().getName()) orig(index) size(this.elementData[]) size(this.elementData[])-1 orig(size(this.elementData[])) orig(size(this.elementData[]))-1 this.elementData[this.elementCount] this.elementData[this.elementCount-1] this.elementData[this.elementCount..] this.elementData[this.elementCount+1..] this.elementData[0..this.elementCount] this.elementData[0..this.elementCount-1] this.elementData[this.capacityIncrement] this.elementData[this.capacityIncrement-1] this.elementData[this.capacityIncrement..] this.elementData[this.capacityIncrement+1..] this.elementData[0..this.capacityIncrement] this.elementData[0..this.capacityIncrement-1] this.elementData[index] this.elementData[index-1] this.elementData[index..] this.elementData[index+1..] this.elementData[0..index] this.elementData[0..index-1] this.elementData[return] this.elementData[return-1] this.elementData[return..] this.elementData[return+1..] this.elementData[0..return] this.elementData[0..return-1] this.elementData[orig(this.elementCount)] this.elementData[orig(this.elementCount)-1] this.elementData[orig(this.elementCount)..] this.elementData[orig(this.elementCount)+1..] this.elementData[0..orig(this.elementCount)] this.elementData[0..orig(this.elementCount)-1] this.elementData[orig(this.capacityIncrement)] this.elementData[orig(this.capacityIncrement)-1] this.elementData[orig(this.capacityIncrement)..] this.elementData[orig(this.capacityIncrement)+1..] this.elementData[0..orig(this.capacityIncrement)] this.elementData[0..orig(this.capacityIncrement)-1] this.elementData[orig(index)] this.elementData[orig(index)-1] this.elementData[orig(index)..] this.elementData[orig(index)+1..] this.elementData[0..orig(index)] this.elementData[0..orig(index)-1] orig(this.elementData[post(this.elementCount)]) orig(this.elementData[post(this.elementCount)-1]) orig(this.elementData[post(this.elementCount)..]) orig(this.elementData[post(this.elementCount)+1..]) orig(this.elementData[0..post(this.elementCount)]) orig(this.elementData[0..post(this.elementCount)-1]) orig(this.elementData[post(this.capacityIncrement)]) orig(this.elementData[post(this.capacityIncrement)-1]) orig(this.elementData[post(this.capacityIncrement)..]) orig(this.elementData[post(this.capacityIncrement)+1..]) orig(this.elementData[0..post(this.capacityIncrement)]) orig(this.elementData[0..post(this.capacityIncrement)-1]) orig(this.elementData[post(index)]) orig(this.elementData[post(index)-1]) orig(this.elementData[post(index)..]) orig(this.elementData[post(index)+1..]) orig(this.elementData[0..post(index)]) orig(this.elementData[0..post(index)-1]) orig(this.elementData[post(return)]) orig(this.elementData[post(return)-1]) orig(this.elementData[post(return)..]) orig(this.elementData[post(return)+1..]) orig(this.elementData[0..post(return)]) orig(this.elementData[0..post(return)-1]) orig(this.elementData[this.elementCount]) orig(this.elementData[this.elementCount-1]) orig(this.elementData[this.elementCount..]) orig(this.elementData[this.elementCount+1..]) orig(this.elementData[0..this.elementCount]) orig(this.elementData[0..this.elementCount-1]) orig(this.elementData[this.capacityIncrement]) orig(this.elementData[this.capacityIncrement-1]) orig(this.elementData[this.capacityIncrement..]) orig(this.elementData[this.capacityIncrement+1..]) orig(this.elementData[0..this.capacityIncrement]) orig(this.elementData[0..this.capacityIncrement-1]) orig(this.elementData[index]) orig(this.elementData[index-1]) orig(this.elementData[index..]) orig(this.elementData[index+1..]) orig(this.elementData[0..index]) orig(this.elementData[0..index-1])
      Modified variables: this.elementData[this.elementCount] this.elementData[this.elementCount+1..] this.elementData[0..this.elementCount] this.elementData[this.capacityIncrement] this.elementData[this.capacityIncrement-1] this.elementData[this.capacityIncrement..] this.elementData[this.capacityIncrement+1..] this.elementData[0..this.capacityIncrement] this.elementData[0..this.capacityIncrement-1]
      Modified primitive arguments: this.elementData[index-1]
      Unmodified variables: this this.elementData this.elementData.getClass().getName() this.elementData[] this.elementData[].getClass().getName() this.elementCount this.capacityIncrement elem elem.getClass().getName() index size(this.elementData[]) this.elementData[this.elementCount-1] this.elementData[this.elementCount..] this.elementData[0..this.elementCount-1] this.elementData[index] this.elementData[index..] this.elementData[index+1..] this.elementData[0..index] this.elementData[0..index-1]
modifies this.elementData[this.elementCount], this.elementData[this.elementCount+1..], this.elementData[0..this.elementCount], this.elementData[this.capacityIncrement], this.elementData[this.capacityIncrement-1], this.elementData[this.capacityIncrement..], this.elementData[this.capacityIncrement+1..], this.elementData[0..this.capacityIncrement], this.elementData[0..this.capacityIncrement-1]
this.elementCount >= 1
\result >= 0
this.elementData[\result] != null
!(\forall int i; (0 <= i && i <= this.elementData.length-1) ==> (\typeof(this.elementData[i]) != \old(\typeof(elem))))
this.elementCount > \old(index)
\result >= \old(index)
(this.elementData.length-1 == 0) ==> (\result == 0)
(this.elementData.length-1 == 0) ==> (\old(index) == 0)
\old(index) <= this.elementData.length-1
===========================================================================
javautil.Vector13.indexOf(java.lang.Object, int):::EXIT277
    Variables: this this.elementData this.elementData.getClass().getName() this.elementData[] this.elementData[].getClass().getName() this.elementCount this.capacityIncrement javautil.Vector13.serialVersionUID elem elem.getClass().getName() index return orig(this) orig(this.elementData) orig(this.elementData.getClass().getName()) orig(this.elementData[]) orig(this.elementData[].getClass().getName()) orig(this.elementCount) orig(this.capacityIncrement) orig(elem) orig(elem.getClass().getName()) orig(index) size(this.elementData[]) size(this.elementData[])-1 orig(size(this.elementData[])) orig(size(this.elementData[]))-1 this.elementData[this.elementCount] this.elementData[this.elementCount-1] this.elementData[this.elementCount..] this.elementData[this.elementCount+1..] this.elementData[0..this.elementCount] this.elementData[0..this.elementCount-1] this.elementData[this.capacityIncrement] this.elementData[this.capacityIncrement-1] this.elementData[this.capacityIncrement..] this.elementData[this.capacityIncrement+1..] this.elementData[0..this.capacityIncrement] this.elementData[0..this.capacityIncrement-1] this.elementData[index] this.elementData[index-1] this.elementData[index..] this.elementData[index+1..] this.elementData[0..index] this.elementData[0..index-1] this.elementData[return] this.elementData[return-1] this.elementData[return..] this.elementData[return+1..] this.elementData[0..return] this.elementData[0..return-1] this.elementData[orig(this.elementCount)] this.elementData[orig(this.elementCount)-1] this.elementData[orig(this.elementCount)..] this.elementData[orig(this.elementCount)+1..] this.elementData[0..orig(this.elementCount)] this.elementData[0..orig(this.elementCount)-1] this.elementData[orig(this.capacityIncrement)] this.elementData[orig(this.capacityIncrement)-1] this.elementData[orig(this.capacityIncrement)..] this.elementData[orig(this.capacityIncrement)+1..] this.elementData[0..orig(this.capacityIncrement)] this.elementData[0..orig(this.capacityIncrement)-1] this.elementData[orig(index)] this.elementData[orig(index)-1] this.elementData[orig(index)..] this.elementData[orig(index)+1..] this.elementData[0..orig(index)] this.elementData[0..orig(index)-1] orig(this.elementData[post(this.elementCount)]) orig(this.elementData[post(this.elementCount)-1]) orig(this.elementData[post(this.elementCount)..]) orig(this.elementData[post(this.elementCount)+1..]) orig(this.elementData[0..post(this.elementCount)]) orig(this.elementData[0..post(this.elementCount)-1]) orig(this.elementData[post(this.capacityIncrement)]) orig(this.elementData[post(this.capacityIncrement)-1]) orig(this.elementData[post(this.capacityIncrement)..]) orig(this.elementData[post(this.capacityIncrement)+1..]) orig(this.elementData[0..post(this.capacityIncrement)]) orig(this.elementData[0..post(this.capacityIncrement)-1]) orig(this.elementData[post(index)]) orig(this.elementData[post(index)-1]) orig(this.elementData[post(index)..]) orig(this.elementData[post(index)+1..]) orig(this.elementData[0..post(index)]) orig(this.elementData[0..post(index)-1]) orig(this.elementData[post(return)]) orig(this.elementData[post(return)-1]) orig(this.elementData[post(return)..]) orig(this.elementData[post(return)+1..]) orig(this.elementData[0..post(return)]) orig(this.elementData[0..post(return)-1]) orig(this.elementData[this.elementCount]) orig(this.elementData[this.elementCount-1]) orig(this.elementData[this.elementCount..]) orig(this.elementData[this.elementCount+1..]) orig(this.elementData[0..this.elementCount]) orig(this.elementData[0..this.elementCount-1]) orig(this.elementData[this.capacityIncrement]) orig(this.elementData[this.capacityIncrement-1]) orig(this.elementData[this.capacityIncrement..]) orig(this.elementData[this.capacityIncrement+1..]) orig(this.elementData[0..this.capacityIncrement]) orig(this.elementData[0..this.capacityIncrement-1]) orig(this.elementData[index]) orig(this.elementData[index-1]) orig(this.elementData[index..]) orig(this.elementData[index+1..]) orig(this.elementData[0..index]) orig(this.elementData[0..index-1])
      Modified variables: this.elementData[this.elementCount] this.elementData[this.elementCount-1] this.elementData[this.elementCount+1..] this.elementData[0..this.elementCount] this.elementData[this.capacityIncrement] this.elementData[this.capacityIncrement-1] this.elementData[this.capacityIncrement..] this.elementData[this.capacityIncrement+1..] this.elementData[0..this.capacityIncrement] this.elementData[0..this.capacityIncrement-1]
      Modified primitive arguments: this.elementData[index] this.elementData[index-1] this.elementData[index..] this.elementData[index+1..] this.elementData[0..index] this.elementData[0..index-1]
      Unmodified variables: this this.elementData this.elementData.getClass().getName() this.elementData[] this.elementData[].getClass().getName() this.elementCount this.capacityIncrement elem elem.getClass().getName() index size(this.elementData[]) this.elementData[this.elementCount..] this.elementData[0..this.elementCount-1]
modifies this.elementData[this.elementCount], this.elementData[this.elementCount-1], this.elementData[this.elementCount+1..], this.elementData[0..this.elementCount], this.elementData[this.capacityIncrement], this.elementData[this.capacityIncrement-1], this.elementData[this.capacityIncrement..], this.elementData[this.capacityIncrement+1..], this.elementData[0..this.capacityIncrement], this.elementData[0..this.capacityIncrement-1]
\result == -1
(\forall int i; (0 <= i && i <= \result) ==> (this.elementData[i] != null))
this.capacityIncrement > \result
\result < \old(index)
===========================================================================
javautil.Vector13.indexOf(java.lang.Object, int):::EXIT
    Variables: this this.elementData this.elementData.getClass().getName() this.elementData[] this.elementData[].getClass().getName() this.elementCount this.capacityIncrement javautil.Vector13.serialVersionUID elem elem.getClass().getName() index return orig(this) orig(this.elementData) orig(this.elementData.getClass().getName()) orig(this.elementData[]) orig(this.elementData[].getClass().getName()) orig(this.elementCount) orig(this.capacityIncrement) orig(elem) orig(elem.getClass().getName()) orig(index) size(this.elementData[]) size(this.elementData[])-1 orig(size(this.elementData[])) orig(size(this.elementData[]))-1 this.elementData[this.elementCount] this.elementData[this.elementCount-1] this.elementData[this.elementCount..] this.elementData[this.elementCount+1..] this.elementData[0..this.elementCount] this.elementData[0..this.elementCount-1] this.elementData[this.capacityIncrement] this.elementData[this.capacityIncrement-1] this.elementData[this.capacityIncrement..] this.elementData[this.capacityIncrement+1..] this.elementData[0..this.capacityIncrement] this.elementData[0..this.capacityIncrement-1] this.elementData[index] this.elementData[index-1] this.elementData[index..] this.elementData[index+1..] this.elementData[0..index] this.elementData[0..index-1] this.elementData[return] this.elementData[return-1] this.elementData[return..] this.elementData[return+1..] this.elementData[0..return] this.elementData[0..return-1] this.elementData[orig(this.elementCount)] this.elementData[orig(this.elementCount)-1] this.elementData[orig(this.elementCount)..] this.elementData[orig(this.elementCount)+1..] this.elementData[0..orig(this.elementCount)] this.elementData[0..orig(this.elementCount)-1] this.elementData[orig(this.capacityIncrement)] this.elementData[orig(this.capacityIncrement)-1] this.elementData[orig(this.capacityIncrement)..] this.elementData[orig(this.capacityIncrement)+1..] this.elementData[0..orig(this.capacityIncrement)] this.elementData[0..orig(this.capacityIncrement)-1] this.elementData[orig(index)] this.elementData[orig(index)-1] this.elementData[orig(index)..] this.elementData[orig(index)+1..] this.elementData[0..orig(index)] this.elementData[0..orig(index)-1] orig(this.elementData[post(this.elementCount)]) orig(this.elementData[post(this.elementCount)-1]) orig(this.elementData[post(this.elementCount)..]) orig(this.elementData[post(this.elementCount)+1..]) orig(this.elementData[0..post(this.elementCount)]) orig(this.elementData[0..post(this.elementCount)-1]) orig(this.elementData[post(this.capacityIncrement)]) orig(this.elementData[post(this.capacityIncrement)-1]) orig(this.elementData[post(this.capacityIncrement)..]) orig(this.elementData[post(this.capacityIncrement)+1..]) orig(this.elementData[0..post(this.capacityIncrement)]) orig(this.elementData[0..post(this.capacityIncrement)-1]) orig(this.elementData[post(index)]) orig(this.elementData[post(index)-1]) orig(this.elementData[post(index)..]) orig(this.elementData[post(index)+1..]) orig(this.elementData[0..post(index)]) orig(this.elementData[0..post(index)-1]) orig(this.elementData[post(return)]) orig(this.elementData[post(return)-1]) orig(this.elementData[post(return)..]) orig(this.elementData[post(return)+1..]) orig(this.elementData[0..post(return)]) orig(this.elementData[0..post(return)-1]) orig(this.elementData[this.elementCount]) orig(this.elementData[this.elementCount-1]) orig(this.elementData[this.elementCount..]) orig(this.elementData[this.elementCount+1..]) orig(this.elementData[0..this.elementCount]) orig(this.elementData[0..this.elementCount-1]) orig(this.elementData[this.capacityIncrement]) orig(this.elementData[this.capacityIncrement-1]) orig(this.elementData[this.capacityIncrement..]) orig(this.elementData[this.capacityIncrement+1..]) orig(this.elementData[0..this.capacityIncrement]) orig(this.elementData[0..this.capacityIncrement-1]) orig(this.elementData[index]) orig(this.elementData[index-1]) orig(this.elementData[index..]) orig(this.elementData[index+1..]) orig(this.elementData[0..index]) orig(this.elementData[0..index-1])
      Modified variables: this.elementData[this.elementCount] this.elementData[this.elementCount-1] this.elementData[this.elementCount+1..] this.elementData[0..this.elementCount] this.elementData[this.capacityIncrement] this.elementData[this.capacityIncrement-1] this.elementData[this.capacityIncrement..] this.elementData[this.capacityIncrement+1..] this.elementData[0..this.capacityIncrement] this.elementData[0..this.capacityIncrement-1]
      Modified primitive arguments: this.elementData[index] this.elementData[index-1] this.elementData[index..] this.elementData[index+1..] this.elementData[0..index] this.elementData[0..index-1]
      Unmodified variables: this this.elementData this.elementData.getClass().getName() this.elementData[] this.elementData[].getClass().getName() this.elementCount this.capacityIncrement elem elem.getClass().getName() index size(this.elementData[]) this.elementData[this.elementCount..] this.elementData[0..this.elementCount-1]
modifies this.elementData[this.elementCount], this.elementData[this.elementCount-1], this.elementData[this.elementCount+1..], this.elementData[0..this.elementCount], this.elementData[this.capacityIncrement], this.elementData[this.capacityIncrement-1], this.elementData[this.capacityIncrement..], this.elementData[this.capacityIncrement+1..], this.elementData[0..this.capacityIncrement], this.elementData[0..this.capacityIncrement-1]
(\result == -1)  ==  (\result < \old(index))
(\result == -1)  ==>  (this.capacityIncrement > \result)
(\result == -1)  ==>  ((\forall int i; (0 <= i && i <= \result) ==> (this.elementData[i] != null)))
(\result >= 0)  ==  (\result >= \old(index))
(\result >= 0)  ==>  ((this.elementData.length-1 == 0) ==> (\old(index) == 0))
(\result >= 0)  ==>  ((this.elementData.length-1 == 0) ==> (\result == 0))
(\result >= 0)  ==>  (!(\forall int i; (0 <= i && i <= this.elementData.length-1) ==> (\typeof(this.elementData[i]) != \old(\typeof(elem)))))
(\result >= 0)  ==>  (\old(index) <= this.elementData.length-1)
(\result >= 0)  ==>  (\old(this.elementData[\new(\result)]) != null)
(\result >= 0)  ==>  (this.elementCount > \old(index))
(\result >= 0)  ==>  (this.elementCount >= 1)
(\result >= 0)  ==>  (this.elementData[\result] != null)
\result >= -1
\typeof(this.elementData) != \old(\typeof(elem))
this.elementCount > \result
(this.elementData.length == 0) ==> (this.elementCount == 0)
this.elementCount <= this.elementData.length
(\result == 0) ==> (\old(index) == 0)
\result <= this.elementData.length-1
===========================================================================
javautil.Vector13.insertElementAt(java.lang.Object, int):::ENTER
    Variables: this this.elementData this.elementData.getClass().getName() this.elementData[] this.elementData[].getClass().getName() this.elementCount this.capacityIncrement javautil.Vector13.serialVersionUID obj obj.getClass().getName() index size(this.elementData[]) size(this.elementData[])-1 this.elementData[this.elementCount] this.elementData[this.elementCount-1] this.elementData[this.elementCount..] this.elementData[this.elementCount+1..] this.elementData[0..this.elementCount] this.elementData[0..this.elementCount-1] this.elementData[this.capacityIncrement] this.elementData[this.capacityIncrement-1] this.elementData[this.capacityIncrement..] this.elementData[this.capacityIncrement+1..] this.elementData[0..this.capacityIncrement] this.elementData[0..this.capacityIncrement-1] this.elementData[index] this.elementData[index-1] this.elementData[index..] this.elementData[index+1..] this.elementData[0..index] this.elementData[0..index-1]
(obj != null)  ==>  (warning: method daikon.inv.unary.string.PrintableString.format(OutputFormat:ESC/Java) needs to be implemented: obj.getClass().getName() is printable)
index >= 0
(obj != null)  ==>  (\typeof(this.elementData) != \typeof(obj))
(this.elementCount == 0) ==> (index == 0)
this.elementCount >= index
(this.elementData.length == 0) ==> (this.elementCount == 0)
this.elementCount <= this.elementData.length
(this.elementData.length == 0) ==> (index == 0)
index <= this.elementData.length
===========================================================================
javautil.Vector13.insertElementAt(java.lang.Object, int):::EXIT
    Variables: this this.elementData this.elementData.getClass().getName() this.elementData[] this.elementData[].getClass().getName() this.elementCount this.capacityIncrement javautil.Vector13.serialVersionUID obj obj.getClass().getName() index orig(this) orig(this.elementData) orig(this.elementData.getClass().getName()) orig(this.elementData[]) orig(this.elementData[].getClass().getName()) orig(this.elementCount) orig(this.capacityIncrement) orig(obj) orig(obj.getClass().getName()) orig(index) size(this.elementData[]) size(this.elementData[])-1 orig(size(this.elementData[])) orig(size(this.elementData[]))-1 this.elementData[this.elementCount] this.elementData[this.elementCount-1] this.elementData[this.elementCount..] this.elementData[this.elementCount+1..] this.elementData[0..this.elementCount] this.elementData[0..this.elementCount-1] this.elementData[this.capacityIncrement] this.elementData[this.capacityIncrement-1] this.elementData[this.capacityIncrement..] this.elementData[this.capacityIncrement+1..] this.elementData[0..this.capacityIncrement] this.elementData[0..this.capacityIncrement-1] this.elementData[index] this.elementData[index-1] this.elementData[index..] this.elementData[index+1..] this.elementData[0..index] this.elementData[0..index-1] this.elementData[orig(this.elementCount)] this.elementData[orig(this.elementCount)-1] this.elementData[orig(this.elementCount)..] this.elementData[orig(this.elementCount)+1..] this.elementData[0..orig(this.elementCount)] this.elementData[0..orig(this.elementCount)-1] this.elementData[orig(this.capacityIncrement)] this.elementData[orig(this.capacityIncrement)-1] this.elementData[orig(this.capacityIncrement)..] this.elementData[orig(this.capacityIncrement)+1..] this.elementData[0..orig(this.capacityIncrement)] this.elementData[0..orig(this.capacityIncrement)-1] this.elementData[orig(index)] this.elementData[orig(index)-1] this.elementData[orig(index)..] this.elementData[orig(index)+1..] this.elementData[0..orig(index)] this.elementData[0..orig(index)-1] orig(this.elementData[post(this.elementCount)]) orig(this.elementData[post(this.elementCount)-1]) orig(this.elementData[post(this.elementCount)..]) orig(this.elementData[post(this.elementCount)+1..]) orig(this.elementData[0..post(this.elementCount)]) orig(this.elementData[0..post(this.elementCount)-1]) orig(this.elementData[post(this.capacityIncrement)]) orig(this.elementData[post(this.capacityIncrement)-1]) orig(this.elementData[post(this.capacityIncrement)..]) orig(this.elementData[post(this.capacityIncrement)+1..]) orig(this.elementData[0..post(this.capacityIncrement)]) orig(this.elementData[0..post(this.capacityIncrement)-1]) orig(this.elementData[post(index)]) orig(this.elementData[post(index)-1]) orig(this.elementData[post(index)..]) orig(this.elementData[post(index)+1..]) orig(this.elementData[0..post(index)]) orig(this.elementData[0..post(index)-1]) orig(this.elementData[this.elementCount]) orig(this.elementData[this.elementCount-1]) orig(this.elementData[this.elementCount..]) orig(this.elementData[this.elementCount+1..]) orig(this.elementData[0..this.elementCount]) orig(this.elementData[0..this.elementCount-1]) orig(this.elementData[this.capacityIncrement]) orig(this.elementData[this.capacityIncrement-1]) orig(this.elementData[this.capacityIncrement..]) orig(this.elementData[this.capacityIncrement+1..]) orig(this.elementData[0..this.capacityIncrement]) orig(this.elementData[0..this.capacityIncrement-1]) orig(this.elementData[index]) orig(this.elementData[index-1]) orig(this.elementData[index..]) orig(this.elementData[index+1..]) orig(this.elementData[0..index]) orig(this.elementData[0..index-1])
      Modified variables: this.elementData this.elementData[] this.elementData[].getClass().getName() this.elementCount size(this.elementData[]) this.elementData[this.elementCount] this.elementData[this.elementCount-1] this.elementData[this.elementCount..] this.elementData[this.elementCount+1..] this.elementData[0..this.elementCount] this.elementData[0..this.elementCount-1] this.elementData[this.capacityIncrement] this.elementData[this.capacityIncrement-1] this.elementData[this.capacityIncrement..] this.elementData[this.capacityIncrement+1..] this.elementData[0..this.capacityIncrement] this.elementData[0..this.capacityIncrement-1]
      Modified primitive arguments: this.elementData[index] this.elementData[index-1] this.elementData[index..] this.elementData[index+1..] this.elementData[0..index]
      Unmodified variables: this this.elementData.getClass().getName() this.capacityIncrement obj obj.getClass().getName() index this.elementData[0..index-1]
modifies this.elementData, this.elementData[*], this.elementCount, this.elementData[this.elementCount], this.elementData[this.elementCount-1], this.elementData[this.elementCount..], this.elementData[this.elementCount+1..], this.elementData[0..this.elementCount], this.elementData[0..this.elementCount-1], this.elementData[this.capacityIncrement], this.elementData[this.capacityIncrement-1], this.elementData[this.capacityIncrement..], this.elementData[this.capacityIncrement+1..], this.elementData[0..this.capacityIncrement], this.elementData[0..this.capacityIncrement-1]
this.elementData[this.elementCount-1] == this.elementData[\old(this.elementCount)]
warning: method daikon.inv.binary.twoSequence.SeqSeqIntEqual.format(OutputFormat:ESC/Java) needs to be implemented: this.elementData[0..orig(index)-1] == orig(this.elementData[0..post(index)-1])
warning: method daikon.inv.binary.twoSequence.SeqSeqIntEqual.format(OutputFormat:ESC/Java) needs to be implemented: this.elementData[0..orig(index)-1] == orig(this.elementData[0..index-1])
this.elementCount >= 1
(\old(obj) != null)  ==>  (\typeof(this.elementData) != \old(\typeof(obj)))
(\old(obj) != null)  ==>  (!(\forall int i; (0 <= i && i <= this.elementData.length-1) ==> (\typeof(this.elementData[i]) != \old(\typeof(obj)))))
this.elementCount - \old(this.elementCount) - 1 == 0
this.elementCount > \old(index)
this.elementCount <= this.elementData.length
(this.elementData.length-1 == 0) ==> (\old(this.elementCount) == 0)
\old(this.elementCount) <= this.elementData.length-1
(this.elementData.length-1 == 0) ==> (\old(index) == 0)
\old(index) <= this.elementData.length-1
this.elementData.length >= \old(this.elementData.length)
this.elementData.length-1 >= \old(this.elementData.length)-1
===========================================================================
javautil.Vector13.isEmpty():::ENTER
    Variables: this this.elementData this.elementData.getClass().getName() this.elementData[] this.elementData[].getClass().getName() this.elementCount this.capacityIncrement javautil.Vector13.serialVersionUID size(this.elementData[]) size(this.elementData[])-1 this.elementData[this.elementCount] this.elementData[this.elementCount-1] this.elementData[this.elementCount..] this.elementData[this.elementCount+1..] this.elementData[0..this.elementCount] this.elementData[0..this.elementCount-1] this.elementData[this.capacityIncrement] this.elementData[this.capacityIncrement-1] this.elementData[this.capacityIncrement..] this.elementData[this.capacityIncrement+1..] this.elementData[0..this.capacityIncrement] this.elementData[0..this.capacityIncrement-1]
(this.elementData.length == 0) ==> (this.elementCount == 0)
this.elementCount <= this.elementData.length
===========================================================================
javautil.Vector13.isEmpty():::EXIT
    Variables: this this.elementData this.elementData.getClass().getName() this.elementData[] this.elementData[].getClass().getName() this.elementCount this.capacityIncrement javautil.Vector13.serialVersionUID return orig(this) orig(this.elementData) orig(this.elementData.getClass().getName()) orig(this.elementData[]) orig(this.elementData[].getClass().getName()) orig(this.elementCount) orig(this.capacityIncrement) size(this.elementData[]) size(this.elementData[])-1 orig(size(this.elementData[])) orig(size(this.elementData[]))-1 this.elementData[this.elementCount] this.elementData[this.elementCount-1] this.elementData[this.elementCount..] this.elementData[this.elementCount+1..] this.elementData[0..this.elementCount] this.elementData[0..this.elementCount-1] this.elementData[this.capacityIncrement] this.elementData[this.capacityIncrement-1] this.elementData[this.capacityIncrement..] this.elementData[this.capacityIncrement+1..] this.elementData[0..this.capacityIncrement] this.elementData[0..this.capacityIncrement-1] this.elementData[orig(this.elementCount)] this.elementData[orig(this.elementCount)-1] this.elementData[orig(this.elementCount)..] this.elementData[orig(this.elementCount)+1..] this.elementData[0..orig(this.elementCount)] this.elementData[0..orig(this.elementCount)-1] this.elementData[orig(this.capacityIncrement)] this.elementData[orig(this.capacityIncrement)-1] this.elementData[orig(this.capacityIncrement)..] this.elementData[orig(this.capacityIncrement)+1..] this.elementData[0..orig(this.capacityIncrement)] this.elementData[0..orig(this.capacityIncrement)-1] orig(this.elementData[post(this.elementCount)]) orig(this.elementData[post(this.elementCount)-1]) orig(this.elementData[post(this.elementCount)..]) orig(this.elementData[post(this.elementCount)+1..]) orig(this.elementData[0..post(this.elementCount)]) orig(this.elementData[0..post(this.elementCount)-1]) orig(this.elementData[post(this.capacityIncrement)]) orig(this.elementData[post(this.capacityIncrement)-1]) orig(this.elementData[post(this.capacityIncrement)..]) orig(this.elementData[post(this.capacityIncrement)+1..]) orig(this.elementData[0..post(this.capacityIncrement)]) orig(this.elementData[0..post(this.capacityIncrement)-1]) orig(this.elementData[this.elementCount]) orig(this.elementData[this.elementCount-1]) orig(this.elementData[this.elementCount..]) orig(this.elementData[this.elementCount+1..]) orig(this.elementData[0..this.elementCount]) orig(this.elementData[0..this.elementCount-1]) orig(this.elementData[this.capacityIncrement]) orig(this.elementData[this.capacityIncrement-1]) orig(this.elementData[this.capacityIncrement..]) orig(this.elementData[this.capacityIncrement+1..]) orig(this.elementData[0..this.capacityIncrement]) orig(this.elementData[0..this.capacityIncrement-1])
      Modified variables: this.elementData[this.elementCount] this.elementData[this.elementCount-1] this.elementData[this.elementCount+1..] this.elementData[0..this.elementCount] this.elementData[this.capacityIncrement] this.elementData[this.capacityIncrement-1] this.elementData[this.capacityIncrement..] this.elementData[this.capacityIncrement+1..] this.elementData[0..this.capacityIncrement] this.elementData[0..this.capacityIncrement-1]
      Unmodified variables: this this.elementData this.elementData.getClass().getName() this.elementData[] this.elementData[].getClass().getName() this.elementCount this.capacityIncrement size(this.elementData[]) this.elementData[this.elementCount..] this.elementData[0..this.elementCount-1]
modifies this.elementData[this.elementCount], this.elementData[this.elementCount-1], this.elementData[this.elementCount+1..], this.elementData[0..this.elementCount], this.elementData[this.capacityIncrement], this.elementData[this.capacityIncrement-1], this.elementData[this.capacityIncrement..], this.elementData[this.capacityIncrement+1..], this.elementData[0..this.capacityIncrement], this.elementData[0..this.capacityIncrement-1]
(this.elementCount == 0)  ==  (\result == true)
(this.elementCount == 0)  ==>  (this.elementCount <= this.capacityIncrement)
(this.elementCount == 0)  ==>  (this.elementCount is a pointer)
(this.elementCount == 0)  ==>  ((\forall int i; (0 <= i && i <= this.elementCount-1) ==> (this.elementData[i] != null)))
(this.elementCount == 0)  ==>  ((\forall int i; (0 <= i && i <= this.elementData.length-1) ==> (this.elementData[i] == null)))
(this.elementCount == 0)  ==>  ((\forall int i; (0 <= i && i <= this.elementData.length-1) ==> (\typeof(this.elementData[i]) == \typeof(null))))
(this.elementData.length == 0) ==> (this.elementCount == 0)
this.elementCount <= this.elementData.length
===========================================================================
javautil.Vector13.lastElement():::ENTER
    Variables: this this.elementData this.elementData.getClass().getName() this.elementData[] this.elementData[].getClass().getName() this.elementCount this.capacityIncrement javautil.Vector13.serialVersionUID size(this.elementData[]) size(this.elementData[])-1 this.elementData[this.elementCount] this.elementData[this.elementCount-1] this.elementData[this.elementCount..] this.elementData[this.elementCount+1..] this.elementData[0..this.elementCount] this.elementData[0..this.elementCount-1] this.elementData[this.capacityIncrement] this.elementData[this.capacityIncrement-1] this.elementData[this.capacityIncrement..] this.elementData[this.capacityIncrement+1..] this.elementData[0..this.capacityIncrement] this.elementData[0..this.capacityIncrement-1]
this.elementCount >= 1
this.elementCount <= this.elementData.length
===========================================================================
javautil.Vector13.lastElement():::EXIT
    Variables: this this.elementData this.elementData.getClass().getName() this.elementData[] this.elementData[].getClass().getName() this.elementCount this.capacityIncrement javautil.Vector13.serialVersionUID return return.getClass().getName() orig(this) orig(this.elementData) orig(this.elementData.getClass().getName()) orig(this.elementData[]) orig(this.elementData[].getClass().getName()) orig(this.elementCount) orig(this.capacityIncrement) size(this.elementData[]) size(this.elementData[])-1 orig(size(this.elementData[])) orig(size(this.elementData[]))-1 this.elementData[this.elementCount] this.elementData[this.elementCount-1] this.elementData[this.elementCount..] this.elementData[this.elementCount+1..] this.elementData[0..this.elementCount] this.elementData[0..this.elementCount-1] this.elementData[this.capacityIncrement] this.elementData[this.capacityIncrement-1] this.elementData[this.capacityIncrement..] this.elementData[this.capacityIncrement+1..] this.elementData[0..this.capacityIncrement] this.elementData[0..this.capacityIncrement-1] this.elementData[orig(this.elementCount)] this.elementData[orig(this.elementCount)-1] this.elementData[orig(this.elementCount)..] this.elementData[orig(this.elementCount)+1..] this.elementData[0..orig(this.elementCount)] this.elementData[0..orig(this.elementCount)-1] this.elementData[orig(this.capacityIncrement)] this.elementData[orig(this.capacityIncrement)-1] this.elementData[orig(this.capacityIncrement)..] this.elementData[orig(this.capacityIncrement)+1..] this.elementData[0..orig(this.capacityIncrement)] this.elementData[0..orig(this.capacityIncrement)-1] orig(this.elementData[post(this.elementCount)]) orig(this.elementData[post(this.elementCount)-1]) orig(this.elementData[post(this.elementCount)..]) orig(this.elementData[post(this.elementCount)+1..]) orig(this.elementData[0..post(this.elementCount)]) orig(this.elementData[0..post(this.elementCount)-1]) orig(this.elementData[post(this.capacityIncrement)]) orig(this.elementData[post(this.capacityIncrement)-1]) orig(this.elementData[post(this.capacityIncrement)..]) orig(this.elementData[post(this.capacityIncrement)+1..]) orig(this.elementData[0..post(this.capacityIncrement)]) orig(this.elementData[0..post(this.capacityIncrement)-1]) orig(this.elementData[this.elementCount]) orig(this.elementData[this.elementCount-1]) orig(this.elementData[this.elementCount..]) orig(this.elementData[this.elementCount+1..]) orig(this.elementData[0..this.elementCount]) orig(this.elementData[0..this.elementCount-1]) orig(this.elementData[this.capacityIncrement]) orig(this.elementData[this.capacityIncrement-1]) orig(this.elementData[this.capacityIncrement..]) orig(this.elementData[this.capacityIncrement+1..]) orig(this.elementData[0..this.capacityIncrement]) orig(this.elementData[0..this.capacityIncrement-1])
      Modified variables: this.elementData[this.elementCount] this.elementData[this.elementCount+1..] this.elementData[0..this.elementCount] this.elementData[this.capacityIncrement] this.elementData[this.capacityIncrement-1] this.elementData[this.capacityIncrement..] this.elementData[this.capacityIncrement+1..] this.elementData[0..this.capacityIncrement] this.elementData[0..this.capacityIncrement-1]
      Unmodified variables: this this.elementData this.elementData.getClass().getName() this.elementData[] this.elementData[].getClass().getName() this.elementCount this.capacityIncrement size(this.elementData[]) this.elementData[this.elementCount-1] this.elementData[this.elementCount..] this.elementData[0..this.elementCount-1]
modifies this.elementData[this.elementCount], this.elementData[this.elementCount+1..], this.elementData[0..this.elementCount], this.elementData[this.capacityIncrement], this.elementData[this.capacityIncrement-1], this.elementData[this.capacityIncrement..], this.elementData[this.capacityIncrement+1..], this.elementData[0..this.capacityIncrement], this.elementData[0..this.capacityIncrement-1]
this.elementCount >= 1
(\result != null)  ==>  (warning: method daikon.inv.unary.string.PrintableString.format(OutputFormat:ESC/Java) needs to be implemented: return.getClass().getName() is printable)
(\result != null)  ==>  (\typeof(this.elementData) != \typeof(\result))
(\result != null)  ==>  (!(\forall int i; (0 <= i && i <= this.elementData.length-1) ==> (\typeof(this.elementData[i]) != \typeof(\result))))
this.elementCount <= this.elementData.length
===========================================================================
javautil.Vector13.lastIndexOf(java.lang.Object):::ENTER
    Variables: this this.elementData this.elementData.getClass().getName() this.elementData[] this.elementData[].getClass().getName() this.elementCount this.capacityIncrement javautil.Vector13.serialVersionUID elem elem.getClass().getName() size(this.elementData[]) size(this.elementData[])-1 this.elementData[this.elementCount] this.elementData[this.elementCount-1] this.elementData[this.elementCount..] this.elementData[this.elementCount+1..] this.elementData[0..this.elementCount] this.elementData[0..this.elementCount-1] this.elementData[this.capacityIncrement] this.elementData[this.capacityIncrement-1] this.elementData[this.capacityIncrement..] this.elementData[this.capacityIncrement+1..] this.elementData[0..this.capacityIncrement] this.elementData[0..this.capacityIncrement-1]
elem != null
warning: method daikon.inv.unary.string.PrintableString.format(OutputFormat:ESC/Java) needs to be implemented: elem.getClass().getName() is printable
\typeof(this.elementData) != \typeof(elem)
(this.elementData.length == 0) ==> (this.elementCount == 0)
this.elementCount <= this.elementData.length
===========================================================================
javautil.Vector13.lastIndexOf(java.lang.Object):::EXIT
    Variables: this this.elementData this.elementData.getClass().getName() this.elementData[] this.elementData[].getClass().getName() this.elementCount this.capacityIncrement javautil.Vector13.serialVersionUID elem elem.getClass().getName() return orig(this) orig(this.elementData) orig(this.elementData.getClass().getName()) orig(this.elementData[]) orig(this.elementData[].getClass().getName()) orig(this.elementCount) orig(this.capacityIncrement) orig(elem) orig(elem.getClass().getName()) size(this.elementData[]) size(this.elementData[])-1 orig(size(this.elementData[])) orig(size(this.elementData[]))-1 this.elementData[this.elementCount] this.elementData[this.elementCount-1] this.elementData[this.elementCount..] this.elementData[this.elementCount+1..] this.elementData[0..this.elementCount] this.elementData[0..this.elementCount-1] this.elementData[this.capacityIncrement] this.elementData[this.capacityIncrement-1] this.elementData[this.capacityIncrement..] this.elementData[this.capacityIncrement+1..] this.elementData[0..this.capacityIncrement] this.elementData[0..this.capacityIncrement-1] this.elementData[return] this.elementData[return-1] this.elementData[return..] this.elementData[return+1..] this.elementData[0..return] this.elementData[0..return-1] this.elementData[orig(this.elementCount)] this.elementData[orig(this.elementCount)-1] this.elementData[orig(this.elementCount)..] this.elementData[orig(this.elementCount)+1..] this.elementData[0..orig(this.elementCount)] this.elementData[0..orig(this.elementCount)-1] this.elementData[orig(this.capacityIncrement)] this.elementData[orig(this.capacityIncrement)-1] this.elementData[orig(this.capacityIncrement)..] this.elementData[orig(this.capacityIncrement)+1..] this.elementData[0..orig(this.capacityIncrement)] this.elementData[0..orig(this.capacityIncrement)-1] orig(this.elementData[post(this.elementCount)]) orig(this.elementData[post(this.elementCount)-1]) orig(this.elementData[post(this.elementCount)..]) orig(this.elementData[post(this.elementCount)+1..]) orig(this.elementData[0..post(this.elementCount)]) orig(this.elementData[0..post(this.elementCount)-1]) orig(this.elementData[post(this.capacityIncrement)]) orig(this.elementData[post(this.capacityIncrement)-1]) orig(this.elementData[post(this.capacityIncrement)..]) orig(this.elementData[post(this.capacityIncrement)+1..]) orig(this.elementData[0..post(this.capacityIncrement)]) orig(this.elementData[0..post(this.capacityIncrement)-1]) orig(this.elementData[post(return)]) orig(this.elementData[post(return)-1]) orig(this.elementData[post(return)..]) orig(this.elementData[post(return)+1..]) orig(this.elementData[0..post(return)]) orig(this.elementData[0..post(return)-1]) orig(this.elementData[this.elementCount]) orig(this.elementData[this.elementCount-1]) orig(this.elementData[this.elementCount..]) orig(this.elementData[this.elementCount+1..]) orig(this.elementData[0..this.elementCount]) orig(this.elementData[0..this.elementCount-1]) orig(this.elementData[this.capacityIncrement]) orig(this.elementData[this.capacityIncrement-1]) orig(this.elementData[this.capacityIncrement..]) orig(this.elementData[this.capacityIncrement+1..]) orig(this.elementData[0..this.capacityIncrement]) orig(this.elementData[0..this.capacityIncrement-1])
      Modified variables: this.elementData[this.elementCount] this.elementData[this.elementCount-1] this.elementData[this.elementCount+1..] this.elementData[0..this.elementCount] this.elementData[this.capacityIncrement] this.elementData[this.capacityIncrement-1] this.elementData[this.capacityIncrement..] this.elementData[this.capacityIncrement+1..] this.elementData[0..this.capacityIncrement] this.elementData[0..this.capacityIncrement-1]
      Unmodified variables: this this.elementData this.elementData.getClass().getName() this.elementData[] this.elementData[].getClass().getName() this.elementCount this.capacityIncrement elem elem.getClass().getName() size(this.elementData[]) this.elementData[this.elementCount..] this.elementData[0..this.elementCount-1]
modifies this.elementData[this.elementCount], this.elementData[this.elementCount-1], this.elementData[this.elementCount+1..], this.elementData[0..this.elementCount], this.elementData[this.capacityIncrement], this.elementData[this.capacityIncrement-1], this.elementData[this.capacityIncrement..], this.elementData[this.capacityIncrement+1..], this.elementData[0..this.capacityIncrement], this.elementData[0..this.capacityIncrement-1]
\result >= -1
\typeof(this.elementData) != \old(\typeof(elem))
this.elementCount > \result
(this.elementData.length == 0) ==> (this.elementCount == 0)
this.elementCount <= this.elementData.length
\result <= this.elementData.length-1
===========================================================================
javautil.Vector13.lastIndexOf(java.lang.Object, int):::ENTER
    Variables: this this.elementData this.elementData.getClass().getName() this.elementData[] this.elementData[].getClass().getName() this.elementCount this.capacityIncrement javautil.Vector13.serialVersionUID elem elem.getClass().getName() index size(this.elementData[]) size(this.elementData[])-1 this.elementData[this.elementCount] this.elementData[this.elementCount-1] this.elementData[this.elementCount..] this.elementData[this.elementCount+1..] this.elementData[0..this.elementCount] this.elementData[0..this.elementCount-1] this.elementData[this.capacityIncrement] this.elementData[this.capacityIncrement-1] this.elementData[this.capacityIncrement..] this.elementData[this.capacityIncrement+1..] this.elementData[0..this.capacityIncrement] this.elementData[0..this.capacityIncrement-1] this.elementData[index] this.elementData[index-1] this.elementData[index..] this.elementData[index+1..] this.elementData[0..index] this.elementData[0..index-1]
elem != null
warning: method daikon.inv.unary.string.PrintableString.format(OutputFormat:ESC/Java) needs to be implemented: elem.getClass().getName() is printable
index >= -1
\typeof(this.elementData) != \typeof(elem)
this.elementCount > index
(this.elementData.length == 0) ==> (this.elementCount == 0)
this.elementCount <= this.elementData.length
index <= this.elementData.length-1
===========================================================================
javautil.Vector13.lastIndexOf(java.lang.Object, int):::EXIT307
    Variables: this this.elementData this.elementData.getClass().getName() this.elementData[] this.elementData[].getClass().getName() this.elementCount this.capacityIncrement javautil.Vector13.serialVersionUID elem elem.getClass().getName() index return orig(this) orig(this.elementData) orig(this.elementData.getClass().getName()) orig(this.elementData[]) orig(this.elementData[].getClass().getName()) orig(this.elementCount) orig(this.capacityIncrement) orig(elem) orig(elem.getClass().getName()) orig(index) size(this.elementData[]) size(this.elementData[])-1 orig(size(this.elementData[])) orig(size(this.elementData[]))-1 this.elementData[this.elementCount] this.elementData[this.elementCount-1] this.elementData[this.elementCount..] this.elementData[this.elementCount+1..] this.elementData[0..this.elementCount] this.elementData[0..this.elementCount-1] this.elementData[this.capacityIncrement] this.elementData[this.capacityIncrement-1] this.elementData[this.capacityIncrement..] this.elementData[this.capacityIncrement+1..] this.elementData[0..this.capacityIncrement] this.elementData[0..this.capacityIncrement-1] this.elementData[index] this.elementData[index-1] this.elementData[index..] this.elementData[index+1..] this.elementData[0..index] this.elementData[0..index-1] this.elementData[return] this.elementData[return-1] this.elementData[return..] this.elementData[return+1..] this.elementData[0..return] this.elementData[0..return-1] this.elementData[orig(this.elementCount)] this.elementData[orig(this.elementCount)-1] this.elementData[orig(this.elementCount)..] this.elementData[orig(this.elementCount)+1..] this.elementData[0..orig(this.elementCount)] this.elementData[0..orig(this.elementCount)-1] this.elementData[orig(this.capacityIncrement)] this.elementData[orig(this.capacityIncrement)-1] this.elementData[orig(this.capacityIncrement)..] this.elementData[orig(this.capacityIncrement)+1..] this.elementData[0..orig(this.capacityIncrement)] this.elementData[0..orig(this.capacityIncrement)-1] this.elementData[orig(index)] this.elementData[orig(index)-1] this.elementData[orig(index)..] this.elementData[orig(index)+1..] this.elementData[0..orig(index)] this.elementData[0..orig(index)-1] orig(this.elementData[post(this.elementCount)]) orig(this.elementData[post(this.elementCount)-1]) orig(this.elementData[post(this.elementCount)..]) orig(this.elementData[post(this.elementCount)+1..]) orig(this.elementData[0..post(this.elementCount)]) orig(this.elementData[0..post(this.elementCount)-1]) orig(this.elementData[post(this.capacityIncrement)]) orig(this.elementData[post(this.capacityIncrement)-1]) orig(this.elementData[post(this.capacityIncrement)..]) orig(this.elementData[post(this.capacityIncrement)+1..]) orig(this.elementData[0..post(this.capacityIncrement)]) orig(this.elementData[0..post(this.capacityIncrement)-1]) orig(this.elementData[post(index)]) orig(this.elementData[post(index)-1]) orig(this.elementData[post(index)..]) orig(this.elementData[post(index)+1..]) orig(this.elementData[0..post(index)]) orig(this.elementData[0..post(index)-1]) orig(this.elementData[post(return)]) orig(this.elementData[post(return)-1]) orig(this.elementData[post(return)..]) orig(this.elementData[post(return)+1..]) orig(this.elementData[0..post(return)]) orig(this.elementData[0..post(return)-1]) orig(this.elementData[this.elementCount]) orig(this.elementData[this.elementCount-1]) orig(this.elementData[this.elementCount..]) orig(this.elementData[this.elementCount+1..]) orig(this.elementData[0..this.elementCount]) orig(this.elementData[0..this.elementCount-1]) orig(this.elementData[this.capacityIncrement]) orig(this.elementData[this.capacityIncrement-1]) orig(this.elementData[this.capacityIncrement..]) orig(this.elementData[this.capacityIncrement+1..]) orig(this.elementData[0..this.capacityIncrement]) orig(this.elementData[0..this.capacityIncrement-1]) orig(this.elementData[index]) orig(this.elementData[index-1]) orig(this.elementData[index..]) orig(this.elementData[index+1..]) orig(this.elementData[0..index]) orig(this.elementData[0..index-1])
      Modified variables: this.elementData[this.elementCount] this.elementData[this.elementCount+1..] this.elementData[0..this.elementCount] this.elementData[this.capacityIncrement] this.elementData[this.capacityIncrement-1] this.elementData[this.capacityIncrement..] this.elementData[this.capacityIncrement+1..] this.elementData[0..this.capacityIncrement] this.elementData[0..this.capacityIncrement-1]
      Modified primitive arguments: this.elementData[index-1]
      Unmodified variables: this this.elementData this.elementData.getClass().getName() this.elementData[] this.elementData[].getClass().getName() this.elementCount this.capacityIncrement elem elem.getClass().getName() index size(this.elementData[]) this.elementData[this.elementCount-1] this.elementData[this.elementCount..] this.elementData[0..this.elementCount-1] this.elementData[index] this.elementData[index..] this.elementData[index+1..] this.elementData[0..index] this.elementData[0..index-1]
modifies this.elementData[this.elementCount], this.elementData[this.elementCount+1..], this.elementData[0..this.elementCount], this.elementData[this.capacityIncrement], this.elementData[this.capacityIncrement-1], this.elementData[this.capacityIncrement..], this.elementData[this.capacityIncrement+1..], this.elementData[0..this.capacityIncrement], this.elementData[0..this.capacityIncrement-1]
this.elementCount >= 1
\result >= 0
\old(index) >= 0
this.elementData[\result] != null
!(\forall int i; (0 <= i && i <= this.elementData.length-1) ==> (\typeof(this.elementData[i]) != \old(\typeof(elem))))
(\old(index) == 0) ==> (\result == 0)
(this.elementData.length-1 == 0) ==> (\result == 0)
(this.elementData.length-1 == 0) ==> (\old(index) == 0)
===========================================================================
javautil.Vector13.lastIndexOf(java.lang.Object, int):::EXIT310
    Variables: this this.elementData this.elementData.getClass().getName() this.elementData[] this.elementData[].getClass().getName() this.elementCount this.capacityIncrement javautil.Vector13.serialVersionUID elem elem.getClass().getName() index return orig(this) orig(this.elementData) orig(this.elementData.getClass().getName()) orig(this.elementData[]) orig(this.elementData[].getClass().getName()) orig(this.elementCount) orig(this.capacityIncrement) orig(elem) orig(elem.getClass().getName()) orig(index) size(this.elementData[]) size(this.elementData[])-1 orig(size(this.elementData[])) orig(size(this.elementData[]))-1 this.elementData[this.elementCount] this.elementData[this.elementCount-1] this.elementData[this.elementCount..] this.elementData[this.elementCount+1..] this.elementData[0..this.elementCount] this.elementData[0..this.elementCount-1] this.elementData[this.capacityIncrement] this.elementData[this.capacityIncrement-1] this.elementData[this.capacityIncrement..] this.elementData[this.capacityIncrement+1..] this.elementData[0..this.capacityIncrement] this.elementData[0..this.capacityIncrement-1] this.elementData[index] this.elementData[index-1] this.elementData[index..] this.elementData[index+1..] this.elementData[0..index] this.elementData[0..index-1] this.elementData[return] this.elementData[return-1] this.elementData[return..] this.elementData[return+1..] this.elementData[0..return] this.elementData[0..return-1] this.elementData[orig(this.elementCount)] this.elementData[orig(this.elementCount)-1] this.elementData[orig(this.elementCount)..] this.elementData[orig(this.elementCount)+1..] this.elementData[0..orig(this.elementCount)] this.elementData[0..orig(this.elementCount)-1] this.elementData[orig(this.capacityIncrement)] this.elementData[orig(this.capacityIncrement)-1] this.elementData[orig(this.capacityIncrement)..] this.elementData[orig(this.capacityIncrement)+1..] this.elementData[0..orig(this.capacityIncrement)] this.elementData[0..orig(this.capacityIncrement)-1] this.elementData[orig(index)] this.elementData[orig(index)-1] this.elementData[orig(index)..] this.elementData[orig(index)+1..] this.elementData[0..orig(index)] this.elementData[0..orig(index)-1] orig(this.elementData[post(this.elementCount)]) orig(this.elementData[post(this.elementCount)-1]) orig(this.elementData[post(this.elementCount)..]) orig(this.elementData[post(this.elementCount)+1..]) orig(this.elementData[0..post(this.elementCount)]) orig(this.elementData[0..post(this.elementCount)-1]) orig(this.elementData[post(this.capacityIncrement)]) orig(this.elementData[post(this.capacityIncrement)-1]) orig(this.elementData[post(this.capacityIncrement)..]) orig(this.elementData[post(this.capacityIncrement)+1..]) orig(this.elementData[0..post(this.capacityIncrement)]) orig(this.elementData[0..post(this.capacityIncrement)-1]) orig(this.elementData[post(index)]) orig(this.elementData[post(index)-1]) orig(this.elementData[post(index)..]) orig(this.elementData[post(index)+1..]) orig(this.elementData[0..post(index)]) orig(this.elementData[0..post(index)-1]) orig(this.elementData[post(return)]) orig(this.elementData[post(return)-1]) orig(this.elementData[post(return)..]) orig(this.elementData[post(return)+1..]) orig(this.elementData[0..post(return)]) orig(this.elementData[0..post(return)-1]) orig(this.elementData[this.elementCount]) orig(this.elementData[this.elementCount-1]) orig(this.elementData[this.elementCount..]) orig(this.elementData[this.elementCount+1..]) orig(this.elementData[0..this.elementCount]) orig(this.elementData[0..this.elementCount-1]) orig(this.elementData[this.capacityIncrement]) orig(this.elementData[this.capacityIncrement-1]) orig(this.elementData[this.capacityIncrement..]) orig(this.elementData[this.capacityIncrement+1..]) orig(this.elementData[0..this.capacityIncrement]) orig(this.elementData[0..this.capacityIncrement-1]) orig(this.elementData[index]) orig(this.elementData[index-1]) orig(this.elementData[index..]) orig(this.elementData[index+1..]) orig(this.elementData[0..index]) orig(this.elementData[0..index-1])
      Modified variables: this.elementData[this.elementCount] this.elementData[this.elementCount-1] this.elementData[this.elementCount+1..] this.elementData[0..this.elementCount] this.elementData[this.capacityIncrement] this.elementData[this.capacityIncrement-1] this.elementData[this.capacityIncrement..] this.elementData[this.capacityIncrement+1..] this.elementData[0..this.capacityIncrement] this.elementData[0..this.capacityIncrement-1]
      Modified primitive arguments: this.elementData[index] this.elementData[index-1] this.elementData[index..] this.elementData[0..index-1]
      Unmodified variables: this this.elementData this.elementData.getClass().getName() this.elementData[] this.elementData[].getClass().getName() this.elementCount this.capacityIncrement elem elem.getClass().getName() index size(this.elementData[]) this.elementData[this.elementCount..] this.elementData[0..this.elementCount-1] this.elementData[index+1..] this.elementData[0..index]
modifies this.elementData[this.elementCount], this.elementData[this.elementCount-1], this.elementData[this.elementCount+1..], this.elementData[0..this.elementCount], this.elementData[this.capacityIncrement], this.elementData[this.capacityIncrement-1], this.elementData[this.capacityIncrement..], this.elementData[this.capacityIncrement+1..], this.elementData[0..this.capacityIncrement], this.elementData[0..this.capacityIncrement-1]
\result == -1
(\forall int i; (0 <= i && i <= \result) ==> (this.elementData[i] != null))
this.capacityIncrement > \result
===========================================================================
javautil.Vector13.lastIndexOf(java.lang.Object, int):::EXIT
    Variables: this this.elementData this.elementData.getClass().getName() this.elementData[] this.elementData[].getClass().getName() this.elementCount this.capacityIncrement javautil.Vector13.serialVersionUID elem elem.getClass().getName() index return orig(this) orig(this.elementData) orig(this.elementData.getClass().getName()) orig(this.elementData[]) orig(this.elementData[].getClass().getName()) orig(this.elementCount) orig(this.capacityIncrement) orig(elem) orig(elem.getClass().getName()) orig(index) size(this.elementData[]) size(this.elementData[])-1 orig(size(this.elementData[])) orig(size(this.elementData[]))-1 this.elementData[this.elementCount] this.elementData[this.elementCount-1] this.elementData[this.elementCount..] this.elementData[this.elementCount+1..] this.elementData[0..this.elementCount] this.elementData[0..this.elementCount-1] this.elementData[this.capacityIncrement] this.elementData[this.capacityIncrement-1] this.elementData[this.capacityIncrement..] this.elementData[this.capacityIncrement+1..] this.elementData[0..this.capacityIncrement] this.elementData[0..this.capacityIncrement-1] this.elementData[index] this.elementData[index-1] this.elementData[index..] this.elementData[index+1..] this.elementData[0..index] this.elementData[0..index-1] this.elementData[return] this.elementData[return-1] this.elementData[return..] this.elementData[return+1..] this.elementData[0..return] this.elementData[0..return-1] this.elementData[orig(this.elementCount)] this.elementData[orig(this.elementCount)-1] this.elementData[orig(this.elementCount)..] this.elementData[orig(this.elementCount)+1..] this.elementData[0..orig(this.elementCount)] this.elementData[0..orig(this.elementCount)-1] this.elementData[orig(this.capacityIncrement)] this.elementData[orig(this.capacityIncrement)-1] this.elementData[orig(this.capacityIncrement)..] this.elementData[orig(this.capacityIncrement)+1..] this.elementData[0..orig(this.capacityIncrement)] this.elementData[0..orig(this.capacityIncrement)-1] this.elementData[orig(index)] this.elementData[orig(index)-1] this.elementData[orig(index)..] this.elementData[orig(index)+1..] this.elementData[0..orig(index)] this.elementData[0..orig(index)-1] orig(this.elementData[post(this.elementCount)]) orig(this.elementData[post(this.elementCount)-1]) orig(this.elementData[post(this.elementCount)..]) orig(this.elementData[post(this.elementCount)+1..]) orig(this.elementData[0..post(this.elementCount)]) orig(this.elementData[0..post(this.elementCount)-1]) orig(this.elementData[post(this.capacityIncrement)]) orig(this.elementData[post(this.capacityIncrement)-1]) orig(this.elementData[post(this.capacityIncrement)..]) orig(this.elementData[post(this.capacityIncrement)+1..]) orig(this.elementData[0..post(this.capacityIncrement)]) orig(this.elementData[0..post(this.capacityIncrement)-1]) orig(this.elementData[post(index)]) orig(this.elementData[post(index)-1]) orig(this.elementData[post(index)..]) orig(this.elementData[post(index)+1..]) orig(this.elementData[0..post(index)]) orig(this.elementData[0..post(index)-1]) orig(this.elementData[post(return)]) orig(this.elementData[post(return)-1]) orig(this.elementData[post(return)..]) orig(this.elementData[post(return)+1..]) orig(this.elementData[0..post(return)]) orig(this.elementData[0..post(return)-1]) orig(this.elementData[this.elementCount]) orig(this.elementData[this.elementCount-1]) orig(this.elementData[this.elementCount..]) orig(this.elementData[this.elementCount+1..]) orig(this.elementData[0..this.elementCount]) orig(this.elementData[0..this.elementCount-1]) orig(this.elementData[this.capacityIncrement]) orig(this.elementData[this.capacityIncrement-1]) orig(this.elementData[this.capacityIncrement..]) orig(this.elementData[this.capacityIncrement+1..]) orig(this.elementData[0..this.capacityIncrement]) orig(this.elementData[0..this.capacityIncrement-1]) orig(this.elementData[index]) orig(this.elementData[index-1]) orig(this.elementData[index..]) orig(this.elementData[index+1..]) orig(this.elementData[0..index]) orig(this.elementData[0..index-1])
      Modified variables: this.elementData[this.elementCount] this.elementData[this.elementCount-1] this.elementData[this.elementCount+1..] this.elementData[0..this.elementCount] this.elementData[this.capacityIncrement] this.elementData[this.capacityIncrement-1] this.elementData[this.capacityIncrement..] this.elementData[this.capacityIncrement+1..] this.elementData[0..this.capacityIncrement] this.elementData[0..this.capacityIncrement-1]
      Modified primitive arguments: this.elementData[index] this.elementData[index-1] this.elementData[index..] this.elementData[0..index-1]
      Unmodified variables: this this.elementData this.elementData.getClass().getName() this.elementData[] this.elementData[].getClass().getName() this.elementCount this.capacityIncrement elem elem.getClass().getName() index size(this.elementData[]) this.elementData[this.elementCount..] this.elementData[0..this.elementCount-1] this.elementData[index+1..] this.elementData[0..index]
modifies this.elementData[this.elementCount], this.elementData[this.elementCount-1], this.elementData[this.elementCount+1..], this.elementData[0..this.elementCount], this.elementData[this.capacityIncrement], this.elementData[this.capacityIncrement-1], this.elementData[this.capacityIncrement..], this.elementData[this.capacityIncrement+1..], this.elementData[0..this.capacityIncrement], this.elementData[0..this.capacityIncrement-1]
(\result == -1)  ==>  (\old(index) >= -1)
(\result == -1)  ==>  (this.capacityIncrement > \result)
(\result == -1)  ==>  ((\forall int i; (0 <= i && i <= \result) ==> (this.elementData[i] != null)))
(\result >= 0)  ==>  ((\old(index) == 0) ==> (\result == 0))
(\result >= 0)  ==>  ((this.elementData.length-1 == 0) ==> (\old(index) == 0))
(\result >= 0)  ==>  ((this.elementData.length-1 == 0) ==> (\result == 0))
(\result >= 0)  ==>  (!(\forall int i; (0 <= i && i <= this.elementData.length-1) ==> (\typeof(this.elementData[i]) != \old(\typeof(elem)))))
(\result >= 0)  ==>  (\old(index) >= 0)
(\result >= 0)  ==>  (\old(this.elementData[\new(\result)]) != null)
(\result >= 0)  ==>  (this.elementCount >= 1)
(\result >= 0)  ==>  (this.elementData[\result] != null)
\result >= -1
\typeof(this.elementData) != \old(\typeof(elem))
this.elementCount > \result
this.elementCount > \old(index)
(this.elementData.length == 0) ==> (this.elementCount == 0)
this.elementCount <= this.elementData.length
\result <= \old(index)
\result <= this.elementData.length-1
\old(index) <= this.elementData.length-1
===========================================================================
javautil.Vector13.removeAllElements():::ENTER
    Variables: this this.elementData this.elementData.getClass().getName() this.elementData[] this.elementData[].getClass().getName() this.elementCount this.capacityIncrement javautil.Vector13.serialVersionUID size(this.elementData[]) size(this.elementData[])-1 this.elementData[this.elementCount] this.elementData[this.elementCount-1] this.elementData[this.elementCount..] this.elementData[this.elementCount+1..] this.elementData[0..this.elementCount] this.elementData[0..this.elementCount-1] this.elementData[this.capacityIncrement] this.elementData[this.capacityIncrement-1] this.elementData[this.capacityIncrement..] this.elementData[this.capacityIncrement+1..] this.elementData[0..this.capacityIncrement] this.elementData[0..this.capacityIncrement-1]
(this.elementData.length == 0) ==> (this.elementCount == 0)
this.elementCount <= this.elementData.length
===========================================================================
javautil.Vector13.removeAllElements():::EXIT
    Variables: this this.elementData this.elementData.getClass().getName() this.elementData[] this.elementData[].getClass().getName() this.elementCount this.capacityIncrement javautil.Vector13.serialVersionUID orig(this) orig(this.elementData) orig(this.elementData.getClass().getName()) orig(this.elementData[]) orig(this.elementData[].getClass().getName()) orig(this.elementCount) orig(this.capacityIncrement) size(this.elementData[]) size(this.elementData[])-1 orig(size(this.elementData[])) orig(size(this.elementData[]))-1 this.elementData[this.elementCount] this.elementData[this.elementCount-1] this.elementData[this.elementCount..] this.elementData[this.elementCount+1..] this.elementData[0..this.elementCount] this.elementData[0..this.elementCount-1] this.elementData[this.capacityIncrement] this.elementData[this.capacityIncrement-1] this.elementData[this.capacityIncrement..] this.elementData[this.capacityIncrement+1..] this.elementData[0..this.capacityIncrement] this.elementData[0..this.capacityIncrement-1] this.elementData[orig(this.elementCount)] this.elementData[orig(this.elementCount)-1] this.elementData[orig(this.elementCount)..] this.elementData[orig(this.elementCount)+1..] this.elementData[0..orig(this.elementCount)] this.elementData[0..orig(this.elementCount)-1] this.elementData[orig(this.capacityIncrement)] this.elementData[orig(this.capacityIncrement)-1] this.elementData[orig(this.capacityIncrement)..] this.elementData[orig(this.capacityIncrement)+1..] this.elementData[0..orig(this.capacityIncrement)] this.elementData[0..orig(this.capacityIncrement)-1] orig(this.elementData[post(this.elementCount)]) orig(this.elementData[post(this.elementCount)-1]) orig(this.elementData[post(this.elementCount)..]) orig(this.elementData[post(this.elementCount)+1..]) orig(this.elementData[0..post(this.elementCount)]) orig(this.elementData[0..post(this.elementCount)-1]) orig(this.elementData[post(this.capacityIncrement)]) orig(this.elementData[post(this.capacityIncrement)-1]) orig(this.elementData[post(this.capacityIncrement)..]) orig(this.elementData[post(this.capacityIncrement)+1..]) orig(this.elementData[0..post(this.capacityIncrement)]) orig(this.elementData[0..post(this.capacityIncrement)-1]) orig(this.elementData[this.elementCount]) orig(this.elementData[this.elementCount-1]) orig(this.elementData[this.elementCount..]) orig(this.elementData[this.elementCount+1..]) orig(this.elementData[0..this.elementCount]) orig(this.elementData[0..this.elementCount-1]) orig(this.elementData[this.capacityIncrement]) orig(this.elementData[this.capacityIncrement-1]) orig(this.elementData[this.capacityIncrement..]) orig(this.elementData[this.capacityIncrement+1..]) orig(this.elementData[0..this.capacityIncrement]) orig(this.elementData[0..this.capacityIncrement-1])
      Modified variables: this.elementData[] this.elementData[].getClass().getName() this.elementCount this.elementData[this.elementCount] this.elementData[this.elementCount-1] this.elementData[this.elementCount+1..] this.elementData[0..this.elementCount] this.elementData[0..this.elementCount-1] this.elementData[this.capacityIncrement] this.elementData[this.capacityIncrement-1] this.elementData[this.capacityIncrement..] this.elementData[this.capacityIncrement+1..] this.elementData[0..this.capacityIncrement] this.elementData[0..this.capacityIncrement-1]
      Unmodified variables: this this.elementData this.elementData.getClass().getName() this.capacityIncrement size(this.elementData[]) this.elementData[this.elementCount..]
modifies this.elementData[*], this.elementCount, this.elementData[this.elementCount], this.elementData[this.elementCount-1], this.elementData[this.elementCount+1..], this.elementData[0..this.elementCount], this.elementData[0..this.elementCount-1], this.elementData[this.capacityIncrement], this.elementData[this.capacityIncrement-1], this.elementData[this.capacityIncrement..], this.elementData[this.capacityIncrement+1..], this.elementData[0..this.capacityIncrement], this.elementData[0..this.capacityIncrement-1]
warning: method daikon.inv.binary.twoSequence.SeqSeqIntEqual.format(OutputFormat:ESC/Java) needs to be implemented: this.elementData[orig(this.elementCount)..] == orig(this.elementData[this.elementCount..])
(\forall int i; (0 <= i && i <= this.elementData.length-1) ==> (this.elementData[i] == null))
(\forall int i; (0 <= i && i <= this.elementData.length-1) ==> (\typeof(this.elementData[i]) == \typeof(null)))
this.elementCount == 0
(\forall int i; (0 <= i && i <= this.elementCount-1) ==> (this.elementData[i] != null))
this.elementCount <= this.capacityIncrement
this.elementCount <= \old(this.elementCount)
this.elementCount <= this.elementData.length
(this.elementData.length == 0) ==> (\old(this.elementCount) == 0)
\old(this.elementCount) <= this.elementData.length
===========================================================================
javautil.Vector13.removeElement(java.lang.Object):::ENTER
    Variables: this this.elementData this.elementData.getClass().getName() this.elementData[] this.elementData[].getClass().getName() this.elementCount this.capacityIncrement javautil.Vector13.serialVersionUID obj obj.getClass().getName() size(this.elementData[]) size(this.elementData[])-1 this.elementData[this.elementCount] this.elementData[this.elementCount-1] this.elementData[this.elementCount..] this.elementData[this.elementCount+1..] this.elementData[0..this.elementCount] this.elementData[0..this.elementCount-1] this.elementData[this.capacityIncrement] this.elementData[this.capacityIncrement-1] this.elementData[this.capacityIncrement..] this.elementData[this.capacityIncrement+1..] this.elementData[0..this.capacityIncrement] this.elementData[0..this.capacityIncrement-1]
obj != null
warning: method daikon.inv.unary.string.PrintableString.format(OutputFormat:ESC/Java) needs to be implemented: obj.getClass().getName() is printable
\typeof(this.elementData) != \typeof(obj)
(this.elementData.length == 0) ==> (this.elementCount == 0)
this.elementCount <= this.elementData.length
===========================================================================
javautil.Vector13.removeElement(java.lang.Object):::EXIT480
    Variables: this this.elementData this.elementData.getClass().getName() this.elementData[] this.elementData[].getClass().getName() this.elementCount this.capacityIncrement javautil.Vector13.serialVersionUID obj obj.getClass().getName() return orig(this) orig(this.elementData) orig(this.elementData.getClass().getName()) orig(this.elementData[]) orig(this.elementData[].getClass().getName()) orig(this.elementCount) orig(this.capacityIncrement) orig(obj) orig(obj.getClass().getName()) size(this.elementData[]) size(this.elementData[])-1 orig(size(this.elementData[])) orig(size(this.elementData[]))-1 this.elementData[this.elementCount] this.elementData[this.elementCount-1] this.elementData[this.elementCount..] this.elementData[this.elementCount+1..] this.elementData[0..this.elementCount] this.elementData[0..this.elementCount-1] this.elementData[this.capacityIncrement] this.elementData[this.capacityIncrement-1] this.elementData[this.capacityIncrement..] this.elementData[this.capacityIncrement+1..] this.elementData[0..this.capacityIncrement] this.elementData[0..this.capacityIncrement-1] this.elementData[orig(this.elementCount)] this.elementData[orig(this.elementCount)-1] this.elementData[orig(this.elementCount)..] this.elementData[orig(this.elementCount)+1..] this.elementData[0..orig(this.elementCount)] this.elementData[0..orig(this.elementCount)-1] this.elementData[orig(this.capacityIncrement)] this.elementData[orig(this.capacityIncrement)-1] this.elementData[orig(this.capacityIncrement)..] this.elementData[orig(this.capacityIncrement)+1..] this.elementData[0..orig(this.capacityIncrement)] this.elementData[0..orig(this.capacityIncrement)-1] orig(this.elementData[post(this.elementCount)]) orig(this.elementData[post(this.elementCount)-1]) orig(this.elementData[post(this.elementCount)..]) orig(this.elementData[post(this.elementCount)+1..]) orig(this.elementData[0..post(this.elementCount)]) orig(this.elementData[0..post(this.elementCount)-1]) orig(this.elementData[post(this.capacityIncrement)]) orig(this.elementData[post(this.capacityIncrement)-1]) orig(this.elementData[post(this.capacityIncrement)..]) orig(this.elementData[post(this.capacityIncrement)+1..]) orig(this.elementData[0..post(this.capacityIncrement)]) orig(this.elementData[0..post(this.capacityIncrement)-1]) orig(this.elementData[this.elementCount]) orig(this.elementData[this.elementCount-1]) orig(this.elementData[this.elementCount..]) orig(this.elementData[this.elementCount+1..]) orig(this.elementData[0..this.elementCount]) orig(this.elementData[0..this.elementCount-1]) orig(this.elementData[this.capacityIncrement]) orig(this.elementData[this.capacityIncrement-1]) orig(this.elementData[this.capacityIncrement..]) orig(this.elementData[this.capacityIncrement+1..]) orig(this.elementData[0..this.capacityIncrement]) orig(this.elementData[0..this.capacityIncrement-1])
      Modified variables: this.elementData[] this.elementData[].getClass().getName() this.elementCount this.elementData[this.elementCount] this.elementData[this.elementCount-1] this.elementData[this.elementCount+1..] this.elementData[0..this.elementCount] this.elementData[0..this.elementCount-1] this.elementData[this.capacityIncrement] this.elementData[this.capacityIncrement-1] this.elementData[this.capacityIncrement..] this.elementData[this.capacityIncrement+1..] this.elementData[0..this.capacityIncrement] this.elementData[0..this.capacityIncrement-1]
      Unmodified variables: this this.elementData this.elementData.getClass().getName() this.capacityIncrement obj obj.getClass().getName() size(this.elementData[]) this.elementData[this.elementCount..]
modifies this.elementData[*], this.elementCount, this.elementData[this.elementCount], this.elementData[this.elementCount-1], this.elementData[this.elementCount+1..], this.elementData[0..this.elementCount], this.elementData[0..this.elementCount-1], this.elementData[this.capacityIncrement], this.elementData[this.capacityIncrement-1], this.elementData[this.capacityIncrement..], this.elementData[this.capacityIncrement+1..], this.elementData[0..this.capacityIncrement], this.elementData[0..this.capacityIncrement-1]
this.elementData[this.elementCount] == this.elementData[\old(this.elementCount)-1]
warning: method daikon.inv.binary.twoSequence.SeqSeqIntEqual.format(OutputFormat:ESC/Java) needs to be implemented: this.elementData[this.elementCount+1..] == orig(this.elementData[post(this.elementCount)+1..])
warning: method daikon.inv.binary.twoSequence.SeqSeqIntEqual.format(OutputFormat:ESC/Java) needs to be implemented: this.elementData[this.elementCount+1..] == orig(this.elementData[this.elementCount..])
\old(this.elementData[\new(this.elementCount)]) == \old(this.elementData[this.elementCount-1])
\result == true
\old(this.elementCount) >= 1
this.elementCount - \old(this.elementCount) + 1 == 0
(this.elementData.length-1 == 0) ==> (this.elementCount == 0)
this.elementCount <= this.elementData.length-1
!(\forall int i; (0 <= i && i <= \old(this.elementData.length-1)) ==> (\old(\typeof(this.elementData[i])) != \old(\typeof(obj))))
(\forall int i; (this.elementCount <= i && i <= this.elementData.length-1) ==> (this.elementData[i] == this.elementData[this.elementCount]))
warning: method daikon.inv.binary.twoSequence.SubSet.format_esc() needs to be implemented: this.elementData[0..this.elementCount-1] is a subset of orig(this.elementData[0..post(this.elementCount)])
===========================================================================
javautil.Vector13.removeElement(java.lang.Object):::EXIT482
    Variables: this this.elementData this.elementData.getClass().getName() this.elementData[] this.elementData[].getClass().getName() this.elementCount this.capacityIncrement javautil.Vector13.serialVersionUID obj obj.getClass().getName() return orig(this) orig(this.elementData) orig(this.elementData.getClass().getName()) orig(this.elementData[]) orig(this.elementData[].getClass().getName()) orig(this.elementCount) orig(this.capacityIncrement) orig(obj) orig(obj.getClass().getName()) size(this.elementData[]) size(this.elementData[])-1 orig(size(this.elementData[])) orig(size(this.elementData[]))-1 this.elementData[this.elementCount] this.elementData[this.elementCount-1] this.elementData[this.elementCount..] this.elementData[this.elementCount+1..] this.elementData[0..this.elementCount] this.elementData[0..this.elementCount-1] this.elementData[this.capacityIncrement] this.elementData[this.capacityIncrement-1] this.elementData[this.capacityIncrement..] this.elementData[this.capacityIncrement+1..] this.elementData[0..this.capacityIncrement] this.elementData[0..this.capacityIncrement-1] this.elementData[orig(this.elementCount)] this.elementData[orig(this.elementCount)-1] this.elementData[orig(this.elementCount)..] this.elementData[orig(this.elementCount)+1..] this.elementData[0..orig(this.elementCount)] this.elementData[0..orig(this.elementCount)-1] this.elementData[orig(this.capacityIncrement)] this.elementData[orig(this.capacityIncrement)-1] this.elementData[orig(this.capacityIncrement)..] this.elementData[orig(this.capacityIncrement)+1..] this.elementData[0..orig(this.capacityIncrement)] this.elementData[0..orig(this.capacityIncrement)-1] orig(this.elementData[post(this.elementCount)]) orig(this.elementData[post(this.elementCount)-1]) orig(this.elementData[post(this.elementCount)..]) orig(this.elementData[post(this.elementCount)+1..]) orig(this.elementData[0..post(this.elementCount)]) orig(this.elementData[0..post(this.elementCount)-1]) orig(this.elementData[post(this.capacityIncrement)]) orig(this.elementData[post(this.capacityIncrement)-1]) orig(this.elementData[post(this.capacityIncrement)..]) orig(this.elementData[post(this.capacityIncrement)+1..]) orig(this.elementData[0..post(this.capacityIncrement)]) orig(this.elementData[0..post(this.capacityIncrement)-1]) orig(this.elementData[this.elementCount]) orig(this.elementData[this.elementCount-1]) orig(this.elementData[this.elementCount..]) orig(this.elementData[this.elementCount+1..]) orig(this.elementData[0..this.elementCount]) orig(this.elementData[0..this.elementCount-1]) orig(this.elementData[this.capacityIncrement]) orig(this.elementData[this.capacityIncrement-1]) orig(this.elementData[this.capacityIncrement..]) orig(this.elementData[this.capacityIncrement+1..]) orig(this.elementData[0..this.capacityIncrement]) orig(this.elementData[0..this.capacityIncrement-1])
      Modified variables: this.elementData[this.elementCount] this.elementData[this.elementCount-1] this.elementData[this.elementCount+1..] this.elementData[0..this.elementCount] this.elementData[this.capacityIncrement] this.elementData[this.capacityIncrement-1] this.elementData[this.capacityIncrement..] this.elementData[this.capacityIncrement+1..] this.elementData[0..this.capacityIncrement] this.elementData[0..this.capacityIncrement-1]
      Unmodified variables: this this.elementData this.elementData.getClass().getName() this.elementData[] this.elementData[].getClass().getName() this.elementCount this.capacityIncrement obj obj.getClass().getName() size(this.elementData[]) this.elementData[this.elementCount..] this.elementData[0..this.elementCount-1]
modifies this.elementData[this.elementCount], this.elementData[this.elementCount-1], this.elementData[this.elementCount+1..], this.elementData[0..this.elementCount], this.elementData[this.capacityIncrement], this.elementData[this.capacityIncrement-1], this.elementData[this.capacityIncrement..], this.elementData[this.capacityIncrement+1..], this.elementData[0..this.capacityIncrement], this.elementData[0..this.capacityIncrement-1]
\result == false
===========================================================================
javautil.Vector13.removeElement(java.lang.Object):::EXIT
    Variables: this this.elementData this.elementData.getClass().getName() this.elementData[] this.elementData[].getClass().getName() this.elementCount this.capacityIncrement javautil.Vector13.serialVersionUID obj obj.getClass().getName() return orig(this) orig(this.elementData) orig(this.elementData.getClass().getName()) orig(this.elementData[]) orig(this.elementData[].getClass().getName()) orig(this.elementCount) orig(this.capacityIncrement) orig(obj) orig(obj.getClass().getName()) size(this.elementData[]) size(this.elementData[])-1 orig(size(this.elementData[])) orig(size(this.elementData[]))-1 this.elementData[this.elementCount] this.elementData[this.elementCount-1] this.elementData[this.elementCount..] this.elementData[this.elementCount+1..] this.elementData[0..this.elementCount] this.elementData[0..this.elementCount-1] this.elementData[this.capacityIncrement] this.elementData[this.capacityIncrement-1] this.elementData[this.capacityIncrement..] this.elementData[this.capacityIncrement+1..] this.elementData[0..this.capacityIncrement] this.elementData[0..this.capacityIncrement-1] this.elementData[orig(this.elementCount)] this.elementData[orig(this.elementCount)-1] this.elementData[orig(this.elementCount)..] this.elementData[orig(this.elementCount)+1..] this.elementData[0..orig(this.elementCount)] this.elementData[0..orig(this.elementCount)-1] this.elementData[orig(this.capacityIncrement)] this.elementData[orig(this.capacityIncrement)-1] this.elementData[orig(this.capacityIncrement)..] this.elementData[orig(this.capacityIncrement)+1..] this.elementData[0..orig(this.capacityIncrement)] this.elementData[0..orig(this.capacityIncrement)-1] orig(this.elementData[post(this.elementCount)]) orig(this.elementData[post(this.elementCount)-1]) orig(this.elementData[post(this.elementCount)..]) orig(this.elementData[post(this.elementCount)+1..]) orig(this.elementData[0..post(this.elementCount)]) orig(this.elementData[0..post(this.elementCount)-1]) orig(this.elementData[post(this.capacityIncrement)]) orig(this.elementData[post(this.capacityIncrement)-1]) orig(this.elementData[post(this.capacityIncrement)..]) orig(this.elementData[post(this.capacityIncrement)+1..]) orig(this.elementData[0..post(this.capacityIncrement)]) orig(this.elementData[0..post(this.capacityIncrement)-1]) orig(this.elementData[this.elementCount]) orig(this.elementData[this.elementCount-1]) orig(this.elementData[this.elementCount..]) orig(this.elementData[this.elementCount+1..]) orig(this.elementData[0..this.elementCount]) orig(this.elementData[0..this.elementCount-1]) orig(this.elementData[this.capacityIncrement]) orig(this.elementData[this.capacityIncrement-1]) orig(this.elementData[this.capacityIncrement..]) orig(this.elementData[this.capacityIncrement+1..]) orig(this.elementData[0..this.capacityIncrement]) orig(this.elementData[0..this.capacityIncrement-1])
      Modified variables: this.elementData[] this.elementData[].getClass().getName() this.elementCount this.elementData[this.elementCount] this.elementData[this.elementCount-1] this.elementData[this.elementCount..] this.elementData[this.elementCount+1..] this.elementData[0..this.elementCount] this.elementData[0..this.elementCount-1] this.elementData[this.capacityIncrement] this.elementData[this.capacityIncrement-1] this.elementData[this.capacityIncrement..] this.elementData[this.capacityIncrement+1..] this.elementData[0..this.capacityIncrement] this.elementData[0..this.capacityIncrement-1]
      Unmodified variables: this this.elementData this.elementData.getClass().getName() this.capacityIncrement obj obj.getClass().getName() size(this.elementData[])
modifies this.elementData[*], this.elementCount, this.elementData[this.elementCount], this.elementData[this.elementCount-1], this.elementData[this.elementCount..], this.elementData[this.elementCount+1..], this.elementData[0..this.elementCount], this.elementData[0..this.elementCount-1], this.elementData[this.capacityIncrement], this.elementData[this.capacityIncrement-1], this.elementData[this.capacityIncrement..], this.elementData[this.capacityIncrement+1..], this.elementData[0..this.capacityIncrement], this.elementData[0..this.capacityIncrement-1]
warning: method daikon.inv.binary.twoSequence.SeqSeqIntEqual.format(OutputFormat:ESC/Java) needs to be implemented: this.elementData[orig(this.elementCount)..] == orig(this.elementData[this.elementCount..])
(\result == false)  ==  (this.elementCount == \old(this.elementCount))
(\result == false)  ==>  ((\forall int i; (this.elementCount <= i && i <= \old(this.elementData.length-1)) ==> (\old(this.elementData[i]) == null)))
(\result == false)  ==>  (warning: method daikon.inv.binary.twoSequence.SeqSeqIntEqual.format(OutputFormat:ESC/Java) needs to be implemented: this.elementData[] == orig(this.elementData[]))
(\result == true)  ==  (this.elementCount - \old(this.elementCount) + 1 == 0)
(\result == true)  ==>  ((this.elementData.length-1 == 0) ==> (this.elementCount == 0))
(\result == true)  ==>  (!(\forall int i; (0 <= i && i <= \old(this.elementData.length-1)) ==> (\old(\typeof(this.elementData[i])) != \old(\typeof(obj)))))
(\result == true)  ==>  (\old(this.elementCount) >= 1)
(\result == true)  ==>  (\old(this.elementData[\new(this.elementCount)]) == \old(this.elementData[this.elementCount-1]))
(\result == true)  ==>  (this.elementCount <= this.elementData.length-1)
(\result == true)  ==>  (warning: method daikon.inv.binary.twoSequence.SubSet.format_esc() needs to be implemented: this.elementData[0..this.elementCount-1] is a subset of orig(this.elementData[0..post(this.elementCount)]))
(\result == true)  ==>  (warning: method daikon.inv.binary.twoSequence.SeqSeqIntEqual.format(OutputFormat:ESC/Java) needs to be implemented: this.elementData[this.elementCount+1..] == orig(this.elementData[post(this.elementCount)+1..]))
(\result == true)  ==>  ((\forall int i; (this.elementCount <= i && i <= this.elementData.length-1) ==> (this.elementData[i] == this.elementData[\old(this.elementCount)-1])))
(\result == true)  ==>  ((\forall int i; (this.elementCount <= i && i <= this.elementData.length-1) ==> (this.elementData[i] == this.elementData[this.elementCount])))
(\result == true)  ==>  (this.elementData[this.elementCount] == this.elementData[\old(this.elementCount)-1])
\typeof(this.elementData) != \old(\typeof(obj))
(\old(this.elementCount) == 0) ==> (this.elementCount == 0)
this.elementCount <= \old(this.elementCount)
(this.elementData.length == 0) ==> (this.elementCount == 0)
this.elementCount <= this.elementData.length
(this.elementData.length == 0) ==> (\old(this.elementCount) == 0)
\old(this.elementCount) <= this.elementData.length
warning: method daikon.inv.binary.twoSequence.SubSet.format_esc() needs to be implemented: this.elementData[0..this.elementCount-1] is a subset of orig(this.elementData[0..this.elementCount-1])
===========================================================================
javautil.Vector13.removeElementAt(int):::ENTER
    Variables: this this.elementData this.elementData.getClass().getName() this.elementData[] this.elementData[].getClass().getName() this.elementCount this.capacityIncrement javautil.Vector13.serialVersionUID index size(this.elementData[]) size(this.elementData[])-1 this.elementData[this.elementCount] this.elementData[this.elementCount-1] this.elementData[this.elementCount..] this.elementData[this.elementCount+1..] this.elementData[0..this.elementCount] this.elementData[0..this.elementCount-1] this.elementData[this.capacityIncrement] this.elementData[this.capacityIncrement-1] this.elementData[this.capacityIncrement..] this.elementData[this.capacityIncrement+1..] this.elementData[0..this.capacityIncrement] this.elementData[0..this.capacityIncrement-1] this.elementData[index] this.elementData[index-1] this.elementData[index..] this.elementData[index+1..] this.elementData[0..index] this.elementData[0..index-1]
this.elementCount >= 1
index >= 0
this.elementCount > index
this.elementCount <= this.elementData.length
(this.elementData.length-1 == 0) ==> (index == 0)
index <= this.elementData.length-1
===========================================================================
javautil.Vector13.removeElementAt(int):::EXIT
    Variables: this this.elementData this.elementData.getClass().getName() this.elementData[] this.elementData[].getClass().getName() this.elementCount this.capacityIncrement javautil.Vector13.serialVersionUID index orig(this) orig(this.elementData) orig(this.elementData.getClass().getName()) orig(this.elementData[]) orig(this.elementData[].getClass().getName()) orig(this.elementCount) orig(this.capacityIncrement) orig(index) size(this.elementData[]) size(this.elementData[])-1 orig(size(this.elementData[])) orig(size(this.elementData[]))-1 this.elementData[this.elementCount] this.elementData[this.elementCount-1] this.elementData[this.elementCount..] this.elementData[this.elementCount+1..] this.elementData[0..this.elementCount] this.elementData[0..this.elementCount-1] this.elementData[this.capacityIncrement] this.elementData[this.capacityIncrement-1] this.elementData[this.capacityIncrement..] this.elementData[this.capacityIncrement+1..] this.elementData[0..this.capacityIncrement] this.elementData[0..this.capacityIncrement-1] this.elementData[index] this.elementData[index-1] this.elementData[index..] this.elementData[index+1..] this.elementData[0..index] this.elementData[0..index-1] this.elementData[orig(this.elementCount)] this.elementData[orig(this.elementCount)-1] this.elementData[orig(this.elementCount)..] this.elementData[orig(this.elementCount)+1..] this.elementData[0..orig(this.elementCount)] this.elementData[0..orig(this.elementCount)-1] this.elementData[orig(this.capacityIncrement)] this.elementData[orig(this.capacityIncrement)-1] this.elementData[orig(this.capacityIncrement)..] this.elementData[orig(this.capacityIncrement)+1..] this.elementData[0..orig(this.capacityIncrement)] this.elementData[0..orig(this.capacityIncrement)-1] this.elementData[orig(index)] this.elementData[orig(index)-1] this.elementData[orig(index)..] this.elementData[orig(index)+1..] this.elementData[0..orig(index)] this.elementData[0..orig(index)-1] orig(this.elementData[post(this.elementCount)]) orig(this.elementData[post(this.elementCount)-1]) orig(this.elementData[post(this.elementCount)..]) orig(this.elementData[post(this.elementCount)+1..]) orig(this.elementData[0..post(this.elementCount)]) orig(this.elementData[0..post(this.elementCount)-1]) orig(this.elementData[post(this.capacityIncrement)]) orig(this.elementData[post(this.capacityIncrement)-1]) orig(this.elementData[post(this.capacityIncrement)..]) orig(this.elementData[post(this.capacityIncrement)+1..]) orig(this.elementData[0..post(this.capacityIncrement)]) orig(this.elementData[0..post(this.capacityIncrement)-1]) orig(this.elementData[post(index)]) orig(this.elementData[post(index)-1]) orig(this.elementData[post(index)..]) orig(this.elementData[post(index)+1..]) orig(this.elementData[0..post(index)]) orig(this.elementData[0..post(index)-1]) orig(this.elementData[this.elementCount]) orig(this.elementData[this.elementCount-1]) orig(this.elementData[this.elementCount..]) orig(this.elementData[this.elementCount+1..]) orig(this.elementData[0..this.elementCount]) orig(this.elementData[0..this.elementCount-1]) orig(this.elementData[this.capacityIncrement]) orig(this.elementData[this.capacityIncrement-1]) orig(this.elementData[this.capacityIncrement..]) orig(this.elementData[this.capacityIncrement+1..]) orig(this.elementData[0..this.capacityIncrement]) orig(this.elementData[0..this.capacityIncrement-1]) orig(this.elementData[index]) orig(this.elementData[index-1]) orig(this.elementData[index..]) orig(this.elementData[index+1..]) orig(this.elementData[0..index]) orig(this.elementData[0..index-1])
      Modified variables: this.elementData[] this.elementData[].getClass().getName() this.elementCount this.elementData[this.elementCount] this.elementData[this.elementCount-1] this.elementData[this.elementCount+1..] this.elementData[0..this.elementCount] this.elementData[0..this.elementCount-1] this.elementData[this.capacityIncrement] this.elementData[this.capacityIncrement-1] this.elementData[this.capacityIncrement..] this.elementData[this.capacityIncrement+1..] this.elementData[0..this.capacityIncrement] this.elementData[0..this.capacityIncrement-1]
      Modified primitive arguments: this.elementData[index] this.elementData[index-1] this.elementData[index..] this.elementData[index+1..] this.elementData[0..index]
      Unmodified variables: this this.elementData this.elementData.getClass().getName() this.capacityIncrement index size(this.elementData[]) this.elementData[this.elementCount..] this.elementData[0..index-1]
modifies this.elementData[*], this.elementCount, this.elementData[this.elementCount], this.elementData[this.elementCount-1], this.elementData[this.elementCount+1..], this.elementData[0..this.elementCount], this.elementData[0..this.elementCount-1], this.elementData[this.capacityIncrement], this.elementData[this.capacityIncrement-1], this.elementData[this.capacityIncrement..], this.elementData[this.capacityIncrement+1..], this.elementData[0..this.capacityIncrement], this.elementData[0..this.capacityIncrement-1]
this.elementData[this.elementCount] == this.elementData[\old(this.elementCount)-1]
warning: method daikon.inv.binary.twoSequence.SeqSeqIntEqual.format(OutputFormat:ESC/Java) needs to be implemented: this.elementData[this.elementCount+1..] == orig(this.elementData[post(this.elementCount)+1..])
warning: method daikon.inv.binary.twoSequence.SeqSeqIntEqual.format(OutputFormat:ESC/Java) needs to be implemented: this.elementData[this.elementCount+1..] == orig(this.elementData[this.elementCount..])
warning: method daikon.inv.binary.twoSequence.SeqSeqIntEqual.format(OutputFormat:ESC/Java) needs to be implemented: this.elementData[0..orig(index)-1] == orig(this.elementData[0..post(index)-1])
warning: method daikon.inv.binary.twoSequence.SeqSeqIntEqual.format(OutputFormat:ESC/Java) needs to be implemented: this.elementData[0..orig(index)-1] == orig(this.elementData[0..index-1])
\old(this.elementData[\new(this.elementCount)]) == \old(this.elementData[this.elementCount-1])
this.elementCount - \old(this.elementCount) + 1 == 0
(this.elementCount == 0) ==> (\old(index) == 0)
this.elementCount >= \old(index)
(this.elementData.length-1 == 0) ==> (this.elementCount == 0)
this.elementCount <= this.elementData.length-1
\old(this.elementCount) <= this.elementData.length
(this.elementData.length-1 == 0) ==> (\old(index) == 0)
\old(index) <= this.elementData.length-1
(\forall int i; (this.elementCount <= i && i <= this.elementData.length-1) ==> (this.elementData[i] == this.elementData[this.elementCount]))
warning: method daikon.inv.binary.twoSequence.SubSet.format_esc() needs to be implemented: this.elementData[0..this.elementCount-1] is a subset of orig(this.elementData[0..post(this.elementCount)])
warning: method daikon.inv.binary.twoSequence.SuperSequence.format(OutputFormat:ESC/Java) needs to be implemented: orig(this.elementData[index+1..]) is a subsequence of this.elementData[orig(index)..]
===========================================================================
javautil.Vector13.setElementAt(java.lang.Object, int):::ENTER
    Variables: this this.elementData this.elementData.getClass().getName() this.elementData[] this.elementData[].getClass().getName() this.elementCount this.capacityIncrement javautil.Vector13.serialVersionUID obj obj.getClass().getName() index size(this.elementData[]) size(this.elementData[])-1 this.elementData[this.elementCount] this.elementData[this.elementCount-1] this.elementData[this.elementCount..] this.elementData[this.elementCount+1..] this.elementData[0..this.elementCount] this.elementData[0..this.elementCount-1] this.elementData[this.capacityIncrement] this.elementData[this.capacityIncrement-1] this.elementData[this.capacityIncrement..] this.elementData[this.capacityIncrement+1..] this.elementData[0..this.capacityIncrement] this.elementData[0..this.capacityIncrement-1] this.elementData[index] this.elementData[index-1] this.elementData[index..] this.elementData[index+1..] this.elementData[0..index] this.elementData[0..index-1]
(obj != null)  ==>  (warning: method daikon.inv.unary.string.PrintableString.format(OutputFormat:ESC/Java) needs to be implemented: obj.getClass().getName() is printable)
index >= 0
(obj != null)  ==>  (\typeof(this.elementData) != \typeof(obj))
this.elementCount > index
this.elementCount <= this.elementData.length
(this.elementData.length-1 == 0) ==> (index == 0)
index <= this.elementData.length-1
===========================================================================
javautil.Vector13.setElementAt(java.lang.Object, int):::EXIT
    Variables: this this.elementData this.elementData.getClass().getName() this.elementData[] this.elementData[].getClass().getName() this.elementCount this.capacityIncrement javautil.Vector13.serialVersionUID obj obj.getClass().getName() index orig(this) orig(this.elementData) orig(this.elementData.getClass().getName()) orig(this.elementData[]) orig(this.elementData[].getClass().getName()) orig(this.elementCount) orig(this.capacityIncrement) orig(obj) orig(obj.getClass().getName()) orig(index) size(this.elementData[]) size(this.elementData[])-1 orig(size(this.elementData[])) orig(size(this.elementData[]))-1 this.elementData[this.elementCount] this.elementData[this.elementCount-1] this.elementData[this.elementCount..] this.elementData[this.elementCount+1..] this.elementData[0..this.elementCount] this.elementData[0..this.elementCount-1] this.elementData[this.capacityIncrement] this.elementData[this.capacityIncrement-1] this.elementData[this.capacityIncrement..] this.elementData[this.capacityIncrement+1..] this.elementData[0..this.capacityIncrement] this.elementData[0..this.capacityIncrement-1] this.elementData[index] this.elementData[index-1] this.elementData[index..] this.elementData[index+1..] this.elementData[0..index] this.elementData[0..index-1] this.elementData[orig(this.elementCount)] this.elementData[orig(this.elementCount)-1] this.elementData[orig(this.elementCount)..] this.elementData[orig(this.elementCount)+1..] this.elementData[0..orig(this.elementCount)] this.elementData[0..orig(this.elementCount)-1] this.elementData[orig(this.capacityIncrement)] this.elementData[orig(this.capacityIncrement)-1] this.elementData[orig(this.capacityIncrement)..] this.elementData[orig(this.capacityIncrement)+1..] this.elementData[0..orig(this.capacityIncrement)] this.elementData[0..orig(this.capacityIncrement)-1] this.elementData[orig(index)] this.elementData[orig(index)-1] this.elementData[orig(index)..] this.elementData[orig(index)+1..] this.elementData[0..orig(index)] this.elementData[0..orig(index)-1] orig(this.elementData[post(this.elementCount)]) orig(this.elementData[post(this.elementCount)-1]) orig(this.elementData[post(this.elementCount)..]) orig(this.elementData[post(this.elementCount)+1..]) orig(this.elementData[0..post(this.elementCount)]) orig(this.elementData[0..post(this.elementCount)-1]) orig(this.elementData[post(this.capacityIncrement)]) orig(this.elementData[post(this.capacityIncrement)-1]) orig(this.elementData[post(this.capacityIncrement)..]) orig(this.elementData[post(this.capacityIncrement)+1..]) orig(this.elementData[0..post(this.capacityIncrement)]) orig(this.elementData[0..post(this.capacityIncrement)-1]) orig(this.elementData[post(index)]) orig(this.elementData[post(index)-1]) orig(this.elementData[post(index)..]) orig(this.elementData[post(index)+1..]) orig(this.elementData[0..post(index)]) orig(this.elementData[0..post(index)-1]) orig(this.elementData[this.elementCount]) orig(this.elementData[this.elementCount-1]) orig(this.elementData[this.elementCount..]) orig(this.elementData[this.elementCount+1..]) orig(this.elementData[0..this.elementCount]) orig(this.elementData[0..this.elementCount-1]) orig(this.elementData[this.capacityIncrement]) orig(this.elementData[this.capacityIncrement-1]) orig(this.elementData[this.capacityIncrement..]) orig(this.elementData[this.capacityIncrement+1..]) orig(this.elementData[0..this.capacityIncrement]) orig(this.elementData[0..this.capacityIncrement-1]) orig(this.elementData[index]) orig(this.elementData[index-1]) orig(this.elementData[index..]) orig(this.elementData[index+1..]) orig(this.elementData[0..index]) orig(this.elementData[0..index-1])
      Modified variables: this.elementData[] this.elementData[].getClass().getName() this.elementData[this.elementCount] this.elementData[this.elementCount-1] this.elementData[this.elementCount+1..] this.elementData[0..this.elementCount] this.elementData[0..this.elementCount-1] this.elementData[this.capacityIncrement] this.elementData[this.capacityIncrement-1] this.elementData[this.capacityIncrement..] this.elementData[this.capacityIncrement+1..] this.elementData[0..this.capacityIncrement] this.elementData[0..this.capacityIncrement-1]
      Modified primitive arguments: this.elementData[index] this.elementData[index-1] this.elementData[index..] this.elementData[0..index]
      Unmodified variables: this this.elementData this.elementData.getClass().getName() this.elementCount this.capacityIncrement obj obj.getClass().getName() index size(this.elementData[]) this.elementData[this.elementCount..] this.elementData[index+1..] this.elementData[0..index-1]
modifies this.elementData[*], this.elementData[this.elementCount], this.elementData[this.elementCount-1], this.elementData[this.elementCount+1..], this.elementData[0..this.elementCount], this.elementData[0..this.elementCount-1], this.elementData[this.capacityIncrement], this.elementData[this.capacityIncrement-1], this.elementData[this.capacityIncrement..], this.elementData[this.capacityIncrement+1..], this.elementData[0..this.capacityIncrement], this.elementData[0..this.capacityIncrement-1]
warning: method daikon.inv.binary.twoSequence.SeqSeqIntEqual.format(OutputFormat:ESC/Java) needs to be implemented: this.elementData[this.elementCount..] == orig(this.elementData[post(this.elementCount)..])
warning: method daikon.inv.binary.twoSequence.SeqSeqIntEqual.format(OutputFormat:ESC/Java) needs to be implemented: this.elementData[orig(index)+1..] == orig(this.elementData[post(index)+1..])
warning: method daikon.inv.binary.twoSequence.SeqSeqIntEqual.format(OutputFormat:ESC/Java) needs to be implemented: this.elementData[orig(index)+1..] == orig(this.elementData[index+1..])
warning: method daikon.inv.binary.twoSequence.SeqSeqIntEqual.format(OutputFormat:ESC/Java) needs to be implemented: this.elementData[0..orig(index)-1] == orig(this.elementData[0..post(index)-1])
warning: method daikon.inv.binary.twoSequence.SeqSeqIntEqual.format(OutputFormat:ESC/Java) needs to be implemented: this.elementData[0..orig(index)-1] == orig(this.elementData[0..index-1])
(\old(obj) != null)  ==>  (\typeof(this.elementData) != \old(\typeof(obj)))
!(\forall int i; (0 <= i && i <= this.elementData.length-1) ==> (this.elementData[i] != \old(this.elementData[this.elementCount-1])))
(\old(obj) != null)  ==>  (!(\forall int i; (0 <= i && i <= this.elementData.length-1) ==> (\typeof(this.elementData[i]) != \old(\typeof(obj)))))
this.elementCount > \old(index)
this.elementCount <= this.elementData.length
(this.elementData.length-1 == 0) ==> (\old(index) == 0)
\old(index) <= this.elementData.length-1
!(\forall int i; (0 <= i && i <= this.elementCount-1) ==> (this.elementData[i] != \old(this.elementData[this.elementCount-1])))
===========================================================================
javautil.Vector13.setSize(int):::ENTER
    Variables: this this.elementData this.elementData.getClass().getName() this.elementData[] this.elementData[].getClass().getName() this.elementCount this.capacityIncrement javautil.Vector13.serialVersionUID newSize size(this.elementData[]) size(this.elementData[])-1 this.elementData[this.elementCount] this.elementData[this.elementCount-1] this.elementData[this.elementCount..] this.elementData[this.elementCount+1..] this.elementData[0..this.elementCount] this.elementData[0..this.elementCount-1] this.elementData[this.capacityIncrement] this.elementData[this.capacityIncrement-1] this.elementData[this.capacityIncrement..] this.elementData[this.capacityIncrement+1..] this.elementData[0..this.capacityIncrement] this.elementData[0..this.capacityIncrement-1] this.elementData[newSize] this.elementData[newSize-1] this.elementData[newSize..] this.elementData[newSize+1..] this.elementData[0..newSize] this.elementData[0..newSize-1]
newSize >= 0
(this.elementData.length == 0) ==> (this.elementCount == 0)
this.elementCount <= this.elementData.length
===========================================================================
javautil.Vector13.setSize(int):::EXIT
    Variables: this this.elementData this.elementData.getClass().getName() this.elementData[] this.elementData[].getClass().getName() this.elementCount this.capacityIncrement javautil.Vector13.serialVersionUID newSize orig(this) orig(this.elementData) orig(this.elementData.getClass().getName()) orig(this.elementData[]) orig(this.elementData[].getClass().getName()) orig(this.elementCount) orig(this.capacityIncrement) orig(newSize) size(this.elementData[]) size(this.elementData[])-1 orig(size(this.elementData[])) orig(size(this.elementData[]))-1 this.elementData[this.elementCount] this.elementData[this.elementCount-1] this.elementData[this.elementCount..] this.elementData[this.elementCount+1..] this.elementData[0..this.elementCount] this.elementData[0..this.elementCount-1] this.elementData[this.capacityIncrement] this.elementData[this.capacityIncrement-1] this.elementData[this.capacityIncrement..] this.elementData[this.capacityIncrement+1..] this.elementData[0..this.capacityIncrement] this.elementData[0..this.capacityIncrement-1] this.elementData[newSize] this.elementData[newSize-1] this.elementData[newSize..] this.elementData[newSize+1..] this.elementData[0..newSize] this.elementData[0..newSize-1] this.elementData[orig(this.elementCount)] this.elementData[orig(this.elementCount)-1] this.elementData[orig(this.elementCount)..] this.elementData[orig(this.elementCount)+1..] this.elementData[0..orig(this.elementCount)] this.elementData[0..orig(this.elementCount)-1] this.elementData[orig(this.capacityIncrement)] this.elementData[orig(this.capacityIncrement)-1] this.elementData[orig(this.capacityIncrement)..] this.elementData[orig(this.capacityIncrement)+1..] this.elementData[0..orig(this.capacityIncrement)] this.elementData[0..orig(this.capacityIncrement)-1] this.elementData[orig(newSize)] this.elementData[orig(newSize)-1] this.elementData[orig(newSize)..] this.elementData[orig(newSize)+1..] this.elementData[0..orig(newSize)] this.elementData[0..orig(newSize)-1] orig(this.elementData[post(this.elementCount)]) orig(this.elementData[post(this.elementCount)-1]) orig(this.elementData[post(this.elementCount)..]) orig(this.elementData[post(this.elementCount)+1..]) orig(this.elementData[0..post(this.elementCount)]) orig(this.elementData[0..post(this.elementCount)-1]) orig(this.elementData[post(this.capacityIncrement)]) orig(this.elementData[post(this.capacityIncrement)-1]) orig(this.elementData[post(this.capacityIncrement)..]) orig(this.elementData[post(this.capacityIncrement)+1..]) orig(this.elementData[0..post(this.capacityIncrement)]) orig(this.elementData[0..post(this.capacityIncrement)-1]) orig(this.elementData[post(newSize)]) orig(this.elementData[post(newSize)-1]) orig(this.elementData[post(newSize)..]) orig(this.elementData[post(newSize)+1..]) orig(this.elementData[0..post(newSize)]) orig(this.elementData[0..post(newSize)-1]) orig(this.elementData[this.elementCount]) orig(this.elementData[this.elementCount-1]) orig(this.elementData[this.elementCount..]) orig(this.elementData[this.elementCount+1..]) orig(this.elementData[0..this.elementCount]) orig(this.elementData[0..this.elementCount-1]) orig(this.elementData[this.capacityIncrement]) orig(this.elementData[this.capacityIncrement-1]) orig(this.elementData[this.capacityIncrement..]) orig(this.elementData[this.capacityIncrement+1..]) orig(this.elementData[0..this.capacityIncrement]) orig(this.elementData[0..this.capacityIncrement-1]) orig(this.elementData[newSize]) orig(this.elementData[newSize-1]) orig(this.elementData[newSize..]) orig(this.elementData[newSize+1..]) orig(this.elementData[0..newSize]) orig(this.elementData[0..newSize-1])
      Modified variables: this.elementData this.elementData[] this.elementData[].getClass().getName() this.elementCount size(this.elementData[]) this.elementData[this.elementCount] this.elementData[this.elementCount-1] this.elementData[this.elementCount..] this.elementData[this.elementCount+1..] this.elementData[0..this.elementCount] this.elementData[0..this.elementCount-1] this.elementData[this.capacityIncrement] this.elementData[this.capacityIncrement-1] this.elementData[this.capacityIncrement..] this.elementData[this.capacityIncrement+1..] this.elementData[0..this.capacityIncrement] this.elementData[0..this.capacityIncrement-1]
      Modified primitive arguments: this.elementData[newSize] this.elementData[newSize-1] this.elementData[newSize..] this.elementData[newSize+1..] this.elementData[0..newSize] this.elementData[0..newSize-1]
      Unmodified variables: this this.elementData.getClass().getName() this.capacityIncrement newSize
modifies this.elementData, this.elementData[*], this.elementCount, this.elementData[this.elementCount], this.elementData[this.elementCount-1], this.elementData[this.elementCount..], this.elementData[this.elementCount+1..], this.elementData[0..this.elementCount], this.elementData[0..this.elementCount-1], this.elementData[this.capacityIncrement], this.elementData[this.capacityIncrement-1], this.elementData[this.capacityIncrement..], this.elementData[this.capacityIncrement+1..], this.elementData[0..this.capacityIncrement], this.elementData[0..this.capacityIncrement-1]
this.elementCount == \old(newSize)
(\forall int i; (\old(this.elementCount) <= i && i <= this.elementData.length-1) ==> (this.elementData[i] == null))
(this.elementData.length == 0) ==> (this.elementCount == 0)
this.elementCount <= this.elementData.length
(this.elementData.length == 0) ==> (this.capacityIncrement == 0)
(this.elementData.length == 0) ==> (\old(this.elementCount) == 0)
\old(this.elementCount) <= this.elementData.length
(this.elementData.length == 0) ==> (\old(this.elementData.length) == 0)
this.elementData.length >= \old(this.elementData.length)
this.elementData.length-1 >= \old(this.elementData.length)-1
warning: method daikon.inv.binary.twoSequence.SuperSequence.format(OutputFormat:ESC/Java) needs to be implemented: orig(this.elementData[this.elementCount..]) is a subsequence of this.elementData[orig(this.elementCount)..]
warning: method daikon.inv.ternary.threeScalar.FunctionBinary$MaximumLong_yxz.format(OutputFormat:ESC/Java) needs to be implemented: size(this.elementData[]) == (java.lang.Math.max(this.elementCount, orig(size(this.elementData[]))))
===========================================================================
javautil.Vector13.size():::ENTER
    Variables: this this.elementData this.elementData.getClass().getName() this.elementData[] this.elementData[].getClass().getName() this.elementCount this.capacityIncrement javautil.Vector13.serialVersionUID size(this.elementData[]) size(this.elementData[])-1 this.elementData[this.elementCount] this.elementData[this.elementCount-1] this.elementData[this.elementCount..] this.elementData[this.elementCount+1..] this.elementData[0..this.elementCount] this.elementData[0..this.elementCount-1] this.elementData[this.capacityIncrement] this.elementData[this.capacityIncrement-1] this.elementData[this.capacityIncrement..] this.elementData[this.capacityIncrement+1..] this.elementData[0..this.capacityIncrement] this.elementData[0..this.capacityIncrement-1]
(this.elementData.length == 0) ==> (this.elementCount == 0)
this.elementCount <= this.elementData.length
===========================================================================
javautil.Vector13.size():::EXIT
    Variables: this this.elementData this.elementData.getClass().getName() this.elementData[] this.elementData[].getClass().getName() this.elementCount this.capacityIncrement javautil.Vector13.serialVersionUID return orig(this) orig(this.elementData) orig(this.elementData.getClass().getName()) orig(this.elementData[]) orig(this.elementData[].getClass().getName()) orig(this.elementCount) orig(this.capacityIncrement) size(this.elementData[]) size(this.elementData[])-1 orig(size(this.elementData[])) orig(size(this.elementData[]))-1 this.elementData[this.elementCount] this.elementData[this.elementCount-1] this.elementData[this.elementCount..] this.elementData[this.elementCount+1..] this.elementData[0..this.elementCount] this.elementData[0..this.elementCount-1] this.elementData[this.capacityIncrement] this.elementData[this.capacityIncrement-1] this.elementData[this.capacityIncrement..] this.elementData[this.capacityIncrement+1..] this.elementData[0..this.capacityIncrement] this.elementData[0..this.capacityIncrement-1] this.elementData[return] this.elementData[return-1] this.elementData[return..] this.elementData[return+1..] this.elementData[0..return] this.elementData[0..return-1] this.elementData[orig(this.elementCount)] this.elementData[orig(this.elementCount)-1] this.elementData[orig(this.elementCount)..] this.elementData[orig(this.elementCount)+1..] this.elementData[0..orig(this.elementCount)] this.elementData[0..orig(this.elementCount)-1] this.elementData[orig(this.capacityIncrement)] this.elementData[orig(this.capacityIncrement)-1] this.elementData[orig(this.capacityIncrement)..] this.elementData[orig(this.capacityIncrement)+1..] this.elementData[0..orig(this.capacityIncrement)] this.elementData[0..orig(this.capacityIncrement)-1] orig(this.elementData[post(this.elementCount)]) orig(this.elementData[post(this.elementCount)-1]) orig(this.elementData[post(this.elementCount)..]) orig(this.elementData[post(this.elementCount)+1..]) orig(this.elementData[0..post(this.elementCount)]) orig(this.elementData[0..post(this.elementCount)-1]) orig(this.elementData[post(this.capacityIncrement)]) orig(this.elementData[post(this.capacityIncrement)-1]) orig(this.elementData[post(this.capacityIncrement)..]) orig(this.elementData[post(this.capacityIncrement)+1..]) orig(this.elementData[0..post(this.capacityIncrement)]) orig(this.elementData[0..post(this.capacityIncrement)-1]) orig(this.elementData[post(return)]) orig(this.elementData[post(return)-1]) orig(this.elementData[post(return)..]) orig(this.elementData[post(return)+1..]) orig(this.elementData[0..post(return)]) orig(this.elementData[0..post(return)-1]) orig(this.elementData[this.elementCount]) orig(this.elementData[this.elementCount-1]) orig(this.elementData[this.elementCount..]) orig(this.elementData[this.elementCount+1..]) orig(this.elementData[0..this.elementCount]) orig(this.elementData[0..this.elementCount-1]) orig(this.elementData[this.capacityIncrement]) orig(this.elementData[this.capacityIncrement-1]) orig(this.elementData[this.capacityIncrement..]) orig(this.elementData[this.capacityIncrement+1..]) orig(this.elementData[0..this.capacityIncrement]) orig(this.elementData[0..this.capacityIncrement-1])
      Modified variables: this.elementData[this.elementCount] this.elementData[this.elementCount-1] this.elementData[this.elementCount+1..] this.elementData[0..this.elementCount] this.elementData[this.capacityIncrement] this.elementData[this.capacityIncrement-1] this.elementData[this.capacityIncrement..] this.elementData[this.capacityIncrement+1..] this.elementData[0..this.capacityIncrement] this.elementData[0..this.capacityIncrement-1]
      Unmodified variables: this this.elementData this.elementData.getClass().getName() this.elementData[] this.elementData[].getClass().getName() this.elementCount this.capacityIncrement size(this.elementData[]) this.elementData[this.elementCount..] this.elementData[0..this.elementCount-1]
modifies this.elementData[this.elementCount], this.elementData[this.elementCount-1], this.elementData[this.elementCount+1..], this.elementData[0..this.elementCount], this.elementData[this.capacityIncrement], this.elementData[this.capacityIncrement-1], this.elementData[this.capacityIncrement..], this.elementData[this.capacityIncrement+1..], this.elementData[0..this.capacityIncrement], this.elementData[0..this.capacityIncrement-1]
this.elementCount == \result
\result == \old(this.elementCount)
\result >= 0
(\forall int i; (\result <= i && i <= this.elementData.length-1) ==> (this.elementData[i] == null))
(this.elementData.length == 0) ==> (\result == 0)
\result <= this.elementData.length
===========================================================================
javautil.Vector13.toString():::ENTER
    Variables: this this.elementData this.elementData.getClass().getName() this.elementData[] this.elementData[].getClass().getName() this.elementCount this.capacityIncrement javautil.Vector13.serialVersionUID size(this.elementData[]) size(this.elementData[])-1
===========================================================================
javautil.Vector13.toString():::EXIT
    Variables: this this.elementData this.elementData.getClass().getName() this.elementData[] this.elementData[].getClass().getName() this.elementCount this.capacityIncrement javautil.Vector13.serialVersionUID return return.toString orig(this) orig(this.elementData) orig(this.elementData.getClass().getName()) orig(this.elementData[]) orig(this.elementData[].getClass().getName()) orig(this.elementCount) orig(this.capacityIncrement) size(this.elementData[]) size(this.elementData[])-1 orig(size(this.elementData[])) orig(size(this.elementData[]))-1
      Unmodified variables: this this.elementData this.elementData.getClass().getName() this.elementData[] this.elementData[].getClass().getName() this.elementCount this.capacityIncrement size(this.elementData[])
\result != null
warning: method daikon.inv.unary.string.PrintableString.format(OutputFormat:ESC/Java) needs to be implemented: return.toString is printable
===========================================================================
javautil.Vector13.trimToSize():::ENTER
    Variables: this this.elementData this.elementData.getClass().getName() this.elementData[] this.elementData[].getClass().getName() this.elementCount this.capacityIncrement javautil.Vector13.serialVersionUID size(this.elementData[]) size(this.elementData[])-1 this.elementData[this.elementCount] this.elementData[this.elementCount-1] this.elementData[this.elementCount..] this.elementData[this.elementCount+1..] this.elementData[0..this.elementCount] this.elementData[0..this.elementCount-1] this.elementData[this.capacityIncrement] this.elementData[this.capacityIncrement-1] this.elementData[this.capacityIncrement..] this.elementData[this.capacityIncrement+1..] this.elementData[0..this.capacityIncrement] this.elementData[0..this.capacityIncrement-1]
(this.elementData.length == 0) ==> (this.elementCount == 0)
this.elementCount <= this.elementData.length
===========================================================================
javautil.Vector13.trimToSize():::EXIT
    Variables: this this.elementData this.elementData.getClass().getName() this.elementData[] this.elementData[].getClass().getName() this.elementCount this.capacityIncrement javautil.Vector13.serialVersionUID orig(this) orig(this.elementData) orig(this.elementData.getClass().getName()) orig(this.elementData[]) orig(this.elementData[].getClass().getName()) orig(this.elementCount) orig(this.capacityIncrement) size(this.elementData[]) size(this.elementData[])-1 orig(size(this.elementData[])) orig(size(this.elementData[]))-1 this.elementData[this.elementCount] this.elementData[this.elementCount-1] this.elementData[this.elementCount..] this.elementData[this.elementCount+1..] this.elementData[0..this.elementCount] this.elementData[0..this.elementCount-1] this.elementData[this.capacityIncrement] this.elementData[this.capacityIncrement-1] this.elementData[this.capacityIncrement..] this.elementData[this.capacityIncrement+1..] this.elementData[0..this.capacityIncrement] this.elementData[0..this.capacityIncrement-1] this.elementData[orig(this.elementCount)] this.elementData[orig(this.elementCount)-1] this.elementData[orig(this.elementCount)..] this.elementData[orig(this.elementCount)+1..] this.elementData[0..orig(this.elementCount)] this.elementData[0..orig(this.elementCount)-1] this.elementData[orig(this.capacityIncrement)] this.elementData[orig(this.capacityIncrement)-1] this.elementData[orig(this.capacityIncrement)..] this.elementData[orig(this.capacityIncrement)+1..] this.elementData[0..orig(this.capacityIncrement)] this.elementData[0..orig(this.capacityIncrement)-1] orig(this.elementData[post(this.elementCount)]) orig(this.elementData[post(this.elementCount)-1]) orig(this.elementData[post(this.elementCount)..]) orig(this.elementData[post(this.elementCount)+1..]) orig(this.elementData[0..post(this.elementCount)]) orig(this.elementData[0..post(this.elementCount)-1]) orig(this.elementData[post(this.capacityIncrement)]) orig(this.elementData[post(this.capacityIncrement)-1]) orig(this.elementData[post(this.capacityIncrement)..]) orig(this.elementData[post(this.capacityIncrement)+1..]) orig(this.elementData[0..post(this.capacityIncrement)]) orig(this.elementData[0..post(this.capacityIncrement)-1]) orig(this.elementData[this.elementCount]) orig(this.elementData[this.elementCount-1]) orig(this.elementData[this.elementCount..]) orig(this.elementData[this.elementCount+1..]) orig(this.elementData[0..this.elementCount]) orig(this.elementData[0..this.elementCount-1]) orig(this.elementData[this.capacityIncrement]) orig(this.elementData[this.capacityIncrement-1]) orig(this.elementData[this.capacityIncrement..]) orig(this.elementData[this.capacityIncrement+1..]) orig(this.elementData[0..this.capacityIncrement]) orig(this.elementData[0..this.capacityIncrement-1])
      Modified variables: this.elementData this.elementData[] this.elementData[].getClass().getName() size(this.elementData[]) this.elementData[this.elementCount] this.elementData[this.elementCount-1] this.elementData[this.elementCount..] this.elementData[this.elementCount+1..] this.elementData[0..this.elementCount] this.elementData[this.capacityIncrement] this.elementData[this.capacityIncrement-1] this.elementData[this.capacityIncrement..] this.elementData[this.capacityIncrement+1..] this.elementData[0..this.capacityIncrement] this.elementData[0..this.capacityIncrement-1]
      Unmodified variables: this this.elementData.getClass().getName() this.elementCount this.capacityIncrement this.elementData[0..this.elementCount-1]
modifies this.elementData, this.elementData[*], this.elementData[this.elementCount], this.elementData[this.elementCount-1], this.elementData[this.elementCount..], this.elementData[this.elementCount+1..], this.elementData[0..this.elementCount], this.elementData[this.capacityIncrement], this.elementData[this.capacityIncrement-1], this.elementData[this.capacityIncrement..], this.elementData[this.capacityIncrement+1..], this.elementData[0..this.capacityIncrement], this.elementData[0..this.capacityIncrement-1]
warning: method daikon.inv.binary.twoSequence.SeqSeqIntEqual.format(OutputFormat:ESC/Java) needs to be implemented: this.elementData[] == orig(this.elementData[0..post(this.elementCount)-1])
warning: method daikon.inv.binary.twoSequence.SeqSeqIntEqual.format(OutputFormat:ESC/Java) needs to be implemented: this.elementData[] == orig(this.elementData[0..this.elementCount-1])
this.elementCount == this.elementData.length
(\forall int i; (this.elementCount <= i && i <= this.elementData.length-1) ==> (this.elementData[i] != null))
(\old(this.elementData.length) == 0) ==> (this.elementCount == 0)
this.elementCount <= \old(this.elementData.length)
this.elementData.length-1 <= \old(this.elementData.length)-1
warning: method daikon.inv.binary.twoSequence.SubSet.format_esc() needs to be implemented: this.elementData[this.elementCount..] is a subset of orig(this.elementData[this.elementCount..])
