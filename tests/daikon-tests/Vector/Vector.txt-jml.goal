===========================================================================
javautil.Vector13:::CLASS
    Variables: javautil.Vector13.serialVersionUID
===========================================================================
javautil.Vector13:::OBJECT
    Variables: this this.elementData this.elementData.getClass().getName() this.elementData[] this.elementData[].getClass().getName() this.elementCount this.capacityIncrement javautil.Vector13.serialVersionUID size(this.elementData[]) size(this.elementData[])-1 this.elementData[this.elementCount] this.elementData[this.elementCount-1] this.elementData[this.elementCount..] this.elementData[this.elementCount+1..] this.elementData[0..this.elementCount] this.elementData[0..this.elementCount-1] this.elementData[this.capacityIncrement] this.elementData[this.capacityIncrement-1] this.elementData[this.capacityIncrement..] this.elementData[this.capacityIncrement+1..] this.elementData[0..this.capacityIncrement] this.elementData[0..this.capacityIncrement-1]
this.elementData != null
this.elementData.getClass().getName() == java.lang.Object[].class.getName()
this.elementCount >= 0
this.capacityIncrement >= 0
daikon.Quant.eltsEqual(daikon.Quant.slice(this.elementData, this.elementCount, daikon.Quant.size(this.elementData)), null)
===========================================================================
javautil.Vector13.Vector13():::EXIT
    Variables: this this.elementData this.elementData.getClass().getName() this.elementData[] this.elementData[].getClass().getName() this.elementCount this.capacityIncrement javautil.Vector13.serialVersionUID size(this.elementData[]) size(this.elementData[])-1 this.elementData[this.elementCount] this.elementData[this.elementCount-1] this.elementData[this.elementCount..] this.elementData[this.elementCount+1..] this.elementData[0..this.elementCount] this.elementData[0..this.elementCount-1] this.elementData[this.capacityIncrement] this.elementData[this.capacityIncrement-1] this.elementData[this.capacityIncrement..] this.elementData[this.capacityIncrement+1..] this.elementData[0..this.capacityIncrement] this.elementData[0..this.capacityIncrement-1]
this.elementCount == this.capacityIncrement
("oneOf.java.jpp: SEQUENCE unimplemented" != null)
daikon.Quant.eltsEqual(this.elementData, null)
daikon.Quant.pairwiseEqual(daikon.Quant.typeArray(this.elementData), new String[] { null, null, null, null, null, null, null, null, null, null })
daikon.Quant.eltsEqual(daikon.Quant.typeArray(this.elementData), null)
this.elementCount == 0
daikon.Quant.size(this.elementData) == 10
("oneOf.java.jpp: SEQUENCE unimplemented" != null)
("oneOf.java.jpp: SEQUENCE unimplemented" != null)
("oneOf.java.jpp: SEQUENCE unimplemented" != null)
daikon.Quant.eltsEqual(this.elementData, daikon.Quant.getElement_Object(this.elementData, this.elementCount))
===========================================================================
javautil.Vector13.Vector13(int):::ENTER
    Variables: initialCapacity
initialCapacity >= 0
===========================================================================
javautil.Vector13.Vector13(int):::EXIT
    Variables: this this.elementData this.elementData.getClass().getName() this.elementData[] this.elementData[].getClass().getName() this.elementCount this.capacityIncrement javautil.Vector13.serialVersionUID initialCapacity orig(initialCapacity) size(this.elementData[]) size(this.elementData[])-1 this.elementData[this.elementCount] this.elementData[this.elementCount-1] this.elementData[this.elementCount..] this.elementData[this.elementCount+1..] this.elementData[0..this.elementCount] this.elementData[0..this.elementCount-1] this.elementData[this.capacityIncrement] this.elementData[this.capacityIncrement-1] this.elementData[this.capacityIncrement..] this.elementData[this.capacityIncrement+1..] this.elementData[0..this.capacityIncrement] this.elementData[0..this.capacityIncrement-1] this.elementData[initialCapacity] this.elementData[initialCapacity-1] this.elementData[initialCapacity..] this.elementData[initialCapacity+1..] this.elementData[0..initialCapacity] this.elementData[0..initialCapacity-1] this.elementData[orig(initialCapacity)] this.elementData[orig(initialCapacity)-1] this.elementData[orig(initialCapacity)..] this.elementData[orig(initialCapacity)+1..] this.elementData[0..orig(initialCapacity)] this.elementData[0..orig(initialCapacity)-1]
this.elementCount == this.capacityIncrement
\old(initialCapacity) == daikon.Quant.size(this.elementData)
daikon.Quant.eltsEqual(this.elementData, null)
daikon.Quant.eltsEqual(daikon.Quant.typeArray(this.elementData), null)
this.elementCount == 0
("oneOf.java.jpp: SEQUENCE unimplemented" != null)
this.elementCount <= \old(initialCapacity)
===========================================================================
javautil.Vector13.Vector13(int, int):::ENTER
    Variables: initialCapacity capacityIncrement
initialCapacity >= 0
capacityIncrement >= 0
===========================================================================
javautil.Vector13.Vector13(int, int):::EXIT
    Variables: this this.elementData this.elementData.getClass().getName() this.elementData[] this.elementData[].getClass().getName() this.elementCount this.capacityIncrement javautil.Vector13.serialVersionUID initialCapacity capacityIncrement orig(initialCapacity) orig(capacityIncrement) size(this.elementData[]) size(this.elementData[])-1 this.elementData[this.elementCount] this.elementData[this.elementCount-1] this.elementData[this.elementCount..] this.elementData[this.elementCount+1..] this.elementData[0..this.elementCount] this.elementData[0..this.elementCount-1] this.elementData[this.capacityIncrement] this.elementData[this.capacityIncrement-1] this.elementData[this.capacityIncrement..] this.elementData[this.capacityIncrement+1..] this.elementData[0..this.capacityIncrement] this.elementData[0..this.capacityIncrement-1] this.elementData[initialCapacity] this.elementData[initialCapacity-1] this.elementData[initialCapacity..] this.elementData[initialCapacity+1..] this.elementData[0..initialCapacity] this.elementData[0..initialCapacity-1] this.elementData[capacityIncrement] this.elementData[capacityIncrement-1] this.elementData[capacityIncrement..] this.elementData[capacityIncrement+1..] this.elementData[0..capacityIncrement] this.elementData[0..capacityIncrement-1] this.elementData[orig(initialCapacity)] this.elementData[orig(initialCapacity)-1] this.elementData[orig(initialCapacity)..] this.elementData[orig(initialCapacity)+1..] this.elementData[0..orig(initialCapacity)] this.elementData[0..orig(initialCapacity)-1] this.elementData[orig(capacityIncrement)] this.elementData[orig(capacityIncrement)-1] this.elementData[orig(capacityIncrement)..] this.elementData[orig(capacityIncrement)+1..] this.elementData[0..orig(capacityIncrement)] this.elementData[0..orig(capacityIncrement)-1]
this.capacityIncrement == \old(capacityIncrement)
\old(initialCapacity) == daikon.Quant.size(this.elementData)
daikon.Quant.eltsEqual(this.elementData, null)
daikon.Quant.eltsEqual(daikon.Quant.typeArray(this.elementData), null)
this.elementCount == 0
("oneOf.java.jpp: SEQUENCE unimplemented" != null)
this.elementCount <= this.capacityIncrement
this.elementCount <= \old(initialCapacity)
===========================================================================
javautil.Vector13.addElement(java.lang.Object):::ENTER
    Variables: this this.elementData this.elementData.getClass().getName() this.elementData[] this.elementData[].getClass().getName() this.elementCount this.capacityIncrement javautil.Vector13.serialVersionUID obj obj.getClass().getName() size(this.elementData[]) size(this.elementData[])-1 this.elementData[this.elementCount] this.elementData[this.elementCount-1] this.elementData[this.elementCount..] this.elementData[this.elementCount+1..] this.elementData[0..this.elementCount] this.elementData[0..this.elementCount-1] this.elementData[this.capacityIncrement] this.elementData[this.capacityIncrement-1] this.elementData[this.capacityIncrement..] this.elementData[this.capacityIncrement+1..] this.elementData[0..this.capacityIncrement] this.elementData[0..this.capacityIncrement-1]
(obj != null)  ==>  (warning: method daikon.inv.unary.string.PrintableString.format(OutputFormat:JML) needs to be implemented: obj.getClass().getName() is printable)
(obj != null)  ==>  (this.elementData.getClass().getName() != obj.getClass().getName())
(!(daikon.Quant.size(this.elementData) == 0)) || (this.elementCount == 0)
this.elementCount <= daikon.Quant.size(this.elementData)
===========================================================================
javautil.Vector13.addElement(java.lang.Object):::EXIT
    Variables: this this.elementData this.elementData.getClass().getName() this.elementData[] this.elementData[].getClass().getName() this.elementCount this.capacityIncrement javautil.Vector13.serialVersionUID obj obj.getClass().getName() orig(this) orig(this.elementData) orig(this.elementData.getClass().getName()) orig(this.elementData[]) orig(this.elementData[].getClass().getName()) orig(this.elementCount) orig(this.capacityIncrement) orig(obj) orig(obj.getClass().getName()) size(this.elementData[]) size(this.elementData[])-1 orig(size(this.elementData[])) orig(size(this.elementData[]))-1 this.elementData[this.elementCount] this.elementData[this.elementCount-1] this.elementData[this.elementCount..] this.elementData[this.elementCount+1..] this.elementData[0..this.elementCount] this.elementData[0..this.elementCount-1] this.elementData[this.capacityIncrement] this.elementData[this.capacityIncrement-1] this.elementData[this.capacityIncrement..] this.elementData[this.capacityIncrement+1..] this.elementData[0..this.capacityIncrement] this.elementData[0..this.capacityIncrement-1] this.elementData[orig(this.elementCount)] this.elementData[orig(this.elementCount)-1] this.elementData[orig(this.elementCount)..] this.elementData[orig(this.elementCount)+1..] this.elementData[0..orig(this.elementCount)] this.elementData[0..orig(this.elementCount)-1] this.elementData[orig(this.capacityIncrement)] this.elementData[orig(this.capacityIncrement)-1] this.elementData[orig(this.capacityIncrement)..] this.elementData[orig(this.capacityIncrement)+1..] this.elementData[0..orig(this.capacityIncrement)] this.elementData[0..orig(this.capacityIncrement)-1] orig(this.elementData[post(this.elementCount)]) orig(this.elementData[post(this.elementCount)-1]) orig(this.elementData[post(this.elementCount)..]) orig(this.elementData[post(this.elementCount)+1..]) orig(this.elementData[0..post(this.elementCount)]) orig(this.elementData[0..post(this.elementCount)-1]) orig(this.elementData[post(this.capacityIncrement)]) orig(this.elementData[post(this.capacityIncrement)-1]) orig(this.elementData[post(this.capacityIncrement)..]) orig(this.elementData[post(this.capacityIncrement)+1..]) orig(this.elementData[0..post(this.capacityIncrement)]) orig(this.elementData[0..post(this.capacityIncrement)-1]) orig(this.elementData[this.elementCount]) orig(this.elementData[this.elementCount-1]) orig(this.elementData[this.elementCount..]) orig(this.elementData[this.elementCount+1..]) orig(this.elementData[0..this.elementCount]) orig(this.elementData[0..this.elementCount-1]) orig(this.elementData[this.capacityIncrement]) orig(this.elementData[this.capacityIncrement-1]) orig(this.elementData[this.capacityIncrement..]) orig(this.elementData[this.capacityIncrement+1..]) orig(this.elementData[0..this.capacityIncrement]) orig(this.elementData[0..this.capacityIncrement-1])
assignable this.elementData, this.elementData[*], this.elementCount, this.elementData[this.elementCount], this.elementData[this.elementCount-1], this.elementData[this.elementCount..], this.elementData[this.elementCount+1..], this.elementData[0..this.elementCount], this.elementData[0..this.elementCount-1], this.elementData[this.capacityIncrement], this.elementData[this.capacityIncrement-1], this.elementData[this.capacityIncrement..], this.elementData[this.capacityIncrement+1..], this.elementData[0..this.capacityIncrement], this.elementData[0..this.capacityIncrement-1]
this.elementData.getClass().getName() == \old(this.elementData.getClass().getName())
this.capacityIncrement == \old(this.capacityIncrement)
daikon.Quant.getElement_Object(this.elementData, this.elementCount-1) == daikon.Quant.getElement_Object(this.elementData, \old(this.elementCount))
daikon.Quant.pairwiseEqual(daikon.Quant.slice(this.elementData, 0, \old(this.elementCount)-1), \old(daikon.Quant.slice(this.elementData, 0, this.elementCount-1)))
this.elementCount >= 1
daikon.Quant.size(this.elementData) >= 1
(\old(obj) != null)  ==>  (this.elementData.getClass().getName() != \old(obj.getClass().getName()))
(\old(obj) != null)  ==>  (daikon.Quant.memberOf(\old(obj.getClass().getName()) , daikon.Quant.typeArray(this.elementData) ))
this.elementCount - \old(this.elementCount) - 1 == 0
this.elementCount <= daikon.Quant.size(this.elementData)
(!(daikon.Quant.size(this.elementData)-1 == 0)) || (\old(this.elementCount) == 0)
\old(this.elementCount) <= daikon.Quant.size(this.elementData)-1
daikon.Quant.size(this.elementData) >= \old(daikon.Quant.size(this.elementData))
daikon.Quant.size(this.elementData)-1 >= \old(daikon.Quant.size(this.elementData))-1
===========================================================================
javautil.Vector13.clone():::ENTER
    Variables: this this.elementData this.elementData.getClass().getName() this.elementData[] this.elementData[].getClass().getName() this.elementCount this.capacityIncrement javautil.Vector13.serialVersionUID size(this.elementData[]) size(this.elementData[])-1 this.elementData[this.elementCount] this.elementData[this.elementCount-1] this.elementData[this.elementCount..] this.elementData[this.elementCount+1..] this.elementData[0..this.elementCount] this.elementData[0..this.elementCount-1] this.elementData[this.capacityIncrement] this.elementData[this.capacityIncrement-1] this.elementData[this.capacityIncrement..] this.elementData[this.capacityIncrement+1..] this.elementData[0..this.capacityIncrement] this.elementData[0..this.capacityIncrement-1]
(!(daikon.Quant.size(this.elementData) == 0)) || (this.elementCount == 0)
this.elementCount <= daikon.Quant.size(this.elementData)
===========================================================================
javautil.Vector13.clone():::EXIT
    Variables: this this.elementData this.elementData.getClass().getName() this.elementData[] this.elementData[].getClass().getName() this.elementCount this.capacityIncrement javautil.Vector13.serialVersionUID return return.getClass().getName() orig(this) orig(this.elementData) orig(this.elementData.getClass().getName()) orig(this.elementData[]) orig(this.elementData[].getClass().getName()) orig(this.elementCount) orig(this.capacityIncrement) size(this.elementData[]) size(this.elementData[])-1 orig(size(this.elementData[])) orig(size(this.elementData[]))-1 this.elementData[this.elementCount] this.elementData[this.elementCount-1] this.elementData[this.elementCount..] this.elementData[this.elementCount+1..] this.elementData[0..this.elementCount] this.elementData[0..this.elementCount-1] this.elementData[this.capacityIncrement] this.elementData[this.capacityIncrement-1] this.elementData[this.capacityIncrement..] this.elementData[this.capacityIncrement+1..] this.elementData[0..this.capacityIncrement] this.elementData[0..this.capacityIncrement-1] this.elementData[orig(this.elementCount)] this.elementData[orig(this.elementCount)-1] this.elementData[orig(this.elementCount)..] this.elementData[orig(this.elementCount)+1..] this.elementData[0..orig(this.elementCount)] this.elementData[0..orig(this.elementCount)-1] this.elementData[orig(this.capacityIncrement)] this.elementData[orig(this.capacityIncrement)-1] this.elementData[orig(this.capacityIncrement)..] this.elementData[orig(this.capacityIncrement)+1..] this.elementData[0..orig(this.capacityIncrement)] this.elementData[0..orig(this.capacityIncrement)-1] orig(this.elementData[post(this.elementCount)]) orig(this.elementData[post(this.elementCount)-1]) orig(this.elementData[post(this.elementCount)..]) orig(this.elementData[post(this.elementCount)+1..]) orig(this.elementData[0..post(this.elementCount)]) orig(this.elementData[0..post(this.elementCount)-1]) orig(this.elementData[post(this.capacityIncrement)]) orig(this.elementData[post(this.capacityIncrement)-1]) orig(this.elementData[post(this.capacityIncrement)..]) orig(this.elementData[post(this.capacityIncrement)+1..]) orig(this.elementData[0..post(this.capacityIncrement)]) orig(this.elementData[0..post(this.capacityIncrement)-1]) orig(this.elementData[this.elementCount]) orig(this.elementData[this.elementCount-1]) orig(this.elementData[this.elementCount..]) orig(this.elementData[this.elementCount+1..]) orig(this.elementData[0..this.elementCount]) orig(this.elementData[0..this.elementCount-1]) orig(this.elementData[this.capacityIncrement]) orig(this.elementData[this.capacityIncrement-1]) orig(this.elementData[this.capacityIncrement..]) orig(this.elementData[this.capacityIncrement+1..]) orig(this.elementData[0..this.capacityIncrement]) orig(this.elementData[0..this.capacityIncrement-1])
assignable this.elementData[this.elementCount], this.elementData[this.elementCount-1], this.elementData[this.elementCount+1..], this.elementData[0..this.elementCount], this.elementData[this.capacityIncrement], this.elementData[this.capacityIncrement-1], this.elementData[this.capacityIncrement..], this.elementData[this.capacityIncrement+1..], this.elementData[0..this.capacityIncrement], this.elementData[0..this.capacityIncrement-1]
this.elementData == \old(this.elementData)
this.elementData.getClass().getName() == \old(this.elementData.getClass().getName())
daikon.Quant.pairwiseEqual(this.elementData, \old(this.elementData))
this.elementCount == \old(this.elementCount)
this.capacityIncrement == \old(this.capacityIncrement)
\result != null
\result.getClass().getName() == javautil.Vector13.class.getName()
this.elementData.getClass().getName() != \result.getClass().getName()
(!(daikon.Quant.size(this.elementData) == 0)) || (this.elementCount == 0)
this.elementCount <= daikon.Quant.size(this.elementData)
===========================================================================
javautil.Vector13.contains(java.lang.Object):::ENTER
    Variables: this this.elementData this.elementData.getClass().getName() this.elementData[] this.elementData[].getClass().getName() this.elementCount this.capacityIncrement javautil.Vector13.serialVersionUID elem elem.getClass().getName() size(this.elementData[]) size(this.elementData[])-1 this.elementData[this.elementCount] this.elementData[this.elementCount-1] this.elementData[this.elementCount..] this.elementData[this.elementCount+1..] this.elementData[0..this.elementCount] this.elementData[0..this.elementCount-1] this.elementData[this.capacityIncrement] this.elementData[this.capacityIncrement-1] this.elementData[this.capacityIncrement..] this.elementData[this.capacityIncrement+1..] this.elementData[0..this.capacityIncrement] this.elementData[0..this.capacityIncrement-1]
elem != null
warning: method daikon.inv.unary.string.PrintableString.format(OutputFormat:JML) needs to be implemented: elem.getClass().getName() is printable
this.elementData.getClass().getName() != elem.getClass().getName()
(!(daikon.Quant.size(this.elementData) == 0)) || (this.elementCount == 0)
this.elementCount <= daikon.Quant.size(this.elementData)
===========================================================================
javautil.Vector13.contains(java.lang.Object):::EXIT
    Variables: this this.elementData this.elementData.getClass().getName() this.elementData[] this.elementData[].getClass().getName() this.elementCount this.capacityIncrement javautil.Vector13.serialVersionUID elem elem.getClass().getName() return orig(this) orig(this.elementData) orig(this.elementData.getClass().getName()) orig(this.elementData[]) orig(this.elementData[].getClass().getName()) orig(this.elementCount) orig(this.capacityIncrement) orig(elem) orig(elem.getClass().getName()) size(this.elementData[]) size(this.elementData[])-1 orig(size(this.elementData[])) orig(size(this.elementData[]))-1 this.elementData[this.elementCount] this.elementData[this.elementCount-1] this.elementData[this.elementCount..] this.elementData[this.elementCount+1..] this.elementData[0..this.elementCount] this.elementData[0..this.elementCount-1] this.elementData[this.capacityIncrement] this.elementData[this.capacityIncrement-1] this.elementData[this.capacityIncrement..] this.elementData[this.capacityIncrement+1..] this.elementData[0..this.capacityIncrement] this.elementData[0..this.capacityIncrement-1] this.elementData[orig(this.elementCount)] this.elementData[orig(this.elementCount)-1] this.elementData[orig(this.elementCount)..] this.elementData[orig(this.elementCount)+1..] this.elementData[0..orig(this.elementCount)] this.elementData[0..orig(this.elementCount)-1] this.elementData[orig(this.capacityIncrement)] this.elementData[orig(this.capacityIncrement)-1] this.elementData[orig(this.capacityIncrement)..] this.elementData[orig(this.capacityIncrement)+1..] this.elementData[0..orig(this.capacityIncrement)] this.elementData[0..orig(this.capacityIncrement)-1] orig(this.elementData[post(this.elementCount)]) orig(this.elementData[post(this.elementCount)-1]) orig(this.elementData[post(this.elementCount)..]) orig(this.elementData[post(this.elementCount)+1..]) orig(this.elementData[0..post(this.elementCount)]) orig(this.elementData[0..post(this.elementCount)-1]) orig(this.elementData[post(this.capacityIncrement)]) orig(this.elementData[post(this.capacityIncrement)-1]) orig(this.elementData[post(this.capacityIncrement)..]) orig(this.elementData[post(this.capacityIncrement)+1..]) orig(this.elementData[0..post(this.capacityIncrement)]) orig(this.elementData[0..post(this.capacityIncrement)-1]) orig(this.elementData[this.elementCount]) orig(this.elementData[this.elementCount-1]) orig(this.elementData[this.elementCount..]) orig(this.elementData[this.elementCount+1..]) orig(this.elementData[0..this.elementCount]) orig(this.elementData[0..this.elementCount-1]) orig(this.elementData[this.capacityIncrement]) orig(this.elementData[this.capacityIncrement-1]) orig(this.elementData[this.capacityIncrement..]) orig(this.elementData[this.capacityIncrement+1..]) orig(this.elementData[0..this.capacityIncrement]) orig(this.elementData[0..this.capacityIncrement-1])
assignable this.elementData[this.elementCount], this.elementData[this.elementCount-1], this.elementData[this.elementCount+1..], this.elementData[0..this.elementCount], this.elementData[this.capacityIncrement], this.elementData[this.capacityIncrement-1], this.elementData[this.capacityIncrement..], this.elementData[this.capacityIncrement+1..], this.elementData[0..this.capacityIncrement], this.elementData[0..this.capacityIncrement-1]
this.elementData == \old(this.elementData)
this.elementData.getClass().getName() == \old(this.elementData.getClass().getName())
daikon.Quant.pairwiseEqual(this.elementData, \old(this.elementData))
this.elementCount == \old(this.elementCount)
this.capacityIncrement == \old(this.capacityIncrement)
(\result == true)  ==>  (daikon.Quant.memberOf(\old(elem.getClass().getName()) , daikon.Quant.typeArray(this.elementData) ))
(\result == true)  ==>  (this.elementCount >= 1)
this.elementData.getClass().getName() != \old(elem.getClass().getName())
(!(daikon.Quant.size(this.elementData) == 0)) || (this.elementCount == 0)
this.elementCount <= daikon.Quant.size(this.elementData)
===========================================================================
javautil.Vector13.copyInto(java.lang.Object[]):::ENTER
    Variables: this this.elementData this.elementData.getClass().getName() this.elementData[] this.elementData[].getClass().getName() this.elementCount this.capacityIncrement javautil.Vector13.serialVersionUID anArray anArray.getClass().getName() anArray[] size(this.elementData[]) size(this.elementData[])-1 size(anArray[]) size(anArray[])-1 this.elementData[this.elementCount] this.elementData[this.elementCount-1] this.elementData[this.elementCount..] this.elementData[this.elementCount+1..] this.elementData[0..this.elementCount] this.elementData[0..this.elementCount-1] this.elementData[this.capacityIncrement] this.elementData[this.capacityIncrement-1] this.elementData[this.capacityIncrement..] this.elementData[this.capacityIncrement+1..] this.elementData[0..this.capacityIncrement] this.elementData[0..this.capacityIncrement-1] anArray[this.elementCount] anArray[this.elementCount-1] anArray[this.elementCount..] anArray[this.elementCount+1..] anArray[0..this.elementCount] anArray[0..this.elementCount-1] anArray[this.capacityIncrement] anArray[this.capacityIncrement-1] anArray[this.capacityIncrement..] anArray[this.capacityIncrement+1..] anArray[0..this.capacityIncrement] anArray[0..this.capacityIncrement-1]
this.elementData.getClass().getName() == anArray.getClass().getName()
anArray != null
daikon.Quant.eltwiseEqual(daikon.Quant.slice(anArray, this.elementCount, daikon.Quant.size(anArray)))
(!(daikon.Quant.size(this.elementData) == 0)) || (this.elementCount == 0)
this.elementCount <= daikon.Quant.size(this.elementData)
(!(daikon.Quant.size(anArray) == 0)) || (this.elementCount == 0)
this.elementCount <= daikon.Quant.size(anArray)
===========================================================================
javautil.Vector13.copyInto(java.lang.Object[]):::EXIT
    Variables: this this.elementData this.elementData.getClass().getName() this.elementData[] this.elementData[].getClass().getName() this.elementCount this.capacityIncrement javautil.Vector13.serialVersionUID anArray anArray.getClass().getName() anArray[] orig(this) orig(this.elementData) orig(this.elementData.getClass().getName()) orig(this.elementData[]) orig(this.elementData[].getClass().getName()) orig(this.elementCount) orig(this.capacityIncrement) orig(anArray) orig(anArray.getClass().getName()) orig(anArray[]) size(this.elementData[]) size(this.elementData[])-1 size(anArray[]) size(anArray[])-1 orig(size(this.elementData[])) orig(size(this.elementData[]))-1 orig(size(anArray[])) orig(size(anArray[]))-1 this.elementData[this.elementCount] this.elementData[this.elementCount-1] this.elementData[this.elementCount..] this.elementData[this.elementCount+1..] this.elementData[0..this.elementCount] this.elementData[0..this.elementCount-1] this.elementData[this.capacityIncrement] this.elementData[this.capacityIncrement-1] this.elementData[this.capacityIncrement..] this.elementData[this.capacityIncrement+1..] this.elementData[0..this.capacityIncrement] this.elementData[0..this.capacityIncrement-1] this.elementData[orig(this.elementCount)] this.elementData[orig(this.elementCount)-1] this.elementData[orig(this.elementCount)..] this.elementData[orig(this.elementCount)+1..] this.elementData[0..orig(this.elementCount)] this.elementData[0..orig(this.elementCount)-1] this.elementData[orig(this.capacityIncrement)] this.elementData[orig(this.capacityIncrement)-1] this.elementData[orig(this.capacityIncrement)..] this.elementData[orig(this.capacityIncrement)+1..] this.elementData[0..orig(this.capacityIncrement)] this.elementData[0..orig(this.capacityIncrement)-1] anArray[this.elementCount] anArray[this.elementCount-1] anArray[this.elementCount..] anArray[this.elementCount+1..] anArray[0..this.elementCount] anArray[0..this.elementCount-1] orig(this.elementData[post(this.elementCount)]) orig(this.elementData[post(this.elementCount)-1]) orig(this.elementData[post(this.elementCount)..]) orig(this.elementData[post(this.elementCount)+1..]) orig(this.elementData[0..post(this.elementCount)]) orig(this.elementData[0..post(this.elementCount)-1]) orig(anArray[post(this.elementCount)]) orig(anArray[post(this.elementCount)-1]) orig(anArray[post(this.elementCount)..]) orig(anArray[post(this.elementCount)+1..]) orig(anArray[0..post(this.elementCount)]) orig(anArray[0..post(this.elementCount)-1]) anArray[this.capacityIncrement] anArray[this.capacityIncrement-1] anArray[this.capacityIncrement..] anArray[this.capacityIncrement+1..] anArray[0..this.capacityIncrement] anArray[0..this.capacityIncrement-1] orig(this.elementData[post(this.capacityIncrement)]) orig(this.elementData[post(this.capacityIncrement)-1]) orig(this.elementData[post(this.capacityIncrement)..]) orig(this.elementData[post(this.capacityIncrement)+1..]) orig(this.elementData[0..post(this.capacityIncrement)]) orig(this.elementData[0..post(this.capacityIncrement)-1]) orig(anArray[post(this.capacityIncrement)]) orig(anArray[post(this.capacityIncrement)-1]) orig(anArray[post(this.capacityIncrement)..]) orig(anArray[post(this.capacityIncrement)+1..]) orig(anArray[0..post(this.capacityIncrement)]) orig(anArray[0..post(this.capacityIncrement)-1]) anArray[orig(this.elementCount)] anArray[orig(this.elementCount)-1] anArray[orig(this.elementCount)..] anArray[orig(this.elementCount)+1..] anArray[0..orig(this.elementCount)] anArray[0..orig(this.elementCount)-1] anArray[orig(this.capacityIncrement)] anArray[orig(this.capacityIncrement)-1] anArray[orig(this.capacityIncrement)..] anArray[orig(this.capacityIncrement)+1..] anArray[0..orig(this.capacityIncrement)] anArray[0..orig(this.capacityIncrement)-1] orig(this.elementData[this.elementCount]) orig(this.elementData[this.elementCount-1]) orig(this.elementData[this.elementCount..]) orig(this.elementData[this.elementCount+1..]) orig(this.elementData[0..this.elementCount]) orig(this.elementData[0..this.elementCount-1]) orig(this.elementData[this.capacityIncrement]) orig(this.elementData[this.capacityIncrement-1]) orig(this.elementData[this.capacityIncrement..]) orig(this.elementData[this.capacityIncrement+1..]) orig(this.elementData[0..this.capacityIncrement]) orig(this.elementData[0..this.capacityIncrement-1]) orig(anArray[this.elementCount]) orig(anArray[this.elementCount-1]) orig(anArray[this.elementCount..]) orig(anArray[this.elementCount+1..]) orig(anArray[0..this.elementCount]) orig(anArray[0..this.elementCount-1]) orig(anArray[this.capacityIncrement]) orig(anArray[this.capacityIncrement-1]) orig(anArray[this.capacityIncrement..]) orig(anArray[this.capacityIncrement+1..]) orig(anArray[0..this.capacityIncrement]) orig(anArray[0..this.capacityIncrement-1])
assignable anArray[*], this.elementData[this.elementCount], this.elementData[this.elementCount-1], this.elementData[this.elementCount+1..], this.elementData[0..this.elementCount], this.elementData[this.capacityIncrement], this.elementData[this.capacityIncrement-1], this.elementData[this.capacityIncrement..], this.elementData[this.capacityIncrement+1..], this.elementData[0..this.capacityIncrement], this.elementData[0..this.capacityIncrement-1], anArray[this.elementCount], anArray[this.elementCount-1], anArray[this.elementCount+1..], anArray[0..this.elementCount], anArray[0..this.elementCount-1], anArray[this.capacityIncrement], anArray[this.capacityIncrement-1], anArray[this.capacityIncrement..], anArray[this.capacityIncrement+1..], anArray[0..this.capacityIncrement], anArray[0..this.capacityIncrement-1]
this.elementData == \old(this.elementData)
this.elementData.getClass().getName() == \old(this.elementData.getClass().getName())
this.elementData.getClass().getName() == \old(anArray.getClass().getName())
daikon.Quant.pairwiseEqual(this.elementData, \old(this.elementData))
this.elementCount == \old(this.elementCount)
this.capacityIncrement == \old(this.capacityIncrement)
daikon.Quant.pairwiseEqual(daikon.Quant.slice(this.elementData, 0, this.elementCount-1), daikon.Quant.slice(anArray, 0, this.elementCount-1))
daikon.Quant.pairwiseEqual(daikon.Quant.slice(this.elementData, 0, \old(this.elementCount)-1), daikon.Quant.slice(anArray, 0, this.elementCount-1))
daikon.Quant.pairwiseEqual(daikon.Quant.slice(anArray, this.elementCount, daikon.Quant.size(anArray)), \old(daikon.Quant.slice(anArray, \new(this.elementCount), daikon.Quant.size(anArray))))
daikon.Quant.pairwiseEqual(daikon.Quant.slice(anArray, this.elementCount, daikon.Quant.size(anArray)), \old(daikon.Quant.slice(anArray, this.elementCount, daikon.Quant.size(anArray))))
daikon.Quant.pairwiseEqual(daikon.Quant.slice(anArray, 0, this.elementCount-1), \old(daikon.Quant.slice(this.elementData, 0, \new(this.elementCount)-1)))
daikon.Quant.pairwiseEqual(daikon.Quant.slice(anArray, 0, this.elementCount-1), \old(daikon.Quant.slice(this.elementData, 0, this.elementCount-1)))
daikon.Quant.eltwiseEqual(daikon.Quant.slice(anArray, this.elementCount, daikon.Quant.size(anArray)))
(!(daikon.Quant.size(this.elementData) == 0)) || (this.elementCount == 0)
this.elementCount <= daikon.Quant.size(this.elementData)
(!(\old(daikon.Quant.size(anArray)) == 0)) || (this.elementCount == 0)
this.elementCount <= \old(daikon.Quant.size(anArray))
===========================================================================
javautil.Vector13.elementAt(int):::ENTER
    Variables: this this.elementData this.elementData.getClass().getName() this.elementData[] this.elementData[].getClass().getName() this.elementCount this.capacityIncrement javautil.Vector13.serialVersionUID index size(this.elementData[]) size(this.elementData[])-1 this.elementData[this.elementCount] this.elementData[this.elementCount-1] this.elementData[this.elementCount..] this.elementData[this.elementCount+1..] this.elementData[0..this.elementCount] this.elementData[0..this.elementCount-1] this.elementData[this.capacityIncrement] this.elementData[this.capacityIncrement-1] this.elementData[this.capacityIncrement..] this.elementData[this.capacityIncrement+1..] this.elementData[0..this.capacityIncrement] this.elementData[0..this.capacityIncrement-1] this.elementData[index] this.elementData[index-1] this.elementData[index..] this.elementData[index+1..] this.elementData[0..index] this.elementData[0..index-1]
index >= 0
this.elementCount > index
this.elementCount <= daikon.Quant.size(this.elementData)
(!(daikon.Quant.size(this.elementData)-1 == 0)) || (index == 0)
index <= daikon.Quant.size(this.elementData)-1
===========================================================================
javautil.Vector13.elementAt(int):::EXIT
    Variables: this this.elementData this.elementData.getClass().getName() this.elementData[] this.elementData[].getClass().getName() this.elementCount this.capacityIncrement javautil.Vector13.serialVersionUID index return return.getClass().getName() orig(this) orig(this.elementData) orig(this.elementData.getClass().getName()) orig(this.elementData[]) orig(this.elementData[].getClass().getName()) orig(this.elementCount) orig(this.capacityIncrement) orig(index) size(this.elementData[]) size(this.elementData[])-1 orig(size(this.elementData[])) orig(size(this.elementData[]))-1 this.elementData[this.elementCount] this.elementData[this.elementCount-1] this.elementData[this.elementCount..] this.elementData[this.elementCount+1..] this.elementData[0..this.elementCount] this.elementData[0..this.elementCount-1] this.elementData[this.capacityIncrement] this.elementData[this.capacityIncrement-1] this.elementData[this.capacityIncrement..] this.elementData[this.capacityIncrement+1..] this.elementData[0..this.capacityIncrement] this.elementData[0..this.capacityIncrement-1] this.elementData[index] this.elementData[index-1] this.elementData[index..] this.elementData[index+1..] this.elementData[0..index] this.elementData[0..index-1] this.elementData[orig(this.elementCount)] this.elementData[orig(this.elementCount)-1] this.elementData[orig(this.elementCount)..] this.elementData[orig(this.elementCount)+1..] this.elementData[0..orig(this.elementCount)] this.elementData[0..orig(this.elementCount)-1] this.elementData[orig(this.capacityIncrement)] this.elementData[orig(this.capacityIncrement)-1] this.elementData[orig(this.capacityIncrement)..] this.elementData[orig(this.capacityIncrement)+1..] this.elementData[0..orig(this.capacityIncrement)] this.elementData[0..orig(this.capacityIncrement)-1] this.elementData[orig(index)] this.elementData[orig(index)-1] this.elementData[orig(index)..] this.elementData[orig(index)+1..] this.elementData[0..orig(index)] this.elementData[0..orig(index)-1] orig(this.elementData[post(this.elementCount)]) orig(this.elementData[post(this.elementCount)-1]) orig(this.elementData[post(this.elementCount)..]) orig(this.elementData[post(this.elementCount)+1..]) orig(this.elementData[0..post(this.elementCount)]) orig(this.elementData[0..post(this.elementCount)-1]) orig(this.elementData[post(this.capacityIncrement)]) orig(this.elementData[post(this.capacityIncrement)-1]) orig(this.elementData[post(this.capacityIncrement)..]) orig(this.elementData[post(this.capacityIncrement)+1..]) orig(this.elementData[0..post(this.capacityIncrement)]) orig(this.elementData[0..post(this.capacityIncrement)-1]) orig(this.elementData[post(index)]) orig(this.elementData[post(index)-1]) orig(this.elementData[post(index)..]) orig(this.elementData[post(index)+1..]) orig(this.elementData[0..post(index)]) orig(this.elementData[0..post(index)-1]) orig(this.elementData[this.elementCount]) orig(this.elementData[this.elementCount-1]) orig(this.elementData[this.elementCount..]) orig(this.elementData[this.elementCount+1..]) orig(this.elementData[0..this.elementCount]) orig(this.elementData[0..this.elementCount-1]) orig(this.elementData[this.capacityIncrement]) orig(this.elementData[this.capacityIncrement-1]) orig(this.elementData[this.capacityIncrement..]) orig(this.elementData[this.capacityIncrement+1..]) orig(this.elementData[0..this.capacityIncrement]) orig(this.elementData[0..this.capacityIncrement-1]) orig(this.elementData[index]) orig(this.elementData[index-1]) orig(this.elementData[index..]) orig(this.elementData[index+1..]) orig(this.elementData[0..index]) orig(this.elementData[0..index-1])
assignable this.elementData[this.elementCount], this.elementData[this.elementCount+1..], this.elementData[0..this.elementCount], this.elementData[this.capacityIncrement], this.elementData[this.capacityIncrement-1], this.elementData[this.capacityIncrement..], this.elementData[this.capacityIncrement+1..], this.elementData[0..this.capacityIncrement], this.elementData[0..this.capacityIncrement-1]
this.elementData == \old(this.elementData)
this.elementData.getClass().getName() == \old(this.elementData.getClass().getName())
daikon.Quant.pairwiseEqual(this.elementData, \old(this.elementData))
this.elementCount == \old(this.elementCount)
this.capacityIncrement == \old(this.capacityIncrement)
(\result != null)  ==>  (warning: method daikon.inv.unary.string.PrintableString.format(OutputFormat:JML) needs to be implemented: return.getClass().getName() is printable)
(\result != null)  ==>  (this.elementData.getClass().getName() != \result.getClass().getName())
(\result != null)  ==>  (daikon.Quant.memberOf(\result.getClass().getName() , daikon.Quant.typeArray(this.elementData) ))
this.elementCount > \old(index)
this.elementCount <= daikon.Quant.size(this.elementData)
(!(daikon.Quant.size(this.elementData)-1 == 0)) || (\old(index) == 0)
\old(index) <= daikon.Quant.size(this.elementData)-1
===========================================================================
javautil.Vector13.elements():::ENTER
    Variables: this this.elementData this.elementData.getClass().getName() this.elementData[] this.elementData[].getClass().getName() this.elementCount this.capacityIncrement javautil.Vector13.serialVersionUID size(this.elementData[]) size(this.elementData[])-1 this.elementData[this.elementCount] this.elementData[this.elementCount-1] this.elementData[this.elementCount..] this.elementData[this.elementCount+1..] this.elementData[0..this.elementCount] this.elementData[0..this.elementCount-1] this.elementData[this.capacityIncrement] this.elementData[this.capacityIncrement-1] this.elementData[this.capacityIncrement..] this.elementData[this.capacityIncrement+1..] this.elementData[0..this.capacityIncrement] this.elementData[0..this.capacityIncrement-1]
(!(daikon.Quant.size(this.elementData) == 0)) || (this.elementCount == 0)
this.elementCount <= daikon.Quant.size(this.elementData)
===========================================================================
javautil.Vector13.elements():::EXIT
    Variables: this this.elementData this.elementData.getClass().getName() this.elementData[] this.elementData[].getClass().getName() this.elementCount this.capacityIncrement javautil.Vector13.serialVersionUID return return.getClass().getName() orig(this) orig(this.elementData) orig(this.elementData.getClass().getName()) orig(this.elementData[]) orig(this.elementData[].getClass().getName()) orig(this.elementCount) orig(this.capacityIncrement) size(this.elementData[]) size(this.elementData[])-1 orig(size(this.elementData[])) orig(size(this.elementData[]))-1 this.elementData[this.elementCount] this.elementData[this.elementCount-1] this.elementData[this.elementCount..] this.elementData[this.elementCount+1..] this.elementData[0..this.elementCount] this.elementData[0..this.elementCount-1] this.elementData[this.capacityIncrement] this.elementData[this.capacityIncrement-1] this.elementData[this.capacityIncrement..] this.elementData[this.capacityIncrement+1..] this.elementData[0..this.capacityIncrement] this.elementData[0..this.capacityIncrement-1] this.elementData[orig(this.elementCount)] this.elementData[orig(this.elementCount)-1] this.elementData[orig(this.elementCount)..] this.elementData[orig(this.elementCount)+1..] this.elementData[0..orig(this.elementCount)] this.elementData[0..orig(this.elementCount)-1] this.elementData[orig(this.capacityIncrement)] this.elementData[orig(this.capacityIncrement)-1] this.elementData[orig(this.capacityIncrement)..] this.elementData[orig(this.capacityIncrement)+1..] this.elementData[0..orig(this.capacityIncrement)] this.elementData[0..orig(this.capacityIncrement)-1] orig(this.elementData[post(this.elementCount)]) orig(this.elementData[post(this.elementCount)-1]) orig(this.elementData[post(this.elementCount)..]) orig(this.elementData[post(this.elementCount)+1..]) orig(this.elementData[0..post(this.elementCount)]) orig(this.elementData[0..post(this.elementCount)-1]) orig(this.elementData[post(this.capacityIncrement)]) orig(this.elementData[post(this.capacityIncrement)-1]) orig(this.elementData[post(this.capacityIncrement)..]) orig(this.elementData[post(this.capacityIncrement)+1..]) orig(this.elementData[0..post(this.capacityIncrement)]) orig(this.elementData[0..post(this.capacityIncrement)-1]) orig(this.elementData[this.elementCount]) orig(this.elementData[this.elementCount-1]) orig(this.elementData[this.elementCount..]) orig(this.elementData[this.elementCount+1..]) orig(this.elementData[0..this.elementCount]) orig(this.elementData[0..this.elementCount-1]) orig(this.elementData[this.capacityIncrement]) orig(this.elementData[this.capacityIncrement-1]) orig(this.elementData[this.capacityIncrement..]) orig(this.elementData[this.capacityIncrement+1..]) orig(this.elementData[0..this.capacityIncrement]) orig(this.elementData[0..this.capacityIncrement-1])
assignable this.elementData[this.elementCount], this.elementData[this.elementCount-1], this.elementData[this.elementCount+1..], this.elementData[0..this.elementCount], this.elementData[this.capacityIncrement], this.elementData[this.capacityIncrement-1], this.elementData[this.capacityIncrement..], this.elementData[this.capacityIncrement+1..], this.elementData[0..this.capacityIncrement], this.elementData[0..this.capacityIncrement-1]
this.elementData == \old(this.elementData)
this.elementData.getClass().getName() == \old(this.elementData.getClass().getName())
daikon.Quant.pairwiseEqual(this.elementData, \old(this.elementData))
this.elementCount == \old(this.elementCount)
this.capacityIncrement == \old(this.capacityIncrement)
\result != null
\result.getClass().getName() == javautil.VectorEnumerator13.class.getName()
this.elementData.getClass().getName() != \result.getClass().getName()
(!(daikon.Quant.size(this.elementData) == 0)) || (this.elementCount == 0)
this.elementCount <= daikon.Quant.size(this.elementData)
===========================================================================
javautil.Vector13.ensureCapacity(int):::ENTER
    Variables: this this.elementData this.elementData.getClass().getName() this.elementData[] this.elementData[].getClass().getName() this.elementCount this.capacityIncrement javautil.Vector13.serialVersionUID minCapacity size(this.elementData[]) size(this.elementData[])-1 this.elementData[this.elementCount] this.elementData[this.elementCount-1] this.elementData[this.elementCount..] this.elementData[this.elementCount+1..] this.elementData[0..this.elementCount] this.elementData[0..this.elementCount-1] this.elementData[this.capacityIncrement] this.elementData[this.capacityIncrement-1] this.elementData[this.capacityIncrement..] this.elementData[this.capacityIncrement+1..] this.elementData[0..this.capacityIncrement] this.elementData[0..this.capacityIncrement-1] this.elementData[minCapacity] this.elementData[minCapacity-1] this.elementData[minCapacity..] this.elementData[minCapacity+1..] this.elementData[0..minCapacity] this.elementData[0..minCapacity-1]
minCapacity >= 0
(!(daikon.Quant.size(this.elementData) == 0)) || (this.elementCount == 0)
this.elementCount <= daikon.Quant.size(this.elementData)
===========================================================================
javautil.Vector13.ensureCapacity(int):::EXIT
    Variables: this this.elementData this.elementData.getClass().getName() this.elementData[] this.elementData[].getClass().getName() this.elementCount this.capacityIncrement javautil.Vector13.serialVersionUID minCapacity orig(this) orig(this.elementData) orig(this.elementData.getClass().getName()) orig(this.elementData[]) orig(this.elementData[].getClass().getName()) orig(this.elementCount) orig(this.capacityIncrement) orig(minCapacity) size(this.elementData[]) size(this.elementData[])-1 orig(size(this.elementData[])) orig(size(this.elementData[]))-1 this.elementData[this.elementCount] this.elementData[this.elementCount-1] this.elementData[this.elementCount..] this.elementData[this.elementCount+1..] this.elementData[0..this.elementCount] this.elementData[0..this.elementCount-1] this.elementData[this.capacityIncrement] this.elementData[this.capacityIncrement-1] this.elementData[this.capacityIncrement..] this.elementData[this.capacityIncrement+1..] this.elementData[0..this.capacityIncrement] this.elementData[0..this.capacityIncrement-1] this.elementData[minCapacity] this.elementData[minCapacity-1] this.elementData[minCapacity..] this.elementData[minCapacity+1..] this.elementData[0..minCapacity] this.elementData[0..minCapacity-1] this.elementData[orig(this.elementCount)] this.elementData[orig(this.elementCount)-1] this.elementData[orig(this.elementCount)..] this.elementData[orig(this.elementCount)+1..] this.elementData[0..orig(this.elementCount)] this.elementData[0..orig(this.elementCount)-1] this.elementData[orig(this.capacityIncrement)] this.elementData[orig(this.capacityIncrement)-1] this.elementData[orig(this.capacityIncrement)..] this.elementData[orig(this.capacityIncrement)+1..] this.elementData[0..orig(this.capacityIncrement)] this.elementData[0..orig(this.capacityIncrement)-1] this.elementData[orig(minCapacity)] this.elementData[orig(minCapacity)-1] this.elementData[orig(minCapacity)..] this.elementData[orig(minCapacity)+1..] this.elementData[0..orig(minCapacity)] this.elementData[0..orig(minCapacity)-1] orig(this.elementData[post(this.elementCount)]) orig(this.elementData[post(this.elementCount)-1]) orig(this.elementData[post(this.elementCount)..]) orig(this.elementData[post(this.elementCount)+1..]) orig(this.elementData[0..post(this.elementCount)]) orig(this.elementData[0..post(this.elementCount)-1]) orig(this.elementData[post(this.capacityIncrement)]) orig(this.elementData[post(this.capacityIncrement)-1]) orig(this.elementData[post(this.capacityIncrement)..]) orig(this.elementData[post(this.capacityIncrement)+1..]) orig(this.elementData[0..post(this.capacityIncrement)]) orig(this.elementData[0..post(this.capacityIncrement)-1]) orig(this.elementData[post(minCapacity)]) orig(this.elementData[post(minCapacity)-1]) orig(this.elementData[post(minCapacity)..]) orig(this.elementData[post(minCapacity)+1..]) orig(this.elementData[0..post(minCapacity)]) orig(this.elementData[0..post(minCapacity)-1]) orig(this.elementData[this.elementCount]) orig(this.elementData[this.elementCount-1]) orig(this.elementData[this.elementCount..]) orig(this.elementData[this.elementCount+1..]) orig(this.elementData[0..this.elementCount]) orig(this.elementData[0..this.elementCount-1]) orig(this.elementData[this.capacityIncrement]) orig(this.elementData[this.capacityIncrement-1]) orig(this.elementData[this.capacityIncrement..]) orig(this.elementData[this.capacityIncrement+1..]) orig(this.elementData[0..this.capacityIncrement]) orig(this.elementData[0..this.capacityIncrement-1]) orig(this.elementData[minCapacity]) orig(this.elementData[minCapacity-1]) orig(this.elementData[minCapacity..]) orig(this.elementData[minCapacity+1..]) orig(this.elementData[0..minCapacity]) orig(this.elementData[0..minCapacity-1])
assignable this.elementData, this.elementData[*], this.elementData[this.elementCount], this.elementData[this.elementCount-1], this.elementData[this.elementCount..], this.elementData[this.elementCount+1..], this.elementData[0..this.elementCount], this.elementData[this.capacityIncrement], this.elementData[this.capacityIncrement-1], this.elementData[this.capacityIncrement..], this.elementData[this.capacityIncrement+1..], this.elementData[0..this.capacityIncrement], this.elementData[0..this.capacityIncrement-1]
this.elementData.getClass().getName() == \old(this.elementData.getClass().getName())
this.elementCount == \old(this.elementCount)
this.capacityIncrement == \old(this.capacityIncrement)
daikon.Quant.pairwiseEqual(daikon.Quant.slice(this.elementData, 0, this.elementCount-1), \old(daikon.Quant.slice(this.elementData, 0, \new(this.elementCount)-1)))
daikon.Quant.pairwiseEqual(daikon.Quant.slice(this.elementData, 0, this.elementCount-1), \old(daikon.Quant.slice(this.elementData, 0, this.elementCount-1)))
warning: method daikon.inv.binary.twoSequence.SuperSequence.format(OutputFormat:JML) needs to be implemented: orig(this.elementData[]) is a subsequence of this.elementData[]
daikon.Quant.subsetOf(\old(this.elementData), this.elementData)
(!(daikon.Quant.size(this.elementData) == 0)) || (this.elementCount == 0)
this.elementCount <= daikon.Quant.size(this.elementData)
(!(\old(daikon.Quant.size(this.elementData)) == 0)) || (this.elementCount == 0)
this.elementCount <= \old(daikon.Quant.size(this.elementData))
(!(daikon.Quant.size(this.elementData) == 0)) || (\old(minCapacity) == 0)
\old(minCapacity) <= daikon.Quant.size(this.elementData)
(!(daikon.Quant.size(this.elementData) == 0)) || (\old(daikon.Quant.size(this.elementData)) == 0)
daikon.Quant.size(this.elementData) >= \old(daikon.Quant.size(this.elementData))
daikon.Quant.size(this.elementData)-1 >= \old(daikon.Quant.size(this.elementData))-1
warning: method daikon.inv.binary.twoSequence.SuperSequence.format(OutputFormat:JML) needs to be implemented: orig(this.elementData[this.elementCount..]) is a subsequence of this.elementData[this.elementCount..]
===========================================================================
javautil.Vector13.ensureCapacityHelper(int):::ENTER
    Variables: this this.elementData this.elementData.getClass().getName() this.elementData[] this.elementData[].getClass().getName() this.elementCount this.capacityIncrement javautil.Vector13.serialVersionUID minCapacity size(this.elementData[]) size(this.elementData[])-1 this.elementData[this.elementCount] this.elementData[this.elementCount-1] this.elementData[this.elementCount..] this.elementData[this.elementCount+1..] this.elementData[0..this.elementCount] this.elementData[0..this.elementCount-1] this.elementData[this.capacityIncrement] this.elementData[this.capacityIncrement-1] this.elementData[this.capacityIncrement..] this.elementData[this.capacityIncrement+1..] this.elementData[0..this.capacityIncrement] this.elementData[0..this.capacityIncrement-1] this.elementData[minCapacity] this.elementData[minCapacity-1] this.elementData[minCapacity..] this.elementData[minCapacity+1..] this.elementData[0..minCapacity] this.elementData[0..minCapacity-1]
minCapacity >= 1
this.elementCount < minCapacity
(!(daikon.Quant.size(this.elementData) == 0)) || (this.elementCount == 0)
this.elementCount <= daikon.Quant.size(this.elementData)
minCapacity > daikon.Quant.size(this.elementData)
===========================================================================
javautil.Vector13.ensureCapacityHelper(int):::EXIT
    Variables: this this.elementData this.elementData.getClass().getName() this.elementData[] this.elementData[].getClass().getName() this.elementCount this.capacityIncrement javautil.Vector13.serialVersionUID minCapacity orig(this) orig(this.elementData) orig(this.elementData.getClass().getName()) orig(this.elementData[]) orig(this.elementData[].getClass().getName()) orig(this.elementCount) orig(this.capacityIncrement) orig(minCapacity) size(this.elementData[]) size(this.elementData[])-1 orig(size(this.elementData[])) orig(size(this.elementData[]))-1 this.elementData[this.elementCount] this.elementData[this.elementCount-1] this.elementData[this.elementCount..] this.elementData[this.elementCount+1..] this.elementData[0..this.elementCount] this.elementData[0..this.elementCount-1] this.elementData[this.capacityIncrement] this.elementData[this.capacityIncrement-1] this.elementData[this.capacityIncrement..] this.elementData[this.capacityIncrement+1..] this.elementData[0..this.capacityIncrement] this.elementData[0..this.capacityIncrement-1] this.elementData[minCapacity] this.elementData[minCapacity-1] this.elementData[minCapacity..] this.elementData[minCapacity+1..] this.elementData[0..minCapacity] this.elementData[0..minCapacity-1] this.elementData[orig(this.elementCount)] this.elementData[orig(this.elementCount)-1] this.elementData[orig(this.elementCount)..] this.elementData[orig(this.elementCount)+1..] this.elementData[0..orig(this.elementCount)] this.elementData[0..orig(this.elementCount)-1] this.elementData[orig(this.capacityIncrement)] this.elementData[orig(this.capacityIncrement)-1] this.elementData[orig(this.capacityIncrement)..] this.elementData[orig(this.capacityIncrement)+1..] this.elementData[0..orig(this.capacityIncrement)] this.elementData[0..orig(this.capacityIncrement)-1] this.elementData[orig(minCapacity)] this.elementData[orig(minCapacity)-1] this.elementData[orig(minCapacity)..] this.elementData[orig(minCapacity)+1..] this.elementData[0..orig(minCapacity)] this.elementData[0..orig(minCapacity)-1] orig(this.elementData[post(this.elementCount)]) orig(this.elementData[post(this.elementCount)-1]) orig(this.elementData[post(this.elementCount)..]) orig(this.elementData[post(this.elementCount)+1..]) orig(this.elementData[0..post(this.elementCount)]) orig(this.elementData[0..post(this.elementCount)-1]) orig(this.elementData[post(this.capacityIncrement)]) orig(this.elementData[post(this.capacityIncrement)-1]) orig(this.elementData[post(this.capacityIncrement)..]) orig(this.elementData[post(this.capacityIncrement)+1..]) orig(this.elementData[0..post(this.capacityIncrement)]) orig(this.elementData[0..post(this.capacityIncrement)-1]) orig(this.elementData[post(minCapacity)]) orig(this.elementData[post(minCapacity)-1]) orig(this.elementData[post(minCapacity)..]) orig(this.elementData[post(minCapacity)+1..]) orig(this.elementData[0..post(minCapacity)]) orig(this.elementData[0..post(minCapacity)-1]) orig(this.elementData[this.elementCount]) orig(this.elementData[this.elementCount-1]) orig(this.elementData[this.elementCount..]) orig(this.elementData[this.elementCount+1..]) orig(this.elementData[0..this.elementCount]) orig(this.elementData[0..this.elementCount-1]) orig(this.elementData[this.capacityIncrement]) orig(this.elementData[this.capacityIncrement-1]) orig(this.elementData[this.capacityIncrement..]) orig(this.elementData[this.capacityIncrement+1..]) orig(this.elementData[0..this.capacityIncrement]) orig(this.elementData[0..this.capacityIncrement-1]) orig(this.elementData[minCapacity]) orig(this.elementData[minCapacity-1]) orig(this.elementData[minCapacity..]) orig(this.elementData[minCapacity+1..]) orig(this.elementData[0..minCapacity]) orig(this.elementData[0..minCapacity-1])
assignable this.elementData, this.elementData[*], this.elementData[this.elementCount], this.elementData[this.elementCount-1], this.elementData[this.elementCount..], this.elementData[this.elementCount+1..], this.elementData[0..this.elementCount], this.elementData[this.capacityIncrement], this.elementData[this.capacityIncrement-1], this.elementData[this.capacityIncrement..], this.elementData[this.capacityIncrement+1..], this.elementData[0..this.capacityIncrement], this.elementData[0..this.capacityIncrement-1]
this.elementData.getClass().getName() == \old(this.elementData.getClass().getName())
this.elementCount == \old(this.elementCount)
this.capacityIncrement == \old(this.capacityIncrement)
daikon.Quant.getElement_Object(this.elementData, this.elementCount) == daikon.Quant.getElement_Object(this.elementData, \old(minCapacity)-1)
daikon.Quant.pairwiseEqual(daikon.Quant.slice(this.elementData, 0, this.elementCount-1), \old(daikon.Quant.slice(this.elementData, 0, \new(this.elementCount)-1)))
daikon.Quant.pairwiseEqual(daikon.Quant.slice(this.elementData, 0, this.elementCount-1), \old(daikon.Quant.slice(this.elementData, 0, this.elementCount-1)))
daikon.Quant.size(this.elementData) >= 1
daikon.Quant.subsetOf(\old(this.elementData), this.elementData)
this.elementCount < \old(minCapacity)
(!(daikon.Quant.size(this.elementData)-1 == 0)) || (this.elementCount == 0)
this.elementCount <= daikon.Quant.size(this.elementData)-1
(!(\old(daikon.Quant.size(this.elementData)) == 0)) || (this.elementCount == 0)
this.elementCount <= \old(daikon.Quant.size(this.elementData))
this.capacityIncrement <= daikon.Quant.size(this.elementData)
daikon.Quant.subsetOf(\old(this.elementData), daikon.Quant.slice(this.elementData, 0, this.elementCount))
warning: method daikon.inv.binary.twoSequence.SubSequence.format(OutputFormat:JML) needs to be implemented: orig(this.elementData[]) is a subsequence of this.elementData[0..orig(minCapacity)-1]
daikon.Quant.subsetOf(\old(this.elementData), daikon.Quant.slice(this.elementData, 0, \old(minCapacity)-1))
\old(minCapacity) <= daikon.Quant.size(this.elementData)
(!(daikon.Quant.size(this.elementData)-1 == 0)) || (\old(daikon.Quant.size(this.elementData)) == 0)
daikon.Quant.size(this.elementData)-1 >= \old(daikon.Quant.size(this.elementData))
daikon.Quant.eltsEqual(daikon.Quant.slice(this.elementData, this.elementCount, daikon.Quant.size(this.elementData)), daikon.Quant.getElement_Object(this.elementData, this.elementCount))
warning: method daikon.inv.binary.twoSequence.SuperSequence.format(OutputFormat:JML) needs to be implemented: orig(this.elementData[this.elementCount..]) is a subsequence of this.elementData[this.elementCount..]
warning: method daikon.inv.binary.twoSequence.SuperSequence.format(OutputFormat:JML) needs to be implemented: orig(this.elementData[this.elementCount..]) is a subsequence of this.elementData[this.elementCount+1..]
warning: method daikon.inv.binary.twoSequence.SuperSequence.format(OutputFormat:JML) needs to be implemented: orig(this.elementData[this.elementCount..]) is a subsequence of this.elementData[this.capacityIncrement..]
warning: method daikon.inv.binary.twoSequence.SuperSequence.format(OutputFormat:JML) needs to be implemented: orig(this.elementData[this.elementCount..]) is a subsequence of this.elementData[0..orig(minCapacity)-1]
===========================================================================
javautil.Vector13.firstElement():::ENTER
    Variables: this this.elementData this.elementData.getClass().getName() this.elementData[] this.elementData[].getClass().getName() this.elementCount this.capacityIncrement javautil.Vector13.serialVersionUID size(this.elementData[]) size(this.elementData[])-1 this.elementData[this.elementCount] this.elementData[this.elementCount-1] this.elementData[this.elementCount..] this.elementData[this.elementCount+1..] this.elementData[0..this.elementCount] this.elementData[0..this.elementCount-1] this.elementData[this.capacityIncrement] this.elementData[this.capacityIncrement-1] this.elementData[this.capacityIncrement..] this.elementData[this.capacityIncrement+1..] this.elementData[0..this.capacityIncrement] this.elementData[0..this.capacityIncrement-1]
this.elementCount >= 1
this.elementCount <= daikon.Quant.size(this.elementData)
===========================================================================
javautil.Vector13.firstElement():::EXIT
    Variables: this this.elementData this.elementData.getClass().getName() this.elementData[] this.elementData[].getClass().getName() this.elementCount this.capacityIncrement javautil.Vector13.serialVersionUID return return.getClass().getName() orig(this) orig(this.elementData) orig(this.elementData.getClass().getName()) orig(this.elementData[]) orig(this.elementData[].getClass().getName()) orig(this.elementCount) orig(this.capacityIncrement) size(this.elementData[]) size(this.elementData[])-1 orig(size(this.elementData[])) orig(size(this.elementData[]))-1 this.elementData[this.elementCount] this.elementData[this.elementCount-1] this.elementData[this.elementCount..] this.elementData[this.elementCount+1..] this.elementData[0..this.elementCount] this.elementData[0..this.elementCount-1] this.elementData[this.capacityIncrement] this.elementData[this.capacityIncrement-1] this.elementData[this.capacityIncrement..] this.elementData[this.capacityIncrement+1..] this.elementData[0..this.capacityIncrement] this.elementData[0..this.capacityIncrement-1] this.elementData[orig(this.elementCount)] this.elementData[orig(this.elementCount)-1] this.elementData[orig(this.elementCount)..] this.elementData[orig(this.elementCount)+1..] this.elementData[0..orig(this.elementCount)] this.elementData[0..orig(this.elementCount)-1] this.elementData[orig(this.capacityIncrement)] this.elementData[orig(this.capacityIncrement)-1] this.elementData[orig(this.capacityIncrement)..] this.elementData[orig(this.capacityIncrement)+1..] this.elementData[0..orig(this.capacityIncrement)] this.elementData[0..orig(this.capacityIncrement)-1] orig(this.elementData[post(this.elementCount)]) orig(this.elementData[post(this.elementCount)-1]) orig(this.elementData[post(this.elementCount)..]) orig(this.elementData[post(this.elementCount)+1..]) orig(this.elementData[0..post(this.elementCount)]) orig(this.elementData[0..post(this.elementCount)-1]) orig(this.elementData[post(this.capacityIncrement)]) orig(this.elementData[post(this.capacityIncrement)-1]) orig(this.elementData[post(this.capacityIncrement)..]) orig(this.elementData[post(this.capacityIncrement)+1..]) orig(this.elementData[0..post(this.capacityIncrement)]) orig(this.elementData[0..post(this.capacityIncrement)-1]) orig(this.elementData[this.elementCount]) orig(this.elementData[this.elementCount-1]) orig(this.elementData[this.elementCount..]) orig(this.elementData[this.elementCount+1..]) orig(this.elementData[0..this.elementCount]) orig(this.elementData[0..this.elementCount-1]) orig(this.elementData[this.capacityIncrement]) orig(this.elementData[this.capacityIncrement-1]) orig(this.elementData[this.capacityIncrement..]) orig(this.elementData[this.capacityIncrement+1..]) orig(this.elementData[0..this.capacityIncrement]) orig(this.elementData[0..this.capacityIncrement-1])
assignable this.elementData[this.elementCount], this.elementData[this.elementCount+1..], this.elementData[0..this.elementCount], this.elementData[this.capacityIncrement], this.elementData[this.capacityIncrement-1], this.elementData[this.capacityIncrement..], this.elementData[this.capacityIncrement+1..], this.elementData[0..this.capacityIncrement], this.elementData[0..this.capacityIncrement-1]
this.elementData == \old(this.elementData)
this.elementData.getClass().getName() == \old(this.elementData.getClass().getName())
daikon.Quant.pairwiseEqual(this.elementData, \old(this.elementData))
this.elementCount == \old(this.elementCount)
this.capacityIncrement == \old(this.capacityIncrement)
this.elementCount >= 1
(\result != null)  ==>  (warning: method daikon.inv.unary.string.PrintableString.format(OutputFormat:JML) needs to be implemented: return.getClass().getName() is printable)
(\result != null)  ==>  (this.elementData.getClass().getName() != \result.getClass().getName())
(\result != null)  ==>  (daikon.Quant.memberOf(\result.getClass().getName() , daikon.Quant.typeArray(this.elementData) ))
this.elementCount <= daikon.Quant.size(this.elementData)
===========================================================================
javautil.Vector13.indexOf(java.lang.Object):::ENTER
    Variables: this this.elementData this.elementData.getClass().getName() this.elementData[] this.elementData[].getClass().getName() this.elementCount this.capacityIncrement javautil.Vector13.serialVersionUID elem elem.getClass().getName() size(this.elementData[]) size(this.elementData[])-1 this.elementData[this.elementCount] this.elementData[this.elementCount-1] this.elementData[this.elementCount..] this.elementData[this.elementCount+1..] this.elementData[0..this.elementCount] this.elementData[0..this.elementCount-1] this.elementData[this.capacityIncrement] this.elementData[this.capacityIncrement-1] this.elementData[this.capacityIncrement..] this.elementData[this.capacityIncrement+1..] this.elementData[0..this.capacityIncrement] this.elementData[0..this.capacityIncrement-1]
elem != null
warning: method daikon.inv.unary.string.PrintableString.format(OutputFormat:JML) needs to be implemented: elem.getClass().getName() is printable
this.elementData.getClass().getName() != elem.getClass().getName()
(!(daikon.Quant.size(this.elementData) == 0)) || (this.elementCount == 0)
this.elementCount <= daikon.Quant.size(this.elementData)
===========================================================================
javautil.Vector13.indexOf(java.lang.Object):::EXIT
    Variables: this this.elementData this.elementData.getClass().getName() this.elementData[] this.elementData[].getClass().getName() this.elementCount this.capacityIncrement javautil.Vector13.serialVersionUID elem elem.getClass().getName() return orig(this) orig(this.elementData) orig(this.elementData.getClass().getName()) orig(this.elementData[]) orig(this.elementData[].getClass().getName()) orig(this.elementCount) orig(this.capacityIncrement) orig(elem) orig(elem.getClass().getName()) size(this.elementData[]) size(this.elementData[])-1 orig(size(this.elementData[])) orig(size(this.elementData[]))-1 this.elementData[this.elementCount] this.elementData[this.elementCount-1] this.elementData[this.elementCount..] this.elementData[this.elementCount+1..] this.elementData[0..this.elementCount] this.elementData[0..this.elementCount-1] this.elementData[this.capacityIncrement] this.elementData[this.capacityIncrement-1] this.elementData[this.capacityIncrement..] this.elementData[this.capacityIncrement+1..] this.elementData[0..this.capacityIncrement] this.elementData[0..this.capacityIncrement-1] this.elementData[return] this.elementData[return-1] this.elementData[return..] this.elementData[return+1..] this.elementData[0..return] this.elementData[0..return-1] this.elementData[orig(this.elementCount)] this.elementData[orig(this.elementCount)-1] this.elementData[orig(this.elementCount)..] this.elementData[orig(this.elementCount)+1..] this.elementData[0..orig(this.elementCount)] this.elementData[0..orig(this.elementCount)-1] this.elementData[orig(this.capacityIncrement)] this.elementData[orig(this.capacityIncrement)-1] this.elementData[orig(this.capacityIncrement)..] this.elementData[orig(this.capacityIncrement)+1..] this.elementData[0..orig(this.capacityIncrement)] this.elementData[0..orig(this.capacityIncrement)-1] orig(this.elementData[post(this.elementCount)]) orig(this.elementData[post(this.elementCount)-1]) orig(this.elementData[post(this.elementCount)..]) orig(this.elementData[post(this.elementCount)+1..]) orig(this.elementData[0..post(this.elementCount)]) orig(this.elementData[0..post(this.elementCount)-1]) orig(this.elementData[post(this.capacityIncrement)]) orig(this.elementData[post(this.capacityIncrement)-1]) orig(this.elementData[post(this.capacityIncrement)..]) orig(this.elementData[post(this.capacityIncrement)+1..]) orig(this.elementData[0..post(this.capacityIncrement)]) orig(this.elementData[0..post(this.capacityIncrement)-1]) orig(this.elementData[post(return)]) orig(this.elementData[post(return)-1]) orig(this.elementData[post(return)..]) orig(this.elementData[post(return)+1..]) orig(this.elementData[0..post(return)]) orig(this.elementData[0..post(return)-1]) orig(this.elementData[this.elementCount]) orig(this.elementData[this.elementCount-1]) orig(this.elementData[this.elementCount..]) orig(this.elementData[this.elementCount+1..]) orig(this.elementData[0..this.elementCount]) orig(this.elementData[0..this.elementCount-1]) orig(this.elementData[this.capacityIncrement]) orig(this.elementData[this.capacityIncrement-1]) orig(this.elementData[this.capacityIncrement..]) orig(this.elementData[this.capacityIncrement+1..]) orig(this.elementData[0..this.capacityIncrement]) orig(this.elementData[0..this.capacityIncrement-1])
assignable this.elementData[this.elementCount], this.elementData[this.elementCount-1], this.elementData[this.elementCount+1..], this.elementData[0..this.elementCount], this.elementData[this.capacityIncrement], this.elementData[this.capacityIncrement-1], this.elementData[this.capacityIncrement..], this.elementData[this.capacityIncrement+1..], this.elementData[0..this.capacityIncrement], this.elementData[0..this.capacityIncrement-1]
this.elementData == \old(this.elementData)
this.elementData.getClass().getName() == \old(this.elementData.getClass().getName())
daikon.Quant.pairwiseEqual(this.elementData, \old(this.elementData))
this.elementCount == \old(this.elementCount)
this.capacityIncrement == \old(this.capacityIncrement)
\result >= -1
this.elementData.getClass().getName() != \old(elem.getClass().getName())
this.elementCount > \result
(!(daikon.Quant.size(this.elementData) == 0)) || (this.elementCount == 0)
this.elementCount <= daikon.Quant.size(this.elementData)
\result <= daikon.Quant.size(this.elementData)-1
===========================================================================
javautil.Vector13.indexOf(java.lang.Object, int):::ENTER
    Variables: this this.elementData this.elementData.getClass().getName() this.elementData[] this.elementData[].getClass().getName() this.elementCount this.capacityIncrement javautil.Vector13.serialVersionUID elem elem.getClass().getName() index size(this.elementData[]) size(this.elementData[])-1 this.elementData[this.elementCount] this.elementData[this.elementCount-1] this.elementData[this.elementCount..] this.elementData[this.elementCount+1..] this.elementData[0..this.elementCount] this.elementData[0..this.elementCount-1] this.elementData[this.capacityIncrement] this.elementData[this.capacityIncrement-1] this.elementData[this.capacityIncrement..] this.elementData[this.capacityIncrement+1..] this.elementData[0..this.capacityIncrement] this.elementData[0..this.capacityIncrement-1] this.elementData[index] this.elementData[index-1] this.elementData[index..] this.elementData[index+1..] this.elementData[0..index] this.elementData[0..index-1]
elem != null
warning: method daikon.inv.unary.string.PrintableString.format(OutputFormat:JML) needs to be implemented: elem.getClass().getName() is printable
index >= 0
this.elementData.getClass().getName() != elem.getClass().getName()
(!(daikon.Quant.size(this.elementData) == 0)) || (this.elementCount == 0)
this.elementCount <= daikon.Quant.size(this.elementData)
===========================================================================
javautil.Vector13.indexOf(java.lang.Object, int):::EXIT274
    Variables: this this.elementData this.elementData.getClass().getName() this.elementData[] this.elementData[].getClass().getName() this.elementCount this.capacityIncrement javautil.Vector13.serialVersionUID elem elem.getClass().getName() index return orig(this) orig(this.elementData) orig(this.elementData.getClass().getName()) orig(this.elementData[]) orig(this.elementData[].getClass().getName()) orig(this.elementCount) orig(this.capacityIncrement) orig(elem) orig(elem.getClass().getName()) orig(index) size(this.elementData[]) size(this.elementData[])-1 orig(size(this.elementData[])) orig(size(this.elementData[]))-1 this.elementData[this.elementCount] this.elementData[this.elementCount-1] this.elementData[this.elementCount..] this.elementData[this.elementCount+1..] this.elementData[0..this.elementCount] this.elementData[0..this.elementCount-1] this.elementData[this.capacityIncrement] this.elementData[this.capacityIncrement-1] this.elementData[this.capacityIncrement..] this.elementData[this.capacityIncrement+1..] this.elementData[0..this.capacityIncrement] this.elementData[0..this.capacityIncrement-1] this.elementData[index] this.elementData[index-1] this.elementData[index..] this.elementData[index+1..] this.elementData[0..index] this.elementData[0..index-1] this.elementData[return] this.elementData[return-1] this.elementData[return..] this.elementData[return+1..] this.elementData[0..return] this.elementData[0..return-1] this.elementData[orig(this.elementCount)] this.elementData[orig(this.elementCount)-1] this.elementData[orig(this.elementCount)..] this.elementData[orig(this.elementCount)+1..] this.elementData[0..orig(this.elementCount)] this.elementData[0..orig(this.elementCount)-1] this.elementData[orig(this.capacityIncrement)] this.elementData[orig(this.capacityIncrement)-1] this.elementData[orig(this.capacityIncrement)..] this.elementData[orig(this.capacityIncrement)+1..] this.elementData[0..orig(this.capacityIncrement)] this.elementData[0..orig(this.capacityIncrement)-1] this.elementData[orig(index)] this.elementData[orig(index)-1] this.elementData[orig(index)..] this.elementData[orig(index)+1..] this.elementData[0..orig(index)] this.elementData[0..orig(index)-1] orig(this.elementData[post(this.elementCount)]) orig(this.elementData[post(this.elementCount)-1]) orig(this.elementData[post(this.elementCount)..]) orig(this.elementData[post(this.elementCount)+1..]) orig(this.elementData[0..post(this.elementCount)]) orig(this.elementData[0..post(this.elementCount)-1]) orig(this.elementData[post(this.capacityIncrement)]) orig(this.elementData[post(this.capacityIncrement)-1]) orig(this.elementData[post(this.capacityIncrement)..]) orig(this.elementData[post(this.capacityIncrement)+1..]) orig(this.elementData[0..post(this.capacityIncrement)]) orig(this.elementData[0..post(this.capacityIncrement)-1]) orig(this.elementData[post(index)]) orig(this.elementData[post(index)-1]) orig(this.elementData[post(index)..]) orig(this.elementData[post(index)+1..]) orig(this.elementData[0..post(index)]) orig(this.elementData[0..post(index)-1]) orig(this.elementData[post(return)]) orig(this.elementData[post(return)-1]) orig(this.elementData[post(return)..]) orig(this.elementData[post(return)+1..]) orig(this.elementData[0..post(return)]) orig(this.elementData[0..post(return)-1]) orig(this.elementData[this.elementCount]) orig(this.elementData[this.elementCount-1]) orig(this.elementData[this.elementCount..]) orig(this.elementData[this.elementCount+1..]) orig(this.elementData[0..this.elementCount]) orig(this.elementData[0..this.elementCount-1]) orig(this.elementData[this.capacityIncrement]) orig(this.elementData[this.capacityIncrement-1]) orig(this.elementData[this.capacityIncrement..]) orig(this.elementData[this.capacityIncrement+1..]) orig(this.elementData[0..this.capacityIncrement]) orig(this.elementData[0..this.capacityIncrement-1]) orig(this.elementData[index]) orig(this.elementData[index-1]) orig(this.elementData[index..]) orig(this.elementData[index+1..]) orig(this.elementData[0..index]) orig(this.elementData[0..index-1])
assignable this.elementData[this.elementCount], this.elementData[this.elementCount+1..], this.elementData[0..this.elementCount], this.elementData[this.capacityIncrement], this.elementData[this.capacityIncrement-1], this.elementData[this.capacityIncrement..], this.elementData[this.capacityIncrement+1..], this.elementData[0..this.capacityIncrement], this.elementData[0..this.capacityIncrement-1]
this.elementCount >= 1
\result >= 0
daikon.Quant.getElement_Object(this.elementData, \result) != null
daikon.Quant.memberOf(\old(elem.getClass().getName()) , daikon.Quant.typeArray(this.elementData) )
this.elementCount > \old(index)
\result >= \old(index)
(!(daikon.Quant.size(this.elementData)-1 == 0)) || (\result == 0)
(!(daikon.Quant.size(this.elementData)-1 == 0)) || (\old(index) == 0)
\old(index) <= daikon.Quant.size(this.elementData)-1
===========================================================================
javautil.Vector13.indexOf(java.lang.Object, int):::EXIT277
    Variables: this this.elementData this.elementData.getClass().getName() this.elementData[] this.elementData[].getClass().getName() this.elementCount this.capacityIncrement javautil.Vector13.serialVersionUID elem elem.getClass().getName() index return orig(this) orig(this.elementData) orig(this.elementData.getClass().getName()) orig(this.elementData[]) orig(this.elementData[].getClass().getName()) orig(this.elementCount) orig(this.capacityIncrement) orig(elem) orig(elem.getClass().getName()) orig(index) size(this.elementData[]) size(this.elementData[])-1 orig(size(this.elementData[])) orig(size(this.elementData[]))-1 this.elementData[this.elementCount] this.elementData[this.elementCount-1] this.elementData[this.elementCount..] this.elementData[this.elementCount+1..] this.elementData[0..this.elementCount] this.elementData[0..this.elementCount-1] this.elementData[this.capacityIncrement] this.elementData[this.capacityIncrement-1] this.elementData[this.capacityIncrement..] this.elementData[this.capacityIncrement+1..] this.elementData[0..this.capacityIncrement] this.elementData[0..this.capacityIncrement-1] this.elementData[index] this.elementData[index-1] this.elementData[index..] this.elementData[index+1..] this.elementData[0..index] this.elementData[0..index-1] this.elementData[return] this.elementData[return-1] this.elementData[return..] this.elementData[return+1..] this.elementData[0..return] this.elementData[0..return-1] this.elementData[orig(this.elementCount)] this.elementData[orig(this.elementCount)-1] this.elementData[orig(this.elementCount)..] this.elementData[orig(this.elementCount)+1..] this.elementData[0..orig(this.elementCount)] this.elementData[0..orig(this.elementCount)-1] this.elementData[orig(this.capacityIncrement)] this.elementData[orig(this.capacityIncrement)-1] this.elementData[orig(this.capacityIncrement)..] this.elementData[orig(this.capacityIncrement)+1..] this.elementData[0..orig(this.capacityIncrement)] this.elementData[0..orig(this.capacityIncrement)-1] this.elementData[orig(index)] this.elementData[orig(index)-1] this.elementData[orig(index)..] this.elementData[orig(index)+1..] this.elementData[0..orig(index)] this.elementData[0..orig(index)-1] orig(this.elementData[post(this.elementCount)]) orig(this.elementData[post(this.elementCount)-1]) orig(this.elementData[post(this.elementCount)..]) orig(this.elementData[post(this.elementCount)+1..]) orig(this.elementData[0..post(this.elementCount)]) orig(this.elementData[0..post(this.elementCount)-1]) orig(this.elementData[post(this.capacityIncrement)]) orig(this.elementData[post(this.capacityIncrement)-1]) orig(this.elementData[post(this.capacityIncrement)..]) orig(this.elementData[post(this.capacityIncrement)+1..]) orig(this.elementData[0..post(this.capacityIncrement)]) orig(this.elementData[0..post(this.capacityIncrement)-1]) orig(this.elementData[post(index)]) orig(this.elementData[post(index)-1]) orig(this.elementData[post(index)..]) orig(this.elementData[post(index)+1..]) orig(this.elementData[0..post(index)]) orig(this.elementData[0..post(index)-1]) orig(this.elementData[post(return)]) orig(this.elementData[post(return)-1]) orig(this.elementData[post(return)..]) orig(this.elementData[post(return)+1..]) orig(this.elementData[0..post(return)]) orig(this.elementData[0..post(return)-1]) orig(this.elementData[this.elementCount]) orig(this.elementData[this.elementCount-1]) orig(this.elementData[this.elementCount..]) orig(this.elementData[this.elementCount+1..]) orig(this.elementData[0..this.elementCount]) orig(this.elementData[0..this.elementCount-1]) orig(this.elementData[this.capacityIncrement]) orig(this.elementData[this.capacityIncrement-1]) orig(this.elementData[this.capacityIncrement..]) orig(this.elementData[this.capacityIncrement+1..]) orig(this.elementData[0..this.capacityIncrement]) orig(this.elementData[0..this.capacityIncrement-1]) orig(this.elementData[index]) orig(this.elementData[index-1]) orig(this.elementData[index..]) orig(this.elementData[index+1..]) orig(this.elementData[0..index]) orig(this.elementData[0..index-1])
assignable this.elementData[this.elementCount], this.elementData[this.elementCount-1], this.elementData[this.elementCount+1..], this.elementData[0..this.elementCount], this.elementData[this.capacityIncrement], this.elementData[this.capacityIncrement-1], this.elementData[this.capacityIncrement..], this.elementData[this.capacityIncrement+1..], this.elementData[0..this.capacityIncrement], this.elementData[0..this.capacityIncrement-1]
\result == -1
("oneOf.java.jpp: SEQUENCE unimplemented" != null)
this.capacityIncrement > \result
\result < \old(index)
===========================================================================
javautil.Vector13.indexOf(java.lang.Object, int):::EXIT
    Variables: this this.elementData this.elementData.getClass().getName() this.elementData[] this.elementData[].getClass().getName() this.elementCount this.capacityIncrement javautil.Vector13.serialVersionUID elem elem.getClass().getName() index return orig(this) orig(this.elementData) orig(this.elementData.getClass().getName()) orig(this.elementData[]) orig(this.elementData[].getClass().getName()) orig(this.elementCount) orig(this.capacityIncrement) orig(elem) orig(elem.getClass().getName()) orig(index) size(this.elementData[]) size(this.elementData[])-1 orig(size(this.elementData[])) orig(size(this.elementData[]))-1 this.elementData[this.elementCount] this.elementData[this.elementCount-1] this.elementData[this.elementCount..] this.elementData[this.elementCount+1..] this.elementData[0..this.elementCount] this.elementData[0..this.elementCount-1] this.elementData[this.capacityIncrement] this.elementData[this.capacityIncrement-1] this.elementData[this.capacityIncrement..] this.elementData[this.capacityIncrement+1..] this.elementData[0..this.capacityIncrement] this.elementData[0..this.capacityIncrement-1] this.elementData[index] this.elementData[index-1] this.elementData[index..] this.elementData[index+1..] this.elementData[0..index] this.elementData[0..index-1] this.elementData[return] this.elementData[return-1] this.elementData[return..] this.elementData[return+1..] this.elementData[0..return] this.elementData[0..return-1] this.elementData[orig(this.elementCount)] this.elementData[orig(this.elementCount)-1] this.elementData[orig(this.elementCount)..] this.elementData[orig(this.elementCount)+1..] this.elementData[0..orig(this.elementCount)] this.elementData[0..orig(this.elementCount)-1] this.elementData[orig(this.capacityIncrement)] this.elementData[orig(this.capacityIncrement)-1] this.elementData[orig(this.capacityIncrement)..] this.elementData[orig(this.capacityIncrement)+1..] this.elementData[0..orig(this.capacityIncrement)] this.elementData[0..orig(this.capacityIncrement)-1] this.elementData[orig(index)] this.elementData[orig(index)-1] this.elementData[orig(index)..] this.elementData[orig(index)+1..] this.elementData[0..orig(index)] this.elementData[0..orig(index)-1] orig(this.elementData[post(this.elementCount)]) orig(this.elementData[post(this.elementCount)-1]) orig(this.elementData[post(this.elementCount)..]) orig(this.elementData[post(this.elementCount)+1..]) orig(this.elementData[0..post(this.elementCount)]) orig(this.elementData[0..post(this.elementCount)-1]) orig(this.elementData[post(this.capacityIncrement)]) orig(this.elementData[post(this.capacityIncrement)-1]) orig(this.elementData[post(this.capacityIncrement)..]) orig(this.elementData[post(this.capacityIncrement)+1..]) orig(this.elementData[0..post(this.capacityIncrement)]) orig(this.elementData[0..post(this.capacityIncrement)-1]) orig(this.elementData[post(index)]) orig(this.elementData[post(index)-1]) orig(this.elementData[post(index)..]) orig(this.elementData[post(index)+1..]) orig(this.elementData[0..post(index)]) orig(this.elementData[0..post(index)-1]) orig(this.elementData[post(return)]) orig(this.elementData[post(return)-1]) orig(this.elementData[post(return)..]) orig(this.elementData[post(return)+1..]) orig(this.elementData[0..post(return)]) orig(this.elementData[0..post(return)-1]) orig(this.elementData[this.elementCount]) orig(this.elementData[this.elementCount-1]) orig(this.elementData[this.elementCount..]) orig(this.elementData[this.elementCount+1..]) orig(this.elementData[0..this.elementCount]) orig(this.elementData[0..this.elementCount-1]) orig(this.elementData[this.capacityIncrement]) orig(this.elementData[this.capacityIncrement-1]) orig(this.elementData[this.capacityIncrement..]) orig(this.elementData[this.capacityIncrement+1..]) orig(this.elementData[0..this.capacityIncrement]) orig(this.elementData[0..this.capacityIncrement-1]) orig(this.elementData[index]) orig(this.elementData[index-1]) orig(this.elementData[index..]) orig(this.elementData[index+1..]) orig(this.elementData[0..index]) orig(this.elementData[0..index-1])
assignable this.elementData[this.elementCount], this.elementData[this.elementCount-1], this.elementData[this.elementCount+1..], this.elementData[0..this.elementCount], this.elementData[this.capacityIncrement], this.elementData[this.capacityIncrement-1], this.elementData[this.capacityIncrement..], this.elementData[this.capacityIncrement+1..], this.elementData[0..this.capacityIncrement], this.elementData[0..this.capacityIncrement-1]
this.elementData == \old(this.elementData)
this.elementData.getClass().getName() == \old(this.elementData.getClass().getName())
daikon.Quant.pairwiseEqual(this.elementData, \old(this.elementData))
this.elementCount == \old(this.elementCount)
this.capacityIncrement == \old(this.capacityIncrement)
(\result == -1)  <==>  (\result < \old(index))
(\result == -1)  ==>  (this.capacityIncrement > \result)
(\result == -1)  ==>  (("oneOf.java.jpp: SEQUENCE unimplemented" != null))
(\result >= 0)  <==>  (\result >= \old(index))
(\result >= 0)  ==>  ((!(daikon.Quant.size(this.elementData)-1 == 0)) || (\old(index) == 0))
(\result >= 0)  ==>  ((!(daikon.Quant.size(this.elementData)-1 == 0)) || (\result == 0))
(\result >= 0)  ==>  (daikon.Quant.memberOf(\old(elem.getClass().getName()) , daikon.Quant.typeArray(this.elementData) ))
(\result >= 0)  ==>  (\old(index) <= daikon.Quant.size(this.elementData)-1)
(\result >= 0)  ==>  (\old(daikon.Quant.getElement_Object(this.elementData, \new(\result))) != null)
(\result >= 0)  ==>  (this.elementCount > \old(index))
(\result >= 0)  ==>  (this.elementCount >= 1)
(\result >= 0)  ==>  (daikon.Quant.getElement_Object(this.elementData, \result) != null)
\result >= -1
this.elementData.getClass().getName() != \old(elem.getClass().getName())
this.elementCount > \result
(!(daikon.Quant.size(this.elementData) == 0)) || (this.elementCount == 0)
this.elementCount <= daikon.Quant.size(this.elementData)
(!(\result == 0)) || (\old(index) == 0)
\result <= daikon.Quant.size(this.elementData)-1
===========================================================================
javautil.Vector13.insertElementAt(java.lang.Object, int):::ENTER
    Variables: this this.elementData this.elementData.getClass().getName() this.elementData[] this.elementData[].getClass().getName() this.elementCount this.capacityIncrement javautil.Vector13.serialVersionUID obj obj.getClass().getName() index size(this.elementData[]) size(this.elementData[])-1 this.elementData[this.elementCount] this.elementData[this.elementCount-1] this.elementData[this.elementCount..] this.elementData[this.elementCount+1..] this.elementData[0..this.elementCount] this.elementData[0..this.elementCount-1] this.elementData[this.capacityIncrement] this.elementData[this.capacityIncrement-1] this.elementData[this.capacityIncrement..] this.elementData[this.capacityIncrement+1..] this.elementData[0..this.capacityIncrement] this.elementData[0..this.capacityIncrement-1] this.elementData[index] this.elementData[index-1] this.elementData[index..] this.elementData[index+1..] this.elementData[0..index] this.elementData[0..index-1]
(obj != null)  ==>  (warning: method daikon.inv.unary.string.PrintableString.format(OutputFormat:JML) needs to be implemented: obj.getClass().getName() is printable)
index >= 0
(obj != null)  ==>  (this.elementData.getClass().getName() != obj.getClass().getName())
(!(this.elementCount == 0)) || (index == 0)
this.elementCount >= index
(!(daikon.Quant.size(this.elementData) == 0)) || (this.elementCount == 0)
this.elementCount <= daikon.Quant.size(this.elementData)
(!(daikon.Quant.size(this.elementData) == 0)) || (index == 0)
index <= daikon.Quant.size(this.elementData)
===========================================================================
javautil.Vector13.insertElementAt(java.lang.Object, int):::EXIT
    Variables: this this.elementData this.elementData.getClass().getName() this.elementData[] this.elementData[].getClass().getName() this.elementCount this.capacityIncrement javautil.Vector13.serialVersionUID obj obj.getClass().getName() index orig(this) orig(this.elementData) orig(this.elementData.getClass().getName()) orig(this.elementData[]) orig(this.elementData[].getClass().getName()) orig(this.elementCount) orig(this.capacityIncrement) orig(obj) orig(obj.getClass().getName()) orig(index) size(this.elementData[]) size(this.elementData[])-1 orig(size(this.elementData[])) orig(size(this.elementData[]))-1 this.elementData[this.elementCount] this.elementData[this.elementCount-1] this.elementData[this.elementCount..] this.elementData[this.elementCount+1..] this.elementData[0..this.elementCount] this.elementData[0..this.elementCount-1] this.elementData[this.capacityIncrement] this.elementData[this.capacityIncrement-1] this.elementData[this.capacityIncrement..] this.elementData[this.capacityIncrement+1..] this.elementData[0..this.capacityIncrement] this.elementData[0..this.capacityIncrement-1] this.elementData[index] this.elementData[index-1] this.elementData[index..] this.elementData[index+1..] this.elementData[0..index] this.elementData[0..index-1] this.elementData[orig(this.elementCount)] this.elementData[orig(this.elementCount)-1] this.elementData[orig(this.elementCount)..] this.elementData[orig(this.elementCount)+1..] this.elementData[0..orig(this.elementCount)] this.elementData[0..orig(this.elementCount)-1] this.elementData[orig(this.capacityIncrement)] this.elementData[orig(this.capacityIncrement)-1] this.elementData[orig(this.capacityIncrement)..] this.elementData[orig(this.capacityIncrement)+1..] this.elementData[0..orig(this.capacityIncrement)] this.elementData[0..orig(this.capacityIncrement)-1] this.elementData[orig(index)] this.elementData[orig(index)-1] this.elementData[orig(index)..] this.elementData[orig(index)+1..] this.elementData[0..orig(index)] this.elementData[0..orig(index)-1] orig(this.elementData[post(this.elementCount)]) orig(this.elementData[post(this.elementCount)-1]) orig(this.elementData[post(this.elementCount)..]) orig(this.elementData[post(this.elementCount)+1..]) orig(this.elementData[0..post(this.elementCount)]) orig(this.elementData[0..post(this.elementCount)-1]) orig(this.elementData[post(this.capacityIncrement)]) orig(this.elementData[post(this.capacityIncrement)-1]) orig(this.elementData[post(this.capacityIncrement)..]) orig(this.elementData[post(this.capacityIncrement)+1..]) orig(this.elementData[0..post(this.capacityIncrement)]) orig(this.elementData[0..post(this.capacityIncrement)-1]) orig(this.elementData[post(index)]) orig(this.elementData[post(index)-1]) orig(this.elementData[post(index)..]) orig(this.elementData[post(index)+1..]) orig(this.elementData[0..post(index)]) orig(this.elementData[0..post(index)-1]) orig(this.elementData[this.elementCount]) orig(this.elementData[this.elementCount-1]) orig(this.elementData[this.elementCount..]) orig(this.elementData[this.elementCount+1..]) orig(this.elementData[0..this.elementCount]) orig(this.elementData[0..this.elementCount-1]) orig(this.elementData[this.capacityIncrement]) orig(this.elementData[this.capacityIncrement-1]) orig(this.elementData[this.capacityIncrement..]) orig(this.elementData[this.capacityIncrement+1..]) orig(this.elementData[0..this.capacityIncrement]) orig(this.elementData[0..this.capacityIncrement-1]) orig(this.elementData[index]) orig(this.elementData[index-1]) orig(this.elementData[index..]) orig(this.elementData[index+1..]) orig(this.elementData[0..index]) orig(this.elementData[0..index-1])
assignable this.elementData, this.elementData[*], this.elementCount, this.elementData[this.elementCount], this.elementData[this.elementCount-1], this.elementData[this.elementCount..], this.elementData[this.elementCount+1..], this.elementData[0..this.elementCount], this.elementData[0..this.elementCount-1], this.elementData[this.capacityIncrement], this.elementData[this.capacityIncrement-1], this.elementData[this.capacityIncrement..], this.elementData[this.capacityIncrement+1..], this.elementData[0..this.capacityIncrement], this.elementData[0..this.capacityIncrement-1]
this.elementData.getClass().getName() == \old(this.elementData.getClass().getName())
this.capacityIncrement == \old(this.capacityIncrement)
daikon.Quant.getElement_Object(this.elementData, this.elementCount-1) == daikon.Quant.getElement_Object(this.elementData, \old(this.elementCount))
daikon.Quant.pairwiseEqual(daikon.Quant.slice(this.elementData, 0, \old(index)-1), \old(daikon.Quant.slice(this.elementData, 0, \new(index)-1)))
daikon.Quant.pairwiseEqual(daikon.Quant.slice(this.elementData, 0, \old(index)-1), \old(daikon.Quant.slice(this.elementData, 0, index-1)))
this.elementCount >= 1
(\old(obj) != null)  ==>  (this.elementData.getClass().getName() != \old(obj.getClass().getName()))
(\old(obj) != null)  ==>  (daikon.Quant.memberOf(\old(obj.getClass().getName()) , daikon.Quant.typeArray(this.elementData) ))
this.elementCount - \old(this.elementCount) - 1 == 0
this.elementCount > \old(index)
this.elementCount <= daikon.Quant.size(this.elementData)
(!(daikon.Quant.size(this.elementData)-1 == 0)) || (\old(this.elementCount) == 0)
\old(this.elementCount) <= daikon.Quant.size(this.elementData)-1
(!(daikon.Quant.size(this.elementData)-1 == 0)) || (\old(index) == 0)
\old(index) <= daikon.Quant.size(this.elementData)-1
daikon.Quant.size(this.elementData) >= \old(daikon.Quant.size(this.elementData))
daikon.Quant.size(this.elementData)-1 >= \old(daikon.Quant.size(this.elementData))-1
===========================================================================
javautil.Vector13.isEmpty():::ENTER
    Variables: this this.elementData this.elementData.getClass().getName() this.elementData[] this.elementData[].getClass().getName() this.elementCount this.capacityIncrement javautil.Vector13.serialVersionUID size(this.elementData[]) size(this.elementData[])-1 this.elementData[this.elementCount] this.elementData[this.elementCount-1] this.elementData[this.elementCount..] this.elementData[this.elementCount+1..] this.elementData[0..this.elementCount] this.elementData[0..this.elementCount-1] this.elementData[this.capacityIncrement] this.elementData[this.capacityIncrement-1] this.elementData[this.capacityIncrement..] this.elementData[this.capacityIncrement+1..] this.elementData[0..this.capacityIncrement] this.elementData[0..this.capacityIncrement-1]
(!(daikon.Quant.size(this.elementData) == 0)) || (this.elementCount == 0)
this.elementCount <= daikon.Quant.size(this.elementData)
===========================================================================
javautil.Vector13.isEmpty():::EXIT
    Variables: this this.elementData this.elementData.getClass().getName() this.elementData[] this.elementData[].getClass().getName() this.elementCount this.capacityIncrement javautil.Vector13.serialVersionUID return orig(this) orig(this.elementData) orig(this.elementData.getClass().getName()) orig(this.elementData[]) orig(this.elementData[].getClass().getName()) orig(this.elementCount) orig(this.capacityIncrement) size(this.elementData[]) size(this.elementData[])-1 orig(size(this.elementData[])) orig(size(this.elementData[]))-1 this.elementData[this.elementCount] this.elementData[this.elementCount-1] this.elementData[this.elementCount..] this.elementData[this.elementCount+1..] this.elementData[0..this.elementCount] this.elementData[0..this.elementCount-1] this.elementData[this.capacityIncrement] this.elementData[this.capacityIncrement-1] this.elementData[this.capacityIncrement..] this.elementData[this.capacityIncrement+1..] this.elementData[0..this.capacityIncrement] this.elementData[0..this.capacityIncrement-1] this.elementData[orig(this.elementCount)] this.elementData[orig(this.elementCount)-1] this.elementData[orig(this.elementCount)..] this.elementData[orig(this.elementCount)+1..] this.elementData[0..orig(this.elementCount)] this.elementData[0..orig(this.elementCount)-1] this.elementData[orig(this.capacityIncrement)] this.elementData[orig(this.capacityIncrement)-1] this.elementData[orig(this.capacityIncrement)..] this.elementData[orig(this.capacityIncrement)+1..] this.elementData[0..orig(this.capacityIncrement)] this.elementData[0..orig(this.capacityIncrement)-1] orig(this.elementData[post(this.elementCount)]) orig(this.elementData[post(this.elementCount)-1]) orig(this.elementData[post(this.elementCount)..]) orig(this.elementData[post(this.elementCount)+1..]) orig(this.elementData[0..post(this.elementCount)]) orig(this.elementData[0..post(this.elementCount)-1]) orig(this.elementData[post(this.capacityIncrement)]) orig(this.elementData[post(this.capacityIncrement)-1]) orig(this.elementData[post(this.capacityIncrement)..]) orig(this.elementData[post(this.capacityIncrement)+1..]) orig(this.elementData[0..post(this.capacityIncrement)]) orig(this.elementData[0..post(this.capacityIncrement)-1]) orig(this.elementData[this.elementCount]) orig(this.elementData[this.elementCount-1]) orig(this.elementData[this.elementCount..]) orig(this.elementData[this.elementCount+1..]) orig(this.elementData[0..this.elementCount]) orig(this.elementData[0..this.elementCount-1]) orig(this.elementData[this.capacityIncrement]) orig(this.elementData[this.capacityIncrement-1]) orig(this.elementData[this.capacityIncrement..]) orig(this.elementData[this.capacityIncrement+1..]) orig(this.elementData[0..this.capacityIncrement]) orig(this.elementData[0..this.capacityIncrement-1])
assignable this.elementData[this.elementCount], this.elementData[this.elementCount-1], this.elementData[this.elementCount+1..], this.elementData[0..this.elementCount], this.elementData[this.capacityIncrement], this.elementData[this.capacityIncrement-1], this.elementData[this.capacityIncrement..], this.elementData[this.capacityIncrement+1..], this.elementData[0..this.capacityIncrement], this.elementData[0..this.capacityIncrement-1]
this.elementData == \old(this.elementData)
this.elementData.getClass().getName() == \old(this.elementData.getClass().getName())
daikon.Quant.pairwiseEqual(this.elementData, \old(this.elementData))
this.elementCount == \old(this.elementCount)
this.capacityIncrement == \old(this.capacityIncrement)
(this.elementCount == 0)  <==>  (\result == true)
(this.elementCount == 0)  ==>  (this.elementCount <= this.capacityIncrement)
(this.elementCount == 0)  ==>  (this.elementCount is a pointer)
(this.elementCount == 0)  ==>  (("oneOf.java.jpp: SEQUENCE unimplemented" != null))
(this.elementCount == 0)  ==>  (daikon.Quant.eltsEqual(this.elementData, null))
(this.elementCount == 0)  ==>  (daikon.Quant.eltsEqual(daikon.Quant.typeArray(this.elementData), null))
(!(daikon.Quant.size(this.elementData) == 0)) || (this.elementCount == 0)
this.elementCount <= daikon.Quant.size(this.elementData)
===========================================================================
javautil.Vector13.lastElement():::ENTER
    Variables: this this.elementData this.elementData.getClass().getName() this.elementData[] this.elementData[].getClass().getName() this.elementCount this.capacityIncrement javautil.Vector13.serialVersionUID size(this.elementData[]) size(this.elementData[])-1 this.elementData[this.elementCount] this.elementData[this.elementCount-1] this.elementData[this.elementCount..] this.elementData[this.elementCount+1..] this.elementData[0..this.elementCount] this.elementData[0..this.elementCount-1] this.elementData[this.capacityIncrement] this.elementData[this.capacityIncrement-1] this.elementData[this.capacityIncrement..] this.elementData[this.capacityIncrement+1..] this.elementData[0..this.capacityIncrement] this.elementData[0..this.capacityIncrement-1]
this.elementCount >= 1
this.elementCount <= daikon.Quant.size(this.elementData)
===========================================================================
javautil.Vector13.lastElement():::EXIT
    Variables: this this.elementData this.elementData.getClass().getName() this.elementData[] this.elementData[].getClass().getName() this.elementCount this.capacityIncrement javautil.Vector13.serialVersionUID return return.getClass().getName() orig(this) orig(this.elementData) orig(this.elementData.getClass().getName()) orig(this.elementData[]) orig(this.elementData[].getClass().getName()) orig(this.elementCount) orig(this.capacityIncrement) size(this.elementData[]) size(this.elementData[])-1 orig(size(this.elementData[])) orig(size(this.elementData[]))-1 this.elementData[this.elementCount] this.elementData[this.elementCount-1] this.elementData[this.elementCount..] this.elementData[this.elementCount+1..] this.elementData[0..this.elementCount] this.elementData[0..this.elementCount-1] this.elementData[this.capacityIncrement] this.elementData[this.capacityIncrement-1] this.elementData[this.capacityIncrement..] this.elementData[this.capacityIncrement+1..] this.elementData[0..this.capacityIncrement] this.elementData[0..this.capacityIncrement-1] this.elementData[orig(this.elementCount)] this.elementData[orig(this.elementCount)-1] this.elementData[orig(this.elementCount)..] this.elementData[orig(this.elementCount)+1..] this.elementData[0..orig(this.elementCount)] this.elementData[0..orig(this.elementCount)-1] this.elementData[orig(this.capacityIncrement)] this.elementData[orig(this.capacityIncrement)-1] this.elementData[orig(this.capacityIncrement)..] this.elementData[orig(this.capacityIncrement)+1..] this.elementData[0..orig(this.capacityIncrement)] this.elementData[0..orig(this.capacityIncrement)-1] orig(this.elementData[post(this.elementCount)]) orig(this.elementData[post(this.elementCount)-1]) orig(this.elementData[post(this.elementCount)..]) orig(this.elementData[post(this.elementCount)+1..]) orig(this.elementData[0..post(this.elementCount)]) orig(this.elementData[0..post(this.elementCount)-1]) orig(this.elementData[post(this.capacityIncrement)]) orig(this.elementData[post(this.capacityIncrement)-1]) orig(this.elementData[post(this.capacityIncrement)..]) orig(this.elementData[post(this.capacityIncrement)+1..]) orig(this.elementData[0..post(this.capacityIncrement)]) orig(this.elementData[0..post(this.capacityIncrement)-1]) orig(this.elementData[this.elementCount]) orig(this.elementData[this.elementCount-1]) orig(this.elementData[this.elementCount..]) orig(this.elementData[this.elementCount+1..]) orig(this.elementData[0..this.elementCount]) orig(this.elementData[0..this.elementCount-1]) orig(this.elementData[this.capacityIncrement]) orig(this.elementData[this.capacityIncrement-1]) orig(this.elementData[this.capacityIncrement..]) orig(this.elementData[this.capacityIncrement+1..]) orig(this.elementData[0..this.capacityIncrement]) orig(this.elementData[0..this.capacityIncrement-1])
assignable this.elementData[this.elementCount], this.elementData[this.elementCount+1..], this.elementData[0..this.elementCount], this.elementData[this.capacityIncrement], this.elementData[this.capacityIncrement-1], this.elementData[this.capacityIncrement..], this.elementData[this.capacityIncrement+1..], this.elementData[0..this.capacityIncrement], this.elementData[0..this.capacityIncrement-1]
this.elementData == \old(this.elementData)
this.elementData.getClass().getName() == \old(this.elementData.getClass().getName())
daikon.Quant.pairwiseEqual(this.elementData, \old(this.elementData))
this.elementCount == \old(this.elementCount)
this.capacityIncrement == \old(this.capacityIncrement)
this.elementCount >= 1
(\result != null)  ==>  (warning: method daikon.inv.unary.string.PrintableString.format(OutputFormat:JML) needs to be implemented: return.getClass().getName() is printable)
(\result != null)  ==>  (this.elementData.getClass().getName() != \result.getClass().getName())
(\result != null)  ==>  (daikon.Quant.memberOf(\result.getClass().getName() , daikon.Quant.typeArray(this.elementData) ))
this.elementCount <= daikon.Quant.size(this.elementData)
===========================================================================
javautil.Vector13.lastIndexOf(java.lang.Object):::ENTER
    Variables: this this.elementData this.elementData.getClass().getName() this.elementData[] this.elementData[].getClass().getName() this.elementCount this.capacityIncrement javautil.Vector13.serialVersionUID elem elem.getClass().getName() size(this.elementData[]) size(this.elementData[])-1 this.elementData[this.elementCount] this.elementData[this.elementCount-1] this.elementData[this.elementCount..] this.elementData[this.elementCount+1..] this.elementData[0..this.elementCount] this.elementData[0..this.elementCount-1] this.elementData[this.capacityIncrement] this.elementData[this.capacityIncrement-1] this.elementData[this.capacityIncrement..] this.elementData[this.capacityIncrement+1..] this.elementData[0..this.capacityIncrement] this.elementData[0..this.capacityIncrement-1]
elem != null
warning: method daikon.inv.unary.string.PrintableString.format(OutputFormat:JML) needs to be implemented: elem.getClass().getName() is printable
this.elementData.getClass().getName() != elem.getClass().getName()
(!(daikon.Quant.size(this.elementData) == 0)) || (this.elementCount == 0)
this.elementCount <= daikon.Quant.size(this.elementData)
===========================================================================
javautil.Vector13.lastIndexOf(java.lang.Object):::EXIT
    Variables: this this.elementData this.elementData.getClass().getName() this.elementData[] this.elementData[].getClass().getName() this.elementCount this.capacityIncrement javautil.Vector13.serialVersionUID elem elem.getClass().getName() return orig(this) orig(this.elementData) orig(this.elementData.getClass().getName()) orig(this.elementData[]) orig(this.elementData[].getClass().getName()) orig(this.elementCount) orig(this.capacityIncrement) orig(elem) orig(elem.getClass().getName()) size(this.elementData[]) size(this.elementData[])-1 orig(size(this.elementData[])) orig(size(this.elementData[]))-1 this.elementData[this.elementCount] this.elementData[this.elementCount-1] this.elementData[this.elementCount..] this.elementData[this.elementCount+1..] this.elementData[0..this.elementCount] this.elementData[0..this.elementCount-1] this.elementData[this.capacityIncrement] this.elementData[this.capacityIncrement-1] this.elementData[this.capacityIncrement..] this.elementData[this.capacityIncrement+1..] this.elementData[0..this.capacityIncrement] this.elementData[0..this.capacityIncrement-1] this.elementData[return] this.elementData[return-1] this.elementData[return..] this.elementData[return+1..] this.elementData[0..return] this.elementData[0..return-1] this.elementData[orig(this.elementCount)] this.elementData[orig(this.elementCount)-1] this.elementData[orig(this.elementCount)..] this.elementData[orig(this.elementCount)+1..] this.elementData[0..orig(this.elementCount)] this.elementData[0..orig(this.elementCount)-1] this.elementData[orig(this.capacityIncrement)] this.elementData[orig(this.capacityIncrement)-1] this.elementData[orig(this.capacityIncrement)..] this.elementData[orig(this.capacityIncrement)+1..] this.elementData[0..orig(this.capacityIncrement)] this.elementData[0..orig(this.capacityIncrement)-1] orig(this.elementData[post(this.elementCount)]) orig(this.elementData[post(this.elementCount)-1]) orig(this.elementData[post(this.elementCount)..]) orig(this.elementData[post(this.elementCount)+1..]) orig(this.elementData[0..post(this.elementCount)]) orig(this.elementData[0..post(this.elementCount)-1]) orig(this.elementData[post(this.capacityIncrement)]) orig(this.elementData[post(this.capacityIncrement)-1]) orig(this.elementData[post(this.capacityIncrement)..]) orig(this.elementData[post(this.capacityIncrement)+1..]) orig(this.elementData[0..post(this.capacityIncrement)]) orig(this.elementData[0..post(this.capacityIncrement)-1]) orig(this.elementData[post(return)]) orig(this.elementData[post(return)-1]) orig(this.elementData[post(return)..]) orig(this.elementData[post(return)+1..]) orig(this.elementData[0..post(return)]) orig(this.elementData[0..post(return)-1]) orig(this.elementData[this.elementCount]) orig(this.elementData[this.elementCount-1]) orig(this.elementData[this.elementCount..]) orig(this.elementData[this.elementCount+1..]) orig(this.elementData[0..this.elementCount]) orig(this.elementData[0..this.elementCount-1]) orig(this.elementData[this.capacityIncrement]) orig(this.elementData[this.capacityIncrement-1]) orig(this.elementData[this.capacityIncrement..]) orig(this.elementData[this.capacityIncrement+1..]) orig(this.elementData[0..this.capacityIncrement]) orig(this.elementData[0..this.capacityIncrement-1])
assignable this.elementData[this.elementCount], this.elementData[this.elementCount-1], this.elementData[this.elementCount+1..], this.elementData[0..this.elementCount], this.elementData[this.capacityIncrement], this.elementData[this.capacityIncrement-1], this.elementData[this.capacityIncrement..], this.elementData[this.capacityIncrement+1..], this.elementData[0..this.capacityIncrement], this.elementData[0..this.capacityIncrement-1]
this.elementData == \old(this.elementData)
this.elementData.getClass().getName() == \old(this.elementData.getClass().getName())
daikon.Quant.pairwiseEqual(this.elementData, \old(this.elementData))
this.elementCount == \old(this.elementCount)
this.capacityIncrement == \old(this.capacityIncrement)
\result >= -1
this.elementData.getClass().getName() != \old(elem.getClass().getName())
this.elementCount > \result
(!(daikon.Quant.size(this.elementData) == 0)) || (this.elementCount == 0)
this.elementCount <= daikon.Quant.size(this.elementData)
\result <= daikon.Quant.size(this.elementData)-1
===========================================================================
javautil.Vector13.lastIndexOf(java.lang.Object, int):::ENTER
    Variables: this this.elementData this.elementData.getClass().getName() this.elementData[] this.elementData[].getClass().getName() this.elementCount this.capacityIncrement javautil.Vector13.serialVersionUID elem elem.getClass().getName() index size(this.elementData[]) size(this.elementData[])-1 this.elementData[this.elementCount] this.elementData[this.elementCount-1] this.elementData[this.elementCount..] this.elementData[this.elementCount+1..] this.elementData[0..this.elementCount] this.elementData[0..this.elementCount-1] this.elementData[this.capacityIncrement] this.elementData[this.capacityIncrement-1] this.elementData[this.capacityIncrement..] this.elementData[this.capacityIncrement+1..] this.elementData[0..this.capacityIncrement] this.elementData[0..this.capacityIncrement-1] this.elementData[index] this.elementData[index-1] this.elementData[index..] this.elementData[index+1..] this.elementData[0..index] this.elementData[0..index-1]
elem != null
warning: method daikon.inv.unary.string.PrintableString.format(OutputFormat:JML) needs to be implemented: elem.getClass().getName() is printable
index >= -1
this.elementData.getClass().getName() != elem.getClass().getName()
this.elementCount > index
(!(daikon.Quant.size(this.elementData) == 0)) || (this.elementCount == 0)
this.elementCount <= daikon.Quant.size(this.elementData)
index <= daikon.Quant.size(this.elementData)-1
===========================================================================
javautil.Vector13.lastIndexOf(java.lang.Object, int):::EXIT307
    Variables: this this.elementData this.elementData.getClass().getName() this.elementData[] this.elementData[].getClass().getName() this.elementCount this.capacityIncrement javautil.Vector13.serialVersionUID elem elem.getClass().getName() index return orig(this) orig(this.elementData) orig(this.elementData.getClass().getName()) orig(this.elementData[]) orig(this.elementData[].getClass().getName()) orig(this.elementCount) orig(this.capacityIncrement) orig(elem) orig(elem.getClass().getName()) orig(index) size(this.elementData[]) size(this.elementData[])-1 orig(size(this.elementData[])) orig(size(this.elementData[]))-1 this.elementData[this.elementCount] this.elementData[this.elementCount-1] this.elementData[this.elementCount..] this.elementData[this.elementCount+1..] this.elementData[0..this.elementCount] this.elementData[0..this.elementCount-1] this.elementData[this.capacityIncrement] this.elementData[this.capacityIncrement-1] this.elementData[this.capacityIncrement..] this.elementData[this.capacityIncrement+1..] this.elementData[0..this.capacityIncrement] this.elementData[0..this.capacityIncrement-1] this.elementData[index] this.elementData[index-1] this.elementData[index..] this.elementData[index+1..] this.elementData[0..index] this.elementData[0..index-1] this.elementData[return] this.elementData[return-1] this.elementData[return..] this.elementData[return+1..] this.elementData[0..return] this.elementData[0..return-1] this.elementData[orig(this.elementCount)] this.elementData[orig(this.elementCount)-1] this.elementData[orig(this.elementCount)..] this.elementData[orig(this.elementCount)+1..] this.elementData[0..orig(this.elementCount)] this.elementData[0..orig(this.elementCount)-1] this.elementData[orig(this.capacityIncrement)] this.elementData[orig(this.capacityIncrement)-1] this.elementData[orig(this.capacityIncrement)..] this.elementData[orig(this.capacityIncrement)+1..] this.elementData[0..orig(this.capacityIncrement)] this.elementData[0..orig(this.capacityIncrement)-1] this.elementData[orig(index)] this.elementData[orig(index)-1] this.elementData[orig(index)..] this.elementData[orig(index)+1..] this.elementData[0..orig(index)] this.elementData[0..orig(index)-1] orig(this.elementData[post(this.elementCount)]) orig(this.elementData[post(this.elementCount)-1]) orig(this.elementData[post(this.elementCount)..]) orig(this.elementData[post(this.elementCount)+1..]) orig(this.elementData[0..post(this.elementCount)]) orig(this.elementData[0..post(this.elementCount)-1]) orig(this.elementData[post(this.capacityIncrement)]) orig(this.elementData[post(this.capacityIncrement)-1]) orig(this.elementData[post(this.capacityIncrement)..]) orig(this.elementData[post(this.capacityIncrement)+1..]) orig(this.elementData[0..post(this.capacityIncrement)]) orig(this.elementData[0..post(this.capacityIncrement)-1]) orig(this.elementData[post(index)]) orig(this.elementData[post(index)-1]) orig(this.elementData[post(index)..]) orig(this.elementData[post(index)+1..]) orig(this.elementData[0..post(index)]) orig(this.elementData[0..post(index)-1]) orig(this.elementData[post(return)]) orig(this.elementData[post(return)-1]) orig(this.elementData[post(return)..]) orig(this.elementData[post(return)+1..]) orig(this.elementData[0..post(return)]) orig(this.elementData[0..post(return)-1]) orig(this.elementData[this.elementCount]) orig(this.elementData[this.elementCount-1]) orig(this.elementData[this.elementCount..]) orig(this.elementData[this.elementCount+1..]) orig(this.elementData[0..this.elementCount]) orig(this.elementData[0..this.elementCount-1]) orig(this.elementData[this.capacityIncrement]) orig(this.elementData[this.capacityIncrement-1]) orig(this.elementData[this.capacityIncrement..]) orig(this.elementData[this.capacityIncrement+1..]) orig(this.elementData[0..this.capacityIncrement]) orig(this.elementData[0..this.capacityIncrement-1]) orig(this.elementData[index]) orig(this.elementData[index-1]) orig(this.elementData[index..]) orig(this.elementData[index+1..]) orig(this.elementData[0..index]) orig(this.elementData[0..index-1])
assignable this.elementData[this.elementCount], this.elementData[this.elementCount+1..], this.elementData[0..this.elementCount], this.elementData[this.capacityIncrement], this.elementData[this.capacityIncrement-1], this.elementData[this.capacityIncrement..], this.elementData[this.capacityIncrement+1..], this.elementData[0..this.capacityIncrement], this.elementData[0..this.capacityIncrement-1]
this.elementCount >= 1
\result >= 0
\old(index) >= 0
daikon.Quant.getElement_Object(this.elementData, \result) != null
daikon.Quant.memberOf(\old(elem.getClass().getName()) , daikon.Quant.typeArray(this.elementData) )
(!(\old(index) == 0)) || (\result == 0)
(!(daikon.Quant.size(this.elementData)-1 == 0)) || (\result == 0)
(!(daikon.Quant.size(this.elementData)-1 == 0)) || (\old(index) == 0)
===========================================================================
javautil.Vector13.lastIndexOf(java.lang.Object, int):::EXIT310
    Variables: this this.elementData this.elementData.getClass().getName() this.elementData[] this.elementData[].getClass().getName() this.elementCount this.capacityIncrement javautil.Vector13.serialVersionUID elem elem.getClass().getName() index return orig(this) orig(this.elementData) orig(this.elementData.getClass().getName()) orig(this.elementData[]) orig(this.elementData[].getClass().getName()) orig(this.elementCount) orig(this.capacityIncrement) orig(elem) orig(elem.getClass().getName()) orig(index) size(this.elementData[]) size(this.elementData[])-1 orig(size(this.elementData[])) orig(size(this.elementData[]))-1 this.elementData[this.elementCount] this.elementData[this.elementCount-1] this.elementData[this.elementCount..] this.elementData[this.elementCount+1..] this.elementData[0..this.elementCount] this.elementData[0..this.elementCount-1] this.elementData[this.capacityIncrement] this.elementData[this.capacityIncrement-1] this.elementData[this.capacityIncrement..] this.elementData[this.capacityIncrement+1..] this.elementData[0..this.capacityIncrement] this.elementData[0..this.capacityIncrement-1] this.elementData[index] this.elementData[index-1] this.elementData[index..] this.elementData[index+1..] this.elementData[0..index] this.elementData[0..index-1] this.elementData[return] this.elementData[return-1] this.elementData[return..] this.elementData[return+1..] this.elementData[0..return] this.elementData[0..return-1] this.elementData[orig(this.elementCount)] this.elementData[orig(this.elementCount)-1] this.elementData[orig(this.elementCount)..] this.elementData[orig(this.elementCount)+1..] this.elementData[0..orig(this.elementCount)] this.elementData[0..orig(this.elementCount)-1] this.elementData[orig(this.capacityIncrement)] this.elementData[orig(this.capacityIncrement)-1] this.elementData[orig(this.capacityIncrement)..] this.elementData[orig(this.capacityIncrement)+1..] this.elementData[0..orig(this.capacityIncrement)] this.elementData[0..orig(this.capacityIncrement)-1] this.elementData[orig(index)] this.elementData[orig(index)-1] this.elementData[orig(index)..] this.elementData[orig(index)+1..] this.elementData[0..orig(index)] this.elementData[0..orig(index)-1] orig(this.elementData[post(this.elementCount)]) orig(this.elementData[post(this.elementCount)-1]) orig(this.elementData[post(this.elementCount)..]) orig(this.elementData[post(this.elementCount)+1..]) orig(this.elementData[0..post(this.elementCount)]) orig(this.elementData[0..post(this.elementCount)-1]) orig(this.elementData[post(this.capacityIncrement)]) orig(this.elementData[post(this.capacityIncrement)-1]) orig(this.elementData[post(this.capacityIncrement)..]) orig(this.elementData[post(this.capacityIncrement)+1..]) orig(this.elementData[0..post(this.capacityIncrement)]) orig(this.elementData[0..post(this.capacityIncrement)-1]) orig(this.elementData[post(index)]) orig(this.elementData[post(index)-1]) orig(this.elementData[post(index)..]) orig(this.elementData[post(index)+1..]) orig(this.elementData[0..post(index)]) orig(this.elementData[0..post(index)-1]) orig(this.elementData[post(return)]) orig(this.elementData[post(return)-1]) orig(this.elementData[post(return)..]) orig(this.elementData[post(return)+1..]) orig(this.elementData[0..post(return)]) orig(this.elementData[0..post(return)-1]) orig(this.elementData[this.elementCount]) orig(this.elementData[this.elementCount-1]) orig(this.elementData[this.elementCount..]) orig(this.elementData[this.elementCount+1..]) orig(this.elementData[0..this.elementCount]) orig(this.elementData[0..this.elementCount-1]) orig(this.elementData[this.capacityIncrement]) orig(this.elementData[this.capacityIncrement-1]) orig(this.elementData[this.capacityIncrement..]) orig(this.elementData[this.capacityIncrement+1..]) orig(this.elementData[0..this.capacityIncrement]) orig(this.elementData[0..this.capacityIncrement-1]) orig(this.elementData[index]) orig(this.elementData[index-1]) orig(this.elementData[index..]) orig(this.elementData[index+1..]) orig(this.elementData[0..index]) orig(this.elementData[0..index-1])
assignable this.elementData[this.elementCount], this.elementData[this.elementCount-1], this.elementData[this.elementCount+1..], this.elementData[0..this.elementCount], this.elementData[this.capacityIncrement], this.elementData[this.capacityIncrement-1], this.elementData[this.capacityIncrement..], this.elementData[this.capacityIncrement+1..], this.elementData[0..this.capacityIncrement], this.elementData[0..this.capacityIncrement-1]
\result == -1
("oneOf.java.jpp: SEQUENCE unimplemented" != null)
this.capacityIncrement > \result
===========================================================================
javautil.Vector13.lastIndexOf(java.lang.Object, int):::EXIT
    Variables: this this.elementData this.elementData.getClass().getName() this.elementData[] this.elementData[].getClass().getName() this.elementCount this.capacityIncrement javautil.Vector13.serialVersionUID elem elem.getClass().getName() index return orig(this) orig(this.elementData) orig(this.elementData.getClass().getName()) orig(this.elementData[]) orig(this.elementData[].getClass().getName()) orig(this.elementCount) orig(this.capacityIncrement) orig(elem) orig(elem.getClass().getName()) orig(index) size(this.elementData[]) size(this.elementData[])-1 orig(size(this.elementData[])) orig(size(this.elementData[]))-1 this.elementData[this.elementCount] this.elementData[this.elementCount-1] this.elementData[this.elementCount..] this.elementData[this.elementCount+1..] this.elementData[0..this.elementCount] this.elementData[0..this.elementCount-1] this.elementData[this.capacityIncrement] this.elementData[this.capacityIncrement-1] this.elementData[this.capacityIncrement..] this.elementData[this.capacityIncrement+1..] this.elementData[0..this.capacityIncrement] this.elementData[0..this.capacityIncrement-1] this.elementData[index] this.elementData[index-1] this.elementData[index..] this.elementData[index+1..] this.elementData[0..index] this.elementData[0..index-1] this.elementData[return] this.elementData[return-1] this.elementData[return..] this.elementData[return+1..] this.elementData[0..return] this.elementData[0..return-1] this.elementData[orig(this.elementCount)] this.elementData[orig(this.elementCount)-1] this.elementData[orig(this.elementCount)..] this.elementData[orig(this.elementCount)+1..] this.elementData[0..orig(this.elementCount)] this.elementData[0..orig(this.elementCount)-1] this.elementData[orig(this.capacityIncrement)] this.elementData[orig(this.capacityIncrement)-1] this.elementData[orig(this.capacityIncrement)..] this.elementData[orig(this.capacityIncrement)+1..] this.elementData[0..orig(this.capacityIncrement)] this.elementData[0..orig(this.capacityIncrement)-1] this.elementData[orig(index)] this.elementData[orig(index)-1] this.elementData[orig(index)..] this.elementData[orig(index)+1..] this.elementData[0..orig(index)] this.elementData[0..orig(index)-1] orig(this.elementData[post(this.elementCount)]) orig(this.elementData[post(this.elementCount)-1]) orig(this.elementData[post(this.elementCount)..]) orig(this.elementData[post(this.elementCount)+1..]) orig(this.elementData[0..post(this.elementCount)]) orig(this.elementData[0..post(this.elementCount)-1]) orig(this.elementData[post(this.capacityIncrement)]) orig(this.elementData[post(this.capacityIncrement)-1]) orig(this.elementData[post(this.capacityIncrement)..]) orig(this.elementData[post(this.capacityIncrement)+1..]) orig(this.elementData[0..post(this.capacityIncrement)]) orig(this.elementData[0..post(this.capacityIncrement)-1]) orig(this.elementData[post(index)]) orig(this.elementData[post(index)-1]) orig(this.elementData[post(index)..]) orig(this.elementData[post(index)+1..]) orig(this.elementData[0..post(index)]) orig(this.elementData[0..post(index)-1]) orig(this.elementData[post(return)]) orig(this.elementData[post(return)-1]) orig(this.elementData[post(return)..]) orig(this.elementData[post(return)+1..]) orig(this.elementData[0..post(return)]) orig(this.elementData[0..post(return)-1]) orig(this.elementData[this.elementCount]) orig(this.elementData[this.elementCount-1]) orig(this.elementData[this.elementCount..]) orig(this.elementData[this.elementCount+1..]) orig(this.elementData[0..this.elementCount]) orig(this.elementData[0..this.elementCount-1]) orig(this.elementData[this.capacityIncrement]) orig(this.elementData[this.capacityIncrement-1]) orig(this.elementData[this.capacityIncrement..]) orig(this.elementData[this.capacityIncrement+1..]) orig(this.elementData[0..this.capacityIncrement]) orig(this.elementData[0..this.capacityIncrement-1]) orig(this.elementData[index]) orig(this.elementData[index-1]) orig(this.elementData[index..]) orig(this.elementData[index+1..]) orig(this.elementData[0..index]) orig(this.elementData[0..index-1])
assignable this.elementData[this.elementCount], this.elementData[this.elementCount-1], this.elementData[this.elementCount+1..], this.elementData[0..this.elementCount], this.elementData[this.capacityIncrement], this.elementData[this.capacityIncrement-1], this.elementData[this.capacityIncrement..], this.elementData[this.capacityIncrement+1..], this.elementData[0..this.capacityIncrement], this.elementData[0..this.capacityIncrement-1]
this.elementData == \old(this.elementData)
this.elementData.getClass().getName() == \old(this.elementData.getClass().getName())
daikon.Quant.pairwiseEqual(this.elementData, \old(this.elementData))
this.elementCount == \old(this.elementCount)
this.capacityIncrement == \old(this.capacityIncrement)
(\result == -1)  ==>  (\old(index) >= -1)
(\result == -1)  ==>  (this.capacityIncrement > \result)
(\result == -1)  ==>  (("oneOf.java.jpp: SEQUENCE unimplemented" != null))
(\result >= 0)  ==>  ((!(\old(index) == 0)) || (\result == 0))
(\result >= 0)  ==>  ((!(daikon.Quant.size(this.elementData)-1 == 0)) || (\old(index) == 0))
(\result >= 0)  ==>  ((!(daikon.Quant.size(this.elementData)-1 == 0)) || (\result == 0))
(\result >= 0)  ==>  (daikon.Quant.memberOf(\old(elem.getClass().getName()) , daikon.Quant.typeArray(this.elementData) ))
(\result >= 0)  ==>  (\old(index) >= 0)
(\result >= 0)  ==>  (\old(daikon.Quant.getElement_Object(this.elementData, \new(\result))) != null)
(\result >= 0)  ==>  (this.elementCount >= 1)
(\result >= 0)  ==>  (daikon.Quant.getElement_Object(this.elementData, \result) != null)
\result >= -1
this.elementData.getClass().getName() != \old(elem.getClass().getName())
this.elementCount > \result
this.elementCount > \old(index)
(!(daikon.Quant.size(this.elementData) == 0)) || (this.elementCount == 0)
this.elementCount <= daikon.Quant.size(this.elementData)
\result <= \old(index)
\result <= daikon.Quant.size(this.elementData)-1
\old(index) <= daikon.Quant.size(this.elementData)-1
===========================================================================
javautil.Vector13.removeAllElements():::ENTER
    Variables: this this.elementData this.elementData.getClass().getName() this.elementData[] this.elementData[].getClass().getName() this.elementCount this.capacityIncrement javautil.Vector13.serialVersionUID size(this.elementData[]) size(this.elementData[])-1 this.elementData[this.elementCount] this.elementData[this.elementCount-1] this.elementData[this.elementCount..] this.elementData[this.elementCount+1..] this.elementData[0..this.elementCount] this.elementData[0..this.elementCount-1] this.elementData[this.capacityIncrement] this.elementData[this.capacityIncrement-1] this.elementData[this.capacityIncrement..] this.elementData[this.capacityIncrement+1..] this.elementData[0..this.capacityIncrement] this.elementData[0..this.capacityIncrement-1]
(!(daikon.Quant.size(this.elementData) == 0)) || (this.elementCount == 0)
this.elementCount <= daikon.Quant.size(this.elementData)
===========================================================================
javautil.Vector13.removeAllElements():::EXIT
    Variables: this this.elementData this.elementData.getClass().getName() this.elementData[] this.elementData[].getClass().getName() this.elementCount this.capacityIncrement javautil.Vector13.serialVersionUID orig(this) orig(this.elementData) orig(this.elementData.getClass().getName()) orig(this.elementData[]) orig(this.elementData[].getClass().getName()) orig(this.elementCount) orig(this.capacityIncrement) size(this.elementData[]) size(this.elementData[])-1 orig(size(this.elementData[])) orig(size(this.elementData[]))-1 this.elementData[this.elementCount] this.elementData[this.elementCount-1] this.elementData[this.elementCount..] this.elementData[this.elementCount+1..] this.elementData[0..this.elementCount] this.elementData[0..this.elementCount-1] this.elementData[this.capacityIncrement] this.elementData[this.capacityIncrement-1] this.elementData[this.capacityIncrement..] this.elementData[this.capacityIncrement+1..] this.elementData[0..this.capacityIncrement] this.elementData[0..this.capacityIncrement-1] this.elementData[orig(this.elementCount)] this.elementData[orig(this.elementCount)-1] this.elementData[orig(this.elementCount)..] this.elementData[orig(this.elementCount)+1..] this.elementData[0..orig(this.elementCount)] this.elementData[0..orig(this.elementCount)-1] this.elementData[orig(this.capacityIncrement)] this.elementData[orig(this.capacityIncrement)-1] this.elementData[orig(this.capacityIncrement)..] this.elementData[orig(this.capacityIncrement)+1..] this.elementData[0..orig(this.capacityIncrement)] this.elementData[0..orig(this.capacityIncrement)-1] orig(this.elementData[post(this.elementCount)]) orig(this.elementData[post(this.elementCount)-1]) orig(this.elementData[post(this.elementCount)..]) orig(this.elementData[post(this.elementCount)+1..]) orig(this.elementData[0..post(this.elementCount)]) orig(this.elementData[0..post(this.elementCount)-1]) orig(this.elementData[post(this.capacityIncrement)]) orig(this.elementData[post(this.capacityIncrement)-1]) orig(this.elementData[post(this.capacityIncrement)..]) orig(this.elementData[post(this.capacityIncrement)+1..]) orig(this.elementData[0..post(this.capacityIncrement)]) orig(this.elementData[0..post(this.capacityIncrement)-1]) orig(this.elementData[this.elementCount]) orig(this.elementData[this.elementCount-1]) orig(this.elementData[this.elementCount..]) orig(this.elementData[this.elementCount+1..]) orig(this.elementData[0..this.elementCount]) orig(this.elementData[0..this.elementCount-1]) orig(this.elementData[this.capacityIncrement]) orig(this.elementData[this.capacityIncrement-1]) orig(this.elementData[this.capacityIncrement..]) orig(this.elementData[this.capacityIncrement+1..]) orig(this.elementData[0..this.capacityIncrement]) orig(this.elementData[0..this.capacityIncrement-1])
assignable this.elementData[*], this.elementCount, this.elementData[this.elementCount], this.elementData[this.elementCount-1], this.elementData[this.elementCount+1..], this.elementData[0..this.elementCount], this.elementData[0..this.elementCount-1], this.elementData[this.capacityIncrement], this.elementData[this.capacityIncrement-1], this.elementData[this.capacityIncrement..], this.elementData[this.capacityIncrement+1..], this.elementData[0..this.capacityIncrement], this.elementData[0..this.capacityIncrement-1]
this.elementData == \old(this.elementData)
this.elementData.getClass().getName() == \old(this.elementData.getClass().getName())
this.capacityIncrement == \old(this.capacityIncrement)
daikon.Quant.size(this.elementData) == \old(daikon.Quant.size(this.elementData))
daikon.Quant.pairwiseEqual(daikon.Quant.slice(this.elementData, \old(this.elementCount), daikon.Quant.size(this.elementData)), \old(daikon.Quant.slice(this.elementData, this.elementCount, daikon.Quant.size(this.elementData))))
daikon.Quant.eltsEqual(this.elementData, null)
daikon.Quant.eltsEqual(daikon.Quant.typeArray(this.elementData), null)
this.elementCount == 0
("oneOf.java.jpp: SEQUENCE unimplemented" != null)
this.elementCount <= this.capacityIncrement
this.elementCount <= \old(this.elementCount)
this.elementCount <= daikon.Quant.size(this.elementData)
(!(daikon.Quant.size(this.elementData) == 0)) || (\old(this.elementCount) == 0)
\old(this.elementCount) <= daikon.Quant.size(this.elementData)
===========================================================================
javautil.Vector13.removeElement(java.lang.Object):::ENTER
    Variables: this this.elementData this.elementData.getClass().getName() this.elementData[] this.elementData[].getClass().getName() this.elementCount this.capacityIncrement javautil.Vector13.serialVersionUID obj obj.getClass().getName() size(this.elementData[]) size(this.elementData[])-1 this.elementData[this.elementCount] this.elementData[this.elementCount-1] this.elementData[this.elementCount..] this.elementData[this.elementCount+1..] this.elementData[0..this.elementCount] this.elementData[0..this.elementCount-1] this.elementData[this.capacityIncrement] this.elementData[this.capacityIncrement-1] this.elementData[this.capacityIncrement..] this.elementData[this.capacityIncrement+1..] this.elementData[0..this.capacityIncrement] this.elementData[0..this.capacityIncrement-1]
obj != null
warning: method daikon.inv.unary.string.PrintableString.format(OutputFormat:JML) needs to be implemented: obj.getClass().getName() is printable
this.elementData.getClass().getName() != obj.getClass().getName()
(!(daikon.Quant.size(this.elementData) == 0)) || (this.elementCount == 0)
this.elementCount <= daikon.Quant.size(this.elementData)
===========================================================================
javautil.Vector13.removeElement(java.lang.Object):::EXIT480
    Variables: this this.elementData this.elementData.getClass().getName() this.elementData[] this.elementData[].getClass().getName() this.elementCount this.capacityIncrement javautil.Vector13.serialVersionUID obj obj.getClass().getName() return orig(this) orig(this.elementData) orig(this.elementData.getClass().getName()) orig(this.elementData[]) orig(this.elementData[].getClass().getName()) orig(this.elementCount) orig(this.capacityIncrement) orig(obj) orig(obj.getClass().getName()) size(this.elementData[]) size(this.elementData[])-1 orig(size(this.elementData[])) orig(size(this.elementData[]))-1 this.elementData[this.elementCount] this.elementData[this.elementCount-1] this.elementData[this.elementCount..] this.elementData[this.elementCount+1..] this.elementData[0..this.elementCount] this.elementData[0..this.elementCount-1] this.elementData[this.capacityIncrement] this.elementData[this.capacityIncrement-1] this.elementData[this.capacityIncrement..] this.elementData[this.capacityIncrement+1..] this.elementData[0..this.capacityIncrement] this.elementData[0..this.capacityIncrement-1] this.elementData[orig(this.elementCount)] this.elementData[orig(this.elementCount)-1] this.elementData[orig(this.elementCount)..] this.elementData[orig(this.elementCount)+1..] this.elementData[0..orig(this.elementCount)] this.elementData[0..orig(this.elementCount)-1] this.elementData[orig(this.capacityIncrement)] this.elementData[orig(this.capacityIncrement)-1] this.elementData[orig(this.capacityIncrement)..] this.elementData[orig(this.capacityIncrement)+1..] this.elementData[0..orig(this.capacityIncrement)] this.elementData[0..orig(this.capacityIncrement)-1] orig(this.elementData[post(this.elementCount)]) orig(this.elementData[post(this.elementCount)-1]) orig(this.elementData[post(this.elementCount)..]) orig(this.elementData[post(this.elementCount)+1..]) orig(this.elementData[0..post(this.elementCount)]) orig(this.elementData[0..post(this.elementCount)-1]) orig(this.elementData[post(this.capacityIncrement)]) orig(this.elementData[post(this.capacityIncrement)-1]) orig(this.elementData[post(this.capacityIncrement)..]) orig(this.elementData[post(this.capacityIncrement)+1..]) orig(this.elementData[0..post(this.capacityIncrement)]) orig(this.elementData[0..post(this.capacityIncrement)-1]) orig(this.elementData[this.elementCount]) orig(this.elementData[this.elementCount-1]) orig(this.elementData[this.elementCount..]) orig(this.elementData[this.elementCount+1..]) orig(this.elementData[0..this.elementCount]) orig(this.elementData[0..this.elementCount-1]) orig(this.elementData[this.capacityIncrement]) orig(this.elementData[this.capacityIncrement-1]) orig(this.elementData[this.capacityIncrement..]) orig(this.elementData[this.capacityIncrement+1..]) orig(this.elementData[0..this.capacityIncrement]) orig(this.elementData[0..this.capacityIncrement-1])
assignable this.elementData[*], this.elementCount, this.elementData[this.elementCount], this.elementData[this.elementCount-1], this.elementData[this.elementCount+1..], this.elementData[0..this.elementCount], this.elementData[0..this.elementCount-1], this.elementData[this.capacityIncrement], this.elementData[this.capacityIncrement-1], this.elementData[this.capacityIncrement..], this.elementData[this.capacityIncrement+1..], this.elementData[0..this.capacityIncrement], this.elementData[0..this.capacityIncrement-1]
daikon.Quant.getElement_Object(this.elementData, this.elementCount) == daikon.Quant.getElement_Object(this.elementData, \old(this.elementCount)-1)
daikon.Quant.pairwiseEqual(daikon.Quant.slice(this.elementData, this.elementCount+1, daikon.Quant.size(this.elementData)), \old(daikon.Quant.slice(this.elementData, \new(this.elementCount)+1, daikon.Quant.size(this.elementData))))
daikon.Quant.pairwiseEqual(daikon.Quant.slice(this.elementData, this.elementCount+1, daikon.Quant.size(this.elementData)), \old(daikon.Quant.slice(this.elementData, this.elementCount, daikon.Quant.size(this.elementData))))
\old(daikon.Quant.getElement_Object(this.elementData, \new(this.elementCount))) == \old(daikon.Quant.getElement_Object(this.elementData, this.elementCount-1))
\result == true
\old(this.elementCount) >= 1
this.elementCount - \old(this.elementCount) + 1 == 0
(!(daikon.Quant.size(this.elementData)-1 == 0)) || (this.elementCount == 0)
this.elementCount <= daikon.Quant.size(this.elementData)-1
daikon.Quant.memberOf(\old(obj.getClass().getName()) , \old(daikon.Quant.typeArray(this.elementData)) )
daikon.Quant.eltsEqual(daikon.Quant.slice(this.elementData, this.elementCount, daikon.Quant.size(this.elementData)), daikon.Quant.getElement_Object(this.elementData, this.elementCount))
daikon.Quant.subsetOf(daikon.Quant.slice(this.elementData, 0, this.elementCount-1), \old(daikon.Quant.slice(this.elementData, 0, \new(this.elementCount))))
===========================================================================
javautil.Vector13.removeElement(java.lang.Object):::EXIT482
    Variables: this this.elementData this.elementData.getClass().getName() this.elementData[] this.elementData[].getClass().getName() this.elementCount this.capacityIncrement javautil.Vector13.serialVersionUID obj obj.getClass().getName() return orig(this) orig(this.elementData) orig(this.elementData.getClass().getName()) orig(this.elementData[]) orig(this.elementData[].getClass().getName()) orig(this.elementCount) orig(this.capacityIncrement) orig(obj) orig(obj.getClass().getName()) size(this.elementData[]) size(this.elementData[])-1 orig(size(this.elementData[])) orig(size(this.elementData[]))-1 this.elementData[this.elementCount] this.elementData[this.elementCount-1] this.elementData[this.elementCount..] this.elementData[this.elementCount+1..] this.elementData[0..this.elementCount] this.elementData[0..this.elementCount-1] this.elementData[this.capacityIncrement] this.elementData[this.capacityIncrement-1] this.elementData[this.capacityIncrement..] this.elementData[this.capacityIncrement+1..] this.elementData[0..this.capacityIncrement] this.elementData[0..this.capacityIncrement-1] this.elementData[orig(this.elementCount)] this.elementData[orig(this.elementCount)-1] this.elementData[orig(this.elementCount)..] this.elementData[orig(this.elementCount)+1..] this.elementData[0..orig(this.elementCount)] this.elementData[0..orig(this.elementCount)-1] this.elementData[orig(this.capacityIncrement)] this.elementData[orig(this.capacityIncrement)-1] this.elementData[orig(this.capacityIncrement)..] this.elementData[orig(this.capacityIncrement)+1..] this.elementData[0..orig(this.capacityIncrement)] this.elementData[0..orig(this.capacityIncrement)-1] orig(this.elementData[post(this.elementCount)]) orig(this.elementData[post(this.elementCount)-1]) orig(this.elementData[post(this.elementCount)..]) orig(this.elementData[post(this.elementCount)+1..]) orig(this.elementData[0..post(this.elementCount)]) orig(this.elementData[0..post(this.elementCount)-1]) orig(this.elementData[post(this.capacityIncrement)]) orig(this.elementData[post(this.capacityIncrement)-1]) orig(this.elementData[post(this.capacityIncrement)..]) orig(this.elementData[post(this.capacityIncrement)+1..]) orig(this.elementData[0..post(this.capacityIncrement)]) orig(this.elementData[0..post(this.capacityIncrement)-1]) orig(this.elementData[this.elementCount]) orig(this.elementData[this.elementCount-1]) orig(this.elementData[this.elementCount..]) orig(this.elementData[this.elementCount+1..]) orig(this.elementData[0..this.elementCount]) orig(this.elementData[0..this.elementCount-1]) orig(this.elementData[this.capacityIncrement]) orig(this.elementData[this.capacityIncrement-1]) orig(this.elementData[this.capacityIncrement..]) orig(this.elementData[this.capacityIncrement+1..]) orig(this.elementData[0..this.capacityIncrement]) orig(this.elementData[0..this.capacityIncrement-1])
assignable this.elementData[this.elementCount], this.elementData[this.elementCount-1], this.elementData[this.elementCount+1..], this.elementData[0..this.elementCount], this.elementData[this.capacityIncrement], this.elementData[this.capacityIncrement-1], this.elementData[this.capacityIncrement..], this.elementData[this.capacityIncrement+1..], this.elementData[0..this.capacityIncrement], this.elementData[0..this.capacityIncrement-1]
daikon.Quant.pairwiseEqual(this.elementData, \old(this.elementData))
this.elementCount == \old(this.elementCount)
\result == false
===========================================================================
javautil.Vector13.removeElement(java.lang.Object):::EXIT
    Variables: this this.elementData this.elementData.getClass().getName() this.elementData[] this.elementData[].getClass().getName() this.elementCount this.capacityIncrement javautil.Vector13.serialVersionUID obj obj.getClass().getName() return orig(this) orig(this.elementData) orig(this.elementData.getClass().getName()) orig(this.elementData[]) orig(this.elementData[].getClass().getName()) orig(this.elementCount) orig(this.capacityIncrement) orig(obj) orig(obj.getClass().getName()) size(this.elementData[]) size(this.elementData[])-1 orig(size(this.elementData[])) orig(size(this.elementData[]))-1 this.elementData[this.elementCount] this.elementData[this.elementCount-1] this.elementData[this.elementCount..] this.elementData[this.elementCount+1..] this.elementData[0..this.elementCount] this.elementData[0..this.elementCount-1] this.elementData[this.capacityIncrement] this.elementData[this.capacityIncrement-1] this.elementData[this.capacityIncrement..] this.elementData[this.capacityIncrement+1..] this.elementData[0..this.capacityIncrement] this.elementData[0..this.capacityIncrement-1] this.elementData[orig(this.elementCount)] this.elementData[orig(this.elementCount)-1] this.elementData[orig(this.elementCount)..] this.elementData[orig(this.elementCount)+1..] this.elementData[0..orig(this.elementCount)] this.elementData[0..orig(this.elementCount)-1] this.elementData[orig(this.capacityIncrement)] this.elementData[orig(this.capacityIncrement)-1] this.elementData[orig(this.capacityIncrement)..] this.elementData[orig(this.capacityIncrement)+1..] this.elementData[0..orig(this.capacityIncrement)] this.elementData[0..orig(this.capacityIncrement)-1] orig(this.elementData[post(this.elementCount)]) orig(this.elementData[post(this.elementCount)-1]) orig(this.elementData[post(this.elementCount)..]) orig(this.elementData[post(this.elementCount)+1..]) orig(this.elementData[0..post(this.elementCount)]) orig(this.elementData[0..post(this.elementCount)-1]) orig(this.elementData[post(this.capacityIncrement)]) orig(this.elementData[post(this.capacityIncrement)-1]) orig(this.elementData[post(this.capacityIncrement)..]) orig(this.elementData[post(this.capacityIncrement)+1..]) orig(this.elementData[0..post(this.capacityIncrement)]) orig(this.elementData[0..post(this.capacityIncrement)-1]) orig(this.elementData[this.elementCount]) orig(this.elementData[this.elementCount-1]) orig(this.elementData[this.elementCount..]) orig(this.elementData[this.elementCount+1..]) orig(this.elementData[0..this.elementCount]) orig(this.elementData[0..this.elementCount-1]) orig(this.elementData[this.capacityIncrement]) orig(this.elementData[this.capacityIncrement-1]) orig(this.elementData[this.capacityIncrement..]) orig(this.elementData[this.capacityIncrement+1..]) orig(this.elementData[0..this.capacityIncrement]) orig(this.elementData[0..this.capacityIncrement-1])
assignable this.elementData[*], this.elementCount, this.elementData[this.elementCount], this.elementData[this.elementCount-1], this.elementData[this.elementCount..], this.elementData[this.elementCount+1..], this.elementData[0..this.elementCount], this.elementData[0..this.elementCount-1], this.elementData[this.capacityIncrement], this.elementData[this.capacityIncrement-1], this.elementData[this.capacityIncrement..], this.elementData[this.capacityIncrement+1..], this.elementData[0..this.capacityIncrement], this.elementData[0..this.capacityIncrement-1]
this.elementData == \old(this.elementData)
this.elementData.getClass().getName() == \old(this.elementData.getClass().getName())
this.capacityIncrement == \old(this.capacityIncrement)
daikon.Quant.size(this.elementData) == \old(daikon.Quant.size(this.elementData))
daikon.Quant.pairwiseEqual(daikon.Quant.slice(this.elementData, \old(this.elementCount), daikon.Quant.size(this.elementData)), \old(daikon.Quant.slice(this.elementData, this.elementCount, daikon.Quant.size(this.elementData))))
(\result == false)  <==>  (this.elementCount == \old(this.elementCount))
(\result == false)  ==>  (daikon.Quant.eltsEqual(\old(daikon.Quant.slice(this.elementData, \new(this.elementCount), daikon.Quant.size(this.elementData))), null))
(\result == false)  ==>  (daikon.Quant.pairwiseEqual(this.elementData, \old(this.elementData)))
(\result == true)  <==>  (this.elementCount - \old(this.elementCount) + 1 == 0)
(\result == true)  ==>  ((!(daikon.Quant.size(this.elementData)-1 == 0)) || (this.elementCount == 0))
(\result == true)  ==>  (daikon.Quant.memberOf(\old(obj.getClass().getName()) , \old(daikon.Quant.typeArray(this.elementData)) ))
(\result == true)  ==>  (\old(this.elementCount) >= 1)
(\result == true)  ==>  (\old(daikon.Quant.getElement_Object(this.elementData, \new(this.elementCount))) == \old(daikon.Quant.getElement_Object(this.elementData, this.elementCount-1)))
(\result == true)  ==>  (this.elementCount <= daikon.Quant.size(this.elementData)-1)
(\result == true)  ==>  (daikon.Quant.subsetOf(daikon.Quant.slice(this.elementData, 0, this.elementCount-1), \old(daikon.Quant.slice(this.elementData, 0, \new(this.elementCount)))))
(\result == true)  ==>  (daikon.Quant.pairwiseEqual(daikon.Quant.slice(this.elementData, this.elementCount+1, daikon.Quant.size(this.elementData)), \old(daikon.Quant.slice(this.elementData, \new(this.elementCount)+1, daikon.Quant.size(this.elementData)))))
(\result == true)  ==>  (daikon.Quant.eltsEqual(daikon.Quant.slice(this.elementData, this.elementCount, daikon.Quant.size(this.elementData)), daikon.Quant.getElement_Object(this.elementData, \old(this.elementCount)-1)))
(\result == true)  ==>  (daikon.Quant.eltsEqual(daikon.Quant.slice(this.elementData, this.elementCount, daikon.Quant.size(this.elementData)), daikon.Quant.getElement_Object(this.elementData, this.elementCount)))
(\result == true)  ==>  (daikon.Quant.getElement_Object(this.elementData, this.elementCount) == daikon.Quant.getElement_Object(this.elementData, \old(this.elementCount)-1))
this.elementData.getClass().getName() != \old(obj.getClass().getName())
(!(\old(this.elementCount) == 0)) || (this.elementCount == 0)
this.elementCount <= \old(this.elementCount)
(!(daikon.Quant.size(this.elementData) == 0)) || (this.elementCount == 0)
this.elementCount <= daikon.Quant.size(this.elementData)
(!(daikon.Quant.size(this.elementData) == 0)) || (\old(this.elementCount) == 0)
\old(this.elementCount) <= daikon.Quant.size(this.elementData)
daikon.Quant.subsetOf(daikon.Quant.slice(this.elementData, 0, this.elementCount-1), \old(daikon.Quant.slice(this.elementData, 0, this.elementCount-1)))
===========================================================================
javautil.Vector13.removeElementAt(int):::ENTER
    Variables: this this.elementData this.elementData.getClass().getName() this.elementData[] this.elementData[].getClass().getName() this.elementCount this.capacityIncrement javautil.Vector13.serialVersionUID index size(this.elementData[]) size(this.elementData[])-1 this.elementData[this.elementCount] this.elementData[this.elementCount-1] this.elementData[this.elementCount..] this.elementData[this.elementCount+1..] this.elementData[0..this.elementCount] this.elementData[0..this.elementCount-1] this.elementData[this.capacityIncrement] this.elementData[this.capacityIncrement-1] this.elementData[this.capacityIncrement..] this.elementData[this.capacityIncrement+1..] this.elementData[0..this.capacityIncrement] this.elementData[0..this.capacityIncrement-1] this.elementData[index] this.elementData[index-1] this.elementData[index..] this.elementData[index+1..] this.elementData[0..index] this.elementData[0..index-1]
this.elementCount >= 1
index >= 0
this.elementCount > index
this.elementCount <= daikon.Quant.size(this.elementData)
(!(daikon.Quant.size(this.elementData)-1 == 0)) || (index == 0)
index <= daikon.Quant.size(this.elementData)-1
===========================================================================
javautil.Vector13.removeElementAt(int):::EXIT
    Variables: this this.elementData this.elementData.getClass().getName() this.elementData[] this.elementData[].getClass().getName() this.elementCount this.capacityIncrement javautil.Vector13.serialVersionUID index orig(this) orig(this.elementData) orig(this.elementData.getClass().getName()) orig(this.elementData[]) orig(this.elementData[].getClass().getName()) orig(this.elementCount) orig(this.capacityIncrement) orig(index) size(this.elementData[]) size(this.elementData[])-1 orig(size(this.elementData[])) orig(size(this.elementData[]))-1 this.elementData[this.elementCount] this.elementData[this.elementCount-1] this.elementData[this.elementCount..] this.elementData[this.elementCount+1..] this.elementData[0..this.elementCount] this.elementData[0..this.elementCount-1] this.elementData[this.capacityIncrement] this.elementData[this.capacityIncrement-1] this.elementData[this.capacityIncrement..] this.elementData[this.capacityIncrement+1..] this.elementData[0..this.capacityIncrement] this.elementData[0..this.capacityIncrement-1] this.elementData[index] this.elementData[index-1] this.elementData[index..] this.elementData[index+1..] this.elementData[0..index] this.elementData[0..index-1] this.elementData[orig(this.elementCount)] this.elementData[orig(this.elementCount)-1] this.elementData[orig(this.elementCount)..] this.elementData[orig(this.elementCount)+1..] this.elementData[0..orig(this.elementCount)] this.elementData[0..orig(this.elementCount)-1] this.elementData[orig(this.capacityIncrement)] this.elementData[orig(this.capacityIncrement)-1] this.elementData[orig(this.capacityIncrement)..] this.elementData[orig(this.capacityIncrement)+1..] this.elementData[0..orig(this.capacityIncrement)] this.elementData[0..orig(this.capacityIncrement)-1] this.elementData[orig(index)] this.elementData[orig(index)-1] this.elementData[orig(index)..] this.elementData[orig(index)+1..] this.elementData[0..orig(index)] this.elementData[0..orig(index)-1] orig(this.elementData[post(this.elementCount)]) orig(this.elementData[post(this.elementCount)-1]) orig(this.elementData[post(this.elementCount)..]) orig(this.elementData[post(this.elementCount)+1..]) orig(this.elementData[0..post(this.elementCount)]) orig(this.elementData[0..post(this.elementCount)-1]) orig(this.elementData[post(this.capacityIncrement)]) orig(this.elementData[post(this.capacityIncrement)-1]) orig(this.elementData[post(this.capacityIncrement)..]) orig(this.elementData[post(this.capacityIncrement)+1..]) orig(this.elementData[0..post(this.capacityIncrement)]) orig(this.elementData[0..post(this.capacityIncrement)-1]) orig(this.elementData[post(index)]) orig(this.elementData[post(index)-1]) orig(this.elementData[post(index)..]) orig(this.elementData[post(index)+1..]) orig(this.elementData[0..post(index)]) orig(this.elementData[0..post(index)-1]) orig(this.elementData[this.elementCount]) orig(this.elementData[this.elementCount-1]) orig(this.elementData[this.elementCount..]) orig(this.elementData[this.elementCount+1..]) orig(this.elementData[0..this.elementCount]) orig(this.elementData[0..this.elementCount-1]) orig(this.elementData[this.capacityIncrement]) orig(this.elementData[this.capacityIncrement-1]) orig(this.elementData[this.capacityIncrement..]) orig(this.elementData[this.capacityIncrement+1..]) orig(this.elementData[0..this.capacityIncrement]) orig(this.elementData[0..this.capacityIncrement-1]) orig(this.elementData[index]) orig(this.elementData[index-1]) orig(this.elementData[index..]) orig(this.elementData[index+1..]) orig(this.elementData[0..index]) orig(this.elementData[0..index-1])
assignable this.elementData[*], this.elementCount, this.elementData[this.elementCount], this.elementData[this.elementCount-1], this.elementData[this.elementCount+1..], this.elementData[0..this.elementCount], this.elementData[0..this.elementCount-1], this.elementData[this.capacityIncrement], this.elementData[this.capacityIncrement-1], this.elementData[this.capacityIncrement..], this.elementData[this.capacityIncrement+1..], this.elementData[0..this.capacityIncrement], this.elementData[0..this.capacityIncrement-1]
this.elementData == \old(this.elementData)
this.elementData.getClass().getName() == \old(this.elementData.getClass().getName())
this.capacityIncrement == \old(this.capacityIncrement)
daikon.Quant.size(this.elementData) == \old(daikon.Quant.size(this.elementData))
daikon.Quant.getElement_Object(this.elementData, this.elementCount) == daikon.Quant.getElement_Object(this.elementData, \old(this.elementCount)-1)
daikon.Quant.pairwiseEqual(daikon.Quant.slice(this.elementData, this.elementCount+1, daikon.Quant.size(this.elementData)), \old(daikon.Quant.slice(this.elementData, \new(this.elementCount)+1, daikon.Quant.size(this.elementData))))
daikon.Quant.pairwiseEqual(daikon.Quant.slice(this.elementData, this.elementCount+1, daikon.Quant.size(this.elementData)), \old(daikon.Quant.slice(this.elementData, this.elementCount, daikon.Quant.size(this.elementData))))
daikon.Quant.pairwiseEqual(daikon.Quant.slice(this.elementData, 0, \old(index)-1), \old(daikon.Quant.slice(this.elementData, 0, \new(index)-1)))
daikon.Quant.pairwiseEqual(daikon.Quant.slice(this.elementData, 0, \old(index)-1), \old(daikon.Quant.slice(this.elementData, 0, index-1)))
\old(daikon.Quant.getElement_Object(this.elementData, \new(this.elementCount))) == \old(daikon.Quant.getElement_Object(this.elementData, this.elementCount-1))
this.elementCount - \old(this.elementCount) + 1 == 0
(!(this.elementCount == 0)) || (\old(index) == 0)
this.elementCount >= \old(index)
(!(daikon.Quant.size(this.elementData)-1 == 0)) || (this.elementCount == 0)
this.elementCount <= daikon.Quant.size(this.elementData)-1
\old(this.elementCount) <= daikon.Quant.size(this.elementData)
(!(daikon.Quant.size(this.elementData)-1 == 0)) || (\old(index) == 0)
\old(index) <= daikon.Quant.size(this.elementData)-1
daikon.Quant.eltsEqual(daikon.Quant.slice(this.elementData, this.elementCount, daikon.Quant.size(this.elementData)), daikon.Quant.getElement_Object(this.elementData, this.elementCount))
daikon.Quant.subsetOf(daikon.Quant.slice(this.elementData, 0, this.elementCount-1), \old(daikon.Quant.slice(this.elementData, 0, \new(this.elementCount))))
warning: method daikon.inv.binary.twoSequence.SuperSequence.format(OutputFormat:JML) needs to be implemented: orig(this.elementData[index+1..]) is a subsequence of this.elementData[orig(index)..]
===========================================================================
javautil.Vector13.setElementAt(java.lang.Object, int):::ENTER
    Variables: this this.elementData this.elementData.getClass().getName() this.elementData[] this.elementData[].getClass().getName() this.elementCount this.capacityIncrement javautil.Vector13.serialVersionUID obj obj.getClass().getName() index size(this.elementData[]) size(this.elementData[])-1 this.elementData[this.elementCount] this.elementData[this.elementCount-1] this.elementData[this.elementCount..] this.elementData[this.elementCount+1..] this.elementData[0..this.elementCount] this.elementData[0..this.elementCount-1] this.elementData[this.capacityIncrement] this.elementData[this.capacityIncrement-1] this.elementData[this.capacityIncrement..] this.elementData[this.capacityIncrement+1..] this.elementData[0..this.capacityIncrement] this.elementData[0..this.capacityIncrement-1] this.elementData[index] this.elementData[index-1] this.elementData[index..] this.elementData[index+1..] this.elementData[0..index] this.elementData[0..index-1]
(obj != null)  ==>  (warning: method daikon.inv.unary.string.PrintableString.format(OutputFormat:JML) needs to be implemented: obj.getClass().getName() is printable)
index >= 0
(obj != null)  ==>  (this.elementData.getClass().getName() != obj.getClass().getName())
this.elementCount > index
this.elementCount <= daikon.Quant.size(this.elementData)
(!(daikon.Quant.size(this.elementData)-1 == 0)) || (index == 0)
index <= daikon.Quant.size(this.elementData)-1
===========================================================================
javautil.Vector13.setElementAt(java.lang.Object, int):::EXIT
    Variables: this this.elementData this.elementData.getClass().getName() this.elementData[] this.elementData[].getClass().getName() this.elementCount this.capacityIncrement javautil.Vector13.serialVersionUID obj obj.getClass().getName() index orig(this) orig(this.elementData) orig(this.elementData.getClass().getName()) orig(this.elementData[]) orig(this.elementData[].getClass().getName()) orig(this.elementCount) orig(this.capacityIncrement) orig(obj) orig(obj.getClass().getName()) orig(index) size(this.elementData[]) size(this.elementData[])-1 orig(size(this.elementData[])) orig(size(this.elementData[]))-1 this.elementData[this.elementCount] this.elementData[this.elementCount-1] this.elementData[this.elementCount..] this.elementData[this.elementCount+1..] this.elementData[0..this.elementCount] this.elementData[0..this.elementCount-1] this.elementData[this.capacityIncrement] this.elementData[this.capacityIncrement-1] this.elementData[this.capacityIncrement..] this.elementData[this.capacityIncrement+1..] this.elementData[0..this.capacityIncrement] this.elementData[0..this.capacityIncrement-1] this.elementData[index] this.elementData[index-1] this.elementData[index..] this.elementData[index+1..] this.elementData[0..index] this.elementData[0..index-1] this.elementData[orig(this.elementCount)] this.elementData[orig(this.elementCount)-1] this.elementData[orig(this.elementCount)..] this.elementData[orig(this.elementCount)+1..] this.elementData[0..orig(this.elementCount)] this.elementData[0..orig(this.elementCount)-1] this.elementData[orig(this.capacityIncrement)] this.elementData[orig(this.capacityIncrement)-1] this.elementData[orig(this.capacityIncrement)..] this.elementData[orig(this.capacityIncrement)+1..] this.elementData[0..orig(this.capacityIncrement)] this.elementData[0..orig(this.capacityIncrement)-1] this.elementData[orig(index)] this.elementData[orig(index)-1] this.elementData[orig(index)..] this.elementData[orig(index)+1..] this.elementData[0..orig(index)] this.elementData[0..orig(index)-1] orig(this.elementData[post(this.elementCount)]) orig(this.elementData[post(this.elementCount)-1]) orig(this.elementData[post(this.elementCount)..]) orig(this.elementData[post(this.elementCount)+1..]) orig(this.elementData[0..post(this.elementCount)]) orig(this.elementData[0..post(this.elementCount)-1]) orig(this.elementData[post(this.capacityIncrement)]) orig(this.elementData[post(this.capacityIncrement)-1]) orig(this.elementData[post(this.capacityIncrement)..]) orig(this.elementData[post(this.capacityIncrement)+1..]) orig(this.elementData[0..post(this.capacityIncrement)]) orig(this.elementData[0..post(this.capacityIncrement)-1]) orig(this.elementData[post(index)]) orig(this.elementData[post(index)-1]) orig(this.elementData[post(index)..]) orig(this.elementData[post(index)+1..]) orig(this.elementData[0..post(index)]) orig(this.elementData[0..post(index)-1]) orig(this.elementData[this.elementCount]) orig(this.elementData[this.elementCount-1]) orig(this.elementData[this.elementCount..]) orig(this.elementData[this.elementCount+1..]) orig(this.elementData[0..this.elementCount]) orig(this.elementData[0..this.elementCount-1]) orig(this.elementData[this.capacityIncrement]) orig(this.elementData[this.capacityIncrement-1]) orig(this.elementData[this.capacityIncrement..]) orig(this.elementData[this.capacityIncrement+1..]) orig(this.elementData[0..this.capacityIncrement]) orig(this.elementData[0..this.capacityIncrement-1]) orig(this.elementData[index]) orig(this.elementData[index-1]) orig(this.elementData[index..]) orig(this.elementData[index+1..]) orig(this.elementData[0..index]) orig(this.elementData[0..index-1])
assignable this.elementData[*], this.elementData[this.elementCount], this.elementData[this.elementCount-1], this.elementData[this.elementCount+1..], this.elementData[0..this.elementCount], this.elementData[0..this.elementCount-1], this.elementData[this.capacityIncrement], this.elementData[this.capacityIncrement-1], this.elementData[this.capacityIncrement..], this.elementData[this.capacityIncrement+1..], this.elementData[0..this.capacityIncrement], this.elementData[0..this.capacityIncrement-1]
this.elementData == \old(this.elementData)
this.elementData.getClass().getName() == \old(this.elementData.getClass().getName())
this.elementCount == \old(this.elementCount)
this.capacityIncrement == \old(this.capacityIncrement)
daikon.Quant.size(this.elementData) == \old(daikon.Quant.size(this.elementData))
daikon.Quant.pairwiseEqual(daikon.Quant.slice(this.elementData, this.elementCount, daikon.Quant.size(this.elementData)), \old(daikon.Quant.slice(this.elementData, \new(this.elementCount), daikon.Quant.size(this.elementData))))
daikon.Quant.pairwiseEqual(daikon.Quant.slice(this.elementData, this.elementCount, daikon.Quant.size(this.elementData)), \old(daikon.Quant.slice(this.elementData, this.elementCount, daikon.Quant.size(this.elementData))))
daikon.Quant.pairwiseEqual(daikon.Quant.slice(this.elementData, \old(index)+1, daikon.Quant.size(this.elementData)), \old(daikon.Quant.slice(this.elementData, \new(index)+1, daikon.Quant.size(this.elementData))))
daikon.Quant.pairwiseEqual(daikon.Quant.slice(this.elementData, \old(index)+1, daikon.Quant.size(this.elementData)), \old(daikon.Quant.slice(this.elementData, index+1, daikon.Quant.size(this.elementData))))
daikon.Quant.pairwiseEqual(daikon.Quant.slice(this.elementData, 0, \old(index)-1), \old(daikon.Quant.slice(this.elementData, 0, \new(index)-1)))
daikon.Quant.pairwiseEqual(daikon.Quant.slice(this.elementData, 0, \old(index)-1), \old(daikon.Quant.slice(this.elementData, 0, index-1)))
(\old(obj) != null)  ==>  (this.elementData.getClass().getName() != \old(obj.getClass().getName()))
daikon.Quant.memberOf(\old(daikon.Quant.getElement_Object(this.elementData, this.elementCount-1)) , this.elementData )
(\old(obj) != null)  ==>  (daikon.Quant.memberOf(\old(obj.getClass().getName()) , daikon.Quant.typeArray(this.elementData) ))
this.elementCount > \old(index)
this.elementCount <= daikon.Quant.size(this.elementData)
(!(daikon.Quant.size(this.elementData)-1 == 0)) || (\old(index) == 0)
\old(index) <= daikon.Quant.size(this.elementData)-1
daikon.Quant.memberOf(\old(daikon.Quant.getElement_Object(this.elementData, this.elementCount-1)) , daikon.Quant.slice(this.elementData, 0, this.elementCount-1) )
===========================================================================
javautil.Vector13.setSize(int):::ENTER
    Variables: this this.elementData this.elementData.getClass().getName() this.elementData[] this.elementData[].getClass().getName() this.elementCount this.capacityIncrement javautil.Vector13.serialVersionUID newSize size(this.elementData[]) size(this.elementData[])-1 this.elementData[this.elementCount] this.elementData[this.elementCount-1] this.elementData[this.elementCount..] this.elementData[this.elementCount+1..] this.elementData[0..this.elementCount] this.elementData[0..this.elementCount-1] this.elementData[this.capacityIncrement] this.elementData[this.capacityIncrement-1] this.elementData[this.capacityIncrement..] this.elementData[this.capacityIncrement+1..] this.elementData[0..this.capacityIncrement] this.elementData[0..this.capacityIncrement-1] this.elementData[newSize] this.elementData[newSize-1] this.elementData[newSize..] this.elementData[newSize+1..] this.elementData[0..newSize] this.elementData[0..newSize-1]
newSize >= 0
(!(daikon.Quant.size(this.elementData) == 0)) || (this.elementCount == 0)
this.elementCount <= daikon.Quant.size(this.elementData)
===========================================================================
javautil.Vector13.setSize(int):::EXIT
    Variables: this this.elementData this.elementData.getClass().getName() this.elementData[] this.elementData[].getClass().getName() this.elementCount this.capacityIncrement javautil.Vector13.serialVersionUID newSize orig(this) orig(this.elementData) orig(this.elementData.getClass().getName()) orig(this.elementData[]) orig(this.elementData[].getClass().getName()) orig(this.elementCount) orig(this.capacityIncrement) orig(newSize) size(this.elementData[]) size(this.elementData[])-1 orig(size(this.elementData[])) orig(size(this.elementData[]))-1 this.elementData[this.elementCount] this.elementData[this.elementCount-1] this.elementData[this.elementCount..] this.elementData[this.elementCount+1..] this.elementData[0..this.elementCount] this.elementData[0..this.elementCount-1] this.elementData[this.capacityIncrement] this.elementData[this.capacityIncrement-1] this.elementData[this.capacityIncrement..] this.elementData[this.capacityIncrement+1..] this.elementData[0..this.capacityIncrement] this.elementData[0..this.capacityIncrement-1] this.elementData[newSize] this.elementData[newSize-1] this.elementData[newSize..] this.elementData[newSize+1..] this.elementData[0..newSize] this.elementData[0..newSize-1] this.elementData[orig(this.elementCount)] this.elementData[orig(this.elementCount)-1] this.elementData[orig(this.elementCount)..] this.elementData[orig(this.elementCount)+1..] this.elementData[0..orig(this.elementCount)] this.elementData[0..orig(this.elementCount)-1] this.elementData[orig(this.capacityIncrement)] this.elementData[orig(this.capacityIncrement)-1] this.elementData[orig(this.capacityIncrement)..] this.elementData[orig(this.capacityIncrement)+1..] this.elementData[0..orig(this.capacityIncrement)] this.elementData[0..orig(this.capacityIncrement)-1] this.elementData[orig(newSize)] this.elementData[orig(newSize)-1] this.elementData[orig(newSize)..] this.elementData[orig(newSize)+1..] this.elementData[0..orig(newSize)] this.elementData[0..orig(newSize)-1] orig(this.elementData[post(this.elementCount)]) orig(this.elementData[post(this.elementCount)-1]) orig(this.elementData[post(this.elementCount)..]) orig(this.elementData[post(this.elementCount)+1..]) orig(this.elementData[0..post(this.elementCount)]) orig(this.elementData[0..post(this.elementCount)-1]) orig(this.elementData[post(this.capacityIncrement)]) orig(this.elementData[post(this.capacityIncrement)-1]) orig(this.elementData[post(this.capacityIncrement)..]) orig(this.elementData[post(this.capacityIncrement)+1..]) orig(this.elementData[0..post(this.capacityIncrement)]) orig(this.elementData[0..post(this.capacityIncrement)-1]) orig(this.elementData[post(newSize)]) orig(this.elementData[post(newSize)-1]) orig(this.elementData[post(newSize)..]) orig(this.elementData[post(newSize)+1..]) orig(this.elementData[0..post(newSize)]) orig(this.elementData[0..post(newSize)-1]) orig(this.elementData[this.elementCount]) orig(this.elementData[this.elementCount-1]) orig(this.elementData[this.elementCount..]) orig(this.elementData[this.elementCount+1..]) orig(this.elementData[0..this.elementCount]) orig(this.elementData[0..this.elementCount-1]) orig(this.elementData[this.capacityIncrement]) orig(this.elementData[this.capacityIncrement-1]) orig(this.elementData[this.capacityIncrement..]) orig(this.elementData[this.capacityIncrement+1..]) orig(this.elementData[0..this.capacityIncrement]) orig(this.elementData[0..this.capacityIncrement-1]) orig(this.elementData[newSize]) orig(this.elementData[newSize-1]) orig(this.elementData[newSize..]) orig(this.elementData[newSize+1..]) orig(this.elementData[0..newSize]) orig(this.elementData[0..newSize-1])
assignable this.elementData, this.elementData[*], this.elementCount, this.elementData[this.elementCount], this.elementData[this.elementCount-1], this.elementData[this.elementCount..], this.elementData[this.elementCount+1..], this.elementData[0..this.elementCount], this.elementData[0..this.elementCount-1], this.elementData[this.capacityIncrement], this.elementData[this.capacityIncrement-1], this.elementData[this.capacityIncrement..], this.elementData[this.capacityIncrement+1..], this.elementData[0..this.capacityIncrement], this.elementData[0..this.capacityIncrement-1]
this.elementData.getClass().getName() == \old(this.elementData.getClass().getName())
this.elementCount == \old(newSize)
this.capacityIncrement == \old(this.capacityIncrement)
daikon.Quant.eltsEqual(daikon.Quant.slice(this.elementData, \old(this.elementCount), daikon.Quant.size(this.elementData)), null)
(!(daikon.Quant.size(this.elementData) == 0)) || (this.elementCount == 0)
this.elementCount <= daikon.Quant.size(this.elementData)
(!(daikon.Quant.size(this.elementData) == 0)) || (this.capacityIncrement == 0)
(!(daikon.Quant.size(this.elementData) == 0)) || (\old(this.elementCount) == 0)
\old(this.elementCount) <= daikon.Quant.size(this.elementData)
(!(daikon.Quant.size(this.elementData) == 0)) || (\old(daikon.Quant.size(this.elementData)) == 0)
daikon.Quant.size(this.elementData) >= \old(daikon.Quant.size(this.elementData))
daikon.Quant.size(this.elementData)-1 >= \old(daikon.Quant.size(this.elementData))-1
warning: method daikon.inv.binary.twoSequence.SuperSequence.format(OutputFormat:JML) needs to be implemented: orig(this.elementData[this.elementCount..]) is a subsequence of this.elementData[orig(this.elementCount)..]
daikon.Quant.size(this.elementData) == (java.lang.Math.max(this.elementCount, \old(daikon.Quant.size(this.elementData))))
===========================================================================
javautil.Vector13.size():::ENTER
    Variables: this this.elementData this.elementData.getClass().getName() this.elementData[] this.elementData[].getClass().getName() this.elementCount this.capacityIncrement javautil.Vector13.serialVersionUID size(this.elementData[]) size(this.elementData[])-1 this.elementData[this.elementCount] this.elementData[this.elementCount-1] this.elementData[this.elementCount..] this.elementData[this.elementCount+1..] this.elementData[0..this.elementCount] this.elementData[0..this.elementCount-1] this.elementData[this.capacityIncrement] this.elementData[this.capacityIncrement-1] this.elementData[this.capacityIncrement..] this.elementData[this.capacityIncrement+1..] this.elementData[0..this.capacityIncrement] this.elementData[0..this.capacityIncrement-1]
(!(daikon.Quant.size(this.elementData) == 0)) || (this.elementCount == 0)
this.elementCount <= daikon.Quant.size(this.elementData)
===========================================================================
javautil.Vector13.size():::EXIT
    Variables: this this.elementData this.elementData.getClass().getName() this.elementData[] this.elementData[].getClass().getName() this.elementCount this.capacityIncrement javautil.Vector13.serialVersionUID return orig(this) orig(this.elementData) orig(this.elementData.getClass().getName()) orig(this.elementData[]) orig(this.elementData[].getClass().getName()) orig(this.elementCount) orig(this.capacityIncrement) size(this.elementData[]) size(this.elementData[])-1 orig(size(this.elementData[])) orig(size(this.elementData[]))-1 this.elementData[this.elementCount] this.elementData[this.elementCount-1] this.elementData[this.elementCount..] this.elementData[this.elementCount+1..] this.elementData[0..this.elementCount] this.elementData[0..this.elementCount-1] this.elementData[this.capacityIncrement] this.elementData[this.capacityIncrement-1] this.elementData[this.capacityIncrement..] this.elementData[this.capacityIncrement+1..] this.elementData[0..this.capacityIncrement] this.elementData[0..this.capacityIncrement-1] this.elementData[return] this.elementData[return-1] this.elementData[return..] this.elementData[return+1..] this.elementData[0..return] this.elementData[0..return-1] this.elementData[orig(this.elementCount)] this.elementData[orig(this.elementCount)-1] this.elementData[orig(this.elementCount)..] this.elementData[orig(this.elementCount)+1..] this.elementData[0..orig(this.elementCount)] this.elementData[0..orig(this.elementCount)-1] this.elementData[orig(this.capacityIncrement)] this.elementData[orig(this.capacityIncrement)-1] this.elementData[orig(this.capacityIncrement)..] this.elementData[orig(this.capacityIncrement)+1..] this.elementData[0..orig(this.capacityIncrement)] this.elementData[0..orig(this.capacityIncrement)-1] orig(this.elementData[post(this.elementCount)]) orig(this.elementData[post(this.elementCount)-1]) orig(this.elementData[post(this.elementCount)..]) orig(this.elementData[post(this.elementCount)+1..]) orig(this.elementData[0..post(this.elementCount)]) orig(this.elementData[0..post(this.elementCount)-1]) orig(this.elementData[post(this.capacityIncrement)]) orig(this.elementData[post(this.capacityIncrement)-1]) orig(this.elementData[post(this.capacityIncrement)..]) orig(this.elementData[post(this.capacityIncrement)+1..]) orig(this.elementData[0..post(this.capacityIncrement)]) orig(this.elementData[0..post(this.capacityIncrement)-1]) orig(this.elementData[post(return)]) orig(this.elementData[post(return)-1]) orig(this.elementData[post(return)..]) orig(this.elementData[post(return)+1..]) orig(this.elementData[0..post(return)]) orig(this.elementData[0..post(return)-1]) orig(this.elementData[this.elementCount]) orig(this.elementData[this.elementCount-1]) orig(this.elementData[this.elementCount..]) orig(this.elementData[this.elementCount+1..]) orig(this.elementData[0..this.elementCount]) orig(this.elementData[0..this.elementCount-1]) orig(this.elementData[this.capacityIncrement]) orig(this.elementData[this.capacityIncrement-1]) orig(this.elementData[this.capacityIncrement..]) orig(this.elementData[this.capacityIncrement+1..]) orig(this.elementData[0..this.capacityIncrement]) orig(this.elementData[0..this.capacityIncrement-1])
assignable this.elementData[this.elementCount], this.elementData[this.elementCount-1], this.elementData[this.elementCount+1..], this.elementData[0..this.elementCount], this.elementData[this.capacityIncrement], this.elementData[this.capacityIncrement-1], this.elementData[this.capacityIncrement..], this.elementData[this.capacityIncrement+1..], this.elementData[0..this.capacityIncrement], this.elementData[0..this.capacityIncrement-1]
this.elementData == \old(this.elementData)
this.elementData.getClass().getName() == \old(this.elementData.getClass().getName())
daikon.Quant.pairwiseEqual(this.elementData, \old(this.elementData))
this.elementCount == \result
this.capacityIncrement == \old(this.capacityIncrement)
\result == \old(this.elementCount)
\result >= 0
daikon.Quant.eltsEqual(daikon.Quant.slice(this.elementData, \result, daikon.Quant.size(this.elementData)), null)
(!(daikon.Quant.size(this.elementData) == 0)) || (\result == 0)
\result <= daikon.Quant.size(this.elementData)
===========================================================================
javautil.Vector13.toString():::ENTER
    Variables: this this.elementData this.elementData.getClass().getName() this.elementData[] this.elementData[].getClass().getName() this.elementCount this.capacityIncrement javautil.Vector13.serialVersionUID size(this.elementData[]) size(this.elementData[])-1
===========================================================================
javautil.Vector13.toString():::EXIT
    Variables: this this.elementData this.elementData.getClass().getName() this.elementData[] this.elementData[].getClass().getName() this.elementCount this.capacityIncrement javautil.Vector13.serialVersionUID return return.toString orig(this) orig(this.elementData) orig(this.elementData.getClass().getName()) orig(this.elementData[]) orig(this.elementData[].getClass().getName()) orig(this.elementCount) orig(this.capacityIncrement) size(this.elementData[]) size(this.elementData[])-1 orig(size(this.elementData[])) orig(size(this.elementData[]))-1
this.elementData == \old(this.elementData)
this.elementData.getClass().getName() == \old(this.elementData.getClass().getName())
daikon.Quant.pairwiseEqual(this.elementData, \old(this.elementData))
this.elementCount == \old(this.elementCount)
this.capacityIncrement == \old(this.capacityIncrement)
\result != null
warning: method daikon.inv.unary.string.PrintableString.format(OutputFormat:JML) needs to be implemented: return.toString is printable
===========================================================================
javautil.Vector13.trimToSize():::ENTER
    Variables: this this.elementData this.elementData.getClass().getName() this.elementData[] this.elementData[].getClass().getName() this.elementCount this.capacityIncrement javautil.Vector13.serialVersionUID size(this.elementData[]) size(this.elementData[])-1 this.elementData[this.elementCount] this.elementData[this.elementCount-1] this.elementData[this.elementCount..] this.elementData[this.elementCount+1..] this.elementData[0..this.elementCount] this.elementData[0..this.elementCount-1] this.elementData[this.capacityIncrement] this.elementData[this.capacityIncrement-1] this.elementData[this.capacityIncrement..] this.elementData[this.capacityIncrement+1..] this.elementData[0..this.capacityIncrement] this.elementData[0..this.capacityIncrement-1]
(!(daikon.Quant.size(this.elementData) == 0)) || (this.elementCount == 0)
this.elementCount <= daikon.Quant.size(this.elementData)
===========================================================================
javautil.Vector13.trimToSize():::EXIT
    Variables: this this.elementData this.elementData.getClass().getName() this.elementData[] this.elementData[].getClass().getName() this.elementCount this.capacityIncrement javautil.Vector13.serialVersionUID orig(this) orig(this.elementData) orig(this.elementData.getClass().getName()) orig(this.elementData[]) orig(this.elementData[].getClass().getName()) orig(this.elementCount) orig(this.capacityIncrement) size(this.elementData[]) size(this.elementData[])-1 orig(size(this.elementData[])) orig(size(this.elementData[]))-1 this.elementData[this.elementCount] this.elementData[this.elementCount-1] this.elementData[this.elementCount..] this.elementData[this.elementCount+1..] this.elementData[0..this.elementCount] this.elementData[0..this.elementCount-1] this.elementData[this.capacityIncrement] this.elementData[this.capacityIncrement-1] this.elementData[this.capacityIncrement..] this.elementData[this.capacityIncrement+1..] this.elementData[0..this.capacityIncrement] this.elementData[0..this.capacityIncrement-1] this.elementData[orig(this.elementCount)] this.elementData[orig(this.elementCount)-1] this.elementData[orig(this.elementCount)..] this.elementData[orig(this.elementCount)+1..] this.elementData[0..orig(this.elementCount)] this.elementData[0..orig(this.elementCount)-1] this.elementData[orig(this.capacityIncrement)] this.elementData[orig(this.capacityIncrement)-1] this.elementData[orig(this.capacityIncrement)..] this.elementData[orig(this.capacityIncrement)+1..] this.elementData[0..orig(this.capacityIncrement)] this.elementData[0..orig(this.capacityIncrement)-1] orig(this.elementData[post(this.elementCount)]) orig(this.elementData[post(this.elementCount)-1]) orig(this.elementData[post(this.elementCount)..]) orig(this.elementData[post(this.elementCount)+1..]) orig(this.elementData[0..post(this.elementCount)]) orig(this.elementData[0..post(this.elementCount)-1]) orig(this.elementData[post(this.capacityIncrement)]) orig(this.elementData[post(this.capacityIncrement)-1]) orig(this.elementData[post(this.capacityIncrement)..]) orig(this.elementData[post(this.capacityIncrement)+1..]) orig(this.elementData[0..post(this.capacityIncrement)]) orig(this.elementData[0..post(this.capacityIncrement)-1]) orig(this.elementData[this.elementCount]) orig(this.elementData[this.elementCount-1]) orig(this.elementData[this.elementCount..]) orig(this.elementData[this.elementCount+1..]) orig(this.elementData[0..this.elementCount]) orig(this.elementData[0..this.elementCount-1]) orig(this.elementData[this.capacityIncrement]) orig(this.elementData[this.capacityIncrement-1]) orig(this.elementData[this.capacityIncrement..]) orig(this.elementData[this.capacityIncrement+1..]) orig(this.elementData[0..this.capacityIncrement]) orig(this.elementData[0..this.capacityIncrement-1])
assignable this.elementData, this.elementData[*], this.elementData[this.elementCount], this.elementData[this.elementCount-1], this.elementData[this.elementCount..], this.elementData[this.elementCount+1..], this.elementData[0..this.elementCount], this.elementData[this.capacityIncrement], this.elementData[this.capacityIncrement-1], this.elementData[this.capacityIncrement..], this.elementData[this.capacityIncrement+1..], this.elementData[0..this.capacityIncrement], this.elementData[0..this.capacityIncrement-1]
this.elementData.getClass().getName() == \old(this.elementData.getClass().getName())
daikon.Quant.pairwiseEqual(this.elementData, \old(daikon.Quant.slice(this.elementData, 0, \new(this.elementCount)-1)))
daikon.Quant.pairwiseEqual(this.elementData, \old(daikon.Quant.slice(this.elementData, 0, this.elementCount-1)))
this.elementCount == \old(this.elementCount)
this.elementCount == daikon.Quant.size(this.elementData)
this.capacityIncrement == \old(this.capacityIncrement)
("oneOf.java.jpp: SEQUENCE unimplemented" != null)
(!(\old(daikon.Quant.size(this.elementData)) == 0)) || (this.elementCount == 0)
this.elementCount <= \old(daikon.Quant.size(this.elementData))
daikon.Quant.size(this.elementData)-1 <= \old(daikon.Quant.size(this.elementData))-1
daikon.Quant.subsetOf(daikon.Quant.slice(this.elementData, this.elementCount, daikon.Quant.size(this.elementData)), \old(daikon.Quant.slice(this.elementData, this.elementCount, daikon.Quant.size(this.elementData))))
