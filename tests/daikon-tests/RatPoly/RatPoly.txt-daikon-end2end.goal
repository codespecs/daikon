===========================================================================
PolyCalc.RatNum:::OBJECT
this.denom >= 0
===========================================================================
PolyCalc.RatNum:::OBJECT;condition="not(denom < 0)"
===========================================================================
PolyCalc.RatNum.RatNum(int):::ENTER
===========================================================================
PolyCalc.RatNum.RatNum(int):::EXIT
this.numer == orig(n)
this.denom == 1
===========================================================================
PolyCalc.RatNum.RatNum(int):::EXIT;condition="not(denom < 0)"
===========================================================================
PolyCalc.RatNum.RatNum(int, int):::ENTER
===========================================================================
PolyCalc.RatNum.RatNum(int, int):::EXIT55
this.numer == orig(n)
this.denom == orig(d)
this.denom == 0
===========================================================================
PolyCalc.RatNum.RatNum(int, int):::EXIT55;condition="not(denom < 0)"
===========================================================================
PolyCalc.RatNum.RatNum(int, int):::EXIT67
this.denom >= 1
orig(d) != 0
orig(d) % this.denom == 0
===========================================================================
PolyCalc.RatNum.RatNum(int, int):::EXIT67;condition="not(denom < 0)"
===========================================================================
PolyCalc.RatNum.RatNum(int, int):::EXIT
(this.denom == 0)  <==>  (orig(d) == 0)
(this.denom == 0)  ==>  (orig(d) is a pointer)
(this.denom == 0)  ==>  (this.denom == orig(d))
(this.denom == 0)  ==>  (this.denom is a pointer)
(this.denom == 0)  ==>  (this.numer == orig(n))
(orig(n) == 0) ==> (this.numer == 0)
(this.numer == 0) ==> (orig(n) == 0)
(orig(d) == 0) ==> (this.denom == 0)
(this.denom == 0) ==> (orig(d) == 0)
===========================================================================
PolyCalc.RatNum.RatNum(int, int):::EXIT;condition="not(denom < 0)"
===========================================================================
PolyCalc.RatNum.add(PolyCalc.RatNum):::ENTER
(this.denom == 0)  ==>  ((this.numer == 0) ==> (arg.denom == 0))
(this.denom == 0)  ==>  (this.denom <= arg.denom)
(this.denom == 0)  ==>  (this.denom is a pointer)
arg != null
arg.denom >= 0
===========================================================================
PolyCalc.RatNum.add(PolyCalc.RatNum):::ENTER;condition="not(denom < 0)"
===========================================================================
PolyCalc.RatNum.add(PolyCalc.RatNum):::ENTER;condition="(denom == 0)"
this.denom == 0
arg != null
arg.denom >= 0
(this.numer == 0) ==> (arg.denom == 0)
this.denom <= arg.denom
===========================================================================
PolyCalc.RatNum.add(PolyCalc.RatNum):::ENTER;condition="not((denom == 0))"
this.denom >= 1
arg != null
arg.denom >= 0
===========================================================================
PolyCalc.RatNum.add(PolyCalc.RatNum):::ENTER;condition="(this.denom != 0)&&(this.numer < 0)"
this.numer <= -1
this.denom >= 1
arg != null
arg.denom >= 0
this.numer < this.denom
this.numer < arg.denom
===========================================================================
PolyCalc.RatNum.add(PolyCalc.RatNum):::ENTER;condition="not((this.denom != 0)&&(this.numer < 0))"
this.denom >= 0
arg != null
arg.denom >= 0
===========================================================================
PolyCalc.RatNum.add(PolyCalc.RatNum):::ENTER;condition="(this.denom == 0)||(this.numer > 0)"
this.denom >= 0
arg != null
arg.denom >= 0
(this.numer == 0) ==> (this.denom == 0)
(this.numer == 0) ==> (arg.denom == 0)
===========================================================================
PolyCalc.RatNum.add(PolyCalc.RatNum):::ENTER;condition="not((this.denom == 0)||(this.numer > 0))"
this.numer <= 0
this.denom >= 1
arg != null
arg.denom >= 0
this.numer < this.denom
this.numer <= arg.denom
===========================================================================
PolyCalc.RatNum.add(PolyCalc.RatNum):::ENTER;condition="rn.isNaN()"
this.denom == 0
arg != null
arg.denom >= 0
(this.numer == 0) ==> (arg.denom == 0)
this.denom <= arg.denom
===========================================================================
PolyCalc.RatNum.add(PolyCalc.RatNum):::ENTER;condition="not(rn.isNaN())"
this.denom >= 1
arg != null
arg.denom >= 0
===========================================================================
PolyCalc.RatNum.add(PolyCalc.RatNum):::ENTER;condition="isNaN()"
this.denom == 0
arg != null
arg.denom >= 0
(this.numer == 0) ==> (arg.denom == 0)
this.denom <= arg.denom
===========================================================================
PolyCalc.RatNum.add(PolyCalc.RatNum):::ENTER;condition="not(isNaN())"
this.denom >= 1
arg != null
arg.denom >= 0
===========================================================================
PolyCalc.RatNum.add(PolyCalc.RatNum):::ENTER;condition="denom != 1"
this.denom >= 0
arg != null
arg.denom >= 0
(this.numer == 0) ==> (this.denom == 0)
(this.numer == 0) ==> (arg.denom == 0)
===========================================================================
PolyCalc.RatNum.add(PolyCalc.RatNum):::ENTER;condition="not(denom != 1)"
this.denom == 1
arg != null
arg.denom >= 0
===========================================================================
PolyCalc.RatNum.add(PolyCalc.RatNum):::EXIT
this.numer == orig(this.numer)
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
(this.denom == 0)  ==>  ((arg.denom == 0) ==> (return.numer == 0))
(this.denom == 0)  ==>  ((return.numer == 0) ==> (arg.denom == 0))
(this.denom == 0)  ==>  ((this.numer == 0) ==> (arg.denom == 0))
(this.denom == 0)  ==>  ((this.numer == 0) ==> (return.numer == 0))
(this.denom == 0)  ==>  (arg.denom >= return.denom)
(this.denom == 0)  ==>  (return.denom == 0)
(this.denom == 0)  ==>  (return.denom is a pointer)
(this.denom == 0)  ==>  (return.numer == (this.numer * arg.denom))
(this.denom == 0)  ==>  (this.denom <= arg.denom)
(this.denom == 0)  ==>  (this.denom == return.denom)
(this.denom == 0)  ==>  (this.denom is a pointer)
arg.denom >= 0
return != null
return.denom >= 0
(this.denom == 0) ==> (return.denom == 0)
(arg.denom == 0) ==> (return.denom == 0)
===========================================================================
PolyCalc.RatNum.add(PolyCalc.RatNum):::EXIT;condition="not(denom < 0)"
===========================================================================
PolyCalc.RatNum.add(PolyCalc.RatNum):::EXIT;condition="(denom == 0)"
this.numer == orig(this.numer)
this.denom == return.denom
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.denom == 0
arg.denom >= 0
return != null
(this.numer == 0) ==> (arg.denom == 0)
(this.numer == 0) ==> (return.numer == 0)
this.denom <= arg.denom
(arg.denom == 0) ==> (return.numer == 0)
(return.numer == 0) ==> (arg.denom == 0)
return.numer == (this.numer * arg.denom)
===========================================================================
PolyCalc.RatNum.add(PolyCalc.RatNum):::EXIT;condition="not((denom == 0))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.denom >= 1
arg.denom >= 0
return != null
return.denom >= 0
(arg.denom == 0) ==> (return.denom == 0)
(return.denom == 0) ==> (arg.denom == 0)
===========================================================================
PolyCalc.RatNum.add(PolyCalc.RatNum):::EXIT;condition="orig((denom == 0))"
this.numer == orig(this.numer)
this.denom == return.denom
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.denom == 0
arg.denom >= 0
return != null
orig(arg) != null
(this.numer == 0) ==> (arg.denom == 0)
(this.numer == 0) ==> (return.numer == 0)
this.denom <= arg.denom
(arg.denom == 0) ==> (return.numer == 0)
(return.numer == 0) ==> (arg.denom == 0)
return.numer == (this.numer * arg.denom)
===========================================================================
PolyCalc.RatNum.add(PolyCalc.RatNum):::EXIT;condition="not(orig((denom == 0)))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.denom >= 1
arg.denom >= 0
return != null
return.denom >= 0
orig(arg) != null
(arg.denom == 0) ==> (return.denom == 0)
(return.denom == 0) ==> (arg.denom == 0)
===========================================================================
PolyCalc.RatNum.add(PolyCalc.RatNum):::EXIT;condition="(this.denom != 0)&&(this.numer < 0)"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.numer <= -1
this.denom >= 1
arg.denom >= 0
return != null
return.denom >= 0
this.numer < this.denom
this.numer < arg.denom
this.numer < return.denom
(arg.denom == 0) ==> (return.denom == 0)
(return.denom == 0) ==> (arg.denom == 0)
===========================================================================
PolyCalc.RatNum.add(PolyCalc.RatNum):::EXIT;condition="not((this.denom != 0)&&(this.numer < 0))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.denom >= 0
arg.denom >= 0
return != null
return.denom >= 0
(this.denom == 0) ==> (return.denom == 0)
(arg.denom == 0) ==> (return.denom == 0)
===========================================================================
PolyCalc.RatNum.add(PolyCalc.RatNum):::EXIT;condition="orig((this.denom != 0)&&(this.numer < 0))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.numer <= -1
this.denom >= 1
arg.denom >= 0
return != null
return.denom >= 0
orig(arg) != null
this.numer < this.denom
this.numer < arg.denom
this.numer < return.denom
(arg.denom == 0) ==> (return.denom == 0)
(return.denom == 0) ==> (arg.denom == 0)
===========================================================================
PolyCalc.RatNum.add(PolyCalc.RatNum):::EXIT;condition="not(orig((this.denom != 0)&&(this.numer < 0)))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.denom >= 0
arg.denom >= 0
return != null
return.denom >= 0
orig(arg) != null
(this.denom == 0) ==> (return.denom == 0)
(arg.denom == 0) ==> (return.denom == 0)
===========================================================================
PolyCalc.RatNum.add(PolyCalc.RatNum):::EXIT;condition="(this.denom == 0)||(this.numer > 0)"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.denom >= 0
arg.denom >= 0
return != null
return.denom >= 0
(this.numer == 0) ==> (this.denom == 0)
(this.numer == 0) ==> (arg.denom == 0)
(this.numer == 0) ==> (return.numer == 0)
(this.numer == 0) ==> (return.denom == 0)
(this.denom == 0) ==> (return.denom == 0)
(arg.denom == 0) ==> (return.denom == 0)
===========================================================================
PolyCalc.RatNum.add(PolyCalc.RatNum):::EXIT;condition="not((this.denom == 0)||(this.numer > 0))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.numer <= 0
this.denom >= 1
arg.denom >= 0
return != null
return.denom >= 0
this.numer < this.denom
this.numer <= arg.denom
this.numer <= return.denom
(arg.denom == 0) ==> (return.denom == 0)
(return.denom == 0) ==> (arg.denom == 0)
===========================================================================
PolyCalc.RatNum.add(PolyCalc.RatNum):::EXIT;condition="orig((this.denom == 0)||(this.numer > 0))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.denom >= 0
arg.denom >= 0
return != null
return.denom >= 0
orig(arg) != null
(this.numer == 0) ==> (this.denom == 0)
(this.numer == 0) ==> (arg.denom == 0)
(this.numer == 0) ==> (return.numer == 0)
(this.numer == 0) ==> (return.denom == 0)
(this.denom == 0) ==> (return.denom == 0)
(arg.denom == 0) ==> (return.denom == 0)
===========================================================================
PolyCalc.RatNum.add(PolyCalc.RatNum):::EXIT;condition="not(orig((this.denom == 0)||(this.numer > 0)))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.numer <= 0
this.denom >= 1
arg.denom >= 0
return != null
return.denom >= 0
orig(arg) != null
this.numer < this.denom
this.numer <= arg.denom
this.numer <= return.denom
(arg.denom == 0) ==> (return.denom == 0)
(return.denom == 0) ==> (arg.denom == 0)
===========================================================================
PolyCalc.RatNum.add(PolyCalc.RatNum):::EXIT;condition="orig(rn.isNaN())"
this.numer == orig(this.numer)
this.denom == return.denom
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.denom == 0
arg.denom >= 0
return != null
orig(arg) != null
(this.numer == 0) ==> (arg.denom == 0)
(this.numer == 0) ==> (return.numer == 0)
this.denom <= arg.denom
(arg.denom == 0) ==> (return.numer == 0)
(return.numer == 0) ==> (arg.denom == 0)
return.numer == (this.numer * arg.denom)
===========================================================================
PolyCalc.RatNum.add(PolyCalc.RatNum):::EXIT;condition="not(orig(rn.isNaN()))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.denom >= 1
arg.denom >= 0
return != null
return.denom >= 0
orig(arg) != null
(arg.denom == 0) ==> (return.denom == 0)
(return.denom == 0) ==> (arg.denom == 0)
===========================================================================
PolyCalc.RatNum.add(PolyCalc.RatNum):::EXIT;condition="rn.isNaN()"
this.numer == orig(this.numer)
this.denom == return.denom
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.denom == 0
arg.denom >= 0
return != null
(this.numer == 0) ==> (arg.denom == 0)
(this.numer == 0) ==> (return.numer == 0)
this.denom <= arg.denom
(arg.denom == 0) ==> (return.numer == 0)
(return.numer == 0) ==> (arg.denom == 0)
return.numer == (this.numer * arg.denom)
===========================================================================
PolyCalc.RatNum.add(PolyCalc.RatNum):::EXIT;condition="not(rn.isNaN())"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.denom >= 1
arg.denom >= 0
return != null
return.denom >= 0
(arg.denom == 0) ==> (return.denom == 0)
(return.denom == 0) ==> (arg.denom == 0)
===========================================================================
PolyCalc.RatNum.add(PolyCalc.RatNum):::EXIT;condition="isNaN()"
this.numer == orig(this.numer)
this.denom == return.denom
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.denom == 0
arg.denom >= 0
return != null
(this.numer == 0) ==> (arg.denom == 0)
(this.numer == 0) ==> (return.numer == 0)
this.denom <= arg.denom
(arg.denom == 0) ==> (return.numer == 0)
(return.numer == 0) ==> (arg.denom == 0)
return.numer == (this.numer * arg.denom)
===========================================================================
PolyCalc.RatNum.add(PolyCalc.RatNum):::EXIT;condition="not(isNaN())"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.denom >= 1
arg.denom >= 0
return != null
return.denom >= 0
(arg.denom == 0) ==> (return.denom == 0)
(return.denom == 0) ==> (arg.denom == 0)
===========================================================================
PolyCalc.RatNum.add(PolyCalc.RatNum):::EXIT;condition="orig(isNaN())"
this.numer == orig(this.numer)
this.denom == return.denom
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.denom == 0
arg.denom >= 0
return != null
orig(arg) != null
(this.numer == 0) ==> (arg.denom == 0)
(this.numer == 0) ==> (return.numer == 0)
this.denom <= arg.denom
(arg.denom == 0) ==> (return.numer == 0)
(return.numer == 0) ==> (arg.denom == 0)
return.numer == (this.numer * arg.denom)
===========================================================================
PolyCalc.RatNum.add(PolyCalc.RatNum):::EXIT;condition="not(orig(isNaN()))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.denom >= 1
arg.denom >= 0
return != null
return.denom >= 0
orig(arg) != null
(arg.denom == 0) ==> (return.denom == 0)
(return.denom == 0) ==> (arg.denom == 0)
===========================================================================
PolyCalc.RatNum.add(PolyCalc.RatNum):::EXIT;condition="denom != 1"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.denom >= 0
arg.denom >= 0
return != null
return.denom >= 0
(this.numer == 0) ==> (this.denom == 0)
(this.numer == 0) ==> (arg.denom == 0)
(this.numer == 0) ==> (return.numer == 0)
(this.numer == 0) ==> (return.denom == 0)
(this.denom == 0) ==> (return.denom == 0)
(arg.denom == 0) ==> (return.denom == 0)
===========================================================================
PolyCalc.RatNum.add(PolyCalc.RatNum):::EXIT;condition="not(denom != 1)"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == return.denom
arg.denom == orig(arg.denom)
this.denom == 1
arg.denom >= 0
return != null
===========================================================================
PolyCalc.RatNum.add(PolyCalc.RatNum):::EXIT;condition="orig(denom != 1)"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.denom >= 0
arg.denom >= 0
return != null
return.denom >= 0
orig(arg) != null
(this.numer == 0) ==> (this.denom == 0)
(this.numer == 0) ==> (arg.denom == 0)
(this.numer == 0) ==> (return.numer == 0)
(this.numer == 0) ==> (return.denom == 0)
(this.denom == 0) ==> (return.denom == 0)
(arg.denom == 0) ==> (return.denom == 0)
===========================================================================
PolyCalc.RatNum.add(PolyCalc.RatNum):::EXIT;condition="not(orig(denom != 1))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == return.denom
arg.denom == orig(arg.denom)
this.denom == 1
arg.denom >= 0
return != null
orig(arg) != null
===========================================================================
PolyCalc.RatNum.approx():::ENTER
(this.denom == 0)  ==>  (this.denom is a pointer)
(this.denom == 0)  ==>  (this.numer != this.denom)
===========================================================================
PolyCalc.RatNum.approx():::ENTER;condition="not(denom < 0)"
===========================================================================
PolyCalc.RatNum.approx():::ENTER;condition="(denom == 0)"
this.denom == 0
this.numer != this.denom
===========================================================================
PolyCalc.RatNum.approx():::ENTER;condition="not((denom == 0))"
this.denom >= 1
===========================================================================
PolyCalc.RatNum.approx():::ENTER;condition="(this.denom != 0)&&(this.numer < 0)"
this.denom >= 1
this.numer < this.denom
===========================================================================
PolyCalc.RatNum.approx():::ENTER;condition="not((this.denom != 0)&&(this.numer < 0))"
this.denom >= 0
===========================================================================
PolyCalc.RatNum.approx():::ENTER;condition="(this.denom == 0)||(this.numer > 0)"
this.numer != 0
this.denom >= 0
===========================================================================
PolyCalc.RatNum.approx():::ENTER;condition="not((this.denom == 0)||(this.numer > 0))"
this.denom >= 1
this.numer < this.denom
===========================================================================
PolyCalc.RatNum.approx():::ENTER;condition="rn.isNaN()"
this.denom == 0
this.numer != this.denom
===========================================================================
PolyCalc.RatNum.approx():::ENTER;condition="not(rn.isNaN())"
this.denom >= 1
===========================================================================
PolyCalc.RatNum.approx():::EXIT117
this.denom == 0
return == Double.NaN
this.numer != this.denom
===========================================================================
PolyCalc.RatNum.approx():::EXIT117;condition="not(denom < 0)"
===========================================================================
PolyCalc.RatNum.approx():::EXIT117;condition="(denom == 0)"
===========================================================================
PolyCalc.RatNum.approx():::EXIT117;condition="orig((denom == 0))"
===========================================================================
PolyCalc.RatNum.approx():::EXIT117;condition="not((this.denom != 0)&&(this.numer < 0))"
this.denom == 0
return == Double.NaN
this.numer != this.denom
===========================================================================
PolyCalc.RatNum.approx():::EXIT117;condition="not(orig((this.denom != 0)&&(this.numer < 0)))"
this.denom == 0
return == Double.NaN
this.numer != this.denom
===========================================================================
PolyCalc.RatNum.approx():::EXIT117;condition="(this.denom == 0)||(this.numer > 0)"
this.denom == 0
return == Double.NaN
this.numer != this.denom
===========================================================================
PolyCalc.RatNum.approx():::EXIT117;condition="orig((this.denom == 0)||(this.numer > 0))"
this.denom == 0
return == Double.NaN
this.numer != this.denom
===========================================================================
PolyCalc.RatNum.approx():::EXIT117;condition="orig(rn.isNaN())"
===========================================================================
PolyCalc.RatNum.approx():::EXIT117;condition="rn.isNaN()"
===========================================================================
PolyCalc.RatNum.approx():::EXIT117;condition="isNaN()"
===========================================================================
PolyCalc.RatNum.approx():::EXIT117;condition="orig(isNaN())"
===========================================================================
PolyCalc.RatNum.approx():::EXIT120
this.denom >= 1
===========================================================================
PolyCalc.RatNum.approx():::EXIT120;condition="not(denom < 0)"
===========================================================================
PolyCalc.RatNum.approx():::EXIT120;condition="not((denom == 0))"
===========================================================================
PolyCalc.RatNum.approx():::EXIT120;condition="not(orig((denom == 0)))"
===========================================================================
PolyCalc.RatNum.approx():::EXIT120;condition="(this.denom != 0)&&(this.numer < 0)"
===========================================================================
PolyCalc.RatNum.approx():::EXIT120;condition="not((this.denom != 0)&&(this.numer < 0))"
this.denom >= 1
===========================================================================
PolyCalc.RatNum.approx():::EXIT120;condition="orig((this.denom != 0)&&(this.numer < 0))"
===========================================================================
PolyCalc.RatNum.approx():::EXIT120;condition="not(orig((this.denom != 0)&&(this.numer < 0)))"
this.denom >= 1
===========================================================================
PolyCalc.RatNum.approx():::EXIT120;condition="(this.denom == 0)||(this.numer > 0)"
this.numer >= 1
this.denom >= 1
===========================================================================
PolyCalc.RatNum.approx():::EXIT120;condition="not((this.denom == 0)||(this.numer > 0))"
===========================================================================
PolyCalc.RatNum.approx():::EXIT120;condition="orig((this.denom == 0)||(this.numer > 0))"
this.numer >= 1
this.denom >= 1
===========================================================================
PolyCalc.RatNum.approx():::EXIT120;condition="not(orig((this.denom == 0)||(this.numer > 0)))"
===========================================================================
PolyCalc.RatNum.approx():::EXIT120;condition="not(orig(rn.isNaN()))"
===========================================================================
PolyCalc.RatNum.approx():::EXIT120;condition="not(rn.isNaN())"
===========================================================================
PolyCalc.RatNum.approx():::EXIT120;condition="not(isNaN())"
===========================================================================
PolyCalc.RatNum.approx():::EXIT120;condition="not(orig(isNaN()))"
===========================================================================
PolyCalc.RatNum.approx():::EXIT
this.numer == orig(this.numer)
this.denom == orig(this.denom)
(this.denom == 0)  ==>  (return == Double.NaN)
(this.denom == 0)  ==>  (this.denom is a pointer)
(this.denom == 0)  ==>  (this.numer != this.denom)
===========================================================================
PolyCalc.RatNum.approx():::EXIT;condition="not(denom < 0)"
===========================================================================
PolyCalc.RatNum.approx():::EXIT;condition="(denom == 0)"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom == 0
return == Double.NaN
this.numer != this.denom
===========================================================================
PolyCalc.RatNum.approx():::EXIT;condition="not((denom == 0))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom >= 1
===========================================================================
PolyCalc.RatNum.approx():::EXIT;condition="orig((denom == 0))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom == 0
return == Double.NaN
this.numer != this.denom
===========================================================================
PolyCalc.RatNum.approx():::EXIT;condition="not(orig((denom == 0)))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom >= 1
===========================================================================
PolyCalc.RatNum.approx():::EXIT;condition="(this.denom != 0)&&(this.numer < 0)"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom >= 1
this.numer < this.denom
===========================================================================
PolyCalc.RatNum.approx():::EXIT;condition="not((this.denom != 0)&&(this.numer < 0))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom >= 0
===========================================================================
PolyCalc.RatNum.approx():::EXIT;condition="orig((this.denom != 0)&&(this.numer < 0))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom >= 1
this.numer < this.denom
===========================================================================
PolyCalc.RatNum.approx():::EXIT;condition="not(orig((this.denom != 0)&&(this.numer < 0)))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom >= 0
===========================================================================
PolyCalc.RatNum.approx():::EXIT;condition="(this.denom == 0)||(this.numer > 0)"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.numer != 0
this.denom >= 0
===========================================================================
PolyCalc.RatNum.approx():::EXIT;condition="not((this.denom == 0)||(this.numer > 0))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom >= 1
this.numer < this.denom
===========================================================================
PolyCalc.RatNum.approx():::EXIT;condition="orig((this.denom == 0)||(this.numer > 0))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.numer != 0
this.denom >= 0
===========================================================================
PolyCalc.RatNum.approx():::EXIT;condition="not(orig((this.denom == 0)||(this.numer > 0)))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom >= 1
this.numer < this.denom
===========================================================================
PolyCalc.RatNum.approx():::EXIT;condition="orig(rn.isNaN())"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom == 0
return == Double.NaN
this.numer != this.denom
===========================================================================
PolyCalc.RatNum.approx():::EXIT;condition="not(orig(rn.isNaN()))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom >= 1
===========================================================================
PolyCalc.RatNum.approx():::EXIT;condition="rn.isNaN()"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom == 0
return == Double.NaN
this.numer != this.denom
===========================================================================
PolyCalc.RatNum.approx():::EXIT;condition="not(rn.isNaN())"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom >= 1
===========================================================================
PolyCalc.RatNum.approx():::EXIT;condition="isNaN()"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom == 0
return == Double.NaN
this.numer != this.denom
===========================================================================
PolyCalc.RatNum.approx():::EXIT;condition="not(isNaN())"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom >= 1
===========================================================================
PolyCalc.RatNum.approx():::EXIT;condition="orig(isNaN())"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom == 0
return == Double.NaN
this.numer != this.denom
===========================================================================
PolyCalc.RatNum.approx():::EXIT;condition="not(orig(isNaN()))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom >= 1
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::ENTER
(this.denom == 0)  ==>  (this.denom <= rn.denom)
(this.denom == 0)  ==>  (this.denom is a pointer)
(this.denom == 0)  ==>  (this.numer != this.denom)
rn != null
rn.denom >= 0
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::ENTER;condition="not(denom < 0)"
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::ENTER;condition="(denom == 0)"
this.denom == 0
rn != null
rn.denom >= 0
this.numer != this.denom
this.denom <= rn.denom
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::ENTER;condition="not((denom == 0))"
this.denom >= 1
rn != null
rn.denom >= 0
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::ENTER;condition="(this.denom != 0)&&(this.numer < 0)"
this.numer <= -1
this.denom >= 1
rn != null
rn.denom >= 0
this.numer < this.denom
this.numer < rn.denom
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::ENTER;condition="not((this.denom != 0)&&(this.numer < 0))"
this.denom >= 0
rn != null
rn.denom >= 0
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::ENTER;condition="(this.denom == 0)||(this.numer > 0)"
this.numer != 0
this.denom >= 0
rn != null
rn.denom >= 0
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::ENTER;condition="not((this.denom == 0)||(this.numer > 0))"
this.numer <= 0
this.denom >= 1
rn != null
rn.denom >= 0
this.numer < this.denom
this.numer <= rn.denom
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::EXIT101
(this.numer <= -1)  ==>  (rn.denom != return)
(this.numer <= -1)  ==>  (rn.numer != return)
(this.numer <= -1)  ==>  (this.denom != return)
(this.numer <= -1)  ==>  (this.numer < rn.denom)
(this.numer <= -1)  ==>  (this.numer < this.denom)
(this.numer <= 0)  ==>  (this.numer < rn.denom)
(this.numer <= 0)  ==>  (this.numer < this.denom)
this.denom >= 1
rn.denom >= 1
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::EXIT101;condition="not(denom < 0)"
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::EXIT101;condition="not((denom == 0))"
rn.denom >= 1
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::EXIT101;condition="not(orig((denom == 0)))"
rn.denom >= 1
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::EXIT101;condition="(this.denom != 0)&&(this.numer < 0)"
rn.denom >= 1
rn.numer != return
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::EXIT101;condition="not((this.denom != 0)&&(this.numer < 0))"
this.numer >= 0
this.denom >= 1
rn.denom >= 1
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::EXIT101;condition="orig((this.denom != 0)&&(this.numer < 0))"
rn.denom >= 1
rn.numer != return
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::EXIT101;condition="not(orig((this.denom != 0)&&(this.numer < 0)))"
this.numer >= 0
this.denom >= 1
rn.denom >= 1
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::EXIT101;condition="(this.denom == 0)||(this.numer > 0)"
this.numer >= 1
this.denom >= 1
rn.denom >= 1
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::EXIT101;condition="not((this.denom == 0)||(this.numer > 0))"
rn.denom >= 1
this.numer < rn.denom
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::EXIT101;condition="orig((this.denom == 0)||(this.numer > 0))"
this.numer >= 1
this.denom >= 1
rn.denom >= 1
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::EXIT101;condition="not(orig((this.denom == 0)||(this.numer > 0)))"
rn.denom >= 1
this.numer < rn.denom
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::EXIT101;condition="not(orig(rn.isNaN()))"
rn.denom >= 1
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::EXIT101;condition="not(rn.isNaN())"
rn.denom >= 1
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::EXIT94
this.denom == return
rn.denom == return
return == orig(this.denom)
return == orig(rn.denom)
return == 0
this.numer != return
rn.numer != return
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::EXIT94;condition="not(denom < 0)"
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::EXIT94;condition="(denom == 0)"
this.denom == return
rn.denom == return
return == orig(this.denom)
return == orig(rn.denom)
return == 0
this.numer != return
rn.numer != return
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::EXIT94;condition="orig((denom == 0))"
this.denom == return
rn.denom == return
return == orig(this.denom)
return == orig(rn.denom)
return == 0
this.numer != return
rn.numer != return
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::EXIT94;condition="not((this.denom != 0)&&(this.numer < 0))"
this.denom == return
rn.denom == return
return == orig(this.denom)
return == orig(rn.denom)
return == 0
this.numer != return
rn.numer != return
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::EXIT94;condition="not(orig((this.denom != 0)&&(this.numer < 0)))"
this.denom == return
rn.denom == return
return == orig(this.denom)
return == orig(rn.denom)
return == 0
this.numer != return
rn.numer != return
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::EXIT94;condition="(this.denom == 0)||(this.numer > 0)"
this.denom == return
rn.denom == return
return == orig(this.denom)
return == orig(rn.denom)
return == 0
this.numer != return
rn.numer != return
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::EXIT94;condition="orig((this.denom == 0)||(this.numer > 0))"
this.denom == return
rn.denom == return
return == orig(this.denom)
return == orig(rn.denom)
return == 0
this.numer != return
rn.numer != return
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::EXIT94;condition="orig(rn.isNaN())"
this.denom == return
rn.denom == return
return == orig(this.denom)
return == orig(rn.denom)
return == 0
this.numer != return
rn.numer != return
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::EXIT94;condition="rn.isNaN()"
this.denom == return
rn.denom == return
return == orig(this.denom)
return == orig(rn.denom)
return == 0
this.numer != return
rn.numer != return
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::EXIT96
this.denom == 0
rn.numer >= -1
rn.denom >= 1
return == 1
this.numer != this.denom
this.denom < rn.denom
rn.denom >= return
return == (org.plumelib.util.MathPlume.gcd(rn.numer, rn.denom))
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::EXIT96;condition="not(denom < 0)"
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::EXIT96;condition="(denom == 0)"
rn.numer >= -1
rn.denom >= 1
return == 1
this.denom < rn.denom
return == (org.plumelib.util.MathPlume.gcd(rn.numer, rn.denom))
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::EXIT96;condition="orig((denom == 0))"
rn.numer >= -1
rn.denom >= 1
return == 1
this.denom < rn.denom
return == (org.plumelib.util.MathPlume.gcd(rn.numer, rn.denom))
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::EXIT96;condition="not((this.denom != 0)&&(this.numer < 0))"
this.denom == 0
rn.numer >= -1
rn.denom >= 1
return == 1
this.numer != this.denom
this.denom < rn.denom
rn.denom >= return
return == (org.plumelib.util.MathPlume.gcd(rn.numer, rn.denom))
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::EXIT96;condition="not(orig((this.denom != 0)&&(this.numer < 0)))"
this.denom == 0
rn.numer >= -1
rn.denom >= 1
return == 1
this.numer != this.denom
this.denom < rn.denom
rn.denom >= return
return == (org.plumelib.util.MathPlume.gcd(rn.numer, rn.denom))
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::EXIT96;condition="(this.denom == 0)||(this.numer > 0)"
this.denom == 0
rn.numer >= -1
rn.denom >= 1
return == 1
this.numer != this.denom
this.denom < rn.denom
rn.denom >= return
return == (org.plumelib.util.MathPlume.gcd(rn.numer, rn.denom))
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::EXIT96;condition="orig((this.denom == 0)||(this.numer > 0))"
this.denom == 0
rn.numer >= -1
rn.denom >= 1
return == 1
this.numer != this.denom
this.denom < rn.denom
rn.denom >= return
return == (org.plumelib.util.MathPlume.gcd(rn.numer, rn.denom))
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::EXIT96;condition="orig(rn.isNaN())"
rn.numer >= -1
rn.denom >= 1
return == 1
this.denom < rn.denom
return == (org.plumelib.util.MathPlume.gcd(rn.numer, rn.denom))
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::EXIT96;condition="rn.isNaN()"
rn.numer >= -1
rn.denom >= 1
return == 1
this.denom < rn.denom
return == (org.plumelib.util.MathPlume.gcd(rn.numer, rn.denom))
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::EXIT98
(this.numer <= -1)  <==>  (this.numer < rn.denom)
(this.numer <= -1)  <==>  (this.numer <= return)
(this.numer <= -1)  ==>  (this.numer < this.denom)
(this.numer <= 0)  <==>  (this.numer <= rn.denom)
(this.numer <= 0)  ==>  (this.numer < this.denom)
(this.numer >= 0)  <==>  (this.numer > return)
(this.numer >= 0)  <==>  (this.numer >= rn.denom)
(this.numer >= 1)  <==>  (this.numer > rn.denom)
(this.numer >= 1)  ==>  (this.numer > return)
this.denom >= 1
rn.numer != 0
rn.denom == 0
return == -1
this.denom > rn.denom
this.denom > return
rn.numer != rn.denom
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::EXIT98;condition="not(denom < 0)"
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::EXIT98;condition="not((denom == 0))"
rn.numer != 0
rn.denom == 0
return == -1
this.denom > rn.denom
this.denom > return
rn.numer != rn.denom
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::EXIT98;condition="not(orig((denom == 0)))"
rn.numer != 0
rn.denom == 0
return == -1
this.denom > rn.denom
this.denom > return
rn.numer != rn.denom
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::EXIT98;condition="(this.denom != 0)&&(this.numer < 0)"
rn.numer != 0
rn.denom == 0
return == -1
this.numer <= return
this.denom > rn.denom
this.denom > return
rn.numer != rn.denom
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::EXIT98;condition="not((this.denom != 0)&&(this.numer < 0))"
this.numer >= 0
this.denom >= 1
rn.numer != 0
rn.denom == 0
return == -1
this.numer >= rn.denom
this.numer > return
this.denom > rn.denom
this.denom > return
rn.numer != rn.denom
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::EXIT98;condition="orig((this.denom != 0)&&(this.numer < 0))"
rn.numer != 0
rn.denom == 0
return == -1
this.numer <= return
this.denom > rn.denom
this.denom > return
rn.numer != rn.denom
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::EXIT98;condition="not(orig((this.denom != 0)&&(this.numer < 0)))"
this.numer >= 0
this.denom >= 1
rn.numer != 0
rn.denom == 0
return == -1
this.numer >= rn.denom
this.numer > return
this.denom > rn.denom
this.denom > return
rn.numer != rn.denom
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::EXIT98;condition="(this.denom == 0)||(this.numer > 0)"
this.numer >= 1
this.denom >= 1
rn.numer != 0
rn.denom == 0
return == -1
this.numer > rn.denom
this.numer > return
this.denom > rn.denom
this.denom > return
rn.numer != rn.denom
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::EXIT98;condition="not((this.denom == 0)||(this.numer > 0))"
rn.numer != 0
rn.denom == 0
return == -1
this.denom > rn.denom
this.denom > return
rn.numer != rn.denom
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::EXIT98;condition="orig((this.denom == 0)||(this.numer > 0))"
this.numer >= 1
this.denom >= 1
rn.numer != 0
rn.denom == 0
return == -1
this.numer > rn.denom
this.numer > return
this.denom > rn.denom
this.denom > return
rn.numer != rn.denom
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::EXIT98;condition="not(orig((this.denom == 0)||(this.numer > 0)))"
rn.numer != 0
rn.denom == 0
return == -1
this.denom > rn.denom
this.denom > return
rn.numer != rn.denom
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::EXIT98;condition="not(orig(rn.isNaN()))"
rn.numer != 0
rn.denom == 0
return == -1
this.denom > rn.denom
this.denom > return
rn.numer != rn.denom
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::EXIT98;condition="not(rn.isNaN())"
rn.numer != 0
rn.denom == 0
return == -1
this.denom > rn.denom
this.denom > return
rn.numer != rn.denom
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::EXIT
this.numer == orig(this.numer)
this.denom == orig(this.denom)
rn.numer == orig(rn.numer)
rn.denom == orig(rn.denom)
(this.denom == 0)  ==>  ((return == 0) ==> (rn.denom == 0))
(this.denom == 0)  ==>  ((rn.denom == 0) ==> (return == 0))
(this.denom == 0)  ==>  (return one of { 0, 1 })
(this.denom == 0)  ==>  (rn.denom >= return)
(this.denom == 0)  ==>  (this.denom <= return)
(this.denom == 0)  ==>  (this.denom <= rn.denom)
(this.denom == 0)  ==>  (this.denom is a pointer)
(this.denom == 0)  ==>  (this.numer != this.denom)
rn.denom >= 0
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::EXIT;condition="not(denom < 0)"
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::EXIT;condition="(denom == 0)"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
rn.numer == orig(rn.numer)
rn.denom == orig(rn.denom)
this.denom == 0
rn.denom >= 0
return one of { 0, 1 }
this.numer != this.denom
this.denom <= rn.denom
this.denom <= return
(return == 0) ==> (rn.denom == 0)
(rn.denom == 0) ==> (return == 0)
rn.denom >= return
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::EXIT;condition="not((denom == 0))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
rn.numer == orig(rn.numer)
rn.denom == orig(rn.denom)
this.denom >= 1
rn.denom >= 0
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::EXIT;condition="orig((denom == 0))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
rn.numer == orig(rn.numer)
rn.denom == orig(rn.denom)
this.denom == 0
rn.denom >= 0
return one of { 0, 1 }
orig(rn) != null
this.numer != this.denom
this.denom <= rn.denom
this.denom <= return
(return == 0) ==> (rn.denom == 0)
(rn.denom == 0) ==> (return == 0)
rn.denom >= return
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::EXIT;condition="not(orig((denom == 0)))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
rn.numer == orig(rn.numer)
rn.denom == orig(rn.denom)
this.denom >= 1
rn.denom >= 0
orig(rn) != null
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::EXIT;condition="(this.denom != 0)&&(this.numer < 0)"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
rn.numer == orig(rn.numer)
rn.denom == orig(rn.denom)
this.numer <= -1
this.denom >= 1
rn.denom >= 0
this.numer < this.denom
this.numer < rn.denom
this.denom != return
rn.denom != return
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::EXIT;condition="not((this.denom != 0)&&(this.numer < 0))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
rn.numer == orig(rn.numer)
rn.denom == orig(rn.denom)
this.denom >= 0
rn.denom >= 0
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::EXIT;condition="orig((this.denom != 0)&&(this.numer < 0))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
rn.numer == orig(rn.numer)
rn.denom == orig(rn.denom)
this.numer <= -1
this.denom >= 1
rn.denom >= 0
orig(rn) != null
this.numer < this.denom
this.numer < rn.denom
this.denom != return
rn.denom != return
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::EXIT;condition="not(orig((this.denom != 0)&&(this.numer < 0)))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
rn.numer == orig(rn.numer)
rn.denom == orig(rn.denom)
this.denom >= 0
rn.denom >= 0
orig(rn) != null
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::EXIT;condition="(this.denom == 0)||(this.numer > 0)"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
rn.numer == orig(rn.numer)
rn.denom == orig(rn.denom)
this.numer != 0
this.denom >= 0
rn.denom >= 0
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::EXIT;condition="not((this.denom == 0)||(this.numer > 0))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
rn.numer == orig(rn.numer)
rn.denom == orig(rn.denom)
this.numer <= 0
this.denom >= 1
rn.denom >= 0
this.numer < this.denom
this.numer <= rn.denom
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::EXIT;condition="orig((this.denom == 0)||(this.numer > 0))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
rn.numer == orig(rn.numer)
rn.denom == orig(rn.denom)
this.numer != 0
this.denom >= 0
rn.denom >= 0
orig(rn) != null
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::EXIT;condition="not(orig((this.denom == 0)||(this.numer > 0)))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
rn.numer == orig(rn.numer)
rn.denom == orig(rn.denom)
this.numer <= 0
this.denom >= 1
rn.denom >= 0
orig(rn) != null
this.numer < this.denom
this.numer <= rn.denom
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::EXIT;condition="orig(rn.isNaN())"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
rn.numer == orig(rn.numer)
rn.denom == orig(rn.denom)
this.denom == 0
rn.denom >= 0
return one of { 0, 1 }
orig(rn) != null
this.numer != this.denom
this.denom <= rn.denom
this.denom <= return
(return == 0) ==> (rn.denom == 0)
(rn.denom == 0) ==> (return == 0)
rn.denom >= return
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::EXIT;condition="not(orig(rn.isNaN()))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
rn.numer == orig(rn.numer)
rn.denom == orig(rn.denom)
this.denom >= 1
rn.denom >= 0
orig(rn) != null
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::EXIT;condition="rn.isNaN()"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
rn.numer == orig(rn.numer)
rn.denom == orig(rn.denom)
this.denom == 0
rn.denom >= 0
return one of { 0, 1 }
orig(rn) != null
this.numer != this.denom
this.denom <= rn.denom
this.denom <= return
(return == 0) ==> (rn.denom == 0)
(rn.denom == 0) ==> (return == 0)
rn.denom >= return
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::EXIT;condition="not(rn.isNaN())"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
rn.numer == orig(rn.numer)
rn.denom == orig(rn.denom)
this.denom >= 1
rn.denom >= 0
orig(rn) != null
===========================================================================
PolyCalc.RatNum.debugPrint():::ENTER
(this.denom == 0)  ==>  (this has only one value)
(this.denom == 0)  ==>  (this.denom is a pointer)
(this.denom == 0)  ==>  (this.numer == 1)
(this.numer one of { -10, -1 })  ==>  (this.denom == 1)
(this.numer one of { -10, -1 })  ==>  (this.numer < this.denom)
(this.numer one of { -10, -1, 0 })  ==>  (this.denom == 1)
(this.numer one of { -10, -1, 0 })  ==>  (this.numer < this.denom)
===========================================================================
PolyCalc.RatNum.debugPrint():::ENTER;condition="not(denom < 0)"
===========================================================================
PolyCalc.RatNum.debugPrint():::ENTER;condition="(denom == 0)"
this has only one value
this.numer == 1
this.denom == 0
===========================================================================
PolyCalc.RatNum.debugPrint():::ENTER;condition="not((denom == 0))"
this.denom >= 1
===========================================================================
PolyCalc.RatNum.debugPrint():::ENTER;condition="(this.denom != 0)&&(this.numer < 0)"
this.numer one of { -10, -1 }
this.denom == 1
this.numer < this.denom
===========================================================================
PolyCalc.RatNum.debugPrint():::ENTER;condition="not((this.denom != 0)&&(this.numer < 0))"
this.numer >= 0
===========================================================================
PolyCalc.RatNum.debugPrint():::ENTER;condition="(this.denom == 0)||(this.numer > 0)"
this.numer >= 1
===========================================================================
PolyCalc.RatNum.debugPrint():::ENTER;condition="not((this.denom == 0)||(this.numer > 0))"
this.numer one of { -10, -1, 0 }
this.denom == 1
this.numer < this.denom
===========================================================================
PolyCalc.RatNum.debugPrint():::ENTER;condition="rn.isNaN()"
this has only one value
this.numer == 1
this.denom == 0
===========================================================================
PolyCalc.RatNum.debugPrint():::ENTER;condition="not(rn.isNaN())"
this.denom >= 1
===========================================================================
PolyCalc.RatNum.debugPrint():::ENTER;condition="isNaN()"
this has only one value
this.numer == 1
this.denom == 0
===========================================================================
PolyCalc.RatNum.debugPrint():::ENTER;condition="not(isNaN())"
this.denom >= 1
===========================================================================
PolyCalc.RatNum.debugPrint():::ENTER;condition="denom != 1"
this.numer one of { 1, 3 }
this.numer == 1  (mod 2)
this.numer != this.denom
===========================================================================
PolyCalc.RatNum.debugPrint():::ENTER;condition="not(denom != 1)"
this.denom == 1
===========================================================================
PolyCalc.RatNum.debugPrint():::ENTER;condition="arg.isNaN()"
this has only one value
this.numer == 1
this.denom == 0
===========================================================================
PolyCalc.RatNum.debugPrint():::ENTER;condition="not(arg.isNaN())"
this.denom >= 1
===========================================================================
PolyCalc.RatNum.debugPrint():::EXIT
this.numer == orig(this.numer)
this.denom == orig(this.denom)
(this.denom == 0)  ==>  (orig(this) has only one value)
(this.denom == 0)  ==>  (return has only one value)
(this.denom == 0)  ==>  (return.toString == "RatNum<numer:1 denom:0>")
(this.denom == 0)  ==>  (this.denom is a pointer)
(this.denom == 0)  ==>  (this.numer == 1)
(this.numer one of { -10, -1 })  ==>  (return.toString one of { "RatNum<numer:-1 denom:1>", "RatNum<numer:-10 denom:1>" })
(this.numer one of { -10, -1 })  ==>  (this.denom == 1)
(this.numer one of { -10, -1 })  ==>  (this.numer < this.denom)
(this.numer one of { -10, -1, 0 })  ==>  (return.toString one of { "RatNum<numer:-1 denom:1>", "RatNum<numer:-10 denom:1>", "RatNum<numer:0 denom:1>" })
(this.numer one of { -10, -1, 0 })  ==>  (this.denom == 1)
(this.numer one of { -10, -1, 0 })  ==>  (this.numer < this.denom)
return != null
return.toString is printable
===========================================================================
PolyCalc.RatNum.debugPrint():::EXIT;condition="not(denom < 0)"
===========================================================================
PolyCalc.RatNum.debugPrint():::EXIT;condition="(denom == 0)"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.numer == 1
this.denom == 0
return has only one value
return.toString == "RatNum<numer:1 denom:0>"
===========================================================================
PolyCalc.RatNum.debugPrint():::EXIT;condition="not((denom == 0))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom >= 1
return != null
return.toString is printable
===========================================================================
PolyCalc.RatNum.debugPrint():::EXIT;condition="orig((denom == 0))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.numer == 1
this.denom == 0
return has only one value
return.toString == "RatNum<numer:1 denom:0>"
orig(this) has only one value
===========================================================================
PolyCalc.RatNum.debugPrint():::EXIT;condition="not(orig((denom == 0)))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom >= 1
return != null
return.toString is printable
===========================================================================
PolyCalc.RatNum.debugPrint():::EXIT;condition="(this.denom != 0)&&(this.numer < 0)"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.numer one of { -10, -1 }
this.denom == 1
return.toString one of { "RatNum<numer:-1 denom:1>", "RatNum<numer:-10 denom:1>" }
return.toString is printable
this.numer < this.denom
===========================================================================
PolyCalc.RatNum.debugPrint():::EXIT;condition="not((this.denom != 0)&&(this.numer < 0))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.numer >= 0
return != null
return.toString is printable
===========================================================================
PolyCalc.RatNum.debugPrint():::EXIT;condition="orig((this.denom != 0)&&(this.numer < 0))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.numer one of { -10, -1 }
this.denom == 1
return.toString one of { "RatNum<numer:-1 denom:1>", "RatNum<numer:-10 denom:1>" }
return.toString is printable
this.numer < this.denom
===========================================================================
PolyCalc.RatNum.debugPrint():::EXIT;condition="not(orig((this.denom != 0)&&(this.numer < 0)))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.numer >= 0
return != null
return.toString is printable
===========================================================================
PolyCalc.RatNum.debugPrint():::EXIT;condition="(this.denom == 0)||(this.numer > 0)"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.numer >= 1
return != null
return.toString is printable
===========================================================================
PolyCalc.RatNum.debugPrint():::EXIT;condition="not((this.denom == 0)||(this.numer > 0))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.numer one of { -10, -1, 0 }
this.denom == 1
return != null
return.toString one of { "RatNum<numer:-1 denom:1>", "RatNum<numer:-10 denom:1>", "RatNum<numer:0 denom:1>" }
return.toString is printable
this.numer < this.denom
===========================================================================
PolyCalc.RatNum.debugPrint():::EXIT;condition="orig((this.denom == 0)||(this.numer > 0))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.numer >= 1
return != null
return.toString is printable
===========================================================================
PolyCalc.RatNum.debugPrint():::EXIT;condition="not(orig((this.denom == 0)||(this.numer > 0)))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.numer one of { -10, -1, 0 }
this.denom == 1
return != null
return.toString one of { "RatNum<numer:-1 denom:1>", "RatNum<numer:-10 denom:1>", "RatNum<numer:0 denom:1>" }
return.toString is printable
this.numer < this.denom
===========================================================================
PolyCalc.RatNum.debugPrint():::EXIT;condition="orig(rn.isNaN())"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.numer == 1
this.denom == 0
return has only one value
return.toString == "RatNum<numer:1 denom:0>"
orig(this) has only one value
===========================================================================
PolyCalc.RatNum.debugPrint():::EXIT;condition="not(orig(rn.isNaN()))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom >= 1
return != null
return.toString is printable
===========================================================================
PolyCalc.RatNum.debugPrint():::EXIT;condition="rn.isNaN()"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.numer == 1
this.denom == 0
return has only one value
return.toString == "RatNum<numer:1 denom:0>"
===========================================================================
PolyCalc.RatNum.debugPrint():::EXIT;condition="not(rn.isNaN())"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom >= 1
return != null
return.toString is printable
===========================================================================
PolyCalc.RatNum.debugPrint():::EXIT;condition="isNaN()"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.numer == 1
this.denom == 0
return has only one value
return.toString == "RatNum<numer:1 denom:0>"
===========================================================================
PolyCalc.RatNum.debugPrint():::EXIT;condition="not(isNaN())"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom >= 1
return != null
return.toString is printable
===========================================================================
PolyCalc.RatNum.debugPrint():::EXIT;condition="orig(isNaN())"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.numer == 1
this.denom == 0
return has only one value
return.toString == "RatNum<numer:1 denom:0>"
orig(this) has only one value
===========================================================================
PolyCalc.RatNum.debugPrint():::EXIT;condition="not(orig(isNaN()))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom >= 1
return != null
return.toString is printable
===========================================================================
PolyCalc.RatNum.debugPrint():::EXIT;condition="denom != 1"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.numer one of { 1, 3 }
this.numer == 1  (mod 2)
return != null
return.toString is printable
this.numer != this.denom
===========================================================================
PolyCalc.RatNum.debugPrint():::EXIT;condition="not(denom != 1)"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom == 1
return != null
return.toString is printable
===========================================================================
PolyCalc.RatNum.debugPrint():::EXIT;condition="orig(denom != 1)"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.numer one of { 1, 3 }
this.numer == 1  (mod 2)
return != null
return.toString is printable
this.numer != this.denom
===========================================================================
PolyCalc.RatNum.debugPrint():::EXIT;condition="not(orig(denom != 1))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom == 1
return != null
return.toString is printable
===========================================================================
PolyCalc.RatNum.debugPrint():::EXIT;condition="arg.isNaN()"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.numer == 1
this.denom == 0
return has only one value
return.toString == "RatNum<numer:1 denom:0>"
===========================================================================
PolyCalc.RatNum.debugPrint():::EXIT;condition="not(arg.isNaN())"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom >= 1
return != null
return.toString is printable
===========================================================================
PolyCalc.RatNum.debugPrint():::EXIT;condition="orig(arg.isNaN())"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.numer == 1
this.denom == 0
return has only one value
return.toString == "RatNum<numer:1 denom:0>"
orig(this) has only one value
===========================================================================
PolyCalc.RatNum.debugPrint():::EXIT;condition="not(orig(arg.isNaN()))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom >= 1
return != null
return.toString is printable
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::ENTER
(this.denom == 0)  ==>  ((this.numer == 0) ==> (arg.numer == 0))
(this.denom == 0)  ==>  (this.denom <= arg.denom)
(this.denom == 0)  ==>  (this.denom is a pointer)
arg != null
arg.denom >= 0
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::ENTER;condition="not(denom < 0)"
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::ENTER;condition="(denom == 0)"
this.denom == 0
arg != null
arg.denom >= 0
(this.numer == 0) ==> (arg.numer == 0)
this.denom <= arg.denom
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::ENTER;condition="not((denom == 0))"
this.denom >= 1
arg != null
arg.denom >= 0
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::ENTER;condition="(this.denom != 0)&&(this.numer < 0)"
this.numer <= -1
this.denom >= 1
arg != null
arg.numer != 0
arg.denom >= 0
this.numer < this.denom
this.numer < arg.denom
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::ENTER;condition="not((this.denom != 0)&&(this.numer < 0))"
this.denom >= 0
arg != null
arg.denom >= 0
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::ENTER;condition="(this.denom == 0)||(this.numer > 0)"
this.denom >= 0
arg != null
arg.denom >= 0
(this.numer == 0) ==> (this.denom == 0)
(this.numer == 0) ==> (arg.numer == 0)
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::ENTER;condition="not((this.denom == 0)||(this.numer > 0))"
this.numer <= 0
this.denom >= 1
arg != null
arg.denom >= 0
this.numer < this.denom
(arg.numer == 0) ==> (this.numer == 0)
this.numer <= arg.denom
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::ENTER;condition="rn.isNaN()"
this.denom == 0
arg != null
arg.denom >= 0
(this.numer == 0) ==> (arg.numer == 0)
this.denom <= arg.denom
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::ENTER;condition="not(rn.isNaN())"
this.denom >= 1
arg != null
arg.denom >= 0
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::ENTER;condition="isNaN()"
this.denom == 0
arg != null
arg.denom >= 0
(this.numer == 0) ==> (arg.numer == 0)
this.denom <= arg.denom
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::ENTER;condition="not(isNaN())"
this.denom >= 1
arg != null
arg.denom >= 0
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::ENTER;condition="denom != 1"
this.denom >= 0
arg != null
arg.denom >= 0
(this.numer == 0) ==> (this.denom == 0)
(this.numer == 0) ==> (arg.numer == 0)
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::ENTER;condition="not(denom != 1)"
this.denom == 1
arg != null
arg.denom one of { 0, 1, 3 }
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT187
arg.numer == return.numer
arg.denom == return.denom
return == orig(arg)
(this.denom == 0)  <==>  (this.denom == arg.denom)
(this.denom == 0)  ==>  (arg.numer != arg.denom)
(this.denom == 0)  ==>  (this.denom != arg.numer)
(this.denom == 0)  ==>  (this.denom is a pointer)
(this.denom == 0)  ==>  (this.numer != arg.denom)
(this.denom == 0)  ==>  (this.numer != this.denom)
arg.denom == 0
(arg.numer == 0) ==> (this.numer == 0)
this.denom >= arg.denom
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT187;condition="not(denom < 0)"
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT187;condition="(denom == 0)"
this.denom == arg.denom
this.denom == orig(arg.denom)
arg.numer == return.numer
return == orig(arg)
this.numer != this.denom
this.denom != arg.numer
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT187;condition="not((denom == 0))"
arg.numer == return.numer
arg.denom == return.denom
return == orig(arg)
arg.denom == 0
(arg.numer == 0) ==> (this.numer == 0)
this.denom > arg.denom
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT187;condition="orig((denom == 0))"
this.denom == arg.denom
this.denom == orig(arg.denom)
arg.numer == return.numer
return == orig(arg)
this.numer != this.denom
this.denom != arg.numer
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT187;condition="not(orig((denom == 0)))"
arg.numer == return.numer
arg.denom == return.denom
return == orig(arg)
arg.denom == 0
(arg.numer == 0) ==> (this.numer == 0)
this.denom > arg.denom
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT187;condition="(this.denom != 0)&&(this.numer < 0)"
arg.numer == return.numer
arg.denom == return.denom
return == orig(arg)
arg.denom == 0
this.denom > arg.denom
arg.numer != arg.denom
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT187;condition="not((this.denom != 0)&&(this.numer < 0))"
arg.numer == return.numer
arg.denom == return.denom
return == orig(arg)
arg.denom == 0
(arg.numer == 0) ==> (this.numer == 0)
this.denom >= arg.denom
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT187;condition="orig((this.denom != 0)&&(this.numer < 0))"
arg.numer == return.numer
arg.denom == return.denom
return == orig(arg)
arg.denom == 0
this.denom > arg.denom
arg.numer != arg.denom
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT187;condition="not(orig((this.denom != 0)&&(this.numer < 0)))"
arg.numer == return.numer
arg.denom == return.denom
return == orig(arg)
arg.denom == 0
(arg.numer == 0) ==> (this.numer == 0)
this.denom >= arg.denom
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT187;condition="(this.denom == 0)||(this.numer > 0)"
arg.numer == return.numer
arg.denom == return.denom
return == orig(arg)
this.numer != 0
arg.numer != 0
arg.denom == 0
this.numer != arg.denom
this.denom >= arg.denom
arg.numer != arg.denom
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT187;condition="not((this.denom == 0)||(this.numer > 0))"
arg.numer == return.numer
arg.denom == return.denom
return == orig(arg)
arg.denom == 0
this.denom > arg.denom
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT187;condition="orig((this.denom == 0)||(this.numer > 0))"
arg.numer == return.numer
arg.denom == return.denom
return == orig(arg)
this.numer != 0
arg.numer != 0
arg.denom == 0
this.numer != arg.denom
this.denom >= arg.denom
arg.numer != arg.denom
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT187;condition="not(orig((this.denom == 0)||(this.numer > 0)))"
arg.numer == return.numer
arg.denom == return.denom
return == orig(arg)
arg.denom == 0
this.denom > arg.denom
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT187;condition="orig(rn.isNaN())"
this.denom == arg.denom
this.denom == orig(arg.denom)
arg.numer == return.numer
return == orig(arg)
this.numer != this.denom
this.denom != arg.numer
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT187;condition="not(orig(rn.isNaN()))"
arg.numer == return.numer
arg.denom == return.denom
return == orig(arg)
arg.denom == 0
(arg.numer == 0) ==> (this.numer == 0)
this.denom > arg.denom
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT187;condition="rn.isNaN()"
this.denom == arg.denom
this.denom == orig(arg.denom)
arg.numer == return.numer
return == orig(arg)
this.numer != this.denom
this.denom != arg.numer
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT187;condition="not(rn.isNaN())"
arg.numer == return.numer
arg.denom == return.denom
return == orig(arg)
arg.denom == 0
(arg.numer == 0) ==> (this.numer == 0)
this.denom > arg.denom
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT187;condition="isNaN()"
this.denom == arg.denom
this.denom == orig(arg.denom)
arg.numer == return.numer
return == orig(arg)
this.numer != this.denom
this.denom != arg.numer
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT187;condition="not(isNaN())"
arg.numer == return.numer
arg.denom == return.denom
return == orig(arg)
arg.denom == 0
(arg.numer == 0) ==> (this.numer == 0)
this.denom > arg.denom
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT187;condition="orig(isNaN())"
this.denom == arg.denom
this.denom == orig(arg.denom)
arg.numer == return.numer
return == orig(arg)
this.numer != this.denom
this.denom != arg.numer
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT187;condition="not(orig(isNaN()))"
arg.numer == return.numer
arg.denom == return.denom
return == orig(arg)
arg.denom == 0
(arg.numer == 0) ==> (this.numer == 0)
this.denom > arg.denom
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT187;condition="denom != 1"
arg.numer == return.numer
arg.denom == return.denom
return == orig(arg)
this.numer != 0
arg.numer != 0
arg.denom == 0
this.numer != this.denom
this.numer != arg.denom
this.denom >= arg.denom
arg.numer != arg.denom
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT187;condition="not(denom != 1)"
arg.numer == return.numer
arg.denom == return.denom
return == orig(arg)
this.numer <= 2
this.numer >= -1
arg.denom == 0
(arg.numer == 0) ==> (this.numer == 0)
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT187;condition="orig(denom != 1)"
arg.numer == return.numer
arg.denom == return.denom
return == orig(arg)
this.numer != 0
arg.numer != 0
arg.denom == 0
this.numer != this.denom
this.numer != arg.denom
this.denom >= arg.denom
arg.numer != arg.denom
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT187;condition="not(orig(denom != 1))"
arg.numer == return.numer
arg.denom == return.denom
return == orig(arg)
this.numer <= 2
this.numer >= -1
arg.denom == 0
(arg.numer == 0) ==> (this.numer == 0)
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT187;condition="arg.isNaN()"
this.denom == arg.denom
this.denom == orig(arg.denom)
arg.numer == return.numer
return == orig(arg)
this.numer != this.denom
this.denom != arg.numer
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT187;condition="not(arg.isNaN())"
arg.numer == return.numer
arg.denom == return.denom
return == orig(arg)
arg.denom == 0
(arg.numer == 0) ==> (this.numer == 0)
this.denom > arg.denom
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT187;condition="orig(arg.isNaN())"
this.denom == arg.denom
this.denom == orig(arg.denom)
arg.numer == return.numer
return == orig(arg)
this.numer != this.denom
this.denom != arg.numer
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT187;condition="not(orig(arg.isNaN()))"
arg.numer == return.numer
arg.denom == return.denom
return == orig(arg)
arg.denom == 0
(arg.numer == 0) ==> (this.numer == 0)
this.denom > arg.denom
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT189
(this.denom == 0)  ==>  ((return.numer == 0) ==> (arg.numer == 0))
(this.denom == 0)  ==>  ((this.numer == 0) ==> (arg.numer == 0))
(this.denom == 0)  ==>  (arg.denom > return.denom)
(this.denom == 0)  ==>  (arg.denom one of { 1, 2, 7 })
(this.denom == 0)  ==>  (arg.numer >= -1)
(this.denom == 0)  ==>  (return.denom == 0)
(this.denom == 0)  ==>  (return.denom is a pointer)
(this.denom == 0)  ==>  (return.numer % arg.denom == 0)
(this.denom == 0)  ==>  (return.numer == (this.numer * arg.denom))
(this.denom == 0)  ==>  (this.denom < arg.denom)
(this.denom == 0)  ==>  (this.denom == return.denom)
(this.denom == 0)  ==>  (this.denom is a pointer)
(this.denom == 0)  ==>  (this.numer == (return.numer / arg.denom))
arg.denom >= 1
(this.numer == 0) ==> (return.numer == 0)
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT189;condition="not(denom < 0)"
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT189;condition="(denom == 0)"
arg.numer >= -1
arg.denom one of { 1, 2, 7 }
this.denom < arg.denom
return.numer % arg.denom == 0
return.numer == (this.numer * arg.denom)
this.numer == (return.numer / arg.denom)
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT189;condition="not((denom == 0))"
arg.denom >= 1
(this.numer == 0) ==> (return.numer == 0)
(return.denom == 0) ==> (arg.numer == 0)
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT189;condition="orig((denom == 0))"
arg.numer >= -1
arg.denom one of { 1, 2, 7 }
this.denom < arg.denom
return.numer % arg.denom == 0
return.numer == (this.numer * arg.denom)
this.numer == (return.numer / arg.denom)
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT189;condition="not(orig((denom == 0)))"
arg.denom >= 1
(this.numer == 0) ==> (return.numer == 0)
(return.denom == 0) ==> (arg.numer == 0)
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT189;condition="(this.denom != 0)&&(this.numer < 0)"
arg.denom >= 1
return.denom >= 1
arg.numer != return.numer
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT189;condition="not((this.denom != 0)&&(this.numer < 0))"
arg.denom >= 1
(this.numer == 0) ==> (return.numer == 0)
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT189;condition="orig((this.denom != 0)&&(this.numer < 0))"
arg.denom >= 1
return.denom >= 1
arg.numer != return.numer
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT189;condition="not(orig((this.denom != 0)&&(this.numer < 0)))"
arg.denom >= 1
(this.numer == 0) ==> (return.numer == 0)
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT189;condition="(this.denom == 0)||(this.numer > 0)"
arg.denom >= 1
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT189;condition="not((this.denom == 0)||(this.numer > 0))"
arg.denom >= 1
this.numer < arg.denom
(this.numer == 0) ==> (return.numer == 0)
(return.denom == 0) ==> (this.numer == 0)
(return.denom == 0) ==> (arg.numer == 0)
(return.denom == 0) ==> (return.numer == 0)
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT189;condition="orig((this.denom == 0)||(this.numer > 0))"
arg.denom >= 1
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT189;condition="not(orig((this.denom == 0)||(this.numer > 0)))"
arg.denom >= 1
this.numer < arg.denom
(this.numer == 0) ==> (return.numer == 0)
(return.denom == 0) ==> (this.numer == 0)
(return.denom == 0) ==> (arg.numer == 0)
(return.denom == 0) ==> (return.numer == 0)
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT189;condition="orig(rn.isNaN())"
arg.numer >= -1
arg.denom one of { 1, 2, 7 }
this.denom < arg.denom
return.numer % arg.denom == 0
return.numer == (this.numer * arg.denom)
this.numer == (return.numer / arg.denom)
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT189;condition="not(orig(rn.isNaN()))"
arg.denom >= 1
(this.numer == 0) ==> (return.numer == 0)
(return.denom == 0) ==> (arg.numer == 0)
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT189;condition="rn.isNaN()"
arg.numer >= -1
arg.denom one of { 1, 2, 7 }
this.denom < arg.denom
return.numer % arg.denom == 0
return.numer == (this.numer * arg.denom)
this.numer == (return.numer / arg.denom)
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT189;condition="not(rn.isNaN())"
arg.denom >= 1
(this.numer == 0) ==> (return.numer == 0)
(return.denom == 0) ==> (arg.numer == 0)
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT189;condition="isNaN()"
arg.numer >= -1
arg.denom one of { 1, 2, 7 }
this.denom < arg.denom
return.numer % arg.denom == 0
return.numer == (this.numer * arg.denom)
this.numer == (return.numer / arg.denom)
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT189;condition="not(isNaN())"
arg.denom >= 1
(this.numer == 0) ==> (return.numer == 0)
(return.denom == 0) ==> (arg.numer == 0)
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT189;condition="orig(isNaN())"
arg.numer >= -1
arg.denom one of { 1, 2, 7 }
this.denom < arg.denom
return.numer % arg.denom == 0
return.numer == (this.numer * arg.denom)
this.numer == (return.numer / arg.denom)
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT189;condition="not(orig(isNaN()))"
arg.denom >= 1
(this.numer == 0) ==> (return.numer == 0)
(return.denom == 0) ==> (arg.numer == 0)
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT189;condition="denom != 1"
arg.denom >= 1
arg.denom != return.denom
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT189;condition="not(denom != 1)"
arg.denom one of { 1, 3 }
arg.denom == 1  (mod 2)
(this.numer == 0) ==> (return.numer == 0)
this.denom <= arg.denom
(return.denom == 0) ==> (arg.numer == 0)
return.numer % arg.denom == 0
this.denom == (org.plumelib.util.MathPlume.gcd(this.numer, arg.denom))
this.denom == (org.plumelib.util.MathPlume.gcd(arg.numer, arg.denom))
this.denom == (org.plumelib.util.MathPlume.gcd(arg.denom, return.denom))
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT189;condition="orig(denom != 1)"
arg.denom >= 1
arg.denom != return.denom
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT189;condition="not(orig(denom != 1))"
arg.denom one of { 1, 3 }
arg.denom == 1  (mod 2)
(this.numer == 0) ==> (return.numer == 0)
this.denom <= arg.denom
(return.denom == 0) ==> (arg.numer == 0)
return.numer % arg.denom == 0
this.denom == (org.plumelib.util.MathPlume.gcd(this.numer, arg.denom))
this.denom == (org.plumelib.util.MathPlume.gcd(arg.numer, arg.denom))
this.denom == (org.plumelib.util.MathPlume.gcd(arg.denom, return.denom))
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT189;condition="arg.isNaN()"
arg.numer >= -1
arg.denom one of { 1, 2, 7 }
this.denom < arg.denom
return.numer % arg.denom == 0
return.numer == (this.numer * arg.denom)
this.numer == (return.numer / arg.denom)
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT189;condition="not(arg.isNaN())"
arg.denom >= 1
(this.numer == 0) ==> (return.numer == 0)
(return.denom == 0) ==> (arg.numer == 0)
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT189;condition="orig(arg.isNaN())"
arg.numer >= -1
arg.denom one of { 1, 2, 7 }
this.denom < arg.denom
return.numer % arg.denom == 0
return.numer == (this.numer * arg.denom)
this.numer == (return.numer / arg.denom)
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT189;condition="not(orig(arg.isNaN()))"
arg.denom >= 1
(this.numer == 0) ==> (return.numer == 0)
(return.denom == 0) ==> (arg.numer == 0)
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT
this.numer == orig(this.numer)
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
(arg.denom == 0)  ==>  ((arg.numer == 0) ==> (this.numer == 0))
(arg.denom == 0)  ==>  (arg.denom == return.denom)
(arg.denom == 0)  ==>  (arg.denom is a pointer)
(arg.denom == 0)  ==>  (arg.numer == return.numer)
(arg.denom == 0)  ==>  (return == orig(arg))
(arg.denom == 0)  ==>  (return.denom == 0)
(arg.denom == 0)  ==>  (return.denom is a pointer)
(arg.denom == 0)  ==>  (this.denom >= arg.denom)
(arg.denom == 0)  ==>  (this.denom >= return.denom)
(this.denom == 0)  ==>  ((return.numer == 0) ==> (arg.numer == 0))
(this.denom == 0)  ==>  ((this.numer == 0) ==> (arg.numer == 0))
(this.denom == 0)  ==>  ((this.numer == 0) ==> (return.numer == 0))
(this.denom == 0)  ==>  (arg.denom >= return.denom)
(this.denom == 0)  ==>  (return.denom == 0)
(this.denom == 0)  ==>  (return.denom is a pointer)
(this.denom == 0)  ==>  (this.denom <= arg.denom)
(this.denom == 0)  ==>  (this.denom == return.denom)
(this.denom == 0)  ==>  (this.denom is a pointer)
arg.denom >= 0
return != null
return.denom >= 0
(return.numer == 0) ==> (this.numer == 0)
(this.denom == 0) ==> (return.denom == 0)
(arg.numer == 0) ==> (return.denom == 0)
(arg.denom == 0) ==> (return.denom == 0)
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT;condition="not(denom < 0)"
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT;condition="(denom == 0)"
this.numer == orig(this.numer)
this.denom == return.denom
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.denom == 0
arg.denom >= 0
return != null
(this.numer == 0) ==> (arg.numer == 0)
(return.numer == 0) ==> (this.numer == 0)
(this.numer == 0) ==> (return.numer == 0)
this.denom <= arg.denom
(return.numer == 0) ==> (arg.numer == 0)
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT;condition="not((denom == 0))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.denom >= 1
arg.denom >= 0
return != null
return.denom >= 0
(return.numer == 0) ==> (this.numer == 0)
(arg.numer == 0) ==> (return.denom == 0)
(arg.denom == 0) ==> (return.denom == 0)
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT;condition="orig((denom == 0))"
this.numer == orig(this.numer)
this.denom == return.denom
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.denom == 0
arg.denom >= 0
return != null
orig(arg) != null
(this.numer == 0) ==> (arg.numer == 0)
(return.numer == 0) ==> (this.numer == 0)
(this.numer == 0) ==> (return.numer == 0)
this.denom <= arg.denom
(return.numer == 0) ==> (arg.numer == 0)
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT;condition="not(orig((denom == 0)))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.denom >= 1
arg.denom >= 0
return != null
return.denom >= 0
orig(arg) != null
(return.numer == 0) ==> (this.numer == 0)
(arg.numer == 0) ==> (return.denom == 0)
(arg.denom == 0) ==> (return.denom == 0)
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT;condition="(this.denom != 0)&&(this.numer < 0)"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.numer <= -1
this.denom >= 1
arg.numer != 0
arg.denom >= 0
return != null
return.numer != 0
return.denom >= 0
this.numer < this.denom
this.numer < arg.denom
this.numer < return.denom
(arg.denom == 0) ==> (return.denom == 0)
(return.denom == 0) ==> (arg.denom == 0)
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT;condition="not((this.denom != 0)&&(this.numer < 0))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.denom >= 0
arg.denom >= 0
return != null
return.denom >= 0
(return.numer == 0) ==> (this.numer == 0)
(this.denom == 0) ==> (return.denom == 0)
(arg.numer == 0) ==> (return.denom == 0)
(arg.denom == 0) ==> (return.denom == 0)
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT;condition="orig((this.denom != 0)&&(this.numer < 0))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.numer <= -1
this.denom >= 1
arg.numer != 0
arg.denom >= 0
return != null
return.numer != 0
return.denom >= 0
orig(arg) != null
this.numer < this.denom
this.numer < arg.denom
this.numer < return.denom
(arg.denom == 0) ==> (return.denom == 0)
(return.denom == 0) ==> (arg.denom == 0)
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT;condition="not(orig((this.denom != 0)&&(this.numer < 0)))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.denom >= 0
arg.denom >= 0
return != null
return.denom >= 0
orig(arg) != null
(return.numer == 0) ==> (this.numer == 0)
(this.denom == 0) ==> (return.denom == 0)
(arg.numer == 0) ==> (return.denom == 0)
(arg.denom == 0) ==> (return.denom == 0)
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT;condition="(this.denom == 0)||(this.numer > 0)"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.denom >= 0
arg.denom >= 0
return != null
return.denom >= 0
(this.numer == 0) ==> (this.denom == 0)
(this.numer == 0) ==> (arg.numer == 0)
(return.numer == 0) ==> (this.numer == 0)
(this.numer == 0) ==> (return.numer == 0)
(this.numer == 0) ==> (return.denom == 0)
(return.numer == 0) ==> (this.denom == 0)
(this.denom == 0) ==> (return.denom == 0)
(return.numer == 0) ==> (arg.numer == 0)
(arg.numer == 0) ==> (return.denom == 0)
(arg.denom == 0) ==> (return.denom == 0)
(return.numer == 0) ==> (return.denom == 0)
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT;condition="not((this.denom == 0)||(this.numer > 0))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.numer <= 0
this.denom >= 1
arg.denom >= 0
return != null
return.denom >= 0
this.numer < this.denom
(arg.numer == 0) ==> (this.numer == 0)
this.numer <= arg.denom
(return.numer == 0) ==> (this.numer == 0)
this.numer <= return.denom
(arg.numer == 0) ==> (return.numer == 0)
(arg.numer == 0) ==> (return.denom == 0)
(arg.denom == 0) ==> (return.denom == 0)
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT;condition="orig((this.denom == 0)||(this.numer > 0))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.denom >= 0
arg.denom >= 0
return != null
return.denom >= 0
orig(arg) != null
(this.numer == 0) ==> (this.denom == 0)
(this.numer == 0) ==> (arg.numer == 0)
(return.numer == 0) ==> (this.numer == 0)
(this.numer == 0) ==> (return.numer == 0)
(this.numer == 0) ==> (return.denom == 0)
(return.numer == 0) ==> (this.denom == 0)
(this.denom == 0) ==> (return.denom == 0)
(return.numer == 0) ==> (arg.numer == 0)
(arg.numer == 0) ==> (return.denom == 0)
(arg.denom == 0) ==> (return.denom == 0)
(return.numer == 0) ==> (return.denom == 0)
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT;condition="not(orig((this.denom == 0)||(this.numer > 0)))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.numer <= 0
this.denom >= 1
arg.denom >= 0
return != null
return.denom >= 0
orig(arg) != null
this.numer < this.denom
(arg.numer == 0) ==> (this.numer == 0)
this.numer <= arg.denom
(return.numer == 0) ==> (this.numer == 0)
this.numer <= return.denom
(arg.numer == 0) ==> (return.numer == 0)
(arg.numer == 0) ==> (return.denom == 0)
(arg.denom == 0) ==> (return.denom == 0)
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT;condition="orig(rn.isNaN())"
this.numer == orig(this.numer)
this.denom == return.denom
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.denom == 0
arg.denom >= 0
return != null
orig(arg) != null
(this.numer == 0) ==> (arg.numer == 0)
(return.numer == 0) ==> (this.numer == 0)
(this.numer == 0) ==> (return.numer == 0)
this.denom <= arg.denom
(return.numer == 0) ==> (arg.numer == 0)
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT;condition="not(orig(rn.isNaN()))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.denom >= 1
arg.denom >= 0
return != null
return.denom >= 0
orig(arg) != null
(return.numer == 0) ==> (this.numer == 0)
(arg.numer == 0) ==> (return.denom == 0)
(arg.denom == 0) ==> (return.denom == 0)
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT;condition="rn.isNaN()"
this.numer == orig(this.numer)
this.denom == return.denom
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.denom == 0
arg.denom >= 0
return != null
(this.numer == 0) ==> (arg.numer == 0)
(return.numer == 0) ==> (this.numer == 0)
(this.numer == 0) ==> (return.numer == 0)
this.denom <= arg.denom
(return.numer == 0) ==> (arg.numer == 0)
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT;condition="not(rn.isNaN())"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.denom >= 1
arg.denom >= 0
return != null
return.denom >= 0
(return.numer == 0) ==> (this.numer == 0)
(arg.numer == 0) ==> (return.denom == 0)
(arg.denom == 0) ==> (return.denom == 0)
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT;condition="isNaN()"
this.numer == orig(this.numer)
this.denom == return.denom
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.denom == 0
arg.denom >= 0
return != null
(this.numer == 0) ==> (arg.numer == 0)
(return.numer == 0) ==> (this.numer == 0)
(this.numer == 0) ==> (return.numer == 0)
this.denom <= arg.denom
(return.numer == 0) ==> (arg.numer == 0)
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT;condition="not(isNaN())"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.denom >= 1
arg.denom >= 0
return != null
return.denom >= 0
(return.numer == 0) ==> (this.numer == 0)
(arg.numer == 0) ==> (return.denom == 0)
(arg.denom == 0) ==> (return.denom == 0)
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT;condition="orig(isNaN())"
this.numer == orig(this.numer)
this.denom == return.denom
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.denom == 0
arg.denom >= 0
return != null
orig(arg) != null
(this.numer == 0) ==> (arg.numer == 0)
(return.numer == 0) ==> (this.numer == 0)
(this.numer == 0) ==> (return.numer == 0)
this.denom <= arg.denom
(return.numer == 0) ==> (arg.numer == 0)
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT;condition="not(orig(isNaN()))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.denom >= 1
arg.denom >= 0
return != null
return.denom >= 0
orig(arg) != null
(return.numer == 0) ==> (this.numer == 0)
(arg.numer == 0) ==> (return.denom == 0)
(arg.denom == 0) ==> (return.denom == 0)
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT;condition="denom != 1"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.denom >= 0
arg.denom >= 0
return != null
return.denom >= 0
(this.numer == 0) ==> (this.denom == 0)
(this.numer == 0) ==> (arg.numer == 0)
(return.numer == 0) ==> (this.numer == 0)
(this.numer == 0) ==> (return.numer == 0)
(this.numer == 0) ==> (return.denom == 0)
(return.numer == 0) ==> (this.denom == 0)
(this.denom == 0) ==> (return.denom == 0)
(return.numer == 0) ==> (arg.numer == 0)
(arg.numer == 0) ==> (return.denom == 0)
(arg.denom == 0) ==> (return.denom == 0)
(return.numer == 0) ==> (return.denom == 0)
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT;condition="not(denom != 1)"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.denom == 1
arg.denom one of { 0, 1, 3 }
return != null
return.denom >= 0
(return.numer == 0) ==> (this.numer == 0)
(arg.numer == 0) ==> (return.denom == 0)
(arg.denom == 0) ==> (return.denom == 0)
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT;condition="orig(denom != 1)"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.denom >= 0
arg.denom >= 0
return != null
return.denom >= 0
orig(arg) != null
(this.numer == 0) ==> (this.denom == 0)
(this.numer == 0) ==> (arg.numer == 0)
(return.numer == 0) ==> (this.numer == 0)
(this.numer == 0) ==> (return.numer == 0)
(this.numer == 0) ==> (return.denom == 0)
(return.numer == 0) ==> (this.denom == 0)
(this.denom == 0) ==> (return.denom == 0)
(return.numer == 0) ==> (arg.numer == 0)
(arg.numer == 0) ==> (return.denom == 0)
(arg.denom == 0) ==> (return.denom == 0)
(return.numer == 0) ==> (return.denom == 0)
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT;condition="not(orig(denom != 1))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.denom == 1
arg.denom one of { 0, 1, 3 }
return != null
return.denom >= 0
orig(arg) != null
(return.numer == 0) ==> (this.numer == 0)
(arg.numer == 0) ==> (return.denom == 0)
(arg.denom == 0) ==> (return.denom == 0)
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT;condition="arg.isNaN()"
this.numer == orig(this.numer)
this.denom == return.denom
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.denom == 0
arg.denom >= 0
return != null
orig(arg) != null
(this.numer == 0) ==> (arg.numer == 0)
(return.numer == 0) ==> (this.numer == 0)
(this.numer == 0) ==> (return.numer == 0)
this.denom <= arg.denom
(return.numer == 0) ==> (arg.numer == 0)
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT;condition="not(arg.isNaN())"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.denom >= 1
arg.denom >= 0
return != null
return.denom >= 0
orig(arg) != null
(return.numer == 0) ==> (this.numer == 0)
(arg.numer == 0) ==> (return.denom == 0)
(arg.denom == 0) ==> (return.denom == 0)
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT;condition="orig(arg.isNaN())"
this.numer == orig(this.numer)
this.denom == return.denom
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.denom == 0
arg.denom >= 0
return != null
orig(arg) != null
(this.numer == 0) ==> (arg.numer == 0)
(return.numer == 0) ==> (this.numer == 0)
(this.numer == 0) ==> (return.numer == 0)
this.denom <= arg.denom
(return.numer == 0) ==> (arg.numer == 0)
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT;condition="not(orig(arg.isNaN()))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.denom >= 1
arg.denom >= 0
return != null
return.denom >= 0
orig(arg) != null
(return.numer == 0) ==> (this.numer == 0)
(arg.numer == 0) ==> (return.denom == 0)
(arg.denom == 0) ==> (return.denom == 0)
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::ENTER
(this.denom == 0)  ==>  (this.denom is a pointer)
(this.denom == 0)  ==>  (this.numer != 0)
(this.denom == 0)  ==>  (this.numer != this.denom)
obj != null
obj.getClass().getName() == PolyCalc.RatNum.class
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::ENTER;condition="not(denom < 0)"
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::ENTER;condition="(denom == 0)"
this.numer != 0
this.denom == 0
obj != null
obj.getClass().getName() == PolyCalc.RatNum.class
this.numer != this.denom
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::ENTER;condition="not((denom == 0))"
this.denom >= 1
obj != null
obj.getClass().getName() == PolyCalc.RatNum.class
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::ENTER;condition="(this.denom != 0)&&(this.numer < 0)"
this.numer <= -1
this.denom >= 1
obj != null
obj.getClass().getName() == PolyCalc.RatNum.class
this.numer < this.denom
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::ENTER;condition="not((this.denom != 0)&&(this.numer < 0))"
this.denom >= 0
obj != null
obj.getClass().getName() == PolyCalc.RatNum.class
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::ENTER;condition="(this.denom == 0)||(this.numer > 0)"
this.numer != 0
this.denom >= 0
obj != null
obj.getClass().getName() == PolyCalc.RatNum.class
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::ENTER;condition="not((this.denom == 0)||(this.numer > 0))"
this.numer <= 0
this.denom >= 1
obj != null
obj.getClass().getName() == PolyCalc.RatNum.class
this.numer < this.denom
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::ENTER;condition="rn.isNaN()"
this.numer != 0
this.denom == 0
obj != null
obj.getClass().getName() == PolyCalc.RatNum.class
this.numer != this.denom
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::ENTER;condition="not(rn.isNaN())"
this.denom >= 1
obj != null
obj.getClass().getName() == PolyCalc.RatNum.class
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::ENTER;condition="isNaN()"
this.numer != 0
this.denom == 0
obj != null
obj.getClass().getName() == PolyCalc.RatNum.class
this.numer != this.denom
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::ENTER;condition="not(isNaN())"
this.denom >= 1
obj != null
obj.getClass().getName() == PolyCalc.RatNum.class
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::ENTER;condition="denom != 1"
this.numer != 0
this.denom >= 0
obj != null
obj.getClass().getName() == PolyCalc.RatNum.class
this.numer != this.denom
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::ENTER;condition="not(denom != 1)"
this.denom == 1
obj != null
obj.getClass().getName() == PolyCalc.RatNum.class
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::ENTER;condition="arg.isNaN()"
this.numer != 0
this.denom == 0
obj != null
obj.getClass().getName() == PolyCalc.RatNum.class
this.numer != this.denom
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::ENTER;condition="not(arg.isNaN())"
this.denom >= 1
obj != null
obj.getClass().getName() == PolyCalc.RatNum.class
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT230
this.denom == 0
return == true
this.numer != this.denom
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT230;condition="return == true"
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT230;condition="not(denom < 0)"
this.denom == 0
return == true
this.numer != this.denom
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT230;condition="(denom == 0)"
return == true
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT230;condition="orig((denom == 0))"
return == true
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT230;condition="not((this.denom != 0)&&(this.numer < 0))"
this.denom == 0
return == true
this.numer != this.denom
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT230;condition="not(orig((this.denom != 0)&&(this.numer < 0)))"
this.denom == 0
return == true
this.numer != this.denom
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT230;condition="(this.denom == 0)||(this.numer > 0)"
this.denom == 0
return == true
this.numer != this.denom
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT230;condition="orig((this.denom == 0)||(this.numer > 0))"
this.denom == 0
return == true
this.numer != this.denom
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT230;condition="orig(rn.isNaN())"
return == true
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT230;condition="rn.isNaN()"
return == true
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT230;condition="isNaN()"
return == true
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT230;condition="orig(isNaN())"
return == true
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT230;condition="denom != 1"
this.denom == 0
return == true
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT230;condition="orig(denom != 1)"
this.denom == 0
return == true
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT230;condition="arg.isNaN()"
return == true
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT230;condition="orig(arg.isNaN())"
return == true
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT232
(return == true)  ==>  (this.denom >= 1)
(this.denom == 0)  ==>  (return == false)
(this.denom == 0)  ==>  (this.denom is a pointer)
(this.denom == 0)  ==>  (this.numer != 0)
(this.denom == 0)  ==>  (this.numer != this.denom)
(this.denom == 0)  ==>  (this.numer == 1  (mod 2))
(this.denom == 0)  ==>  (this.numer one of { -1, 1 })
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT232;condition="return == true"
this.denom >= 1
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT232;condition="not(return == true)"
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT232;condition="not(denom < 0)"
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT232;condition="(denom == 0)"
this.numer one of { -1, 1 }
this.numer == 1  (mod 2)
return == false
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT232;condition="not((denom == 0))"
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT232;condition="orig((denom == 0))"
this.numer one of { -1, 1 }
this.numer == 1  (mod 2)
return == false
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT232;condition="not(orig((denom == 0)))"
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT232;condition="(this.denom != 0)&&(this.numer < 0)"
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT232;condition="not((this.denom != 0)&&(this.numer < 0))"
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT232;condition="orig((this.denom != 0)&&(this.numer < 0))"
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT232;condition="not(orig((this.denom != 0)&&(this.numer < 0)))"
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT232;condition="(this.denom == 0)||(this.numer > 0)"
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT232;condition="not((this.denom == 0)||(this.numer > 0))"
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT232;condition="orig((this.denom == 0)||(this.numer > 0))"
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT232;condition="not(orig((this.denom == 0)||(this.numer > 0)))"
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT232;condition="orig(rn.isNaN())"
this.numer one of { -1, 1 }
this.numer == 1  (mod 2)
return == false
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT232;condition="not(orig(rn.isNaN()))"
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT232;condition="rn.isNaN()"
this.numer one of { -1, 1 }
this.numer == 1  (mod 2)
return == false
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT232;condition="not(rn.isNaN())"
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT232;condition="isNaN()"
this.numer one of { -1, 1 }
this.numer == 1  (mod 2)
return == false
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT232;condition="not(isNaN())"
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT232;condition="orig(isNaN())"
this.numer one of { -1, 1 }
this.numer == 1  (mod 2)
return == false
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT232;condition="not(orig(isNaN()))"
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT232;condition="denom != 1"
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT232;condition="not(denom != 1)"
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT232;condition="orig(denom != 1)"
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT232;condition="not(orig(denom != 1))"
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT232;condition="arg.isNaN()"
this.numer one of { -1, 1 }
this.numer == 1  (mod 2)
return == false
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT232;condition="not(arg.isNaN())"
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT232;condition="orig(arg.isNaN())"
this.numer one of { -1, 1 }
this.numer == 1  (mod 2)
return == false
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT232;condition="not(orig(arg.isNaN()))"
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT
this.numer == orig(this.numer)
this.denom == orig(this.denom)
(this.denom == 0)  ==>  (this.denom is a pointer)
(this.denom == 0)  ==>  (this.numer != 0)
(this.denom == 0)  ==>  (this.numer != this.denom)
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT;condition="return == true"
return == true
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT;condition="not(return == true)"
return == false
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT;condition="not(denom < 0)"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT;condition="(denom == 0)"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.numer != 0
this.denom == 0
this.numer != this.denom
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT;condition="not((denom == 0))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom >= 1
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT;condition="orig((denom == 0))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.numer != 0
this.denom == 0
orig(obj) != null
orig(obj.getClass().getName()) == PolyCalc.RatNum.class
this.numer != this.denom
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT;condition="not(orig((denom == 0)))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom >= 1
orig(obj) != null
orig(obj.getClass().getName()) == PolyCalc.RatNum.class
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT;condition="(this.denom != 0)&&(this.numer < 0)"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.numer <= -1
this.denom >= 1
this.numer < this.denom
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT;condition="not((this.denom != 0)&&(this.numer < 0))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom >= 0
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT;condition="orig((this.denom != 0)&&(this.numer < 0))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.numer <= -1
this.denom >= 1
orig(obj) != null
orig(obj.getClass().getName()) == PolyCalc.RatNum.class
this.numer < this.denom
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT;condition="not(orig((this.denom != 0)&&(this.numer < 0)))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom >= 0
orig(obj) != null
orig(obj.getClass().getName()) == PolyCalc.RatNum.class
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT;condition="(this.denom == 0)||(this.numer > 0)"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.numer != 0
this.denom >= 0
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT;condition="not((this.denom == 0)||(this.numer > 0))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.numer <= 0
this.denom >= 1
this.numer < this.denom
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT;condition="orig((this.denom == 0)||(this.numer > 0))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.numer != 0
this.denom >= 0
orig(obj) != null
orig(obj.getClass().getName()) == PolyCalc.RatNum.class
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT;condition="not(orig((this.denom == 0)||(this.numer > 0)))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.numer <= 0
this.denom >= 1
orig(obj) != null
orig(obj.getClass().getName()) == PolyCalc.RatNum.class
this.numer < this.denom
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT;condition="orig(rn.isNaN())"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.numer != 0
this.denom == 0
orig(obj) != null
orig(obj.getClass().getName()) == PolyCalc.RatNum.class
this.numer != this.denom
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT;condition="not(orig(rn.isNaN()))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom >= 1
orig(obj) != null
orig(obj.getClass().getName()) == PolyCalc.RatNum.class
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT;condition="rn.isNaN()"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.numer != 0
this.denom == 0
this.numer != this.denom
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT;condition="not(rn.isNaN())"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom >= 1
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT;condition="isNaN()"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.numer != 0
this.denom == 0
this.numer != this.denom
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT;condition="not(isNaN())"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom >= 1
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT;condition="orig(isNaN())"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.numer != 0
this.denom == 0
orig(obj) != null
orig(obj.getClass().getName()) == PolyCalc.RatNum.class
this.numer != this.denom
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT;condition="not(orig(isNaN()))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom >= 1
orig(obj) != null
orig(obj.getClass().getName()) == PolyCalc.RatNum.class
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT;condition="denom != 1"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.numer != 0
this.denom >= 0
this.numer != this.denom
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT;condition="not(denom != 1)"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom == 1
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT;condition="orig(denom != 1)"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.numer != 0
this.denom >= 0
orig(obj) != null
orig(obj.getClass().getName()) == PolyCalc.RatNum.class
this.numer != this.denom
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT;condition="not(orig(denom != 1))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom == 1
orig(obj) != null
orig(obj.getClass().getName()) == PolyCalc.RatNum.class
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT;condition="arg.isNaN()"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.numer != 0
this.denom == 0
this.numer != this.denom
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT;condition="not(arg.isNaN())"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom >= 1
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT;condition="orig(arg.isNaN())"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.numer != 0
this.denom == 0
orig(obj) != null
orig(obj.getClass().getName()) == PolyCalc.RatNum.class
this.numer != this.denom
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT;condition="not(orig(arg.isNaN()))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom >= 1
orig(obj) != null
orig(obj.getClass().getName()) == PolyCalc.RatNum.class
===========================================================================
PolyCalc.RatNum.gcd(int, int):::ENTER
_b != 0
===========================================================================
PolyCalc.RatNum.gcd(int, int):::EXIT209
===========================================================================
PolyCalc.RatNum.gcd(int, int):::EXIT
return != 0
orig(_a) % return == 0
orig(_b) % return == 0
===========================================================================
PolyCalc.RatNum.isNaN():::ENTER
===========================================================================
PolyCalc.RatNum.isNaN():::ENTER;condition="not(denom < 0)"
===========================================================================
PolyCalc.RatNum.isNaN():::EXIT
this.numer == orig(this.numer)
this.denom == orig(this.denom)
(this.denom == 0)  <==>  (return == true)
(this.denom == 0)  ==>  (this.denom is a pointer)
===========================================================================
PolyCalc.RatNum.isNaN():::EXIT;condition="return == true"
this.denom == 0
return == true
===========================================================================
PolyCalc.RatNum.isNaN():::EXIT;condition="not(return == true)"
this.denom >= 1
return == false
===========================================================================
PolyCalc.RatNum.isNaN():::EXIT;condition="not(denom < 0)"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
===========================================================================
PolyCalc.RatNum.isNaN():::EXIT;condition="(denom == 0)"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom == 0
return == true
===========================================================================
PolyCalc.RatNum.isNaN():::EXIT;condition="not((denom == 0))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom >= 1
return == false
===========================================================================
PolyCalc.RatNum.isNaN():::EXIT;condition="orig((denom == 0))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom == 0
return == true
===========================================================================
PolyCalc.RatNum.isNaN():::EXIT;condition="not(orig((denom == 0)))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom >= 1
return == false
===========================================================================
PolyCalc.RatNum.isNegative():::ENTER
(this.denom == 0)  ==>  (this.denom is a pointer)
(this.denom == 0)  ==>  (this.numer != this.denom)
(this.denom == 0)  ==>  (this.numer one of { -1, 1, 100 })
===========================================================================
PolyCalc.RatNum.isNegative():::ENTER;condition="not(denom < 0)"
===========================================================================
PolyCalc.RatNum.isNegative():::ENTER;condition="(denom == 0)"
this.numer one of { -1, 1, 100 }
this.denom == 0
this.numer != this.denom
===========================================================================
PolyCalc.RatNum.isNegative():::ENTER;condition="not((denom == 0))"
this.denom >= 1
===========================================================================
PolyCalc.RatNum.isNegative():::EXIT
this.numer == orig(this.numer)
this.denom == orig(this.denom)
(return == true)  ==>  (this.denom >= 1)
(return == true)  ==>  (this.numer < this.denom)
(return == true)  ==>  (this.numer <= -1)
(this.denom == 0)  ==>  (return == false)
(this.denom == 0)  ==>  (this.denom is a pointer)
(this.denom == 0)  ==>  (this.numer != this.denom)
(this.denom == 0)  ==>  (this.numer one of { -1, 1, 100 })
===========================================================================
PolyCalc.RatNum.isNegative():::EXIT;condition="return == true"
this.numer <= -1
this.denom >= 1
return == true
this.numer < this.denom
===========================================================================
PolyCalc.RatNum.isNegative():::EXIT;condition="not(return == true)"
return == false
===========================================================================
PolyCalc.RatNum.isNegative():::EXIT;condition="not(denom < 0)"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
===========================================================================
PolyCalc.RatNum.isNegative():::EXIT;condition="(denom == 0)"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.numer one of { -1, 1, 100 }
this.denom == 0
return == false
this.numer != this.denom
===========================================================================
PolyCalc.RatNum.isNegative():::EXIT;condition="not((denom == 0))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom >= 1
===========================================================================
PolyCalc.RatNum.isNegative():::EXIT;condition="orig((denom == 0))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.numer one of { -1, 1, 100 }
this.denom == 0
return == false
this.numer != this.denom
===========================================================================
PolyCalc.RatNum.isNegative():::EXIT;condition="not(orig((denom == 0)))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom >= 1
===========================================================================
PolyCalc.RatNum.isNegative():::EXIT;condition="(this.denom != 0)&&(this.numer < 0)"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.numer <= -1
this.denom >= 1
return == true
this.numer < this.denom
===========================================================================
PolyCalc.RatNum.isNegative():::EXIT;condition="not((this.denom != 0)&&(this.numer < 0))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom >= 0
return == false
===========================================================================
PolyCalc.RatNum.isNegative():::EXIT;condition="orig((this.denom != 0)&&(this.numer < 0))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.numer <= -1
this.denom >= 1
return == true
this.numer < this.denom
===========================================================================
PolyCalc.RatNum.isNegative():::EXIT;condition="not(orig((this.denom != 0)&&(this.numer < 0)))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom >= 0
return == false
===========================================================================
PolyCalc.RatNum.isPositive():::ENTER
(this.denom == 0)  ==>  (this.denom is a pointer)
(this.denom == 0)  ==>  (this.numer one of { -1, 1, 100 })
===========================================================================
PolyCalc.RatNum.isPositive():::ENTER;condition="not(denom < 0)"
===========================================================================
PolyCalc.RatNum.isPositive():::ENTER;condition="(denom == 0)"
this.numer one of { -1, 1, 100 }
this.denom == 0
===========================================================================
PolyCalc.RatNum.isPositive():::ENTER;condition="not((denom == 0))"
this.denom >= 1
===========================================================================
PolyCalc.RatNum.isPositive():::ENTER;condition="(this.denom != 0)&&(this.numer < 0)"
this.numer < this.denom
===========================================================================
PolyCalc.RatNum.isPositive():::ENTER;condition="not((this.denom != 0)&&(this.numer < 0))"
this.denom >= 0
===========================================================================
PolyCalc.RatNum.isPositive():::EXIT
this.numer == orig(this.numer)
this.denom == orig(this.denom)
(return == false)  ==>  (this.numer < this.denom)
(return == true)  ==>  (this.numer != 0)
(this.denom == 0)  ==>  (return == true)
(this.denom == 0)  ==>  (this.denom is a pointer)
(this.denom == 0)  ==>  (this.numer one of { -1, 1, 100 })
===========================================================================
PolyCalc.RatNum.isPositive():::EXIT;condition="return == true"
this.numer != 0
return == true
===========================================================================
PolyCalc.RatNum.isPositive():::EXIT;condition="not(return == true)"
return == false
this.numer < this.denom
===========================================================================
PolyCalc.RatNum.isPositive():::EXIT;condition="not(denom < 0)"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
===========================================================================
PolyCalc.RatNum.isPositive():::EXIT;condition="(denom == 0)"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.numer one of { -1, 1, 100 }
this.denom == 0
return == true
===========================================================================
PolyCalc.RatNum.isPositive():::EXIT;condition="not((denom == 0))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom >= 1
===========================================================================
PolyCalc.RatNum.isPositive():::EXIT;condition="orig((denom == 0))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.numer one of { -1, 1, 100 }
this.denom == 0
return == true
===========================================================================
PolyCalc.RatNum.isPositive():::EXIT;condition="not(orig((denom == 0)))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom >= 1
===========================================================================
PolyCalc.RatNum.isPositive():::EXIT;condition="(this.denom != 0)&&(this.numer < 0)"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
return == false
this.numer < this.denom
===========================================================================
PolyCalc.RatNum.isPositive():::EXIT;condition="not((this.denom != 0)&&(this.numer < 0))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom >= 0
===========================================================================
PolyCalc.RatNum.isPositive():::EXIT;condition="orig((this.denom != 0)&&(this.numer < 0))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
return == false
this.numer < this.denom
===========================================================================
PolyCalc.RatNum.isPositive():::EXIT;condition="not(orig((this.denom != 0)&&(this.numer < 0)))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom >= 0
===========================================================================
PolyCalc.RatNum.isPositive():::EXIT;condition="(this.denom == 0)||(this.numer > 0)"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.numer != 0
this.denom >= 0
return == true
===========================================================================
PolyCalc.RatNum.isPositive():::EXIT;condition="not((this.denom == 0)||(this.numer > 0))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
return == false
this.numer < this.denom
===========================================================================
PolyCalc.RatNum.isPositive():::EXIT;condition="orig((this.denom == 0)||(this.numer > 0))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.numer != 0
this.denom >= 0
return == true
===========================================================================
PolyCalc.RatNum.isPositive():::EXIT;condition="not(orig((this.denom == 0)||(this.numer > 0)))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
return == false
this.numer < this.denom
===========================================================================
PolyCalc.RatNum.mul(PolyCalc.RatNum):::ENTER
(this.denom == 0)  ==>  (this.denom <= arg.denom)
(this.denom == 0)  ==>  (this.denom is a pointer)
(this.denom == 0)  ==>  (this.numer != this.denom)
arg != null
arg.denom >= 0
===========================================================================
PolyCalc.RatNum.mul(PolyCalc.RatNum):::ENTER;condition="not(denom < 0)"
===========================================================================
PolyCalc.RatNum.mul(PolyCalc.RatNum):::ENTER;condition="(denom == 0)"
this.denom == 0
arg != null
arg.denom >= 0
this.numer != this.denom
this.denom <= arg.denom
===========================================================================
PolyCalc.RatNum.mul(PolyCalc.RatNum):::ENTER;condition="not((denom == 0))"
this.denom >= 1
arg != null
arg.denom >= 0
===========================================================================
PolyCalc.RatNum.mul(PolyCalc.RatNum):::ENTER;condition="(this.denom != 0)&&(this.numer < 0)"
this.numer <= -1
this.denom >= 1
arg != null
arg.denom >= 0
this.numer < this.denom
this.numer < arg.denom
===========================================================================
PolyCalc.RatNum.mul(PolyCalc.RatNum):::ENTER;condition="not((this.denom != 0)&&(this.numer < 0))"
this.denom >= 0
arg != null
arg.denom >= 0
===========================================================================
PolyCalc.RatNum.mul(PolyCalc.RatNum):::ENTER;condition="(this.denom == 0)||(this.numer > 0)"
this.numer != 0
this.denom >= 0
arg != null
arg.denom >= 0
===========================================================================
PolyCalc.RatNum.mul(PolyCalc.RatNum):::ENTER;condition="not((this.denom == 0)||(this.numer > 0))"
this.numer <= 0
this.denom >= 1
arg != null
arg.denom >= 0
this.numer < this.denom
this.numer <= arg.denom
===========================================================================
PolyCalc.RatNum.mul(PolyCalc.RatNum):::ENTER;condition="rn.isNaN()"
this.denom == 0
arg != null
arg.denom >= 0
this.numer != this.denom
this.denom <= arg.denom
===========================================================================
PolyCalc.RatNum.mul(PolyCalc.RatNum):::ENTER;condition="not(rn.isNaN())"
this.denom >= 1
arg != null
arg.denom >= 0
===========================================================================
PolyCalc.RatNum.mul(PolyCalc.RatNum):::ENTER;condition="isNaN()"
this.denom == 0
arg != null
arg.denom >= 0
this.numer != this.denom
this.denom <= arg.denom
===========================================================================
PolyCalc.RatNum.mul(PolyCalc.RatNum):::ENTER;condition="not(isNaN())"
this.denom >= 1
arg != null
arg.denom >= 0
===========================================================================
PolyCalc.RatNum.mul(PolyCalc.RatNum):::ENTER;condition="denom != 1"
this.numer != 0
this.denom >= 0
arg != null
arg.denom >= 0
this.numer != this.denom
===========================================================================
PolyCalc.RatNum.mul(PolyCalc.RatNum):::ENTER;condition="not(denom != 1)"
this.denom == 1
arg != null
arg.denom >= 0
===========================================================================
PolyCalc.RatNum.mul(PolyCalc.RatNum):::EXIT
this.numer == orig(this.numer)
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
(this.denom == 0)  ==>  ((return.numer == 0) ==> (arg.numer == 0))
(this.denom == 0)  ==>  (arg.denom >= return.denom)
(this.denom == 0)  ==>  (arg.numer == (return.numer / this.numer))
(this.denom == 0)  ==>  (return.denom == 0)
(this.denom == 0)  ==>  (return.denom is a pointer)
(this.denom == 0)  ==>  (return.numer % this.numer == 0)
(this.denom == 0)  ==>  (return.numer == (this.numer * arg.numer))
(this.denom == 0)  ==>  (this.denom <= arg.denom)
(this.denom == 0)  ==>  (this.denom == return.denom)
(this.denom == 0)  ==>  (this.denom is a pointer)
(this.denom == 0)  ==>  (this.numer != return.denom)
(this.denom == 0)  ==>  (this.numer != this.denom)
arg.denom >= 0
return != null
return.denom >= 0
(this.numer == 0) ==> (return.numer == 0)
(this.denom == 0) ==> (return.denom == 0)
(arg.numer == 0) ==> (return.numer == 0)
(arg.denom == 0) ==> (return.denom == 0)
===========================================================================
PolyCalc.RatNum.mul(PolyCalc.RatNum):::EXIT;condition="not(denom < 0)"
===========================================================================
PolyCalc.RatNum.mul(PolyCalc.RatNum):::EXIT;condition="(denom == 0)"
this.numer == orig(this.numer)
this.denom == return.denom
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.denom == 0
arg.denom >= 0
return != null
this.numer != this.denom
return.numer % this.numer == 0
this.denom <= arg.denom
(arg.numer == 0) ==> (return.numer == 0)
(return.numer == 0) ==> (arg.numer == 0)
arg.numer == (return.numer / this.numer)
return.numer == (this.numer * arg.numer)
===========================================================================
PolyCalc.RatNum.mul(PolyCalc.RatNum):::EXIT;condition="not((denom == 0))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.denom >= 1
arg.denom >= 0
return != null
return.denom >= 0
(this.numer == 0) ==> (return.numer == 0)
(arg.numer == 0) ==> (return.numer == 0)
(arg.denom == 0) ==> (return.denom == 0)
(return.denom == 0) ==> (arg.denom == 0)
===========================================================================
PolyCalc.RatNum.mul(PolyCalc.RatNum):::EXIT;condition="orig((denom == 0))"
this.numer == orig(this.numer)
this.denom == return.denom
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.denom == 0
arg.denom >= 0
return != null
orig(arg) != null
this.numer != this.denom
return.numer % this.numer == 0
this.denom <= arg.denom
(arg.numer == 0) ==> (return.numer == 0)
(return.numer == 0) ==> (arg.numer == 0)
arg.numer == (return.numer / this.numer)
return.numer == (this.numer * arg.numer)
===========================================================================
PolyCalc.RatNum.mul(PolyCalc.RatNum):::EXIT;condition="not(orig((denom == 0)))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.denom >= 1
arg.denom >= 0
return != null
return.denom >= 0
orig(arg) != null
(this.numer == 0) ==> (return.numer == 0)
(arg.numer == 0) ==> (return.numer == 0)
(arg.denom == 0) ==> (return.denom == 0)
(return.denom == 0) ==> (arg.denom == 0)
===========================================================================
PolyCalc.RatNum.mul(PolyCalc.RatNum):::EXIT;condition="(this.denom != 0)&&(this.numer < 0)"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.numer <= -1
this.denom >= 1
arg.denom >= 0
return != null
return.denom >= 0
this.numer < this.denom
this.numer < arg.denom
this.numer < return.denom
(arg.numer == 0) ==> (return.numer == 0)
(return.numer == 0) ==> (arg.numer == 0)
(arg.denom == 0) ==> (return.denom == 0)
(return.denom == 0) ==> (arg.denom == 0)
===========================================================================
PolyCalc.RatNum.mul(PolyCalc.RatNum):::EXIT;condition="not((this.denom != 0)&&(this.numer < 0))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.denom >= 0
arg.denom >= 0
return != null
return.denom >= 0
(this.numer == 0) ==> (return.numer == 0)
(this.denom == 0) ==> (return.denom == 0)
(arg.numer == 0) ==> (return.numer == 0)
(arg.denom == 0) ==> (return.denom == 0)
===========================================================================
PolyCalc.RatNum.mul(PolyCalc.RatNum):::EXIT;condition="orig((this.denom != 0)&&(this.numer < 0))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.numer <= -1
this.denom >= 1
arg.denom >= 0
return != null
return.denom >= 0
orig(arg) != null
this.numer < this.denom
this.numer < arg.denom
this.numer < return.denom
(arg.numer == 0) ==> (return.numer == 0)
(return.numer == 0) ==> (arg.numer == 0)
(arg.denom == 0) ==> (return.denom == 0)
(return.denom == 0) ==> (arg.denom == 0)
===========================================================================
PolyCalc.RatNum.mul(PolyCalc.RatNum):::EXIT;condition="not(orig((this.denom != 0)&&(this.numer < 0)))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.denom >= 0
arg.denom >= 0
return != null
return.denom >= 0
orig(arg) != null
(this.numer == 0) ==> (return.numer == 0)
(this.denom == 0) ==> (return.denom == 0)
(arg.numer == 0) ==> (return.numer == 0)
(arg.denom == 0) ==> (return.denom == 0)
===========================================================================
PolyCalc.RatNum.mul(PolyCalc.RatNum):::EXIT;condition="(this.denom == 0)||(this.numer > 0)"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.numer != 0
this.denom >= 0
arg.denom >= 0
return != null
return.denom >= 0
(this.denom == 0) ==> (return.denom == 0)
(arg.numer == 0) ==> (return.numer == 0)
(return.numer == 0) ==> (arg.numer == 0)
(arg.denom == 0) ==> (return.denom == 0)
===========================================================================
PolyCalc.RatNum.mul(PolyCalc.RatNum):::EXIT;condition="not((this.denom == 0)||(this.numer > 0))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.numer <= 0
this.denom >= 1
arg.denom >= 0
return != null
return.denom >= 0
this.numer < this.denom
this.numer <= arg.denom
(this.numer == 0) ==> (return.numer == 0)
this.numer <= return.denom
(arg.numer == 0) ==> (return.numer == 0)
(arg.denom == 0) ==> (return.denom == 0)
(return.denom == 0) ==> (arg.denom == 0)
===========================================================================
PolyCalc.RatNum.mul(PolyCalc.RatNum):::EXIT;condition="orig((this.denom == 0)||(this.numer > 0))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.numer != 0
this.denom >= 0
arg.denom >= 0
return != null
return.denom >= 0
orig(arg) != null
(this.denom == 0) ==> (return.denom == 0)
(arg.numer == 0) ==> (return.numer == 0)
(return.numer == 0) ==> (arg.numer == 0)
(arg.denom == 0) ==> (return.denom == 0)
===========================================================================
PolyCalc.RatNum.mul(PolyCalc.RatNum):::EXIT;condition="not(orig((this.denom == 0)||(this.numer > 0)))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.numer <= 0
this.denom >= 1
arg.denom >= 0
return != null
return.denom >= 0
orig(arg) != null
this.numer < this.denom
this.numer <= arg.denom
(this.numer == 0) ==> (return.numer == 0)
this.numer <= return.denom
(arg.numer == 0) ==> (return.numer == 0)
(arg.denom == 0) ==> (return.denom == 0)
(return.denom == 0) ==> (arg.denom == 0)
===========================================================================
PolyCalc.RatNum.mul(PolyCalc.RatNum):::EXIT;condition="orig(rn.isNaN())"
this.numer == orig(this.numer)
this.denom == return.denom
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.denom == 0
arg.denom >= 0
return != null
orig(arg) != null
this.numer != this.denom
return.numer % this.numer == 0
this.denom <= arg.denom
(arg.numer == 0) ==> (return.numer == 0)
(return.numer == 0) ==> (arg.numer == 0)
arg.numer == (return.numer / this.numer)
return.numer == (this.numer * arg.numer)
===========================================================================
PolyCalc.RatNum.mul(PolyCalc.RatNum):::EXIT;condition="not(orig(rn.isNaN()))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.denom >= 1
arg.denom >= 0
return != null
return.denom >= 0
orig(arg) != null
(this.numer == 0) ==> (return.numer == 0)
(arg.numer == 0) ==> (return.numer == 0)
(arg.denom == 0) ==> (return.denom == 0)
(return.denom == 0) ==> (arg.denom == 0)
===========================================================================
PolyCalc.RatNum.mul(PolyCalc.RatNum):::EXIT;condition="rn.isNaN()"
this.numer == orig(this.numer)
this.denom == return.denom
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.denom == 0
arg.denom >= 0
return != null
this.numer != this.denom
return.numer % this.numer == 0
this.denom <= arg.denom
(arg.numer == 0) ==> (return.numer == 0)
(return.numer == 0) ==> (arg.numer == 0)
arg.numer == (return.numer / this.numer)
return.numer == (this.numer * arg.numer)
===========================================================================
PolyCalc.RatNum.mul(PolyCalc.RatNum):::EXIT;condition="not(rn.isNaN())"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.denom >= 1
arg.denom >= 0
return != null
return.denom >= 0
(this.numer == 0) ==> (return.numer == 0)
(arg.numer == 0) ==> (return.numer == 0)
(arg.denom == 0) ==> (return.denom == 0)
(return.denom == 0) ==> (arg.denom == 0)
===========================================================================
PolyCalc.RatNum.mul(PolyCalc.RatNum):::EXIT;condition="isNaN()"
this.numer == orig(this.numer)
this.denom == return.denom
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.denom == 0
arg.denom >= 0
return != null
this.numer != this.denom
return.numer % this.numer == 0
this.denom <= arg.denom
(arg.numer == 0) ==> (return.numer == 0)
(return.numer == 0) ==> (arg.numer == 0)
arg.numer == (return.numer / this.numer)
return.numer == (this.numer * arg.numer)
===========================================================================
PolyCalc.RatNum.mul(PolyCalc.RatNum):::EXIT;condition="not(isNaN())"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.denom >= 1
arg.denom >= 0
return != null
return.denom >= 0
(this.numer == 0) ==> (return.numer == 0)
(arg.numer == 0) ==> (return.numer == 0)
(arg.denom == 0) ==> (return.denom == 0)
(return.denom == 0) ==> (arg.denom == 0)
===========================================================================
PolyCalc.RatNum.mul(PolyCalc.RatNum):::EXIT;condition="orig(isNaN())"
this.numer == orig(this.numer)
this.denom == return.denom
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.denom == 0
arg.denom >= 0
return != null
orig(arg) != null
this.numer != this.denom
return.numer % this.numer == 0
this.denom <= arg.denom
(arg.numer == 0) ==> (return.numer == 0)
(return.numer == 0) ==> (arg.numer == 0)
arg.numer == (return.numer / this.numer)
return.numer == (this.numer * arg.numer)
===========================================================================
PolyCalc.RatNum.mul(PolyCalc.RatNum):::EXIT;condition="not(orig(isNaN()))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.denom >= 1
arg.denom >= 0
return != null
return.denom >= 0
orig(arg) != null
(this.numer == 0) ==> (return.numer == 0)
(arg.numer == 0) ==> (return.numer == 0)
(arg.denom == 0) ==> (return.denom == 0)
(return.denom == 0) ==> (arg.denom == 0)
===========================================================================
PolyCalc.RatNum.mul(PolyCalc.RatNum):::EXIT;condition="denom != 1"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.numer != 0
this.denom >= 0
arg.denom >= 0
return != null
return.denom >= 0
this.numer != this.denom
(this.denom == 0) ==> (return.denom == 0)
(arg.numer == 0) ==> (return.numer == 0)
(return.numer == 0) ==> (arg.numer == 0)
(arg.denom == 0) ==> (return.denom == 0)
===========================================================================
PolyCalc.RatNum.mul(PolyCalc.RatNum):::EXIT;condition="not(denom != 1)"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.denom == 1
arg.denom >= 0
return != null
return.denom >= 0
(this.numer == 0) ==> (return.numer == 0)
(arg.numer == 0) ==> (return.numer == 0)
(arg.denom == 0) ==> (return.denom == 0)
(return.denom == 0) ==> (arg.denom == 0)
arg.denom >= return.denom
===========================================================================
PolyCalc.RatNum.mul(PolyCalc.RatNum):::EXIT;condition="orig(denom != 1)"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.numer != 0
this.denom >= 0
arg.denom >= 0
return != null
return.denom >= 0
orig(arg) != null
this.numer != this.denom
(this.denom == 0) ==> (return.denom == 0)
(arg.numer == 0) ==> (return.numer == 0)
(return.numer == 0) ==> (arg.numer == 0)
(arg.denom == 0) ==> (return.denom == 0)
===========================================================================
PolyCalc.RatNum.mul(PolyCalc.RatNum):::EXIT;condition="not(orig(denom != 1))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.denom == 1
arg.denom >= 0
return != null
return.denom >= 0
orig(arg) != null
(this.numer == 0) ==> (return.numer == 0)
(arg.numer == 0) ==> (return.numer == 0)
(arg.denom == 0) ==> (return.denom == 0)
(return.denom == 0) ==> (arg.denom == 0)
arg.denom >= return.denom
===========================================================================
PolyCalc.RatNum.negate():::ENTER
(this.denom == 0)  ==>  (this.denom is a pointer)
===========================================================================
PolyCalc.RatNum.negate():::ENTER;condition="not(denom < 0)"
===========================================================================
PolyCalc.RatNum.negate():::ENTER;condition="(denom == 0)"
this.denom == 0
===========================================================================
PolyCalc.RatNum.negate():::ENTER;condition="not((denom == 0))"
this.denom >= 1
===========================================================================
PolyCalc.RatNum.negate():::ENTER;condition="(this.denom != 0)&&(this.numer < 0)"
this.numer <= -1
this.denom >= 1
this.numer < this.denom
===========================================================================
PolyCalc.RatNum.negate():::ENTER;condition="not((this.denom != 0)&&(this.numer < 0))"
this.denom >= 0
===========================================================================
PolyCalc.RatNum.negate():::ENTER;condition="(this.denom == 0)||(this.numer > 0)"
this.denom >= 0
(this.numer == 0) ==> (this.denom == 0)
===========================================================================
PolyCalc.RatNum.negate():::ENTER;condition="not((this.denom == 0)||(this.numer > 0))"
this.numer <= 0
this.denom >= 1
this.numer < this.denom
===========================================================================
PolyCalc.RatNum.negate():::ENTER;condition="rn.isNaN()"
this.denom == 0
===========================================================================
PolyCalc.RatNum.negate():::ENTER;condition="not(rn.isNaN())"
this.denom >= 1
===========================================================================
PolyCalc.RatNum.negate():::ENTER;condition="isNaN()"
this.denom == 0
===========================================================================
PolyCalc.RatNum.negate():::ENTER;condition="not(isNaN())"
this.denom >= 1
===========================================================================
PolyCalc.RatNum.negate():::ENTER;condition="denom != 1"
this.denom >= 0
(this.numer == 0) ==> (this.denom == 0)
===========================================================================
PolyCalc.RatNum.negate():::ENTER;condition="not(denom != 1)"
this.denom == 1
===========================================================================
PolyCalc.RatNum.negate():::EXIT
this.numer == orig(this.numer)
this.denom == return.denom
this.denom == orig(this.denom)
(this.denom == 0)  ==>  (this.denom is a pointer)
return != null
(return.numer == 0) ==> (this.numer == 0)
(this.numer == 0) ==> (return.numer == 0)
this.numer + return.numer == 0
===========================================================================
PolyCalc.RatNum.negate():::EXIT;condition="not(denom < 0)"
===========================================================================
PolyCalc.RatNum.negate():::EXIT;condition="(denom == 0)"
this.numer == orig(this.numer)
this.denom == return.denom
this.denom == orig(this.denom)
this.denom == 0
return != null
(return.numer == 0) ==> (this.numer == 0)
(this.numer == 0) ==> (return.numer == 0)
this.numer + return.numer == 0
===========================================================================
PolyCalc.RatNum.negate():::EXIT;condition="not((denom == 0))"
this.numer == orig(this.numer)
this.denom == return.denom
this.denom == orig(this.denom)
this.denom >= 1
return != null
(return.numer == 0) ==> (this.numer == 0)
(this.numer == 0) ==> (return.numer == 0)
this.numer + return.numer == 0
===========================================================================
PolyCalc.RatNum.negate():::EXIT;condition="orig((denom == 0))"
this.numer == orig(this.numer)
this.denom == return.denom
this.denom == orig(this.denom)
this.denom == 0
return != null
(return.numer == 0) ==> (this.numer == 0)
(this.numer == 0) ==> (return.numer == 0)
this.numer + return.numer == 0
===========================================================================
PolyCalc.RatNum.negate():::EXIT;condition="not(orig((denom == 0)))"
this.numer == orig(this.numer)
this.denom == return.denom
this.denom == orig(this.denom)
this.denom >= 1
return != null
(return.numer == 0) ==> (this.numer == 0)
(this.numer == 0) ==> (return.numer == 0)
this.numer + return.numer == 0
===========================================================================
PolyCalc.RatNum.negate():::EXIT;condition="(this.denom != 0)&&(this.numer < 0)"
this.numer == orig(this.numer)
this.denom == return.denom
this.denom == orig(this.denom)
this.numer <= -1
this.denom >= 1
return != null
return.numer >= 1
this.numer < this.denom
return.numer % this.numer == 0
this.numer % return.numer == 0
this.numer + return.numer == 0
this.numer < return.numer
===========================================================================
PolyCalc.RatNum.negate():::EXIT;condition="not((this.denom != 0)&&(this.numer < 0))"
this.numer == orig(this.numer)
this.denom == return.denom
this.denom == orig(this.denom)
this.denom >= 0
return != null
(return.numer == 0) ==> (this.numer == 0)
(this.numer == 0) ==> (return.numer == 0)
this.numer + return.numer == 0
===========================================================================
PolyCalc.RatNum.negate():::EXIT;condition="orig((this.denom != 0)&&(this.numer < 0))"
this.numer == orig(this.numer)
this.denom == return.denom
this.denom == orig(this.denom)
this.numer <= -1
this.denom >= 1
return != null
return.numer >= 1
this.numer < this.denom
return.numer % this.numer == 0
this.numer % return.numer == 0
this.numer + return.numer == 0
this.numer < return.numer
===========================================================================
PolyCalc.RatNum.negate():::EXIT;condition="not(orig((this.denom != 0)&&(this.numer < 0)))"
this.numer == orig(this.numer)
this.denom == return.denom
this.denom == orig(this.denom)
this.denom >= 0
return != null
(return.numer == 0) ==> (this.numer == 0)
(this.numer == 0) ==> (return.numer == 0)
this.numer + return.numer == 0
===========================================================================
PolyCalc.RatNum.negate():::EXIT;condition="(this.denom == 0)||(this.numer > 0)"
this.numer == orig(this.numer)
this.denom == return.denom
this.denom == orig(this.denom)
this.denom >= 0
return != null
(this.numer == 0) ==> (this.denom == 0)
(return.numer == 0) ==> (this.numer == 0)
(this.numer == 0) ==> (return.numer == 0)
this.numer + return.numer == 0
(return.numer == 0) ==> (this.denom == 0)
===========================================================================
PolyCalc.RatNum.negate():::EXIT;condition="not((this.denom == 0)||(this.numer > 0))"
this.numer == orig(this.numer)
this.denom == return.denom
this.denom == orig(this.denom)
this.numer <= 0
this.denom >= 1
return != null
return.numer >= 0
this.numer < this.denom
(return.numer == 0) ==> (this.numer == 0)
(this.numer == 0) ==> (return.numer == 0)
this.numer + return.numer == 0
this.numer <= return.numer
===========================================================================
PolyCalc.RatNum.negate():::EXIT;condition="orig((this.denom == 0)||(this.numer > 0))"
this.numer == orig(this.numer)
this.denom == return.denom
this.denom == orig(this.denom)
this.denom >= 0
return != null
(this.numer == 0) ==> (this.denom == 0)
(return.numer == 0) ==> (this.numer == 0)
(this.numer == 0) ==> (return.numer == 0)
this.numer + return.numer == 0
(return.numer == 0) ==> (this.denom == 0)
===========================================================================
PolyCalc.RatNum.negate():::EXIT;condition="not(orig((this.denom == 0)||(this.numer > 0)))"
this.numer == orig(this.numer)
this.denom == return.denom
this.denom == orig(this.denom)
this.numer <= 0
this.denom >= 1
return != null
return.numer >= 0
this.numer < this.denom
(return.numer == 0) ==> (this.numer == 0)
(this.numer == 0) ==> (return.numer == 0)
this.numer + return.numer == 0
this.numer <= return.numer
===========================================================================
PolyCalc.RatNum.negate():::EXIT;condition="orig(rn.isNaN())"
this.numer == orig(this.numer)
this.denom == return.denom
this.denom == orig(this.denom)
this.denom == 0
return != null
(return.numer == 0) ==> (this.numer == 0)
(this.numer == 0) ==> (return.numer == 0)
this.numer + return.numer == 0
===========================================================================
PolyCalc.RatNum.negate():::EXIT;condition="not(orig(rn.isNaN()))"
this.numer == orig(this.numer)
this.denom == return.denom
this.denom == orig(this.denom)
this.denom >= 1
return != null
(return.numer == 0) ==> (this.numer == 0)
(this.numer == 0) ==> (return.numer == 0)
this.numer + return.numer == 0
===========================================================================
PolyCalc.RatNum.negate():::EXIT;condition="rn.isNaN()"
this.numer == orig(this.numer)
this.denom == return.denom
this.denom == orig(this.denom)
this.denom == 0
return != null
(return.numer == 0) ==> (this.numer == 0)
(this.numer == 0) ==> (return.numer == 0)
this.numer + return.numer == 0
===========================================================================
PolyCalc.RatNum.negate():::EXIT;condition="not(rn.isNaN())"
this.numer == orig(this.numer)
this.denom == return.denom
this.denom == orig(this.denom)
this.denom >= 1
return != null
(return.numer == 0) ==> (this.numer == 0)
(this.numer == 0) ==> (return.numer == 0)
this.numer + return.numer == 0
===========================================================================
PolyCalc.RatNum.negate():::EXIT;condition="isNaN()"
this.numer == orig(this.numer)
this.denom == return.denom
this.denom == orig(this.denom)
this.denom == 0
return != null
(return.numer == 0) ==> (this.numer == 0)
(this.numer == 0) ==> (return.numer == 0)
this.numer + return.numer == 0
===========================================================================
PolyCalc.RatNum.negate():::EXIT;condition="not(isNaN())"
this.numer == orig(this.numer)
this.denom == return.denom
this.denom == orig(this.denom)
this.denom >= 1
return != null
(return.numer == 0) ==> (this.numer == 0)
(this.numer == 0) ==> (return.numer == 0)
this.numer + return.numer == 0
===========================================================================
PolyCalc.RatNum.negate():::EXIT;condition="orig(isNaN())"
this.numer == orig(this.numer)
this.denom == return.denom
this.denom == orig(this.denom)
this.denom == 0
return != null
(return.numer == 0) ==> (this.numer == 0)
(this.numer == 0) ==> (return.numer == 0)
this.numer + return.numer == 0
===========================================================================
PolyCalc.RatNum.negate():::EXIT;condition="not(orig(isNaN()))"
this.numer == orig(this.numer)
this.denom == return.denom
this.denom == orig(this.denom)
this.denom >= 1
return != null
(return.numer == 0) ==> (this.numer == 0)
(this.numer == 0) ==> (return.numer == 0)
this.numer + return.numer == 0
===========================================================================
PolyCalc.RatNum.negate():::EXIT;condition="denom != 1"
this.numer == orig(this.numer)
this.denom == return.denom
this.denom == orig(this.denom)
this.denom >= 0
return != null
(this.numer == 0) ==> (this.denom == 0)
(return.numer == 0) ==> (this.numer == 0)
(this.numer == 0) ==> (return.numer == 0)
this.numer + return.numer == 0
(return.numer == 0) ==> (this.denom == 0)
===========================================================================
PolyCalc.RatNum.negate():::EXIT;condition="not(denom != 1)"
this.numer == orig(this.numer)
this.denom == return.denom
this.denom == orig(this.denom)
this.denom == 1
return != null
(return.numer == 0) ==> (this.numer == 0)
(this.numer == 0) ==> (return.numer == 0)
this.numer + return.numer == 0
===========================================================================
PolyCalc.RatNum.negate():::EXIT;condition="orig(denom != 1)"
this.numer == orig(this.numer)
this.denom == return.denom
this.denom == orig(this.denom)
this.denom >= 0
return != null
(this.numer == 0) ==> (this.denom == 0)
(return.numer == 0) ==> (this.numer == 0)
(this.numer == 0) ==> (return.numer == 0)
this.numer + return.numer == 0
(return.numer == 0) ==> (this.denom == 0)
===========================================================================
PolyCalc.RatNum.negate():::EXIT;condition="not(orig(denom != 1))"
this.numer == orig(this.numer)
this.denom == return.denom
this.denom == orig(this.denom)
this.denom == 1
return != null
(return.numer == 0) ==> (this.numer == 0)
(this.numer == 0) ==> (return.numer == 0)
this.numer + return.numer == 0
===========================================================================
PolyCalc.RatNum.parse(java.lang.String):::ENTER
ratStr != null
ratStr.toString is printable
===========================================================================
PolyCalc.RatNum.parse(java.lang.String):::EXIT264
ratStr.toString == "NaN"
return.numer == 1
return.denom == 0
orig(ratStr) has only one value
===========================================================================
PolyCalc.RatNum.parse(java.lang.String):::EXIT267
return.denom == 1
===========================================================================
PolyCalc.RatNum.parse(java.lang.String):::EXIT273
===========================================================================
PolyCalc.RatNum.parse(java.lang.String):::EXIT
ratStr.toString == orig(ratStr.toString)
ratStr.toString is printable
return != null
return.denom >= 0
===========================================================================
PolyCalc.RatNum.sub(PolyCalc.RatNum):::ENTER
(this.denom == 0)  ==>  ((this.numer == 0) ==> (arg.denom == 0))
(this.denom == 0)  ==>  (this.denom <= arg.denom)
(this.denom == 0)  ==>  (this.denom is a pointer)
arg != null
arg.denom >= 0
===========================================================================
PolyCalc.RatNum.sub(PolyCalc.RatNum):::ENTER;condition="not(denom < 0)"
===========================================================================
PolyCalc.RatNum.sub(PolyCalc.RatNum):::ENTER;condition="(denom == 0)"
this.denom == 0
arg != null
arg.denom >= 0
(this.numer == 0) ==> (arg.denom == 0)
this.denom <= arg.denom
===========================================================================
PolyCalc.RatNum.sub(PolyCalc.RatNum):::ENTER;condition="not((denom == 0))"
this.denom >= 1
arg != null
arg.denom >= 0
===========================================================================
PolyCalc.RatNum.sub(PolyCalc.RatNum):::ENTER;condition="(this.denom != 0)&&(this.numer < 0)"
this.numer <= -1
this.denom >= 1
arg != null
arg.denom >= 0
this.numer < this.denom
this.numer < arg.denom
===========================================================================
PolyCalc.RatNum.sub(PolyCalc.RatNum):::ENTER;condition="not((this.denom != 0)&&(this.numer < 0))"
this.denom >= 0
arg != null
arg.denom >= 0
===========================================================================
PolyCalc.RatNum.sub(PolyCalc.RatNum):::ENTER;condition="(this.denom == 0)||(this.numer > 0)"
this.denom >= 0
arg != null
arg.denom >= 0
(this.numer == 0) ==> (this.denom == 0)
(this.numer == 0) ==> (arg.denom == 0)
===========================================================================
PolyCalc.RatNum.sub(PolyCalc.RatNum):::ENTER;condition="not((this.denom == 0)||(this.numer > 0))"
this.numer <= 0
this.denom >= 1
arg != null
arg.denom >= 0
this.numer < this.denom
this.numer <= arg.denom
===========================================================================
PolyCalc.RatNum.sub(PolyCalc.RatNum):::ENTER;condition="rn.isNaN()"
this.denom == 0
arg != null
arg.denom >= 0
(this.numer == 0) ==> (arg.denom == 0)
this.denom <= arg.denom
===========================================================================
PolyCalc.RatNum.sub(PolyCalc.RatNum):::ENTER;condition="not(rn.isNaN())"
this.denom >= 1
arg != null
arg.denom >= 0
===========================================================================
PolyCalc.RatNum.sub(PolyCalc.RatNum):::ENTER;condition="isNaN()"
this.denom == 0
arg != null
arg.denom >= 0
(this.numer == 0) ==> (arg.denom == 0)
this.denom <= arg.denom
===========================================================================
PolyCalc.RatNum.sub(PolyCalc.RatNum):::ENTER;condition="not(isNaN())"
this.denom >= 1
arg != null
arg.denom >= 0
===========================================================================
PolyCalc.RatNum.sub(PolyCalc.RatNum):::ENTER;condition="denom != 1"
this.denom >= 0
arg != null
arg.denom >= 0
(this.numer == 0) ==> (this.denom == 0)
(this.numer == 0) ==> (arg.denom == 0)
===========================================================================
PolyCalc.RatNum.sub(PolyCalc.RatNum):::ENTER;condition="not(denom != 1)"
this.denom == 1
arg != null
arg.denom >= 0
===========================================================================
PolyCalc.RatNum.sub(PolyCalc.RatNum):::EXIT
this.numer == orig(this.numer)
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
(this.denom == 0)  ==>  ((arg.denom == 0) ==> (return.numer == 0))
(this.denom == 0)  ==>  ((return.numer == 0) ==> (arg.denom == 0))
(this.denom == 0)  ==>  ((this.numer == 0) ==> (arg.denom == 0))
(this.denom == 0)  ==>  ((this.numer == 0) ==> (return.numer == 0))
(this.denom == 0)  ==>  (arg.denom >= return.denom)
(this.denom == 0)  ==>  (return.denom == 0)
(this.denom == 0)  ==>  (return.denom is a pointer)
(this.denom == 0)  ==>  (return.numer == (this.numer * arg.denom))
(this.denom == 0)  ==>  (this.denom <= arg.denom)
(this.denom == 0)  ==>  (this.denom == return.denom)
(this.denom == 0)  ==>  (this.denom is a pointer)
arg.denom >= 0
return != null
return.denom >= 0
(this.denom == 0) ==> (return.denom == 0)
(arg.denom == 0) ==> (return.denom == 0)
===========================================================================
PolyCalc.RatNum.sub(PolyCalc.RatNum):::EXIT;condition="not(denom < 0)"
===========================================================================
PolyCalc.RatNum.sub(PolyCalc.RatNum):::EXIT;condition="(denom == 0)"
this.numer == orig(this.numer)
this.denom == return.denom
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.denom == 0
arg.denom >= 0
return != null
(this.numer == 0) ==> (arg.denom == 0)
(this.numer == 0) ==> (return.numer == 0)
this.denom <= arg.denom
(arg.denom == 0) ==> (return.numer == 0)
(return.numer == 0) ==> (arg.denom == 0)
return.numer == (this.numer * arg.denom)
===========================================================================
PolyCalc.RatNum.sub(PolyCalc.RatNum):::EXIT;condition="not((denom == 0))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.denom >= 1
arg.denom >= 0
return != null
return.denom >= 0
(arg.denom == 0) ==> (return.denom == 0)
(return.denom == 0) ==> (arg.denom == 0)
===========================================================================
PolyCalc.RatNum.sub(PolyCalc.RatNum):::EXIT;condition="orig((denom == 0))"
this.numer == orig(this.numer)
this.denom == return.denom
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.denom == 0
arg.denom >= 0
return != null
orig(arg) != null
(this.numer == 0) ==> (arg.denom == 0)
(this.numer == 0) ==> (return.numer == 0)
this.denom <= arg.denom
(arg.denom == 0) ==> (return.numer == 0)
(return.numer == 0) ==> (arg.denom == 0)
return.numer == (this.numer * arg.denom)
===========================================================================
PolyCalc.RatNum.sub(PolyCalc.RatNum):::EXIT;condition="not(orig((denom == 0)))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.denom >= 1
arg.denom >= 0
return != null
return.denom >= 0
orig(arg) != null
(arg.denom == 0) ==> (return.denom == 0)
(return.denom == 0) ==> (arg.denom == 0)
===========================================================================
PolyCalc.RatNum.sub(PolyCalc.RatNum):::EXIT;condition="(this.denom != 0)&&(this.numer < 0)"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.numer <= -1
this.denom >= 1
arg.denom >= 0
return != null
return.denom >= 0
this.numer < this.denom
this.numer < arg.denom
this.numer < return.denom
arg.numer != return.numer
arg.denom != return.numer
(arg.denom == 0) ==> (return.denom == 0)
(return.denom == 0) ==> (arg.denom == 0)
return.numer != return.denom
===========================================================================
PolyCalc.RatNum.sub(PolyCalc.RatNum):::EXIT;condition="not((this.denom != 0)&&(this.numer < 0))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.denom >= 0
arg.denom >= 0
return != null
return.denom >= 0
(this.denom == 0) ==> (return.denom == 0)
(arg.denom == 0) ==> (return.denom == 0)
===========================================================================
PolyCalc.RatNum.sub(PolyCalc.RatNum):::EXIT;condition="orig((this.denom != 0)&&(this.numer < 0))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.numer <= -1
this.denom >= 1
arg.denom >= 0
return != null
return.denom >= 0
orig(arg) != null
this.numer < this.denom
this.numer < arg.denom
this.numer < return.denom
arg.numer != return.numer
arg.denom != return.numer
(arg.denom == 0) ==> (return.denom == 0)
(return.denom == 0) ==> (arg.denom == 0)
return.numer != return.denom
===========================================================================
PolyCalc.RatNum.sub(PolyCalc.RatNum):::EXIT;condition="not(orig((this.denom != 0)&&(this.numer < 0)))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.denom >= 0
arg.denom >= 0
return != null
return.denom >= 0
orig(arg) != null
(this.denom == 0) ==> (return.denom == 0)
(arg.denom == 0) ==> (return.denom == 0)
===========================================================================
PolyCalc.RatNum.sub(PolyCalc.RatNum):::EXIT;condition="(this.denom == 0)||(this.numer > 0)"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.denom >= 0
arg.denom >= 0
return != null
return.denom >= 0
(this.numer == 0) ==> (this.denom == 0)
(this.numer == 0) ==> (arg.denom == 0)
(this.numer == 0) ==> (return.numer == 0)
(this.numer == 0) ==> (return.denom == 0)
(this.denom == 0) ==> (return.denom == 0)
(arg.denom == 0) ==> (return.denom == 0)
===========================================================================
PolyCalc.RatNum.sub(PolyCalc.RatNum):::EXIT;condition="not((this.denom == 0)||(this.numer > 0))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.numer <= 0
this.denom >= 1
arg.denom >= 0
return != null
return.denom >= 0
this.numer < this.denom
this.numer <= arg.denom
this.numer <= return.denom
(arg.denom == 0) ==> (return.denom == 0)
(return.denom == 0) ==> (arg.denom == 0)
===========================================================================
PolyCalc.RatNum.sub(PolyCalc.RatNum):::EXIT;condition="orig((this.denom == 0)||(this.numer > 0))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.denom >= 0
arg.denom >= 0
return != null
return.denom >= 0
orig(arg) != null
(this.numer == 0) ==> (this.denom == 0)
(this.numer == 0) ==> (arg.denom == 0)
(this.numer == 0) ==> (return.numer == 0)
(this.numer == 0) ==> (return.denom == 0)
(this.denom == 0) ==> (return.denom == 0)
(arg.denom == 0) ==> (return.denom == 0)
===========================================================================
PolyCalc.RatNum.sub(PolyCalc.RatNum):::EXIT;condition="not(orig((this.denom == 0)||(this.numer > 0)))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.numer <= 0
this.denom >= 1
arg.denom >= 0
return != null
return.denom >= 0
orig(arg) != null
this.numer < this.denom
this.numer <= arg.denom
this.numer <= return.denom
(arg.denom == 0) ==> (return.denom == 0)
(return.denom == 0) ==> (arg.denom == 0)
===========================================================================
PolyCalc.RatNum.sub(PolyCalc.RatNum):::EXIT;condition="orig(rn.isNaN())"
this.numer == orig(this.numer)
this.denom == return.denom
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.denom == 0
arg.denom >= 0
return != null
orig(arg) != null
(this.numer == 0) ==> (arg.denom == 0)
(this.numer == 0) ==> (return.numer == 0)
this.denom <= arg.denom
(arg.denom == 0) ==> (return.numer == 0)
(return.numer == 0) ==> (arg.denom == 0)
return.numer == (this.numer * arg.denom)
===========================================================================
PolyCalc.RatNum.sub(PolyCalc.RatNum):::EXIT;condition="not(orig(rn.isNaN()))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.denom >= 1
arg.denom >= 0
return != null
return.denom >= 0
orig(arg) != null
(arg.denom == 0) ==> (return.denom == 0)
(return.denom == 0) ==> (arg.denom == 0)
===========================================================================
PolyCalc.RatNum.sub(PolyCalc.RatNum):::EXIT;condition="rn.isNaN()"
this.numer == orig(this.numer)
this.denom == return.denom
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.denom == 0
arg.denom >= 0
return != null
(this.numer == 0) ==> (arg.denom == 0)
(this.numer == 0) ==> (return.numer == 0)
this.denom <= arg.denom
(arg.denom == 0) ==> (return.numer == 0)
(return.numer == 0) ==> (arg.denom == 0)
return.numer == (this.numer * arg.denom)
===========================================================================
PolyCalc.RatNum.sub(PolyCalc.RatNum):::EXIT;condition="not(rn.isNaN())"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.denom >= 1
arg.denom >= 0
return != null
return.denom >= 0
(arg.denom == 0) ==> (return.denom == 0)
(return.denom == 0) ==> (arg.denom == 0)
===========================================================================
PolyCalc.RatNum.sub(PolyCalc.RatNum):::EXIT;condition="isNaN()"
this.numer == orig(this.numer)
this.denom == return.denom
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.denom == 0
arg.denom >= 0
return != null
(this.numer == 0) ==> (arg.denom == 0)
(this.numer == 0) ==> (return.numer == 0)
this.denom <= arg.denom
(arg.denom == 0) ==> (return.numer == 0)
(return.numer == 0) ==> (arg.denom == 0)
return.numer == (this.numer * arg.denom)
===========================================================================
PolyCalc.RatNum.sub(PolyCalc.RatNum):::EXIT;condition="not(isNaN())"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.denom >= 1
arg.denom >= 0
return != null
return.denom >= 0
(arg.denom == 0) ==> (return.denom == 0)
(return.denom == 0) ==> (arg.denom == 0)
===========================================================================
PolyCalc.RatNum.sub(PolyCalc.RatNum):::EXIT;condition="orig(isNaN())"
this.numer == orig(this.numer)
this.denom == return.denom
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.denom == 0
arg.denom >= 0
return != null
orig(arg) != null
(this.numer == 0) ==> (arg.denom == 0)
(this.numer == 0) ==> (return.numer == 0)
this.denom <= arg.denom
(arg.denom == 0) ==> (return.numer == 0)
(return.numer == 0) ==> (arg.denom == 0)
return.numer == (this.numer * arg.denom)
===========================================================================
PolyCalc.RatNum.sub(PolyCalc.RatNum):::EXIT;condition="not(orig(isNaN()))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.denom >= 1
arg.denom >= 0
return != null
return.denom >= 0
orig(arg) != null
(arg.denom == 0) ==> (return.denom == 0)
(return.denom == 0) ==> (arg.denom == 0)
===========================================================================
PolyCalc.RatNum.sub(PolyCalc.RatNum):::EXIT;condition="denom != 1"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.denom >= 0
arg.denom >= 0
return != null
return.denom >= 0
(this.numer == 0) ==> (this.denom == 0)
(this.numer == 0) ==> (arg.denom == 0)
(this.numer == 0) ==> (return.numer == 0)
(this.numer == 0) ==> (return.denom == 0)
(this.denom == 0) ==> (return.denom == 0)
(arg.denom == 0) ==> (return.denom == 0)
===========================================================================
PolyCalc.RatNum.sub(PolyCalc.RatNum):::EXIT;condition="not(denom != 1)"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == return.denom
arg.denom == orig(arg.denom)
this.denom == 1
arg.denom >= 0
return != null
===========================================================================
PolyCalc.RatNum.sub(PolyCalc.RatNum):::EXIT;condition="orig(denom != 1)"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.denom >= 0
arg.denom >= 0
return != null
return.denom >= 0
orig(arg) != null
(this.numer == 0) ==> (this.denom == 0)
(this.numer == 0) ==> (arg.denom == 0)
(this.numer == 0) ==> (return.numer == 0)
(this.numer == 0) ==> (return.denom == 0)
(this.denom == 0) ==> (return.denom == 0)
(arg.denom == 0) ==> (return.denom == 0)
===========================================================================
PolyCalc.RatNum.sub(PolyCalc.RatNum):::EXIT;condition="not(orig(denom != 1))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == return.denom
arg.denom == orig(arg.denom)
this.denom == 1
arg.denom >= 0
return != null
orig(arg) != null
===========================================================================
PolyCalc.RatNum.toString():::ENTER
(this.denom == 0)  ==>  (this has only one value)
(this.denom == 0)  ==>  (this.denom is a pointer)
(this.denom == 0)  ==>  (this.numer == 1)
(this.numer one of { -10, -1 })  ==>  (this.denom == 1)
(this.numer one of { -10, -1, 0 })  ==>  (this.denom == 1)
===========================================================================
PolyCalc.RatNum.toString():::ENTER;condition="not(denom < 0)"
===========================================================================
PolyCalc.RatNum.toString():::ENTER;condition="(denom == 0)"
this has only one value
this.numer == 1
this.denom == 0
===========================================================================
PolyCalc.RatNum.toString():::ENTER;condition="not((denom == 0))"
this.denom >= 1
===========================================================================
PolyCalc.RatNum.toString():::ENTER;condition="(this.denom != 0)&&(this.numer < 0)"
this.numer one of { -10, -1 }
this.denom == 1
===========================================================================
PolyCalc.RatNum.toString():::ENTER;condition="not((this.denom != 0)&&(this.numer < 0))"
this.numer >= 0
===========================================================================
PolyCalc.RatNum.toString():::ENTER;condition="(this.denom == 0)||(this.numer > 0)"
this.numer >= 1
===========================================================================
PolyCalc.RatNum.toString():::ENTER;condition="not((this.denom == 0)||(this.numer > 0))"
this.numer one of { -10, -1, 0 }
this.denom == 1
===========================================================================
PolyCalc.RatNum.toString():::ENTER;condition="rn.isNaN()"
this has only one value
this.numer == 1
this.denom == 0
===========================================================================
PolyCalc.RatNum.toString():::ENTER;condition="not(rn.isNaN())"
this.denom >= 1
===========================================================================
PolyCalc.RatNum.toString():::ENTER;condition="isNaN()"
this has only one value
this.numer == 1
this.denom == 0
===========================================================================
PolyCalc.RatNum.toString():::ENTER;condition="not(isNaN())"
this.denom >= 1
===========================================================================
PolyCalc.RatNum.toString():::ENTER;condition="denom != 1"
this.numer one of { 1, 3 }
this.numer == 1  (mod 2)
===========================================================================
PolyCalc.RatNum.toString():::ENTER;condition="not(denom != 1)"
this.denom == 1
===========================================================================
PolyCalc.RatNum.toString():::ENTER;condition="arg.isNaN()"
this has only one value
this.numer == 1
this.denom == 0
===========================================================================
PolyCalc.RatNum.toString():::ENTER;condition="not(arg.isNaN())"
this.denom >= 1
===========================================================================
PolyCalc.RatNum.toString():::EXIT
this.numer == orig(this.numer)
this.denom == orig(this.denom)
(this.denom == 0)  ==>  (orig(this) has only one value)
(this.denom == 0)  ==>  (return has only one value)
(this.denom == 0)  ==>  (return.toString == "RatNum<numer:1 denom:0>")
(this.denom == 0)  ==>  (this.denom is a pointer)
(this.denom == 0)  ==>  (this.numer == 1)
(this.numer one of { -10, -1 })  ==>  (return.toString one of { "RatNum<numer:-1 denom:1>", "RatNum<numer:-10 denom:1>" })
(this.numer one of { -10, -1 })  ==>  (this.denom == 1)
(this.numer one of { -10, -1, 0 })  ==>  (return.toString one of { "RatNum<numer:-1 denom:1>", "RatNum<numer:-10 denom:1>", "RatNum<numer:0 denom:1>" })
(this.numer one of { -10, -1, 0 })  ==>  (this.denom == 1)
return != null
return.toString is printable
===========================================================================
PolyCalc.RatNum.toString():::EXIT;condition="not(denom < 0)"
===========================================================================
PolyCalc.RatNum.toString():::EXIT;condition="(denom == 0)"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.numer == 1
this.denom == 0
return has only one value
return.toString == "RatNum<numer:1 denom:0>"
===========================================================================
PolyCalc.RatNum.toString():::EXIT;condition="not((denom == 0))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom >= 1
return != null
return.toString is printable
===========================================================================
PolyCalc.RatNum.toString():::EXIT;condition="orig((denom == 0))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.numer == 1
this.denom == 0
return has only one value
return.toString == "RatNum<numer:1 denom:0>"
orig(this) has only one value
===========================================================================
PolyCalc.RatNum.toString():::EXIT;condition="not(orig((denom == 0)))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom >= 1
return != null
return.toString is printable
===========================================================================
PolyCalc.RatNum.toString():::EXIT;condition="(this.denom != 0)&&(this.numer < 0)"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.numer one of { -10, -1 }
this.denom == 1
return.toString one of { "RatNum<numer:-1 denom:1>", "RatNum<numer:-10 denom:1>" }
return.toString is printable
===========================================================================
PolyCalc.RatNum.toString():::EXIT;condition="not((this.denom != 0)&&(this.numer < 0))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.numer >= 0
return != null
return.toString is printable
===========================================================================
PolyCalc.RatNum.toString():::EXIT;condition="orig((this.denom != 0)&&(this.numer < 0))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.numer one of { -10, -1 }
this.denom == 1
return.toString one of { "RatNum<numer:-1 denom:1>", "RatNum<numer:-10 denom:1>" }
return.toString is printable
===========================================================================
PolyCalc.RatNum.toString():::EXIT;condition="not(orig((this.denom != 0)&&(this.numer < 0)))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.numer >= 0
return != null
return.toString is printable
===========================================================================
PolyCalc.RatNum.toString():::EXIT;condition="(this.denom == 0)||(this.numer > 0)"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.numer >= 1
return != null
return.toString is printable
===========================================================================
PolyCalc.RatNum.toString():::EXIT;condition="not((this.denom == 0)||(this.numer > 0))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.numer one of { -10, -1, 0 }
this.denom == 1
return != null
return.toString one of { "RatNum<numer:-1 denom:1>", "RatNum<numer:-10 denom:1>", "RatNum<numer:0 denom:1>" }
return.toString is printable
===========================================================================
PolyCalc.RatNum.toString():::EXIT;condition="orig((this.denom == 0)||(this.numer > 0))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.numer >= 1
return != null
return.toString is printable
===========================================================================
PolyCalc.RatNum.toString():::EXIT;condition="not(orig((this.denom == 0)||(this.numer > 0)))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.numer one of { -10, -1, 0 }
this.denom == 1
return != null
return.toString one of { "RatNum<numer:-1 denom:1>", "RatNum<numer:-10 denom:1>", "RatNum<numer:0 denom:1>" }
return.toString is printable
===========================================================================
PolyCalc.RatNum.toString():::EXIT;condition="orig(rn.isNaN())"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.numer == 1
this.denom == 0
return has only one value
return.toString == "RatNum<numer:1 denom:0>"
orig(this) has only one value
===========================================================================
PolyCalc.RatNum.toString():::EXIT;condition="not(orig(rn.isNaN()))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom >= 1
return != null
return.toString is printable
===========================================================================
PolyCalc.RatNum.toString():::EXIT;condition="rn.isNaN()"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.numer == 1
this.denom == 0
return has only one value
return.toString == "RatNum<numer:1 denom:0>"
===========================================================================
PolyCalc.RatNum.toString():::EXIT;condition="not(rn.isNaN())"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom >= 1
return != null
return.toString is printable
===========================================================================
PolyCalc.RatNum.toString():::EXIT;condition="isNaN()"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.numer == 1
this.denom == 0
return has only one value
return.toString == "RatNum<numer:1 denom:0>"
===========================================================================
PolyCalc.RatNum.toString():::EXIT;condition="not(isNaN())"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom >= 1
return != null
return.toString is printable
===========================================================================
PolyCalc.RatNum.toString():::EXIT;condition="orig(isNaN())"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.numer == 1
this.denom == 0
return has only one value
return.toString == "RatNum<numer:1 denom:0>"
orig(this) has only one value
===========================================================================
PolyCalc.RatNum.toString():::EXIT;condition="not(orig(isNaN()))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom >= 1
return != null
return.toString is printable
===========================================================================
PolyCalc.RatNum.toString():::EXIT;condition="denom != 1"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.numer one of { 1, 3 }
this.numer == 1  (mod 2)
return != null
return.toString is printable
===========================================================================
PolyCalc.RatNum.toString():::EXIT;condition="not(denom != 1)"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom == 1
return != null
return.toString is printable
===========================================================================
PolyCalc.RatNum.toString():::EXIT;condition="orig(denom != 1)"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.numer one of { 1, 3 }
this.numer == 1  (mod 2)
return != null
return.toString is printable
===========================================================================
PolyCalc.RatNum.toString():::EXIT;condition="not(orig(denom != 1))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom == 1
return != null
return.toString is printable
===========================================================================
PolyCalc.RatNum.toString():::EXIT;condition="arg.isNaN()"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.numer == 1
this.denom == 0
return has only one value
return.toString == "RatNum<numer:1 denom:0>"
===========================================================================
PolyCalc.RatNum.toString():::EXIT;condition="not(arg.isNaN())"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom >= 1
return != null
return.toString is printable
===========================================================================
PolyCalc.RatNum.toString():::EXIT;condition="orig(arg.isNaN())"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.numer == 1
this.denom == 0
return has only one value
return.toString == "RatNum<numer:1 denom:0>"
orig(this) has only one value
===========================================================================
PolyCalc.RatNum.toString():::EXIT;condition="not(orig(arg.isNaN()))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom >= 1
return != null
return.toString is printable
===========================================================================
PolyCalc.RatNum.unparse():::ENTER
(this.denom == 0)  ==>  (this.denom is a pointer)
===========================================================================
PolyCalc.RatNum.unparse():::ENTER;condition="not(denom < 0)"
===========================================================================
PolyCalc.RatNum.unparse():::ENTER;condition="(denom == 0)"
this.denom == 0
===========================================================================
PolyCalc.RatNum.unparse():::ENTER;condition="not((denom == 0))"
this.denom >= 1
===========================================================================
PolyCalc.RatNum.unparse():::ENTER;condition="(this.denom != 0)&&(this.numer < 0)"
this.numer <= -1
this.denom >= 1
this.numer < this.denom
===========================================================================
PolyCalc.RatNum.unparse():::ENTER;condition="not((this.denom != 0)&&(this.numer < 0))"
this.denom >= 0
===========================================================================
PolyCalc.RatNum.unparse():::ENTER;condition="(this.denom == 0)||(this.numer > 0)"
this.denom >= 0
(this.numer == 0) ==> (this.denom == 0)
===========================================================================
PolyCalc.RatNum.unparse():::ENTER;condition="not((this.denom == 0)||(this.numer > 0))"
this.numer <= 0
this.denom >= 1
this.numer < this.denom
===========================================================================
PolyCalc.RatNum.unparse():::ENTER;condition="rn.isNaN()"
this.denom == 0
===========================================================================
PolyCalc.RatNum.unparse():::ENTER;condition="not(rn.isNaN())"
this.denom >= 1
===========================================================================
PolyCalc.RatNum.unparse():::ENTER;condition="isNaN()"
this.denom == 0
===========================================================================
PolyCalc.RatNum.unparse():::ENTER;condition="not(isNaN())"
this.denom >= 1
===========================================================================
PolyCalc.RatNum.unparse():::EXIT133
this.denom == 0
return has only one value
return.toString == "NaN"
===========================================================================
PolyCalc.RatNum.unparse():::EXIT133;condition="not(denom < 0)"
===========================================================================
PolyCalc.RatNum.unparse():::EXIT133;condition="(denom == 0)"
===========================================================================
PolyCalc.RatNum.unparse():::EXIT133;condition="orig((denom == 0))"
===========================================================================
PolyCalc.RatNum.unparse():::EXIT133;condition="not((this.denom != 0)&&(this.numer < 0))"
this.denom == 0
return has only one value
return.toString == "NaN"
===========================================================================
PolyCalc.RatNum.unparse():::EXIT133;condition="not(orig((this.denom != 0)&&(this.numer < 0)))"
this.denom == 0
return has only one value
return.toString == "NaN"
===========================================================================
PolyCalc.RatNum.unparse():::EXIT133;condition="(this.denom == 0)||(this.numer > 0)"
this.denom == 0
return has only one value
return.toString == "NaN"
===========================================================================
PolyCalc.RatNum.unparse():::EXIT133;condition="orig((this.denom == 0)||(this.numer > 0))"
this.denom == 0
return has only one value
return.toString == "NaN"
===========================================================================
PolyCalc.RatNum.unparse():::EXIT133;condition="orig(rn.isNaN())"
===========================================================================
PolyCalc.RatNum.unparse():::EXIT133;condition="rn.isNaN()"
===========================================================================
PolyCalc.RatNum.unparse():::EXIT133;condition="isNaN()"
===========================================================================
PolyCalc.RatNum.unparse():::EXIT133;condition="orig(isNaN())"
===========================================================================
PolyCalc.RatNum.unparse():::EXIT133;condition="denom != 1"
this.denom == 0
return has only one value
return.toString == "NaN"
===========================================================================
PolyCalc.RatNum.unparse():::EXIT133;condition="orig(denom != 1)"
this.denom == 0
return has only one value
return.toString == "NaN"
===========================================================================
PolyCalc.RatNum.unparse():::EXIT135
(this.numer <= -1)  ==>  (this.numer < this.denom)
this.numer != 0
this.denom >= 2
this.numer != this.denom
===========================================================================
PolyCalc.RatNum.unparse():::EXIT135;condition="not(denom < 0)"
===========================================================================
PolyCalc.RatNum.unparse():::EXIT135;condition="not((denom == 0))"
this.numer != 0
this.denom >= 2
this.numer != this.denom
===========================================================================
PolyCalc.RatNum.unparse():::EXIT135;condition="not(orig((denom == 0)))"
this.numer != 0
this.denom >= 2
this.numer != this.denom
===========================================================================
PolyCalc.RatNum.unparse():::EXIT135;condition="(this.denom != 0)&&(this.numer < 0)"
this.denom >= 2
===========================================================================
PolyCalc.RatNum.unparse():::EXIT135;condition="not((this.denom != 0)&&(this.numer < 0))"
this.numer >= 1
this.denom >= 2
this.numer != this.denom
===========================================================================
PolyCalc.RatNum.unparse():::EXIT135;condition="orig((this.denom != 0)&&(this.numer < 0))"
this.denom >= 2
===========================================================================
PolyCalc.RatNum.unparse():::EXIT135;condition="not(orig((this.denom != 0)&&(this.numer < 0)))"
this.numer >= 1
this.denom >= 2
this.numer != this.denom
===========================================================================
PolyCalc.RatNum.unparse():::EXIT135;condition="(this.denom == 0)||(this.numer > 0)"
this.numer >= 1
this.denom >= 2
this.numer != this.denom
===========================================================================
PolyCalc.RatNum.unparse():::EXIT135;condition="not((this.denom == 0)||(this.numer > 0))"
this.numer <= -1
this.denom >= 2
===========================================================================
PolyCalc.RatNum.unparse():::EXIT135;condition="orig((this.denom == 0)||(this.numer > 0))"
this.numer >= 1
this.denom >= 2
this.numer != this.denom
===========================================================================
PolyCalc.RatNum.unparse():::EXIT135;condition="not(orig((this.denom == 0)||(this.numer > 0)))"
this.numer <= -1
this.denom >= 2
===========================================================================
PolyCalc.RatNum.unparse():::EXIT135;condition="not(orig(rn.isNaN()))"
this.numer != 0
this.denom >= 2
this.numer != this.denom
===========================================================================
PolyCalc.RatNum.unparse():::EXIT135;condition="not(rn.isNaN())"
this.numer != 0
this.denom >= 2
this.numer != this.denom
===========================================================================
PolyCalc.RatNum.unparse():::EXIT135;condition="not(isNaN())"
this.numer != 0
this.denom >= 2
this.numer != this.denom
===========================================================================
PolyCalc.RatNum.unparse():::EXIT135;condition="not(orig(isNaN()))"
this.numer != 0
this.denom >= 2
this.numer != this.denom
===========================================================================
PolyCalc.RatNum.unparse():::EXIT135;condition="denom != 1"
this.numer != 0
this.denom >= 2
this.numer != this.denom
===========================================================================
PolyCalc.RatNum.unparse():::EXIT135;condition="orig(denom != 1)"
this.numer != 0
this.denom >= 2
this.numer != this.denom
===========================================================================
PolyCalc.RatNum.unparse():::EXIT137
(this.numer >= 1)  <==>  (this.numer >= this.denom)
this.denom == 1
===========================================================================
PolyCalc.RatNum.unparse():::EXIT137;condition="not(denom < 0)"
===========================================================================
PolyCalc.RatNum.unparse():::EXIT137;condition="not((denom == 0))"
this.denom == 1
===========================================================================
PolyCalc.RatNum.unparse():::EXIT137;condition="not(orig((denom == 0)))"
this.denom == 1
===========================================================================
PolyCalc.RatNum.unparse():::EXIT137;condition="(this.denom != 0)&&(this.numer < 0)"
this.denom == 1
===========================================================================
PolyCalc.RatNum.unparse():::EXIT137;condition="not((this.denom != 0)&&(this.numer < 0))"
this.numer >= 0
this.denom == 1
===========================================================================
PolyCalc.RatNum.unparse():::EXIT137;condition="orig((this.denom != 0)&&(this.numer < 0))"
this.denom == 1
===========================================================================
PolyCalc.RatNum.unparse():::EXIT137;condition="not(orig((this.denom != 0)&&(this.numer < 0)))"
this.numer >= 0
this.denom == 1
===========================================================================
PolyCalc.RatNum.unparse():::EXIT137;condition="(this.denom == 0)||(this.numer > 0)"
this.numer >= 1
this.denom == 1
this.numer >= this.denom
===========================================================================
PolyCalc.RatNum.unparse():::EXIT137;condition="not((this.denom == 0)||(this.numer > 0))"
this.denom == 1
===========================================================================
PolyCalc.RatNum.unparse():::EXIT137;condition="orig((this.denom == 0)||(this.numer > 0))"
this.numer >= 1
this.denom == 1
this.numer >= this.denom
===========================================================================
PolyCalc.RatNum.unparse():::EXIT137;condition="not(orig((this.denom == 0)||(this.numer > 0)))"
this.denom == 1
===========================================================================
PolyCalc.RatNum.unparse():::EXIT137;condition="not(orig(rn.isNaN()))"
this.denom == 1
===========================================================================
PolyCalc.RatNum.unparse():::EXIT137;condition="not(rn.isNaN())"
this.denom == 1
===========================================================================
PolyCalc.RatNum.unparse():::EXIT137;condition="not(isNaN())"
this.denom == 1
===========================================================================
PolyCalc.RatNum.unparse():::EXIT137;condition="not(orig(isNaN()))"
this.denom == 1
===========================================================================
PolyCalc.RatNum.unparse():::EXIT137;condition="not(denom != 1)"
===========================================================================
PolyCalc.RatNum.unparse():::EXIT137;condition="not(orig(denom != 1))"
===========================================================================
PolyCalc.RatNum.unparse():::EXIT
this.numer == orig(this.numer)
this.denom == orig(this.denom)
(this.denom == 0)  ==>  (return has only one value)
(this.denom == 0)  ==>  (return.toString == "NaN")
(this.denom == 0)  ==>  (this.denom is a pointer)
return != null
return.toString is printable
===========================================================================
PolyCalc.RatNum.unparse():::EXIT;condition="not(denom < 0)"
===========================================================================
PolyCalc.RatNum.unparse():::EXIT;condition="(denom == 0)"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom == 0
return has only one value
return != null
return.toString == "NaN"
===========================================================================
PolyCalc.RatNum.unparse():::EXIT;condition="not((denom == 0))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom >= 1
return != null
return.toString is printable
===========================================================================
PolyCalc.RatNum.unparse():::EXIT;condition="orig((denom == 0))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom == 0
return has only one value
return != null
return.toString == "NaN"
===========================================================================
PolyCalc.RatNum.unparse():::EXIT;condition="not(orig((denom == 0)))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom >= 1
return != null
return.toString is printable
===========================================================================
PolyCalc.RatNum.unparse():::EXIT;condition="(this.denom != 0)&&(this.numer < 0)"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.numer <= -1
this.denom >= 1
return != null
return.toString is printable
this.numer < this.denom
===========================================================================
PolyCalc.RatNum.unparse():::EXIT;condition="not((this.denom != 0)&&(this.numer < 0))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom >= 0
return != null
return.toString is printable
===========================================================================
PolyCalc.RatNum.unparse():::EXIT;condition="orig((this.denom != 0)&&(this.numer < 0))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.numer <= -1
this.denom >= 1
return != null
return.toString is printable
this.numer < this.denom
===========================================================================
PolyCalc.RatNum.unparse():::EXIT;condition="not(orig((this.denom != 0)&&(this.numer < 0)))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom >= 0
return != null
return.toString is printable
===========================================================================
PolyCalc.RatNum.unparse():::EXIT;condition="(this.denom == 0)||(this.numer > 0)"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom >= 0
return != null
return.toString is printable
(this.numer == 0) ==> (this.denom == 0)
===========================================================================
PolyCalc.RatNum.unparse():::EXIT;condition="not((this.denom == 0)||(this.numer > 0))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.numer <= 0
this.denom >= 1
return != null
return.toString is printable
this.numer < this.denom
===========================================================================
PolyCalc.RatNum.unparse():::EXIT;condition="orig((this.denom == 0)||(this.numer > 0))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom >= 0
return != null
return.toString is printable
(this.numer == 0) ==> (this.denom == 0)
===========================================================================
PolyCalc.RatNum.unparse():::EXIT;condition="not(orig((this.denom == 0)||(this.numer > 0)))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.numer <= 0
this.denom >= 1
return != null
return.toString is printable
this.numer < this.denom
===========================================================================
PolyCalc.RatNum.unparse():::EXIT;condition="orig(rn.isNaN())"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom == 0
return has only one value
return != null
return.toString == "NaN"
===========================================================================
PolyCalc.RatNum.unparse():::EXIT;condition="not(orig(rn.isNaN()))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom >= 1
return != null
return.toString is printable
===========================================================================
PolyCalc.RatNum.unparse():::EXIT;condition="rn.isNaN()"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom == 0
return has only one value
return != null
return.toString == "NaN"
===========================================================================
PolyCalc.RatNum.unparse():::EXIT;condition="not(rn.isNaN())"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom >= 1
return != null
return.toString is printable
===========================================================================
PolyCalc.RatNum.unparse():::EXIT;condition="isNaN()"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom == 0
return has only one value
return != null
return.toString == "NaN"
===========================================================================
PolyCalc.RatNum.unparse():::EXIT;condition="not(isNaN())"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom >= 1
return != null
return.toString is printable
===========================================================================
PolyCalc.RatNum.unparse():::EXIT;condition="orig(isNaN())"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom == 0
return has only one value
return != null
return.toString == "NaN"
===========================================================================
PolyCalc.RatNum.unparse():::EXIT;condition="not(orig(isNaN()))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom >= 1
return != null
return.toString is printable
===========================================================================
PolyCalc.RatNum.unparse():::EXIT;condition="denom != 1"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom >= 0
return != null
return.toString is printable
(this.numer == 0) ==> (this.denom == 0)
===========================================================================
PolyCalc.RatNum.unparse():::EXIT;condition="not(denom != 1)"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom == 1
return != null
return.toString is printable
===========================================================================
PolyCalc.RatNum.unparse():::EXIT;condition="orig(denom != 1)"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom >= 0
return != null
return.toString is printable
(this.numer == 0) ==> (this.denom == 0)
===========================================================================
PolyCalc.RatNum.unparse():::EXIT;condition="not(orig(denom != 1))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom == 1
return != null
return.toString is printable
===========================================================================
PolyCalc.RatPoly:::OBJECT
this.terms != null
this.terms.wrapped != null
this.terms.wrapped[] contains no duplicates
this.terms.wrapped[] elements != null
this.terms.wrapped[].getClass().getName() elements == PolyCalc.RatTerm.class
===========================================================================
PolyCalc.RatPoly.RatPoly():::EXIT
this.terms.wrapped[] == []
this.terms.wrapped[].getClass().getName() == []
===========================================================================
PolyCalc.RatPoly.RatPoly(PolyCalc.RatTermVec):::ENTER
rt != null
rt.wrapped != null
rt.wrapped[] contains no duplicates
rt.wrapped[] elements != null
rt.wrapped[].getClass().getName() elements == PolyCalc.RatTerm.class
===========================================================================
PolyCalc.RatPoly.RatPoly(PolyCalc.RatTermVec):::EXIT
this.terms == orig(rt)
this.terms.wrapped == rt.wrapped
rt.wrapped == orig(rt.wrapped)
rt.wrapped[] == orig(rt.wrapped[])
rt.wrapped != null
rt.wrapped[] contains no duplicates
rt.wrapped[] elements != null
rt.wrapped[].getClass().getName() elements == PolyCalc.RatTerm.class
===========================================================================
PolyCalc.RatPoly.RatPoly(int, int):::ENTER
e >= 0
===========================================================================
PolyCalc.RatPoly.RatPoly(int, int):::EXIT
this.terms.wrapped[].getClass().getName() one of { [], [PolyCalc.RatTerm] }
size(this.terms.wrapped[]) one of { 0, 1 }
===========================================================================
PolyCalc.RatPoly.add(PolyCalc.RatPoly):::ENTER
p != null
p.terms != null
p.terms.wrapped != null
p.terms.wrapped[] contains no duplicates
p.terms.wrapped[] elements != null
p.terms.wrapped[].getClass().getName() elements == PolyCalc.RatTerm.class
===========================================================================
PolyCalc.RatPoly.add(PolyCalc.RatPoly):::EXIT350
this.terms == return.terms
this.terms.wrapped == return.terms.wrapped
return == orig(this)
this.terms.wrapped[].getClass().getName() == [PolyCalc.RatTerm]
p.terms.wrapped[].getClass().getName() one of { [], [PolyCalc.RatTerm] }
return.terms.wrapped[].getClass().getName() == [PolyCalc.RatTerm]
size(this.terms.wrapped[]) == 1
size(p.terms.wrapped[]) one of { 0, 1 }
size(return.terms.wrapped[]) == 1
===========================================================================
PolyCalc.RatPoly.add(PolyCalc.RatPoly):::EXIT354
p.terms == return.terms
p.terms.wrapped == return.terms.wrapped
return == orig(p)
this.terms.wrapped[].getClass().getName() one of { [], [PolyCalc.RatTerm] }
p.terms.wrapped[].getClass().getName() == [PolyCalc.RatTerm]
return.terms.wrapped[].getClass().getName() == [PolyCalc.RatTerm]
size(this.terms.wrapped[]) one of { 0, 1 }
size(p.terms.wrapped[]) == 1
size(return.terms.wrapped[]) == 1
===========================================================================
PolyCalc.RatPoly.add(PolyCalc.RatPoly):::EXIT363
===========================================================================
PolyCalc.RatPoly.add(PolyCalc.RatPoly):::EXIT
this.terms == orig(this.terms)
this.terms.wrapped == orig(this.terms.wrapped)
this.terms.wrapped[] == orig(this.terms.wrapped[])
p.terms == orig(p.terms)
p.terms.wrapped == orig(p.terms.wrapped)
p.terms.wrapped[] == orig(p.terms.wrapped[])
p.terms != null
p.terms.wrapped != null
p.terms.wrapped[] contains no duplicates
p.terms.wrapped[] elements != null
p.terms.wrapped[].getClass().getName() elements == PolyCalc.RatTerm.class
return != null
return.terms != null
return.terms.wrapped != null
return.terms.wrapped[] contains no duplicates
return.terms.wrapped[] elements != null
return.terms.wrapped[].getClass().getName() elements == PolyCalc.RatTerm.class
===========================================================================
PolyCalc.RatPoly.appendTerm(java.lang.StringBuffer, PolyCalc.RatTerm):::ENTER
sb != null
rt != null
rt.coeff != null
rt.coeff.numer >= 1
rt.coeff.denom >= 0
rt.expt >= 0
(rt.coeff.denom == 0) ==> (rt.expt == 0)
===========================================================================
PolyCalc.RatPoly.appendTerm(java.lang.StringBuffer, PolyCalc.RatTerm):::EXIT229
===========================================================================
PolyCalc.RatPoly.appendTerm(java.lang.StringBuffer, PolyCalc.RatTerm):::EXIT
rt.coeff == orig(rt.coeff)
rt.coeff.numer == orig(rt.coeff.numer)
rt.coeff.denom == orig(rt.coeff.denom)
rt.expt == orig(rt.expt)
rt.coeff != null
rt.coeff.numer >= 1
rt.coeff.denom >= 0
rt.expt >= 0
(rt.coeff.denom == 0) ==> (rt.expt == 0)
===========================================================================
PolyCalc.RatPoly.assertSorted(PolyCalc.RatTermVec):::ENTER
v != null
v.wrapped != null
v.wrapped[] contains no duplicates
v.wrapped[] elements != null
v.wrapped[].getClass().getName() elements == PolyCalc.RatTerm.class
===========================================================================
PolyCalc.RatPoly.assertSorted(PolyCalc.RatTermVec):::EXIT
v.wrapped == orig(v.wrapped)
v.wrapped[] == orig(v.wrapped[])
v.wrapped != null
v.wrapped[] contains no duplicates
v.wrapped[] elements != null
v.wrapped[].getClass().getName() elements == PolyCalc.RatTerm.class
===========================================================================
PolyCalc.RatPoly.checkRep():::ENTER
===========================================================================
PolyCalc.RatPoly.checkRep():::EXIT
this.terms == orig(this.terms)
this.terms.wrapped == orig(this.terms.wrapped)
this.terms.wrapped[] == orig(this.terms.wrapped[])
===========================================================================
PolyCalc.RatPoly.coeff(int):::ENTER
===========================================================================
PolyCalc.RatPoly.coeff(int):::EXIT120
return.numer != 0
orig(deg) >= 0
size(this.terms.wrapped[]) >= 1
===========================================================================
PolyCalc.RatPoly.coeff(int):::EXIT124
return.numer == 0
return.denom == 1
===========================================================================
PolyCalc.RatPoly.coeff(int):::EXIT
this.terms == orig(this.terms)
this.terms.wrapped == orig(this.terms.wrapped)
this.terms.wrapped[] == orig(this.terms.wrapped[])
(return.numer != 0)  ==>  (orig(deg) >= 0)
(return.numer != 0)  ==>  (size(this.terms.wrapped[]) >= 1)
(return.numer == 0)  ==>  (return.denom == 1)
(return.numer == 0)  ==>  (return.numer < return.denom)
(return.numer == 0)  ==>  (return.numer is a pointer)
return != null
(return.denom == 0) ==> (orig(deg) == 0)
===========================================================================
PolyCalc.RatPoly.degree():::ENTER
===========================================================================
PolyCalc.RatPoly.degree():::EXIT102
size(this.terms.wrapped[]) >= 1
===========================================================================
PolyCalc.RatPoly.degree():::EXIT105
this.terms.wrapped[] == []
this.terms.wrapped[].getClass().getName() == []
return == 0
===========================================================================
PolyCalc.RatPoly.degree():::EXIT
this.terms == orig(this.terms)
this.terms.wrapped == orig(this.terms.wrapped)
this.terms.wrapped[] == orig(this.terms.wrapped[])
(size(this.terms.wrapped[]) == 0)  ==>  (return == 0)
(size(this.terms.wrapped[]) == 0)  ==>  (return is a pointer)
(size(this.terms.wrapped[]) == 0)  ==>  (size(this.terms.wrapped[]) is a pointer)
(size(this.terms.wrapped[]) == 0)  ==>  (this.terms.wrapped[] == [])
(size(this.terms.wrapped[]) == 0)  ==>  (this.terms.wrapped[].getClass().getName() == [])
return >= 0
===========================================================================
PolyCalc.RatPoly.div(PolyCalc.RatPoly):::ENTER
p != null
p.terms != null
p.terms.wrapped != null
p.terms.wrapped[] contains no duplicates
p.terms.wrapped[] elements != null
p.terms.wrapped[].getClass().getName() elements == PolyCalc.RatTerm.class
===========================================================================
PolyCalc.RatPoly.div(PolyCalc.RatPoly):::EXIT435
this.terms.wrapped[].getClass().getName() one of { [], [PolyCalc.RatTerm] }
p.terms.wrapped[].getClass().getName() one of { [], [PolyCalc.RatTerm] }
return.terms.wrapped[].getClass().getName() == [PolyCalc.RatTerm]
size(this.terms.wrapped[]) one of { 0, 1 }
size(p.terms.wrapped[]) one of { 0, 1 }
size(return.terms.wrapped[]) == 1
===========================================================================
PolyCalc.RatPoly.div(PolyCalc.RatPoly):::EXIT438
size(p.terms.wrapped[]) >= 1
===========================================================================
PolyCalc.RatPoly.div(PolyCalc.RatPoly):::EXIT
this.terms == orig(this.terms)
this.terms.wrapped == orig(this.terms.wrapped)
this.terms.wrapped[] == orig(this.terms.wrapped[])
p.terms == orig(p.terms)
p.terms.wrapped == orig(p.terms.wrapped)
p.terms.wrapped[] == orig(p.terms.wrapped[])
p.terms != null
p.terms.wrapped != null
p.terms.wrapped[] contains no duplicates
p.terms.wrapped[] elements != null
p.terms.wrapped[].getClass().getName() elements == PolyCalc.RatTerm.class
return != null
return.terms != null
return.terms.wrapped != null
return.terms.wrapped[] contains no duplicates
return.terms.wrapped[] elements != null
return.terms.wrapped[].getClass().getName() elements == PolyCalc.RatTerm.class
===========================================================================
PolyCalc.RatPoly.divAndRem(PolyCalc.RatPoly):::ENTER
p != null
p.terms != null
p.terms.wrapped != null
p.terms.wrapped[] elements != null
p.terms.wrapped[].getClass().getName() elements == PolyCalc.RatTerm.class
size(p.terms.wrapped[]) >= 1
===========================================================================
PolyCalc.RatPoly.divAndRem(PolyCalc.RatPoly):::EXIT
this.terms == orig(this.terms)
this.terms.wrapped == orig(this.terms.wrapped)
this.terms.wrapped[] == orig(this.terms.wrapped[])
p.terms == orig(p.terms)
p.terms.wrapped == orig(p.terms.wrapped)
p.terms.wrapped[] == orig(p.terms.wrapped[])
p.terms != null
p.terms.wrapped != null
p.terms.wrapped[] elements != null
p.terms.wrapped[].getClass().getName() elements == PolyCalc.RatTerm.class
return != null
return.getClass().getName() == PolyCalc.RatPoly[].class
return[] elements != null
return[].terms elements != null
return[].terms.wrapped elements != null
size(p.terms.wrapped[]) >= 1
size(return[]) == 2
===========================================================================
PolyCalc.RatPoly.eval(double):::ENTER
d >= 0.0
size(this.terms.wrapped[]) one of { 0, 1, 2 }
(size(this.terms.wrapped[]) & size(this.terms.wrapped[])-1) == 0
===========================================================================
PolyCalc.RatPoly.eval(double):::EXIT
this.terms == orig(this.terms)
this.terms.wrapped == orig(this.terms.wrapped)
this.terms.wrapped[] == orig(this.terms.wrapped[])
size(this.terms.wrapped[]) one of { 0, 1, 2 }
(size(this.terms.wrapped[]) & size(this.terms.wrapped[])-1) == 0
===========================================================================
PolyCalc.RatPoly.findTermIndex(PolyCalc.RatTermVec, int):::ENTER
ts != null
ts.wrapped != null
ts.wrapped[] contains no duplicates
ts.wrapped[] elements != null
ts.wrapped[].getClass().getName() elements == PolyCalc.RatTerm.class
expt >= 0
size(ts.wrapped[]) >= 1
===========================================================================
PolyCalc.RatPoly.findTermIndex(PolyCalc.RatTermVec, int):::EXIT521
===========================================================================
PolyCalc.RatPoly.findTermIndex(PolyCalc.RatTermVec, int):::EXIT523
===========================================================================
PolyCalc.RatPoly.findTermIndex(PolyCalc.RatTermVec, int):::EXIT526
return >= 1
===========================================================================
PolyCalc.RatPoly.findTermIndex(PolyCalc.RatTermVec, int):::EXIT
ts.wrapped == orig(ts.wrapped)
ts.wrapped[] == orig(ts.wrapped[])
ts.wrapped != null
ts.wrapped[] contains no duplicates
ts.wrapped[] elements != null
ts.wrapped[].getClass().getName() elements == PolyCalc.RatTerm.class
return >= 0
size(ts.wrapped[]) >= 1
===========================================================================
PolyCalc.RatPoly.hintedGet(PolyCalc.RatTermVec, int, int):::ENTER
ts != null
ts.wrapped != null
ts.wrapped[] contains no duplicates
ts.wrapped[] elements != null
ts.wrapped[].getClass().getName() elements == PolyCalc.RatTerm.class
i >= 0
expt >= 0
size(ts.wrapped[]) >= 1
===========================================================================
PolyCalc.RatPoly.hintedGet(PolyCalc.RatTermVec, int, int):::EXIT534
===========================================================================
PolyCalc.RatPoly.hintedGet(PolyCalc.RatTermVec, int, int):::EXIT537
return.coeff.numer == 0
return.coeff.denom == 1
orig(i) >= 1
return.coeff.numer <= return.expt
===========================================================================
PolyCalc.RatPoly.hintedGet(PolyCalc.RatTermVec, int, int):::EXIT
ts.wrapped == orig(ts.wrapped)
ts.wrapped[] == orig(ts.wrapped[])
return.expt == orig(expt)
(return.coeff.numer == 0)  ==>  (orig(i) >= 1)
(return.coeff.numer == 0)  ==>  (return.coeff.denom == 1)
(return.coeff.numer == 0)  ==>  (return.coeff.numer < return.coeff.denom)
(return.coeff.numer == 0)  ==>  (return.coeff.numer <= return.expt)
(return.coeff.numer == 0)  ==>  (return.coeff.numer is a pointer)
ts.wrapped != null
ts.wrapped[] contains no duplicates
ts.wrapped[] elements != null
ts.wrapped[].getClass().getName() elements == PolyCalc.RatTerm.class
return != null
return.coeff != null
return.coeff.denom >= 1
return.expt >= 0
size(ts.wrapped[]) >= 1
===========================================================================
PolyCalc.RatPoly.incremExpt(PolyCalc.RatTermVec, int):::ENTER
vec != null
vec.wrapped != null
vec.wrapped[] contains no duplicates
vec.wrapped[] elements != null
vec.wrapped[].getClass().getName() elements == PolyCalc.RatTerm.class
degree >= 0
size(vec.wrapped[]) >= 1
===========================================================================
PolyCalc.RatPoly.incremExpt(PolyCalc.RatTermVec, int):::EXIT
vec.wrapped == orig(vec.wrapped)
size(vec.wrapped[]) == orig(size(vec.wrapped[]))
vec.wrapped != null
vec.wrapped[] contains no duplicates
vec.wrapped[] elements != null
vec.wrapped[].getClass().getName() elements == PolyCalc.RatTerm.class
size(vec.wrapped[]) >= 1
===========================================================================
PolyCalc.RatPoly.isNaN():::ENTER
===========================================================================
PolyCalc.RatPoly.isNaN():::EXIT86
this.terms.wrapped[].getClass().getName() == [PolyCalc.RatTerm]
return == true
size(this.terms.wrapped[]) == 1
===========================================================================
PolyCalc.RatPoly.isNaN():::EXIT86;condition="return == true"
===========================================================================
PolyCalc.RatPoly.isNaN():::EXIT90
return == false
===========================================================================
PolyCalc.RatPoly.isNaN():::EXIT90;condition="not(return == true)"
===========================================================================
PolyCalc.RatPoly.isNaN():::EXIT
this.terms == orig(this.terms)
this.terms.wrapped == orig(this.terms.wrapped)
this.terms.wrapped[] == orig(this.terms.wrapped[])
(return == true)  ==>  (size(this.terms.wrapped[]) == 1)
(return == true)  ==>  (size(this.terms.wrapped[])-1 is a pointer)
(return == true)  ==>  (this.terms.wrapped[].getClass().getName() == [PolyCalc.RatTerm])
===========================================================================
PolyCalc.RatPoly.isNaN():::EXIT;condition="return == true"
this.terms.wrapped[].getClass().getName() == [PolyCalc.RatTerm]
return == true
size(this.terms.wrapped[]) == 1
===========================================================================
PolyCalc.RatPoly.isNaN():::EXIT;condition="not(return == true)"
return == false
===========================================================================
PolyCalc.RatPoly.mul(PolyCalc.RatPoly):::ENTER
p != null
p.terms != null
p.terms.wrapped != null
p.terms.wrapped[] contains no duplicates
p.terms.wrapped[] elements != null
p.terms.wrapped[].getClass().getName() elements == PolyCalc.RatTerm.class
===========================================================================
PolyCalc.RatPoly.mul(PolyCalc.RatPoly):::EXIT390
this.terms == return.terms
this.terms.wrapped == return.terms.wrapped
return == orig(this)
this.terms.wrapped[].getClass().getName() == [PolyCalc.RatTerm]
p.terms.wrapped[].getClass().getName() one of { [], [PolyCalc.RatTerm] }
return.terms.wrapped[].getClass().getName() == [PolyCalc.RatTerm]
size(this.terms.wrapped[]) == 1
size(p.terms.wrapped[]) one of { 0, 1 }
size(return.terms.wrapped[]) == 1
===========================================================================
PolyCalc.RatPoly.mul(PolyCalc.RatPoly):::EXIT394
p.terms == return.terms
p.terms.wrapped == return.terms.wrapped
return == orig(p)
this.terms.wrapped[].getClass().getName() one of { [], [PolyCalc.RatTerm] }
p.terms.wrapped[].getClass().getName() == [PolyCalc.RatTerm]
return.terms.wrapped[].getClass().getName() == [PolyCalc.RatTerm]
size(this.terms.wrapped[]) one of { 0, 1 }
size(p.terms.wrapped[]) == 1
size(return.terms.wrapped[]) == 1
===========================================================================
PolyCalc.RatPoly.mul(PolyCalc.RatPoly):::EXIT404
===========================================================================
PolyCalc.RatPoly.mul(PolyCalc.RatPoly):::EXIT
this.terms == orig(this.terms)
this.terms.wrapped == orig(this.terms.wrapped)
this.terms.wrapped[] == orig(this.terms.wrapped[])
p.terms == orig(p.terms)
p.terms.wrapped == orig(p.terms.wrapped)
p.terms.wrapped[] == orig(p.terms.wrapped[])
p.terms != null
p.terms.wrapped != null
p.terms.wrapped[] contains no duplicates
p.terms.wrapped[] elements != null
p.terms.wrapped[].getClass().getName() elements == PolyCalc.RatTerm.class
return != null
return.terms != null
return.terms.wrapped != null
return.terms.wrapped[] contains no duplicates
return.terms.wrapped[] elements != null
return.terms.wrapped[].getClass().getName() elements == PolyCalc.RatTerm.class
===========================================================================
PolyCalc.RatPoly.negate():::ENTER
this.terms.wrapped[].getClass().getName() one of { [], [PolyCalc.RatTerm] }
size(this.terms.wrapped[]) one of { 0, 1 }
===========================================================================
PolyCalc.RatPoly.negate():::EXIT
this.terms == orig(this.terms)
this.terms.wrapped == orig(this.terms.wrapped)
this.terms.wrapped[] == orig(this.terms.wrapped[])
this.terms.wrapped[].getClass().getName() one of { [], [PolyCalc.RatTerm] }
return != null
return.terms != null
return.terms.wrapped != null
return.terms.wrapped[] elements != null
return.terms.wrapped[].getClass().getName() elements == PolyCalc.RatTerm.class
return.terms.wrapped[].getClass().getName() one of { [], [PolyCalc.RatTerm] }
size(this.terms.wrapped[]) one of { 0, 1 }
size(return.terms.wrapped[]) one of { 0, 1 }
===========================================================================
PolyCalc.RatPoly.parse(java.lang.String):::ENTER
polyStr != null
polyStr.toString is printable
===========================================================================
PolyCalc.RatPoly.parse(java.lang.String):::EXIT
polyStr.toString == orig(polyStr.toString)
polyStr.toString is printable
return != null
return.terms != null
return.terms.wrapped != null
return.terms.wrapped[] contains no duplicates
return.terms.wrapped[] elements != null
return.terms.wrapped[].getClass().getName() elements == PolyCalc.RatTerm.class
===========================================================================
PolyCalc.RatPoly.replaceExpt(PolyCalc.RatTerm, PolyCalc.RatTermVec, int):::ENTER
term != null
term.coeff != null
term.coeff.denom >= 1
term.expt >= 0
ts != null
ts.wrapped != null
ts.wrapped[] contains no duplicates
ts.wrapped[] elements != null
ts.wrapped[].getClass().getName() elements == PolyCalc.RatTerm.class
index >= 1
size(ts.wrapped[]) >= 1
===========================================================================
PolyCalc.RatPoly.replaceExpt(PolyCalc.RatTerm, PolyCalc.RatTermVec, int):::EXIT
term.coeff == orig(term.coeff)
term.coeff.numer == orig(term.coeff.numer)
term.coeff.denom == orig(term.coeff.denom)
term.expt == orig(term.expt)
ts.wrapped == orig(ts.wrapped)
term.coeff != null
term.coeff.denom >= 1
term.expt >= 0
ts.wrapped != null
ts.wrapped[] contains no duplicates
ts.wrapped[] elements != null
ts.wrapped[].getClass().getName() elements == PolyCalc.RatTerm.class
size(ts.wrapped[]) >= 1
(orig(size(ts.wrapped[])) >> size(ts.wrapped[]) == 0)
size(ts.wrapped[]) >= orig(size(ts.wrapped[]))-1
size(ts.wrapped[])-1 <= orig(size(ts.wrapped[]))
(size(ts.wrapped[])-1 == 0) ==> (orig(size(ts.wrapped[]))-1 == 0)
===========================================================================
PolyCalc.RatPoly.scaleBy(PolyCalc.RatTerm):::ENTER
scalar != null
scalar.coeff != null
scalar.coeff.denom >= 1
scalar.expt >= 0
size(this.terms.wrapped[]) >= 1
===========================================================================
PolyCalc.RatPoly.scaleBy(PolyCalc.RatTerm):::EXIT
this.terms == orig(this.terms)
this.terms.wrapped == orig(this.terms.wrapped)
this.terms.wrapped[] == orig(this.terms.wrapped[])
scalar.coeff == orig(scalar.coeff)
scalar.coeff.numer == orig(scalar.coeff.numer)
scalar.coeff.denom == orig(scalar.coeff.denom)
scalar.expt == orig(scalar.expt)
scalar.coeff != null
scalar.coeff.denom >= 1
scalar.expt >= 0
return != null
return.terms != null
return.terms.wrapped != null
return.terms.wrapped[] contains no duplicates
return.terms.wrapped[] elements != null
return.terms.wrapped[].getClass().getName() elements == PolyCalc.RatTerm.class
size(this.terms.wrapped[]) >= 1
size(return.terms.wrapped[]) >= 1
===========================================================================
PolyCalc.RatPoly.scaleCoeff(PolyCalc.RatTermVec, PolyCalc.RatNum):::ENTER
vec != null
vec.wrapped != null
vec.wrapped[] contains no duplicates
vec.wrapped[] elements != null
vec.wrapped[].getClass().getName() elements == PolyCalc.RatTerm.class
scalar != null
scalar.denom >= 1
===========================================================================
PolyCalc.RatPoly.scaleCoeff(PolyCalc.RatTermVec, PolyCalc.RatNum):::EXIT
vec.wrapped == orig(vec.wrapped)
scalar.numer == orig(scalar.numer)
scalar.denom == orig(scalar.denom)
size(vec.wrapped[]) == orig(size(vec.wrapped[]))
vec.wrapped != null
vec.wrapped[] contains no duplicates
vec.wrapped[] elements != null
vec.wrapped[].getClass().getName() elements == PolyCalc.RatTerm.class
scalar.denom >= 1
===========================================================================
PolyCalc.RatPoly.sortedAdd(PolyCalc.RatTermVec, PolyCalc.RatTerm):::ENTER
vec != null
vec.wrapped != null
vec.wrapped[] contains no duplicates
vec.wrapped[] elements != null
vec.wrapped[].getClass().getName() elements == PolyCalc.RatTerm.class
newTerm != null
newTerm.coeff != null
newTerm.coeff.numer != 0
newTerm.coeff.denom >= 1
newTerm.expt >= 0
===========================================================================
PolyCalc.RatPoly.sortedAdd(PolyCalc.RatTermVec, PolyCalc.RatTerm):::EXIT308
size(vec.wrapped[]) == orig(size(vec.wrapped[]))-1
newTerm.coeff.denom == 1
vec.wrapped[] is a subset of orig(vec.wrapped[])
===========================================================================
PolyCalc.RatPoly.sortedAdd(PolyCalc.RatTermVec, PolyCalc.RatTerm):::EXIT312
size(vec.wrapped[]) == orig(size(vec.wrapped[]))
===========================================================================
PolyCalc.RatPoly.sortedAdd(PolyCalc.RatTermVec, PolyCalc.RatTerm):::EXIT319
size(vec.wrapped[])-1 == orig(size(vec.wrapped[]))
vec.wrapped[].getClass().getName() one of { [PolyCalc.RatTerm, PolyCalc.RatTerm, PolyCalc.RatTerm, PolyCalc.RatTerm, PolyCalc.RatTerm], [PolyCalc.RatTerm, PolyCalc.RatTerm, PolyCalc.RatTerm, PolyCalc.RatTerm, PolyCalc.RatTerm, PolyCalc.RatTerm] }
newTerm.coeff.numer == 2
newTerm.coeff.denom == 1
newTerm.expt one of { 4, 6 }
orig(vec.wrapped[].getClass().getName()) one of { [PolyCalc.RatTerm, PolyCalc.RatTerm, PolyCalc.RatTerm, PolyCalc.RatTerm], [PolyCalc.RatTerm, PolyCalc.RatTerm, PolyCalc.RatTerm, PolyCalc.RatTerm, PolyCalc.RatTerm] }
size(vec.wrapped[]) one of { 5, 6 }
vec.wrapped[] is a superset of orig(vec.wrapped[])
===========================================================================
PolyCalc.RatPoly.sortedAdd(PolyCalc.RatTermVec, PolyCalc.RatTerm):::EXIT328
size(vec.wrapped[])-1 == orig(size(vec.wrapped[]))
size(vec.wrapped[]) >= 1
orig(vec.wrapped[]) is a subsequence of vec.wrapped[]
vec.wrapped[] is a superset of orig(vec.wrapped[])
===========================================================================
PolyCalc.RatPoly.sortedAdd(PolyCalc.RatTermVec, PolyCalc.RatTerm):::EXIT
vec.wrapped == orig(vec.wrapped)
newTerm.coeff == orig(newTerm.coeff)
newTerm.coeff.numer == orig(newTerm.coeff.numer)
newTerm.coeff.denom == orig(newTerm.coeff.denom)
newTerm.expt == orig(newTerm.expt)
vec.wrapped != null
vec.wrapped[] contains no duplicates
vec.wrapped[] elements != null
vec.wrapped[].getClass().getName() elements == PolyCalc.RatTerm.class
newTerm.coeff != null
newTerm.coeff.numer != 0
newTerm.coeff.denom >= 1
newTerm.expt >= 0
(size(vec.wrapped[]) == 0) ==> (orig(size(vec.wrapped[]))-1 == 0)
size(vec.wrapped[]) >= orig(size(vec.wrapped[]))-1
(orig(size(vec.wrapped[])) == 0) ==> (size(vec.wrapped[])-1 == 0)
size(vec.wrapped[])-1 <= orig(size(vec.wrapped[]))
===========================================================================
PolyCalc.RatPoly.sub(PolyCalc.RatPoly):::ENTER
this.terms.wrapped[].getClass().getName() one of { [], [PolyCalc.RatTerm] }
p != null
p.terms != null
p.terms.wrapped != null
p.terms.wrapped[] elements != null
p.terms.wrapped[].getClass().getName() elements == PolyCalc.RatTerm.class
p.terms.wrapped[].getClass().getName() one of { [], [PolyCalc.RatTerm] }
size(this.terms.wrapped[]) one of { 0, 1 }
size(p.terms.wrapped[]) one of { 0, 1 }
===========================================================================
PolyCalc.RatPoly.sub(PolyCalc.RatPoly):::EXIT372
this.terms == return.terms
this.terms.wrapped == return.terms.wrapped
return == orig(this)
this.terms.wrapped[].getClass().getName() == [PolyCalc.RatTerm]
return.terms.wrapped[].getClass().getName() == [PolyCalc.RatTerm]
size(this.terms.wrapped[]) == 1
size(return.terms.wrapped[]) == 1
===========================================================================
PolyCalc.RatPoly.sub(PolyCalc.RatPoly):::EXIT376
p.terms == return.terms
p.terms.wrapped == return.terms.wrapped
return == orig(p)
p.terms.wrapped[].getClass().getName() == [PolyCalc.RatTerm]
return.terms.wrapped[].getClass().getName() == [PolyCalc.RatTerm]
size(p.terms.wrapped[]) == 1
size(return.terms.wrapped[]) == 1
===========================================================================
PolyCalc.RatPoly.sub(PolyCalc.RatPoly):::EXIT379
this.terms.wrapped[].getClass().getName() == [PolyCalc.RatTerm]
size(this.terms.wrapped[]) == 1
===========================================================================
PolyCalc.RatPoly.sub(PolyCalc.RatPoly):::EXIT
this.terms == orig(this.terms)
this.terms.wrapped == orig(this.terms.wrapped)
this.terms.wrapped[] == orig(this.terms.wrapped[])
p.terms == orig(p.terms)
p.terms.wrapped == orig(p.terms.wrapped)
p.terms.wrapped[] == orig(p.terms.wrapped[])
this.terms.wrapped[].getClass().getName() one of { [], [PolyCalc.RatTerm] }
p.terms != null
p.terms.wrapped != null
p.terms.wrapped[] elements != null
p.terms.wrapped[].getClass().getName() elements == PolyCalc.RatTerm.class
p.terms.wrapped[].getClass().getName() one of { [], [PolyCalc.RatTerm] }
return != null
return.terms != null
return.terms.wrapped != null
return.terms.wrapped[] elements != null
return.terms.wrapped[].getClass().getName() elements == PolyCalc.RatTerm.class
size(this.terms.wrapped[]) one of { 0, 1 }
size(p.terms.wrapped[]) one of { 0, 1 }
size(return.terms.wrapped[]) one of { 0, 1, 2 }
(size(return.terms.wrapped[]) & size(return.terms.wrapped[])-1) == 0
===========================================================================
PolyCalc.RatPoly.toString():::ENTER
===========================================================================
PolyCalc.RatPoly.toString():::EXIT
this.terms == orig(this.terms)
this.terms.wrapped == orig(this.terms.wrapped)
this.terms.wrapped[] == orig(this.terms.wrapped[])
return != null
return.toString is printable
===========================================================================
PolyCalc.RatPoly.unparse():::ENTER
===========================================================================
PolyCalc.RatPoly.unparse():::EXIT165
this.terms.wrapped[] == []
this.terms.wrapped[].getClass().getName() == []
return has only one value
return.toString == "0"
===========================================================================
PolyCalc.RatPoly.unparse():::EXIT196
size(this.terms.wrapped[]) >= 1
===========================================================================
PolyCalc.RatPoly.unparse():::EXIT
this.terms == orig(this.terms)
this.terms.wrapped == orig(this.terms.wrapped)
this.terms.wrapped[] == orig(this.terms.wrapped[])
(size(this.terms.wrapped[]) == 0)  ==>  (return has only one value)
(size(this.terms.wrapped[]) == 0)  ==>  (return.toString == "0")
(size(this.terms.wrapped[]) == 0)  ==>  (size(this.terms.wrapped[]) is a pointer)
(size(this.terms.wrapped[]) == 0)  ==>  (this.terms.wrapped[] == [])
(size(this.terms.wrapped[]) == 0)  ==>  (this.terms.wrapped[].getClass().getName() == [])
return != null
return.toString is printable
===========================================================================
PolyCalc.RatTerm:::OBJECT
this.coeff != null
this.coeff.denom >= 0
this.expt >= 0
===========================================================================
PolyCalc.RatTerm.RatTerm(PolyCalc.RatNum, int):::ENTER
c != null
c.denom >= 0
e >= 0
(c.denom == 0) ==> (e == 0)
===========================================================================
PolyCalc.RatTerm.RatTerm(PolyCalc.RatNum, int):::EXIT
this.coeff == orig(c)
this.coeff.numer == c.numer
this.coeff.denom == c.denom
this.expt == orig(e)
c.numer == orig(c.numer)
c.denom == orig(c.denom)
c.denom >= 0
(c.denom == 0) ==> (this.expt == 0)
===========================================================================
PolyCalc.RatTerm.debugPrint():::ENTER
(this.coeff.denom == 0) ==> (this.expt == 0)
===========================================================================
PolyCalc.RatTerm.debugPrint():::EXIT
this.coeff == orig(this.coeff)
this.coeff.numer == orig(this.coeff.numer)
this.coeff.denom == orig(this.coeff.denom)
this.expt == orig(this.expt)
return != null
return.toString is printable
(this.coeff.denom == 0) ==> (this.expt == 0)
===========================================================================
PolyCalc.RatTerm.toString():::ENTER
===========================================================================
PolyCalc.RatTerm.toString():::EXIT
this.coeff == orig(this.coeff)
this.coeff.numer == orig(this.coeff.numer)
this.coeff.denom == orig(this.coeff.denom)
this.expt == orig(this.expt)
return != null
return.toString is printable
===========================================================================
PolyCalc.RatTermVec:::OBJECT
this.wrapped != null
this.wrapped[] elements != null
this.wrapped[].getClass().getName() elements == PolyCalc.RatTerm.class
===========================================================================
PolyCalc.RatTermVec.RatTermVec():::EXIT
this.wrapped[] == []
this.wrapped[].getClass().getName() == []
===========================================================================
PolyCalc.RatTermVec.addElement(PolyCalc.RatTerm):::ENTER
this.wrapped[] contains no duplicates
t != null
t.coeff != null
t.coeff.numer != 0
t.coeff.denom >= 0
t.expt >= 0
(t.coeff.denom == 0) ==> (t.expt == 0)
===========================================================================
PolyCalc.RatTermVec.addElement(PolyCalc.RatTerm):::EXIT
this.wrapped == orig(this.wrapped)
t.coeff == orig(t.coeff)
t.coeff.numer == orig(t.coeff.numer)
t.coeff.denom == orig(t.coeff.denom)
t.expt == orig(t.expt)
size(this.wrapped[])-1 == orig(size(this.wrapped[]))
this.wrapped[] contains no duplicates
t.coeff != null
t.coeff.numer != 0
t.coeff.denom >= 0
t.expt >= 0
size(this.wrapped[]) >= 1
orig(this.wrapped[]) is a subsequence of this.wrapped[]
this.wrapped[] is a superset of orig(this.wrapped[])
(t.coeff.denom == 0) ==> (t.expt == 0)
===========================================================================
PolyCalc.RatTermVec.copy():::ENTER
this.wrapped[] contains no duplicates
===========================================================================
PolyCalc.RatTermVec.copy():::EXIT
this.wrapped == orig(this.wrapped)
this.wrapped[] == orig(this.wrapped[])
this.wrapped[] contains no duplicates
return != null
return.wrapped != null
return.wrapped[] contains no duplicates
return.wrapped[] elements != null
return.wrapped[].getClass().getName() elements == PolyCalc.RatTerm.class
===========================================================================
PolyCalc.RatTermVec.get(int):::ENTER
index >= 0
size(this.wrapped[]) >= 1
===========================================================================
PolyCalc.RatTermVec.get(int):::EXIT
this.wrapped == orig(this.wrapped)
this.wrapped[] == orig(this.wrapped[])
return != null
return.coeff != null
return.coeff.denom >= 0
return.expt >= 0
size(this.wrapped[]) >= 1
(return.coeff.numer == 0) ==> (return.expt == 0)
(return.coeff.denom == 0) ==> (return.expt == 0)
===========================================================================
PolyCalc.RatTermVec.insert(PolyCalc.RatTerm, int):::ENTER
t != null
t.coeff != null
t.coeff.denom >= 1
t.expt >= 0
index >= 0
===========================================================================
PolyCalc.RatTermVec.insert(PolyCalc.RatTerm, int):::EXIT
this.wrapped == orig(this.wrapped)
t.coeff == orig(t.coeff)
t.coeff.numer == orig(t.coeff.numer)
t.coeff.denom == orig(t.coeff.denom)
t.expt == orig(t.expt)
size(this.wrapped[])-1 == orig(size(this.wrapped[]))
t.coeff != null
t.coeff.denom >= 1
t.expt >= 0
size(this.wrapped[]) >= 1
this.wrapped[] is a superset of orig(this.wrapped[])
===========================================================================
PolyCalc.RatTermVec.printDebug():::ENTER
===========================================================================
PolyCalc.RatTermVec.printDebug():::EXIT
this.wrapped == orig(this.wrapped)
this.wrapped[] == orig(this.wrapped[])
return != null
return.toString is printable
===========================================================================
PolyCalc.RatTermVec.remove(int):::ENTER
this.wrapped[] contains no duplicates
index >= 0
size(this.wrapped[]) >= 1
===========================================================================
PolyCalc.RatTermVec.remove(int):::EXIT
this.wrapped == orig(this.wrapped)
size(this.wrapped[]) == orig(size(this.wrapped[]))-1
this.wrapped[] contains no duplicates
this.wrapped[] is a subset of orig(this.wrapped[])
===========================================================================
PolyCalc.RatTermVec.set(PolyCalc.RatTerm, int):::ENTER
this.wrapped[] contains no duplicates
t != null
t.coeff != null
t.coeff.numer != 0
t.expt >= 0
index >= 0
size(this.wrapped[]) >= 1
(t.coeff.denom == 0) ==> (t.expt == 0)
===========================================================================
PolyCalc.RatTermVec.set(PolyCalc.RatTerm, int):::EXIT
this.wrapped == orig(this.wrapped)
t.coeff == orig(t.coeff)
t.coeff.numer == orig(t.coeff.numer)
t.coeff.denom == orig(t.coeff.denom)
t.expt == orig(t.expt)
size(this.wrapped[]) == orig(size(this.wrapped[]))
this.wrapped[] contains no duplicates
t.coeff != null
t.coeff.numer != 0
t.expt >= 0
size(this.wrapped[]) >= 1
(t.coeff.denom == 0) ==> (t.expt == 0)
===========================================================================
PolyCalc.RatTermVec.size():::ENTER
this.wrapped[] contains no duplicates
===========================================================================
PolyCalc.RatTermVec.size():::EXIT
this.wrapped == orig(this.wrapped)
this.wrapped[] == orig(this.wrapped[])
this.wrapped[] contains no duplicates
return >= 0
===========================================================================
PolyCalc.RatTermVec.toString():::ENTER
===========================================================================
PolyCalc.RatTermVec.toString():::EXIT
this.wrapped == orig(this.wrapped)
this.wrapped[] == orig(this.wrapped[])
return != null
return.toString is printable
