===========================================================================
PolyCalc.RatNum:::OBJECT
(>= (select |denom| |this|) 0)
===========================================================================
PolyCalc.RatNum.RatNum(int):::ENTER
===========================================================================
PolyCalc.RatNum.RatNum(int):::EXIT
(EQ (select |numer| |this|) |__orig__n|)
(EQ (select |denom| |this|) 1)
===========================================================================
PolyCalc.RatNum.RatNum(int, int):::ENTER
===========================================================================
PolyCalc.RatNum.RatNum(int, int):::EXIT55
(EQ (select |numer| |this|) |__orig__n|)
(EQ (select |denom| |this|) |__orig__d|)
(EQ (select |denom| |this|) 0)
===========================================================================
PolyCalc.RatNum.RatNum(int, int):::EXIT67
(>= (select |denom| |this|) 1)
(NEQ |__orig__d| 0)
(EQ 0 (MOD |__orig__d| (select |denom| |this|)))
===========================================================================
PolyCalc.RatNum.RatNum(int, int):::EXIT
(IFF (EQ (select |denom| |this|) 0) (EQ |__orig__d| 0))
(IMPLIES (EQ (select |denom| |this|) 0) (AND))
(IMPLIES (EQ (select |denom| |this|) 0) (EQ (select |denom| |this|) |__orig__d|))
(IMPLIES (EQ (select |denom| |this|) 0) (AND))
(IMPLIES (EQ (select |denom| |this|) 0) (EQ (select |numer| |this|) |__orig__n|))
(IMPLIES (EQ |__orig__n| 0) (EQ (select |numer| |this|) 0))
(IMPLIES (EQ (select |numer| |this|) 0) (EQ |__orig__n| 0))
(IMPLIES (EQ |__orig__d| 0) (EQ (select |denom| |this|) 0))
(IMPLIES (EQ (select |denom| |this|) 0) (EQ |__orig__d| 0))
===========================================================================
PolyCalc.RatNum.add(PolyCalc.RatNum):::ENTER
(NEQ (hash |arg|) null)
(>= (select |denom| |arg|) 0)
===========================================================================
PolyCalc.RatNum.add(PolyCalc.RatNum):::EXIT
(EQ (select |numer| |this|) (select |numer| |__orig__this|))
(EQ (select |denom| |this|) (select |denom| |__orig__this|))
(EQ (select |numer| |arg|) (select |numer| |__orig__arg|))
(EQ (select |denom| |arg|) (select |denom| |__orig__arg|))
(>= (select |denom| |arg|) 0)
(NEQ (hash |return|) null)
(>= (select |denom| |return|) 0)
(IMPLIES (EQ (select |denom| |this|) 0) (EQ (select |denom| |return|) 0))
(IMPLIES (EQ (select |denom| |arg|) 0) (EQ (select |denom| |return|) 0))
===========================================================================
PolyCalc.RatNum.approx():::ENTER
===========================================================================
PolyCalc.RatNum.approx():::EXIT117
(EQ (select |denom| |this|) 0)
(EQ |return| NaN)
(NEQ (select |numer| |this|) (select |denom| |this|))
===========================================================================
PolyCalc.RatNum.approx():::EXIT120
(>= (select |denom| |this|) 1)
===========================================================================
PolyCalc.RatNum.approx():::EXIT
(EQ (select |numer| |this|) (select |numer| |__orig__this|))
(EQ (select |denom| |this|) (select |denom| |__orig__this|))
(IMPLIES (EQ (select |denom| |this|) 0) (EQ |return| NaN))
(IMPLIES (EQ (select |denom| |this|) 0) (AND))
(IMPLIES (EQ (select |denom| |this|) 0) (NEQ (select |numer| |this|) (select |denom| |this|)))
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::ENTER
(NEQ (hash |rn|) null)
(>= (select |denom| |rn|) 0)
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::EXIT101
(>= (select |denom| |this|) 1)
(>= (select |denom| |rn|) 1)
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::EXIT94
(EQ (select |denom| |this|) |return|)
(EQ (select |denom| |rn|) |return|)
(EQ |return| (select |denom| |__orig__this|))
(EQ |return| (select |denom| |__orig__rn|))
(EQ |return| 0)
(NEQ (select |numer| |this|) |return|)
(NEQ (select |numer| |rn|) |return|)
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::EXIT96
(EQ (select |denom| |this|) 0)
(>= (select |numer| |rn|) -1)
(>= (select |denom| |rn|) 1)
(EQ |return| 1)
(NEQ (select |numer| |this|) (select |denom| |this|))
(< (select |denom| |this|) (select |denom| |rn|))
(>= (select |denom| |rn|) |return|)
(EQ |return| (gcd (select |numer| |rn|) (select |denom| |rn|)))
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::EXIT98
(>= (select |denom| |this|) 1)
(NEQ (select |numer| |rn|) 0)
(EQ (select |denom| |rn|) 0)
(EQ |return| -1)
(> (select |denom| |this|) (select |denom| |rn|))
(> (select |denom| |this|) |return|)
(NEQ (select |numer| |rn|) (select |denom| |rn|))
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::EXIT
(EQ (select |numer| |this|) (select |numer| |__orig__this|))
(EQ (select |denom| |this|) (select |denom| |__orig__this|))
(EQ (select |numer| |rn|) (select |numer| |__orig__rn|))
(EQ (select |denom| |rn|) (select |denom| |__orig__rn|))
(>= (select |denom| |rn|) 0)
===========================================================================
PolyCalc.RatNum.debugPrint():::ENTER
===========================================================================
PolyCalc.RatNum.debugPrint():::EXIT
(EQ (select |numer| |this|) (select |numer| |__orig__this|))
(EQ (select |denom| |this|) (select |denom| |__orig__this|))
(NEQ (hash |return|) null)
warning: method daikon.inv.unary.string.PrintableString.format(OutputFormat:Simplify) needs to be implemented: return.toString is printable
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::ENTER
(NEQ (hash |arg|) null)
(>= (select |denom| |arg|) 0)
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT187
(EQ (select |numer| |arg|) (select |numer| |return|))
(EQ (select |denom| |arg|) (select |denom| |return|))
(EQ (hash |return|) (hash |__orig__arg|))
(EQ (select |denom| |arg|) 0)
(IMPLIES (EQ (select |numer| |arg|) 0) (EQ (select |numer| |this|) 0))
(>= (select |denom| |this|) (select |denom| |arg|))
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT189
(>= (select |denom| |arg|) 1)
(IMPLIES (EQ (select |numer| |this|) 0) (EQ (select |numer| |return|) 0))
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT
(EQ (select |numer| |this|) (select |numer| |__orig__this|))
(EQ (select |denom| |this|) (select |denom| |__orig__this|))
(EQ (select |numer| |arg|) (select |numer| |__orig__arg|))
(EQ (select |denom| |arg|) (select |denom| |__orig__arg|))
(IMPLIES (EQ (select |denom| |arg|) 0) (IMPLIES (EQ (select |numer| |arg|) 0) (EQ (select |numer| |this|) 0)))
(IMPLIES (EQ (select |denom| |arg|) 0) (EQ (select |denom| |arg|) (select |denom| |return|)))
(IMPLIES (EQ (select |denom| |arg|) 0) (AND))
(IMPLIES (EQ (select |denom| |arg|) 0) (EQ (select |numer| |arg|) (select |numer| |return|)))
(IMPLIES (EQ (select |denom| |arg|) 0) (EQ (hash |return|) (hash |__orig__arg|)))
(IMPLIES (EQ (select |denom| |arg|) 0) (EQ (select |denom| |return|) 0))
(IMPLIES (EQ (select |denom| |arg|) 0) (AND))
(IMPLIES (EQ (select |denom| |arg|) 0) (>= (select |denom| |this|) (select |denom| |arg|)))
(IMPLIES (EQ (select |denom| |arg|) 0) (>= (select |denom| |this|) (select |denom| |return|)))
(>= (select |denom| |arg|) 0)
(NEQ (hash |return|) null)
(>= (select |denom| |return|) 0)
(IMPLIES (EQ (select |numer| |return|) 0) (EQ (select |numer| |this|) 0))
(IMPLIES (EQ (select |denom| |this|) 0) (EQ (select |denom| |return|) 0))
(IMPLIES (EQ (select |numer| |arg|) 0) (EQ (select |denom| |return|) 0))
(IMPLIES (EQ (select |denom| |arg|) 0) (EQ (select |denom| |return|) 0))
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::ENTER
(NEQ (hash |obj|) null)
(EQ (typeof |obj|) |T_PolyCalc.RatNum|)
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT230
(EQ (select |denom| |this|) 0)
(EQ |return| |@true|)
(NEQ (select |numer| |this|) (select |denom| |this|))
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT232
(IMPLIES (EQ |return| |@true|) (>= (select |denom| |this|) 1))
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT
(EQ (select |numer| |this|) (select |numer| |__orig__this|))
(EQ (select |denom| |this|) (select |denom| |__orig__this|))
===========================================================================
PolyCalc.RatNum.gcd(int, int):::ENTER
(NEQ |_b| 0)
===========================================================================
PolyCalc.RatNum.gcd(int, int):::EXIT209
===========================================================================
PolyCalc.RatNum.gcd(int, int):::EXIT
(NEQ |return| 0)
(EQ 0 (MOD |__orig___a| |return|))
(EQ 0 (MOD |__orig___b| |return|))
===========================================================================
PolyCalc.RatNum.isNaN():::ENTER
===========================================================================
PolyCalc.RatNum.isNaN():::EXIT
(EQ (select |numer| |this|) (select |numer| |__orig__this|))
(EQ (select |denom| |this|) (select |denom| |__orig__this|))
(IFF (EQ (select |denom| |this|) 0) (EQ |return| |@true|))
(IMPLIES (EQ (select |denom| |this|) 0) (AND))
===========================================================================
PolyCalc.RatNum.isNegative():::ENTER
===========================================================================
PolyCalc.RatNum.isNegative():::EXIT
(EQ (select |numer| |this|) (select |numer| |__orig__this|))
(EQ (select |denom| |this|) (select |denom| |__orig__this|))
(IMPLIES (EQ |return| |@true|) (>= (select |denom| |this|) 1))
(IMPLIES (EQ |return| |@true|) (< (select |numer| |this|) (select |denom| |this|)))
(IMPLIES (EQ |return| |@true|) (<= (select |numer| |this|) -1))
===========================================================================
PolyCalc.RatNum.isPositive():::ENTER
===========================================================================
PolyCalc.RatNum.isPositive():::EXIT
(EQ (select |numer| |this|) (select |numer| |__orig__this|))
(EQ (select |denom| |this|) (select |denom| |__orig__this|))
(IMPLIES (EQ |return| |@false|) (< (select |numer| |this|) (select |denom| |this|)))
(IMPLIES (EQ |return| |@true|) (NEQ (select |numer| |this|) 0))
===========================================================================
PolyCalc.RatNum.mul(PolyCalc.RatNum):::ENTER
(NEQ (hash |arg|) null)
(>= (select |denom| |arg|) 0)
===========================================================================
PolyCalc.RatNum.mul(PolyCalc.RatNum):::EXIT
(EQ (select |numer| |this|) (select |numer| |__orig__this|))
(EQ (select |denom| |this|) (select |denom| |__orig__this|))
(EQ (select |numer| |arg|) (select |numer| |__orig__arg|))
(EQ (select |denom| |arg|) (select |denom| |__orig__arg|))
(>= (select |denom| |arg|) 0)
(NEQ (hash |return|) null)
(>= (select |denom| |return|) 0)
(IMPLIES (EQ (select |numer| |this|) 0) (EQ (select |numer| |return|) 0))
(IMPLIES (EQ (select |denom| |this|) 0) (EQ (select |denom| |return|) 0))
(IMPLIES (EQ (select |numer| |arg|) 0) (EQ (select |numer| |return|) 0))
(IMPLIES (EQ (select |denom| |arg|) 0) (EQ (select |denom| |return|) 0))
===========================================================================
PolyCalc.RatNum.negate():::ENTER
===========================================================================
PolyCalc.RatNum.negate():::EXIT
(EQ (select |numer| |this|) (select |numer| |__orig__this|))
(EQ (select |denom| |this|) (select |denom| |return|))
(EQ (select |denom| |this|) (select |denom| |__orig__this|))
(NEQ (hash |return|) null)
(IMPLIES (EQ (select |numer| |return|) 0) (EQ (select |numer| |this|) 0))
(IMPLIES (EQ (select |numer| |this|) 0) (EQ (select |numer| |return|) 0))
(EQ 0 (+ (select |numer| |this|) (select |numer| |return|)))
===========================================================================
PolyCalc.RatNum.parse(java.lang.String):::ENTER
(NEQ (hash |ratStr|) null)
warning: method daikon.inv.unary.string.PrintableString.format(OutputFormat:Simplify) needs to be implemented: ratStr.toString is printable
===========================================================================
PolyCalc.RatNum.parse(java.lang.String):::EXIT264
(EQ (select |toString| |ratStr|) |_string_NaN|)
(EQ (select |numer| |return|) 1)
(EQ (select |denom| |return|) 0)
(EQ (hash |__orig__ratStr|) (hashcode 1001))
===========================================================================
PolyCalc.RatNum.parse(java.lang.String):::EXIT267
(EQ (select |denom| |return|) 1)
===========================================================================
PolyCalc.RatNum.parse(java.lang.String):::EXIT273
===========================================================================
PolyCalc.RatNum.parse(java.lang.String):::EXIT
(EQ (select |toString| |ratStr|) (select |toString| |__orig__ratStr|))
warning: method daikon.inv.unary.string.PrintableString.format(OutputFormat:Simplify) needs to be implemented: ratStr.toString is printable
(NEQ (hash |return|) null)
(>= (select |denom| |return|) 0)
===========================================================================
PolyCalc.RatNum.sub(PolyCalc.RatNum):::ENTER
(NEQ (hash |arg|) null)
(>= (select |denom| |arg|) 0)
===========================================================================
PolyCalc.RatNum.sub(PolyCalc.RatNum):::EXIT
(EQ (select |numer| |this|) (select |numer| |__orig__this|))
(EQ (select |denom| |this|) (select |denom| |__orig__this|))
(EQ (select |numer| |arg|) (select |numer| |__orig__arg|))
(EQ (select |denom| |arg|) (select |denom| |__orig__arg|))
(>= (select |denom| |arg|) 0)
(NEQ (hash |return|) null)
(>= (select |denom| |return|) 0)
(IMPLIES (EQ (select |denom| |this|) 0) (EQ (select |denom| |return|) 0))
(IMPLIES (EQ (select |denom| |arg|) 0) (EQ (select |denom| |return|) 0))
===========================================================================
PolyCalc.RatNum.toString():::ENTER
===========================================================================
PolyCalc.RatNum.toString():::EXIT
(EQ (select |numer| |this|) (select |numer| |__orig__this|))
(EQ (select |denom| |this|) (select |denom| |__orig__this|))
(NEQ (hash |return|) null)
warning: method daikon.inv.unary.string.PrintableString.format(OutputFormat:Simplify) needs to be implemented: return.toString is printable
===========================================================================
PolyCalc.RatNum.unparse():::ENTER
===========================================================================
PolyCalc.RatNum.unparse():::EXIT133
(EQ (select |denom| |this|) 0)
(EQ (hash |return|) (hashcode 1001))
(EQ (select |toString| |return|) |_string_NaN|)
===========================================================================
PolyCalc.RatNum.unparse():::EXIT135
(NEQ (select |numer| |this|) 0)
(>= (select |denom| |this|) 2)
(NEQ (select |numer| |this|) (select |denom| |this|))
===========================================================================
PolyCalc.RatNum.unparse():::EXIT137
(EQ (select |denom| |this|) 1)
===========================================================================
PolyCalc.RatNum.unparse():::EXIT
(EQ (select |numer| |this|) (select |numer| |__orig__this|))
(EQ (select |denom| |this|) (select |denom| |__orig__this|))
(NEQ (hash |return|) null)
warning: method daikon.inv.unary.string.PrintableString.format(OutputFormat:Simplify) needs to be implemented: return.toString is printable
===========================================================================
PolyCalc.RatPoly:::OBJECT
(NEQ (hash (select |terms| |this|)) null)
(NEQ (hash (select |wrapped| (select |terms| |this|))) null)
(FORALL (|i| |j|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength (select |wrapped| (select |terms| |this|))) 1)) (<= 0 |j|) (<= |j| (- (arrayLength (select |wrapped| (select |terms| |this|))) 1)) (NEQ |i| |j|)) (NEQ (select (select elems (select |wrapped| (select |terms| |this|))) |i|) (select (select elems (select |wrapped| (select |terms| |this|))) |j|))))
(FORALL (|i|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength (select |wrapped| (select |terms| |this|))) 1))) (NEQ (select (select elems (select |wrapped| (select |terms| |this|))) |i|) null)))
(FORALL (|i|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength (select |wrapped| (select |terms| |this|))) 1))) (EQ (typeof (select (select elems (select |wrapped| (select |terms| |this|))) |i|)) |T_PolyCalc.RatTerm|)))
===========================================================================
PolyCalc.RatPoly.RatPoly():::EXIT
(AND (EQ (arrayLength (select |wrapped| (select |terms| |this|))) 0) (FORALL (|i|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength (select |wrapped| (select |terms| |this|))) 1))) (NEQ (select (select elems (select |wrapped| (select |terms| |this|))) |i|)  null))))
(EQ (arrayLength (select |wrapped| (select |terms| |this|))) 0)
===========================================================================
PolyCalc.RatPoly.RatPoly(PolyCalc.RatTermVec):::ENTER
(NEQ (hash |rt|) null)
(NEQ (hash (select |wrapped| |rt|)) null)
(FORALL (|i| |j|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength (select |wrapped| |rt|)) 1)) (<= 0 |j|) (<= |j| (- (arrayLength (select |wrapped| |rt|)) 1)) (NEQ |i| |j|)) (NEQ (select (select elems (select |wrapped| |rt|)) |i|) (select (select elems (select |wrapped| |rt|)) |j|))))
(FORALL (|i|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength (select |wrapped| |rt|)) 1))) (NEQ (select (select elems (select |wrapped| |rt|)) |i|) null)))
(FORALL (|i|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength (select |wrapped| |rt|)) 1))) (EQ (typeof (select (select elems (select |wrapped| |rt|)) |i|)) |T_PolyCalc.RatTerm|)))
===========================================================================
PolyCalc.RatPoly.RatPoly(PolyCalc.RatTermVec):::EXIT
(EQ (hash (select |terms| |this|)) (hash |__orig__rt|))
(EQ (hash (select |wrapped| (select |terms| |this|))) (hash (select |wrapped| |rt|)))
(EQ (hash (select |wrapped| |rt|)) (hash (select |wrapped| |__orig__rt|)))
(FORALL (|i| |j|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength (select |wrapped| |rt|)) 1)) (<= 0 |j|) (<= |j| (- (arrayLength (select |wrapped| |__orig__rt|)) 1)) (EQ |i| |j|)) (EQ (select (select elems (select |wrapped| |rt|)) |i|) (select (select elems (select |wrapped| |__orig__rt|)) |j|))))
(NEQ (hash (select |wrapped| |rt|)) null)
(FORALL (|i| |j|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength (select |wrapped| |rt|)) 1)) (<= 0 |j|) (<= |j| (- (arrayLength (select |wrapped| |rt|)) 1)) (NEQ |i| |j|)) (NEQ (select (select elems (select |wrapped| |rt|)) |i|) (select (select elems (select |wrapped| |rt|)) |j|))))
(FORALL (|i|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength (select |wrapped| |rt|)) 1))) (NEQ (select (select elems (select |wrapped| |rt|)) |i|) null)))
(FORALL (|i|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength (select |wrapped| |rt|)) 1))) (EQ (typeof (select (select elems (select |wrapped| |rt|)) |i|)) |T_PolyCalc.RatTerm|)))
===========================================================================
PolyCalc.RatPoly.RatPoly(int, int):::ENTER
(>= |e| 0)
===========================================================================
PolyCalc.RatPoly.RatPoly(int, int):::EXIT
(OR (EQ (arrayLength (select |wrapped| (select |terms| |this|))) 0) (AND (EQ (arrayLength (select |wrapped| (select |terms| |this|))) 1) (EQ (typeof (select (select elems (select |wrapped| (select |terms| |this|))) 0)) |_string_PolyCalc.RatTerm|)))
(OR (EQ (arrayLength (select |wrapped| (select |terms| |this|))) 0) (EQ (arrayLength (select |wrapped| (select |terms| |this|))) 1))
===========================================================================
PolyCalc.RatPoly.add(PolyCalc.RatPoly):::ENTER
(NEQ (hash |p|) null)
(NEQ (hash (select |terms| |p|)) null)
(NEQ (hash (select |wrapped| (select |terms| |p|))) null)
(FORALL (|i| |j|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength (select |wrapped| (select |terms| |p|))) 1)) (<= 0 |j|) (<= |j| (- (arrayLength (select |wrapped| (select |terms| |p|))) 1)) (NEQ |i| |j|)) (NEQ (select (select elems (select |wrapped| (select |terms| |p|))) |i|) (select (select elems (select |wrapped| (select |terms| |p|))) |j|))))
(FORALL (|i|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength (select |wrapped| (select |terms| |p|))) 1))) (NEQ (select (select elems (select |wrapped| (select |terms| |p|))) |i|) null)))
(FORALL (|i|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength (select |wrapped| (select |terms| |p|))) 1))) (EQ (typeof (select (select elems (select |wrapped| (select |terms| |p|))) |i|)) |T_PolyCalc.RatTerm|)))
===========================================================================
PolyCalc.RatPoly.add(PolyCalc.RatPoly):::EXIT350
(EQ (hash (select |terms| |this|)) (hash (select |terms| |return|)))
(EQ (hash (select |wrapped| (select |terms| |this|))) (hash (select |wrapped| (select |terms| |return|))))
(EQ (hash |return|) (hash |__orig__this|))
(AND (EQ (arrayLength (select |wrapped| (select |terms| |this|))) 1) (EQ (typeof (select (select elems (select |wrapped| (select |terms| |this|))) 0)) |_string_PolyCalc.RatTerm|))
(OR (EQ (arrayLength (select |wrapped| (select |terms| |p|))) 0) (AND (EQ (arrayLength (select |wrapped| (select |terms| |p|))) 1) (EQ (typeof (select (select elems (select |wrapped| (select |terms| |p|))) 0)) |_string_PolyCalc.RatTerm|)))
(AND (EQ (arrayLength (select |wrapped| (select |terms| |return|))) 1) (EQ (typeof (select (select elems (select |wrapped| (select |terms| |return|))) 0)) |_string_PolyCalc.RatTerm|))
(EQ (arrayLength (select |wrapped| (select |terms| |this|))) 1)
(OR (EQ (arrayLength (select |wrapped| (select |terms| |p|))) 0) (EQ (arrayLength (select |wrapped| (select |terms| |p|))) 1))
(EQ (arrayLength (select |wrapped| (select |terms| |return|))) 1)
===========================================================================
PolyCalc.RatPoly.add(PolyCalc.RatPoly):::EXIT354
(EQ (hash (select |terms| |p|)) (hash (select |terms| |return|)))
(EQ (hash (select |wrapped| (select |terms| |p|))) (hash (select |wrapped| (select |terms| |return|))))
(EQ (hash |return|) (hash |__orig__p|))
(OR (EQ (arrayLength (select |wrapped| (select |terms| |this|))) 0) (AND (EQ (arrayLength (select |wrapped| (select |terms| |this|))) 1) (EQ (typeof (select (select elems (select |wrapped| (select |terms| |this|))) 0)) |_string_PolyCalc.RatTerm|)))
(AND (EQ (arrayLength (select |wrapped| (select |terms| |p|))) 1) (EQ (typeof (select (select elems (select |wrapped| (select |terms| |p|))) 0)) |_string_PolyCalc.RatTerm|))
(AND (EQ (arrayLength (select |wrapped| (select |terms| |return|))) 1) (EQ (typeof (select (select elems (select |wrapped| (select |terms| |return|))) 0)) |_string_PolyCalc.RatTerm|))
(OR (EQ (arrayLength (select |wrapped| (select |terms| |this|))) 0) (EQ (arrayLength (select |wrapped| (select |terms| |this|))) 1))
(EQ (arrayLength (select |wrapped| (select |terms| |p|))) 1)
(EQ (arrayLength (select |wrapped| (select |terms| |return|))) 1)
===========================================================================
PolyCalc.RatPoly.add(PolyCalc.RatPoly):::EXIT363
===========================================================================
PolyCalc.RatPoly.add(PolyCalc.RatPoly):::EXIT
(EQ (hash (select |terms| |this|)) (hash (select |terms| |__orig__this|)))
(EQ (hash (select |wrapped| (select |terms| |this|))) (hash (select |wrapped| (select |terms| |__orig__this|))))
(FORALL (|i| |j|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength (select |wrapped| (select |terms| |this|))) 1)) (<= 0 |j|) (<= |j| (- (arrayLength (select |wrapped| (select |terms| |__orig__this|))) 1)) (EQ |i| |j|)) (EQ (select (select elems (select |wrapped| (select |terms| |this|))) |i|) (select (select elems (select |wrapped| (select |terms| |__orig__this|))) |j|))))
(EQ (hash (select |terms| |p|)) (hash (select |terms| |__orig__p|)))
(EQ (hash (select |wrapped| (select |terms| |p|))) (hash (select |wrapped| (select |terms| |__orig__p|))))
(FORALL (|i| |j|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength (select |wrapped| (select |terms| |p|))) 1)) (<= 0 |j|) (<= |j| (- (arrayLength (select |wrapped| (select |terms| |__orig__p|))) 1)) (EQ |i| |j|)) (EQ (select (select elems (select |wrapped| (select |terms| |p|))) |i|) (select (select elems (select |wrapped| (select |terms| |__orig__p|))) |j|))))
(NEQ (hash (select |terms| |p|)) null)
(NEQ (hash (select |wrapped| (select |terms| |p|))) null)
(FORALL (|i| |j|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength (select |wrapped| (select |terms| |p|))) 1)) (<= 0 |j|) (<= |j| (- (arrayLength (select |wrapped| (select |terms| |p|))) 1)) (NEQ |i| |j|)) (NEQ (select (select elems (select |wrapped| (select |terms| |p|))) |i|) (select (select elems (select |wrapped| (select |terms| |p|))) |j|))))
(FORALL (|i|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength (select |wrapped| (select |terms| |p|))) 1))) (NEQ (select (select elems (select |wrapped| (select |terms| |p|))) |i|) null)))
(FORALL (|i|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength (select |wrapped| (select |terms| |p|))) 1))) (EQ (typeof (select (select elems (select |wrapped| (select |terms| |p|))) |i|)) |T_PolyCalc.RatTerm|)))
(NEQ (hash |return|) null)
(NEQ (hash (select |terms| |return|)) null)
(NEQ (hash (select |wrapped| (select |terms| |return|))) null)
(FORALL (|i| |j|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength (select |wrapped| (select |terms| |return|))) 1)) (<= 0 |j|) (<= |j| (- (arrayLength (select |wrapped| (select |terms| |return|))) 1)) (NEQ |i| |j|)) (NEQ (select (select elems (select |wrapped| (select |terms| |return|))) |i|) (select (select elems (select |wrapped| (select |terms| |return|))) |j|))))
(FORALL (|i|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength (select |wrapped| (select |terms| |return|))) 1))) (NEQ (select (select elems (select |wrapped| (select |terms| |return|))) |i|) null)))
(FORALL (|i|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength (select |wrapped| (select |terms| |return|))) 1))) (EQ (typeof (select (select elems (select |wrapped| (select |terms| |return|))) |i|)) |T_PolyCalc.RatTerm|)))
===========================================================================
PolyCalc.RatPoly.appendTerm(java.lang.StringBuffer, PolyCalc.RatTerm):::ENTER
(NEQ (hash |sb|) null)
(NEQ (hash |rt|) null)
(NEQ (hash (select |coeff| |rt|)) null)
(>= (select |numer| (select |coeff| |rt|)) 1)
(>= (select |denom| (select |coeff| |rt|)) 0)
(>= (select |expt| |rt|) 0)
(IMPLIES (EQ (select |denom| (select |coeff| |rt|)) 0) (EQ (select |expt| |rt|) 0))
===========================================================================
PolyCalc.RatPoly.appendTerm(java.lang.StringBuffer, PolyCalc.RatTerm):::EXIT229
===========================================================================
PolyCalc.RatPoly.appendTerm(java.lang.StringBuffer, PolyCalc.RatTerm):::EXIT
(EQ (hash (select |coeff| |rt|)) (hash (select |coeff| |__orig__rt|)))
(EQ (select |numer| (select |coeff| |rt|)) (select |numer| (select |coeff| |__orig__rt|)))
(EQ (select |denom| (select |coeff| |rt|)) (select |denom| (select |coeff| |__orig__rt|)))
(EQ (select |expt| |rt|) (select |expt| |__orig__rt|))
(NEQ (hash (select |coeff| |rt|)) null)
(>= (select |numer| (select |coeff| |rt|)) 1)
(>= (select |denom| (select |coeff| |rt|)) 0)
(>= (select |expt| |rt|) 0)
(IMPLIES (EQ (select |denom| (select |coeff| |rt|)) 0) (EQ (select |expt| |rt|) 0))
===========================================================================
PolyCalc.RatPoly.assertSorted(PolyCalc.RatTermVec):::ENTER
(NEQ (hash |v|) null)
(NEQ (hash (select |wrapped| |v|)) null)
(FORALL (|i| |j|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength (select |wrapped| |v|)) 1)) (<= 0 |j|) (<= |j| (- (arrayLength (select |wrapped| |v|)) 1)) (NEQ |i| |j|)) (NEQ (select (select elems (select |wrapped| |v|)) |i|) (select (select elems (select |wrapped| |v|)) |j|))))
(FORALL (|i|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength (select |wrapped| |v|)) 1))) (NEQ (select (select elems (select |wrapped| |v|)) |i|) null)))
(FORALL (|i|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength (select |wrapped| |v|)) 1))) (EQ (typeof (select (select elems (select |wrapped| |v|)) |i|)) |T_PolyCalc.RatTerm|)))
===========================================================================
PolyCalc.RatPoly.assertSorted(PolyCalc.RatTermVec):::EXIT
(EQ (hash (select |wrapped| |v|)) (hash (select |wrapped| |__orig__v|)))
(FORALL (|i| |j|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength (select |wrapped| |v|)) 1)) (<= 0 |j|) (<= |j| (- (arrayLength (select |wrapped| |__orig__v|)) 1)) (EQ |i| |j|)) (EQ (select (select elems (select |wrapped| |v|)) |i|) (select (select elems (select |wrapped| |__orig__v|)) |j|))))
(NEQ (hash (select |wrapped| |v|)) null)
(FORALL (|i| |j|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength (select |wrapped| |v|)) 1)) (<= 0 |j|) (<= |j| (- (arrayLength (select |wrapped| |v|)) 1)) (NEQ |i| |j|)) (NEQ (select (select elems (select |wrapped| |v|)) |i|) (select (select elems (select |wrapped| |v|)) |j|))))
(FORALL (|i|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength (select |wrapped| |v|)) 1))) (NEQ (select (select elems (select |wrapped| |v|)) |i|) null)))
(FORALL (|i|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength (select |wrapped| |v|)) 1))) (EQ (typeof (select (select elems (select |wrapped| |v|)) |i|)) |T_PolyCalc.RatTerm|)))
===========================================================================
PolyCalc.RatPoly.checkRep():::ENTER
===========================================================================
PolyCalc.RatPoly.checkRep():::EXIT
(EQ (hash (select |terms| |this|)) (hash (select |terms| |__orig__this|)))
(EQ (hash (select |wrapped| (select |terms| |this|))) (hash (select |wrapped| (select |terms| |__orig__this|))))
(FORALL (|i| |j|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength (select |wrapped| (select |terms| |this|))) 1)) (<= 0 |j|) (<= |j| (- (arrayLength (select |wrapped| (select |terms| |__orig__this|))) 1)) (EQ |i| |j|)) (EQ (select (select elems (select |wrapped| (select |terms| |this|))) |i|) (select (select elems (select |wrapped| (select |terms| |__orig__this|))) |j|))))
===========================================================================
PolyCalc.RatPoly.coeff(int):::ENTER
===========================================================================
PolyCalc.RatPoly.coeff(int):::EXIT120
(NEQ (select |numer| |return|) 0)
(>= |__orig__deg| 0)
(>= (arrayLength (select |wrapped| (select |terms| |this|))) 1)
===========================================================================
PolyCalc.RatPoly.coeff(int):::EXIT124
(EQ (select |numer| |return|) 0)
(EQ (select |denom| |return|) 1)
===========================================================================
PolyCalc.RatPoly.coeff(int):::EXIT
(EQ (hash (select |terms| |this|)) (hash (select |terms| |__orig__this|)))
(EQ (hash (select |wrapped| (select |terms| |this|))) (hash (select |wrapped| (select |terms| |__orig__this|))))
(FORALL (|i| |j|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength (select |wrapped| (select |terms| |this|))) 1)) (<= 0 |j|) (<= |j| (- (arrayLength (select |wrapped| (select |terms| |__orig__this|))) 1)) (EQ |i| |j|)) (EQ (select (select elems (select |wrapped| (select |terms| |this|))) |i|) (select (select elems (select |wrapped| (select |terms| |__orig__this|))) |j|))))
(IMPLIES (NEQ (select |numer| |return|) 0) (>= |__orig__deg| 0))
(IMPLIES (NEQ (select |numer| |return|) 0) (>= (arrayLength (select |wrapped| (select |terms| |this|))) 1))
(IMPLIES (EQ (select |numer| |return|) 0) (EQ (select |denom| |return|) 1))
(IMPLIES (EQ (select |numer| |return|) 0) (< (select |numer| |return|) (select |denom| |return|)))
(IMPLIES (EQ (select |numer| |return|) 0) (AND))
(NEQ (hash |return|) null)
(IMPLIES (EQ (select |denom| |return|) 0) (EQ |__orig__deg| 0))
===========================================================================
PolyCalc.RatPoly.degree():::ENTER
===========================================================================
PolyCalc.RatPoly.degree():::EXIT102
(>= (arrayLength (select |wrapped| (select |terms| |this|))) 1)
===========================================================================
PolyCalc.RatPoly.degree():::EXIT105
(AND (EQ (arrayLength (select |wrapped| (select |terms| |this|))) 0) (FORALL (|i|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength (select |wrapped| (select |terms| |this|))) 1))) (NEQ (select (select elems (select |wrapped| (select |terms| |this|))) |i|)  null))))
(EQ (arrayLength (select |wrapped| (select |terms| |this|))) 0)
(EQ |return| 0)
===========================================================================
PolyCalc.RatPoly.degree():::EXIT
(EQ (hash (select |terms| |this|)) (hash (select |terms| |__orig__this|)))
(EQ (hash (select |wrapped| (select |terms| |this|))) (hash (select |wrapped| (select |terms| |__orig__this|))))
(FORALL (|i| |j|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength (select |wrapped| (select |terms| |this|))) 1)) (<= 0 |j|) (<= |j| (- (arrayLength (select |wrapped| (select |terms| |__orig__this|))) 1)) (EQ |i| |j|)) (EQ (select (select elems (select |wrapped| (select |terms| |this|))) |i|) (select (select elems (select |wrapped| (select |terms| |__orig__this|))) |j|))))
(IMPLIES (EQ (arrayLength (select |wrapped| (select |terms| |this|))) 0) (EQ |return| 0))
(IMPLIES (EQ (arrayLength (select |wrapped| (select |terms| |this|))) 0) (AND))
(IMPLIES (EQ (arrayLength (select |wrapped| (select |terms| |this|))) 0) (AND))
(IMPLIES (EQ (arrayLength (select |wrapped| (select |terms| |this|))) 0) (AND (EQ (arrayLength (select |wrapped| (select |terms| |this|))) 0) (FORALL (|i|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength (select |wrapped| (select |terms| |this|))) 1))) (NEQ (select (select elems (select |wrapped| (select |terms| |this|))) |i|)  null)))))
(IMPLIES (EQ (arrayLength (select |wrapped| (select |terms| |this|))) 0) (EQ (arrayLength (select |wrapped| (select |terms| |this|))) 0))
(>= |return| 0)
===========================================================================
PolyCalc.RatPoly.div(PolyCalc.RatPoly):::ENTER
(NEQ (hash |p|) null)
(NEQ (hash (select |terms| |p|)) null)
(NEQ (hash (select |wrapped| (select |terms| |p|))) null)
(FORALL (|i| |j|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength (select |wrapped| (select |terms| |p|))) 1)) (<= 0 |j|) (<= |j| (- (arrayLength (select |wrapped| (select |terms| |p|))) 1)) (NEQ |i| |j|)) (NEQ (select (select elems (select |wrapped| (select |terms| |p|))) |i|) (select (select elems (select |wrapped| (select |terms| |p|))) |j|))))
(FORALL (|i|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength (select |wrapped| (select |terms| |p|))) 1))) (NEQ (select (select elems (select |wrapped| (select |terms| |p|))) |i|) null)))
(FORALL (|i|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength (select |wrapped| (select |terms| |p|))) 1))) (EQ (typeof (select (select elems (select |wrapped| (select |terms| |p|))) |i|)) |T_PolyCalc.RatTerm|)))
===========================================================================
PolyCalc.RatPoly.div(PolyCalc.RatPoly):::EXIT435
(OR (EQ (arrayLength (select |wrapped| (select |terms| |this|))) 0) (AND (EQ (arrayLength (select |wrapped| (select |terms| |this|))) 1) (EQ (typeof (select (select elems (select |wrapped| (select |terms| |this|))) 0)) |_string_PolyCalc.RatTerm|)))
(OR (EQ (arrayLength (select |wrapped| (select |terms| |p|))) 0) (AND (EQ (arrayLength (select |wrapped| (select |terms| |p|))) 1) (EQ (typeof (select (select elems (select |wrapped| (select |terms| |p|))) 0)) |_string_PolyCalc.RatTerm|)))
(AND (EQ (arrayLength (select |wrapped| (select |terms| |return|))) 1) (EQ (typeof (select (select elems (select |wrapped| (select |terms| |return|))) 0)) |_string_PolyCalc.RatTerm|))
(OR (EQ (arrayLength (select |wrapped| (select |terms| |this|))) 0) (EQ (arrayLength (select |wrapped| (select |terms| |this|))) 1))
(OR (EQ (arrayLength (select |wrapped| (select |terms| |p|))) 0) (EQ (arrayLength (select |wrapped| (select |terms| |p|))) 1))
(EQ (arrayLength (select |wrapped| (select |terms| |return|))) 1)
===========================================================================
PolyCalc.RatPoly.div(PolyCalc.RatPoly):::EXIT438
(>= (arrayLength (select |wrapped| (select |terms| |p|))) 1)
===========================================================================
PolyCalc.RatPoly.div(PolyCalc.RatPoly):::EXIT
(EQ (hash (select |terms| |this|)) (hash (select |terms| |__orig__this|)))
(EQ (hash (select |wrapped| (select |terms| |this|))) (hash (select |wrapped| (select |terms| |__orig__this|))))
(FORALL (|i| |j|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength (select |wrapped| (select |terms| |this|))) 1)) (<= 0 |j|) (<= |j| (- (arrayLength (select |wrapped| (select |terms| |__orig__this|))) 1)) (EQ |i| |j|)) (EQ (select (select elems (select |wrapped| (select |terms| |this|))) |i|) (select (select elems (select |wrapped| (select |terms| |__orig__this|))) |j|))))
(EQ (hash (select |terms| |p|)) (hash (select |terms| |__orig__p|)))
(EQ (hash (select |wrapped| (select |terms| |p|))) (hash (select |wrapped| (select |terms| |__orig__p|))))
(FORALL (|i| |j|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength (select |wrapped| (select |terms| |p|))) 1)) (<= 0 |j|) (<= |j| (- (arrayLength (select |wrapped| (select |terms| |__orig__p|))) 1)) (EQ |i| |j|)) (EQ (select (select elems (select |wrapped| (select |terms| |p|))) |i|) (select (select elems (select |wrapped| (select |terms| |__orig__p|))) |j|))))
(NEQ (hash (select |terms| |p|)) null)
(NEQ (hash (select |wrapped| (select |terms| |p|))) null)
(FORALL (|i| |j|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength (select |wrapped| (select |terms| |p|))) 1)) (<= 0 |j|) (<= |j| (- (arrayLength (select |wrapped| (select |terms| |p|))) 1)) (NEQ |i| |j|)) (NEQ (select (select elems (select |wrapped| (select |terms| |p|))) |i|) (select (select elems (select |wrapped| (select |terms| |p|))) |j|))))
(FORALL (|i|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength (select |wrapped| (select |terms| |p|))) 1))) (NEQ (select (select elems (select |wrapped| (select |terms| |p|))) |i|) null)))
(FORALL (|i|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength (select |wrapped| (select |terms| |p|))) 1))) (EQ (typeof (select (select elems (select |wrapped| (select |terms| |p|))) |i|)) |T_PolyCalc.RatTerm|)))
(NEQ (hash |return|) null)
(NEQ (hash (select |terms| |return|)) null)
(NEQ (hash (select |wrapped| (select |terms| |return|))) null)
(FORALL (|i| |j|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength (select |wrapped| (select |terms| |return|))) 1)) (<= 0 |j|) (<= |j| (- (arrayLength (select |wrapped| (select |terms| |return|))) 1)) (NEQ |i| |j|)) (NEQ (select (select elems (select |wrapped| (select |terms| |return|))) |i|) (select (select elems (select |wrapped| (select |terms| |return|))) |j|))))
(FORALL (|i|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength (select |wrapped| (select |terms| |return|))) 1))) (NEQ (select (select elems (select |wrapped| (select |terms| |return|))) |i|) null)))
(FORALL (|i|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength (select |wrapped| (select |terms| |return|))) 1))) (EQ (typeof (select (select elems (select |wrapped| (select |terms| |return|))) |i|)) |T_PolyCalc.RatTerm|)))
===========================================================================
PolyCalc.RatPoly.divAndRem(PolyCalc.RatPoly):::ENTER
(NEQ (hash |p|) null)
(NEQ (hash (select |terms| |p|)) null)
(NEQ (hash (select |wrapped| (select |terms| |p|))) null)
(FORALL (|i|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength (select |wrapped| (select |terms| |p|))) 1))) (NEQ (select (select elems (select |wrapped| (select |terms| |p|))) |i|) null)))
(FORALL (|i|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength (select |wrapped| (select |terms| |p|))) 1))) (EQ (typeof (select (select elems (select |wrapped| (select |terms| |p|))) |i|)) |T_PolyCalc.RatTerm|)))
(>= (arrayLength (select |wrapped| (select |terms| |p|))) 1)
===========================================================================
PolyCalc.RatPoly.divAndRem(PolyCalc.RatPoly):::EXIT
(EQ (hash (select |terms| |this|)) (hash (select |terms| |__orig__this|)))
(EQ (hash (select |wrapped| (select |terms| |this|))) (hash (select |wrapped| (select |terms| |__orig__this|))))
(FORALL (|i| |j|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength (select |wrapped| (select |terms| |this|))) 1)) (<= 0 |j|) (<= |j| (- (arrayLength (select |wrapped| (select |terms| |__orig__this|))) 1)) (EQ |i| |j|)) (EQ (select (select elems (select |wrapped| (select |terms| |this|))) |i|) (select (select elems (select |wrapped| (select |terms| |__orig__this|))) |j|))))
(EQ (hash (select |terms| |p|)) (hash (select |terms| |__orig__p|)))
(EQ (hash (select |wrapped| (select |terms| |p|))) (hash (select |wrapped| (select |terms| |__orig__p|))))
(FORALL (|i| |j|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength (select |wrapped| (select |terms| |p|))) 1)) (<= 0 |j|) (<= |j| (- (arrayLength (select |wrapped| (select |terms| |__orig__p|))) 1)) (EQ |i| |j|)) (EQ (select (select elems (select |wrapped| (select |terms| |p|))) |i|) (select (select elems (select |wrapped| (select |terms| |__orig__p|))) |j|))))
(NEQ (hash (select |terms| |p|)) null)
(NEQ (hash (select |wrapped| (select |terms| |p|))) null)
(FORALL (|i|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength (select |wrapped| (select |terms| |p|))) 1))) (NEQ (select (select elems (select |wrapped| (select |terms| |p|))) |i|) null)))
(FORALL (|i|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength (select |wrapped| (select |terms| |p|))) 1))) (EQ (typeof (select (select elems (select |wrapped| (select |terms| |p|))) |i|)) |T_PolyCalc.RatTerm|)))
(NEQ (hash |return|) null)
(EQ (typeof |return|) |T_PolyCalc.RatPoly[]|)
(FORALL (|i|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength |return|) 1))) (NEQ (select (select elems |return|) |i|) null)))
(FORALL (|i|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength |return|) 1))) (NEQ (select |terms| (select (select elems |return|) |i|)) null)))
(FORALL (|i|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength |return|) 1))) (NEQ (select |wrapped| (select |terms| (select (select elems |return|) |i|))) null)))
(>= (arrayLength (select |wrapped| (select |terms| |p|))) 1)
(EQ (arrayLength |return|) 2)
===========================================================================
PolyCalc.RatPoly.eval(double):::ENTER
(>= |d| 0.0d0)
(OR (EQ (arrayLength (select |wrapped| (select |terms| |this|))) 0) (EQ (arrayLength (select |wrapped| (select |terms| |this|))) 1) (EQ (arrayLength (select |wrapped| (select |terms| |this|))) 2))
(EQ (|java-&| (arrayLength (select |wrapped| (select |terms| |this|))) (- (arrayLength (select |wrapped| (select |terms| |this|))) 1)) 0)
===========================================================================
PolyCalc.RatPoly.eval(double):::EXIT
(EQ (hash (select |terms| |this|)) (hash (select |terms| |__orig__this|)))
(EQ (hash (select |wrapped| (select |terms| |this|))) (hash (select |wrapped| (select |terms| |__orig__this|))))
(FORALL (|i| |j|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength (select |wrapped| (select |terms| |this|))) 1)) (<= 0 |j|) (<= |j| (- (arrayLength (select |wrapped| (select |terms| |__orig__this|))) 1)) (EQ |i| |j|)) (EQ (select (select elems (select |wrapped| (select |terms| |this|))) |i|) (select (select elems (select |wrapped| (select |terms| |__orig__this|))) |j|))))
(OR (EQ (arrayLength (select |wrapped| (select |terms| |this|))) 0) (EQ (arrayLength (select |wrapped| (select |terms| |this|))) 1) (EQ (arrayLength (select |wrapped| (select |terms| |this|))) 2))
(EQ (|java-&| (arrayLength (select |wrapped| (select |terms| |this|))) (- (arrayLength (select |wrapped| (select |terms| |this|))) 1)) 0)
===========================================================================
PolyCalc.RatPoly.findTermIndex(PolyCalc.RatTermVec, int):::ENTER
(NEQ (hash |ts|) null)
(NEQ (hash (select |wrapped| |ts|)) null)
(FORALL (|i| |j|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength (select |wrapped| |ts|)) 1)) (<= 0 |j|) (<= |j| (- (arrayLength (select |wrapped| |ts|)) 1)) (NEQ |i| |j|)) (NEQ (select (select elems (select |wrapped| |ts|)) |i|) (select (select elems (select |wrapped| |ts|)) |j|))))
(FORALL (|i|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength (select |wrapped| |ts|)) 1))) (NEQ (select (select elems (select |wrapped| |ts|)) |i|) null)))
(FORALL (|i|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength (select |wrapped| |ts|)) 1))) (EQ (typeof (select (select elems (select |wrapped| |ts|)) |i|)) |T_PolyCalc.RatTerm|)))
(>= |expt| 0)
(>= (arrayLength (select |wrapped| |ts|)) 1)
===========================================================================
PolyCalc.RatPoly.findTermIndex(PolyCalc.RatTermVec, int):::EXIT521
===========================================================================
PolyCalc.RatPoly.findTermIndex(PolyCalc.RatTermVec, int):::EXIT523
===========================================================================
PolyCalc.RatPoly.findTermIndex(PolyCalc.RatTermVec, int):::EXIT526
(>= |return| 1)
===========================================================================
PolyCalc.RatPoly.findTermIndex(PolyCalc.RatTermVec, int):::EXIT
(EQ (hash (select |wrapped| |ts|)) (hash (select |wrapped| |__orig__ts|)))
(FORALL (|i| |j|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength (select |wrapped| |ts|)) 1)) (<= 0 |j|) (<= |j| (- (arrayLength (select |wrapped| |__orig__ts|)) 1)) (EQ |i| |j|)) (EQ (select (select elems (select |wrapped| |ts|)) |i|) (select (select elems (select |wrapped| |__orig__ts|)) |j|))))
(NEQ (hash (select |wrapped| |ts|)) null)
(FORALL (|i| |j|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength (select |wrapped| |ts|)) 1)) (<= 0 |j|) (<= |j| (- (arrayLength (select |wrapped| |ts|)) 1)) (NEQ |i| |j|)) (NEQ (select (select elems (select |wrapped| |ts|)) |i|) (select (select elems (select |wrapped| |ts|)) |j|))))
(FORALL (|i|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength (select |wrapped| |ts|)) 1))) (NEQ (select (select elems (select |wrapped| |ts|)) |i|) null)))
(FORALL (|i|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength (select |wrapped| |ts|)) 1))) (EQ (typeof (select (select elems (select |wrapped| |ts|)) |i|)) |T_PolyCalc.RatTerm|)))
(>= |return| 0)
(>= (arrayLength (select |wrapped| |ts|)) 1)
===========================================================================
PolyCalc.RatPoly.hintedGet(PolyCalc.RatTermVec, int, int):::ENTER
(NEQ (hash |ts|) null)
(NEQ (hash (select |wrapped| |ts|)) null)
(FORALL (|i| |j|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength (select |wrapped| |ts|)) 1)) (<= 0 |j|) (<= |j| (- (arrayLength (select |wrapped| |ts|)) 1)) (NEQ |i| |j|)) (NEQ (select (select elems (select |wrapped| |ts|)) |i|) (select (select elems (select |wrapped| |ts|)) |j|))))
(FORALL (|i|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength (select |wrapped| |ts|)) 1))) (NEQ (select (select elems (select |wrapped| |ts|)) |i|) null)))
(FORALL (|i|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength (select |wrapped| |ts|)) 1))) (EQ (typeof (select (select elems (select |wrapped| |ts|)) |i|)) |T_PolyCalc.RatTerm|)))
(>= |i| 0)
(>= |expt| 0)
(>= (arrayLength (select |wrapped| |ts|)) 1)
===========================================================================
PolyCalc.RatPoly.hintedGet(PolyCalc.RatTermVec, int, int):::EXIT534
===========================================================================
PolyCalc.RatPoly.hintedGet(PolyCalc.RatTermVec, int, int):::EXIT537
(EQ (select |numer| (select |coeff| |return|)) 0)
(EQ (select |denom| (select |coeff| |return|)) 1)
(>= |__orig__i| 1)
(<= (select |numer| (select |coeff| |return|)) (select |expt| |return|))
===========================================================================
PolyCalc.RatPoly.hintedGet(PolyCalc.RatTermVec, int, int):::EXIT
(EQ (hash (select |wrapped| |ts|)) (hash (select |wrapped| |__orig__ts|)))
(FORALL (|i| |j|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength (select |wrapped| |ts|)) 1)) (<= 0 |j|) (<= |j| (- (arrayLength (select |wrapped| |__orig__ts|)) 1)) (EQ |i| |j|)) (EQ (select (select elems (select |wrapped| |ts|)) |i|) (select (select elems (select |wrapped| |__orig__ts|)) |j|))))
(EQ (select |expt| |return|) |__orig__expt|)
(IMPLIES (EQ (select |numer| (select |coeff| |return|)) 0) (>= |__orig__i| 1))
(IMPLIES (EQ (select |numer| (select |coeff| |return|)) 0) (EQ (select |denom| (select |coeff| |return|)) 1))
(IMPLIES (EQ (select |numer| (select |coeff| |return|)) 0) (< (select |numer| (select |coeff| |return|)) (select |denom| (select |coeff| |return|))))
(IMPLIES (EQ (select |numer| (select |coeff| |return|)) 0) (<= (select |numer| (select |coeff| |return|)) (select |expt| |return|)))
(IMPLIES (EQ (select |numer| (select |coeff| |return|)) 0) (AND))
(NEQ (hash (select |wrapped| |ts|)) null)
(FORALL (|i| |j|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength (select |wrapped| |ts|)) 1)) (<= 0 |j|) (<= |j| (- (arrayLength (select |wrapped| |ts|)) 1)) (NEQ |i| |j|)) (NEQ (select (select elems (select |wrapped| |ts|)) |i|) (select (select elems (select |wrapped| |ts|)) |j|))))
(FORALL (|i|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength (select |wrapped| |ts|)) 1))) (NEQ (select (select elems (select |wrapped| |ts|)) |i|) null)))
(FORALL (|i|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength (select |wrapped| |ts|)) 1))) (EQ (typeof (select (select elems (select |wrapped| |ts|)) |i|)) |T_PolyCalc.RatTerm|)))
(NEQ (hash |return|) null)
(NEQ (hash (select |coeff| |return|)) null)
(>= (select |denom| (select |coeff| |return|)) 1)
(>= (select |expt| |return|) 0)
(>= (arrayLength (select |wrapped| |ts|)) 1)
===========================================================================
PolyCalc.RatPoly.incremExpt(PolyCalc.RatTermVec, int):::ENTER
(NEQ (hash |vec|) null)
(NEQ (hash (select |wrapped| |vec|)) null)
(FORALL (|i| |j|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength (select |wrapped| |vec|)) 1)) (<= 0 |j|) (<= |j| (- (arrayLength (select |wrapped| |vec|)) 1)) (NEQ |i| |j|)) (NEQ (select (select elems (select |wrapped| |vec|)) |i|) (select (select elems (select |wrapped| |vec|)) |j|))))
(FORALL (|i|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength (select |wrapped| |vec|)) 1))) (NEQ (select (select elems (select |wrapped| |vec|)) |i|) null)))
(FORALL (|i|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength (select |wrapped| |vec|)) 1))) (EQ (typeof (select (select elems (select |wrapped| |vec|)) |i|)) |T_PolyCalc.RatTerm|)))
(>= |degree| 0)
(>= (arrayLength (select |wrapped| |vec|)) 1)
===========================================================================
PolyCalc.RatPoly.incremExpt(PolyCalc.RatTermVec, int):::EXIT
(EQ (hash (select |wrapped| |vec|)) (hash (select |wrapped| |__orig__vec|)))
(EQ (arrayLength (select |wrapped| |vec|)) (arrayLength (select |wrapped| |__orig__vec|)))
(NEQ (hash (select |wrapped| |vec|)) null)
(FORALL (|i| |j|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength (select |wrapped| |vec|)) 1)) (<= 0 |j|) (<= |j| (- (arrayLength (select |wrapped| |vec|)) 1)) (NEQ |i| |j|)) (NEQ (select (select elems (select |wrapped| |vec|)) |i|) (select (select elems (select |wrapped| |vec|)) |j|))))
(FORALL (|i|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength (select |wrapped| |vec|)) 1))) (NEQ (select (select elems (select |wrapped| |vec|)) |i|) null)))
(FORALL (|i|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength (select |wrapped| |vec|)) 1))) (EQ (typeof (select (select elems (select |wrapped| |vec|)) |i|)) |T_PolyCalc.RatTerm|)))
(>= (arrayLength (select |wrapped| |vec|)) 1)
===========================================================================
PolyCalc.RatPoly.isNaN():::ENTER
===========================================================================
PolyCalc.RatPoly.isNaN():::EXIT86
(AND (EQ (arrayLength (select |wrapped| (select |terms| |this|))) 1) (EQ (typeof (select (select elems (select |wrapped| (select |terms| |this|))) 0)) |_string_PolyCalc.RatTerm|))
(EQ |return| |@true|)
(EQ (arrayLength (select |wrapped| (select |terms| |this|))) 1)
===========================================================================
PolyCalc.RatPoly.isNaN():::EXIT90
(EQ |return| |@false|)
===========================================================================
PolyCalc.RatPoly.isNaN():::EXIT
(EQ (hash (select |terms| |this|)) (hash (select |terms| |__orig__this|)))
(EQ (hash (select |wrapped| (select |terms| |this|))) (hash (select |wrapped| (select |terms| |__orig__this|))))
(FORALL (|i| |j|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength (select |wrapped| (select |terms| |this|))) 1)) (<= 0 |j|) (<= |j| (- (arrayLength (select |wrapped| (select |terms| |__orig__this|))) 1)) (EQ |i| |j|)) (EQ (select (select elems (select |wrapped| (select |terms| |this|))) |i|) (select (select elems (select |wrapped| (select |terms| |__orig__this|))) |j|))))
(IMPLIES (EQ |return| |@true|) (EQ (arrayLength (select |wrapped| (select |terms| |this|))) 1))
(IMPLIES (EQ |return| |@true|) (AND))
(IMPLIES (EQ |return| |@true|) (AND (EQ (arrayLength (select |wrapped| (select |terms| |this|))) 1) (EQ (typeof (select (select elems (select |wrapped| (select |terms| |this|))) 0)) |_string_PolyCalc.RatTerm|)))
===========================================================================
PolyCalc.RatPoly.mul(PolyCalc.RatPoly):::ENTER
(NEQ (hash |p|) null)
(NEQ (hash (select |terms| |p|)) null)
(NEQ (hash (select |wrapped| (select |terms| |p|))) null)
(FORALL (|i| |j|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength (select |wrapped| (select |terms| |p|))) 1)) (<= 0 |j|) (<= |j| (- (arrayLength (select |wrapped| (select |terms| |p|))) 1)) (NEQ |i| |j|)) (NEQ (select (select elems (select |wrapped| (select |terms| |p|))) |i|) (select (select elems (select |wrapped| (select |terms| |p|))) |j|))))
(FORALL (|i|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength (select |wrapped| (select |terms| |p|))) 1))) (NEQ (select (select elems (select |wrapped| (select |terms| |p|))) |i|) null)))
(FORALL (|i|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength (select |wrapped| (select |terms| |p|))) 1))) (EQ (typeof (select (select elems (select |wrapped| (select |terms| |p|))) |i|)) |T_PolyCalc.RatTerm|)))
===========================================================================
PolyCalc.RatPoly.mul(PolyCalc.RatPoly):::EXIT390
(EQ (hash (select |terms| |this|)) (hash (select |terms| |return|)))
(EQ (hash (select |wrapped| (select |terms| |this|))) (hash (select |wrapped| (select |terms| |return|))))
(EQ (hash |return|) (hash |__orig__this|))
(AND (EQ (arrayLength (select |wrapped| (select |terms| |this|))) 1) (EQ (typeof (select (select elems (select |wrapped| (select |terms| |this|))) 0)) |_string_PolyCalc.RatTerm|))
(OR (EQ (arrayLength (select |wrapped| (select |terms| |p|))) 0) (AND (EQ (arrayLength (select |wrapped| (select |terms| |p|))) 1) (EQ (typeof (select (select elems (select |wrapped| (select |terms| |p|))) 0)) |_string_PolyCalc.RatTerm|)))
(AND (EQ (arrayLength (select |wrapped| (select |terms| |return|))) 1) (EQ (typeof (select (select elems (select |wrapped| (select |terms| |return|))) 0)) |_string_PolyCalc.RatTerm|))
(EQ (arrayLength (select |wrapped| (select |terms| |this|))) 1)
(OR (EQ (arrayLength (select |wrapped| (select |terms| |p|))) 0) (EQ (arrayLength (select |wrapped| (select |terms| |p|))) 1))
(EQ (arrayLength (select |wrapped| (select |terms| |return|))) 1)
===========================================================================
PolyCalc.RatPoly.mul(PolyCalc.RatPoly):::EXIT394
(EQ (hash (select |terms| |p|)) (hash (select |terms| |return|)))
(EQ (hash (select |wrapped| (select |terms| |p|))) (hash (select |wrapped| (select |terms| |return|))))
(EQ (hash |return|) (hash |__orig__p|))
(OR (EQ (arrayLength (select |wrapped| (select |terms| |this|))) 0) (AND (EQ (arrayLength (select |wrapped| (select |terms| |this|))) 1) (EQ (typeof (select (select elems (select |wrapped| (select |terms| |this|))) 0)) |_string_PolyCalc.RatTerm|)))
(AND (EQ (arrayLength (select |wrapped| (select |terms| |p|))) 1) (EQ (typeof (select (select elems (select |wrapped| (select |terms| |p|))) 0)) |_string_PolyCalc.RatTerm|))
(AND (EQ (arrayLength (select |wrapped| (select |terms| |return|))) 1) (EQ (typeof (select (select elems (select |wrapped| (select |terms| |return|))) 0)) |_string_PolyCalc.RatTerm|))
(OR (EQ (arrayLength (select |wrapped| (select |terms| |this|))) 0) (EQ (arrayLength (select |wrapped| (select |terms| |this|))) 1))
(EQ (arrayLength (select |wrapped| (select |terms| |p|))) 1)
(EQ (arrayLength (select |wrapped| (select |terms| |return|))) 1)
===========================================================================
PolyCalc.RatPoly.mul(PolyCalc.RatPoly):::EXIT404
===========================================================================
PolyCalc.RatPoly.mul(PolyCalc.RatPoly):::EXIT
(EQ (hash (select |terms| |this|)) (hash (select |terms| |__orig__this|)))
(EQ (hash (select |wrapped| (select |terms| |this|))) (hash (select |wrapped| (select |terms| |__orig__this|))))
(FORALL (|i| |j|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength (select |wrapped| (select |terms| |this|))) 1)) (<= 0 |j|) (<= |j| (- (arrayLength (select |wrapped| (select |terms| |__orig__this|))) 1)) (EQ |i| |j|)) (EQ (select (select elems (select |wrapped| (select |terms| |this|))) |i|) (select (select elems (select |wrapped| (select |terms| |__orig__this|))) |j|))))
(EQ (hash (select |terms| |p|)) (hash (select |terms| |__orig__p|)))
(EQ (hash (select |wrapped| (select |terms| |p|))) (hash (select |wrapped| (select |terms| |__orig__p|))))
(FORALL (|i| |j|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength (select |wrapped| (select |terms| |p|))) 1)) (<= 0 |j|) (<= |j| (- (arrayLength (select |wrapped| (select |terms| |__orig__p|))) 1)) (EQ |i| |j|)) (EQ (select (select elems (select |wrapped| (select |terms| |p|))) |i|) (select (select elems (select |wrapped| (select |terms| |__orig__p|))) |j|))))
(NEQ (hash (select |terms| |p|)) null)
(NEQ (hash (select |wrapped| (select |terms| |p|))) null)
(FORALL (|i| |j|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength (select |wrapped| (select |terms| |p|))) 1)) (<= 0 |j|) (<= |j| (- (arrayLength (select |wrapped| (select |terms| |p|))) 1)) (NEQ |i| |j|)) (NEQ (select (select elems (select |wrapped| (select |terms| |p|))) |i|) (select (select elems (select |wrapped| (select |terms| |p|))) |j|))))
(FORALL (|i|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength (select |wrapped| (select |terms| |p|))) 1))) (NEQ (select (select elems (select |wrapped| (select |terms| |p|))) |i|) null)))
(FORALL (|i|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength (select |wrapped| (select |terms| |p|))) 1))) (EQ (typeof (select (select elems (select |wrapped| (select |terms| |p|))) |i|)) |T_PolyCalc.RatTerm|)))
(NEQ (hash |return|) null)
(NEQ (hash (select |terms| |return|)) null)
(NEQ (hash (select |wrapped| (select |terms| |return|))) null)
(FORALL (|i| |j|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength (select |wrapped| (select |terms| |return|))) 1)) (<= 0 |j|) (<= |j| (- (arrayLength (select |wrapped| (select |terms| |return|))) 1)) (NEQ |i| |j|)) (NEQ (select (select elems (select |wrapped| (select |terms| |return|))) |i|) (select (select elems (select |wrapped| (select |terms| |return|))) |j|))))
(FORALL (|i|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength (select |wrapped| (select |terms| |return|))) 1))) (NEQ (select (select elems (select |wrapped| (select |terms| |return|))) |i|) null)))
(FORALL (|i|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength (select |wrapped| (select |terms| |return|))) 1))) (EQ (typeof (select (select elems (select |wrapped| (select |terms| |return|))) |i|)) |T_PolyCalc.RatTerm|)))
===========================================================================
PolyCalc.RatPoly.negate():::ENTER
(OR (EQ (arrayLength (select |wrapped| (select |terms| |this|))) 0) (AND (EQ (arrayLength (select |wrapped| (select |terms| |this|))) 1) (EQ (typeof (select (select elems (select |wrapped| (select |terms| |this|))) 0)) |_string_PolyCalc.RatTerm|)))
(OR (EQ (arrayLength (select |wrapped| (select |terms| |this|))) 0) (EQ (arrayLength (select |wrapped| (select |terms| |this|))) 1))
===========================================================================
PolyCalc.RatPoly.negate():::EXIT
(EQ (hash (select |terms| |this|)) (hash (select |terms| |__orig__this|)))
(EQ (hash (select |wrapped| (select |terms| |this|))) (hash (select |wrapped| (select |terms| |__orig__this|))))
(FORALL (|i| |j|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength (select |wrapped| (select |terms| |this|))) 1)) (<= 0 |j|) (<= |j| (- (arrayLength (select |wrapped| (select |terms| |__orig__this|))) 1)) (EQ |i| |j|)) (EQ (select (select elems (select |wrapped| (select |terms| |this|))) |i|) (select (select elems (select |wrapped| (select |terms| |__orig__this|))) |j|))))
(OR (EQ (arrayLength (select |wrapped| (select |terms| |this|))) 0) (AND (EQ (arrayLength (select |wrapped| (select |terms| |this|))) 1) (EQ (typeof (select (select elems (select |wrapped| (select |terms| |this|))) 0)) |_string_PolyCalc.RatTerm|)))
(NEQ (hash |return|) null)
(NEQ (hash (select |terms| |return|)) null)
(NEQ (hash (select |wrapped| (select |terms| |return|))) null)
(FORALL (|i|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength (select |wrapped| (select |terms| |return|))) 1))) (NEQ (select (select elems (select |wrapped| (select |terms| |return|))) |i|) null)))
(FORALL (|i|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength (select |wrapped| (select |terms| |return|))) 1))) (EQ (typeof (select (select elems (select |wrapped| (select |terms| |return|))) |i|)) |T_PolyCalc.RatTerm|)))
(OR (EQ (arrayLength (select |wrapped| (select |terms| |return|))) 0) (AND (EQ (arrayLength (select |wrapped| (select |terms| |return|))) 1) (EQ (typeof (select (select elems (select |wrapped| (select |terms| |return|))) 0)) |_string_PolyCalc.RatTerm|)))
(OR (EQ (arrayLength (select |wrapped| (select |terms| |this|))) 0) (EQ (arrayLength (select |wrapped| (select |terms| |this|))) 1))
(OR (EQ (arrayLength (select |wrapped| (select |terms| |return|))) 0) (EQ (arrayLength (select |wrapped| (select |terms| |return|))) 1))
===========================================================================
PolyCalc.RatPoly.parse(java.lang.String):::ENTER
(NEQ (hash |polyStr|) null)
warning: method daikon.inv.unary.string.PrintableString.format(OutputFormat:Simplify) needs to be implemented: polyStr.toString is printable
===========================================================================
PolyCalc.RatPoly.parse(java.lang.String):::EXIT
(EQ (select |toString| |polyStr|) (select |toString| |__orig__polyStr|))
warning: method daikon.inv.unary.string.PrintableString.format(OutputFormat:Simplify) needs to be implemented: polyStr.toString is printable
(NEQ (hash |return|) null)
(NEQ (hash (select |terms| |return|)) null)
(NEQ (hash (select |wrapped| (select |terms| |return|))) null)
(FORALL (|i| |j|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength (select |wrapped| (select |terms| |return|))) 1)) (<= 0 |j|) (<= |j| (- (arrayLength (select |wrapped| (select |terms| |return|))) 1)) (NEQ |i| |j|)) (NEQ (select (select elems (select |wrapped| (select |terms| |return|))) |i|) (select (select elems (select |wrapped| (select |terms| |return|))) |j|))))
(FORALL (|i|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength (select |wrapped| (select |terms| |return|))) 1))) (NEQ (select (select elems (select |wrapped| (select |terms| |return|))) |i|) null)))
(FORALL (|i|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength (select |wrapped| (select |terms| |return|))) 1))) (EQ (typeof (select (select elems (select |wrapped| (select |terms| |return|))) |i|)) |T_PolyCalc.RatTerm|)))
===========================================================================
PolyCalc.RatPoly.replaceExpt(PolyCalc.RatTerm, PolyCalc.RatTermVec, int):::ENTER
(NEQ (hash |term|) null)
(NEQ (hash (select |coeff| |term|)) null)
(>= (select |denom| (select |coeff| |term|)) 1)
(>= (select |expt| |term|) 0)
(NEQ (hash |ts|) null)
(NEQ (hash (select |wrapped| |ts|)) null)
(FORALL (|i| |j|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength (select |wrapped| |ts|)) 1)) (<= 0 |j|) (<= |j| (- (arrayLength (select |wrapped| |ts|)) 1)) (NEQ |i| |j|)) (NEQ (select (select elems (select |wrapped| |ts|)) |i|) (select (select elems (select |wrapped| |ts|)) |j|))))
(FORALL (|i|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength (select |wrapped| |ts|)) 1))) (NEQ (select (select elems (select |wrapped| |ts|)) |i|) null)))
(FORALL (|i|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength (select |wrapped| |ts|)) 1))) (EQ (typeof (select (select elems (select |wrapped| |ts|)) |i|)) |T_PolyCalc.RatTerm|)))
(>= |index| 1)
(>= (arrayLength (select |wrapped| |ts|)) 1)
===========================================================================
PolyCalc.RatPoly.replaceExpt(PolyCalc.RatTerm, PolyCalc.RatTermVec, int):::EXIT
(EQ (hash (select |coeff| |term|)) (hash (select |coeff| |__orig__term|)))
(EQ (select |numer| (select |coeff| |term|)) (select |numer| (select |coeff| |__orig__term|)))
(EQ (select |denom| (select |coeff| |term|)) (select |denom| (select |coeff| |__orig__term|)))
(EQ (select |expt| |term|) (select |expt| |__orig__term|))
(EQ (hash (select |wrapped| |ts|)) (hash (select |wrapped| |__orig__ts|)))
(NEQ (hash (select |coeff| |term|)) null)
(>= (select |denom| (select |coeff| |term|)) 1)
(>= (select |expt| |term|) 0)
(NEQ (hash (select |wrapped| |ts|)) null)
(FORALL (|i| |j|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength (select |wrapped| |ts|)) 1)) (<= 0 |j|) (<= |j| (- (arrayLength (select |wrapped| |ts|)) 1)) (NEQ |i| |j|)) (NEQ (select (select elems (select |wrapped| |ts|)) |i|) (select (select elems (select |wrapped| |ts|)) |j|))))
(FORALL (|i|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength (select |wrapped| |ts|)) 1))) (NEQ (select (select elems (select |wrapped| |ts|)) |i|) null)))
(FORALL (|i|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength (select |wrapped| |ts|)) 1))) (EQ (typeof (select (select elems (select |wrapped| |ts|)) |i|)) |T_PolyCalc.RatTerm|)))
(>= (arrayLength (select |wrapped| |ts|)) 1)
(EQ (|java->>| (arrayLength (select |wrapped| |__orig__ts|)) (arrayLength (select |wrapped| |ts|))) 0)
(>= (arrayLength (select |wrapped| |ts|)) (- (arrayLength (select |wrapped| |__orig__ts|)) 1))
(<= (- (arrayLength (select |wrapped| |ts|)) 1) (arrayLength (select |wrapped| |__orig__ts|)))
(IMPLIES (EQ (- (arrayLength (select |wrapped| |ts|)) 1) 0) (EQ (- (arrayLength (select |wrapped| |__orig__ts|)) 1) 0))
===========================================================================
PolyCalc.RatPoly.scaleBy(PolyCalc.RatTerm):::ENTER
(NEQ (hash |scalar|) null)
(NEQ (hash (select |coeff| |scalar|)) null)
(>= (select |denom| (select |coeff| |scalar|)) 1)
(>= (select |expt| |scalar|) 0)
(>= (arrayLength (select |wrapped| (select |terms| |this|))) 1)
===========================================================================
PolyCalc.RatPoly.scaleBy(PolyCalc.RatTerm):::EXIT
(EQ (hash (select |terms| |this|)) (hash (select |terms| |__orig__this|)))
(EQ (hash (select |wrapped| (select |terms| |this|))) (hash (select |wrapped| (select |terms| |__orig__this|))))
(FORALL (|i| |j|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength (select |wrapped| (select |terms| |this|))) 1)) (<= 0 |j|) (<= |j| (- (arrayLength (select |wrapped| (select |terms| |__orig__this|))) 1)) (EQ |i| |j|)) (EQ (select (select elems (select |wrapped| (select |terms| |this|))) |i|) (select (select elems (select |wrapped| (select |terms| |__orig__this|))) |j|))))
(EQ (hash (select |coeff| |scalar|)) (hash (select |coeff| |__orig__scalar|)))
(EQ (select |numer| (select |coeff| |scalar|)) (select |numer| (select |coeff| |__orig__scalar|)))
(EQ (select |denom| (select |coeff| |scalar|)) (select |denom| (select |coeff| |__orig__scalar|)))
(EQ (select |expt| |scalar|) (select |expt| |__orig__scalar|))
(NEQ (hash (select |coeff| |scalar|)) null)
(>= (select |denom| (select |coeff| |scalar|)) 1)
(>= (select |expt| |scalar|) 0)
(NEQ (hash |return|) null)
(NEQ (hash (select |terms| |return|)) null)
(NEQ (hash (select |wrapped| (select |terms| |return|))) null)
(FORALL (|i| |j|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength (select |wrapped| (select |terms| |return|))) 1)) (<= 0 |j|) (<= |j| (- (arrayLength (select |wrapped| (select |terms| |return|))) 1)) (NEQ |i| |j|)) (NEQ (select (select elems (select |wrapped| (select |terms| |return|))) |i|) (select (select elems (select |wrapped| (select |terms| |return|))) |j|))))
(FORALL (|i|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength (select |wrapped| (select |terms| |return|))) 1))) (NEQ (select (select elems (select |wrapped| (select |terms| |return|))) |i|) null)))
(FORALL (|i|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength (select |wrapped| (select |terms| |return|))) 1))) (EQ (typeof (select (select elems (select |wrapped| (select |terms| |return|))) |i|)) |T_PolyCalc.RatTerm|)))
(>= (arrayLength (select |wrapped| (select |terms| |this|))) 1)
(>= (arrayLength (select |wrapped| (select |terms| |return|))) 1)
===========================================================================
PolyCalc.RatPoly.scaleCoeff(PolyCalc.RatTermVec, PolyCalc.RatNum):::ENTER
(NEQ (hash |vec|) null)
(NEQ (hash (select |wrapped| |vec|)) null)
(FORALL (|i| |j|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength (select |wrapped| |vec|)) 1)) (<= 0 |j|) (<= |j| (- (arrayLength (select |wrapped| |vec|)) 1)) (NEQ |i| |j|)) (NEQ (select (select elems (select |wrapped| |vec|)) |i|) (select (select elems (select |wrapped| |vec|)) |j|))))
(FORALL (|i|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength (select |wrapped| |vec|)) 1))) (NEQ (select (select elems (select |wrapped| |vec|)) |i|) null)))
(FORALL (|i|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength (select |wrapped| |vec|)) 1))) (EQ (typeof (select (select elems (select |wrapped| |vec|)) |i|)) |T_PolyCalc.RatTerm|)))
(NEQ (hash |scalar|) null)
(>= (select |denom| |scalar|) 1)
===========================================================================
PolyCalc.RatPoly.scaleCoeff(PolyCalc.RatTermVec, PolyCalc.RatNum):::EXIT
(EQ (hash (select |wrapped| |vec|)) (hash (select |wrapped| |__orig__vec|)))
(EQ (select |numer| |scalar|) (select |numer| |__orig__scalar|))
(EQ (select |denom| |scalar|) (select |denom| |__orig__scalar|))
(EQ (arrayLength (select |wrapped| |vec|)) (arrayLength (select |wrapped| |__orig__vec|)))
(NEQ (hash (select |wrapped| |vec|)) null)
(FORALL (|i| |j|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength (select |wrapped| |vec|)) 1)) (<= 0 |j|) (<= |j| (- (arrayLength (select |wrapped| |vec|)) 1)) (NEQ |i| |j|)) (NEQ (select (select elems (select |wrapped| |vec|)) |i|) (select (select elems (select |wrapped| |vec|)) |j|))))
(FORALL (|i|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength (select |wrapped| |vec|)) 1))) (NEQ (select (select elems (select |wrapped| |vec|)) |i|) null)))
(FORALL (|i|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength (select |wrapped| |vec|)) 1))) (EQ (typeof (select (select elems (select |wrapped| |vec|)) |i|)) |T_PolyCalc.RatTerm|)))
(>= (select |denom| |scalar|) 1)
===========================================================================
PolyCalc.RatPoly.sortedAdd(PolyCalc.RatTermVec, PolyCalc.RatTerm):::ENTER
(NEQ (hash |vec|) null)
(NEQ (hash (select |wrapped| |vec|)) null)
(FORALL (|i| |j|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength (select |wrapped| |vec|)) 1)) (<= 0 |j|) (<= |j| (- (arrayLength (select |wrapped| |vec|)) 1)) (NEQ |i| |j|)) (NEQ (select (select elems (select |wrapped| |vec|)) |i|) (select (select elems (select |wrapped| |vec|)) |j|))))
(FORALL (|i|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength (select |wrapped| |vec|)) 1))) (NEQ (select (select elems (select |wrapped| |vec|)) |i|) null)))
(FORALL (|i|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength (select |wrapped| |vec|)) 1))) (EQ (typeof (select (select elems (select |wrapped| |vec|)) |i|)) |T_PolyCalc.RatTerm|)))
(NEQ (hash |newTerm|) null)
(NEQ (hash (select |coeff| |newTerm|)) null)
(NEQ (select |numer| (select |coeff| |newTerm|)) 0)
(>= (select |denom| (select |coeff| |newTerm|)) 1)
(>= (select |expt| |newTerm|) 0)
===========================================================================
PolyCalc.RatPoly.sortedAdd(PolyCalc.RatTermVec, PolyCalc.RatTerm):::EXIT308
(EQ (arrayLength (select |wrapped| |vec|)) (- (arrayLength (select |wrapped| |__orig__vec|)) 1))
(EQ (select |denom| (select |coeff| |newTerm|)) 1)
SubSet.format_simplify_explicit(vec.wrapped[] is a subset of orig(vec.wrapped[])): sub_name=[(select |wrapped| |vec|), 0, (- (arrayLength (select |wrapped| |vec|)) 1)], super_name=null, for vec.wrapped[] is a subset of orig(vec.wrapped[])
===========================================================================
PolyCalc.RatPoly.sortedAdd(PolyCalc.RatTermVec, PolyCalc.RatTerm):::EXIT312
(EQ (arrayLength (select |wrapped| |vec|)) (arrayLength (select |wrapped| |__orig__vec|)))
===========================================================================
PolyCalc.RatPoly.sortedAdd(PolyCalc.RatTermVec, PolyCalc.RatTerm):::EXIT319
(EQ (- (arrayLength (select |wrapped| |vec|)) 1) (arrayLength (select |wrapped| |__orig__vec|)))
(OR (AND (EQ (arrayLength (select |wrapped| |vec|)) 5) (AND  (FORALL (|i|) (IMPLIES (AND (<= 0 |i|) (<= |i| 4)) (EQ (typeof (select (select elems (select |wrapped| |vec|)) |i|)) |_string_PolyCalc.RatTerm|))))) (AND (EQ (arrayLength (select |wrapped| |vec|)) 6) (AND  (FORALL (|i|) (IMPLIES (AND (<= 0 |i|) (<= |i| 5)) (EQ (typeof (select (select elems (select |wrapped| |vec|)) |i|)) |_string_PolyCalc.RatTerm|))))))
(EQ (select |numer| (select |coeff| |newTerm|)) 2)
(EQ (select |denom| (select |coeff| |newTerm|)) 1)
(OR (EQ (select |expt| |newTerm|) 4) (EQ (select |expt| |newTerm|) 6))
(OR (AND (EQ (arrayLength (select |wrapped| |__orig__vec|)) 4) (AND  (FORALL (|i|) (IMPLIES (AND (<= 0 |i|) (<= |i| 3)) (EQ (typeof (select (select elems (select |wrapped| |__orig__vec|)) |i|)) |_string_PolyCalc.RatTerm|))))) (AND (EQ (arrayLength (select |wrapped| |__orig__vec|)) 5) (AND  (FORALL (|i|) (IMPLIES (AND (<= 0 |i|) (<= |i| 4)) (EQ (typeof (select (select elems (select |wrapped| |__orig__vec|)) |i|)) |_string_PolyCalc.RatTerm|))))))
(OR (EQ (arrayLength (select |wrapped| |vec|)) 5) (EQ (arrayLength (select |wrapped| |vec|)) 6))
SuperSet.format_simplify_explicit(vec.wrapped[] is a superset of orig(vec.wrapped[])): sub_name=null, super_name=[(select |wrapped| |vec|), 0, (- (arrayLength (select |wrapped| |vec|)) 1)], for vec.wrapped[] is a superset of orig(vec.wrapped[])
===========================================================================
PolyCalc.RatPoly.sortedAdd(PolyCalc.RatTermVec, PolyCalc.RatTerm):::EXIT328
(EQ (- (arrayLength (select |wrapped| |vec|)) 1) (arrayLength (select |wrapped| |__orig__vec|)))
(>= (arrayLength (select |wrapped| |vec|)) 1)
format_simplify disabled
SuperSet.format_simplify_explicit(vec.wrapped[] is a superset of orig(vec.wrapped[])): sub_name=null, super_name=[(select |wrapped| |vec|), 0, (- (arrayLength (select |wrapped| |vec|)) 1)], for vec.wrapped[] is a superset of orig(vec.wrapped[])
===========================================================================
PolyCalc.RatPoly.sortedAdd(PolyCalc.RatTermVec, PolyCalc.RatTerm):::EXIT
(EQ (hash (select |wrapped| |vec|)) (hash (select |wrapped| |__orig__vec|)))
(EQ (hash (select |coeff| |newTerm|)) (hash (select |coeff| |__orig__newTerm|)))
(EQ (select |numer| (select |coeff| |newTerm|)) (select |numer| (select |coeff| |__orig__newTerm|)))
(EQ (select |denom| (select |coeff| |newTerm|)) (select |denom| (select |coeff| |__orig__newTerm|)))
(EQ (select |expt| |newTerm|) (select |expt| |__orig__newTerm|))
(NEQ (hash (select |wrapped| |vec|)) null)
(FORALL (|i| |j|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength (select |wrapped| |vec|)) 1)) (<= 0 |j|) (<= |j| (- (arrayLength (select |wrapped| |vec|)) 1)) (NEQ |i| |j|)) (NEQ (select (select elems (select |wrapped| |vec|)) |i|) (select (select elems (select |wrapped| |vec|)) |j|))))
(FORALL (|i|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength (select |wrapped| |vec|)) 1))) (NEQ (select (select elems (select |wrapped| |vec|)) |i|) null)))
(FORALL (|i|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength (select |wrapped| |vec|)) 1))) (EQ (typeof (select (select elems (select |wrapped| |vec|)) |i|)) |T_PolyCalc.RatTerm|)))
(NEQ (hash (select |coeff| |newTerm|)) null)
(NEQ (select |numer| (select |coeff| |newTerm|)) 0)
(>= (select |denom| (select |coeff| |newTerm|)) 1)
(>= (select |expt| |newTerm|) 0)
(IMPLIES (EQ (arrayLength (select |wrapped| |vec|)) 0) (EQ (- (arrayLength (select |wrapped| |__orig__vec|)) 1) 0))
(>= (arrayLength (select |wrapped| |vec|)) (- (arrayLength (select |wrapped| |__orig__vec|)) 1))
(IMPLIES (EQ (arrayLength (select |wrapped| |__orig__vec|)) 0) (EQ (- (arrayLength (select |wrapped| |vec|)) 1) 0))
(<= (- (arrayLength (select |wrapped| |vec|)) 1) (arrayLength (select |wrapped| |__orig__vec|)))
===========================================================================
PolyCalc.RatPoly.sub(PolyCalc.RatPoly):::ENTER
(OR (EQ (arrayLength (select |wrapped| (select |terms| |this|))) 0) (AND (EQ (arrayLength (select |wrapped| (select |terms| |this|))) 1) (EQ (typeof (select (select elems (select |wrapped| (select |terms| |this|))) 0)) |_string_PolyCalc.RatTerm|)))
(NEQ (hash |p|) null)
(NEQ (hash (select |terms| |p|)) null)
(NEQ (hash (select |wrapped| (select |terms| |p|))) null)
(FORALL (|i|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength (select |wrapped| (select |terms| |p|))) 1))) (NEQ (select (select elems (select |wrapped| (select |terms| |p|))) |i|) null)))
(FORALL (|i|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength (select |wrapped| (select |terms| |p|))) 1))) (EQ (typeof (select (select elems (select |wrapped| (select |terms| |p|))) |i|)) |T_PolyCalc.RatTerm|)))
(OR (EQ (arrayLength (select |wrapped| (select |terms| |p|))) 0) (AND (EQ (arrayLength (select |wrapped| (select |terms| |p|))) 1) (EQ (typeof (select (select elems (select |wrapped| (select |terms| |p|))) 0)) |_string_PolyCalc.RatTerm|)))
(OR (EQ (arrayLength (select |wrapped| (select |terms| |this|))) 0) (EQ (arrayLength (select |wrapped| (select |terms| |this|))) 1))
(OR (EQ (arrayLength (select |wrapped| (select |terms| |p|))) 0) (EQ (arrayLength (select |wrapped| (select |terms| |p|))) 1))
===========================================================================
PolyCalc.RatPoly.sub(PolyCalc.RatPoly):::EXIT372
(EQ (hash (select |terms| |this|)) (hash (select |terms| |return|)))
(EQ (hash (select |wrapped| (select |terms| |this|))) (hash (select |wrapped| (select |terms| |return|))))
(EQ (hash |return|) (hash |__orig__this|))
(AND (EQ (arrayLength (select |wrapped| (select |terms| |this|))) 1) (EQ (typeof (select (select elems (select |wrapped| (select |terms| |this|))) 0)) |_string_PolyCalc.RatTerm|))
(AND (EQ (arrayLength (select |wrapped| (select |terms| |return|))) 1) (EQ (typeof (select (select elems (select |wrapped| (select |terms| |return|))) 0)) |_string_PolyCalc.RatTerm|))
(EQ (arrayLength (select |wrapped| (select |terms| |this|))) 1)
(EQ (arrayLength (select |wrapped| (select |terms| |return|))) 1)
===========================================================================
PolyCalc.RatPoly.sub(PolyCalc.RatPoly):::EXIT376
(EQ (hash (select |terms| |p|)) (hash (select |terms| |return|)))
(EQ (hash (select |wrapped| (select |terms| |p|))) (hash (select |wrapped| (select |terms| |return|))))
(EQ (hash |return|) (hash |__orig__p|))
(AND (EQ (arrayLength (select |wrapped| (select |terms| |p|))) 1) (EQ (typeof (select (select elems (select |wrapped| (select |terms| |p|))) 0)) |_string_PolyCalc.RatTerm|))
(AND (EQ (arrayLength (select |wrapped| (select |terms| |return|))) 1) (EQ (typeof (select (select elems (select |wrapped| (select |terms| |return|))) 0)) |_string_PolyCalc.RatTerm|))
(EQ (arrayLength (select |wrapped| (select |terms| |p|))) 1)
(EQ (arrayLength (select |wrapped| (select |terms| |return|))) 1)
===========================================================================
PolyCalc.RatPoly.sub(PolyCalc.RatPoly):::EXIT379
(AND (EQ (arrayLength (select |wrapped| (select |terms| |this|))) 1) (EQ (typeof (select (select elems (select |wrapped| (select |terms| |this|))) 0)) |_string_PolyCalc.RatTerm|))
(EQ (arrayLength (select |wrapped| (select |terms| |this|))) 1)
===========================================================================
PolyCalc.RatPoly.sub(PolyCalc.RatPoly):::EXIT
(EQ (hash (select |terms| |this|)) (hash (select |terms| |__orig__this|)))
(EQ (hash (select |wrapped| (select |terms| |this|))) (hash (select |wrapped| (select |terms| |__orig__this|))))
(FORALL (|i| |j|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength (select |wrapped| (select |terms| |this|))) 1)) (<= 0 |j|) (<= |j| (- (arrayLength (select |wrapped| (select |terms| |__orig__this|))) 1)) (EQ |i| |j|)) (EQ (select (select elems (select |wrapped| (select |terms| |this|))) |i|) (select (select elems (select |wrapped| (select |terms| |__orig__this|))) |j|))))
(EQ (hash (select |terms| |p|)) (hash (select |terms| |__orig__p|)))
(EQ (hash (select |wrapped| (select |terms| |p|))) (hash (select |wrapped| (select |terms| |__orig__p|))))
(FORALL (|i| |j|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength (select |wrapped| (select |terms| |p|))) 1)) (<= 0 |j|) (<= |j| (- (arrayLength (select |wrapped| (select |terms| |__orig__p|))) 1)) (EQ |i| |j|)) (EQ (select (select elems (select |wrapped| (select |terms| |p|))) |i|) (select (select elems (select |wrapped| (select |terms| |__orig__p|))) |j|))))
(OR (EQ (arrayLength (select |wrapped| (select |terms| |this|))) 0) (AND (EQ (arrayLength (select |wrapped| (select |terms| |this|))) 1) (EQ (typeof (select (select elems (select |wrapped| (select |terms| |this|))) 0)) |_string_PolyCalc.RatTerm|)))
(NEQ (hash (select |terms| |p|)) null)
(NEQ (hash (select |wrapped| (select |terms| |p|))) null)
(FORALL (|i|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength (select |wrapped| (select |terms| |p|))) 1))) (NEQ (select (select elems (select |wrapped| (select |terms| |p|))) |i|) null)))
(FORALL (|i|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength (select |wrapped| (select |terms| |p|))) 1))) (EQ (typeof (select (select elems (select |wrapped| (select |terms| |p|))) |i|)) |T_PolyCalc.RatTerm|)))
(OR (EQ (arrayLength (select |wrapped| (select |terms| |p|))) 0) (AND (EQ (arrayLength (select |wrapped| (select |terms| |p|))) 1) (EQ (typeof (select (select elems (select |wrapped| (select |terms| |p|))) 0)) |_string_PolyCalc.RatTerm|)))
(NEQ (hash |return|) null)
(NEQ (hash (select |terms| |return|)) null)
(NEQ (hash (select |wrapped| (select |terms| |return|))) null)
(FORALL (|i|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength (select |wrapped| (select |terms| |return|))) 1))) (NEQ (select (select elems (select |wrapped| (select |terms| |return|))) |i|) null)))
(FORALL (|i|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength (select |wrapped| (select |terms| |return|))) 1))) (EQ (typeof (select (select elems (select |wrapped| (select |terms| |return|))) |i|)) |T_PolyCalc.RatTerm|)))
(OR (EQ (arrayLength (select |wrapped| (select |terms| |this|))) 0) (EQ (arrayLength (select |wrapped| (select |terms| |this|))) 1))
(OR (EQ (arrayLength (select |wrapped| (select |terms| |p|))) 0) (EQ (arrayLength (select |wrapped| (select |terms| |p|))) 1))
(OR (EQ (arrayLength (select |wrapped| (select |terms| |return|))) 0) (EQ (arrayLength (select |wrapped| (select |terms| |return|))) 1) (EQ (arrayLength (select |wrapped| (select |terms| |return|))) 2))
(EQ (|java-&| (arrayLength (select |wrapped| (select |terms| |return|))) (- (arrayLength (select |wrapped| (select |terms| |return|))) 1)) 0)
===========================================================================
PolyCalc.RatPoly.toString():::ENTER
===========================================================================
PolyCalc.RatPoly.toString():::EXIT
(EQ (hash (select |terms| |this|)) (hash (select |terms| |__orig__this|)))
(EQ (hash (select |wrapped| (select |terms| |this|))) (hash (select |wrapped| (select |terms| |__orig__this|))))
(FORALL (|i| |j|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength (select |wrapped| (select |terms| |this|))) 1)) (<= 0 |j|) (<= |j| (- (arrayLength (select |wrapped| (select |terms| |__orig__this|))) 1)) (EQ |i| |j|)) (EQ (select (select elems (select |wrapped| (select |terms| |this|))) |i|) (select (select elems (select |wrapped| (select |terms| |__orig__this|))) |j|))))
(NEQ (hash |return|) null)
warning: method daikon.inv.unary.string.PrintableString.format(OutputFormat:Simplify) needs to be implemented: return.toString is printable
===========================================================================
PolyCalc.RatPoly.unparse():::ENTER
===========================================================================
PolyCalc.RatPoly.unparse():::EXIT165
(AND (EQ (arrayLength (select |wrapped| (select |terms| |this|))) 0) (FORALL (|i|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength (select |wrapped| (select |terms| |this|))) 1))) (NEQ (select (select elems (select |wrapped| (select |terms| |this|))) |i|)  null))))
(EQ (arrayLength (select |wrapped| (select |terms| |this|))) 0)
(EQ (hash |return|) (hashcode 1002))
(EQ (select |toString| |return|) |_string_0|)
===========================================================================
PolyCalc.RatPoly.unparse():::EXIT196
(>= (arrayLength (select |wrapped| (select |terms| |this|))) 1)
===========================================================================
PolyCalc.RatPoly.unparse():::EXIT
(EQ (hash (select |terms| |this|)) (hash (select |terms| |__orig__this|)))
(EQ (hash (select |wrapped| (select |terms| |this|))) (hash (select |wrapped| (select |terms| |__orig__this|))))
(FORALL (|i| |j|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength (select |wrapped| (select |terms| |this|))) 1)) (<= 0 |j|) (<= |j| (- (arrayLength (select |wrapped| (select |terms| |__orig__this|))) 1)) (EQ |i| |j|)) (EQ (select (select elems (select |wrapped| (select |terms| |this|))) |i|) (select (select elems (select |wrapped| (select |terms| |__orig__this|))) |j|))))
(IMPLIES (EQ (arrayLength (select |wrapped| (select |terms| |this|))) 0) (EQ (hash |return|) (hashcode 1002)))
(IMPLIES (EQ (arrayLength (select |wrapped| (select |terms| |this|))) 0) (EQ (select |toString| |return|) |_string_0|))
(IMPLIES (EQ (arrayLength (select |wrapped| (select |terms| |this|))) 0) (AND))
(IMPLIES (EQ (arrayLength (select |wrapped| (select |terms| |this|))) 0) (AND (EQ (arrayLength (select |wrapped| (select |terms| |this|))) 0) (FORALL (|i|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength (select |wrapped| (select |terms| |this|))) 1))) (NEQ (select (select elems (select |wrapped| (select |terms| |this|))) |i|)  null)))))
(IMPLIES (EQ (arrayLength (select |wrapped| (select |terms| |this|))) 0) (EQ (arrayLength (select |wrapped| (select |terms| |this|))) 0))
(NEQ (hash |return|) null)
warning: method daikon.inv.unary.string.PrintableString.format(OutputFormat:Simplify) needs to be implemented: return.toString is printable
===========================================================================
PolyCalc.RatTerm:::OBJECT
(NEQ (hash (select |coeff| |this|)) null)
(>= (select |denom| (select |coeff| |this|)) 0)
(>= (select |expt| |this|) 0)
===========================================================================
PolyCalc.RatTerm.RatTerm(PolyCalc.RatNum, int):::ENTER
(NEQ (hash |c|) null)
(>= (select |denom| |c|) 0)
(>= |e| 0)
(IMPLIES (EQ (select |denom| |c|) 0) (EQ |e| 0))
===========================================================================
PolyCalc.RatTerm.RatTerm(PolyCalc.RatNum, int):::EXIT
(EQ (hash (select |coeff| |this|)) (hash |__orig__c|))
(EQ (select |numer| (select |coeff| |this|)) (select |numer| |c|))
(EQ (select |denom| (select |coeff| |this|)) (select |denom| |c|))
(EQ (select |expt| |this|) |__orig__e|)
(EQ (select |numer| |c|) (select |numer| |__orig__c|))
(EQ (select |denom| |c|) (select |denom| |__orig__c|))
(>= (select |denom| |c|) 0)
(IMPLIES (EQ (select |denom| |c|) 0) (EQ (select |expt| |this|) 0))
===========================================================================
PolyCalc.RatTerm.debugPrint():::ENTER
(IMPLIES (EQ (select |denom| (select |coeff| |this|)) 0) (EQ (select |expt| |this|) 0))
===========================================================================
PolyCalc.RatTerm.debugPrint():::EXIT
(EQ (hash (select |coeff| |this|)) (hash (select |coeff| |__orig__this|)))
(EQ (select |numer| (select |coeff| |this|)) (select |numer| (select |coeff| |__orig__this|)))
(EQ (select |denom| (select |coeff| |this|)) (select |denom| (select |coeff| |__orig__this|)))
(EQ (select |expt| |this|) (select |expt| |__orig__this|))
(NEQ (hash |return|) null)
warning: method daikon.inv.unary.string.PrintableString.format(OutputFormat:Simplify) needs to be implemented: return.toString is printable
(IMPLIES (EQ (select |denom| (select |coeff| |this|)) 0) (EQ (select |expt| |this|) 0))
===========================================================================
PolyCalc.RatTerm.toString():::ENTER
===========================================================================
PolyCalc.RatTerm.toString():::EXIT
(EQ (hash (select |coeff| |this|)) (hash (select |coeff| |__orig__this|)))
(EQ (select |numer| (select |coeff| |this|)) (select |numer| (select |coeff| |__orig__this|)))
(EQ (select |denom| (select |coeff| |this|)) (select |denom| (select |coeff| |__orig__this|)))
(EQ (select |expt| |this|) (select |expt| |__orig__this|))
(NEQ (hash |return|) null)
warning: method daikon.inv.unary.string.PrintableString.format(OutputFormat:Simplify) needs to be implemented: return.toString is printable
===========================================================================
PolyCalc.RatTermVec:::OBJECT
(NEQ (hash (select |wrapped| |this|)) null)
(FORALL (|i|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength (select |wrapped| |this|)) 1))) (NEQ (select (select elems (select |wrapped| |this|)) |i|) null)))
(FORALL (|i|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength (select |wrapped| |this|)) 1))) (EQ (typeof (select (select elems (select |wrapped| |this|)) |i|)) |T_PolyCalc.RatTerm|)))
===========================================================================
PolyCalc.RatTermVec.RatTermVec():::EXIT
(AND (EQ (arrayLength (select |wrapped| |this|)) 0) (FORALL (|i|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength (select |wrapped| |this|)) 1))) (NEQ (select (select elems (select |wrapped| |this|)) |i|)  null))))
(EQ (arrayLength (select |wrapped| |this|)) 0)
===========================================================================
PolyCalc.RatTermVec.addElement(PolyCalc.RatTerm):::ENTER
(FORALL (|i| |j|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength (select |wrapped| |this|)) 1)) (<= 0 |j|) (<= |j| (- (arrayLength (select |wrapped| |this|)) 1)) (NEQ |i| |j|)) (NEQ (select (select elems (select |wrapped| |this|)) |i|) (select (select elems (select |wrapped| |this|)) |j|))))
(NEQ (hash |t|) null)
(NEQ (hash (select |coeff| |t|)) null)
(NEQ (select |numer| (select |coeff| |t|)) 0)
(>= (select |denom| (select |coeff| |t|)) 0)
(>= (select |expt| |t|) 0)
(IMPLIES (EQ (select |denom| (select |coeff| |t|)) 0) (EQ (select |expt| |t|) 0))
===========================================================================
PolyCalc.RatTermVec.addElement(PolyCalc.RatTerm):::EXIT
(EQ (hash (select |wrapped| |this|)) (hash (select |wrapped| |__orig__this|)))
(EQ (hash (select |coeff| |t|)) (hash (select |coeff| |__orig__t|)))
(EQ (select |numer| (select |coeff| |t|)) (select |numer| (select |coeff| |__orig__t|)))
(EQ (select |denom| (select |coeff| |t|)) (select |denom| (select |coeff| |__orig__t|)))
(EQ (select |expt| |t|) (select |expt| |__orig__t|))
(EQ (- (arrayLength (select |wrapped| |this|)) 1) (arrayLength (select |wrapped| |__orig__this|)))
(FORALL (|i| |j|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength (select |wrapped| |this|)) 1)) (<= 0 |j|) (<= |j| (- (arrayLength (select |wrapped| |this|)) 1)) (NEQ |i| |j|)) (NEQ (select (select elems (select |wrapped| |this|)) |i|) (select (select elems (select |wrapped| |this|)) |j|))))
(NEQ (hash (select |coeff| |t|)) null)
(NEQ (select |numer| (select |coeff| |t|)) 0)
(>= (select |denom| (select |coeff| |t|)) 0)
(>= (select |expt| |t|) 0)
(>= (arrayLength (select |wrapped| |this|)) 1)
format_simplify disabled
SuperSet.format_simplify_explicit(this.wrapped[] is a superset of orig(this.wrapped[])): sub_name=null, super_name=[(select |wrapped| |this|), 0, (- (arrayLength (select |wrapped| |this|)) 1)], for this.wrapped[] is a superset of orig(this.wrapped[])
(IMPLIES (EQ (select |denom| (select |coeff| |t|)) 0) (EQ (select |expt| |t|) 0))
===========================================================================
PolyCalc.RatTermVec.copy():::ENTER
(FORALL (|i| |j|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength (select |wrapped| |this|)) 1)) (<= 0 |j|) (<= |j| (- (arrayLength (select |wrapped| |this|)) 1)) (NEQ |i| |j|)) (NEQ (select (select elems (select |wrapped| |this|)) |i|) (select (select elems (select |wrapped| |this|)) |j|))))
===========================================================================
PolyCalc.RatTermVec.copy():::EXIT
(EQ (hash (select |wrapped| |this|)) (hash (select |wrapped| |__orig__this|)))
(FORALL (|i| |j|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength (select |wrapped| |this|)) 1)) (<= 0 |j|) (<= |j| (- (arrayLength (select |wrapped| |__orig__this|)) 1)) (EQ |i| |j|)) (EQ (select (select elems (select |wrapped| |this|)) |i|) (select (select elems (select |wrapped| |__orig__this|)) |j|))))
(FORALL (|i| |j|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength (select |wrapped| |this|)) 1)) (<= 0 |j|) (<= |j| (- (arrayLength (select |wrapped| |this|)) 1)) (NEQ |i| |j|)) (NEQ (select (select elems (select |wrapped| |this|)) |i|) (select (select elems (select |wrapped| |this|)) |j|))))
(NEQ (hash |return|) null)
(NEQ (hash (select |wrapped| |return|)) null)
(FORALL (|i| |j|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength (select |wrapped| |return|)) 1)) (<= 0 |j|) (<= |j| (- (arrayLength (select |wrapped| |return|)) 1)) (NEQ |i| |j|)) (NEQ (select (select elems (select |wrapped| |return|)) |i|) (select (select elems (select |wrapped| |return|)) |j|))))
(FORALL (|i|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength (select |wrapped| |return|)) 1))) (NEQ (select (select elems (select |wrapped| |return|)) |i|) null)))
(FORALL (|i|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength (select |wrapped| |return|)) 1))) (EQ (typeof (select (select elems (select |wrapped| |return|)) |i|)) |T_PolyCalc.RatTerm|)))
===========================================================================
PolyCalc.RatTermVec.get(int):::ENTER
(>= |index| 0)
(>= (arrayLength (select |wrapped| |this|)) 1)
===========================================================================
PolyCalc.RatTermVec.get(int):::EXIT
(EQ (hash (select |wrapped| |this|)) (hash (select |wrapped| |__orig__this|)))
(FORALL (|i| |j|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength (select |wrapped| |this|)) 1)) (<= 0 |j|) (<= |j| (- (arrayLength (select |wrapped| |__orig__this|)) 1)) (EQ |i| |j|)) (EQ (select (select elems (select |wrapped| |this|)) |i|) (select (select elems (select |wrapped| |__orig__this|)) |j|))))
(NEQ (hash |return|) null)
(NEQ (hash (select |coeff| |return|)) null)
(>= (select |denom| (select |coeff| |return|)) 0)
(>= (select |expt| |return|) 0)
(>= (arrayLength (select |wrapped| |this|)) 1)
(IMPLIES (EQ (select |numer| (select |coeff| |return|)) 0) (EQ (select |expt| |return|) 0))
(IMPLIES (EQ (select |denom| (select |coeff| |return|)) 0) (EQ (select |expt| |return|) 0))
===========================================================================
PolyCalc.RatTermVec.insert(PolyCalc.RatTerm, int):::ENTER
(NEQ (hash |t|) null)
(NEQ (hash (select |coeff| |t|)) null)
(>= (select |denom| (select |coeff| |t|)) 1)
(>= (select |expt| |t|) 0)
(>= |index| 0)
===========================================================================
PolyCalc.RatTermVec.insert(PolyCalc.RatTerm, int):::EXIT
(EQ (hash (select |wrapped| |this|)) (hash (select |wrapped| |__orig__this|)))
(EQ (hash (select |coeff| |t|)) (hash (select |coeff| |__orig__t|)))
(EQ (select |numer| (select |coeff| |t|)) (select |numer| (select |coeff| |__orig__t|)))
(EQ (select |denom| (select |coeff| |t|)) (select |denom| (select |coeff| |__orig__t|)))
(EQ (select |expt| |t|) (select |expt| |__orig__t|))
(EQ (- (arrayLength (select |wrapped| |this|)) 1) (arrayLength (select |wrapped| |__orig__this|)))
(NEQ (hash (select |coeff| |t|)) null)
(>= (select |denom| (select |coeff| |t|)) 1)
(>= (select |expt| |t|) 0)
(>= (arrayLength (select |wrapped| |this|)) 1)
SuperSet.format_simplify_explicit(this.wrapped[] is a superset of orig(this.wrapped[])): sub_name=null, super_name=[(select |wrapped| |this|), 0, (- (arrayLength (select |wrapped| |this|)) 1)], for this.wrapped[] is a superset of orig(this.wrapped[])
===========================================================================
PolyCalc.RatTermVec.printDebug():::ENTER
===========================================================================
PolyCalc.RatTermVec.printDebug():::EXIT
(EQ (hash (select |wrapped| |this|)) (hash (select |wrapped| |__orig__this|)))
(FORALL (|i| |j|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength (select |wrapped| |this|)) 1)) (<= 0 |j|) (<= |j| (- (arrayLength (select |wrapped| |__orig__this|)) 1)) (EQ |i| |j|)) (EQ (select (select elems (select |wrapped| |this|)) |i|) (select (select elems (select |wrapped| |__orig__this|)) |j|))))
(NEQ (hash |return|) null)
warning: method daikon.inv.unary.string.PrintableString.format(OutputFormat:Simplify) needs to be implemented: return.toString is printable
===========================================================================
PolyCalc.RatTermVec.remove(int):::ENTER
(FORALL (|i| |j|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength (select |wrapped| |this|)) 1)) (<= 0 |j|) (<= |j| (- (arrayLength (select |wrapped| |this|)) 1)) (NEQ |i| |j|)) (NEQ (select (select elems (select |wrapped| |this|)) |i|) (select (select elems (select |wrapped| |this|)) |j|))))
(>= |index| 0)
(>= (arrayLength (select |wrapped| |this|)) 1)
===========================================================================
PolyCalc.RatTermVec.remove(int):::EXIT
(EQ (hash (select |wrapped| |this|)) (hash (select |wrapped| |__orig__this|)))
(EQ (arrayLength (select |wrapped| |this|)) (- (arrayLength (select |wrapped| |__orig__this|)) 1))
(FORALL (|i| |j|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength (select |wrapped| |this|)) 1)) (<= 0 |j|) (<= |j| (- (arrayLength (select |wrapped| |this|)) 1)) (NEQ |i| |j|)) (NEQ (select (select elems (select |wrapped| |this|)) |i|) (select (select elems (select |wrapped| |this|)) |j|))))
SubSet.format_simplify_explicit(this.wrapped[] is a subset of orig(this.wrapped[])): sub_name=[(select |wrapped| |this|), 0, (- (arrayLength (select |wrapped| |this|)) 1)], super_name=null, for this.wrapped[] is a subset of orig(this.wrapped[])
===========================================================================
PolyCalc.RatTermVec.set(PolyCalc.RatTerm, int):::ENTER
(FORALL (|i| |j|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength (select |wrapped| |this|)) 1)) (<= 0 |j|) (<= |j| (- (arrayLength (select |wrapped| |this|)) 1)) (NEQ |i| |j|)) (NEQ (select (select elems (select |wrapped| |this|)) |i|) (select (select elems (select |wrapped| |this|)) |j|))))
(NEQ (hash |t|) null)
(NEQ (hash (select |coeff| |t|)) null)
(NEQ (select |numer| (select |coeff| |t|)) 0)
(>= (select |expt| |t|) 0)
(>= |index| 0)
(>= (arrayLength (select |wrapped| |this|)) 1)
(IMPLIES (EQ (select |denom| (select |coeff| |t|)) 0) (EQ (select |expt| |t|) 0))
===========================================================================
PolyCalc.RatTermVec.set(PolyCalc.RatTerm, int):::EXIT
(EQ (hash (select |wrapped| |this|)) (hash (select |wrapped| |__orig__this|)))
(EQ (hash (select |coeff| |t|)) (hash (select |coeff| |__orig__t|)))
(EQ (select |numer| (select |coeff| |t|)) (select |numer| (select |coeff| |__orig__t|)))
(EQ (select |denom| (select |coeff| |t|)) (select |denom| (select |coeff| |__orig__t|)))
(EQ (select |expt| |t|) (select |expt| |__orig__t|))
(EQ (arrayLength (select |wrapped| |this|)) (arrayLength (select |wrapped| |__orig__this|)))
(FORALL (|i| |j|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength (select |wrapped| |this|)) 1)) (<= 0 |j|) (<= |j| (- (arrayLength (select |wrapped| |this|)) 1)) (NEQ |i| |j|)) (NEQ (select (select elems (select |wrapped| |this|)) |i|) (select (select elems (select |wrapped| |this|)) |j|))))
(NEQ (hash (select |coeff| |t|)) null)
(NEQ (select |numer| (select |coeff| |t|)) 0)
(>= (select |expt| |t|) 0)
(>= (arrayLength (select |wrapped| |this|)) 1)
(IMPLIES (EQ (select |denom| (select |coeff| |t|)) 0) (EQ (select |expt| |t|) 0))
===========================================================================
PolyCalc.RatTermVec.size():::ENTER
(FORALL (|i| |j|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength (select |wrapped| |this|)) 1)) (<= 0 |j|) (<= |j| (- (arrayLength (select |wrapped| |this|)) 1)) (NEQ |i| |j|)) (NEQ (select (select elems (select |wrapped| |this|)) |i|) (select (select elems (select |wrapped| |this|)) |j|))))
===========================================================================
PolyCalc.RatTermVec.size():::EXIT
(EQ (hash (select |wrapped| |this|)) (hash (select |wrapped| |__orig__this|)))
(FORALL (|i| |j|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength (select |wrapped| |this|)) 1)) (<= 0 |j|) (<= |j| (- (arrayLength (select |wrapped| |__orig__this|)) 1)) (EQ |i| |j|)) (EQ (select (select elems (select |wrapped| |this|)) |i|) (select (select elems (select |wrapped| |__orig__this|)) |j|))))
(FORALL (|i| |j|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength (select |wrapped| |this|)) 1)) (<= 0 |j|) (<= |j| (- (arrayLength (select |wrapped| |this|)) 1)) (NEQ |i| |j|)) (NEQ (select (select elems (select |wrapped| |this|)) |i|) (select (select elems (select |wrapped| |this|)) |j|))))
(>= |return| 0)
===========================================================================
PolyCalc.RatTermVec.toString():::ENTER
===========================================================================
PolyCalc.RatTermVec.toString():::EXIT
(EQ (hash (select |wrapped| |this|)) (hash (select |wrapped| |__orig__this|)))
(FORALL (|i| |j|) (IMPLIES (AND (<= 0 |i|) (<= |i| (- (arrayLength (select |wrapped| |this|)) 1)) (<= 0 |j|) (<= |j| (- (arrayLength (select |wrapped| |__orig__this|)) 1)) (EQ |i| |j|)) (EQ (select (select elems (select |wrapped| |this|)) |i|) (select (select elems (select |wrapped| |__orig__this|)) |j|))))
(NEQ (hash |return|) null)
warning: method daikon.inv.unary.string.PrintableString.format(OutputFormat:Simplify) needs to be implemented: return.toString is printable
