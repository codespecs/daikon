// Declaration file written by daikon.dcomp

VarComparability
implicit
DECLARE
PolyCalc.RatNum:::CLASS

DECLARE
PolyCalc.RatNum:::OBJECT
this
PolyCalc.RatNum # isNonNull=true, isParam=true
hashcode
2
this.numer
int # declaringClassPackageName=PolyCalc
int
3
this.denom
int # declaringClassPackageName=PolyCalc
int
3


DECLARE
PolyCalc.RatNum.RatNum(int):::ENTER
n
int # isParam=true
int
2

DECLARE
PolyCalc.RatNum.RatNum(int):::EXIT45
this
PolyCalc.RatNum # isNonNull=true, isParam=true
hashcode
3
this.numer
int # declaringClassPackageName=PolyCalc
int
2
this.denom
int # declaringClassPackageName=PolyCalc
int
2
n
int # isParam=true
int
2


DECLARE
PolyCalc.RatNum.RatNum(int, int):::ENTER
n
int # isParam=true
int
2
d
int # isParam=true
int
2

DECLARE
PolyCalc.RatNum.RatNum(int, int):::EXIT55
this
PolyCalc.RatNum # isNonNull=true, isParam=true
hashcode
3
this.numer
int # declaringClassPackageName=PolyCalc
int
2
this.denom
int # declaringClassPackageName=PolyCalc
int
2
n
int # isParam=true
int
2
d
int # isParam=true
int
2

DECLARE
PolyCalc.RatNum.RatNum(int, int):::EXIT67
this
PolyCalc.RatNum # isNonNull=true, isParam=true
hashcode
3
this.numer
int # declaringClassPackageName=PolyCalc
int
2
this.denom
int # declaringClassPackageName=PolyCalc
int
2
n
int # isParam=true
int
2
d
int # isParam=true
int
2


DECLARE
PolyCalc.RatNum.isNaN():::ENTER
this
PolyCalc.RatNum # isNonNull=true, isParam=true
hashcode
2
this.numer
int # declaringClassPackageName=PolyCalc
int
3
this.denom
int # declaringClassPackageName=PolyCalc
int
3

DECLARE
PolyCalc.RatNum.isNaN():::EXIT71
this
PolyCalc.RatNum # isNonNull=true, isParam=true
hashcode
3
this.numer
int # declaringClassPackageName=PolyCalc
int
4
this.denom
int # declaringClassPackageName=PolyCalc
int
4
return
boolean
boolean
2


DECLARE
PolyCalc.RatNum.isNegative():::ENTER
this
PolyCalc.RatNum # isNonNull=true, isParam=true
hashcode
2
this.numer
int # declaringClassPackageName=PolyCalc
int
3
this.denom
int # declaringClassPackageName=PolyCalc
int
3

DECLARE
PolyCalc.RatNum.isNegative():::EXIT77
this
PolyCalc.RatNum # isNonNull=true, isParam=true
hashcode
3
this.numer
int # declaringClassPackageName=PolyCalc
int
4
this.denom
int # declaringClassPackageName=PolyCalc
int
4
return
boolean
boolean
2


DECLARE
PolyCalc.RatNum.isPositive():::ENTER
this
PolyCalc.RatNum # isNonNull=true, isParam=true
hashcode
2
this.numer
int # declaringClassPackageName=PolyCalc
int
3
this.denom
int # declaringClassPackageName=PolyCalc
int
3

DECLARE
PolyCalc.RatNum.isPositive():::EXIT83
this
PolyCalc.RatNum # isNonNull=true, isParam=true
hashcode
3
this.numer
int # declaringClassPackageName=PolyCalc
int
4
this.denom
int # declaringClassPackageName=PolyCalc
int
4
return
boolean
boolean
2


DECLARE
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::ENTER
this
PolyCalc.RatNum # isNonNull=true, isParam=true
hashcode
2
this.numer
int # declaringClassPackageName=PolyCalc
int
3
this.denom
int # declaringClassPackageName=PolyCalc
int
3
rn
PolyCalc.RatNum # isParam=true
hashcode
2
rn.numer
int # declaringClassPackageName=PolyCalc
int
3
rn.denom
int # declaringClassPackageName=PolyCalc
int
3

DECLARE
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::EXIT94
this
PolyCalc.RatNum # isNonNull=true, isParam=true
hashcode
3
this.numer
int # declaringClassPackageName=PolyCalc
int
2
this.denom
int # declaringClassPackageName=PolyCalc
int
2
rn
PolyCalc.RatNum # isParam=true
hashcode
3
rn.numer
int # declaringClassPackageName=PolyCalc
int
2
rn.denom
int # declaringClassPackageName=PolyCalc
int
2
return
int
int
2

DECLARE
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::EXIT96
this
PolyCalc.RatNum # isNonNull=true, isParam=true
hashcode
3
this.numer
int # declaringClassPackageName=PolyCalc
int
2
this.denom
int # declaringClassPackageName=PolyCalc
int
2
rn
PolyCalc.RatNum # isParam=true
hashcode
3
rn.numer
int # declaringClassPackageName=PolyCalc
int
2
rn.denom
int # declaringClassPackageName=PolyCalc
int
2
return
int
int
2

DECLARE
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::EXIT98
this
PolyCalc.RatNum # isNonNull=true, isParam=true
hashcode
3
this.numer
int # declaringClassPackageName=PolyCalc
int
2
this.denom
int # declaringClassPackageName=PolyCalc
int
2
rn
PolyCalc.RatNum # isParam=true
hashcode
3
rn.numer
int # declaringClassPackageName=PolyCalc
int
2
rn.denom
int # declaringClassPackageName=PolyCalc
int
2
return
int
int
2

DECLARE
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::EXIT101
this
PolyCalc.RatNum # isNonNull=true, isParam=true
hashcode
3
this.numer
int # declaringClassPackageName=PolyCalc
int
2
this.denom
int # declaringClassPackageName=PolyCalc
int
2
rn
PolyCalc.RatNum # isParam=true
hashcode
3
rn.numer
int # declaringClassPackageName=PolyCalc
int
2
rn.denom
int # declaringClassPackageName=PolyCalc
int
2
return
int
int
2


DECLARE
PolyCalc.RatNum.approx():::ENTER
this
PolyCalc.RatNum # isNonNull=true, isParam=true
hashcode
2
this.numer
int # declaringClassPackageName=PolyCalc
int
3
this.denom
int # declaringClassPackageName=PolyCalc
int
3

DECLARE
PolyCalc.RatNum.approx():::EXIT117
this
PolyCalc.RatNum # isNonNull=true, isParam=true
hashcode
3
this.numer
int # declaringClassPackageName=PolyCalc
int
2
this.denom
int # declaringClassPackageName=PolyCalc
int
2
return
double
double
2

DECLARE
PolyCalc.RatNum.approx():::EXIT120
this
PolyCalc.RatNum # isNonNull=true, isParam=true
hashcode
3
this.numer
int # declaringClassPackageName=PolyCalc
int
2
this.denom
int # declaringClassPackageName=PolyCalc
int
2
return
double
double
2


DECLARE
PolyCalc.RatNum.unparse():::ENTER
this
PolyCalc.RatNum # isNonNull=true, isParam=true
hashcode
2
this.numer
int # declaringClassPackageName=PolyCalc
int
3
this.denom
int # declaringClassPackageName=PolyCalc
int
3

DECLARE
PolyCalc.RatNum.unparse():::EXIT133
this
PolyCalc.RatNum # isNonNull=true, isParam=true
hashcode
4
this.numer
int # declaringClassPackageName=PolyCalc
int
5
this.denom
int # declaringClassPackageName=PolyCalc
int
5
return
java.lang.String
hashcode
2
return.toString
java.lang.String
java.lang.String
3

DECLARE
PolyCalc.RatNum.unparse():::EXIT135
this
PolyCalc.RatNum # isNonNull=true, isParam=true
hashcode
4
this.numer
int # declaringClassPackageName=PolyCalc
int
5
this.denom
int # declaringClassPackageName=PolyCalc
int
5
return
java.lang.String
hashcode
2
return.toString
java.lang.String
java.lang.String
3

DECLARE
PolyCalc.RatNum.unparse():::EXIT137
this
PolyCalc.RatNum # isNonNull=true, isParam=true
hashcode
4
this.numer
int # declaringClassPackageName=PolyCalc
int
5
this.denom
int # declaringClassPackageName=PolyCalc
int
5
return
java.lang.String
hashcode
2
return.toString
java.lang.String
java.lang.String
3


DECLARE
PolyCalc.RatNum.negate():::ENTER
this
PolyCalc.RatNum # isNonNull=true, isParam=true
hashcode
2
this.numer
int # declaringClassPackageName=PolyCalc
int
3
this.denom
int # declaringClassPackageName=PolyCalc
int
3

DECLARE
PolyCalc.RatNum.negate():::EXIT147
this
PolyCalc.RatNum # isNonNull=true, isParam=true
hashcode
4
this.numer
int # declaringClassPackageName=PolyCalc
int
3
this.denom
int # declaringClassPackageName=PolyCalc
int
3
return
PolyCalc.RatNum
hashcode
2
return.numer
int # declaringClassPackageName=PolyCalc
int
3
return.denom
int # declaringClassPackageName=PolyCalc
int
3


DECLARE
PolyCalc.RatNum.add(PolyCalc.RatNum):::ENTER
this
PolyCalc.RatNum # isNonNull=true, isParam=true
hashcode
2
this.numer
int # declaringClassPackageName=PolyCalc
int
3
this.denom
int # declaringClassPackageName=PolyCalc
int
3
arg
PolyCalc.RatNum # isParam=true
hashcode
2
arg.numer
int # declaringClassPackageName=PolyCalc
int
3
arg.denom
int # declaringClassPackageName=PolyCalc
int
3

DECLARE
PolyCalc.RatNum.add(PolyCalc.RatNum):::EXIT156
this
PolyCalc.RatNum # isNonNull=true, isParam=true
hashcode
2
this.numer
int # declaringClassPackageName=PolyCalc
int
3
this.denom
int # declaringClassPackageName=PolyCalc
int
3
arg
PolyCalc.RatNum # isParam=true
hashcode
2
arg.numer
int # declaringClassPackageName=PolyCalc
int
3
arg.denom
int # declaringClassPackageName=PolyCalc
int
3
return
PolyCalc.RatNum
hashcode
4
return.numer
int # declaringClassPackageName=PolyCalc
int
3
return.denom
int # declaringClassPackageName=PolyCalc
int
3


DECLARE
PolyCalc.RatNum.sub(PolyCalc.RatNum):::ENTER
this
PolyCalc.RatNum # isNonNull=true, isParam=true
hashcode
2
this.numer
int # declaringClassPackageName=PolyCalc
int
3
this.denom
int # declaringClassPackageName=PolyCalc
int
3
arg
PolyCalc.RatNum # isParam=true
hashcode
2
arg.numer
int # declaringClassPackageName=PolyCalc
int
3
arg.denom
int # declaringClassPackageName=PolyCalc
int
3

DECLARE
PolyCalc.RatNum.sub(PolyCalc.RatNum):::EXIT166
this
PolyCalc.RatNum # isNonNull=true, isParam=true
hashcode
2
this.numer
int # declaringClassPackageName=PolyCalc
int
3
this.denom
int # declaringClassPackageName=PolyCalc
int
3
arg
PolyCalc.RatNum # isParam=true
hashcode
2
arg.numer
int # declaringClassPackageName=PolyCalc
int
3
arg.denom
int # declaringClassPackageName=PolyCalc
int
3
return
PolyCalc.RatNum
hashcode
4
return.numer
int # declaringClassPackageName=PolyCalc
int
3
return.denom
int # declaringClassPackageName=PolyCalc
int
3


DECLARE
PolyCalc.RatNum.mul(PolyCalc.RatNum):::ENTER
this
PolyCalc.RatNum # isNonNull=true, isParam=true
hashcode
2
this.numer
int # declaringClassPackageName=PolyCalc
int
3
this.denom
int # declaringClassPackageName=PolyCalc
int
3
arg
PolyCalc.RatNum # isParam=true
hashcode
2
arg.numer
int # declaringClassPackageName=PolyCalc
int
3
arg.denom
int # declaringClassPackageName=PolyCalc
int
3

DECLARE
PolyCalc.RatNum.mul(PolyCalc.RatNum):::EXIT175
this
PolyCalc.RatNum # isNonNull=true, isParam=true
hashcode
2
this.numer
int # declaringClassPackageName=PolyCalc
int
3
this.denom
int # declaringClassPackageName=PolyCalc
int
3
arg
PolyCalc.RatNum # isParam=true
hashcode
2
arg.numer
int # declaringClassPackageName=PolyCalc
int
3
arg.denom
int # declaringClassPackageName=PolyCalc
int
3
return
PolyCalc.RatNum
hashcode
4
return.numer
int # declaringClassPackageName=PolyCalc
int
3
return.denom
int # declaringClassPackageName=PolyCalc
int
3


DECLARE
PolyCalc.RatNum.div(PolyCalc.RatNum):::ENTER
this
PolyCalc.RatNum # isNonNull=true, isParam=true
hashcode
2
this.numer
int # declaringClassPackageName=PolyCalc
int
3
this.denom
int # declaringClassPackageName=PolyCalc
int
3
arg
PolyCalc.RatNum # isParam=true
hashcode
2
arg.numer
int # declaringClassPackageName=PolyCalc
int
3
arg.denom
int # declaringClassPackageName=PolyCalc
int
3

DECLARE
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT187
this
PolyCalc.RatNum # isNonNull=true, isParam=true
hashcode
2
this.numer
int # declaringClassPackageName=PolyCalc
int
3
this.denom
int # declaringClassPackageName=PolyCalc
int
3
arg
PolyCalc.RatNum # isParam=true
hashcode
2
arg.numer
int # declaringClassPackageName=PolyCalc
int
3
arg.denom
int # declaringClassPackageName=PolyCalc
int
3
return
PolyCalc.RatNum
hashcode
2
return.numer
int # declaringClassPackageName=PolyCalc
int
3
return.denom
int # declaringClassPackageName=PolyCalc
int
3

DECLARE
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT189
this
PolyCalc.RatNum # isNonNull=true, isParam=true
hashcode
2
this.numer
int # declaringClassPackageName=PolyCalc
int
3
this.denom
int # declaringClassPackageName=PolyCalc
int
3
arg
PolyCalc.RatNum # isParam=true
hashcode
2
arg.numer
int # declaringClassPackageName=PolyCalc
int
3
arg.denom
int # declaringClassPackageName=PolyCalc
int
3
return
PolyCalc.RatNum
hashcode
2
return.numer
int # declaringClassPackageName=PolyCalc
int
3
return.denom
int # declaringClassPackageName=PolyCalc
int
3


DECLARE
PolyCalc.RatNum.gcd(int, int):::ENTER
_a
int # isParam=true
int
2
_b
int # isParam=true
int
2

DECLARE
PolyCalc.RatNum.gcd(int, int):::EXIT203
_a
int # isParam=true
int
2
_b
int # isParam=true
int
2
return
int
int
2

DECLARE
PolyCalc.RatNum.gcd(int, int):::EXIT209
_a
int # isParam=true
int
2
_b
int # isParam=true
int
2
return
int
int
2


DECLARE
PolyCalc.RatNum.hashCode():::ENTER
this
PolyCalc.RatNum # isNonNull=true, isParam=true
hashcode
2
this.numer
int # declaringClassPackageName=PolyCalc
int
3
this.denom
int # declaringClassPackageName=PolyCalc
int
3

DECLARE
PolyCalc.RatNum.hashCode():::EXIT217
this
PolyCalc.RatNum # isNonNull=true, isParam=true
hashcode
3
this.numer
int # declaringClassPackageName=PolyCalc
int
4
this.denom
int # declaringClassPackageName=PolyCalc
int
4
return
int
int
2


DECLARE
PolyCalc.RatNum.equals(java.lang.Object):::ENTER
this
PolyCalc.RatNum # isNonNull=true, isParam=true
hashcode
2
this.numer
int # declaringClassPackageName=PolyCalc
int
3
this.denom
int # declaringClassPackageName=PolyCalc
int
3
obj
java.lang.Object # isParam=true
hashcode
2
obj.getClass().getName()
java.lang.Class
java.lang.String
1

DECLARE
PolyCalc.RatNum.equals(java.lang.Object):::EXIT230
this
PolyCalc.RatNum # isNonNull=true, isParam=true
hashcode
2
this.numer
int # declaringClassPackageName=PolyCalc
int
4
this.denom
int # declaringClassPackageName=PolyCalc
int
4
obj
java.lang.Object # isParam=true
hashcode
2
obj.getClass().getName()
java.lang.Class
java.lang.String
1
return
boolean
boolean
3

DECLARE
PolyCalc.RatNum.equals(java.lang.Object):::EXIT232
this
PolyCalc.RatNum # isNonNull=true, isParam=true
hashcode
2
this.numer
int # declaringClassPackageName=PolyCalc
int
4
this.denom
int # declaringClassPackageName=PolyCalc
int
4
obj
java.lang.Object # isParam=true
hashcode
2
obj.getClass().getName()
java.lang.Class
java.lang.String
1
return
boolean
boolean
3

DECLARE
PolyCalc.RatNum.equals(java.lang.Object):::EXIT235
this
PolyCalc.RatNum # isNonNull=true, isParam=true
hashcode
2
this.numer
int # declaringClassPackageName=PolyCalc
int
4
this.denom
int # declaringClassPackageName=PolyCalc
int
4
obj
java.lang.Object # isParam=true
hashcode
2
obj.getClass().getName()
java.lang.Class
java.lang.String
1
return
boolean
boolean
3


DECLARE
PolyCalc.RatNum.debugPrint():::ENTER
this
PolyCalc.RatNum # isNonNull=true, isParam=true
hashcode
2
this.numer
int # declaringClassPackageName=PolyCalc
int
3
this.denom
int # declaringClassPackageName=PolyCalc
int
3

DECLARE
PolyCalc.RatNum.debugPrint():::EXIT241
this
PolyCalc.RatNum # isNonNull=true, isParam=true
hashcode
4
this.numer
int # declaringClassPackageName=PolyCalc
int
5
this.denom
int # declaringClassPackageName=PolyCalc
int
5
return
java.lang.String
hashcode
2
return.toString
java.lang.String
java.lang.String
3


DECLARE
PolyCalc.RatNum.parse(java.lang.String):::ENTER
ratStr
java.lang.String # isParam=true
hashcode
2
ratStr.toString
java.lang.String
java.lang.String
3

DECLARE
PolyCalc.RatNum.parse(java.lang.String):::EXIT264
ratStr
java.lang.String # isParam=true
hashcode
2
ratStr.toString
java.lang.String
java.lang.String
3
return
PolyCalc.RatNum
hashcode
4
return.numer
int # declaringClassPackageName=PolyCalc
int
5
return.denom
int # declaringClassPackageName=PolyCalc
int
5

DECLARE
PolyCalc.RatNum.parse(java.lang.String):::EXIT267
ratStr
java.lang.String # isParam=true
hashcode
2
ratStr.toString
java.lang.String
java.lang.String
3
return
PolyCalc.RatNum
hashcode
4
return.numer
int # declaringClassPackageName=PolyCalc
int
5
return.denom
int # declaringClassPackageName=PolyCalc
int
5

DECLARE
PolyCalc.RatNum.parse(java.lang.String):::EXIT273
ratStr
java.lang.String # isParam=true
hashcode
2
ratStr.toString
java.lang.String
java.lang.String
3
return
PolyCalc.RatNum
hashcode
4
return.numer
int # declaringClassPackageName=PolyCalc
int
5
return.denom
int # declaringClassPackageName=PolyCalc
int
5


DECLARE
PolyCalc.RatNum.equals_dcomp_instrumented(java.lang.Object):::ENTER
this
PolyCalc.RatNum # isNonNull=true, isParam=true
hashcode
3
this.numer
int # declaringClassPackageName=PolyCalc
int
4
this.denom
int # declaringClassPackageName=PolyCalc
int
4
obj
java.lang.Object # isParam=true
hashcode
2
obj.getClass().getName()
java.lang.Class
java.lang.String
1

DECLARE
PolyCalc.RatNum.equals_dcomp_instrumented(java.lang.Object):::EXIT1
this
PolyCalc.RatNum # isNonNull=true, isParam=true
hashcode
4
this.numer
int # declaringClassPackageName=PolyCalc
int
5
this.denom
int # declaringClassPackageName=PolyCalc
int
5
obj
java.lang.Object # isParam=true
hashcode
2
obj.getClass().getName()
java.lang.Class
java.lang.String
1
return
boolean
boolean
3

DECLARE
PolyCalc.RatPoly:::CLASS

DECLARE
PolyCalc.RatPoly:::OBJECT
this
PolyCalc.RatPoly # isNonNull=true, isParam=true
hashcode
2
this.terms
PolyCalc.RatTermVec # declaringClassPackageName=PolyCalc
hashcode
3
this.terms.wrapped
java.util.ArrayList # declaringClassPackageName=PolyCalc
hashcode
4
this.terms.wrapped[..]
java.util.ArrayList
hashcode[]
5[6]
this.terms.wrapped[..].getClass().getName()
java.lang.Class[]
java.lang.String[]
1[7]


DECLARE
PolyCalc.RatPoly.RatPoly():::ENTER

DECLARE
PolyCalc.RatPoly.RatPoly():::EXIT57
this
PolyCalc.RatPoly # isNonNull=true, isParam=true
hashcode
2
this.terms
PolyCalc.RatTermVec # declaringClassPackageName=PolyCalc
hashcode
3
this.terms.wrapped
java.util.ArrayList # declaringClassPackageName=PolyCalc
hashcode
4
this.terms.wrapped[..]
java.util.ArrayList
hashcode[]
5[6]
this.terms.wrapped[..].getClass().getName()
java.lang.Class[]
java.lang.String[]
1[7]


DECLARE
PolyCalc.RatPoly.RatPoly(int, int):::ENTER
c
int # isParam=true
int
2
e
int # isParam=true
int
3

DECLARE
PolyCalc.RatPoly.RatPoly(int, int):::EXIT68
this
PolyCalc.RatPoly # isNonNull=true, isParam=true
hashcode
4
this.terms
PolyCalc.RatTermVec # declaringClassPackageName=PolyCalc
hashcode
5
this.terms.wrapped
java.util.ArrayList # declaringClassPackageName=PolyCalc
hashcode
6
this.terms.wrapped[..]
java.util.ArrayList
hashcode[]
7[8]
this.terms.wrapped[..].getClass().getName()
java.lang.Class[]
java.lang.String[]
1[9]
c
int # isParam=true
int
2
e
int # isParam=true
int
3


DECLARE
PolyCalc.RatPoly.RatPoly(PolyCalc.RatTermVec):::ENTER
rt
PolyCalc.RatTermVec # isParam=true
hashcode
2
rt.wrapped
java.util.ArrayList # declaringClassPackageName=PolyCalc
hashcode
3
rt.wrapped[..]
java.util.ArrayList
hashcode[]
4[5]
rt.wrapped[..].getClass().getName()
java.lang.Class[]
java.lang.String[]
1[6]

DECLARE
PolyCalc.RatPoly.RatPoly(PolyCalc.RatTermVec):::EXIT77
this
PolyCalc.RatPoly # isNonNull=true, isParam=true
hashcode
5
this.terms
PolyCalc.RatTermVec # declaringClassPackageName=PolyCalc
hashcode
2
this.terms.wrapped
java.util.ArrayList # declaringClassPackageName=PolyCalc
hashcode
3
this.terms.wrapped[..]
java.util.ArrayList
hashcode[]
4[6]
this.terms.wrapped[..].getClass().getName()
java.lang.Class[]
java.lang.String[]
1[7]
rt
PolyCalc.RatTermVec # isParam=true
hashcode
2
rt.wrapped
java.util.ArrayList # declaringClassPackageName=PolyCalc
hashcode
3
rt.wrapped[..]
java.util.ArrayList
hashcode[]
4[8]
rt.wrapped[..].getClass().getName()
java.lang.Class[]
java.lang.String[]
1[9]


DECLARE
PolyCalc.RatPoly.isNaN():::ENTER
this
PolyCalc.RatPoly # isNonNull=true, isParam=true
hashcode
2
this.terms
PolyCalc.RatTermVec # declaringClassPackageName=PolyCalc
hashcode
3
this.terms.wrapped
java.util.ArrayList # declaringClassPackageName=PolyCalc
hashcode
4
this.terms.wrapped[..]
java.util.ArrayList
hashcode[]
5[6]
this.terms.wrapped[..].getClass().getName()
java.lang.Class[]
java.lang.String[]
1[7]

DECLARE
PolyCalc.RatPoly.isNaN():::EXIT86
this
PolyCalc.RatPoly # isNonNull=true, isParam=true
hashcode
3
this.terms
PolyCalc.RatTermVec # declaringClassPackageName=PolyCalc
hashcode
4
this.terms.wrapped
java.util.ArrayList # declaringClassPackageName=PolyCalc
hashcode
5
this.terms.wrapped[..]
java.util.ArrayList
hashcode[]
6[7]
this.terms.wrapped[..].getClass().getName()
java.lang.Class[]
java.lang.String[]
1[8]
return
boolean
boolean
2

DECLARE
PolyCalc.RatPoly.isNaN():::EXIT90
this
PolyCalc.RatPoly # isNonNull=true, isParam=true
hashcode
3
this.terms
PolyCalc.RatTermVec # declaringClassPackageName=PolyCalc
hashcode
4
this.terms.wrapped
java.util.ArrayList # declaringClassPackageName=PolyCalc
hashcode
5
this.terms.wrapped[..]
java.util.ArrayList
hashcode[]
6[7]
this.terms.wrapped[..].getClass().getName()
java.lang.Class[]
java.lang.String[]
1[8]
return
boolean
boolean
2


DECLARE
PolyCalc.RatPoly.degree():::ENTER
this
PolyCalc.RatPoly # isNonNull=true, isParam=true
hashcode
2
this.terms
PolyCalc.RatTermVec # declaringClassPackageName=PolyCalc
hashcode
3
this.terms.wrapped
java.util.ArrayList # declaringClassPackageName=PolyCalc
hashcode
4
this.terms.wrapped[..]
java.util.ArrayList
hashcode[]
5[6]
this.terms.wrapped[..].getClass().getName()
java.lang.Class[]
java.lang.String[]
1[7]

DECLARE
PolyCalc.RatPoly.degree():::EXIT102
this
PolyCalc.RatPoly # isNonNull=true, isParam=true
hashcode
3
this.terms
PolyCalc.RatTermVec # declaringClassPackageName=PolyCalc
hashcode
4
this.terms.wrapped
java.util.ArrayList # declaringClassPackageName=PolyCalc
hashcode
5
this.terms.wrapped[..]
java.util.ArrayList
hashcode[]
6[7]
this.terms.wrapped[..].getClass().getName()
java.lang.Class[]
java.lang.String[]
1[8]
return
int
int
2

DECLARE
PolyCalc.RatPoly.degree():::EXIT105
this
PolyCalc.RatPoly # isNonNull=true, isParam=true
hashcode
3
this.terms
PolyCalc.RatTermVec # declaringClassPackageName=PolyCalc
hashcode
4
this.terms.wrapped
java.util.ArrayList # declaringClassPackageName=PolyCalc
hashcode
5
this.terms.wrapped[..]
java.util.ArrayList
hashcode[]
6[7]
this.terms.wrapped[..].getClass().getName()
java.lang.Class[]
java.lang.String[]
1[8]
return
int
int
2


DECLARE
PolyCalc.RatPoly.coeff(int):::ENTER
this
PolyCalc.RatPoly # isNonNull=true, isParam=true
hashcode
3
this.terms
PolyCalc.RatTermVec # declaringClassPackageName=PolyCalc
hashcode
4
this.terms.wrapped
java.util.ArrayList # declaringClassPackageName=PolyCalc
hashcode
5
this.terms.wrapped[..]
java.util.ArrayList
hashcode[]
6[7]
this.terms.wrapped[..].getClass().getName()
java.lang.Class[]
java.lang.String[]
1[8]
deg
int # isParam=true
int
2

DECLARE
PolyCalc.RatPoly.coeff(int):::EXIT120
this
PolyCalc.RatPoly # isNonNull=true, isParam=true
hashcode
5
this.terms
PolyCalc.RatTermVec # declaringClassPackageName=PolyCalc
hashcode
6
this.terms.wrapped
java.util.ArrayList # declaringClassPackageName=PolyCalc
hashcode
7
this.terms.wrapped[..]
java.util.ArrayList
hashcode[]
8[9]
this.terms.wrapped[..].getClass().getName()
java.lang.Class[]
java.lang.String[]
1[10]
deg
int # isParam=true
int
2
return
PolyCalc.RatNum
hashcode
3
return.numer
int # declaringClassPackageName=PolyCalc
int
4
return.denom
int # declaringClassPackageName=PolyCalc
int
4

DECLARE
PolyCalc.RatPoly.coeff(int):::EXIT124
this
PolyCalc.RatPoly # isNonNull=true, isParam=true
hashcode
5
this.terms
PolyCalc.RatTermVec # declaringClassPackageName=PolyCalc
hashcode
6
this.terms.wrapped
java.util.ArrayList # declaringClassPackageName=PolyCalc
hashcode
7
this.terms.wrapped[..]
java.util.ArrayList
hashcode[]
8[9]
this.terms.wrapped[..].getClass().getName()
java.lang.Class[]
java.lang.String[]
1[10]
deg
int # isParam=true
int
2
return
PolyCalc.RatNum
hashcode
3
return.numer
int # declaringClassPackageName=PolyCalc
int
4
return.denom
int # declaringClassPackageName=PolyCalc
int
4


DECLARE
PolyCalc.RatPoly.unparse():::ENTER
this
PolyCalc.RatPoly # isNonNull=true, isParam=true
hashcode
2
this.terms
PolyCalc.RatTermVec # declaringClassPackageName=PolyCalc
hashcode
3
this.terms.wrapped
java.util.ArrayList # declaringClassPackageName=PolyCalc
hashcode
4
this.terms.wrapped[..]
java.util.ArrayList
hashcode[]
5[6]
this.terms.wrapped[..].getClass().getName()
java.lang.Class[]
java.lang.String[]
1[7]

DECLARE
PolyCalc.RatPoly.unparse():::EXIT165
this
PolyCalc.RatPoly # isNonNull=true, isParam=true
hashcode
4
this.terms
PolyCalc.RatTermVec # declaringClassPackageName=PolyCalc
hashcode
5
this.terms.wrapped
java.util.ArrayList # declaringClassPackageName=PolyCalc
hashcode
6
this.terms.wrapped[..]
java.util.ArrayList
hashcode[]
7[8]
this.terms.wrapped[..].getClass().getName()
java.lang.Class[]
java.lang.String[]
1[9]
return
java.lang.String
hashcode
2
return.toString
java.lang.String
java.lang.String
3

DECLARE
PolyCalc.RatPoly.unparse():::EXIT196
this
PolyCalc.RatPoly # isNonNull=true, isParam=true
hashcode
4
this.terms
PolyCalc.RatTermVec # declaringClassPackageName=PolyCalc
hashcode
5
this.terms.wrapped
java.util.ArrayList # declaringClassPackageName=PolyCalc
hashcode
6
this.terms.wrapped[..]
java.util.ArrayList
hashcode[]
7[8]
this.terms.wrapped[..].getClass().getName()
java.lang.Class[]
java.lang.String[]
1[9]
return
java.lang.String
hashcode
2
return.toString
java.lang.String
java.lang.String
3


DECLARE
PolyCalc.RatPoly.appendTerm(java.lang.StringBuffer, PolyCalc.RatTerm):::ENTER
sb
java.lang.StringBuffer # isParam=true
hashcode
6
rt
PolyCalc.RatTerm # isParam=true
hashcode
2
rt.coeff
PolyCalc.RatNum # declaringClassPackageName=PolyCalc
hashcode
3
rt.coeff.numer
int # declaringClassPackageName=PolyCalc
int
4
rt.coeff.denom
int # declaringClassPackageName=PolyCalc
int
4
rt.expt
int # declaringClassPackageName=PolyCalc
int
5

DECLARE
PolyCalc.RatPoly.appendTerm(java.lang.StringBuffer, PolyCalc.RatTerm):::EXIT212
sb
java.lang.StringBuffer # isParam=true
hashcode
6
rt
PolyCalc.RatTerm # isParam=true
hashcode
2
rt.coeff
PolyCalc.RatNum # declaringClassPackageName=PolyCalc
hashcode
3
rt.coeff.numer
int # declaringClassPackageName=PolyCalc
int
4
rt.coeff.denom
int # declaringClassPackageName=PolyCalc
int
4
rt.expt
int # declaringClassPackageName=PolyCalc
int
5

DECLARE
PolyCalc.RatPoly.appendTerm(java.lang.StringBuffer, PolyCalc.RatTerm):::EXIT229
sb
java.lang.StringBuffer # isParam=true
hashcode
6
rt
PolyCalc.RatTerm # isParam=true
hashcode
2
rt.coeff
PolyCalc.RatNum # declaringClassPackageName=PolyCalc
hashcode
3
rt.coeff.numer
int # declaringClassPackageName=PolyCalc
int
4
rt.coeff.denom
int # declaringClassPackageName=PolyCalc
int
4
rt.expt
int # declaringClassPackageName=PolyCalc
int
5


DECLARE
PolyCalc.RatPoly.scaleBy(PolyCalc.RatTerm):::ENTER
this
PolyCalc.RatPoly # isNonNull=true, isParam=true
hashcode
6
this.terms
PolyCalc.RatTermVec # declaringClassPackageName=PolyCalc
hashcode
7
this.terms.wrapped
java.util.ArrayList # declaringClassPackageName=PolyCalc
hashcode
8
this.terms.wrapped[..]
java.util.ArrayList
hashcode[]
2[9]
this.terms.wrapped[..].getClass().getName()
java.lang.Class[]
java.lang.String[]
1[10]
scalar
PolyCalc.RatTerm # isParam=true
hashcode
2
scalar.coeff
PolyCalc.RatNum # declaringClassPackageName=PolyCalc
hashcode
3
scalar.coeff.numer
int # declaringClassPackageName=PolyCalc
int
4
scalar.coeff.denom
int # declaringClassPackageName=PolyCalc
int
4
scalar.expt
int # declaringClassPackageName=PolyCalc
int
5

DECLARE
PolyCalc.RatPoly.scaleBy(PolyCalc.RatTerm):::EXIT238
this
PolyCalc.RatPoly # isNonNull=true, isParam=true
hashcode
10
this.terms
PolyCalc.RatTermVec # declaringClassPackageName=PolyCalc
hashcode
11
this.terms.wrapped
java.util.ArrayList # declaringClassPackageName=PolyCalc
hashcode
4
this.terms.wrapped[..]
java.util.ArrayList
hashcode[]
6[12]
this.terms.wrapped[..].getClass().getName()
java.lang.Class[]
java.lang.String[]
1[13]
scalar
PolyCalc.RatTerm # isParam=true
hashcode
6
scalar.coeff
PolyCalc.RatNum # declaringClassPackageName=PolyCalc
hashcode
7
scalar.coeff.numer
int # declaringClassPackageName=PolyCalc
int
8
scalar.coeff.denom
int # declaringClassPackageName=PolyCalc
int
8
scalar.expt
int # declaringClassPackageName=PolyCalc
int
9
return
PolyCalc.RatPoly
hashcode
2
return.terms
PolyCalc.RatTermVec # declaringClassPackageName=PolyCalc
hashcode
3
return.terms.wrapped
java.util.ArrayList # declaringClassPackageName=PolyCalc
hashcode
4
return.terms.wrapped[..]
java.util.ArrayList
hashcode[]
5[14]
return.terms.wrapped[..].getClass().getName()
java.lang.Class[]
java.lang.String[]
1[15]


DECLARE
PolyCalc.RatPoly.scaleCoeff(PolyCalc.RatTermVec, PolyCalc.RatNum):::ENTER
vec
PolyCalc.RatTermVec # isParam=true
hashcode
4
vec.wrapped
java.util.ArrayList # declaringClassPackageName=PolyCalc
hashcode
5
vec.wrapped[..]
java.util.ArrayList
hashcode[]
6[7]
vec.wrapped[..].getClass().getName()
java.lang.Class[]
java.lang.String[]
1[8]
scalar
PolyCalc.RatNum # isParam=true
hashcode
2
scalar.numer
int # declaringClassPackageName=PolyCalc
int
3
scalar.denom
int # declaringClassPackageName=PolyCalc
int
3

DECLARE
PolyCalc.RatPoly.scaleCoeff(PolyCalc.RatTermVec, PolyCalc.RatNum):::EXIT255
vec
PolyCalc.RatTermVec # isParam=true
hashcode
4
vec.wrapped
java.util.ArrayList # declaringClassPackageName=PolyCalc
hashcode
5
vec.wrapped[..]
java.util.ArrayList
hashcode[]
6[7]
vec.wrapped[..].getClass().getName()
java.lang.Class[]
java.lang.String[]
1[8]
scalar
PolyCalc.RatNum # isParam=true
hashcode
2
scalar.numer
int # declaringClassPackageName=PolyCalc
int
3
scalar.denom
int # declaringClassPackageName=PolyCalc
int
3


DECLARE
PolyCalc.RatPoly.incremExpt(PolyCalc.RatTermVec, int):::ENTER
vec
PolyCalc.RatTermVec # isParam=true
hashcode
3
vec.wrapped
java.util.ArrayList # declaringClassPackageName=PolyCalc
hashcode
4
vec.wrapped[..]
java.util.ArrayList
hashcode[]
5[6]
vec.wrapped[..].getClass().getName()
java.lang.Class[]
java.lang.String[]
1[7]
degree
int # isParam=true
int
2

DECLARE
PolyCalc.RatPoly.incremExpt(PolyCalc.RatTermVec, int):::EXIT271
vec
PolyCalc.RatTermVec # isParam=true
hashcode
3
vec.wrapped
java.util.ArrayList # declaringClassPackageName=PolyCalc
hashcode
4
vec.wrapped[..]
java.util.ArrayList
hashcode[]
5[6]
vec.wrapped[..].getClass().getName()
java.lang.Class[]
java.lang.String[]
1[7]
degree
int # isParam=true
int
2


DECLARE
PolyCalc.RatPoly.sortedAdd(PolyCalc.RatTermVec, PolyCalc.RatTerm):::ENTER
vec
PolyCalc.RatTermVec # isParam=true
hashcode
6
vec.wrapped
java.util.ArrayList # declaringClassPackageName=PolyCalc
hashcode
7
vec.wrapped[..]
java.util.ArrayList
hashcode[]
2[8]
vec.wrapped[..].getClass().getName()
java.lang.Class[]
java.lang.String[]
1[9]
newTerm
PolyCalc.RatTerm # isParam=true
hashcode
2
newTerm.coeff
PolyCalc.RatNum # declaringClassPackageName=PolyCalc
hashcode
3
newTerm.coeff.numer
int # declaringClassPackageName=PolyCalc
int
4
newTerm.coeff.denom
int # declaringClassPackageName=PolyCalc
int
4
newTerm.expt
int # declaringClassPackageName=PolyCalc
int
5

DECLARE
PolyCalc.RatPoly.sortedAdd(PolyCalc.RatTermVec, PolyCalc.RatTerm):::EXIT308
vec
PolyCalc.RatTermVec # isParam=true
hashcode
6
vec.wrapped
java.util.ArrayList # declaringClassPackageName=PolyCalc
hashcode
7
vec.wrapped[..]
java.util.ArrayList
hashcode[]
2[8]
vec.wrapped[..].getClass().getName()
java.lang.Class[]
java.lang.String[]
1[9]
newTerm
PolyCalc.RatTerm # isParam=true
hashcode
2
newTerm.coeff
PolyCalc.RatNum # declaringClassPackageName=PolyCalc
hashcode
3
newTerm.coeff.numer
int # declaringClassPackageName=PolyCalc
int
4
newTerm.coeff.denom
int # declaringClassPackageName=PolyCalc
int
4
newTerm.expt
int # declaringClassPackageName=PolyCalc
int
5

DECLARE
PolyCalc.RatPoly.sortedAdd(PolyCalc.RatTermVec, PolyCalc.RatTerm):::EXIT312
vec
PolyCalc.RatTermVec # isParam=true
hashcode
6
vec.wrapped
java.util.ArrayList # declaringClassPackageName=PolyCalc
hashcode
7
vec.wrapped[..]
java.util.ArrayList
hashcode[]
2[8]
vec.wrapped[..].getClass().getName()
java.lang.Class[]
java.lang.String[]
1[9]
newTerm
PolyCalc.RatTerm # isParam=true
hashcode
2
newTerm.coeff
PolyCalc.RatNum # declaringClassPackageName=PolyCalc
hashcode
3
newTerm.coeff.numer
int # declaringClassPackageName=PolyCalc
int
4
newTerm.coeff.denom
int # declaringClassPackageName=PolyCalc
int
4
newTerm.expt
int # declaringClassPackageName=PolyCalc
int
5

DECLARE
PolyCalc.RatPoly.sortedAdd(PolyCalc.RatTermVec, PolyCalc.RatTerm):::EXIT319
vec
PolyCalc.RatTermVec # isParam=true
hashcode
6
vec.wrapped
java.util.ArrayList # declaringClassPackageName=PolyCalc
hashcode
7
vec.wrapped[..]
java.util.ArrayList
hashcode[]
2[8]
vec.wrapped[..].getClass().getName()
java.lang.Class[]
java.lang.String[]
1[9]
newTerm
PolyCalc.RatTerm # isParam=true
hashcode
2
newTerm.coeff
PolyCalc.RatNum # declaringClassPackageName=PolyCalc
hashcode
3
newTerm.coeff.numer
int # declaringClassPackageName=PolyCalc
int
4
newTerm.coeff.denom
int # declaringClassPackageName=PolyCalc
int
4
newTerm.expt
int # declaringClassPackageName=PolyCalc
int
5

DECLARE
PolyCalc.RatPoly.sortedAdd(PolyCalc.RatTermVec, PolyCalc.RatTerm):::EXIT328
vec
PolyCalc.RatTermVec # isParam=true
hashcode
6
vec.wrapped
java.util.ArrayList # declaringClassPackageName=PolyCalc
hashcode
7
vec.wrapped[..]
java.util.ArrayList
hashcode[]
2[8]
vec.wrapped[..].getClass().getName()
java.lang.Class[]
java.lang.String[]
1[9]
newTerm
PolyCalc.RatTerm # isParam=true
hashcode
2
newTerm.coeff
PolyCalc.RatNum # declaringClassPackageName=PolyCalc
hashcode
3
newTerm.coeff.numer
int # declaringClassPackageName=PolyCalc
int
4
newTerm.coeff.denom
int # declaringClassPackageName=PolyCalc
int
4
newTerm.expt
int # declaringClassPackageName=PolyCalc
int
5


DECLARE
PolyCalc.RatPoly.assertSorted(PolyCalc.RatTermVec):::ENTER
v
PolyCalc.RatTermVec # isParam=true
hashcode
2
v.wrapped
java.util.ArrayList # declaringClassPackageName=PolyCalc
hashcode
3
v.wrapped[..]
java.util.ArrayList
hashcode[]
4[5]
v.wrapped[..].getClass().getName()
java.lang.Class[]
java.lang.String[]
1[6]

DECLARE
PolyCalc.RatPoly.assertSorted(PolyCalc.RatTermVec):::EXIT342
v
PolyCalc.RatTermVec # isParam=true
hashcode
2
v.wrapped
java.util.ArrayList # declaringClassPackageName=PolyCalc
hashcode
3
v.wrapped[..]
java.util.ArrayList
hashcode[]
4[5]
v.wrapped[..].getClass().getName()
java.lang.Class[]
java.lang.String[]
1[6]


DECLARE
PolyCalc.RatPoly.add(PolyCalc.RatPoly):::ENTER
this
PolyCalc.RatPoly # isNonNull=true, isParam=true
hashcode
2
this.terms
PolyCalc.RatTermVec # declaringClassPackageName=PolyCalc
hashcode
3
this.terms.wrapped
java.util.ArrayList # declaringClassPackageName=PolyCalc
hashcode
4
this.terms.wrapped[..]
java.util.ArrayList
hashcode[]
5[6]
this.terms.wrapped[..].getClass().getName()
java.lang.Class[]
java.lang.String[]
1[7]
p
PolyCalc.RatPoly # isParam=true
hashcode
2
p.terms
PolyCalc.RatTermVec # declaringClassPackageName=PolyCalc
hashcode
3
p.terms.wrapped
java.util.ArrayList # declaringClassPackageName=PolyCalc
hashcode
4
p.terms.wrapped[..]
java.util.ArrayList
hashcode[]
5[8]
p.terms.wrapped[..].getClass().getName()
java.lang.Class[]
java.lang.String[]
1[9]

DECLARE
PolyCalc.RatPoly.add(PolyCalc.RatPoly):::EXIT350
this
PolyCalc.RatPoly # isNonNull=true, isParam=true
hashcode
2
this.terms
PolyCalc.RatTermVec # declaringClassPackageName=PolyCalc
hashcode
3
this.terms.wrapped
java.util.ArrayList # declaringClassPackageName=PolyCalc
hashcode
4
this.terms.wrapped[..]
java.util.ArrayList
hashcode[]
5[6]
this.terms.wrapped[..].getClass().getName()
java.lang.Class[]
java.lang.String[]
1[7]
p
PolyCalc.RatPoly # isParam=true
hashcode
2
p.terms
PolyCalc.RatTermVec # declaringClassPackageName=PolyCalc
hashcode
3
p.terms.wrapped
java.util.ArrayList # declaringClassPackageName=PolyCalc
hashcode
4
p.terms.wrapped[..]
java.util.ArrayList
hashcode[]
5[8]
p.terms.wrapped[..].getClass().getName()
java.lang.Class[]
java.lang.String[]
1[9]
return
PolyCalc.RatPoly
hashcode
2
return.terms
PolyCalc.RatTermVec # declaringClassPackageName=PolyCalc
hashcode
3
return.terms.wrapped
java.util.ArrayList # declaringClassPackageName=PolyCalc
hashcode
4
return.terms.wrapped[..]
java.util.ArrayList
hashcode[]
5[10]
return.terms.wrapped[..].getClass().getName()
java.lang.Class[]
java.lang.String[]
1[11]

DECLARE
PolyCalc.RatPoly.add(PolyCalc.RatPoly):::EXIT354
this
PolyCalc.RatPoly # isNonNull=true, isParam=true
hashcode
2
this.terms
PolyCalc.RatTermVec # declaringClassPackageName=PolyCalc
hashcode
3
this.terms.wrapped
java.util.ArrayList # declaringClassPackageName=PolyCalc
hashcode
4
this.terms.wrapped[..]
java.util.ArrayList
hashcode[]
5[6]
this.terms.wrapped[..].getClass().getName()
java.lang.Class[]
java.lang.String[]
1[7]
p
PolyCalc.RatPoly # isParam=true
hashcode
2
p.terms
PolyCalc.RatTermVec # declaringClassPackageName=PolyCalc
hashcode
3
p.terms.wrapped
java.util.ArrayList # declaringClassPackageName=PolyCalc
hashcode
4
p.terms.wrapped[..]
java.util.ArrayList
hashcode[]
5[8]
p.terms.wrapped[..].getClass().getName()
java.lang.Class[]
java.lang.String[]
1[9]
return
PolyCalc.RatPoly
hashcode
2
return.terms
PolyCalc.RatTermVec # declaringClassPackageName=PolyCalc
hashcode
3
return.terms.wrapped
java.util.ArrayList # declaringClassPackageName=PolyCalc
hashcode
4
return.terms.wrapped[..]
java.util.ArrayList
hashcode[]
5[10]
return.terms.wrapped[..].getClass().getName()
java.lang.Class[]
java.lang.String[]
1[11]

DECLARE
PolyCalc.RatPoly.add(PolyCalc.RatPoly):::EXIT363
this
PolyCalc.RatPoly # isNonNull=true, isParam=true
hashcode
2
this.terms
PolyCalc.RatTermVec # declaringClassPackageName=PolyCalc
hashcode
3
this.terms.wrapped
java.util.ArrayList # declaringClassPackageName=PolyCalc
hashcode
4
this.terms.wrapped[..]
java.util.ArrayList
hashcode[]
5[6]
this.terms.wrapped[..].getClass().getName()
java.lang.Class[]
java.lang.String[]
1[7]
p
PolyCalc.RatPoly # isParam=true
hashcode
2
p.terms
PolyCalc.RatTermVec # declaringClassPackageName=PolyCalc
hashcode
3
p.terms.wrapped
java.util.ArrayList # declaringClassPackageName=PolyCalc
hashcode
4
p.terms.wrapped[..]
java.util.ArrayList
hashcode[]
5[8]
p.terms.wrapped[..].getClass().getName()
java.lang.Class[]
java.lang.String[]
1[9]
return
PolyCalc.RatPoly
hashcode
2
return.terms
PolyCalc.RatTermVec # declaringClassPackageName=PolyCalc
hashcode
3
return.terms.wrapped
java.util.ArrayList # declaringClassPackageName=PolyCalc
hashcode
4
return.terms.wrapped[..]
java.util.ArrayList
hashcode[]
5[10]
return.terms.wrapped[..].getClass().getName()
java.lang.Class[]
java.lang.String[]
1[11]


DECLARE
PolyCalc.RatPoly.sub(PolyCalc.RatPoly):::ENTER
this
PolyCalc.RatPoly # isNonNull=true, isParam=true
hashcode
2
this.terms
PolyCalc.RatTermVec # declaringClassPackageName=PolyCalc
hashcode
3
this.terms.wrapped
java.util.ArrayList # declaringClassPackageName=PolyCalc
hashcode
4
this.terms.wrapped[..]
java.util.ArrayList
hashcode[]
5[6]
this.terms.wrapped[..].getClass().getName()
java.lang.Class[]
java.lang.String[]
1[7]
p
PolyCalc.RatPoly # isParam=true
hashcode
2
p.terms
PolyCalc.RatTermVec # declaringClassPackageName=PolyCalc
hashcode
3
p.terms.wrapped
java.util.ArrayList # declaringClassPackageName=PolyCalc
hashcode
4
p.terms.wrapped[..]
java.util.ArrayList
hashcode[]
5[8]
p.terms.wrapped[..].getClass().getName()
java.lang.Class[]
java.lang.String[]
1[9]

DECLARE
PolyCalc.RatPoly.sub(PolyCalc.RatPoly):::EXIT372
this
PolyCalc.RatPoly # isNonNull=true, isParam=true
hashcode
2
this.terms
PolyCalc.RatTermVec # declaringClassPackageName=PolyCalc
hashcode
3
this.terms.wrapped
java.util.ArrayList # declaringClassPackageName=PolyCalc
hashcode
4
this.terms.wrapped[..]
java.util.ArrayList
hashcode[]
5[6]
this.terms.wrapped[..].getClass().getName()
java.lang.Class[]
java.lang.String[]
1[7]
p
PolyCalc.RatPoly # isParam=true
hashcode
2
p.terms
PolyCalc.RatTermVec # declaringClassPackageName=PolyCalc
hashcode
3
p.terms.wrapped
java.util.ArrayList # declaringClassPackageName=PolyCalc
hashcode
4
p.terms.wrapped[..]
java.util.ArrayList
hashcode[]
5[8]
p.terms.wrapped[..].getClass().getName()
java.lang.Class[]
java.lang.String[]
1[9]
return
PolyCalc.RatPoly
hashcode
2
return.terms
PolyCalc.RatTermVec # declaringClassPackageName=PolyCalc
hashcode
3
return.terms.wrapped
java.util.ArrayList # declaringClassPackageName=PolyCalc
hashcode
4
return.terms.wrapped[..]
java.util.ArrayList
hashcode[]
5[10]
return.terms.wrapped[..].getClass().getName()
java.lang.Class[]
java.lang.String[]
1[11]

DECLARE
PolyCalc.RatPoly.sub(PolyCalc.RatPoly):::EXIT376
this
PolyCalc.RatPoly # isNonNull=true, isParam=true
hashcode
2
this.terms
PolyCalc.RatTermVec # declaringClassPackageName=PolyCalc
hashcode
3
this.terms.wrapped
java.util.ArrayList # declaringClassPackageName=PolyCalc
hashcode
4
this.terms.wrapped[..]
java.util.ArrayList
hashcode[]
5[6]
this.terms.wrapped[..].getClass().getName()
java.lang.Class[]
java.lang.String[]
1[7]
p
PolyCalc.RatPoly # isParam=true
hashcode
2
p.terms
PolyCalc.RatTermVec # declaringClassPackageName=PolyCalc
hashcode
3
p.terms.wrapped
java.util.ArrayList # declaringClassPackageName=PolyCalc
hashcode
4
p.terms.wrapped[..]
java.util.ArrayList
hashcode[]
5[8]
p.terms.wrapped[..].getClass().getName()
java.lang.Class[]
java.lang.String[]
1[9]
return
PolyCalc.RatPoly
hashcode
2
return.terms
PolyCalc.RatTermVec # declaringClassPackageName=PolyCalc
hashcode
3
return.terms.wrapped
java.util.ArrayList # declaringClassPackageName=PolyCalc
hashcode
4
return.terms.wrapped[..]
java.util.ArrayList
hashcode[]
5[10]
return.terms.wrapped[..].getClass().getName()
java.lang.Class[]
java.lang.String[]
1[11]

DECLARE
PolyCalc.RatPoly.sub(PolyCalc.RatPoly):::EXIT379
this
PolyCalc.RatPoly # isNonNull=true, isParam=true
hashcode
2
this.terms
PolyCalc.RatTermVec # declaringClassPackageName=PolyCalc
hashcode
3
this.terms.wrapped
java.util.ArrayList # declaringClassPackageName=PolyCalc
hashcode
4
this.terms.wrapped[..]
java.util.ArrayList
hashcode[]
5[6]
this.terms.wrapped[..].getClass().getName()
java.lang.Class[]
java.lang.String[]
1[7]
p
PolyCalc.RatPoly # isParam=true
hashcode
2
p.terms
PolyCalc.RatTermVec # declaringClassPackageName=PolyCalc
hashcode
3
p.terms.wrapped
java.util.ArrayList # declaringClassPackageName=PolyCalc
hashcode
4
p.terms.wrapped[..]
java.util.ArrayList
hashcode[]
5[8]
p.terms.wrapped[..].getClass().getName()
java.lang.Class[]
java.lang.String[]
1[9]
return
PolyCalc.RatPoly
hashcode
2
return.terms
PolyCalc.RatTermVec # declaringClassPackageName=PolyCalc
hashcode
3
return.terms.wrapped
java.util.ArrayList # declaringClassPackageName=PolyCalc
hashcode
4
return.terms.wrapped[..]
java.util.ArrayList
hashcode[]
5[10]
return.terms.wrapped[..].getClass().getName()
java.lang.Class[]
java.lang.String[]
1[11]


DECLARE
PolyCalc.RatPoly.mul(PolyCalc.RatPoly):::ENTER
this
PolyCalc.RatPoly # isNonNull=true, isParam=true
hashcode
2
this.terms
PolyCalc.RatTermVec # declaringClassPackageName=PolyCalc
hashcode
3
this.terms.wrapped
java.util.ArrayList # declaringClassPackageName=PolyCalc
hashcode
4
this.terms.wrapped[..]
java.util.ArrayList
hashcode[]
5[6]
this.terms.wrapped[..].getClass().getName()
java.lang.Class[]
java.lang.String[]
1[7]
p
PolyCalc.RatPoly # isParam=true
hashcode
2
p.terms
PolyCalc.RatTermVec # declaringClassPackageName=PolyCalc
hashcode
3
p.terms.wrapped
java.util.ArrayList # declaringClassPackageName=PolyCalc
hashcode
4
p.terms.wrapped[..]
java.util.ArrayList
hashcode[]
5[8]
p.terms.wrapped[..].getClass().getName()
java.lang.Class[]
java.lang.String[]
1[9]

DECLARE
PolyCalc.RatPoly.mul(PolyCalc.RatPoly):::EXIT390
this
PolyCalc.RatPoly # isNonNull=true, isParam=true
hashcode
2
this.terms
PolyCalc.RatTermVec # declaringClassPackageName=PolyCalc
hashcode
3
this.terms.wrapped
java.util.ArrayList # declaringClassPackageName=PolyCalc
hashcode
4
this.terms.wrapped[..]
java.util.ArrayList
hashcode[]
5[6]
this.terms.wrapped[..].getClass().getName()
java.lang.Class[]
java.lang.String[]
1[7]
p
PolyCalc.RatPoly # isParam=true
hashcode
2
p.terms
PolyCalc.RatTermVec # declaringClassPackageName=PolyCalc
hashcode
3
p.terms.wrapped
java.util.ArrayList # declaringClassPackageName=PolyCalc
hashcode
4
p.terms.wrapped[..]
java.util.ArrayList
hashcode[]
5[8]
p.terms.wrapped[..].getClass().getName()
java.lang.Class[]
java.lang.String[]
1[9]
return
PolyCalc.RatPoly
hashcode
2
return.terms
PolyCalc.RatTermVec # declaringClassPackageName=PolyCalc
hashcode
3
return.terms.wrapped
java.util.ArrayList # declaringClassPackageName=PolyCalc
hashcode
4
return.terms.wrapped[..]
java.util.ArrayList
hashcode[]
5[10]
return.terms.wrapped[..].getClass().getName()
java.lang.Class[]
java.lang.String[]
1[11]

DECLARE
PolyCalc.RatPoly.mul(PolyCalc.RatPoly):::EXIT394
this
PolyCalc.RatPoly # isNonNull=true, isParam=true
hashcode
2
this.terms
PolyCalc.RatTermVec # declaringClassPackageName=PolyCalc
hashcode
3
this.terms.wrapped
java.util.ArrayList # declaringClassPackageName=PolyCalc
hashcode
4
this.terms.wrapped[..]
java.util.ArrayList
hashcode[]
5[6]
this.terms.wrapped[..].getClass().getName()
java.lang.Class[]
java.lang.String[]
1[7]
p
PolyCalc.RatPoly # isParam=true
hashcode
2
p.terms
PolyCalc.RatTermVec # declaringClassPackageName=PolyCalc
hashcode
3
p.terms.wrapped
java.util.ArrayList # declaringClassPackageName=PolyCalc
hashcode
4
p.terms.wrapped[..]
java.util.ArrayList
hashcode[]
5[8]
p.terms.wrapped[..].getClass().getName()
java.lang.Class[]
java.lang.String[]
1[9]
return
PolyCalc.RatPoly
hashcode
2
return.terms
PolyCalc.RatTermVec # declaringClassPackageName=PolyCalc
hashcode
3
return.terms.wrapped
java.util.ArrayList # declaringClassPackageName=PolyCalc
hashcode
4
return.terms.wrapped[..]
java.util.ArrayList
hashcode[]
5[10]
return.terms.wrapped[..].getClass().getName()
java.lang.Class[]
java.lang.String[]
1[11]

DECLARE
PolyCalc.RatPoly.mul(PolyCalc.RatPoly):::EXIT404
this
PolyCalc.RatPoly # isNonNull=true, isParam=true
hashcode
2
this.terms
PolyCalc.RatTermVec # declaringClassPackageName=PolyCalc
hashcode
3
this.terms.wrapped
java.util.ArrayList # declaringClassPackageName=PolyCalc
hashcode
4
this.terms.wrapped[..]
java.util.ArrayList
hashcode[]
5[6]
this.terms.wrapped[..].getClass().getName()
java.lang.Class[]
java.lang.String[]
1[7]
p
PolyCalc.RatPoly # isParam=true
hashcode
2
p.terms
PolyCalc.RatTermVec # declaringClassPackageName=PolyCalc
hashcode
3
p.terms.wrapped
java.util.ArrayList # declaringClassPackageName=PolyCalc
hashcode
4
p.terms.wrapped[..]
java.util.ArrayList
hashcode[]
5[8]
p.terms.wrapped[..].getClass().getName()
java.lang.Class[]
java.lang.String[]
1[9]
return
PolyCalc.RatPoly
hashcode
2
return.terms
PolyCalc.RatTermVec # declaringClassPackageName=PolyCalc
hashcode
3
return.terms.wrapped
java.util.ArrayList # declaringClassPackageName=PolyCalc
hashcode
4
return.terms.wrapped[..]
java.util.ArrayList
hashcode[]
5[10]
return.terms.wrapped[..].getClass().getName()
java.lang.Class[]
java.lang.String[]
1[11]


DECLARE
PolyCalc.RatPoly.div(PolyCalc.RatPoly):::ENTER
this
PolyCalc.RatPoly # isNonNull=true, isParam=true
hashcode
2
this.terms
PolyCalc.RatTermVec # declaringClassPackageName=PolyCalc
hashcode
3
this.terms.wrapped
java.util.ArrayList # declaringClassPackageName=PolyCalc
hashcode
4
this.terms.wrapped[..]
java.util.ArrayList
hashcode[]
5[6]
this.terms.wrapped[..].getClass().getName()
java.lang.Class[]
java.lang.String[]
1[7]
p
PolyCalc.RatPoly # isParam=true
hashcode
2
p.terms
PolyCalc.RatTermVec # declaringClassPackageName=PolyCalc
hashcode
3
p.terms.wrapped
java.util.ArrayList # declaringClassPackageName=PolyCalc
hashcode
4
p.terms.wrapped[..]
java.util.ArrayList
hashcode[]
5[8]
p.terms.wrapped[..].getClass().getName()
java.lang.Class[]
java.lang.String[]
1[9]

DECLARE
PolyCalc.RatPoly.div(PolyCalc.RatPoly):::EXIT435
this
PolyCalc.RatPoly # isNonNull=true, isParam=true
hashcode
2
this.terms
PolyCalc.RatTermVec # declaringClassPackageName=PolyCalc
hashcode
3
this.terms.wrapped
java.util.ArrayList # declaringClassPackageName=PolyCalc
hashcode
4
this.terms.wrapped[..]
java.util.ArrayList
hashcode[]
5[10]
this.terms.wrapped[..].getClass().getName()
java.lang.Class[]
java.lang.String[]
1[11]
p
PolyCalc.RatPoly # isParam=true
hashcode
2
p.terms
PolyCalc.RatTermVec # declaringClassPackageName=PolyCalc
hashcode
3
p.terms.wrapped
java.util.ArrayList # declaringClassPackageName=PolyCalc
hashcode
4
p.terms.wrapped[..]
java.util.ArrayList
hashcode[]
5[12]
p.terms.wrapped[..].getClass().getName()
java.lang.Class[]
java.lang.String[]
1[13]
return
PolyCalc.RatPoly
hashcode
6
return.terms
PolyCalc.RatTermVec # declaringClassPackageName=PolyCalc
hashcode
7
return.terms.wrapped
java.util.ArrayList # declaringClassPackageName=PolyCalc
hashcode
8
return.terms.wrapped[..]
java.util.ArrayList
hashcode[]
9[14]
return.terms.wrapped[..].getClass().getName()
java.lang.Class[]
java.lang.String[]
1[15]

DECLARE
PolyCalc.RatPoly.div(PolyCalc.RatPoly):::EXIT438
this
PolyCalc.RatPoly # isNonNull=true, isParam=true
hashcode
2
this.terms
PolyCalc.RatTermVec # declaringClassPackageName=PolyCalc
hashcode
3
this.terms.wrapped
java.util.ArrayList # declaringClassPackageName=PolyCalc
hashcode
4
this.terms.wrapped[..]
java.util.ArrayList
hashcode[]
5[10]
this.terms.wrapped[..].getClass().getName()
java.lang.Class[]
java.lang.String[]
1[11]
p
PolyCalc.RatPoly # isParam=true
hashcode
2
p.terms
PolyCalc.RatTermVec # declaringClassPackageName=PolyCalc
hashcode
3
p.terms.wrapped
java.util.ArrayList # declaringClassPackageName=PolyCalc
hashcode
4
p.terms.wrapped[..]
java.util.ArrayList
hashcode[]
5[12]
p.terms.wrapped[..].getClass().getName()
java.lang.Class[]
java.lang.String[]
1[13]
return
PolyCalc.RatPoly
hashcode
6
return.terms
PolyCalc.RatTermVec # declaringClassPackageName=PolyCalc
hashcode
7
return.terms.wrapped
java.util.ArrayList # declaringClassPackageName=PolyCalc
hashcode
8
return.terms.wrapped[..]
java.util.ArrayList
hashcode[]
9[14]
return.terms.wrapped[..].getClass().getName()
java.lang.Class[]
java.lang.String[]
1[15]


DECLARE
PolyCalc.RatPoly.divAndRem(PolyCalc.RatPoly):::ENTER
this
PolyCalc.RatPoly # isNonNull=true, isParam=true
hashcode
6
this.terms
PolyCalc.RatTermVec # declaringClassPackageName=PolyCalc
hashcode
7
this.terms.wrapped
java.util.ArrayList # declaringClassPackageName=PolyCalc
hashcode
8
this.terms.wrapped[..]
java.util.ArrayList
hashcode[]
9[10]
this.terms.wrapped[..].getClass().getName()
java.lang.Class[]
java.lang.String[]
1[11]
p
PolyCalc.RatPoly # isParam=true
hashcode
2
p.terms
PolyCalc.RatTermVec # declaringClassPackageName=PolyCalc
hashcode
3
p.terms.wrapped
java.util.ArrayList # declaringClassPackageName=PolyCalc
hashcode
4
p.terms.wrapped[..]
java.util.ArrayList
hashcode[]
5[12]
p.terms.wrapped[..].getClass().getName()
java.lang.Class[]
java.lang.String[]
1[13]

DECLARE
PolyCalc.RatPoly.divAndRem(PolyCalc.RatPoly):::EXIT503
this
PolyCalc.RatPoly # isNonNull=true, isParam=true
hashcode
10
this.terms
PolyCalc.RatTermVec # declaringClassPackageName=PolyCalc
hashcode
11
this.terms.wrapped
java.util.ArrayList # declaringClassPackageName=PolyCalc
hashcode
9
this.terms.wrapped[..]
java.util.ArrayList
hashcode[]
12[13]
this.terms.wrapped[..].getClass().getName()
java.lang.Class[]
java.lang.String[]
1[14]
p
PolyCalc.RatPoly # isParam=true
hashcode
2
p.terms
PolyCalc.RatTermVec # declaringClassPackageName=PolyCalc
hashcode
3
p.terms.wrapped
java.util.ArrayList # declaringClassPackageName=PolyCalc
hashcode
4
p.terms.wrapped[..]
java.util.ArrayList
hashcode[]
5[15]
p.terms.wrapped[..].getClass().getName()
java.lang.Class[]
java.lang.String[]
1[16]
return
PolyCalc.RatPoly[]
hashcode
6
return.getClass().getName()
java.lang.Class
java.lang.String
1
return[..]
PolyCalc.RatPoly[]
hashcode[]
7[17]
return[..].terms
PolyCalc.RatTermVec[] # declaringClassPackageName=PolyCalc
hashcode[]
8[18]
return[..].terms.wrapped
java.util.ArrayList[] # declaringClassPackageName=PolyCalc
hashcode[]
9[19]


DECLARE
PolyCalc.RatPoly.containsNaN(PolyCalc.RatTermVec):::ENTER
vec
PolyCalc.RatTermVec # isParam=true
hashcode
2
vec.wrapped
java.util.ArrayList # declaringClassPackageName=PolyCalc
hashcode
3
vec.wrapped[..]
java.util.ArrayList
hashcode[]
4[5]
vec.wrapped[..].getClass().getName()
java.lang.Class[]
java.lang.String[]
1[6]

DECLARE
PolyCalc.RatPoly.containsNaN(PolyCalc.RatTermVec):::EXIT510
vec
PolyCalc.RatTermVec # isParam=true
hashcode
3
vec.wrapped
java.util.ArrayList # declaringClassPackageName=PolyCalc
hashcode
4
vec.wrapped[..]
java.util.ArrayList
hashcode[]
5[6]
vec.wrapped[..].getClass().getName()
java.lang.Class[]
java.lang.String[]
1[7]
return
boolean
boolean
2

DECLARE
PolyCalc.RatPoly.containsNaN(PolyCalc.RatTermVec):::EXIT513
vec
PolyCalc.RatTermVec # isParam=true
hashcode
3
vec.wrapped
java.util.ArrayList # declaringClassPackageName=PolyCalc
hashcode
4
vec.wrapped[..]
java.util.ArrayList
hashcode[]
5[6]
vec.wrapped[..].getClass().getName()
java.lang.Class[]
java.lang.String[]
1[7]
return
boolean
boolean
2


DECLARE
PolyCalc.RatPoly.findTermIndex(PolyCalc.RatTermVec, int):::ENTER
ts
PolyCalc.RatTermVec # isParam=true
hashcode
3
ts.wrapped
java.util.ArrayList # declaringClassPackageName=PolyCalc
hashcode
4
ts.wrapped[..]
java.util.ArrayList
hashcode[]
5[6]
ts.wrapped[..].getClass().getName()
java.lang.Class[]
java.lang.String[]
1[7]
expt
int # isParam=true
int
2

DECLARE
PolyCalc.RatPoly.findTermIndex(PolyCalc.RatTermVec, int):::EXIT521
ts
PolyCalc.RatTermVec # isParam=true
hashcode
4
ts.wrapped
java.util.ArrayList # declaringClassPackageName=PolyCalc
hashcode
5
ts.wrapped[..]
java.util.ArrayList
hashcode[]
6[7]
ts.wrapped[..].getClass().getName()
java.lang.Class[]
java.lang.String[]
1[8]
expt
int # isParam=true
int
2
return
int
int
3

DECLARE
PolyCalc.RatPoly.findTermIndex(PolyCalc.RatTermVec, int):::EXIT523
ts
PolyCalc.RatTermVec # isParam=true
hashcode
4
ts.wrapped
java.util.ArrayList # declaringClassPackageName=PolyCalc
hashcode
5
ts.wrapped[..]
java.util.ArrayList
hashcode[]
6[7]
ts.wrapped[..].getClass().getName()
java.lang.Class[]
java.lang.String[]
1[8]
expt
int # isParam=true
int
2
return
int
int
3

DECLARE
PolyCalc.RatPoly.findTermIndex(PolyCalc.RatTermVec, int):::EXIT526
ts
PolyCalc.RatTermVec # isParam=true
hashcode
4
ts.wrapped
java.util.ArrayList # declaringClassPackageName=PolyCalc
hashcode
5
ts.wrapped[..]
java.util.ArrayList
hashcode[]
6[7]
ts.wrapped[..].getClass().getName()
java.lang.Class[]
java.lang.String[]
1[8]
expt
int # isParam=true
int
2
return
int
int
3


DECLARE
PolyCalc.RatPoly.hintedGet(PolyCalc.RatTermVec, int, int):::ENTER
ts
PolyCalc.RatTermVec # isParam=true
hashcode
4
ts.wrapped
java.util.ArrayList # declaringClassPackageName=PolyCalc
hashcode
5
ts.wrapped[..]
java.util.ArrayList
hashcode[]
6[7]
ts.wrapped[..].getClass().getName()
java.lang.Class[]
java.lang.String[]
1[8]
i
int # isParam=true
int
3
expt
int # isParam=true
int
2

DECLARE
PolyCalc.RatPoly.hintedGet(PolyCalc.RatTermVec, int, int):::EXIT534
ts
PolyCalc.RatTermVec # isParam=true
hashcode
7
ts.wrapped
java.util.ArrayList # declaringClassPackageName=PolyCalc
hashcode
8
ts.wrapped[..]
java.util.ArrayList
hashcode[]
4[9]
ts.wrapped[..].getClass().getName()
java.lang.Class[]
java.lang.String[]
1[10]
i
int # isParam=true
int
3
expt
int # isParam=true
int
2
return
PolyCalc.RatTerm
hashcode
4
return.coeff
PolyCalc.RatNum # declaringClassPackageName=PolyCalc
hashcode
5
return.coeff.numer
int # declaringClassPackageName=PolyCalc
int
6
return.coeff.denom
int # declaringClassPackageName=PolyCalc
int
6
return.expt
int # declaringClassPackageName=PolyCalc
int
2

DECLARE
PolyCalc.RatPoly.hintedGet(PolyCalc.RatTermVec, int, int):::EXIT537
ts
PolyCalc.RatTermVec # isParam=true
hashcode
7
ts.wrapped
java.util.ArrayList # declaringClassPackageName=PolyCalc
hashcode
8
ts.wrapped[..]
java.util.ArrayList
hashcode[]
4[9]
ts.wrapped[..].getClass().getName()
java.lang.Class[]
java.lang.String[]
1[10]
i
int # isParam=true
int
3
expt
int # isParam=true
int
2
return
PolyCalc.RatTerm
hashcode
4
return.coeff
PolyCalc.RatNum # declaringClassPackageName=PolyCalc
hashcode
5
return.coeff.numer
int # declaringClassPackageName=PolyCalc
int
6
return.coeff.denom
int # declaringClassPackageName=PolyCalc
int
6
return.expt
int # declaringClassPackageName=PolyCalc
int
2


DECLARE
PolyCalc.RatPoly.replaceExpt(PolyCalc.RatTerm, PolyCalc.RatTermVec, int):::ENTER
term
PolyCalc.RatTerm # isParam=true
hashcode
3
term.coeff
PolyCalc.RatNum # declaringClassPackageName=PolyCalc
hashcode
4
term.coeff.numer
int # declaringClassPackageName=PolyCalc
int
5
term.coeff.denom
int # declaringClassPackageName=PolyCalc
int
5
term.expt
int # declaringClassPackageName=PolyCalc
int
6
ts
PolyCalc.RatTermVec # isParam=true
hashcode
7
ts.wrapped
java.util.ArrayList # declaringClassPackageName=PolyCalc
hashcode
8
ts.wrapped[..]
java.util.ArrayList
hashcode[]
3[9]
ts.wrapped[..].getClass().getName()
java.lang.Class[]
java.lang.String[]
1[10]
index
int # isParam=true
int
2

DECLARE
PolyCalc.RatPoly.replaceExpt(PolyCalc.RatTerm, PolyCalc.RatTermVec, int):::EXIT558
term
PolyCalc.RatTerm # isParam=true
hashcode
3
term.coeff
PolyCalc.RatNum # declaringClassPackageName=PolyCalc
hashcode
4
term.coeff.numer
int # declaringClassPackageName=PolyCalc
int
5
term.coeff.denom
int # declaringClassPackageName=PolyCalc
int
5
term.expt
int # declaringClassPackageName=PolyCalc
int
6
ts
PolyCalc.RatTermVec # isParam=true
hashcode
7
ts.wrapped
java.util.ArrayList # declaringClassPackageName=PolyCalc
hashcode
8
ts.wrapped[..]
java.util.ArrayList
hashcode[]
3[9]
ts.wrapped[..].getClass().getName()
java.lang.Class[]
java.lang.String[]
1[10]
index
int # isParam=true
int
2


DECLARE
PolyCalc.RatPoly.negate():::ENTER
this
PolyCalc.RatPoly # isNonNull=true, isParam=true
hashcode
2
this.terms
PolyCalc.RatTermVec # declaringClassPackageName=PolyCalc
hashcode
3
this.terms.wrapped
java.util.ArrayList # declaringClassPackageName=PolyCalc
hashcode
4
this.terms.wrapped[..]
java.util.ArrayList
hashcode[]
5[6]
this.terms.wrapped[..].getClass().getName()
java.lang.Class[]
java.lang.String[]
1[7]

DECLARE
PolyCalc.RatPoly.negate():::EXIT567
this
PolyCalc.RatPoly # isNonNull=true, isParam=true
hashcode
6
this.terms
PolyCalc.RatTermVec # declaringClassPackageName=PolyCalc
hashcode
7
this.terms.wrapped
java.util.ArrayList # declaringClassPackageName=PolyCalc
hashcode
4
this.terms.wrapped[..]
java.util.ArrayList
hashcode[]
8[9]
this.terms.wrapped[..].getClass().getName()
java.lang.Class[]
java.lang.String[]
1[10]
return
PolyCalc.RatPoly
hashcode
2
return.terms
PolyCalc.RatTermVec # declaringClassPackageName=PolyCalc
hashcode
3
return.terms.wrapped
java.util.ArrayList # declaringClassPackageName=PolyCalc
hashcode
4
return.terms.wrapped[..]
java.util.ArrayList
hashcode[]
5[11]
return.terms.wrapped[..].getClass().getName()
java.lang.Class[]
java.lang.String[]
1[12]


DECLARE
PolyCalc.RatPoly.eval(double):::ENTER
this
PolyCalc.RatPoly # isNonNull=true, isParam=true
hashcode
3
this.terms
PolyCalc.RatTermVec # declaringClassPackageName=PolyCalc
hashcode
4
this.terms.wrapped
java.util.ArrayList # declaringClassPackageName=PolyCalc
hashcode
5
this.terms.wrapped[..]
java.util.ArrayList
hashcode[]
6[7]
this.terms.wrapped[..].getClass().getName()
java.lang.Class[]
java.lang.String[]
1[8]
d
double # isParam=true
double
2

DECLARE
PolyCalc.RatPoly.eval(double):::EXIT581
this
PolyCalc.RatPoly # isNonNull=true, isParam=true
hashcode
4
this.terms
PolyCalc.RatTermVec # declaringClassPackageName=PolyCalc
hashcode
5
this.terms.wrapped
java.util.ArrayList # declaringClassPackageName=PolyCalc
hashcode
6
this.terms.wrapped[..]
java.util.ArrayList
hashcode[]
7[8]
this.terms.wrapped[..].getClass().getName()
java.lang.Class[]
java.lang.String[]
1[9]
d
double # isParam=true
double
2
return
double
double
3


DECLARE
PolyCalc.RatPoly.parse(java.lang.String):::ENTER
polyStr
java.lang.String # isParam=true
hashcode
2
polyStr.toString
java.lang.String
java.lang.String
3

DECLARE
PolyCalc.RatPoly.parse(java.lang.String):::EXIT673
polyStr
java.lang.String # isParam=true
hashcode
2
polyStr.toString
java.lang.String
java.lang.String
3
return
PolyCalc.RatPoly
hashcode
4
return.terms
PolyCalc.RatTermVec # declaringClassPackageName=PolyCalc
hashcode
5
return.terms.wrapped
java.util.ArrayList # declaringClassPackageName=PolyCalc
hashcode
6
return.terms.wrapped[..]
java.util.ArrayList
hashcode[]
7[8]
return.terms.wrapped[..].getClass().getName()
java.lang.Class[]
java.lang.String[]
1[9]


DECLARE
PolyCalc.RatPoly.checkRep():::ENTER
this
PolyCalc.RatPoly # isNonNull=true, isParam=true
hashcode
2
this.terms
PolyCalc.RatTermVec # declaringClassPackageName=PolyCalc
hashcode
3
this.terms.wrapped
java.util.ArrayList # declaringClassPackageName=PolyCalc
hashcode
4
this.terms.wrapped[..]
java.util.ArrayList
hashcode[]
5[6]
this.terms.wrapped[..].getClass().getName()
java.lang.Class[]
java.lang.String[]
1[7]

DECLARE
PolyCalc.RatPoly.checkRep():::EXIT689
this
PolyCalc.RatPoly # isNonNull=true, isParam=true
hashcode
2
this.terms
PolyCalc.RatTermVec # declaringClassPackageName=PolyCalc
hashcode
3
this.terms.wrapped
java.util.ArrayList # declaringClassPackageName=PolyCalc
hashcode
4
this.terms.wrapped[..]
java.util.ArrayList
hashcode[]
5[6]
this.terms.wrapped[..].getClass().getName()
java.lang.Class[]
java.lang.String[]
1[7]


DECLARE
PolyCalc.RatPoly.equals(java.lang.Object):::ENTER
this
PolyCalc.RatPoly # isNonNull=true, isParam=true
hashcode
3
this.terms
PolyCalc.RatTermVec # declaringClassPackageName=PolyCalc
hashcode
4
this.terms.wrapped
java.util.ArrayList # declaringClassPackageName=PolyCalc
hashcode
5
this.terms.wrapped[..]
java.util.ArrayList
hashcode[]
6[7]
this.terms.wrapped[..].getClass().getName()
java.lang.Class[]
java.lang.String[]
1[8]
obj
java.lang.Object # isParam=true
hashcode
2
obj.getClass().getName()
java.lang.Class
java.lang.String
1

DECLARE
PolyCalc.RatPoly.equals(java.lang.Object):::EXIT1
this
PolyCalc.RatPoly # isNonNull=true, isParam=true
hashcode
4
this.terms
PolyCalc.RatTermVec # declaringClassPackageName=PolyCalc
hashcode
5
this.terms.wrapped
java.util.ArrayList # declaringClassPackageName=PolyCalc
hashcode
6
this.terms.wrapped[..]
java.util.ArrayList
hashcode[]
7[8]
this.terms.wrapped[..].getClass().getName()
java.lang.Class[]
java.lang.String[]
1[9]
obj
java.lang.Object # isParam=true
hashcode
2
obj.getClass().getName()
java.lang.Class
java.lang.String
1
return
boolean
boolean
3


DECLARE
PolyCalc.RatPoly.equals_dcomp_instrumented(java.lang.Object):::ENTER
this
PolyCalc.RatPoly # isNonNull=true, isParam=true
hashcode
3
this.terms
PolyCalc.RatTermVec # declaringClassPackageName=PolyCalc
hashcode
4
this.terms.wrapped
java.util.ArrayList # declaringClassPackageName=PolyCalc
hashcode
5
this.terms.wrapped[..]
java.util.ArrayList
hashcode[]
6[7]
this.terms.wrapped[..].getClass().getName()
java.lang.Class[]
java.lang.String[]
1[8]
obj
java.lang.Object # isParam=true
hashcode
2
obj.getClass().getName()
java.lang.Class
java.lang.String
1

DECLARE
PolyCalc.RatPoly.equals_dcomp_instrumented(java.lang.Object):::EXIT1
this
PolyCalc.RatPoly # isNonNull=true, isParam=true
hashcode
4
this.terms
PolyCalc.RatTermVec # declaringClassPackageName=PolyCalc
hashcode
5
this.terms.wrapped
java.util.ArrayList # declaringClassPackageName=PolyCalc
hashcode
6
this.terms.wrapped[..]
java.util.ArrayList
hashcode[]
7[8]
this.terms.wrapped[..].getClass().getName()
java.lang.Class[]
java.lang.String[]
1[9]
obj
java.lang.Object # isParam=true
hashcode
2
obj.getClass().getName()
java.lang.Class
java.lang.String
1
return
boolean
boolean
3

DECLARE
PolyCalc.RatTermVec:::CLASS

DECLARE
PolyCalc.RatTermVec:::OBJECT
this
PolyCalc.RatTermVec # isNonNull=true, isParam=true
hashcode
2
this.wrapped
java.util.ArrayList # declaringClassPackageName=PolyCalc
hashcode
3
this.wrapped[..]
java.util.ArrayList
hashcode[]
4[5]
this.wrapped[..].getClass().getName()
java.lang.Class[]
java.lang.String[]
1[6]


DECLARE
PolyCalc.RatTermVec.RatTermVec():::ENTER

DECLARE
PolyCalc.RatTermVec.RatTermVec():::EXIT27
this
PolyCalc.RatTermVec # isNonNull=true, isParam=true
hashcode
2
this.wrapped
java.util.ArrayList # declaringClassPackageName=PolyCalc
hashcode
3
this.wrapped[..]
java.util.ArrayList
hashcode[]
4[5]
this.wrapped[..].getClass().getName()
java.lang.Class[]
java.lang.String[]
1[6]


DECLARE
PolyCalc.RatTermVec.size():::ENTER
this
PolyCalc.RatTermVec # isNonNull=true, isParam=true
hashcode
2
this.wrapped
java.util.ArrayList # declaringClassPackageName=PolyCalc
hashcode
3
this.wrapped[..]
java.util.ArrayList
hashcode[]
4[5]
this.wrapped[..].getClass().getName()
java.lang.Class[]
java.lang.String[]
1[6]

DECLARE
PolyCalc.RatTermVec.size():::EXIT30
this
PolyCalc.RatTermVec # isNonNull=true, isParam=true
hashcode
3
this.wrapped
java.util.ArrayList # declaringClassPackageName=PolyCalc
hashcode
4
this.wrapped[..]
java.util.ArrayList
hashcode[]
5[6]
this.wrapped[..].getClass().getName()
java.lang.Class[]
java.lang.String[]
1[7]
return
int
int
2


DECLARE
PolyCalc.RatTermVec.get(int):::ENTER
this
PolyCalc.RatTermVec # isNonNull=true, isParam=true
hashcode
3
this.wrapped
java.util.ArrayList # declaringClassPackageName=PolyCalc
hashcode
4
this.wrapped[..]
java.util.ArrayList
hashcode[]
5[6]
this.wrapped[..].getClass().getName()
java.lang.Class[]
java.lang.String[]
1[7]
index
int # isParam=true
int
2

DECLARE
PolyCalc.RatTermVec.get(int):::EXIT39
this
PolyCalc.RatTermVec # isNonNull=true, isParam=true
hashcode
7
this.wrapped
java.util.ArrayList # declaringClassPackageName=PolyCalc
hashcode
8
this.wrapped[..]
java.util.ArrayList
hashcode[]
3[9]
this.wrapped[..].getClass().getName()
java.lang.Class[]
java.lang.String[]
1[10]
index
int # isParam=true
int
2
return
PolyCalc.RatTerm
hashcode
3
return.coeff
PolyCalc.RatNum # declaringClassPackageName=PolyCalc
hashcode
4
return.coeff.numer
int # declaringClassPackageName=PolyCalc
int
5
return.coeff.denom
int # declaringClassPackageName=PolyCalc
int
5
return.expt
int # declaringClassPackageName=PolyCalc
int
6


DECLARE
PolyCalc.RatTermVec.addElement(PolyCalc.RatTerm):::ENTER
this
PolyCalc.RatTermVec # isNonNull=true, isParam=true
hashcode
6
this.wrapped
java.util.ArrayList # declaringClassPackageName=PolyCalc
hashcode
7
this.wrapped[..]
java.util.ArrayList
hashcode[]
2[8]
this.wrapped[..].getClass().getName()
java.lang.Class[]
java.lang.String[]
1[9]
t
PolyCalc.RatTerm # isParam=true
hashcode
2
t.coeff
PolyCalc.RatNum # declaringClassPackageName=PolyCalc
hashcode
3
t.coeff.numer
int # declaringClassPackageName=PolyCalc
int
4
t.coeff.denom
int # declaringClassPackageName=PolyCalc
int
4
t.expt
int # declaringClassPackageName=PolyCalc
int
5

DECLARE
PolyCalc.RatTermVec.addElement(PolyCalc.RatTerm):::EXIT50
this
PolyCalc.RatTermVec # isNonNull=true, isParam=true
hashcode
6
this.wrapped
java.util.ArrayList # declaringClassPackageName=PolyCalc
hashcode
7
this.wrapped[..]
java.util.ArrayList
hashcode[]
2[8]
this.wrapped[..].getClass().getName()
java.lang.Class[]
java.lang.String[]
1[9]
t
PolyCalc.RatTerm # isParam=true
hashcode
2
t.coeff
PolyCalc.RatNum # declaringClassPackageName=PolyCalc
hashcode
3
t.coeff.numer
int # declaringClassPackageName=PolyCalc
int
4
t.coeff.denom
int # declaringClassPackageName=PolyCalc
int
4
t.expt
int # declaringClassPackageName=PolyCalc
int
5


DECLARE
PolyCalc.RatTermVec.insert(PolyCalc.RatTerm, int):::ENTER
this
PolyCalc.RatTermVec # isNonNull=true, isParam=true
hashcode
7
this.wrapped
java.util.ArrayList # declaringClassPackageName=PolyCalc
hashcode
8
this.wrapped[..]
java.util.ArrayList
hashcode[]
3[9]
this.wrapped[..].getClass().getName()
java.lang.Class[]
java.lang.String[]
1[10]
t
PolyCalc.RatTerm # isParam=true
hashcode
3
t.coeff
PolyCalc.RatNum # declaringClassPackageName=PolyCalc
hashcode
4
t.coeff.numer
int # declaringClassPackageName=PolyCalc
int
5
t.coeff.denom
int # declaringClassPackageName=PolyCalc
int
5
t.expt
int # declaringClassPackageName=PolyCalc
int
6
index
int # isParam=true
int
2

DECLARE
PolyCalc.RatTermVec.insert(PolyCalc.RatTerm, int):::EXIT64
this
PolyCalc.RatTermVec # isNonNull=true, isParam=true
hashcode
7
this.wrapped
java.util.ArrayList # declaringClassPackageName=PolyCalc
hashcode
8
this.wrapped[..]
java.util.ArrayList
hashcode[]
3[9]
this.wrapped[..].getClass().getName()
java.lang.Class[]
java.lang.String[]
1[10]
t
PolyCalc.RatTerm # isParam=true
hashcode
3
t.coeff
PolyCalc.RatNum # declaringClassPackageName=PolyCalc
hashcode
4
t.coeff.numer
int # declaringClassPackageName=PolyCalc
int
5
t.coeff.denom
int # declaringClassPackageName=PolyCalc
int
5
t.expt
int # declaringClassPackageName=PolyCalc
int
6
index
int # isParam=true
int
2


DECLARE
PolyCalc.RatTermVec.remove(int):::ENTER
this
PolyCalc.RatTermVec # isNonNull=true, isParam=true
hashcode
3
this.wrapped
java.util.ArrayList # declaringClassPackageName=PolyCalc
hashcode
4
this.wrapped[..]
java.util.ArrayList
hashcode[]
5[6]
this.wrapped[..].getClass().getName()
java.lang.Class[]
java.lang.String[]
1[7]
index
int # isParam=true
int
2

DECLARE
PolyCalc.RatTermVec.remove(int):::EXIT78
this
PolyCalc.RatTermVec # isNonNull=true, isParam=true
hashcode
3
this.wrapped
java.util.ArrayList # declaringClassPackageName=PolyCalc
hashcode
4
this.wrapped[..]
java.util.ArrayList
hashcode[]
5[6]
this.wrapped[..].getClass().getName()
java.lang.Class[]
java.lang.String[]
1[7]
index
int # isParam=true
int
2


DECLARE
PolyCalc.RatTermVec.set(PolyCalc.RatTerm, int):::ENTER
this
PolyCalc.RatTermVec # isNonNull=true, isParam=true
hashcode
7
this.wrapped
java.util.ArrayList # declaringClassPackageName=PolyCalc
hashcode
8
this.wrapped[..]
java.util.ArrayList
hashcode[]
3[9]
this.wrapped[..].getClass().getName()
java.lang.Class[]
java.lang.String[]
1[10]
t
PolyCalc.RatTerm # isParam=true
hashcode
3
t.coeff
PolyCalc.RatNum # declaringClassPackageName=PolyCalc
hashcode
4
t.coeff.numer
int # declaringClassPackageName=PolyCalc
int
5
t.coeff.denom
int # declaringClassPackageName=PolyCalc
int
5
t.expt
int # declaringClassPackageName=PolyCalc
int
6
index
int # isParam=true
int
2

DECLARE
PolyCalc.RatTermVec.set(PolyCalc.RatTerm, int):::EXIT89
this
PolyCalc.RatTermVec # isNonNull=true, isParam=true
hashcode
7
this.wrapped
java.util.ArrayList # declaringClassPackageName=PolyCalc
hashcode
8
this.wrapped[..]
java.util.ArrayList
hashcode[]
3[9]
this.wrapped[..].getClass().getName()
java.lang.Class[]
java.lang.String[]
1[10]
t
PolyCalc.RatTerm # isParam=true
hashcode
3
t.coeff
PolyCalc.RatNum # declaringClassPackageName=PolyCalc
hashcode
4
t.coeff.numer
int # declaringClassPackageName=PolyCalc
int
5
t.coeff.denom
int # declaringClassPackageName=PolyCalc
int
5
t.expt
int # declaringClassPackageName=PolyCalc
int
6
index
int # isParam=true
int
2


DECLARE
PolyCalc.RatTermVec.copy():::ENTER
this
PolyCalc.RatTermVec # isNonNull=true, isParam=true
hashcode
2
this.wrapped
java.util.ArrayList # declaringClassPackageName=PolyCalc
hashcode
3
this.wrapped[..]
java.util.ArrayList
hashcode[]
4[5]
this.wrapped[..].getClass().getName()
java.lang.Class[]
java.lang.String[]
1[6]

DECLARE
PolyCalc.RatTermVec.copy():::EXIT100
this
PolyCalc.RatTermVec # isNonNull=true, isParam=true
hashcode
5
this.wrapped
java.util.ArrayList # declaringClassPackageName=PolyCalc
hashcode
3
this.wrapped[..]
java.util.ArrayList
hashcode[]
4[6]
this.wrapped[..].getClass().getName()
java.lang.Class[]
java.lang.String[]
1[7]
return
PolyCalc.RatTermVec
hashcode
2
return.wrapped
java.util.ArrayList # declaringClassPackageName=PolyCalc
hashcode
3
return.wrapped[..]
java.util.ArrayList
hashcode[]
4[8]
return.wrapped[..].getClass().getName()
java.lang.Class[]
java.lang.String[]
1[9]


DECLARE
PolyCalc.RatTermVec.printDebug():::ENTER
this
PolyCalc.RatTermVec # isNonNull=true, isParam=true
hashcode
2
this.wrapped
java.util.ArrayList # declaringClassPackageName=PolyCalc
hashcode
3
this.wrapped[..]
java.util.ArrayList
hashcode[]
4[5]
this.wrapped[..].getClass().getName()
java.lang.Class[]
java.lang.String[]
1[6]

DECLARE
PolyCalc.RatTermVec.printDebug():::EXIT105
this
PolyCalc.RatTermVec # isNonNull=true, isParam=true
hashcode
4
this.wrapped
java.util.ArrayList # declaringClassPackageName=PolyCalc
hashcode
5
this.wrapped[..]
java.util.ArrayList
hashcode[]
6[7]
this.wrapped[..].getClass().getName()
java.lang.Class[]
java.lang.String[]
1[8]
return
java.lang.String
hashcode
2
return.toString
java.lang.String
java.lang.String
3


DECLARE
PolyCalc.RatTermVec.equals(java.lang.Object):::ENTER
this
PolyCalc.RatTermVec # isNonNull=true, isParam=true
hashcode
3
this.wrapped
java.util.ArrayList # declaringClassPackageName=PolyCalc
hashcode
4
this.wrapped[..]
java.util.ArrayList
hashcode[]
5[6]
this.wrapped[..].getClass().getName()
java.lang.Class[]
java.lang.String[]
1[7]
obj
java.lang.Object # isParam=true
hashcode
2
obj.getClass().getName()
java.lang.Class
java.lang.String
1

DECLARE
PolyCalc.RatTermVec.equals(java.lang.Object):::EXIT1
this
PolyCalc.RatTermVec # isNonNull=true, isParam=true
hashcode
4
this.wrapped
java.util.ArrayList # declaringClassPackageName=PolyCalc
hashcode
5
this.wrapped[..]
java.util.ArrayList
hashcode[]
6[7]
this.wrapped[..].getClass().getName()
java.lang.Class[]
java.lang.String[]
1[8]
obj
java.lang.Object # isParam=true
hashcode
2
obj.getClass().getName()
java.lang.Class
java.lang.String
1
return
boolean
boolean
3


DECLARE
PolyCalc.RatTermVec.equals_dcomp_instrumented(java.lang.Object):::ENTER
this
PolyCalc.RatTermVec # isNonNull=true, isParam=true
hashcode
3
this.wrapped
java.util.ArrayList # declaringClassPackageName=PolyCalc
hashcode
4
this.wrapped[..]
java.util.ArrayList
hashcode[]
5[6]
this.wrapped[..].getClass().getName()
java.lang.Class[]
java.lang.String[]
1[7]
obj
java.lang.Object # isParam=true
hashcode
2
obj.getClass().getName()
java.lang.Class
java.lang.String
1

DECLARE
PolyCalc.RatTermVec.equals_dcomp_instrumented(java.lang.Object):::EXIT1
this
PolyCalc.RatTermVec # isNonNull=true, isParam=true
hashcode
4
this.wrapped
java.util.ArrayList # declaringClassPackageName=PolyCalc
hashcode
5
this.wrapped[..]
java.util.ArrayList
hashcode[]
6[7]
this.wrapped[..].getClass().getName()
java.lang.Class[]
java.lang.String[]
1[8]
obj
java.lang.Object # isParam=true
hashcode
2
obj.getClass().getName()
java.lang.Class
java.lang.String
1
return
boolean
boolean
3

DECLARE
PolyCalc.RatTerm:::CLASS

DECLARE
PolyCalc.RatTerm:::OBJECT
this
PolyCalc.RatTerm # isNonNull=true, isParam=true
hashcode
2
this.coeff
PolyCalc.RatNum # declaringClassPackageName=PolyCalc
hashcode
3
this.coeff.numer
int # declaringClassPackageName=PolyCalc
int
4
this.coeff.denom
int # declaringClassPackageName=PolyCalc
int
4
this.expt
int # declaringClassPackageName=PolyCalc
int
5


DECLARE
PolyCalc.RatTerm.RatTerm(PolyCalc.RatNum, int):::ENTER
c
PolyCalc.RatNum # isParam=true
hashcode
2
c.numer
int # declaringClassPackageName=PolyCalc
int
3
c.denom
int # declaringClassPackageName=PolyCalc
int
3
e
int # isParam=true
int
4

DECLARE
PolyCalc.RatTerm.RatTerm(PolyCalc.RatNum, int):::EXIT33
this
PolyCalc.RatTerm # isNonNull=true, isParam=true
hashcode
5
this.coeff
PolyCalc.RatNum # declaringClassPackageName=PolyCalc
hashcode
2
this.coeff.numer
int # declaringClassPackageName=PolyCalc
int
3
this.coeff.denom
int # declaringClassPackageName=PolyCalc
int
3
this.expt
int # declaringClassPackageName=PolyCalc
int
4
c
PolyCalc.RatNum # isParam=true
hashcode
2
c.numer
int # declaringClassPackageName=PolyCalc
int
3
c.denom
int # declaringClassPackageName=PolyCalc
int
3
e
int # isParam=true
int
4


DECLARE
PolyCalc.RatTerm.equals(java.lang.Object):::ENTER
this
PolyCalc.RatTerm # isNonNull=true, isParam=true
hashcode
3
this.coeff
PolyCalc.RatNum # declaringClassPackageName=PolyCalc
hashcode
4
this.coeff.numer
int # declaringClassPackageName=PolyCalc
int
5
this.coeff.denom
int # declaringClassPackageName=PolyCalc
int
5
this.expt
int # declaringClassPackageName=PolyCalc
int
6
obj
java.lang.Object # isParam=true
hashcode
2
obj.getClass().getName()
java.lang.Class
java.lang.String
1

DECLARE
PolyCalc.RatTerm.equals(java.lang.Object):::EXIT41
this
PolyCalc.RatTerm # isNonNull=true, isParam=true
hashcode
4
this.coeff
PolyCalc.RatNum # declaringClassPackageName=PolyCalc
hashcode
5
this.coeff.numer
int # declaringClassPackageName=PolyCalc
int
6
this.coeff.denom
int # declaringClassPackageName=PolyCalc
int
6
this.expt
int # declaringClassPackageName=PolyCalc
int
7
obj
java.lang.Object # isParam=true
hashcode
2
obj.getClass().getName()
java.lang.Class
java.lang.String
1
return
boolean
boolean
3

DECLARE
PolyCalc.RatTerm.equals(java.lang.Object):::EXIT43
this
PolyCalc.RatTerm # isNonNull=true, isParam=true
hashcode
4
this.coeff
PolyCalc.RatNum # declaringClassPackageName=PolyCalc
hashcode
5
this.coeff.numer
int # declaringClassPackageName=PolyCalc
int
6
this.coeff.denom
int # declaringClassPackageName=PolyCalc
int
6
this.expt
int # declaringClassPackageName=PolyCalc
int
7
obj
java.lang.Object # isParam=true
hashcode
2
obj.getClass().getName()
java.lang.Class
java.lang.String
1
return
boolean
boolean
3


DECLARE
PolyCalc.RatTerm.debugPrint():::ENTER
this
PolyCalc.RatTerm # isNonNull=true, isParam=true
hashcode
2
this.coeff
PolyCalc.RatNum # declaringClassPackageName=PolyCalc
hashcode
3
this.coeff.numer
int # declaringClassPackageName=PolyCalc
int
4
this.coeff.denom
int # declaringClassPackageName=PolyCalc
int
4
this.expt
int # declaringClassPackageName=PolyCalc
int
5

DECLARE
PolyCalc.RatTerm.debugPrint():::EXIT49
this
PolyCalc.RatTerm # isNonNull=true, isParam=true
hashcode
4
this.coeff
PolyCalc.RatNum # declaringClassPackageName=PolyCalc
hashcode
5
this.coeff.numer
int # declaringClassPackageName=PolyCalc
int
6
this.coeff.denom
int # declaringClassPackageName=PolyCalc
int
6
this.expt
int # declaringClassPackageName=PolyCalc
int
7
return
java.lang.String
hashcode
2
return.toString
java.lang.String
java.lang.String
3


DECLARE
PolyCalc.RatTerm.equals_dcomp_instrumented(java.lang.Object):::ENTER
this
PolyCalc.RatTerm # isNonNull=true, isParam=true
hashcode
3
this.coeff
PolyCalc.RatNum # declaringClassPackageName=PolyCalc
hashcode
4
this.coeff.numer
int # declaringClassPackageName=PolyCalc
int
5
this.coeff.denom
int # declaringClassPackageName=PolyCalc
int
5
this.expt
int # declaringClassPackageName=PolyCalc
int
6
obj
java.lang.Object # isParam=true
hashcode
2
obj.getClass().getName()
java.lang.Class
java.lang.String
1

DECLARE
PolyCalc.RatTerm.equals_dcomp_instrumented(java.lang.Object):::EXIT1
this
PolyCalc.RatTerm # isNonNull=true, isParam=true
hashcode
4
this.coeff
PolyCalc.RatNum # declaringClassPackageName=PolyCalc
hashcode
5
this.coeff.numer
int # declaringClassPackageName=PolyCalc
int
6
this.coeff.denom
int # declaringClassPackageName=PolyCalc
int
6
this.expt
int # declaringClassPackageName=PolyCalc
int
7
obj
java.lang.Object # isParam=true
hashcode
2
obj.getClass().getName()
java.lang.Class
java.lang.String
1
return
boolean
boolean
3

