===========================================================================
six170.Hanoi:::OBJECT
    Variables: this this.diskLocation this.diskLocation[] this.height this.noOutput size(this.diskLocation[]) size(this.diskLocation[])-1 this.diskLocation[this.height] this.diskLocation[this.height-1] this.diskLocation[this.height..] this.diskLocation[this.height+1..] this.diskLocation[0..this.height] this.diskLocation[0..this.height-1]
this.height == daikon.Quant.size(this.diskLocation)
this.diskLocation != null
daikon.Quant.subsetOf(this.diskLocation, new long[] { 0, 1, 2 })
("oneOf.java.jpp: SEQUENCE unimplemented" != null)
===========================================================================
six170.Hanoi.Hanoi(int):::ENTER
    Variables: height
===========================================================================
six170.Hanoi.Hanoi(int):::EXIT
    Variables: this this.diskLocation this.diskLocation[] this.height this.noOutput height orig(height) size(this.diskLocation[]) size(this.diskLocation[])-1 this.diskLocation[this.height] this.diskLocation[this.height-1] this.diskLocation[this.height..] this.diskLocation[this.height+1..] this.diskLocation[0..this.height] this.diskLocation[0..this.height-1] this.diskLocation[height] this.diskLocation[height-1] this.diskLocation[height..] this.diskLocation[height+1..] this.diskLocation[0..height] this.diskLocation[0..height-1] this.diskLocation[orig(height)] this.diskLocation[orig(height)-1] this.diskLocation[orig(height)..] this.diskLocation[orig(height)+1..] this.diskLocation[0..orig(height)] this.diskLocation[0..orig(height)-1]
this.height == \old(height)
daikon.Quant.eltsEqual(this.diskLocation, 0)
this.noOutput == false
daikon.Quant.eltsEqual(this.diskLocation, daikon.Quant.getElement_int(this.diskLocation, this.height-1))
===========================================================================
six170.Hanoi.Hanoi(int, boolean):::ENTER
    Variables: height noOutput
noOutput == true
===========================================================================
six170.Hanoi.Hanoi(int, boolean):::EXIT
    Variables: this this.diskLocation this.diskLocation[] this.height this.noOutput height noOutput orig(height) orig(noOutput) size(this.diskLocation[]) size(this.diskLocation[])-1 this.diskLocation[this.height] this.diskLocation[this.height-1] this.diskLocation[this.height..] this.diskLocation[this.height+1..] this.diskLocation[0..this.height] this.diskLocation[0..this.height-1] this.diskLocation[height] this.diskLocation[height-1] this.diskLocation[height..] this.diskLocation[height+1..] this.diskLocation[0..height] this.diskLocation[0..height-1] this.diskLocation[orig(height)] this.diskLocation[orig(height)-1] this.diskLocation[orig(height)..] this.diskLocation[orig(height)+1..] this.diskLocation[0..orig(height)] this.diskLocation[0..orig(height)-1]
this.height == \old(height)
this.noOutput == \old(noOutput)
daikon.Quant.eltsEqual(this.diskLocation, 0)
this.noOutput == true
daikon.Quant.eltsEqual(this.diskLocation, daikon.Quant.getElement_int(this.diskLocation, this.height-1))
===========================================================================
six170.Hanoi.moveDisk(int, int):::ENTER
    Variables: this this.diskLocation this.diskLocation[] this.height this.noOutput fromPeg toPeg size(this.diskLocation[]) size(this.diskLocation[])-1 this.diskLocation[this.height] this.diskLocation[this.height-1] this.diskLocation[this.height..] this.diskLocation[this.height+1..] this.diskLocation[0..this.height] this.diskLocation[0..this.height-1]
this.noOutput == true
fromPeg == 0 || fromPeg == 1 || fromPeg == 2
toPeg == 0 || toPeg == 1 || toPeg == 2
daikon.Quant.memberOf(fromPeg , this.diskLocation )
(fromPeg & toPeg) == 0
fromPeg != toPeg
===========================================================================
six170.Hanoi.moveDisk(int, int):::EXIT
    Variables: this this.diskLocation this.diskLocation[] this.height this.noOutput fromPeg toPeg orig(this) orig(this.diskLocation) orig(this.diskLocation[]) orig(this.height) orig(this.noOutput) orig(fromPeg) orig(toPeg) size(this.diskLocation[]) size(this.diskLocation[])-1 orig(size(this.diskLocation[])) orig(size(this.diskLocation[]))-1 this.diskLocation[this.height] this.diskLocation[this.height-1] this.diskLocation[this.height..] this.diskLocation[this.height+1..] this.diskLocation[0..this.height] this.diskLocation[0..this.height-1] this.diskLocation[orig(this.height)] this.diskLocation[orig(this.height)-1] this.diskLocation[orig(this.height)..] this.diskLocation[orig(this.height)+1..] this.diskLocation[0..orig(this.height)] this.diskLocation[0..orig(this.height)-1] orig(this.diskLocation[post(this.height)]) orig(this.diskLocation[post(this.height)-1]) orig(this.diskLocation[post(this.height)..]) orig(this.diskLocation[post(this.height)+1..]) orig(this.diskLocation[0..post(this.height)]) orig(this.diskLocation[0..post(this.height)-1]) orig(this.diskLocation[this.height]) orig(this.diskLocation[this.height-1]) orig(this.diskLocation[this.height..]) orig(this.diskLocation[this.height+1..]) orig(this.diskLocation[0..this.height]) orig(this.diskLocation[0..this.height-1])
assignable this.diskLocation[*], this.diskLocation[this.height], this.diskLocation[this.height-1], this.diskLocation[this.height+1..], this.diskLocation[0..this.height], this.diskLocation[0..this.height-1]
this.diskLocation == \old(this.diskLocation)
this.height == \old(this.height)
this.height == \old(daikon.Quant.size(this.diskLocation))
this.noOutput == \old(this.noOutput)
this.noOutput == true
daikon.Quant.memberOf(\old(toPeg) , this.diskLocation )
===========================================================================
six170.Hanoi.moveTower(int, int, int):::ENTER
    Variables: this this.diskLocation this.diskLocation[] this.height this.noOutput fromPeg toPeg towerHeight size(this.diskLocation[]) size(this.diskLocation[])-1 this.diskLocation[this.height] this.diskLocation[this.height-1] this.diskLocation[this.height..] this.diskLocation[this.height+1..] this.diskLocation[0..this.height] this.diskLocation[0..this.height-1] this.diskLocation[towerHeight] this.diskLocation[towerHeight-1] this.diskLocation[towerHeight..] this.diskLocation[towerHeight+1..] this.diskLocation[0..towerHeight] this.diskLocation[0..towerHeight-1]
fromPeg == daikon.Quant.getElement_int(this.diskLocation, towerHeight-1)
this.noOutput == true
fromPeg == 0 || fromPeg == 1 || fromPeg == 2
toPeg == 0 || toPeg == 1 || toPeg == 2
towerHeight >= 1
daikon.Quant.eltwiseEqual(daikon.Quant.slice(this.diskLocation, 0, towerHeight-1))
this.height >= towerHeight
(fromPeg & toPeg) == 0
fromPeg != toPeg
daikon.Quant.eltsEqual(daikon.Quant.slice(this.diskLocation, 0, towerHeight-1), fromPeg)
===========================================================================
six170.Hanoi.moveTower(int, int, int):::EXIT
    Variables: this this.diskLocation this.diskLocation[] this.height this.noOutput fromPeg toPeg towerHeight orig(this) orig(this.diskLocation) orig(this.diskLocation[]) orig(this.height) orig(this.noOutput) orig(fromPeg) orig(toPeg) orig(towerHeight) size(this.diskLocation[]) size(this.diskLocation[])-1 orig(size(this.diskLocation[])) orig(size(this.diskLocation[]))-1 this.diskLocation[this.height] this.diskLocation[this.height-1] this.diskLocation[this.height..] this.diskLocation[this.height+1..] this.diskLocation[0..this.height] this.diskLocation[0..this.height-1] this.diskLocation[towerHeight] this.diskLocation[towerHeight-1] this.diskLocation[towerHeight..] this.diskLocation[towerHeight+1..] this.diskLocation[0..towerHeight] this.diskLocation[0..towerHeight-1] this.diskLocation[orig(this.height)] this.diskLocation[orig(this.height)-1] this.diskLocation[orig(this.height)..] this.diskLocation[orig(this.height)+1..] this.diskLocation[0..orig(this.height)] this.diskLocation[0..orig(this.height)-1] this.diskLocation[orig(towerHeight)] this.diskLocation[orig(towerHeight)-1] this.diskLocation[orig(towerHeight)..] this.diskLocation[orig(towerHeight)+1..] this.diskLocation[0..orig(towerHeight)] this.diskLocation[0..orig(towerHeight)-1] orig(this.diskLocation[post(this.height)]) orig(this.diskLocation[post(this.height)-1]) orig(this.diskLocation[post(this.height)..]) orig(this.diskLocation[post(this.height)+1..]) orig(this.diskLocation[0..post(this.height)]) orig(this.diskLocation[0..post(this.height)-1]) orig(this.diskLocation[post(towerHeight)]) orig(this.diskLocation[post(towerHeight)-1]) orig(this.diskLocation[post(towerHeight)..]) orig(this.diskLocation[post(towerHeight)+1..]) orig(this.diskLocation[0..post(towerHeight)]) orig(this.diskLocation[0..post(towerHeight)-1]) orig(this.diskLocation[this.height]) orig(this.diskLocation[this.height-1]) orig(this.diskLocation[this.height..]) orig(this.diskLocation[this.height+1..]) orig(this.diskLocation[0..this.height]) orig(this.diskLocation[0..this.height-1]) orig(this.diskLocation[towerHeight]) orig(this.diskLocation[towerHeight-1]) orig(this.diskLocation[towerHeight..]) orig(this.diskLocation[towerHeight+1..]) orig(this.diskLocation[0..towerHeight]) orig(this.diskLocation[0..towerHeight-1])
assignable this.diskLocation[*], this.diskLocation[this.height], this.diskLocation[this.height-1], this.diskLocation[this.height+1..], this.diskLocation[0..this.height], this.diskLocation[0..this.height-1]
this.diskLocation == \old(this.diskLocation)
this.height == \old(this.height)
this.height == \old(daikon.Quant.size(this.diskLocation))
this.noOutput == \old(this.noOutput)
\old(fromPeg) == \old(daikon.Quant.getElement_int(this.diskLocation, \new(towerHeight)-1))
\old(toPeg) == daikon.Quant.getElement_int(this.diskLocation, \old(towerHeight)-1)
daikon.Quant.pairwiseEqual(daikon.Quant.slice(this.diskLocation, \old(towerHeight), daikon.Quant.size(this.diskLocation)), \old(daikon.Quant.slice(this.diskLocation, \new(towerHeight), daikon.Quant.size(this.diskLocation))))
daikon.Quant.pairwiseEqual(daikon.Quant.slice(this.diskLocation, \old(towerHeight), daikon.Quant.size(this.diskLocation)), \old(daikon.Quant.slice(this.diskLocation, towerHeight, daikon.Quant.size(this.diskLocation))))
this.noOutput == true
daikon.Quant.eltwiseEqual(daikon.Quant.slice(this.diskLocation, 0, \old(towerHeight)-1))
this.height >= \old(towerHeight)
daikon.Quant.eltsEqual(daikon.Quant.slice(this.diskLocation, 0, \old(towerHeight)-1), \old(toPeg))
===========================================================================
six170.Hanoi.otherPeg(int, int):::ENTER
    Variables: pegA pegB
pegA == 0 || pegA == 1 || pegA == 2
pegB == 0 || pegB == 1 || pegB == 2
===========================================================================
six170.Hanoi.otherPeg(int, int):::EXIT65
    Variables: pegA pegB return orig(pegA) orig(pegB)
\result == 2
\old(pegA) == 0
\old(pegB) == 1
===========================================================================
six170.Hanoi.otherPeg(int, int):::EXIT66
    Variables: pegA pegB return orig(pegA) orig(pegB)
\result == 2
\old(pegA) == 1
\old(pegB) == 0
===========================================================================
six170.Hanoi.otherPeg(int, int):::EXIT67
    Variables: pegA pegB return orig(pegA) orig(pegB)
\result == 1
\old(pegA) == 0
\old(pegB) == 2
===========================================================================
six170.Hanoi.otherPeg(int, int):::EXIT68
    Variables: pegA pegB return orig(pegA) orig(pegB)
\result == 1
\old(pegA) == 2
\old(pegB) == 0
===========================================================================
six170.Hanoi.otherPeg(int, int):::EXIT69
    Variables: pegA pegB return orig(pegA) orig(pegB)
\result == 0
\old(pegA) == 1
\old(pegB) == 2
===========================================================================
six170.Hanoi.otherPeg(int, int):::EXIT70
    Variables: pegA pegB return orig(pegA) orig(pegB)
\result == 0
\old(pegA) == 2
\old(pegB) == 1
===========================================================================
six170.Hanoi.otherPeg(int, int):::EXIT
    Variables: pegA pegB return orig(pegA) orig(pegB)
\result == 0 || \result == 1 || \result == 2
===========================================================================
six170.Hanoi.showTowers():::ENTER
    Variables: this this.diskLocation this.diskLocation[] this.height this.noOutput size(this.diskLocation[]) size(this.diskLocation[])-1 this.diskLocation[this.height] this.diskLocation[this.height-1] this.diskLocation[this.height..] this.diskLocation[this.height+1..] this.diskLocation[0..this.height] this.diskLocation[0..this.height-1]
this.noOutput == true
===========================================================================
six170.Hanoi.showTowers():::EXIT
    Variables: this this.diskLocation this.diskLocation[] this.height this.noOutput orig(this) orig(this.diskLocation) orig(this.diskLocation[]) orig(this.height) orig(this.noOutput) size(this.diskLocation[]) size(this.diskLocation[])-1 orig(size(this.diskLocation[])) orig(size(this.diskLocation[]))-1 this.diskLocation[this.height] this.diskLocation[this.height-1] this.diskLocation[this.height..] this.diskLocation[this.height+1..] this.diskLocation[0..this.height] this.diskLocation[0..this.height-1] this.diskLocation[orig(this.height)] this.diskLocation[orig(this.height)-1] this.diskLocation[orig(this.height)..] this.diskLocation[orig(this.height)+1..] this.diskLocation[0..orig(this.height)] this.diskLocation[0..orig(this.height)-1] orig(this.diskLocation[post(this.height)]) orig(this.diskLocation[post(this.height)-1]) orig(this.diskLocation[post(this.height)..]) orig(this.diskLocation[post(this.height)+1..]) orig(this.diskLocation[0..post(this.height)]) orig(this.diskLocation[0..post(this.height)-1]) orig(this.diskLocation[this.height]) orig(this.diskLocation[this.height-1]) orig(this.diskLocation[this.height..]) orig(this.diskLocation[this.height+1..]) orig(this.diskLocation[0..this.height]) orig(this.diskLocation[0..this.height-1])
assignable this.diskLocation[this.height], this.diskLocation[this.height+1..], this.diskLocation[0..this.height]
this.diskLocation == \old(this.diskLocation)
daikon.Quant.pairwiseEqual(this.diskLocation, \old(this.diskLocation))
this.height == \old(this.height)
this.height == \old(daikon.Quant.size(this.diskLocation))
this.noOutput == \old(this.noOutput)
this.noOutput == true
