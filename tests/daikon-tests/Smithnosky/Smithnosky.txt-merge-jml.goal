package misc;

import java.util.Vector;

// Daikon test by Jesse Smithnosky
public class Smithnosky {

  /*@ invariant this != null; */
  /*@ invariant this.b >= 0; */
  /*@ invariant this.c >= 0; */
  /*@ invariant this.size == 0 || this.size == 1 || this.size == 2; */
  /*@ invariant this.s != null; */
  /*@ invariant this.s != null; */
  /*@ invariant daikon.Quant.eltsNotEqual(this.s, null); */
  /*@ invariant daikon.Quant.eltsNotEqual(this.s, null); */
  /*@ invariant daikon.Quant.size(this.s) == 0 || daikon.Quant.size(this.s) == 1 || daikon.Quant.size(this.s) == 2; */
  /*@ invariant (!(this.a == 0)) || (this.b == 0); */
  /*@ invariant this.a >= this.b; */
  /*@ invariant (!(this.a == 0)) || (this.c == 0); */
  /*@ invariant this.a >= this.c; */
  /*@ invariant (!(this.b == 0)) || (this.c == 0); */
  /*@ invariant this.b >= this.c; */
  /*@ invariant (!(this.aXb == 0)) || (this.b == 0); */
  /*@ invariant this.b <= this.aXb; */
  /*@ invariant (!(this.aXb == 0)) || (this.c == 0); */
  /*@ invariant this.c <= this.aXb; */
  /*@ invariant this.c <= this.aXc; */
  /*@ invariant (daikon.Quant.size(this.s) & daikon.Quant.size(this.s)-1) == 0; */
  /*@ spec_public */ private int a;
  /*@ spec_public */ private int b;
  /*@ spec_public */ private int c;
  /*@ spec_public */ private int aXb;
  /*@ spec_public */ private int aXc;
  /*@ spec_public */ private int size;
  /*@ spec_public */ private Vector s;

  /*@
  @ public normal_behavior // Generated by Daikon
  @ requires a == 2;
  @ requires b == 3;
  @ requires c == 4;
  @ ensures this.a == this.b;
  @ ensures this.a == this.c;
  @ ensures this.a == 0;
  @ ensures this.aXb == 6;
  @ ensures this.aXc == 8;
  @ ensures this.size == 0;
  @*/
  public Smithnosky(int a, int b, int c) {
    a = a;
    b = b;
    c = c;
    aXb = a*b;
    aXc = a*c;
    s = new Vector();
    size = 0;
  }

  /*@
  @ public normal_behavior // Generated by Daikon
  @ requires this.a == this.b;
  @ requires this.a == this.c;
  @ requires this.a == 0 || this.a == 1 || this.a == 2;
  @ requires this.aXb == 1 || this.aXb == 4 || this.aXb == 6;
  @ requires this.aXc == 1 || this.aXc == 4 || this.aXc == 8;
  @ requires this.size == 0;
  @ ensures this.b == this.c;
  @ ensures this.b == \old(this.a);
  @ ensures this.b == \old(this.b);
  @ ensures this.b == \old(this.c);
  @ ensures this.aXc == \old(this.aXc);
  @ ensures this.size == \old(this.size);
  @ ensures this.s == \old(this.s);
  @ ensures daikon.Quant.pairwiseEqual(this.s, \old(this.s));
  @ ensures this.a == 1 || this.a == 2 || this.a == 3;
  @ ensures this.b == 0 || this.b == 1 || this.b == 2;
  @ ensures this.aXb == 0 || this.aXb == 2 || this.aXb == 6;
  @ ensures this.aXc == 1 || this.aXc == 4 || this.aXc == 8;
  @ ensures this.size == 0;
  @*/
  public void incA() {
    a = a + 1;
    aXb = a*b;
  }

  /*@
  @ public normal_behavior // Generated by Daikon
  @ requires this.b == this.c;
  @ requires this.a == 1 || this.a == 2 || this.a == 3;
  @ requires this.b == 0 || this.b == 1 || this.b == 2;
  @ requires this.aXb == 0 || this.aXb == 2 || this.aXb == 6;
  @ requires this.aXc == 1 || this.aXc == 4 || this.aXc == 8;
  @ requires this.size == 0;
  @ ensures this.a == this.b;
  @ ensures this.a == \old(this.a);
  @ ensures this.c == \old(this.b);
  @ ensures this.c == \old(this.c);
  @ ensures this.aXc == \old(this.aXc);
  @ ensures this.size == \old(this.size);
  @ ensures this.s == \old(this.s);
  @ ensures daikon.Quant.pairwiseEqual(this.s, \old(this.s));
  @ ensures this.a == 1 || this.a == 2 || this.a == 3;
  @ ensures this.c == 0 || this.c == 1 || this.c == 2;
  @ ensures this.aXb == 1 || this.aXb == 4 || this.aXb == 9;
  @ ensures this.aXc == 1 || this.aXc == 4 || this.aXc == 8;
  @ ensures this.size == 0;
  @*/
  public void incB() {
    b++;
    aXb = a*b;
  }

  /*@
  @ public normal_behavior // Generated by Daikon
  @ requires this.a == this.b;
  @ requires this.a == 1 || this.a == 2 || this.a == 3;
  @ requires this.c == 0 || this.c == 1 || this.c == 2;
  @ requires this.aXb == 1 || this.aXb == 4 || this.aXb == 9;
  @ requires this.aXc == 1 || this.aXc == 4 || this.aXc == 8;
  @ requires this.size == 0;
  @ ensures this.a == this.b;
  @ ensures this.a == this.c;
  @ ensures this.a == \old(this.a);
  @ ensures this.a == \old(this.b);
  @ ensures this.aXb == this.aXc;
  @ ensures this.aXb == \old(this.aXb);
  @ ensures this.size == \old(this.size);
  @ ensures this.s == \old(this.s);
  @ ensures daikon.Quant.pairwiseEqual(this.s, \old(this.s));
  @ ensures this.a == 1 || this.a == 2 || this.a == 3;
  @ ensures this.aXb == 1 || this.aXb == 4 || this.aXb == 9;
  @ ensures this.size == 0;
  @*/
  public void incC() {
    c++;
    aXc = a*c;
  }

  /*@
  @ public normal_behavior // Generated by Daikon
  @ requires this.a == this.b;
  @ requires this.a == this.c;
  @ requires this.aXb == this.aXc;
  @ requires this.a == 3;
  @ requires this.aXb == 9;
  @ requires this.size == 0 || this.size == 1;
  @ requires o != null;
  @ requires o.getClass().getName() == java.lang.String.class.getName();
  @ requires daikon.Quant.size(this.s) == 0 || daikon.Quant.size(this.s) == 1;
  @ ensures this.a == this.b;
  @ ensures this.a == this.c;
  @ ensures this.a == \old(this.a);
  @ ensures this.a == \old(this.b);
  @ ensures this.a == \old(this.c);
  @ ensures this.aXb == this.aXc;
  @ ensures this.aXb == \old(this.aXb);
  @ ensures this.aXb == \old(this.aXc);
  @ ensures this.s == \old(this.s);
  @ ensures daikon.Quant.size(this.s)-1 == \old(daikon.Quant.size(this.s));
  @ ensures this.a == 3;
  @ ensures this.aXb == 9;
  @ ensures this.size == 1 || this.size == 2;
  @ ensures daikon.Quant.size(this.s) == 1 || daikon.Quant.size(this.s) == 2;
  @ ensures daikon.Quant.subsetOf(\old(this.s), this.s);
  @*/
  public void add(Object o) {
    s.add(o);
    size++;
  }

  /*@
  @ public normal_behavior // Generated by Daikon
  @ requires args != null;
  @ requires args.getClass().getName() == java.lang.String[].class.getName();
  @ requires daikon.Quant.pairwiseEqual(daikon.Quant.collectObject(args, "toString()"), new String[] {  });
  @ ensures daikon.Quant.pairwiseEqual(args, \old(args));
  @ ensures daikon.Quant.pairwiseEqual(daikon.Quant.collectObject(args, "toString()"), new String[] {  });
  @*/
  public static void main(String args[]) {
    Smithnosky myTest = new Smithnosky(2,3,4);
    myTest.incA();
    myTest.incB();
    myTest.incC();
    myTest.incA();
    myTest.incB();
    myTest.incC();
    myTest.incA();
    myTest.incB();
    myTest.incC();
    myTest.add("A");
    myTest.add("A");
  }
}
