===========================================================================
misc.Param:::OBJECT
    Variables: this this.gi1 this.gi2 this.gs1 this.gs1.a this.gs1.b this.gs2 this.gs2.a this.gs2.b
this != null
this.gi1 == 0
this.gi2 == 5
this.gs1 != null
this.gs1 != null
this.gs1.b == 15
this.gs2 != null
this.gs2 != null
this.gs2.a == 20
this.gs2.b == 25
===========================================================================
misc.Param.Param():::EXIT
    Variables: this this.gi1 this.gi2 this.gs1 this.gs1.a this.gs1.b this.gs2 this.gs2.a this.gs2.b
this.gs1.a == 10
===========================================================================
misc.Param.main():::ENTER
    Variables: this this.gi1 this.gi2 this.gs1 this.gs1.a this.gs1.b this.gs2 this.gs2.a this.gs2.b
this.gs1.a == 10
===========================================================================
misc.Param.main():::EXIT
    Variables: this this.gi1 this.gi2 this.gs1 this.gs1.a this.gs1.b this.gs2 this.gs2.a this.gs2.b orig(this) orig(this.gi1) orig(this.gi2) orig(this.gs1) orig(this.gs1.a) orig(this.gs1.b) orig(this.gs2) orig(this.gs2.a) orig(this.gs2.b)
assignable this.gs1.a
this.gi1 == \old(this.gi1)
this.gi2 == \old(this.gi2)
this.gs1 == \old(this.gs1)
this.gs1.b == \old(this.gs1.b)
this.gs2 == \old(this.gs2)
this.gs2.a == \old(this.gs2.a)
this.gs2.b == \old(this.gs2.b)
this.gs1.a == 110
===========================================================================
misc.Param.main(java.lang.String[]):::ENTER
    Variables: args args.getClass().getName() args[] args[].toString size(args[]) size(args[])-1
args != null
args.getClass().getName() == java.lang.String[].class.getName()
("oneOf.java.jpp: SEQUENCE unimplemented" != null)
daikon.Quant.pairwiseEqual(daikon.Quant.collectObject(args, "toString()"), new String[] {  })
===========================================================================
misc.Param.main(java.lang.String[]):::EXIT
    Variables: args args.getClass().getName() args[] args[].toString orig(args) orig(args.getClass().getName()) orig(args[]) orig(args[].toString) size(args[]) size(args[])-1 orig(size(args[])) orig(size(args[]))-1
daikon.Quant.pairwiseEqual(args, \old(args))
("oneOf.java.jpp: SEQUENCE unimplemented" != null)
daikon.Quant.pairwiseEqual(daikon.Quant.collectObject(args, "toString()"), new String[] {  })
===========================================================================
misc.Param.work(int, int, misc.ParamType, misc.ParamType):::ENTER
    Variables: this this.gi1 this.gi2 this.gs1 this.gs1.a this.gs1.b this.gs2 this.gs2.a this.gs2.b pi1 pi2 ps1 ps1.a ps1.b ps2 ps2.a ps2.b
this.gi1 == pi1
this.gi2 == pi2
this.gs1 == ps1
this.gs1.a == ps1.a
this.gs1.b == ps1.b
ps2 != null
ps2 != null
ps2.a == 20
ps2.b == 25
===========================================================================
misc.Param.work(int, int, misc.ParamType, misc.ParamType):::EXIT
    Variables: this this.gi1 this.gi2 this.gs1 this.gs1.a this.gs1.b this.gs2 this.gs2.a this.gs2.b pi1 pi2 ps1 ps1.a ps1.b ps2 ps2.a ps2.b orig(this) orig(this.gi1) orig(this.gi2) orig(this.gs1) orig(this.gs1.a) orig(this.gs1.b) orig(this.gs2) orig(this.gs2.a) orig(this.gs2.b) orig(pi1) orig(pi2) orig(ps1) orig(ps1.a) orig(ps1.b) orig(ps2) orig(ps2.a) orig(ps2.b)
assignable this.gs1.a, ps1.a, ps2.a, ps2.b
this.gi1 == \old(this.gi1)
this.gi1 == \old(pi1)
this.gi2 == \old(this.gi2)
this.gi2 == \old(pi2)
this.gs1 == \old(this.gs1)
this.gs1 == \old(ps1)
this.gs1.a == ps1.a
this.gs1.b == ps1.b
this.gs2 == \old(this.gs2)
this.gs2.a == \old(this.gs2.a)
this.gs2.b == \old(this.gs2.b)
ps1.b == \old(this.gs1.b)
ps1.b == \old(ps1.b)
ps1.b == 15
ps1.a - \old(ps1.a) - 1 == 0
===========================================================================
misc.ParamType:::OBJECT
    Variables: this this.a this.b
this.a == 0
this.b == 0
===========================================================================
misc.ParamType.ParamType():::EXIT
    Variables: this this.a this.b
