===========================================================================
DataStructures.StackAr:::OBJECT
this.theArray != null
this.theArray.getClass().getName() == java.lang.Object[].class
this.topOfStack >= -1
this.theArray.getClass().getName().length() == 18
this.theArray[this.topOfStack+1..] elements == null
this.theArray[0..this.topOfStack] elements != null
this.topOfStack <= size(this.theArray[])-1
(size(this.theArray[]) >> this.theArray.getClass().getName().length() == 0)
this.theArray.getClass().getName().length() != size(this.theArray[])
this.theArray.getClass().getName().length() != size(this.theArray[])-1
===========================================================================
DataStructures.StackAr.StackAr(int):::ENTER
capacity >= 0
===========================================================================
DataStructures.StackAr.StackAr(int):::EXIT
orig(capacity) == size(this.theArray[])
this.theArray[] elements == null
this.theArray[].getClass().getName() elements == null
this.topOfStack == -1
this.theArray[0..this.topOfStack] == []
(orig(capacity) >> this.theArray.getClass().getName().length() == 0)
orig(capacity) != this.theArray.getClass().getName().length()
===========================================================================
DataStructures.StackAr.isEmpty():::ENTER
===========================================================================
DataStructures.StackAr.isEmpty():::EXIT
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.theArray[] == orig(this.theArray[])
this.topOfStack == orig(this.topOfStack)
this.theArray.getClass().getName().length() == orig(this.theArray.getClass().getName()).length()
(this.topOfStack == -1)  <==>  (return == true)
(this.topOfStack == -1)  ==>  (this.theArray[0..this.topOfStack] == [])
(this.topOfStack == -1)  ==>  (this.theArray[] elements == null)
(this.topOfStack == -1)  ==>  (this.theArray[].getClass().getName() elements == null)
(this.topOfStack == -1)  ==>  (this.topOfStack < this.theArray.getClass().getName().length())
(this.topOfStack >= 0)  <==>  (return == false)
(this.topOfStack >= 0)  ==>  ((size(this.theArray[])-1 == 0) ==> (this.topOfStack == 0))
(this.topOfStack >= 0)  ==>  ((size(this.theArray[])-1 >> this.theArray.getClass().getName().length() == 0))
(this.topOfStack >= 0)  ==>  ((this.topOfStack >> this.theArray.getClass().getName().length() == 0))
(this.topOfStack >= 0)  ==>  (this.theArray[orig(this.topOfStack)..this.topOfStack-1] == [])
(this.topOfStack >= 0)  ==>  (this.theArray[this.topOfStack..orig(this.topOfStack)-1] == [])
this.theArray[this.topOfStack+1..orig(this.topOfStack)] == []
===========================================================================
DataStructures.StackAr.isEmpty():::EXIT;condition="return == true"
this.theArray[] elements == null
this.theArray[].getClass().getName() elements == null
this.topOfStack == -1
return == true
this.theArray[0..this.topOfStack] == []
===========================================================================
DataStructures.StackAr.isEmpty():::EXIT;condition="not(return == true)"
this.topOfStack >= 0
return == false
(this.topOfStack >> this.theArray.getClass().getName().length() == 0)
(size(this.theArray[])-1 == 0) ==> (this.topOfStack == 0)
(size(this.theArray[])-1 >> this.theArray.getClass().getName().length() == 0)
===========================================================================
DataStructures.StackAr.isEmpty():::EXIT;condition="orig(topOfStack == -1)"
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.theArray[] == orig(this.theArray[])
this.topOfStack == orig(this.topOfStack)
this.theArray.getClass().getName().length() == orig(this.theArray.getClass().getName()).length()
this.theArray != null
this.theArray.getClass().getName() == java.lang.Object[].class
this.theArray[] elements == null
this.theArray[].getClass().getName() elements == null
this.topOfStack == -1
return == true
this.theArray.getClass().getName().length() == 18
this.theArray[0..this.topOfStack] == []
this.topOfStack <= size(this.theArray[])-1
(size(this.theArray[]) >> this.theArray.getClass().getName().length() == 0)
this.theArray.getClass().getName().length() != size(this.theArray[])
this.theArray.getClass().getName().length() != size(this.theArray[])-1
===========================================================================
DataStructures.StackAr.isEmpty():::EXIT;condition="not(orig(topOfStack == -1))"
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.theArray[] == orig(this.theArray[])
this.topOfStack == orig(this.topOfStack)
this.theArray.getClass().getName().length() == orig(this.theArray.getClass().getName()).length()
this.theArray != null
this.theArray.getClass().getName() == java.lang.Object[].class
this.topOfStack >= 0
return == false
this.theArray.getClass().getName().length() == 18
this.theArray[this.topOfStack+1..] elements == null
this.theArray[0..this.topOfStack] elements != null
this.theArray[this.topOfStack+1..orig(this.topOfStack)] == []
(this.topOfStack >> this.theArray.getClass().getName().length() == 0)
(size(this.theArray[])-1 == 0) ==> (this.topOfStack == 0)
this.topOfStack <= size(this.theArray[])-1
(size(this.theArray[]) >> this.theArray.getClass().getName().length() == 0)
this.theArray.getClass().getName().length() != size(this.theArray[])
(size(this.theArray[])-1 >> this.theArray.getClass().getName().length() == 0)
this.theArray.getClass().getName().length() != size(this.theArray[])-1
===========================================================================
DataStructures.StackAr.isEmpty():::EXIT;condition="topOfStack == -1"
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.theArray[] == orig(this.theArray[])
this.topOfStack == orig(this.topOfStack)
this.theArray.getClass().getName().length() == orig(this.theArray.getClass().getName()).length()
this.theArray != null
this.theArray.getClass().getName() == java.lang.Object[].class
this.theArray[] elements == null
this.theArray[].getClass().getName() elements == null
this.topOfStack == -1
return == true
this.theArray.getClass().getName().length() == 18
this.theArray[0..this.topOfStack] == []
this.topOfStack <= size(this.theArray[])-1
(size(this.theArray[]) >> this.theArray.getClass().getName().length() == 0)
this.theArray.getClass().getName().length() != size(this.theArray[])
this.theArray.getClass().getName().length() != size(this.theArray[])-1
===========================================================================
DataStructures.StackAr.isEmpty():::EXIT;condition="not(topOfStack == -1)"
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.theArray[] == orig(this.theArray[])
this.topOfStack == orig(this.topOfStack)
this.theArray.getClass().getName().length() == orig(this.theArray.getClass().getName()).length()
this.theArray != null
this.theArray.getClass().getName() == java.lang.Object[].class
this.topOfStack >= 0
return == false
this.theArray.getClass().getName().length() == 18
this.theArray[this.topOfStack+1..] elements == null
this.theArray[0..this.topOfStack] elements != null
this.theArray[this.topOfStack+1..orig(this.topOfStack)] == []
(this.topOfStack >> this.theArray.getClass().getName().length() == 0)
(size(this.theArray[])-1 == 0) ==> (this.topOfStack == 0)
this.topOfStack <= size(this.theArray[])-1
(size(this.theArray[]) >> this.theArray.getClass().getName().length() == 0)
this.theArray.getClass().getName().length() != size(this.theArray[])
(size(this.theArray[])-1 >> this.theArray.getClass().getName().length() == 0)
this.theArray.getClass().getName().length() != size(this.theArray[])-1
===========================================================================
DataStructures.StackAr.isFull():::ENTER
(this.topOfStack == -1)  ==>  (this.theArray[0..this.topOfStack] == [])
(this.topOfStack == -1)  ==>  (this.theArray[] elements == null)
(this.topOfStack == -1)  ==>  (this.theArray[].getClass().getName() elements == null)
(this.topOfStack == -1)  ==>  (this.topOfStack < this.theArray.getClass().getName().length())
(this.topOfStack >= 0)  ==>  ((size(this.theArray[])-1 == 0) ==> (this.topOfStack == 0))
(this.topOfStack >= 0)  ==>  ((size(this.theArray[])-1 >> this.theArray.getClass().getName().length() == 0))
(this.topOfStack >= 0)  ==>  ((this.topOfStack >> this.theArray.getClass().getName().length() == 0))
===========================================================================
DataStructures.StackAr.isFull():::ENTER;condition="topOfStack == -1"
this.theArray[] elements == null
this.theArray[].getClass().getName() elements == null
this.topOfStack == -1
this.theArray[0..this.topOfStack] == []
===========================================================================
DataStructures.StackAr.isFull():::ENTER;condition="not(topOfStack == -1)"
this.topOfStack >= 0
(this.topOfStack >> this.theArray.getClass().getName().length() == 0)
(size(this.theArray[])-1 == 0) ==> (this.topOfStack == 0)
(size(this.theArray[])-1 >> this.theArray.getClass().getName().length() == 0)
===========================================================================
DataStructures.StackAr.isFull():::EXIT
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.theArray[] == orig(this.theArray[])
this.topOfStack == orig(this.topOfStack)
this.theArray.getClass().getName().length() == orig(this.theArray.getClass().getName()).length()
(return == false)  <==>  (this.theArray[this.topOfStack+1..] elements == null)
(return == false)  <==>  (this.topOfStack < size(this.theArray[])-1)
(return == false)  ==>  ((size(this.theArray[])-1 >> this.theArray.getClass().getName().length() == 0))
(return == false)  ==>  (this.topOfStack <= this.theArray.getClass().getName().length())
(return == true)  <==>  (this.topOfStack == size(this.theArray[])-1)
(return == true)  ==>  (this.theArray[] elements != null)
(return == true)  ==>  (this.theArray[this.topOfStack+1..] == [])
(return == true)  ==>  (this.topOfStack != this.theArray.getClass().getName().length())
(this.topOfStack == -1)  ==>  (this.theArray[0..this.topOfStack] == [])
(this.topOfStack == -1)  ==>  (this.theArray[] elements == null)
(this.topOfStack == -1)  ==>  (this.theArray[].getClass().getName() elements == null)
(this.topOfStack == -1)  ==>  (this.topOfStack < this.theArray.getClass().getName().length())
(this.topOfStack >= 0)  ==>  ((size(this.theArray[])-1 == 0) ==> (this.topOfStack == 0))
(this.topOfStack >= 0)  ==>  ((size(this.theArray[])-1 >> this.theArray.getClass().getName().length() == 0))
(this.topOfStack >= 0)  ==>  ((this.topOfStack >> this.theArray.getClass().getName().length() == 0))
this.theArray[this.topOfStack+1..orig(this.topOfStack)] == []
===========================================================================
DataStructures.StackAr.isFull():::EXIT;condition="return == true"
this.topOfStack == size(this.theArray[])-1
this.topOfStack == orig(size(this.theArray[]))-1
this.theArray[] elements != null
return == true
this.theArray[this.topOfStack+1..] == []
this.topOfStack != this.theArray.getClass().getName().length()
===========================================================================
DataStructures.StackAr.isFull():::EXIT;condition="not(return == true)"
return == false
this.topOfStack <= this.theArray.getClass().getName().length()
this.topOfStack < size(this.theArray[])-1
(size(this.theArray[])-1 >> this.theArray.getClass().getName().length() == 0)
===========================================================================
DataStructures.StackAr.isFull():::EXIT;condition="orig(topOfStack == -1)"
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.theArray[] == orig(this.theArray[])
this.topOfStack == orig(this.topOfStack)
this.theArray.getClass().getName().length() == orig(this.theArray.getClass().getName()).length()
this.theArray != null
this.theArray.getClass().getName() == java.lang.Object[].class
this.theArray[] elements == null
this.theArray[].getClass().getName() elements == null
this.topOfStack == -1
this.theArray.getClass().getName().length() == 18
this.theArray[0..this.topOfStack] == []
this.topOfStack <= size(this.theArray[])-1
(size(this.theArray[]) >> this.theArray.getClass().getName().length() == 0)
this.theArray.getClass().getName().length() != size(this.theArray[])
this.theArray.getClass().getName().length() != size(this.theArray[])-1
===========================================================================
DataStructures.StackAr.isFull():::EXIT;condition="not(orig(topOfStack == -1))"
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.theArray[] == orig(this.theArray[])
this.topOfStack == orig(this.topOfStack)
this.theArray.getClass().getName().length() == orig(this.theArray.getClass().getName()).length()
this.theArray != null
this.theArray.getClass().getName() == java.lang.Object[].class
this.topOfStack >= 0
this.theArray.getClass().getName().length() == 18
this.theArray[this.topOfStack+1..] elements == null
this.theArray[0..this.topOfStack] elements != null
this.theArray[this.topOfStack+1..orig(this.topOfStack)] == []
(this.topOfStack >> this.theArray.getClass().getName().length() == 0)
(size(this.theArray[])-1 == 0) ==> (this.topOfStack == 0)
this.topOfStack <= size(this.theArray[])-1
(size(this.theArray[]) >> this.theArray.getClass().getName().length() == 0)
this.theArray.getClass().getName().length() != size(this.theArray[])
(size(this.theArray[])-1 >> this.theArray.getClass().getName().length() == 0)
this.theArray.getClass().getName().length() != size(this.theArray[])-1
===========================================================================
DataStructures.StackAr.isFull():::EXIT;condition="topOfStack == -1"
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.theArray[] == orig(this.theArray[])
this.topOfStack == orig(this.topOfStack)
this.theArray.getClass().getName().length() == orig(this.theArray.getClass().getName()).length()
this.theArray != null
this.theArray.getClass().getName() == java.lang.Object[].class
this.theArray[] elements == null
this.theArray[].getClass().getName() elements == null
this.topOfStack == -1
this.theArray.getClass().getName().length() == 18
this.theArray[0..this.topOfStack] == []
this.topOfStack <= size(this.theArray[])-1
(size(this.theArray[]) >> this.theArray.getClass().getName().length() == 0)
this.theArray.getClass().getName().length() != size(this.theArray[])
this.theArray.getClass().getName().length() != size(this.theArray[])-1
===========================================================================
DataStructures.StackAr.isFull():::EXIT;condition="not(topOfStack == -1)"
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.theArray[] == orig(this.theArray[])
this.topOfStack == orig(this.topOfStack)
this.theArray.getClass().getName().length() == orig(this.theArray.getClass().getName()).length()
this.theArray != null
this.theArray.getClass().getName() == java.lang.Object[].class
this.topOfStack >= 0
this.theArray.getClass().getName().length() == 18
this.theArray[this.topOfStack+1..] elements == null
this.theArray[0..this.topOfStack] elements != null
this.theArray[this.topOfStack+1..orig(this.topOfStack)] == []
(this.topOfStack >> this.theArray.getClass().getName().length() == 0)
(size(this.theArray[])-1 == 0) ==> (this.topOfStack == 0)
this.topOfStack <= size(this.theArray[])-1
(size(this.theArray[]) >> this.theArray.getClass().getName().length() == 0)
this.theArray.getClass().getName().length() != size(this.theArray[])
(size(this.theArray[])-1 >> this.theArray.getClass().getName().length() == 0)
this.theArray.getClass().getName().length() != size(this.theArray[])-1
===========================================================================
DataStructures.StackAr.isFull():::EXIT;condition="orig(topOfStack == theArray.length - 1)"
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.theArray[] == orig(this.theArray[])
this.topOfStack == orig(this.topOfStack)
this.topOfStack == size(this.theArray[])-1
this.topOfStack == orig(size(this.theArray[]))-1
this.theArray.getClass().getName().length() == orig(this.theArray.getClass().getName()).length()
this.theArray != null
this.theArray.getClass().getName() == java.lang.Object[].class
this.theArray[] elements != null
return == true
this.theArray.getClass().getName().length() == 18
this.theArray[this.topOfStack+1..] == []
this.topOfStack != this.theArray.getClass().getName().length()
(size(this.theArray[]) >> this.theArray.getClass().getName().length() == 0)
this.theArray.getClass().getName().length() != size(this.theArray[])
===========================================================================
DataStructures.StackAr.isFull():::EXIT;condition="not(orig(topOfStack == theArray.length - 1))"
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.theArray[] == orig(this.theArray[])
this.topOfStack == orig(this.topOfStack)
this.theArray.getClass().getName().length() == orig(this.theArray.getClass().getName()).length()
this.theArray != null
this.theArray.getClass().getName() == java.lang.Object[].class
this.topOfStack >= -1
return == false
this.theArray.getClass().getName().length() == 18
this.theArray[this.topOfStack+1..] elements == null
this.theArray[0..this.topOfStack] elements != null
this.theArray[this.topOfStack+1..orig(this.topOfStack)] == []
this.topOfStack <= this.theArray.getClass().getName().length()
this.topOfStack < size(this.theArray[])-1
(size(this.theArray[]) >> this.theArray.getClass().getName().length() == 0)
this.theArray.getClass().getName().length() != size(this.theArray[])
(size(this.theArray[])-1 >> this.theArray.getClass().getName().length() == 0)
this.theArray.getClass().getName().length() != size(this.theArray[])-1
===========================================================================
DataStructures.StackAr.isFull():::EXIT;condition="topOfStack == theArray.length - 1"
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.theArray[] == orig(this.theArray[])
this.topOfStack == orig(this.topOfStack)
this.topOfStack == size(this.theArray[])-1
this.topOfStack == orig(size(this.theArray[]))-1
this.theArray.getClass().getName().length() == orig(this.theArray.getClass().getName()).length()
this.theArray != null
this.theArray.getClass().getName() == java.lang.Object[].class
this.theArray[] elements != null
return == true
this.theArray.getClass().getName().length() == 18
this.theArray[this.topOfStack+1..] == []
this.topOfStack != this.theArray.getClass().getName().length()
(size(this.theArray[]) >> this.theArray.getClass().getName().length() == 0)
this.theArray.getClass().getName().length() != size(this.theArray[])
===========================================================================
DataStructures.StackAr.isFull():::EXIT;condition="not(topOfStack == theArray.length - 1)"
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.theArray[] == orig(this.theArray[])
this.topOfStack == orig(this.topOfStack)
this.theArray.getClass().getName().length() == orig(this.theArray.getClass().getName()).length()
this.theArray != null
this.theArray.getClass().getName() == java.lang.Object[].class
this.topOfStack >= -1
return == false
this.theArray.getClass().getName().length() == 18
this.theArray[this.topOfStack+1..] elements == null
this.theArray[0..this.topOfStack] elements != null
this.theArray[this.topOfStack+1..orig(this.topOfStack)] == []
this.topOfStack <= this.theArray.getClass().getName().length()
this.topOfStack < size(this.theArray[])-1
(size(this.theArray[]) >> this.theArray.getClass().getName().length() == 0)
this.theArray.getClass().getName().length() != size(this.theArray[])
(size(this.theArray[])-1 >> this.theArray.getClass().getName().length() == 0)
this.theArray.getClass().getName().length() != size(this.theArray[])-1
===========================================================================
DataStructures.StackAr.makeEmpty():::ENTER
(size(this.theArray[]) == 0)  ==>  (size(this.theArray[]) is a pointer)
(size(this.theArray[]) == 0)  ==>  (this.theArray.getClass().getName().length() > size(this.theArray[]))
(size(this.theArray[]) == 0)  ==>  (this.theArray[0..this.topOfStack] == [])
(size(this.theArray[]) == 0)  ==>  (this.theArray[] == [])
(size(this.theArray[]) == 0)  ==>  (this.theArray[].getClass().getName() == [])
(size(this.theArray[]) == 0)  ==>  (this.theArray[this.topOfStack+1..] == [])
(size(this.theArray[]) == 0)  ==>  (this.topOfStack == size(this.theArray[])-1)
this.topOfStack < this.theArray.getClass().getName().length()
(this.topOfStack == 0) ==> (size(this.theArray[])-1 == 0)
===========================================================================
DataStructures.StackAr.makeEmpty():::ENTER;condition="topOfStack == -1"
===========================================================================
DataStructures.StackAr.makeEmpty():::ENTER;condition="topOfStack == theArray.length - 1"
this.topOfStack == size(this.theArray[])-1
this.theArray.getClass().getName() == java.lang.Object[].class
this.theArray[] == []
this.theArray[].getClass().getName() == []
this.theArray.getClass().getName().length() == 18
===========================================================================
DataStructures.StackAr.makeEmpty():::ENTER;condition="not(topOfStack == theArray.length - 1)"
this.theArray != null
this.theArray.getClass().getName() == java.lang.Object[].class
this.topOfStack >= -1
this.theArray.getClass().getName().length() == 18
size(this.theArray[]) >= 1
this.theArray[this.topOfStack+1..] elements == null
this.theArray[0..this.topOfStack] elements != null
this.topOfStack < this.theArray.getClass().getName().length()
(this.topOfStack == 0) ==> (size(this.theArray[])-1 == 0)
this.topOfStack <= size(this.theArray[])-1
(size(this.theArray[]) >> this.theArray.getClass().getName().length() == 0)
this.theArray.getClass().getName().length() != size(this.theArray[])
(size(this.theArray[])-1 >> this.theArray.getClass().getName().length() == 0)
this.theArray.getClass().getName().length() != size(this.theArray[])-1
===========================================================================
DataStructures.StackAr.makeEmpty():::EXIT
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.theArray.getClass().getName().length() == orig(this.theArray.getClass().getName()).length()
size(this.theArray[]) == orig(size(this.theArray[]))
this.theArray[orig(this.topOfStack)+1..] == orig(this.theArray[this.topOfStack+1..])
(orig(this.topOfStack) < size(this.theArray[])-1)  ==>  ((size(this.theArray[])-1 >> this.theArray.getClass().getName().length() == 0))
(orig(this.topOfStack) < size(this.theArray[])-1)  ==>  (orig(this.theArray[0..this.topOfStack]) elements == orig(this))
(orig(this.topOfStack) < size(this.theArray[])-1)  ==>  (orig(this.theArray[0..this.topOfStack]) elements are equal)
(orig(this.topOfStack) < size(this.theArray[])-1)  ==>  (size(this.theArray[]) % orig(this.topOfStack) == 0)
(orig(this.topOfStack) < size(this.theArray[])-1)  ==>  (size(this.theArray[]) >= 1)
(orig(this.topOfStack) < size(this.theArray[])-1)  ==>  (this.theArray[] is a subset of orig(this.theArray[]))
(orig(this.topOfStack) < size(this.theArray[])-1)  ==>  (this.topOfStack < size(this.theArray[])-1)
(orig(this.topOfStack) == -1)  <==>  (this.topOfStack == orig(this.topOfStack))
(orig(this.topOfStack) == -1)  ==>  (orig(this.theArray[0..this.topOfStack]) == [])
(orig(this.topOfStack) == -1)  ==>  (orig(this.theArray[]) elements == null)
(orig(this.topOfStack) == -1)  ==>  (orig(this.theArray[].getClass().getName()) elements == null)
(orig(this.topOfStack) == -1)  ==>  (this.theArray[0..orig(this.topOfStack)] == [])
(orig(this.topOfStack) == -1)  ==>  (this.theArray[] == orig(this.theArray[]))
(orig(this.topOfStack) == -1)  ==>  (this.theArray[orig(this.topOfStack)+1..this.topOfStack] == [])
(orig(this.topOfStack) == size(this.theArray[])-1)  ==>  (orig(this.theArray[]) elements != null)
(orig(this.topOfStack) == size(this.theArray[])-1)  ==>  (this.theArray.getClass().getName().length() > size(this.theArray[]))
(orig(this.topOfStack) == size(this.theArray[])-1)  ==>  (this.theArray[orig(this.topOfStack)+1..] == [])
(this.theArray[] elements == null)  <==>  (size(this.theArray[]) >= 1)
(this.theArray[] elements == null)  <==>  (this.topOfStack < size(this.theArray[])-1)
(this.theArray[] elements == null)  ==>  ((size(this.theArray[])-1 >> this.theArray.getClass().getName().length() == 0))
(this.theArray[] elements == null)  ==>  (this.theArray[].getClass().getName() elements == null)
(this.topOfStack == size(this.theArray[])-1)  ==>  (orig(this.theArray[0..this.topOfStack]) == [])
(this.topOfStack == size(this.theArray[])-1)  ==>  (orig(this.theArray[]) == [])
(this.topOfStack == size(this.theArray[])-1)  ==>  (orig(this.theArray[].getClass().getName()) == [])
(this.topOfStack == size(this.theArray[])-1)  ==>  (size(this.theArray[]) is a pointer)
(this.topOfStack == size(this.theArray[])-1)  ==>  (this.theArray.getClass().getName().length() > size(this.theArray[]))
(this.topOfStack == size(this.theArray[])-1)  ==>  (this.theArray[0..orig(this.topOfStack)] == [])
(this.topOfStack == size(this.theArray[])-1)  ==>  (this.theArray[] == [])
(this.topOfStack == size(this.theArray[])-1)  ==>  (this.theArray[] == orig(this.theArray[]))
(this.topOfStack == size(this.theArray[])-1)  ==>  (this.theArray[].getClass().getName() == [])
(this.topOfStack == size(this.theArray[])-1)  ==>  (this.theArray[orig(this.topOfStack)+1..] == [])
(this.topOfStack == size(this.theArray[])-1)  ==>  (this.theArray[orig(this.topOfStack)+1..this.topOfStack] == [])
(this.topOfStack == size(this.theArray[])-1)  ==>  (this.topOfStack == orig(this.topOfStack))
this.theArray[] elements == null
this.theArray[].getClass().getName() elements == null
this.topOfStack == -1
this.theArray[0..this.topOfStack] == []
this.topOfStack <= orig(this.topOfStack)
orig(this.topOfStack) < this.theArray.getClass().getName().length()
(orig(this.topOfStack) == 0) ==> (size(this.theArray[])-1 == 0)
orig(this.topOfStack) <= size(this.theArray[])-1
===========================================================================
DataStructures.StackAr.makeEmpty():::EXIT;condition="orig(topOfStack == -1)"
this.theArray[] == orig(this.theArray[])
this.topOfStack == orig(this.topOfStack)
===========================================================================
DataStructures.StackAr.makeEmpty():::EXIT;condition="not(orig(topOfStack == -1))"
this.theArray[] elements == this.theArray[orig(this.topOfStack)]
this.topOfStack < orig(this.topOfStack)
this.topOfStack < size(this.theArray[])-1
(size(this.theArray[])-1 == 0) ==> (orig(this.topOfStack) == 0)
(size(this.theArray[])-1 >> this.theArray.getClass().getName().length() == 0)
===========================================================================
DataStructures.StackAr.makeEmpty():::EXIT;condition="topOfStack == -1"
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.theArray.getClass().getName().length() == orig(this.theArray.getClass().getName()).length()
size(this.theArray[]) == orig(size(this.theArray[]))
this.theArray[orig(this.topOfStack)+1..] == orig(this.theArray[this.topOfStack+1..])
this.theArray != null
this.theArray.getClass().getName() == java.lang.Object[].class
this.theArray[] elements == null
this.theArray[].getClass().getName() elements == null
this.topOfStack == -1
this.theArray.getClass().getName().length() == 18
this.theArray[0..this.topOfStack] == []
this.topOfStack <= orig(this.topOfStack)
this.topOfStack <= size(this.theArray[])-1
orig(this.topOfStack) < this.theArray.getClass().getName().length()
(orig(this.topOfStack) == 0) ==> (size(this.theArray[])-1 == 0)
orig(this.topOfStack) <= size(this.theArray[])-1
(size(this.theArray[]) >> this.theArray.getClass().getName().length() == 0)
this.theArray.getClass().getName().length() != size(this.theArray[])
this.theArray.getClass().getName().length() != size(this.theArray[])-1
===========================================================================
DataStructures.StackAr.makeEmpty():::EXIT;condition="orig(topOfStack == theArray.length - 1)"
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
orig(this.topOfStack) == size(this.theArray[])-1
orig(this.topOfStack) == orig(size(this.theArray[]))-1
this.theArray.getClass().getName().length() == orig(this.theArray.getClass().getName()).length()
size(this.theArray[]) == orig(size(this.theArray[]))
this.theArray != null
this.theArray.getClass().getName() == java.lang.Object[].class
this.theArray[] elements == null
this.theArray[].getClass().getName() elements == null
this.topOfStack == -1
orig(this.theArray[]) elements != null
this.theArray.getClass().getName().length() == 18
this.theArray[0..this.topOfStack] == []
this.topOfStack <= orig(this.topOfStack)
this.theArray.getClass().getName().length() > size(this.theArray[])
===========================================================================
DataStructures.StackAr.makeEmpty():::EXIT;condition="not(orig(topOfStack == theArray.length - 1))"
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.theArray.getClass().getName().length() == orig(this.theArray.getClass().getName()).length()
size(this.theArray[]) == orig(size(this.theArray[]))
this.theArray[orig(this.topOfStack)+1..] == orig(this.theArray[this.topOfStack+1..])
this.theArray != null
this.theArray.getClass().getName() == java.lang.Object[].class
this.theArray[] elements == null
this.theArray[].getClass().getName() elements == null
this.topOfStack == -1
orig(this.topOfStack) >= -1
this.theArray.getClass().getName().length() == 18
size(this.theArray[]) >= 1
this.theArray[0..this.topOfStack] == []
orig(this.theArray[0..this.topOfStack]) elements != null
orig(this.theArray[0..this.topOfStack]) elements are equal
this.theArray[] is a subset of orig(this.theArray[])
this.topOfStack <= orig(this.topOfStack)
this.topOfStack < size(this.theArray[])-1
orig(this.theArray[0..this.topOfStack]) elements == orig(this)
orig(this.topOfStack) < this.theArray.getClass().getName().length()
size(this.theArray[]) % orig(this.topOfStack) == 0
orig(this.topOfStack) < size(this.theArray[])-1
(size(this.theArray[]) >> this.theArray.getClass().getName().length() == 0)
this.theArray.getClass().getName().length() != size(this.theArray[])
(size(this.theArray[])-1 >> this.theArray.getClass().getName().length() == 0)
this.theArray.getClass().getName().length() != size(this.theArray[])-1
===========================================================================
DataStructures.StackAr.makeEmpty():::EXIT;condition="topOfStack == theArray.length - 1"
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.theArray[] == orig(this.theArray[])
this.topOfStack == orig(this.topOfStack)
this.topOfStack == size(this.theArray[])-1
this.topOfStack == orig(size(this.theArray[]))-1
this.theArray.getClass().getName().length() == orig(this.theArray.getClass().getName()).length()
this.theArray.getClass().getName() == java.lang.Object[].class
this.theArray[] == []
this.theArray[].getClass().getName() == []
this.theArray.getClass().getName().length() == 18
===========================================================================
DataStructures.StackAr.makeEmpty():::EXIT;condition="not(topOfStack == theArray.length - 1)"
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.theArray.getClass().getName().length() == orig(this.theArray.getClass().getName()).length()
size(this.theArray[]) == orig(size(this.theArray[]))
this.theArray[orig(this.topOfStack)+1..] == orig(this.theArray[this.topOfStack+1..])
this.theArray != null
this.theArray.getClass().getName() == java.lang.Object[].class
this.theArray[] elements == null
this.theArray[].getClass().getName() elements == null
this.topOfStack == -1
this.theArray.getClass().getName().length() == 18
size(this.theArray[]) >= 1
this.theArray[0..this.topOfStack] == []
this.topOfStack <= orig(this.topOfStack)
this.topOfStack < size(this.theArray[])-1
orig(this.topOfStack) < this.theArray.getClass().getName().length()
(orig(this.topOfStack) == 0) ==> (size(this.theArray[])-1 == 0)
orig(this.topOfStack) <= size(this.theArray[])-1
(size(this.theArray[]) >> this.theArray.getClass().getName().length() == 0)
this.theArray.getClass().getName().length() != size(this.theArray[])
(size(this.theArray[])-1 >> this.theArray.getClass().getName().length() == 0)
this.theArray.getClass().getName().length() != size(this.theArray[])-1
===========================================================================
DataStructures.StackAr.pop():::ENTER
(this.topOfStack == 0)  ==>  (size(this.theArray[]) one of { 2, 3, 20 })
(this.topOfStack == 0)  ==>  (this.theArray[0..this.topOfStack-1] == [])
(this.topOfStack == 0)  ==>  (this.theArray[0..this.topOfStack] elements == this.theArray[this.topOfStack])
(this.topOfStack == 0)  ==>  (this.topOfStack is a pointer)
this.topOfStack >= 0
this.theArray[0..this.topOfStack] contains no duplicates
(this.topOfStack >> this.theArray.getClass().getName().length() == 0)
===========================================================================
DataStructures.StackAr.pop():::ENTER;condition="topOfStack == -1"
this.topOfStack == 0
size(this.theArray[]) one of { 2, 3, 20 }
this.theArray[0..this.topOfStack-1] == []
this.theArray[0..this.topOfStack] elements == this.theArray[this.topOfStack]
===========================================================================
DataStructures.StackAr.pop():::ENTER;condition="not(topOfStack == -1)"
this.topOfStack >= 1
===========================================================================
DataStructures.StackAr.pop():::ENTER;condition="not(topOfStack == theArray.length - 1)"
this.theArray != null
this.theArray.getClass().getName() == java.lang.Object[].class
this.topOfStack >= 0
this.theArray.getClass().getName().length() == 18
this.theArray[this.topOfStack+1..] elements == null
this.theArray[0..this.topOfStack] contains no duplicates
this.theArray[0..this.topOfStack] elements != null
(this.topOfStack >> this.theArray.getClass().getName().length() == 0)
this.topOfStack <= size(this.theArray[])-1
this.theArray.getClass().getName().length() != size(this.theArray[])
this.theArray.getClass().getName().length() != size(this.theArray[])-1
===========================================================================
DataStructures.StackAr.pop():::ENTER;condition="isEmpty()"
this.theArray.getClass().getName() == java.lang.Object[].class
this.topOfStack == 0
this.theArray.getClass().getName().length() == 18
size(this.theArray[]) one of { 2, 3, 20 }
this.theArray[this.topOfStack+1..] elements == null
this.theArray[0..this.topOfStack-1] == []
this.theArray[0..this.topOfStack] elements == this.theArray[this.topOfStack]
===========================================================================
DataStructures.StackAr.pop():::ENTER;condition="not(isEmpty())"
this.theArray != null
this.theArray.getClass().getName() == java.lang.Object[].class
this.topOfStack >= 1
this.theArray.getClass().getName().length() == 18
this.theArray[this.topOfStack+1..] elements == null
this.theArray[0..this.topOfStack] contains no duplicates
this.theArray[0..this.topOfStack] elements != null
(this.topOfStack >> this.theArray.getClass().getName().length() == 0)
this.topOfStack <= size(this.theArray[])-1
this.theArray.getClass().getName().length() != size(this.theArray[])
this.theArray.getClass().getName().length() != size(this.theArray[])-1
===========================================================================
DataStructures.StackAr.pop():::EXIT
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.theArray.getClass().getName().length() == orig(this.theArray.getClass().getName()).length()
size(this.theArray[]) == orig(size(this.theArray[]))
this.theArray[0..this.topOfStack] == orig(this.theArray[0..post(this.topOfStack)])
this.theArray[0..this.topOfStack] == orig(this.theArray[0..this.topOfStack-1])
this.theArray[orig(this.topOfStack)+1..] == orig(this.theArray[this.topOfStack+1..])
(orig(this.topOfStack) < size(this.theArray[])-1)  ==>  (orig(this.topOfStack) <= this.theArray.getClass().getName().length())
(orig(this.topOfStack) < size(this.theArray[])-1)  ==>  (this.theArray[] is a subset of orig(this.theArray[]))
(orig(this.topOfStack) < size(this.theArray[])-1)  ==>  (this.theArray[orig(this.topOfStack)] in orig(this.theArray[this.topOfStack..]))
(orig(this.topOfStack) < size(this.theArray[])-1)  ==>  (this.theArray[this.topOfStack+1..] is a subset of orig(this.theArray[this.topOfStack..]))
(orig(this.topOfStack) < size(this.theArray[])-1)  ==>  (this.theArray[this.topOfStack+1..orig(this.topOfStack)] is a subsequence of orig(this.theArray[this.topOfStack..]))
(orig(this.topOfStack) < size(this.theArray[])-1)  ==>  (this.topOfStack < this.theArray.getClass().getName().length())
(orig(this.topOfStack) < size(this.theArray[])-1)  ==>  (this.topOfStack >= -1)
(orig(this.topOfStack) == size(this.theArray[])-1)  ==>  (orig(this.theArray[this.topOfStack..]) elements == orig(this.theArray[this.topOfStack]))
(orig(this.topOfStack) == size(this.theArray[])-1)  ==>  (this.theArray[0..this.topOfStack-1] == orig(this.theArray[0..post(this.topOfStack)-1]))
(orig(this.topOfStack) == size(this.theArray[])-1)  ==>  (this.theArray[orig(this.topOfStack)+1..] == [])
(orig(this.topOfStack) == size(this.theArray[])-1)  ==>  (this.theArray[this.topOfStack+1..] == [null])
(orig(this.topOfStack) == size(this.theArray[])-1)  ==>  (this.theArray[this.topOfStack..orig(this.topOfStack)-1] elements == orig(this.theArray[post(this.topOfStack)]))
(orig(this.topOfStack) == size(this.theArray[])-1)  ==>  (this.theArray[this.topOfStack..orig(this.topOfStack)-1] elements == orig(this.theArray[this.topOfStack-1]))
(orig(this.topOfStack) == size(this.theArray[])-1)  ==>  (this.theArray[this.topOfStack..orig(this.topOfStack)-1] elements == this.theArray[orig(this.topOfStack)-1])
(orig(this.topOfStack) == size(this.theArray[])-1)  ==>  (this.theArray[this.topOfStack..orig(this.topOfStack)-1] elements == this.theArray[this.topOfStack])
(orig(this.topOfStack) == size(this.theArray[])-1)  ==>  (this.theArray[this.topOfStack..orig(this.topOfStack)-1] is a subsequence of orig(this.theArray[post(this.topOfStack)..]))
(orig(this.topOfStack) == size(this.theArray[])-1)  ==>  (this.theArray[this.topOfStack] == orig(this.theArray[post(this.topOfStack)]))
(orig(this.topOfStack) == size(this.theArray[])-1)  ==>  (this.theArray[this.topOfStack] == orig(this.theArray[this.topOfStack-1]))
(orig(this.topOfStack) == size(this.theArray[])-1)  ==>  (this.theArray[this.topOfStack] == this.theArray[orig(this.topOfStack)-1])
(orig(this.topOfStack) == size(this.theArray[])-1)  ==>  (this.topOfStack - size(this.theArray[]) + 2 == 0)
(this.topOfStack == -1)  <==>  (orig(this.topOfStack) == 0)
(this.topOfStack == -1)  ==>  (orig(this.theArray[0..this.topOfStack]) elements == orig(this.theArray[this.topOfStack]))
(this.topOfStack == -1)  ==>  (orig(this.theArray[]) is a superset of this.theArray[this.topOfStack+1..])
(this.topOfStack == -1)  ==>  (orig(this.topOfStack) is a pointer)
(this.topOfStack == -1)  ==>  (size(this.theArray[]) one of { 2, 3, 20 })
(this.topOfStack == -1)  ==>  (this.theArray[0..orig(this.topOfStack)] == [null])
(this.topOfStack == -1)  ==>  (this.theArray[0..orig(this.topOfStack)] is a subsequence of orig(this.theArray[]))
(this.topOfStack == -1)  ==>  (this.theArray[0..orig(this.topOfStack)] is a subsequence of orig(this.theArray[this.topOfStack..]))
(this.topOfStack == -1)  ==>  (this.theArray[0..this.topOfStack] == [])
(this.topOfStack == -1)  ==>  (this.theArray[] elements == null)
(this.topOfStack == -1)  ==>  (this.theArray[] elements == this.theArray[orig(this.topOfStack)])
(this.topOfStack == -1)  ==>  (this.theArray[] is a subset of orig(this.theArray[]))
(this.topOfStack == -1)  ==>  (this.theArray[] is a subset of orig(this.theArray[this.topOfStack..]))
(this.topOfStack == -1)  ==>  (this.theArray[].getClass().getName() elements == null)
(this.topOfStack == -1)  ==>  (this.theArray[this.topOfStack+1..] is a subset of orig(this.theArray[this.topOfStack..]))
(this.topOfStack == -1)  ==>  (this.theArray[this.topOfStack+1..orig(this.topOfStack)] is a subsequence of orig(this.theArray[]))
(this.topOfStack == -1)  ==>  (this.theArray[this.topOfStack+1..orig(this.topOfStack)] is a subsequence of orig(this.theArray[this.topOfStack..]))
(this.topOfStack >= 0)  <==>  (orig(this.topOfStack) >= 1)
(this.topOfStack >= 0)  ==>  (this.theArray[0..this.topOfStack-1] == orig(this.theArray[0..post(this.topOfStack)-1]))
(this.topOfStack >= 0)  ==>  (this.theArray[this.topOfStack..orig(this.topOfStack)-1] elements == orig(this.theArray[post(this.topOfStack)]))
(this.topOfStack >= 0)  ==>  (this.theArray[this.topOfStack..orig(this.topOfStack)-1] elements == orig(this.theArray[this.topOfStack-1]))
(this.topOfStack >= 0)  ==>  (this.theArray[this.topOfStack..orig(this.topOfStack)-1] elements == this.theArray[orig(this.topOfStack)-1])
(this.topOfStack >= 0)  ==>  (this.theArray[this.topOfStack..orig(this.topOfStack)-1] elements == this.theArray[this.topOfStack])
(this.topOfStack >= 0)  ==>  (this.theArray[this.topOfStack..orig(this.topOfStack)-1] is a subsequence of orig(this.theArray[0..this.topOfStack]))
(this.topOfStack >= 0)  ==>  (this.theArray[this.topOfStack..orig(this.topOfStack)-1] is a subsequence of orig(this.theArray[post(this.topOfStack)..]))
(this.topOfStack >= 0)  ==>  (this.theArray[this.topOfStack] == orig(this.theArray[post(this.topOfStack)]))
(this.topOfStack >= 0)  ==>  (this.theArray[this.topOfStack] == orig(this.theArray[this.topOfStack-1]))
(this.topOfStack >= 0)  ==>  (this.theArray[this.topOfStack] == this.theArray[orig(this.topOfStack)-1])
(this.topOfStack >= 0)  ==>  (this.topOfStack - orig(this.topOfStack) + 1 == 0)
this.theArray[orig(this.topOfStack)] == null
this.theArray[0..orig(this.topOfStack)] contains no duplicates
this.theArray[this.topOfStack+1..orig(this.topOfStack)] == [null]
this.theArray[this.topOfStack+1..orig(this.topOfStack)-1] == []
this.topOfStack - orig(this.topOfStack) + 1 == 0
this.topOfStack <= this.theArray.getClass().getName().length()
this.topOfStack < size(this.theArray[])-1
(orig(this.topOfStack) >> this.theArray.getClass().getName().length() == 0)
orig(this.topOfStack) <= size(this.theArray[])-1
this.theArray[this.topOfStack+1..] elements == this.theArray[orig(this.topOfStack)]
===========================================================================
DataStructures.StackAr.pop():::EXIT;condition="not(orig(topOfStack == -1))"
===========================================================================
DataStructures.StackAr.pop():::EXIT;condition="topOfStack == -1"
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.theArray.getClass().getName().length() == orig(this.theArray.getClass().getName()).length()
size(this.theArray[]) == orig(size(this.theArray[]))
this.theArray[orig(this.topOfStack)+1..] == orig(this.theArray[this.topOfStack+1..])
this.theArray.getClass().getName() == java.lang.Object[].class
this.theArray[] elements == null
this.theArray[].getClass().getName() elements == null
this.topOfStack == -1
this.theArray.getClass().getName().length() == 18
size(this.theArray[]) one of { 2, 3, 20 }
this.theArray[0..this.topOfStack] == []
this.theArray[0..orig(this.topOfStack)] == [null]
this.theArray[] is a subset of orig(this.theArray[])
this.theArray[] elements == this.theArray[orig(this.topOfStack)]
this.theArray[0..orig(this.topOfStack)] is a subsequence of orig(this.theArray[])
===========================================================================
DataStructures.StackAr.pop():::EXIT;condition="not(topOfStack == -1)"
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.theArray.getClass().getName().length() == orig(this.theArray.getClass().getName()).length()
size(this.theArray[]) == orig(size(this.theArray[]))
this.theArray[this.topOfStack] == this.theArray[orig(this.topOfStack)-1]
this.theArray[this.topOfStack] == orig(this.theArray[post(this.topOfStack)])
this.theArray[this.topOfStack] == orig(this.theArray[this.topOfStack-1])
this.theArray[0..this.topOfStack] == orig(this.theArray[0..post(this.topOfStack)])
this.theArray[0..this.topOfStack] == orig(this.theArray[0..this.topOfStack-1])
this.theArray[0..this.topOfStack-1] == orig(this.theArray[0..post(this.topOfStack)-1])
this.theArray[orig(this.topOfStack)+1..] == orig(this.theArray[this.topOfStack+1..])
this.theArray != null
this.theArray.getClass().getName() == java.lang.Object[].class
this.topOfStack >= 0
this.theArray.getClass().getName().length() == 18
this.theArray[this.topOfStack+1..] elements == null
this.theArray[orig(this.topOfStack)] == null
this.theArray[0..orig(this.topOfStack)] contains no duplicates
this.theArray[this.topOfStack+1..orig(this.topOfStack)] == [null]
this.theArray[this.topOfStack+1..orig(this.topOfStack)-1] == []
this.topOfStack - orig(this.topOfStack) + 1 == 0
this.topOfStack <= this.theArray.getClass().getName().length()
this.topOfStack < size(this.theArray[])-1
(orig(this.topOfStack) >> this.theArray.getClass().getName().length() == 0)
orig(this.topOfStack) <= size(this.theArray[])-1
this.theArray.getClass().getName().length() != size(this.theArray[])
this.theArray.getClass().getName().length() != size(this.theArray[])-1
this.theArray[this.topOfStack..orig(this.topOfStack)-1] elements == this.theArray[this.topOfStack]
this.theArray[this.topOfStack+1..] elements == this.theArray[orig(this.topOfStack)]
this.theArray[this.topOfStack..orig(this.topOfStack)-1] is a subsequence of orig(this.theArray[post(this.topOfStack)..])
this.theArray[this.topOfStack..orig(this.topOfStack)-1] is a subsequence of orig(this.theArray[0..this.topOfStack])
===========================================================================
DataStructures.StackAr.pop():::EXIT;condition="orig(topOfStack == theArray.length - 1)"
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
orig(this.topOfStack) == size(this.theArray[])-1
orig(this.topOfStack) == orig(size(this.theArray[]))-1
this.theArray.getClass().getName().length() == orig(this.theArray.getClass().getName()).length()
size(this.theArray[]) == orig(size(this.theArray[]))
this.theArray[this.topOfStack] == this.theArray[orig(this.topOfStack)-1]
this.theArray[this.topOfStack] == orig(this.theArray[post(this.topOfStack)])
this.theArray[this.topOfStack] == orig(this.theArray[this.topOfStack-1])
this.theArray[0..this.topOfStack] == orig(this.theArray[0..post(this.topOfStack)])
this.theArray[0..this.topOfStack] == orig(this.theArray[0..this.topOfStack-1])
this.theArray[0..this.topOfStack-1] == orig(this.theArray[0..post(this.topOfStack)-1])
this.theArray.getClass().getName() == java.lang.Object[].class
this.theArray.getClass().getName().length() == 18
this.theArray[this.topOfStack+1..] == [null]
this.theArray[this.topOfStack+1..] elements == null
this.theArray[orig(this.topOfStack)] == null
this.theArray[orig(this.topOfStack)+1..] == []
this.topOfStack - size(this.theArray[]) + 2 == 0
this.theArray[this.topOfStack..orig(this.topOfStack)-1] elements == this.theArray[this.topOfStack]
this.theArray[this.topOfStack+1..] elements == this.theArray[orig(this.topOfStack)]
this.theArray[this.topOfStack..orig(this.topOfStack)-1] is a subsequence of orig(this.theArray[post(this.topOfStack)..])
orig(this.theArray[this.topOfStack..]) elements == orig(this.theArray[this.topOfStack])
===========================================================================
DataStructures.StackAr.pop():::EXIT;condition="not(orig(topOfStack == theArray.length - 1))"
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.theArray.getClass().getName().length() == orig(this.theArray.getClass().getName()).length()
size(this.theArray[]) == orig(size(this.theArray[]))
this.theArray[0..this.topOfStack] == orig(this.theArray[0..post(this.topOfStack)])
this.theArray[0..this.topOfStack] == orig(this.theArray[0..this.topOfStack-1])
this.theArray[orig(this.topOfStack)+1..] == orig(this.theArray[this.topOfStack+1..])
this.theArray != null
this.theArray.getClass().getName() == java.lang.Object[].class
this.topOfStack >= -1
orig(this.topOfStack) >= 0
this.theArray.getClass().getName().length() == 18
this.theArray[this.topOfStack+1..] elements == null
this.theArray[orig(this.topOfStack)] == null
this.theArray[0..orig(this.topOfStack)] contains no duplicates
orig(this.theArray[0..this.topOfStack]) contains no duplicates
orig(this.theArray[0..this.topOfStack]) elements != null
this.theArray[this.topOfStack+1..orig(this.topOfStack)] == [null]
this.theArray[this.topOfStack+1..orig(this.topOfStack)-1] == []
this.theArray[] is a subset of orig(this.theArray[])
this.topOfStack - orig(this.topOfStack) + 1 == 0
this.topOfStack < this.theArray.getClass().getName().length()
this.topOfStack < size(this.theArray[])-1
orig(this.topOfStack) <= this.theArray.getClass().getName().length()
orig(this.topOfStack) < size(this.theArray[])-1
this.theArray.getClass().getName().length() != size(this.theArray[])
this.theArray.getClass().getName().length() != size(this.theArray[])-1
this.theArray[this.topOfStack+1..] elements == this.theArray[orig(this.topOfStack)]
this.theArray[this.topOfStack+1..] is a subset of orig(this.theArray[this.topOfStack..])
this.theArray[orig(this.topOfStack)] in orig(this.theArray[this.topOfStack..])
this.theArray[this.topOfStack+1..orig(this.topOfStack)] is a subsequence of orig(this.theArray[this.topOfStack..])
===========================================================================
DataStructures.StackAr.pop():::EXIT;condition="not(topOfStack == theArray.length - 1)"
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.theArray.getClass().getName().length() == orig(this.theArray.getClass().getName()).length()
size(this.theArray[]) == orig(size(this.theArray[]))
this.theArray[0..this.topOfStack] == orig(this.theArray[0..post(this.topOfStack)])
this.theArray[0..this.topOfStack] == orig(this.theArray[0..this.topOfStack-1])
this.theArray[orig(this.topOfStack)+1..] == orig(this.theArray[this.topOfStack+1..])
this.theArray != null
this.theArray.getClass().getName() == java.lang.Object[].class
this.topOfStack >= -1
this.theArray.getClass().getName().length() == 18
this.theArray[this.topOfStack+1..] elements == null
this.theArray[orig(this.topOfStack)] == null
this.theArray[0..orig(this.topOfStack)] contains no duplicates
this.theArray[this.topOfStack+1..orig(this.topOfStack)] == [null]
this.theArray[this.topOfStack+1..orig(this.topOfStack)-1] == []
this.topOfStack - orig(this.topOfStack) + 1 == 0
this.topOfStack <= this.theArray.getClass().getName().length()
this.topOfStack < size(this.theArray[])-1
(orig(this.topOfStack) >> this.theArray.getClass().getName().length() == 0)
orig(this.topOfStack) <= size(this.theArray[])-1
this.theArray.getClass().getName().length() != size(this.theArray[])
this.theArray.getClass().getName().length() != size(this.theArray[])-1
this.theArray[this.topOfStack+1..] elements == this.theArray[orig(this.topOfStack)]
===========================================================================
DataStructures.StackAr.pop():::EXIT;condition="isEmpty()"
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.theArray.getClass().getName().length() == orig(this.theArray.getClass().getName()).length()
size(this.theArray[]) == orig(size(this.theArray[]))
this.theArray[orig(this.topOfStack)+1..] == orig(this.theArray[this.topOfStack+1..])
this.theArray.getClass().getName() == java.lang.Object[].class
this.theArray[] elements == null
this.theArray[].getClass().getName() elements == null
this.topOfStack == -1
this.theArray.getClass().getName().length() == 18
size(this.theArray[]) one of { 2, 3, 20 }
this.theArray[0..this.topOfStack] == []
this.theArray[0..orig(this.topOfStack)] == [null]
this.theArray[] is a subset of orig(this.theArray[])
this.theArray[] elements == this.theArray[orig(this.topOfStack)]
this.theArray[0..orig(this.topOfStack)] is a subsequence of orig(this.theArray[])
===========================================================================
DataStructures.StackAr.pop():::EXIT;condition="not(isEmpty())"
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.theArray.getClass().getName().length() == orig(this.theArray.getClass().getName()).length()
size(this.theArray[]) == orig(size(this.theArray[]))
this.theArray[this.topOfStack] == this.theArray[orig(this.topOfStack)-1]
this.theArray[this.topOfStack] == orig(this.theArray[post(this.topOfStack)])
this.theArray[this.topOfStack] == orig(this.theArray[this.topOfStack-1])
this.theArray[0..this.topOfStack] == orig(this.theArray[0..post(this.topOfStack)])
this.theArray[0..this.topOfStack] == orig(this.theArray[0..this.topOfStack-1])
this.theArray[0..this.topOfStack-1] == orig(this.theArray[0..post(this.topOfStack)-1])
this.theArray[orig(this.topOfStack)+1..] == orig(this.theArray[this.topOfStack+1..])
this.theArray != null
this.theArray.getClass().getName() == java.lang.Object[].class
this.topOfStack >= 0
this.theArray.getClass().getName().length() == 18
this.theArray[this.topOfStack+1..] elements == null
this.theArray[orig(this.topOfStack)] == null
this.theArray[0..orig(this.topOfStack)] contains no duplicates
this.theArray[this.topOfStack+1..orig(this.topOfStack)] == [null]
this.theArray[this.topOfStack+1..orig(this.topOfStack)-1] == []
this.topOfStack - orig(this.topOfStack) + 1 == 0
this.topOfStack <= this.theArray.getClass().getName().length()
this.topOfStack < size(this.theArray[])-1
(orig(this.topOfStack) >> this.theArray.getClass().getName().length() == 0)
orig(this.topOfStack) <= size(this.theArray[])-1
this.theArray.getClass().getName().length() != size(this.theArray[])
this.theArray.getClass().getName().length() != size(this.theArray[])-1
this.theArray[this.topOfStack..orig(this.topOfStack)-1] elements == this.theArray[this.topOfStack]
this.theArray[this.topOfStack+1..] elements == this.theArray[orig(this.topOfStack)]
this.theArray[this.topOfStack..orig(this.topOfStack)-1] is a subsequence of orig(this.theArray[post(this.topOfStack)..])
this.theArray[this.topOfStack..orig(this.topOfStack)-1] is a subsequence of orig(this.theArray[0..this.topOfStack])
===========================================================================
DataStructures.StackAr.pop():::EXIT;condition="not(orig(isEmpty()))"
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.theArray.getClass().getName().length() == orig(this.theArray.getClass().getName()).length()
size(this.theArray[]) == orig(size(this.theArray[]))
this.theArray[0..this.topOfStack] == orig(this.theArray[0..post(this.topOfStack)])
this.theArray[0..this.topOfStack] == orig(this.theArray[0..this.topOfStack-1])
this.theArray[orig(this.topOfStack)+1..] == orig(this.theArray[this.topOfStack+1..])
this.theArray != null
this.theArray.getClass().getName() == java.lang.Object[].class
this.topOfStack >= -1
orig(this.topOfStack) >= 0
this.theArray.getClass().getName().length() == 18
this.theArray[this.topOfStack+1..] elements == null
this.theArray[orig(this.topOfStack)] == null
this.theArray[0..orig(this.topOfStack)] contains no duplicates
orig(this.theArray[0..this.topOfStack]) contains no duplicates
orig(this.theArray[0..this.topOfStack]) elements != null
this.theArray[this.topOfStack+1..orig(this.topOfStack)] == [null]
this.theArray[this.topOfStack+1..orig(this.topOfStack)-1] == []
this.topOfStack - orig(this.topOfStack) + 1 == 0
this.topOfStack <= this.theArray.getClass().getName().length()
this.topOfStack < size(this.theArray[])-1
(orig(this.topOfStack) >> this.theArray.getClass().getName().length() == 0)
orig(this.topOfStack) <= size(this.theArray[])-1
this.theArray.getClass().getName().length() != size(this.theArray[])
this.theArray.getClass().getName().length() != size(this.theArray[])-1
this.theArray[this.topOfStack+1..] elements == this.theArray[orig(this.topOfStack)]
===========================================================================
DataStructures.StackAr.push(java.lang.Object):::ENTER
x != null
x.getClass().getName() is printable
x.getClass().getName().length() one of { 16, 22, 24 }
x.getClass().getName().length() == 0  (mod 2)
this.theArray.getClass().getName() != x.getClass().getName()
this.topOfStack <= this.theArray.getClass().getName().length()
this.topOfStack < size(this.theArray[])-1
(size(this.theArray[])-1 >> this.theArray.getClass().getName().length() == 0)
this.theArray.getClass().getName().length() != x.getClass().getName().length()
(size(this.theArray[]) >> x.getClass().getName().length() == 0)
size(this.theArray[]) != x.getClass().getName().length()
(size(this.theArray[])-1 >> x.getClass().getName().length() == 0)
size(this.theArray[])-1 != x.getClass().getName().length()
===========================================================================
DataStructures.StackAr.push(java.lang.Object):::ENTER;condition="not(topOfStack == -1)"
===========================================================================
DataStructures.StackAr.push(java.lang.Object):::ENTER;condition="topOfStack == theArray.length - 1"
this.theArray != null
this.theArray.getClass().getName() == java.lang.Object[].class
x != null
x.getClass().getName() is printable
this.theArray.getClass().getName().length() == 18
x.getClass().getName().length() one of { 16, 22, 24 }
x.getClass().getName().length() == 0  (mod 2)
this.theArray[this.topOfStack+1..] == [null]
this.theArray[this.topOfStack+1..] elements == null
this.theArray[0..this.topOfStack] elements != null
this.theArray.getClass().getName() != x.getClass().getName()
this.topOfStack <= this.theArray.getClass().getName().length()
this.topOfStack - size(this.theArray[]) + 2 == 0
this.topOfStack != x.getClass().getName().length()
(size(this.theArray[]) >> this.theArray.getClass().getName().length() == 0)
this.theArray.getClass().getName().length() != size(this.theArray[])
(size(this.theArray[])-1 >> this.theArray.getClass().getName().length() == 0)
this.theArray.getClass().getName().length() != size(this.theArray[])-1
this.theArray.getClass().getName().length() != x.getClass().getName().length()
(size(this.theArray[]) >> x.getClass().getName().length() == 0)
size(this.theArray[]) != x.getClass().getName().length()
(size(this.theArray[])-1 >> x.getClass().getName().length() == 0)
size(this.theArray[])-1 != x.getClass().getName().length()
===========================================================================
DataStructures.StackAr.push(java.lang.Object):::ENTER;condition="not(topOfStack == theArray.length - 1)"
this.theArray != null
this.theArray.getClass().getName() == java.lang.Object[].class
this.topOfStack >= -1
x != null
x.getClass().getName() is printable
this.theArray.getClass().getName().length() == 18
x.getClass().getName().length() one of { 16, 22, 24 }
x.getClass().getName().length() == 0  (mod 2)
this.theArray[this.topOfStack+1..] elements == null
this.theArray[0..this.topOfStack] elements != null
this.theArray.getClass().getName() != x.getClass().getName()
this.topOfStack < this.theArray.getClass().getName().length()
this.topOfStack < size(this.theArray[])-1
this.theArray.getClass().getName().length() != size(this.theArray[])
this.theArray.getClass().getName().length() != size(this.theArray[])-1
this.theArray.getClass().getName().length() != x.getClass().getName().length()
(size(this.theArray[]) >> x.getClass().getName().length() == 0)
size(this.theArray[]) != x.getClass().getName().length()
(size(this.theArray[])-1 >> x.getClass().getName().length() == 0)
size(this.theArray[])-1 != x.getClass().getName().length()
===========================================================================
DataStructures.StackAr.push(java.lang.Object):::ENTER;condition="not(isEmpty())"
this.theArray != null
this.theArray.getClass().getName() == java.lang.Object[].class
this.topOfStack >= -1
x != null
x.getClass().getName() is printable
this.theArray.getClass().getName().length() == 18
x.getClass().getName().length() one of { 16, 22, 24 }
x.getClass().getName().length() == 0  (mod 2)
this.theArray[this.topOfStack+1..] elements == null
this.theArray[0..this.topOfStack] elements != null
this.theArray.getClass().getName() != x.getClass().getName()
this.topOfStack <= this.theArray.getClass().getName().length()
this.topOfStack < size(this.theArray[])-1
(size(this.theArray[]) >> this.theArray.getClass().getName().length() == 0)
this.theArray.getClass().getName().length() != size(this.theArray[])
(size(this.theArray[])-1 >> this.theArray.getClass().getName().length() == 0)
this.theArray.getClass().getName().length() != size(this.theArray[])-1
this.theArray.getClass().getName().length() != x.getClass().getName().length()
(size(this.theArray[]) >> x.getClass().getName().length() == 0)
size(this.theArray[]) != x.getClass().getName().length()
(size(this.theArray[])-1 >> x.getClass().getName().length() == 0)
size(this.theArray[])-1 != x.getClass().getName().length()
===========================================================================
DataStructures.StackAr.push(java.lang.Object):::EXIT
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
orig(x) == this.theArray[this.topOfStack]
this.theArray.getClass().getName().length() == orig(this.theArray.getClass().getName()).length()
size(this.theArray[]) == orig(size(this.theArray[]))
x.getClass().getName().length() == orig(x.getClass().getName()).length()
this.theArray[this.topOfStack+1..] == orig(this.theArray[post(this.topOfStack)+1..])
this.theArray[0..this.topOfStack-1] == orig(this.theArray[0..post(this.topOfStack)-1])
this.theArray[0..this.topOfStack-1] == orig(this.theArray[0..this.topOfStack])
(this.topOfStack < size(this.theArray[])-1)  ==>  (orig(this.theArray[post(this.topOfStack)]) in this.theArray[this.topOfStack..])
(this.topOfStack < size(this.theArray[])-1)  ==>  (orig(this.topOfStack) < this.theArray.getClass().getName().length())
(this.topOfStack < size(this.theArray[])-1)  ==>  (this.theArray[] is a superset of orig(this.theArray[]))
(this.topOfStack < size(this.theArray[])-1)  ==>  (this.topOfStack <= this.theArray.getClass().getName().length())
(this.topOfStack == 0)  <==>  (orig(this.topOfStack) == -1)
(this.topOfStack == 0)  ==>  (orig(this.theArray[0..post(this.topOfStack)]) == [null])
(this.topOfStack == 0)  ==>  (orig(this.theArray[]) elements == null)
(this.topOfStack == 0)  ==>  (orig(this.theArray[]) elements == orig(this.theArray[post(this.topOfStack)]))
(this.topOfStack == 0)  ==>  (orig(this.theArray[].getClass().getName()) elements == null)
(this.topOfStack == 0)  ==>  (orig(this.topOfStack) < this.theArray.getClass().getName().length())
(this.topOfStack == 0)  ==>  (orig(this.topOfStack) < x.getClass().getName().length())
(this.topOfStack == 0)  ==>  (this.theArray[0..this.topOfStack-1] == [])
(this.topOfStack == 0)  ==>  (this.theArray[0..this.topOfStack] elements == orig(x))
(this.topOfStack == 0)  ==>  (this.topOfStack < this.theArray.getClass().getName().length())
(this.topOfStack == 0)  ==>  (this.topOfStack < x.getClass().getName().length())
(this.topOfStack == 0)  ==>  (this.topOfStack is a pointer)
(this.topOfStack == size(this.theArray[])-1)  ==>  (orig(this.theArray[post(this.topOfStack)..]) == [null])
(this.topOfStack == size(this.theArray[])-1)  ==>  (orig(this.topOfStack) != x.getClass().getName().length())
(this.topOfStack == size(this.theArray[])-1)  ==>  (orig(this.topOfStack) - size(this.theArray[]) + 2 == 0)
(this.topOfStack == size(this.theArray[])-1)  ==>  (this.theArray[] elements != null)
(this.topOfStack == size(this.theArray[])-1)  ==>  (this.theArray[this.topOfStack+1..] == [])
(this.topOfStack == size(this.theArray[])-1)  ==>  (this.theArray[this.topOfStack..] elements == orig(x))
(this.topOfStack == size(this.theArray[])-1)  ==>  (this.topOfStack != this.theArray.getClass().getName().length())
(this.topOfStack == size(this.theArray[])-1)  ==>  (this.topOfStack != x.getClass().getName().length())
this.topOfStack >= 0
x.getClass().getName().length() one of { 16, 22, 24 }
x.getClass().getName().length() == 0  (mod 2)
orig(this.theArray[post(this.topOfStack)..]) elements == null
this.theArray[orig(this.topOfStack)+1..this.topOfStack-1] == []
this.theArray.getClass().getName() != orig(x.getClass().getName())
orig(x.getClass().getName()) in this.theArray[].getClass().getName()
this.topOfStack - orig(this.topOfStack) - 1 == 0
(this.topOfStack >> this.theArray.getClass().getName().length() == 0)
(size(this.theArray[])-1 == 0) ==> (this.topOfStack == 0)
(this.topOfStack >> x.getClass().getName().length() == 0)
orig(this.topOfStack) <= this.theArray.getClass().getName().length()
orig(this.topOfStack) < size(this.theArray[])-1
this.theArray[orig(this.topOfStack)+1..this.topOfStack] elements == orig(x)
(size(this.theArray[])-1 >> this.theArray.getClass().getName().length() == 0)
this.theArray.getClass().getName().length() != x.getClass().getName().length()
(size(this.theArray[]) >> x.getClass().getName().length() == 0)
size(this.theArray[]) != x.getClass().getName().length()
(size(this.theArray[])-1 >> x.getClass().getName().length() == 0)
size(this.theArray[])-1 != x.getClass().getName().length()
orig(this.theArray[post(this.topOfStack)..]) elements == orig(this.theArray[post(this.topOfStack)])
===========================================================================
DataStructures.StackAr.push(java.lang.Object):::EXIT;condition="orig(topOfStack == -1)"
this.topOfStack == 0
orig(this.theArray[]) elements == null
orig(this.theArray[].getClass().getName()) elements == null
orig(this.topOfStack) == -1
this.theArray[0..this.topOfStack-1] == []
orig(this.theArray[0..post(this.topOfStack)]) == [null]
this.topOfStack < x.getClass().getName().length()
orig(this.theArray[]) elements == orig(this.theArray[post(this.topOfStack)])
orig(this.topOfStack) < x.getClass().getName().length()
this.theArray[0..this.topOfStack] elements == orig(x)
===========================================================================
DataStructures.StackAr.push(java.lang.Object):::EXIT;condition="not(orig(topOfStack == -1))"
this.theArray[this.topOfStack-1] == this.theArray[orig(this.topOfStack)]
this.theArray[this.topOfStack-1] == orig(this.theArray[post(this.topOfStack)-1])
this.theArray[this.topOfStack-1] == orig(this.theArray[this.topOfStack])
this.theArray[0..orig(this.topOfStack)-1] == orig(this.theArray[0..this.topOfStack-1])
this.topOfStack >= 1
orig(this.topOfStack) >= 0
(orig(this.topOfStack) >> x.getClass().getName().length() == 0)
this.theArray[orig(this.topOfStack)..this.topOfStack-1] elements == this.theArray[this.topOfStack-1]
this.theArray[orig(this.topOfStack)..this.topOfStack-1] is a subsequence of orig(this.theArray[0..post(this.topOfStack)])
this.theArray[orig(this.topOfStack)..this.topOfStack-1] is a subsequence of orig(this.theArray[this.topOfStack..])
===========================================================================
DataStructures.StackAr.push(java.lang.Object):::EXIT;condition="not(topOfStack == -1)"
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
orig(x) == this.theArray[this.topOfStack]
this.theArray.getClass().getName().length() == orig(this.theArray.getClass().getName()).length()
size(this.theArray[]) == orig(size(this.theArray[]))
x.getClass().getName().length() == orig(x.getClass().getName()).length()
this.theArray[this.topOfStack+1..] == orig(this.theArray[post(this.topOfStack)+1..])
this.theArray[0..this.topOfStack-1] == orig(this.theArray[0..post(this.topOfStack)-1])
this.theArray[0..this.topOfStack-1] == orig(this.theArray[0..this.topOfStack])
this.theArray != null
this.theArray.getClass().getName() == java.lang.Object[].class
this.topOfStack >= 0
this.theArray.getClass().getName().length() == 18
x.getClass().getName().length() one of { 16, 22, 24 }
x.getClass().getName().length() == 0  (mod 2)
this.theArray[0..this.topOfStack] elements != null
orig(this.theArray[post(this.topOfStack)..]) elements == null
this.theArray[orig(this.topOfStack)+1..this.topOfStack-1] == []
this.theArray.getClass().getName() != orig(x.getClass().getName())
orig(x.getClass().getName()) in this.theArray[].getClass().getName()
this.topOfStack - orig(this.topOfStack) - 1 == 0
(this.topOfStack >> this.theArray.getClass().getName().length() == 0)
(size(this.theArray[])-1 == 0) ==> (this.topOfStack == 0)
this.topOfStack <= size(this.theArray[])-1
(this.topOfStack >> x.getClass().getName().length() == 0)
orig(this.topOfStack) <= this.theArray.getClass().getName().length()
orig(this.topOfStack) < size(this.theArray[])-1
this.theArray[orig(this.topOfStack)+1..this.topOfStack] elements == orig(x)
(size(this.theArray[]) >> this.theArray.getClass().getName().length() == 0)
this.theArray.getClass().getName().length() != size(this.theArray[])
(size(this.theArray[])-1 >> this.theArray.getClass().getName().length() == 0)
this.theArray.getClass().getName().length() != size(this.theArray[])-1
this.theArray.getClass().getName().length() != x.getClass().getName().length()
(size(this.theArray[]) >> x.getClass().getName().length() == 0)
size(this.theArray[]) != x.getClass().getName().length()
(size(this.theArray[])-1 >> x.getClass().getName().length() == 0)
size(this.theArray[])-1 != x.getClass().getName().length()
orig(this.theArray[post(this.topOfStack)..]) elements == orig(this.theArray[post(this.topOfStack)])
===========================================================================
DataStructures.StackAr.push(java.lang.Object):::EXIT;condition="not(orig(topOfStack == theArray.length - 1))"
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
orig(x) == this.theArray[this.topOfStack]
this.theArray.getClass().getName().length() == orig(this.theArray.getClass().getName()).length()
size(this.theArray[]) == orig(size(this.theArray[]))
x.getClass().getName().length() == orig(x.getClass().getName()).length()
this.theArray[this.topOfStack+1..] == orig(this.theArray[post(this.topOfStack)+1..])
this.theArray[0..this.topOfStack-1] == orig(this.theArray[0..post(this.topOfStack)-1])
this.theArray[0..this.topOfStack-1] == orig(this.theArray[0..this.topOfStack])
this.theArray != null
this.theArray.getClass().getName() == java.lang.Object[].class
this.topOfStack >= 0
orig(this.topOfStack) >= -1
orig(x.getClass().getName()) is printable
this.theArray.getClass().getName().length() == 18
x.getClass().getName().length() one of { 16, 22, 24 }
x.getClass().getName().length() == 0  (mod 2)
this.theArray[0..this.topOfStack] elements != null
orig(this.theArray[post(this.topOfStack)..]) elements == null
this.theArray[orig(this.topOfStack)+1..this.topOfStack-1] == []
this.theArray.getClass().getName() != orig(x.getClass().getName())
orig(x.getClass().getName()) in this.theArray[].getClass().getName()
this.topOfStack - orig(this.topOfStack) - 1 == 0
(this.topOfStack >> this.theArray.getClass().getName().length() == 0)
(size(this.theArray[])-1 == 0) ==> (this.topOfStack == 0)
this.topOfStack <= size(this.theArray[])-1
(this.topOfStack >> x.getClass().getName().length() == 0)
orig(this.topOfStack) <= this.theArray.getClass().getName().length()
orig(this.topOfStack) < size(this.theArray[])-1
this.theArray[orig(this.topOfStack)+1..this.topOfStack] elements == orig(x)
(size(this.theArray[]) >> this.theArray.getClass().getName().length() == 0)
this.theArray.getClass().getName().length() != size(this.theArray[])
(size(this.theArray[])-1 >> this.theArray.getClass().getName().length() == 0)
this.theArray.getClass().getName().length() != size(this.theArray[])-1
this.theArray.getClass().getName().length() != x.getClass().getName().length()
(size(this.theArray[]) >> x.getClass().getName().length() == 0)
size(this.theArray[]) != x.getClass().getName().length()
(size(this.theArray[])-1 >> x.getClass().getName().length() == 0)
size(this.theArray[])-1 != x.getClass().getName().length()
orig(this.theArray[post(this.topOfStack)..]) elements == orig(this.theArray[post(this.topOfStack)])
===========================================================================
DataStructures.StackAr.push(java.lang.Object):::EXIT;condition="topOfStack == theArray.length - 1"
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.topOfStack == size(this.theArray[])-1
this.topOfStack == orig(size(this.theArray[]))-1
orig(x) == this.theArray[this.topOfStack]
this.theArray.getClass().getName().length() == orig(this.theArray.getClass().getName()).length()
size(this.theArray[]) == orig(size(this.theArray[]))
x.getClass().getName().length() == orig(x.getClass().getName()).length()
this.theArray[0..this.topOfStack-1] == orig(this.theArray[0..post(this.topOfStack)-1])
this.theArray[0..this.topOfStack-1] == orig(this.theArray[0..this.topOfStack])
this.theArray != null
this.theArray.getClass().getName() == java.lang.Object[].class
this.theArray[] elements != null
this.theArray.getClass().getName().length() == 18
x.getClass().getName().length() one of { 16, 22, 24 }
x.getClass().getName().length() == 0  (mod 2)
this.theArray[this.topOfStack+1..] == []
orig(this.theArray[post(this.topOfStack)..]) == [null]
orig(this.theArray[post(this.topOfStack)..]) elements == null
this.theArray.getClass().getName() != orig(x.getClass().getName())
orig(x.getClass().getName()) in this.theArray[].getClass().getName()
(this.topOfStack >> this.theArray.getClass().getName().length() == 0)
this.topOfStack != this.theArray.getClass().getName().length()
(this.topOfStack >> x.getClass().getName().length() == 0)
this.topOfStack != x.getClass().getName().length()
orig(this.topOfStack) <= this.theArray.getClass().getName().length()
orig(this.topOfStack) - size(this.theArray[]) + 2 == 0
orig(this.topOfStack) != x.getClass().getName().length()
this.theArray[this.topOfStack..] elements == orig(x)
(size(this.theArray[]) >> this.theArray.getClass().getName().length() == 0)
this.theArray.getClass().getName().length() != size(this.theArray[])
this.theArray.getClass().getName().length() != x.getClass().getName().length()
(size(this.theArray[]) >> x.getClass().getName().length() == 0)
size(this.theArray[]) != x.getClass().getName().length()
orig(this.theArray[post(this.topOfStack)..]) elements == orig(this.theArray[post(this.topOfStack)])
===========================================================================
DataStructures.StackAr.push(java.lang.Object):::EXIT;condition="not(topOfStack == theArray.length - 1)"
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
orig(x) == this.theArray[this.topOfStack]
this.theArray.getClass().getName().length() == orig(this.theArray.getClass().getName()).length()
size(this.theArray[]) == orig(size(this.theArray[]))
x.getClass().getName().length() == orig(x.getClass().getName()).length()
this.theArray[this.topOfStack+1..] == orig(this.theArray[post(this.topOfStack)+1..])
this.theArray[0..this.topOfStack-1] == orig(this.theArray[0..post(this.topOfStack)-1])
this.theArray[0..this.topOfStack-1] == orig(this.theArray[0..this.topOfStack])
this.theArray != null
this.theArray.getClass().getName() == java.lang.Object[].class
this.topOfStack >= 0
this.theArray.getClass().getName().length() == 18
x.getClass().getName().length() one of { 16, 22, 24 }
x.getClass().getName().length() == 0  (mod 2)
this.theArray[0..this.topOfStack] elements != null
orig(this.theArray[post(this.topOfStack)..]) elements == null
this.theArray[orig(this.topOfStack)+1..this.topOfStack-1] == []
this.theArray.getClass().getName() != orig(x.getClass().getName())
this.theArray[] is a superset of orig(this.theArray[])
orig(x.getClass().getName()) in this.theArray[].getClass().getName()
this.topOfStack - orig(this.topOfStack) - 1 == 0
this.topOfStack <= this.theArray.getClass().getName().length()
this.topOfStack < size(this.theArray[])-1
(this.topOfStack >> x.getClass().getName().length() == 0)
orig(this.topOfStack) < this.theArray.getClass().getName().length()
orig(this.topOfStack) < size(this.theArray[])-1
this.theArray[orig(this.topOfStack)+1..this.topOfStack] elements == orig(x)
this.theArray.getClass().getName().length() != size(this.theArray[])
this.theArray.getClass().getName().length() != size(this.theArray[])-1
this.theArray.getClass().getName().length() != x.getClass().getName().length()
(size(this.theArray[]) >> x.getClass().getName().length() == 0)
size(this.theArray[]) != x.getClass().getName().length()
(size(this.theArray[])-1 >> x.getClass().getName().length() == 0)
size(this.theArray[])-1 != x.getClass().getName().length()
orig(this.theArray[post(this.topOfStack)]) in this.theArray[this.topOfStack..]
orig(this.theArray[post(this.topOfStack)..]) elements == orig(this.theArray[post(this.topOfStack)])
===========================================================================
DataStructures.StackAr.push(java.lang.Object):::EXIT;condition="not(isEmpty())"
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
orig(x) == this.theArray[this.topOfStack]
this.theArray.getClass().getName().length() == orig(this.theArray.getClass().getName()).length()
size(this.theArray[]) == orig(size(this.theArray[]))
x.getClass().getName().length() == orig(x.getClass().getName()).length()
this.theArray[this.topOfStack+1..] == orig(this.theArray[post(this.topOfStack)+1..])
this.theArray[0..this.topOfStack-1] == orig(this.theArray[0..post(this.topOfStack)-1])
this.theArray[0..this.topOfStack-1] == orig(this.theArray[0..this.topOfStack])
this.theArray != null
this.theArray.getClass().getName() == java.lang.Object[].class
this.topOfStack >= 0
this.theArray.getClass().getName().length() == 18
x.getClass().getName().length() one of { 16, 22, 24 }
x.getClass().getName().length() == 0  (mod 2)
this.theArray[0..this.topOfStack] elements != null
orig(this.theArray[post(this.topOfStack)..]) elements == null
this.theArray[orig(this.topOfStack)+1..this.topOfStack-1] == []
this.theArray.getClass().getName() != orig(x.getClass().getName())
orig(x.getClass().getName()) in this.theArray[].getClass().getName()
this.topOfStack - orig(this.topOfStack) - 1 == 0
(this.topOfStack >> this.theArray.getClass().getName().length() == 0)
(size(this.theArray[])-1 == 0) ==> (this.topOfStack == 0)
this.topOfStack <= size(this.theArray[])-1
(this.topOfStack >> x.getClass().getName().length() == 0)
orig(this.topOfStack) <= this.theArray.getClass().getName().length()
orig(this.topOfStack) < size(this.theArray[])-1
this.theArray[orig(this.topOfStack)+1..this.topOfStack] elements == orig(x)
(size(this.theArray[]) >> this.theArray.getClass().getName().length() == 0)
this.theArray.getClass().getName().length() != size(this.theArray[])
(size(this.theArray[])-1 >> this.theArray.getClass().getName().length() == 0)
this.theArray.getClass().getName().length() != size(this.theArray[])-1
this.theArray.getClass().getName().length() != x.getClass().getName().length()
(size(this.theArray[]) >> x.getClass().getName().length() == 0)
size(this.theArray[]) != x.getClass().getName().length()
(size(this.theArray[])-1 >> x.getClass().getName().length() == 0)
size(this.theArray[])-1 != x.getClass().getName().length()
orig(this.theArray[post(this.topOfStack)..]) elements == orig(this.theArray[post(this.topOfStack)])
===========================================================================
DataStructures.StackAr.push(java.lang.Object):::EXIT;condition="orig(isEmpty())"
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
orig(x) == this.theArray[this.topOfStack]
this.theArray.getClass().getName().length() == orig(this.theArray.getClass().getName()).length()
size(this.theArray[]) == orig(size(this.theArray[]))
x.getClass().getName().length() == orig(x.getClass().getName()).length()
this.theArray[this.topOfStack+1..] == orig(this.theArray[post(this.topOfStack)+1..])
this.theArray != null
this.theArray.getClass().getName() == java.lang.Object[].class
this.topOfStack == 0
orig(this.theArray[]) elements == null
orig(this.theArray[].getClass().getName()) elements == null
orig(this.topOfStack) == -1
orig(x.getClass().getName()) is printable
this.theArray.getClass().getName().length() == 18
x.getClass().getName().length() one of { 16, 22, 24 }
x.getClass().getName().length() == 0  (mod 2)
this.theArray[0..this.topOfStack] elements != null
this.theArray[0..this.topOfStack-1] == []
orig(this.theArray[0..post(this.topOfStack)]) == [null]
this.theArray.getClass().getName() != orig(x.getClass().getName())
orig(x.getClass().getName()) in this.theArray[].getClass().getName()
this.topOfStack <= size(this.theArray[])-1
this.topOfStack < x.getClass().getName().length()
orig(this.theArray[]) elements == orig(this.theArray[post(this.topOfStack)])
orig(this.topOfStack) < size(this.theArray[])-1
orig(this.topOfStack) < x.getClass().getName().length()
this.theArray[0..this.topOfStack] elements == orig(x)
(size(this.theArray[]) >> this.theArray.getClass().getName().length() == 0)
this.theArray.getClass().getName().length() != size(this.theArray[])
(size(this.theArray[])-1 >> this.theArray.getClass().getName().length() == 0)
this.theArray.getClass().getName().length() != size(this.theArray[])-1
this.theArray.getClass().getName().length() != x.getClass().getName().length()
(size(this.theArray[]) >> x.getClass().getName().length() == 0)
size(this.theArray[]) != x.getClass().getName().length()
(size(this.theArray[])-1 >> x.getClass().getName().length() == 0)
size(this.theArray[])-1 != x.getClass().getName().length()
===========================================================================
DataStructures.StackAr.push(java.lang.Object):::EXIT;condition="not(orig(isEmpty()))"
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
orig(x) == this.theArray[this.topOfStack]
this.theArray.getClass().getName().length() == orig(this.theArray.getClass().getName()).length()
size(this.theArray[]) == orig(size(this.theArray[]))
x.getClass().getName().length() == orig(x.getClass().getName()).length()
this.theArray[this.topOfStack-1] == this.theArray[orig(this.topOfStack)]
this.theArray[this.topOfStack-1] == orig(this.theArray[post(this.topOfStack)-1])
this.theArray[this.topOfStack-1] == orig(this.theArray[this.topOfStack])
this.theArray[this.topOfStack+1..] == orig(this.theArray[post(this.topOfStack)+1..])
this.theArray[0..this.topOfStack-1] == orig(this.theArray[0..post(this.topOfStack)-1])
this.theArray[0..this.topOfStack-1] == orig(this.theArray[0..this.topOfStack])
this.theArray[0..orig(this.topOfStack)-1] == orig(this.theArray[0..this.topOfStack-1])
this.theArray != null
this.theArray.getClass().getName() == java.lang.Object[].class
this.topOfStack >= 1
orig(this.topOfStack) >= 0
orig(x.getClass().getName()) is printable
this.theArray.getClass().getName().length() == 18
x.getClass().getName().length() one of { 16, 22, 24 }
x.getClass().getName().length() == 0  (mod 2)
this.theArray[0..this.topOfStack] elements != null
orig(this.theArray[post(this.topOfStack)..]) elements == null
this.theArray[orig(this.topOfStack)+1..this.topOfStack-1] == []
this.theArray.getClass().getName() != orig(x.getClass().getName())
orig(x.getClass().getName()) in this.theArray[].getClass().getName()
this.topOfStack - orig(this.topOfStack) - 1 == 0
(this.topOfStack >> this.theArray.getClass().getName().length() == 0)
this.topOfStack <= size(this.theArray[])-1
(this.topOfStack >> x.getClass().getName().length() == 0)
orig(this.topOfStack) <= this.theArray.getClass().getName().length()
orig(this.topOfStack) < size(this.theArray[])-1
(orig(this.topOfStack) >> x.getClass().getName().length() == 0)
this.theArray[orig(this.topOfStack)+1..this.topOfStack] elements == orig(x)
this.theArray.getClass().getName().length() != size(this.theArray[])
this.theArray.getClass().getName().length() != size(this.theArray[])-1
this.theArray.getClass().getName().length() != x.getClass().getName().length()
(size(this.theArray[]) >> x.getClass().getName().length() == 0)
size(this.theArray[]) != x.getClass().getName().length()
(size(this.theArray[])-1 >> x.getClass().getName().length() == 0)
size(this.theArray[])-1 != x.getClass().getName().length()
this.theArray[orig(this.topOfStack)..this.topOfStack-1] elements == this.theArray[this.topOfStack-1]
orig(this.theArray[post(this.topOfStack)..]) elements == orig(this.theArray[post(this.topOfStack)])
this.theArray[orig(this.topOfStack)..this.topOfStack-1] is a subsequence of orig(this.theArray[0..post(this.topOfStack)])
this.theArray[orig(this.topOfStack)..this.topOfStack-1] is a subsequence of orig(this.theArray[this.topOfStack..])
===========================================================================
DataStructures.StackAr.push(java.lang.Object):::EXIT;condition="isFull()"
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.topOfStack == size(this.theArray[])-1
this.topOfStack == orig(size(this.theArray[]))-1
orig(x) == this.theArray[this.topOfStack]
this.theArray.getClass().getName().length() == orig(this.theArray.getClass().getName()).length()
size(this.theArray[]) == orig(size(this.theArray[]))
x.getClass().getName().length() == orig(x.getClass().getName()).length()
this.theArray[0..this.topOfStack-1] == orig(this.theArray[0..post(this.topOfStack)-1])
this.theArray[0..this.topOfStack-1] == orig(this.theArray[0..this.topOfStack])
this.theArray != null
this.theArray.getClass().getName() == java.lang.Object[].class
this.theArray[] elements != null
orig(x.getClass().getName()) is printable
this.theArray.getClass().getName().length() == 18
x.getClass().getName().length() one of { 16, 22, 24 }
x.getClass().getName().length() == 0  (mod 2)
this.theArray[this.topOfStack+1..] == []
orig(this.theArray[post(this.topOfStack)..]) == [null]
orig(this.theArray[post(this.topOfStack)..]) elements == null
this.theArray.getClass().getName() != orig(x.getClass().getName())
orig(x.getClass().getName()) in this.theArray[].getClass().getName()
(this.topOfStack >> this.theArray.getClass().getName().length() == 0)
this.topOfStack != this.theArray.getClass().getName().length()
(this.topOfStack >> x.getClass().getName().length() == 0)
this.topOfStack != x.getClass().getName().length()
orig(this.topOfStack) <= this.theArray.getClass().getName().length()
orig(this.topOfStack) - size(this.theArray[]) + 2 == 0
orig(this.topOfStack) != x.getClass().getName().length()
this.theArray[this.topOfStack..] elements == orig(x)
(size(this.theArray[]) >> this.theArray.getClass().getName().length() == 0)
this.theArray.getClass().getName().length() != size(this.theArray[])
this.theArray.getClass().getName().length() != x.getClass().getName().length()
(size(this.theArray[]) >> x.getClass().getName().length() == 0)
size(this.theArray[]) != x.getClass().getName().length()
orig(this.theArray[post(this.topOfStack)..]) elements == orig(this.theArray[post(this.topOfStack)])
===========================================================================
DataStructures.StackAr.push(java.lang.Object):::EXIT;condition="not(isFull())"
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
orig(x) == this.theArray[this.topOfStack]
this.theArray.getClass().getName().length() == orig(this.theArray.getClass().getName()).length()
size(this.theArray[]) == orig(size(this.theArray[]))
x.getClass().getName().length() == orig(x.getClass().getName()).length()
this.theArray[this.topOfStack+1..] == orig(this.theArray[post(this.topOfStack)+1..])
this.theArray[0..this.topOfStack-1] == orig(this.theArray[0..post(this.topOfStack)-1])
this.theArray[0..this.topOfStack-1] == orig(this.theArray[0..this.topOfStack])
this.theArray != null
this.theArray.getClass().getName() == java.lang.Object[].class
this.topOfStack >= 0
orig(this.topOfStack) >= -1
orig(x.getClass().getName()) is printable
this.theArray.getClass().getName().length() == 18
x.getClass().getName().length() one of { 16, 22, 24 }
x.getClass().getName().length() == 0  (mod 2)
this.theArray[0..this.topOfStack] elements != null
orig(this.theArray[post(this.topOfStack)..]) elements == null
this.theArray[orig(this.topOfStack)+1..this.topOfStack-1] == []
this.theArray.getClass().getName() != orig(x.getClass().getName())
this.theArray[] is a superset of orig(this.theArray[])
orig(x.getClass().getName()) in this.theArray[].getClass().getName()
this.topOfStack - orig(this.topOfStack) - 1 == 0
this.topOfStack <= this.theArray.getClass().getName().length()
this.topOfStack < size(this.theArray[])-1
(this.topOfStack >> x.getClass().getName().length() == 0)
orig(this.topOfStack) < this.theArray.getClass().getName().length()
orig(this.topOfStack) < size(this.theArray[])-1
this.theArray[orig(this.topOfStack)+1..this.topOfStack] elements == orig(x)
this.theArray.getClass().getName().length() != size(this.theArray[])
this.theArray.getClass().getName().length() != size(this.theArray[])-1
this.theArray.getClass().getName().length() != x.getClass().getName().length()
(size(this.theArray[]) >> x.getClass().getName().length() == 0)
size(this.theArray[]) != x.getClass().getName().length()
(size(this.theArray[])-1 >> x.getClass().getName().length() == 0)
size(this.theArray[])-1 != x.getClass().getName().length()
orig(this.theArray[post(this.topOfStack)]) in this.theArray[this.topOfStack..]
orig(this.theArray[post(this.topOfStack)..]) elements == orig(this.theArray[post(this.topOfStack)])
===========================================================================
DataStructures.StackAr.push(java.lang.Object):::EXIT;condition="not(orig(isFull()))"
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
orig(x) == this.theArray[this.topOfStack]
this.theArray.getClass().getName().length() == orig(this.theArray.getClass().getName()).length()
size(this.theArray[]) == orig(size(this.theArray[]))
x.getClass().getName().length() == orig(x.getClass().getName()).length()
this.theArray[this.topOfStack+1..] == orig(this.theArray[post(this.topOfStack)+1..])
this.theArray[0..this.topOfStack-1] == orig(this.theArray[0..post(this.topOfStack)-1])
this.theArray[0..this.topOfStack-1] == orig(this.theArray[0..this.topOfStack])
this.theArray != null
this.theArray.getClass().getName() == java.lang.Object[].class
this.topOfStack >= 0
orig(this.topOfStack) >= -1
orig(x.getClass().getName()) is printable
this.theArray.getClass().getName().length() == 18
x.getClass().getName().length() one of { 16, 22, 24 }
x.getClass().getName().length() == 0  (mod 2)
this.theArray[0..this.topOfStack] elements != null
orig(this.theArray[post(this.topOfStack)..]) elements == null
this.theArray[orig(this.topOfStack)+1..this.topOfStack-1] == []
this.theArray.getClass().getName() != orig(x.getClass().getName())
orig(x.getClass().getName()) in this.theArray[].getClass().getName()
this.topOfStack - orig(this.topOfStack) - 1 == 0
(this.topOfStack >> this.theArray.getClass().getName().length() == 0)
(size(this.theArray[])-1 == 0) ==> (this.topOfStack == 0)
this.topOfStack <= size(this.theArray[])-1
(this.topOfStack >> x.getClass().getName().length() == 0)
orig(this.topOfStack) <= this.theArray.getClass().getName().length()
orig(this.topOfStack) < size(this.theArray[])-1
this.theArray[orig(this.topOfStack)+1..this.topOfStack] elements == orig(x)
(size(this.theArray[]) >> this.theArray.getClass().getName().length() == 0)
this.theArray.getClass().getName().length() != size(this.theArray[])
(size(this.theArray[])-1 >> this.theArray.getClass().getName().length() == 0)
this.theArray.getClass().getName().length() != size(this.theArray[])-1
this.theArray.getClass().getName().length() != x.getClass().getName().length()
(size(this.theArray[]) >> x.getClass().getName().length() == 0)
size(this.theArray[]) != x.getClass().getName().length()
(size(this.theArray[])-1 >> x.getClass().getName().length() == 0)
size(this.theArray[])-1 != x.getClass().getName().length()
orig(this.theArray[post(this.topOfStack)..]) elements == orig(this.theArray[post(this.topOfStack)])
===========================================================================
DataStructures.StackAr.top():::ENTER
(this.theArray[this.topOfStack+1..] elements == null)  <==>  (this.topOfStack < size(this.theArray[])-1)
(this.theArray[this.topOfStack+1..] elements == null)  ==>  ((size(this.theArray[])-1 >> this.theArray.getClass().getName().length() == 0))
(this.theArray[this.topOfStack+1..] elements == null)  ==>  (this.topOfStack <= this.theArray.getClass().getName().length())
(this.topOfStack == -1)  ==>  (this.theArray[0..this.topOfStack] == [])
(this.topOfStack == -1)  ==>  (this.theArray[] elements == null)
(this.topOfStack == -1)  ==>  (this.theArray[].getClass().getName() elements == null)
(this.topOfStack == -1)  ==>  (this.topOfStack < this.theArray.getClass().getName().length())
(this.topOfStack == size(this.theArray[])-1)  ==>  (this.theArray[] elements != null)
(this.topOfStack == size(this.theArray[])-1)  ==>  (this.theArray[this.topOfStack+1..] == [])
(this.topOfStack == size(this.theArray[])-1)  ==>  (this.topOfStack != this.theArray.getClass().getName().length())
(this.topOfStack >= 0)  ==>  ((size(this.theArray[])-1 == 0) ==> (this.topOfStack == 0))
(this.topOfStack >= 0)  ==>  ((size(this.theArray[])-1 >> this.theArray.getClass().getName().length() == 0))
(this.topOfStack >= 0)  ==>  ((this.topOfStack >> this.theArray.getClass().getName().length() == 0))
===========================================================================
DataStructures.StackAr.top():::ENTER;condition="topOfStack == -1"
this.theArray[] elements == null
this.theArray[].getClass().getName() elements == null
this.topOfStack == -1
this.theArray[0..this.topOfStack] == []
===========================================================================
DataStructures.StackAr.top():::ENTER;condition="not(topOfStack == -1)"
this.topOfStack >= 0
(this.topOfStack >> this.theArray.getClass().getName().length() == 0)
(size(this.theArray[])-1 == 0) ==> (this.topOfStack == 0)
(size(this.theArray[])-1 >> this.theArray.getClass().getName().length() == 0)
===========================================================================
DataStructures.StackAr.top():::ENTER;condition="topOfStack == theArray.length - 1"
this.topOfStack == size(this.theArray[])-1
this.theArray != null
this.theArray.getClass().getName() == java.lang.Object[].class
this.theArray[] elements != null
this.theArray.getClass().getName().length() == 18
this.theArray[this.topOfStack+1..] == []
this.topOfStack != this.theArray.getClass().getName().length()
(size(this.theArray[]) >> this.theArray.getClass().getName().length() == 0)
this.theArray.getClass().getName().length() != size(this.theArray[])
===========================================================================
DataStructures.StackAr.top():::ENTER;condition="not(topOfStack == theArray.length - 1)"
this.theArray != null
this.theArray.getClass().getName() == java.lang.Object[].class
this.topOfStack >= -1
this.theArray.getClass().getName().length() == 18
this.theArray[this.topOfStack+1..] elements == null
this.theArray[0..this.topOfStack] elements != null
this.topOfStack <= this.theArray.getClass().getName().length()
this.topOfStack < size(this.theArray[])-1
(size(this.theArray[]) >> this.theArray.getClass().getName().length() == 0)
this.theArray.getClass().getName().length() != size(this.theArray[])
(size(this.theArray[])-1 >> this.theArray.getClass().getName().length() == 0)
this.theArray.getClass().getName().length() != size(this.theArray[])-1
===========================================================================
DataStructures.StackAr.top():::EXIT74
(this.theArray[] elements == null)  <==>  (size(this.theArray[]) >= 1)
(this.theArray[] elements == null)  <==>  (this.topOfStack < size(this.theArray[])-1)
(this.theArray[] elements == null)  ==>  ((size(this.theArray[])-1 >> this.theArray.getClass().getName().length() == 0))
(this.theArray[] elements == null)  ==>  (return in this.theArray[])
(this.theArray[] elements == null)  ==>  (this.theArray[].getClass().getName() elements == null)
(this.topOfStack == size(this.theArray[])-1)  ==>  (size(this.theArray[]) is a pointer)
(this.topOfStack == size(this.theArray[])-1)  ==>  (this.theArray.getClass().getName().length() > size(this.theArray[]))
(this.topOfStack == size(this.theArray[])-1)  ==>  (this.theArray[] == [])
(this.topOfStack == size(this.theArray[])-1)  ==>  (this.theArray[].getClass().getName() == [])
this.theArray[] elements == null
this.theArray[].getClass().getName() elements == null
this.topOfStack == -1
return == null
this.theArray[0..this.topOfStack] == []
this.theArray[] elements == return
===========================================================================
DataStructures.StackAr.top():::EXIT74;condition="orig(topOfStack == -1)"
===========================================================================
DataStructures.StackAr.top():::EXIT74;condition="topOfStack == -1"
===========================================================================
DataStructures.StackAr.top():::EXIT74;condition="orig(topOfStack == theArray.length - 1)"
this.theArray[] == []
this.theArray[].getClass().getName() == []
return == null
===========================================================================
DataStructures.StackAr.top():::EXIT74;condition="not(orig(topOfStack == theArray.length - 1))"
this.theArray[] elements == null
this.theArray[].getClass().getName() elements == null
this.topOfStack == -1
return == null
this.theArray[0..this.topOfStack] == []
this.theArray[] elements == return
===========================================================================
DataStructures.StackAr.top():::EXIT74;condition="topOfStack == theArray.length - 1"
this.theArray[] == []
this.theArray[].getClass().getName() == []
return == null
===========================================================================
DataStructures.StackAr.top():::EXIT74;condition="not(topOfStack == theArray.length - 1)"
this.theArray[] elements == null
this.theArray[].getClass().getName() elements == null
this.topOfStack == -1
return == null
this.theArray[0..this.topOfStack] == []
this.theArray[] elements == return
===========================================================================
DataStructures.StackAr.top():::EXIT74;condition="isEmpty()"
===========================================================================
DataStructures.StackAr.top():::EXIT74;condition="orig(isEmpty())"
===========================================================================
DataStructures.StackAr.top():::EXIT75
return == this.theArray[this.topOfStack]
return == this.theArray[orig(this.topOfStack)]
return == orig(this.theArray[post(this.topOfStack)])
return == orig(this.theArray[this.topOfStack])
(this.theArray[this.topOfStack+1..] elements == null)  <==>  (this.topOfStack < size(this.theArray[])-1)
(this.theArray[this.topOfStack+1..] elements == null)  ==>  (this.topOfStack <= this.theArray.getClass().getName().length())
(this.topOfStack == size(this.theArray[])-1)  ==>  (size(this.theArray[]) >= 1)
(this.topOfStack == size(this.theArray[])-1)  ==>  (this.theArray[] elements != null)
(this.topOfStack == size(this.theArray[])-1)  ==>  (this.theArray[this.topOfStack+1..] == [])
(this.topOfStack == size(this.theArray[])-1)  ==>  (this.theArray[this.topOfStack..] elements == return)
(this.topOfStack == size(this.theArray[])-1)  ==>  (this.topOfStack != return.getClass().getName().length())
(this.topOfStack == size(this.theArray[])-1)  ==>  (this.topOfStack != this.theArray.getClass().getName().length())
this.topOfStack >= 0
(this.topOfStack >> this.theArray.getClass().getName().length() == 0)
(size(this.theArray[])-1 == 0) ==> (this.topOfStack == 0)
(size(this.theArray[])-1 >> this.theArray.getClass().getName().length() == 0)
===========================================================================
DataStructures.StackAr.top():::EXIT75;condition="not(orig(topOfStack == -1))"
===========================================================================
DataStructures.StackAr.top():::EXIT75;condition="not(topOfStack == -1)"
===========================================================================
DataStructures.StackAr.top():::EXIT75;condition="orig(topOfStack == theArray.length - 1)"
return == this.theArray[this.topOfStack]
return == this.theArray[orig(this.topOfStack)]
return == orig(this.theArray[post(this.topOfStack)])
return == orig(this.theArray[this.topOfStack])
size(this.theArray[]) >= 1
(this.topOfStack >> this.theArray.getClass().getName().length() == 0)
this.theArray[this.topOfStack..] elements == return
===========================================================================
DataStructures.StackAr.top():::EXIT75;condition="not(orig(topOfStack == theArray.length - 1))"
return == this.theArray[this.topOfStack]
return == this.theArray[orig(this.topOfStack)]
return == orig(this.theArray[post(this.topOfStack)])
return == orig(this.theArray[this.topOfStack])
this.topOfStack >= 0
===========================================================================
DataStructures.StackAr.top():::EXIT75;condition="topOfStack == theArray.length - 1"
return == this.theArray[this.topOfStack]
return == this.theArray[orig(this.topOfStack)]
return == orig(this.theArray[post(this.topOfStack)])
return == orig(this.theArray[this.topOfStack])
size(this.theArray[]) >= 1
(this.topOfStack >> this.theArray.getClass().getName().length() == 0)
this.theArray[this.topOfStack..] elements == return
===========================================================================
DataStructures.StackAr.top():::EXIT75;condition="not(topOfStack == theArray.length - 1)"
return == this.theArray[this.topOfStack]
return == this.theArray[orig(this.topOfStack)]
return == orig(this.theArray[post(this.topOfStack)])
return == orig(this.theArray[this.topOfStack])
this.topOfStack >= 0
===========================================================================
DataStructures.StackAr.top():::EXIT75;condition="not(isEmpty())"
===========================================================================
DataStructures.StackAr.top():::EXIT75;condition="not(orig(isEmpty()))"
===========================================================================
DataStructures.StackAr.top():::EXIT
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.theArray[] == orig(this.theArray[])
this.topOfStack == orig(this.topOfStack)
this.theArray.getClass().getName().length() == orig(this.theArray.getClass().getName()).length()
(this.theArray[this.topOfStack+1..] elements == null)  <==>  (this.topOfStack < size(this.theArray[])-1)
(this.theArray[this.topOfStack+1..] elements == null)  ==>  ((size(this.theArray[])-1 == 0) ==> (return.getClass().getName().length() == 0))
(this.theArray[this.topOfStack+1..] elements == null)  ==>  ((size(this.theArray[])-1 >> this.theArray.getClass().getName().length() == 0))
(this.theArray[this.topOfStack+1..] elements == null)  ==>  (return in this.theArray[])
(this.theArray[this.topOfStack+1..] elements == null)  ==>  (this.topOfStack <= this.theArray.getClass().getName().length())
(this.topOfStack == -1)  <==>  (return == null)
(this.topOfStack == -1)  ==>  (this.theArray[0..this.topOfStack] == [])
(this.topOfStack == -1)  ==>  (this.theArray[] elements == null)
(this.topOfStack == -1)  ==>  (this.theArray[] elements == return)
(this.topOfStack == -1)  ==>  (this.theArray[].getClass().getName() elements == null)
(this.topOfStack == -1)  ==>  (this.theArray[this.topOfStack+1..] elements == return)
(this.topOfStack == -1)  ==>  (this.topOfStack < this.theArray.getClass().getName().length())
(this.topOfStack == size(this.theArray[])-1)  ==>  (this.theArray[] elements != null)
(this.topOfStack == size(this.theArray[])-1)  ==>  (this.theArray[this.topOfStack+1..] == [])
(this.topOfStack == size(this.theArray[])-1)  ==>  (this.topOfStack != return.getClass().getName().length())
(this.topOfStack == size(this.theArray[])-1)  ==>  (this.topOfStack != this.theArray.getClass().getName().length())
(this.topOfStack >= 0)  ==>  ((size(this.theArray[]) >> return.getClass().getName().length() == 0))
(this.topOfStack >= 0)  ==>  ((size(this.theArray[])-1 == 0) ==> (this.topOfStack == 0))
(this.topOfStack >= 0)  ==>  ((size(this.theArray[])-1 >> return.getClass().getName().length() == 0))
(this.topOfStack >= 0)  ==>  ((size(this.theArray[])-1 >> this.theArray.getClass().getName().length() == 0))
(this.topOfStack >= 0)  ==>  ((this.topOfStack >> return.getClass().getName().length() == 0))
(this.topOfStack >= 0)  ==>  ((this.topOfStack >> this.theArray.getClass().getName().length() == 0))
(this.topOfStack >= 0)  ==>  (return == orig(this.theArray[post(this.topOfStack)]))
(this.topOfStack >= 0)  ==>  (return == orig(this.theArray[this.topOfStack]))
(this.topOfStack >= 0)  ==>  (return == this.theArray[orig(this.topOfStack)])
(this.topOfStack >= 0)  ==>  (return == this.theArray[this.topOfStack])
(this.topOfStack >= 0)  ==>  (return.getClass().getName() in this.theArray[].getClass().getName())
(this.topOfStack >= 0)  ==>  (return.getClass().getName() is printable)
(this.topOfStack >= 0)  ==>  (return.getClass().getName().length() == 0  (mod 2))
(this.topOfStack >= 0)  ==>  (return.getClass().getName().length() one of { 16, 22, 24 })
(this.topOfStack >= 0)  ==>  (size(this.theArray[]) != return.getClass().getName().length())
(this.topOfStack >= 0)  ==>  (size(this.theArray[])-1 != return.getClass().getName().length())
(this.topOfStack >= 0)  ==>  (this.theArray.getClass().getName() != return.getClass().getName())
(this.topOfStack >= 0)  ==>  (this.theArray.getClass().getName().length() != return.getClass().getName().length())
(this.topOfStack >= 0)  ==>  (this.theArray[orig(this.topOfStack)..this.topOfStack-1] == [])
(this.topOfStack >= 0)  ==>  (this.theArray[this.topOfStack..orig(this.topOfStack)-1] == [])
return.getClass().getName() is printable
return.getClass().getName().length() one of { 16, 22, 24 }
return.getClass().getName().length() == 0  (mod 2)
this.theArray[this.topOfStack+1..orig(this.topOfStack)] == []
this.theArray.getClass().getName() != return.getClass().getName()
return.getClass().getName() in this.theArray[].getClass().getName()
(this.topOfStack >> return.getClass().getName().length() == 0)
this.theArray.getClass().getName().length() != return.getClass().getName().length()
(size(this.theArray[]) == 0) ==> (return.getClass().getName().length() == 0)
(size(this.theArray[]) >> return.getClass().getName().length() == 0)
size(this.theArray[]) != return.getClass().getName().length()
(size(this.theArray[])-1 >> return.getClass().getName().length() == 0)
size(this.theArray[])-1 != return.getClass().getName().length()
===========================================================================
DataStructures.StackAr.top():::EXIT;condition="orig(topOfStack == -1)"
this.theArray[] elements == null
this.theArray[].getClass().getName() elements == null
this.topOfStack == -1
return == null
this.theArray[0..this.topOfStack] == []
this.theArray[] elements == return
===========================================================================
DataStructures.StackAr.top():::EXIT;condition="not(orig(topOfStack == -1))"
return == this.theArray[this.topOfStack]
return == this.theArray[orig(this.topOfStack)]
return == orig(this.theArray[post(this.topOfStack)])
return == orig(this.theArray[this.topOfStack])
this.topOfStack >= 0
(this.topOfStack >> this.theArray.getClass().getName().length() == 0)
(size(this.theArray[])-1 == 0) ==> (this.topOfStack == 0)
(size(this.theArray[])-1 >> this.theArray.getClass().getName().length() == 0)
===========================================================================
DataStructures.StackAr.top():::EXIT;condition="topOfStack == -1"
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.theArray[] == orig(this.theArray[])
this.topOfStack == orig(this.topOfStack)
this.theArray.getClass().getName().length() == orig(this.theArray.getClass().getName()).length()
this.theArray != null
this.theArray.getClass().getName() == java.lang.Object[].class
this.theArray[] elements == null
this.theArray[].getClass().getName() elements == null
this.topOfStack == -1
return == null
this.theArray.getClass().getName().length() == 18
this.theArray[0..this.topOfStack] == []
this.theArray[] elements == return
this.topOfStack <= size(this.theArray[])-1
(size(this.theArray[]) >> this.theArray.getClass().getName().length() == 0)
this.theArray.getClass().getName().length() != size(this.theArray[])
this.theArray.getClass().getName().length() != size(this.theArray[])-1
===========================================================================
DataStructures.StackAr.top():::EXIT;condition="not(topOfStack == -1)"
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.theArray[] == orig(this.theArray[])
this.topOfStack == orig(this.topOfStack)
return == this.theArray[this.topOfStack]
return == this.theArray[orig(this.topOfStack)]
return == orig(this.theArray[post(this.topOfStack)])
return == orig(this.theArray[this.topOfStack])
this.theArray.getClass().getName().length() == orig(this.theArray.getClass().getName()).length()
this.theArray != null
this.theArray.getClass().getName() == java.lang.Object[].class
this.topOfStack >= 0
return.getClass().getName() is printable
this.theArray.getClass().getName().length() == 18
return.getClass().getName().length() one of { 16, 22, 24 }
return.getClass().getName().length() == 0  (mod 2)
this.theArray[this.topOfStack+1..] elements == null
this.theArray[0..this.topOfStack] elements != null
this.theArray[this.topOfStack+1..orig(this.topOfStack)] == []
this.theArray.getClass().getName() != return.getClass().getName()
return.getClass().getName() in this.theArray[].getClass().getName()
(this.topOfStack >> this.theArray.getClass().getName().length() == 0)
(size(this.theArray[])-1 == 0) ==> (this.topOfStack == 0)
this.topOfStack <= size(this.theArray[])-1
(this.topOfStack >> return.getClass().getName().length() == 0)
(size(this.theArray[]) >> this.theArray.getClass().getName().length() == 0)
this.theArray.getClass().getName().length() != size(this.theArray[])
(size(this.theArray[])-1 >> this.theArray.getClass().getName().length() == 0)
this.theArray.getClass().getName().length() != size(this.theArray[])-1
this.theArray.getClass().getName().length() != return.getClass().getName().length()
(size(this.theArray[]) >> return.getClass().getName().length() == 0)
size(this.theArray[]) != return.getClass().getName().length()
(size(this.theArray[])-1 >> return.getClass().getName().length() == 0)
size(this.theArray[])-1 != return.getClass().getName().length()
===========================================================================
DataStructures.StackAr.top():::EXIT;condition="orig(topOfStack == theArray.length - 1)"
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.theArray[] == orig(this.theArray[])
this.topOfStack == orig(this.topOfStack)
this.topOfStack == size(this.theArray[])-1
this.topOfStack == orig(size(this.theArray[]))-1
this.theArray.getClass().getName().length() == orig(this.theArray.getClass().getName()).length()
this.theArray != null
this.theArray.getClass().getName() == java.lang.Object[].class
this.theArray[] elements != null
return.getClass().getName() is printable
this.theArray.getClass().getName().length() == 18
return.getClass().getName().length() one of { 16, 22, 24 }
return.getClass().getName().length() == 0  (mod 2)
this.theArray[this.topOfStack+1..] == []
this.theArray.getClass().getName() != return.getClass().getName()
return.getClass().getName() in this.theArray[].getClass().getName()
this.topOfStack != this.theArray.getClass().getName().length()
(this.topOfStack >> return.getClass().getName().length() == 0)
this.topOfStack != return.getClass().getName().length()
(size(this.theArray[]) >> this.theArray.getClass().getName().length() == 0)
this.theArray.getClass().getName().length() != size(this.theArray[])
this.theArray.getClass().getName().length() != return.getClass().getName().length()
(size(this.theArray[]) == 0) ==> (return.getClass().getName().length() == 0)
(size(this.theArray[]) >> return.getClass().getName().length() == 0)
size(this.theArray[]) != return.getClass().getName().length()
===========================================================================
DataStructures.StackAr.top():::EXIT;condition="not(orig(topOfStack == theArray.length - 1))"
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.theArray[] == orig(this.theArray[])
this.topOfStack == orig(this.topOfStack)
this.theArray.getClass().getName().length() == orig(this.theArray.getClass().getName()).length()
this.theArray != null
this.theArray.getClass().getName() == java.lang.Object[].class
this.topOfStack >= -1
return.getClass().getName() is printable
this.theArray.getClass().getName().length() == 18
return.getClass().getName().length() one of { 16, 22, 24 }
return.getClass().getName().length() == 0  (mod 2)
this.theArray[this.topOfStack+1..] elements == null
this.theArray[0..this.topOfStack] elements != null
this.theArray[this.topOfStack+1..orig(this.topOfStack)] == []
this.theArray.getClass().getName() != return.getClass().getName()
return in this.theArray[]
return.getClass().getName() in this.theArray[].getClass().getName()
this.topOfStack <= this.theArray.getClass().getName().length()
this.topOfStack < size(this.theArray[])-1
(this.topOfStack >> return.getClass().getName().length() == 0)
(size(this.theArray[]) >> this.theArray.getClass().getName().length() == 0)
this.theArray.getClass().getName().length() != size(this.theArray[])
(size(this.theArray[])-1 >> this.theArray.getClass().getName().length() == 0)
this.theArray.getClass().getName().length() != size(this.theArray[])-1
this.theArray.getClass().getName().length() != return.getClass().getName().length()
(size(this.theArray[]) >> return.getClass().getName().length() == 0)
size(this.theArray[]) != return.getClass().getName().length()
(size(this.theArray[])-1 == 0) ==> (return.getClass().getName().length() == 0)
(size(this.theArray[])-1 >> return.getClass().getName().length() == 0)
size(this.theArray[])-1 != return.getClass().getName().length()
===========================================================================
DataStructures.StackAr.top():::EXIT;condition="topOfStack == theArray.length - 1"
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.theArray[] == orig(this.theArray[])
this.topOfStack == orig(this.topOfStack)
this.topOfStack == size(this.theArray[])-1
this.topOfStack == orig(size(this.theArray[]))-1
this.theArray.getClass().getName().length() == orig(this.theArray.getClass().getName()).length()
this.theArray != null
this.theArray.getClass().getName() == java.lang.Object[].class
this.theArray[] elements != null
return.getClass().getName() is printable
this.theArray.getClass().getName().length() == 18
return.getClass().getName().length() one of { 16, 22, 24 }
return.getClass().getName().length() == 0  (mod 2)
this.theArray[this.topOfStack+1..] == []
this.theArray.getClass().getName() != return.getClass().getName()
return.getClass().getName() in this.theArray[].getClass().getName()
this.topOfStack != this.theArray.getClass().getName().length()
(this.topOfStack >> return.getClass().getName().length() == 0)
this.topOfStack != return.getClass().getName().length()
(size(this.theArray[]) >> this.theArray.getClass().getName().length() == 0)
this.theArray.getClass().getName().length() != size(this.theArray[])
this.theArray.getClass().getName().length() != return.getClass().getName().length()
(size(this.theArray[]) == 0) ==> (return.getClass().getName().length() == 0)
(size(this.theArray[]) >> return.getClass().getName().length() == 0)
size(this.theArray[]) != return.getClass().getName().length()
===========================================================================
DataStructures.StackAr.top():::EXIT;condition="not(topOfStack == theArray.length - 1)"
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.theArray[] == orig(this.theArray[])
this.topOfStack == orig(this.topOfStack)
this.theArray.getClass().getName().length() == orig(this.theArray.getClass().getName()).length()
this.theArray != null
this.theArray.getClass().getName() == java.lang.Object[].class
this.topOfStack >= -1
return.getClass().getName() is printable
this.theArray.getClass().getName().length() == 18
return.getClass().getName().length() one of { 16, 22, 24 }
return.getClass().getName().length() == 0  (mod 2)
this.theArray[this.topOfStack+1..] elements == null
this.theArray[0..this.topOfStack] elements != null
this.theArray[this.topOfStack+1..orig(this.topOfStack)] == []
this.theArray.getClass().getName() != return.getClass().getName()
return in this.theArray[]
return.getClass().getName() in this.theArray[].getClass().getName()
this.topOfStack <= this.theArray.getClass().getName().length()
this.topOfStack < size(this.theArray[])-1
(this.topOfStack >> return.getClass().getName().length() == 0)
(size(this.theArray[]) >> this.theArray.getClass().getName().length() == 0)
this.theArray.getClass().getName().length() != size(this.theArray[])
(size(this.theArray[])-1 >> this.theArray.getClass().getName().length() == 0)
this.theArray.getClass().getName().length() != size(this.theArray[])-1
this.theArray.getClass().getName().length() != return.getClass().getName().length()
(size(this.theArray[]) >> return.getClass().getName().length() == 0)
size(this.theArray[]) != return.getClass().getName().length()
(size(this.theArray[])-1 == 0) ==> (return.getClass().getName().length() == 0)
(size(this.theArray[])-1 >> return.getClass().getName().length() == 0)
size(this.theArray[])-1 != return.getClass().getName().length()
===========================================================================
DataStructures.StackAr.top():::EXIT;condition="isEmpty()"
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.theArray[] == orig(this.theArray[])
this.topOfStack == orig(this.topOfStack)
this.theArray.getClass().getName().length() == orig(this.theArray.getClass().getName()).length()
this.theArray != null
this.theArray.getClass().getName() == java.lang.Object[].class
this.theArray[] elements == null
this.theArray[].getClass().getName() elements == null
this.topOfStack == -1
return == null
this.theArray.getClass().getName().length() == 18
this.theArray[0..this.topOfStack] == []
this.theArray[] elements == return
this.topOfStack <= size(this.theArray[])-1
(size(this.theArray[]) >> this.theArray.getClass().getName().length() == 0)
this.theArray.getClass().getName().length() != size(this.theArray[])
this.theArray.getClass().getName().length() != size(this.theArray[])-1
===========================================================================
DataStructures.StackAr.top():::EXIT;condition="not(isEmpty())"
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.theArray[] == orig(this.theArray[])
this.topOfStack == orig(this.topOfStack)
return == this.theArray[this.topOfStack]
return == this.theArray[orig(this.topOfStack)]
return == orig(this.theArray[post(this.topOfStack)])
return == orig(this.theArray[this.topOfStack])
this.theArray.getClass().getName().length() == orig(this.theArray.getClass().getName()).length()
this.theArray != null
this.theArray.getClass().getName() == java.lang.Object[].class
this.topOfStack >= 0
return.getClass().getName() is printable
this.theArray.getClass().getName().length() == 18
return.getClass().getName().length() one of { 16, 22, 24 }
return.getClass().getName().length() == 0  (mod 2)
this.theArray[this.topOfStack+1..] elements == null
this.theArray[0..this.topOfStack] elements != null
this.theArray[this.topOfStack+1..orig(this.topOfStack)] == []
this.theArray.getClass().getName() != return.getClass().getName()
return.getClass().getName() in this.theArray[].getClass().getName()
(this.topOfStack >> this.theArray.getClass().getName().length() == 0)
(size(this.theArray[])-1 == 0) ==> (this.topOfStack == 0)
this.topOfStack <= size(this.theArray[])-1
(this.topOfStack >> return.getClass().getName().length() == 0)
(size(this.theArray[]) >> this.theArray.getClass().getName().length() == 0)
this.theArray.getClass().getName().length() != size(this.theArray[])
(size(this.theArray[])-1 >> this.theArray.getClass().getName().length() == 0)
this.theArray.getClass().getName().length() != size(this.theArray[])-1
this.theArray.getClass().getName().length() != return.getClass().getName().length()
(size(this.theArray[]) >> return.getClass().getName().length() == 0)
size(this.theArray[]) != return.getClass().getName().length()
(size(this.theArray[])-1 >> return.getClass().getName().length() == 0)
size(this.theArray[])-1 != return.getClass().getName().length()
===========================================================================
DataStructures.StackAr.top():::EXIT;condition="orig(isEmpty())"
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.theArray[] == orig(this.theArray[])
this.topOfStack == orig(this.topOfStack)
this.theArray.getClass().getName().length() == orig(this.theArray.getClass().getName()).length()
this.theArray != null
this.theArray.getClass().getName() == java.lang.Object[].class
this.theArray[] elements == null
this.theArray[].getClass().getName() elements == null
this.topOfStack == -1
return == null
this.theArray.getClass().getName().length() == 18
this.theArray[0..this.topOfStack] == []
this.theArray[] elements == return
this.topOfStack <= size(this.theArray[])-1
(size(this.theArray[]) >> this.theArray.getClass().getName().length() == 0)
this.theArray.getClass().getName().length() != size(this.theArray[])
this.theArray.getClass().getName().length() != size(this.theArray[])-1
===========================================================================
DataStructures.StackAr.top():::EXIT;condition="not(orig(isEmpty()))"
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.theArray[] == orig(this.theArray[])
this.topOfStack == orig(this.topOfStack)
return == this.theArray[this.topOfStack]
return == this.theArray[orig(this.topOfStack)]
return == orig(this.theArray[post(this.topOfStack)])
return == orig(this.theArray[this.topOfStack])
this.theArray.getClass().getName().length() == orig(this.theArray.getClass().getName()).length()
this.theArray != null
this.theArray.getClass().getName() == java.lang.Object[].class
this.topOfStack >= 0
return.getClass().getName() is printable
this.theArray.getClass().getName().length() == 18
return.getClass().getName().length() one of { 16, 22, 24 }
return.getClass().getName().length() == 0  (mod 2)
this.theArray[this.topOfStack+1..] elements == null
this.theArray[0..this.topOfStack] elements != null
this.theArray[this.topOfStack+1..orig(this.topOfStack)] == []
this.theArray.getClass().getName() != return.getClass().getName()
return.getClass().getName() in this.theArray[].getClass().getName()
(this.topOfStack >> this.theArray.getClass().getName().length() == 0)
(size(this.theArray[])-1 == 0) ==> (this.topOfStack == 0)
this.topOfStack <= size(this.theArray[])-1
(this.topOfStack >> return.getClass().getName().length() == 0)
(size(this.theArray[]) >> this.theArray.getClass().getName().length() == 0)
this.theArray.getClass().getName().length() != size(this.theArray[])
(size(this.theArray[])-1 >> this.theArray.getClass().getName().length() == 0)
this.theArray.getClass().getName().length() != size(this.theArray[])-1
this.theArray.getClass().getName().length() != return.getClass().getName().length()
(size(this.theArray[]) >> return.getClass().getName().length() == 0)
size(this.theArray[]) != return.getClass().getName().length()
(size(this.theArray[])-1 >> return.getClass().getName().length() == 0)
size(this.theArray[])-1 != return.getClass().getName().length()
===========================================================================
DataStructures.StackAr.topAndPop():::ENTER
(size(this.theArray[]) == 0)  ==>  (size(this.theArray[]) is a pointer)
(size(this.theArray[]) == 0)  ==>  (this.theArray[0..this.topOfStack] == [])
(size(this.theArray[]) == 0)  ==>  (this.theArray[] == [])
(size(this.theArray[]) == 0)  ==>  (this.theArray[].getClass().getName() == [])
(size(this.theArray[]) == 0)  ==>  (this.theArray[this.topOfStack+1..] == [])
(size(this.theArray[]) == 0)  ==>  (this.topOfStack == size(this.theArray[])-1)
(this.topOfStack >= 1)  ==>  ((size(this.theArray[]) >> size(this.theArray[])-1 == 0))
(this.topOfStack >= 1)  ==>  ((this.topOfStack >> this.theArray.getClass().getName().length() == 0))
(this.topOfStack >= 1)  ==>  (size(this.theArray[]) one of { 3, 10, 20 })
(this.topOfStack one of { -1, 0 })  ==>  (this.topOfStack < this.theArray.getClass().getName().length())
this.theArray[0..this.topOfStack] contains no duplicates
===========================================================================
DataStructures.StackAr.topAndPop():::ENTER;condition="topOfStack == -1"
this.topOfStack one of { -1, 0 }
this.topOfStack < this.theArray.getClass().getName().length()
===========================================================================
DataStructures.StackAr.topAndPop():::ENTER;condition="not(topOfStack == -1)"
this.topOfStack >= 1
size(this.theArray[]) one of { 3, 10, 20 }
(this.topOfStack >> this.theArray.getClass().getName().length() == 0)
(size(this.theArray[]) >> size(this.theArray[])-1 == 0)
===========================================================================
DataStructures.StackAr.topAndPop():::ENTER;condition="topOfStack == theArray.length - 1"
this.topOfStack == size(this.theArray[])-1
this.theArray.getClass().getName() == java.lang.Object[].class
this.theArray[] == []
this.theArray[].getClass().getName() == []
this.theArray.getClass().getName().length() == 18
===========================================================================
DataStructures.StackAr.topAndPop():::ENTER;condition="not(topOfStack == theArray.length - 1)"
this.theArray != null
this.theArray.getClass().getName() == java.lang.Object[].class
this.topOfStack >= -1
this.theArray.getClass().getName().length() == 18
size(this.theArray[]) >= 1
this.theArray[this.topOfStack+1..] elements == null
this.theArray[0..this.topOfStack] contains no duplicates
this.theArray[0..this.topOfStack] elements != null
this.topOfStack <= size(this.theArray[])-1
(size(this.theArray[]) >> this.theArray.getClass().getName().length() == 0)
this.theArray.getClass().getName().length() != size(this.theArray[])
(size(this.theArray[])-1 >> this.theArray.getClass().getName().length() == 0)
this.theArray.getClass().getName().length() != size(this.theArray[])-1
===========================================================================
DataStructures.StackAr.topAndPop():::ENTER;condition="isEmpty()"
this.theArray != null
this.theArray.getClass().getName() == java.lang.Object[].class
this.topOfStack one of { -1, 0 }
this.theArray.getClass().getName().length() == 18
this.theArray[this.topOfStack+1..] elements == null
this.theArray[0..this.topOfStack] elements != null
this.topOfStack < this.theArray.getClass().getName().length()
this.topOfStack <= size(this.theArray[])-1
(size(this.theArray[]) >> this.theArray.getClass().getName().length() == 0)
this.theArray.getClass().getName().length() != size(this.theArray[])
this.theArray.getClass().getName().length() != size(this.theArray[])-1
===========================================================================
DataStructures.StackAr.topAndPop():::ENTER;condition="not(isEmpty())"
this.theArray != null
this.theArray.getClass().getName() == java.lang.Object[].class
this.topOfStack >= 1
this.theArray.getClass().getName().length() == 18
size(this.theArray[]) one of { 3, 10, 20 }
this.theArray[this.topOfStack+1..] elements == null
this.theArray[0..this.topOfStack] contains no duplicates
this.theArray[0..this.topOfStack] elements != null
(this.topOfStack >> this.theArray.getClass().getName().length() == 0)
this.topOfStack <= size(this.theArray[])-1
this.theArray.getClass().getName().length() != size(this.theArray[])
this.theArray.getClass().getName().length() != size(this.theArray[])-1
(size(this.theArray[]) >> size(this.theArray[])-1 == 0)
===========================================================================
DataStructures.StackAr.topAndPop():::ENTER;condition="isFull()"
this.topOfStack == size(this.theArray[])-1
this.theArray.getClass().getName() == java.lang.Object[].class
this.theArray[] == []
this.theArray[].getClass().getName() == []
this.theArray.getClass().getName().length() == 18
===========================================================================
DataStructures.StackAr.topAndPop():::ENTER;condition="not(isFull())"
this.theArray != null
this.theArray.getClass().getName() == java.lang.Object[].class
this.topOfStack >= -1
this.theArray.getClass().getName().length() == 18
size(this.theArray[]) >= 1
this.theArray[this.topOfStack+1..] elements == null
this.theArray[0..this.topOfStack] contains no duplicates
this.theArray[0..this.topOfStack] elements != null
this.topOfStack <= size(this.theArray[])-1
(size(this.theArray[]) >> this.theArray.getClass().getName().length() == 0)
this.theArray.getClass().getName().length() != size(this.theArray[])
(size(this.theArray[])-1 >> this.theArray.getClass().getName().length() == 0)
this.theArray.getClass().getName().length() != size(this.theArray[])-1
===========================================================================
DataStructures.StackAr.topAndPop():::EXIT108
this.theArray[] == orig(this.theArray[])
this.topOfStack == orig(this.topOfStack)
(this.theArray[] elements == null)  <==>  (this.topOfStack < size(this.theArray[])-1)
(this.theArray[] elements == null)  ==>  ((size(this.theArray[])-1 >> this.theArray.getClass().getName().length() == 0))
(this.theArray[] elements == null)  ==>  (this.theArray[].getClass().getName() elements == null)
(this.topOfStack == size(this.theArray[])-1)  ==>  (size(this.theArray[]) is a pointer)
(this.topOfStack == size(this.theArray[])-1)  ==>  (this.theArray[] == [])
(this.topOfStack == size(this.theArray[])-1)  ==>  (this.theArray[].getClass().getName() == [])
this.theArray[] elements == null
this.theArray[].getClass().getName() elements == null
this.topOfStack == -1
return == null
this.theArray[0..this.topOfStack] == []
===========================================================================
DataStructures.StackAr.topAndPop():::EXIT108;condition="orig(topOfStack == -1)"
===========================================================================
DataStructures.StackAr.topAndPop():::EXIT108;condition="topOfStack == -1"
this.theArray[] == orig(this.theArray[])
this.topOfStack == orig(this.topOfStack)
return == null
===========================================================================
DataStructures.StackAr.topAndPop():::EXIT108;condition="orig(topOfStack == theArray.length - 1)"
this.theArray[] == orig(this.theArray[])
this.topOfStack == orig(this.topOfStack)
this.topOfStack == size(this.theArray[])-1
this.topOfStack == orig(size(this.theArray[]))-1
this.theArray[] == []
this.theArray[].getClass().getName() == []
return == null
===========================================================================
DataStructures.StackAr.topAndPop():::EXIT108;condition="not(orig(topOfStack == theArray.length - 1))"
this.theArray[] == orig(this.theArray[])
this.topOfStack == orig(this.topOfStack)
this.theArray[] elements == null
this.theArray[].getClass().getName() elements == null
this.topOfStack == -1
return == null
this.theArray[0..this.topOfStack] == []
===========================================================================
DataStructures.StackAr.topAndPop():::EXIT108;condition="topOfStack == theArray.length - 1"
===========================================================================
DataStructures.StackAr.topAndPop():::EXIT108;condition="not(topOfStack == theArray.length - 1)"
this.theArray[] == orig(this.theArray[])
this.topOfStack == orig(this.topOfStack)
this.theArray[] elements == null
this.theArray[].getClass().getName() elements == null
this.topOfStack == -1
return == null
this.theArray[0..this.topOfStack] == []
===========================================================================
DataStructures.StackAr.topAndPop():::EXIT108;condition="isEmpty()"
this.theArray[] == orig(this.theArray[])
this.topOfStack == orig(this.topOfStack)
return == null
===========================================================================
DataStructures.StackAr.topAndPop():::EXIT108;condition="orig(isEmpty())"
===========================================================================
DataStructures.StackAr.topAndPop():::EXIT108;condition="isFull()"
===========================================================================
DataStructures.StackAr.topAndPop():::EXIT108;condition="not(isFull())"
this.theArray[] == orig(this.theArray[])
this.topOfStack == orig(this.topOfStack)
this.theArray[] elements == null
this.theArray[].getClass().getName() elements == null
this.topOfStack == -1
return == null
this.theArray[0..this.topOfStack] == []
===========================================================================
DataStructures.StackAr.topAndPop():::EXIT108;condition="orig(isFull())"
this.theArray[] == orig(this.theArray[])
this.topOfStack == orig(this.topOfStack)
this.topOfStack == size(this.theArray[])-1
this.topOfStack == orig(size(this.theArray[]))-1
this.theArray[] == []
this.theArray[].getClass().getName() == []
return == null
===========================================================================
DataStructures.StackAr.topAndPop():::EXIT108;condition="not(orig(isFull()))"
this.theArray[] == orig(this.theArray[])
this.topOfStack == orig(this.topOfStack)
this.theArray[] elements == null
this.theArray[].getClass().getName() elements == null
this.topOfStack == -1
return == null
this.theArray[0..this.topOfStack] == []
===========================================================================
DataStructures.StackAr.topAndPop():::EXIT111
this.theArray[0..this.topOfStack] == orig(this.theArray[0..this.topOfStack-1])
(orig(this.topOfStack) < size(this.theArray[])-1)  ==>  ((size(this.theArray[]) >> size(this.theArray[])-1 == 0))
(orig(this.topOfStack) < size(this.theArray[])-1)  ==>  (orig(this.topOfStack) <= this.theArray.getClass().getName().length())
(orig(this.topOfStack) < size(this.theArray[])-1)  ==>  (size(this.theArray[]) one of { 3, 10, 20 })
(orig(this.topOfStack) < size(this.theArray[])-1)  ==>  (this.theArray[] is a subset of orig(this.theArray[]))
(orig(this.topOfStack) < size(this.theArray[])-1)  ==>  (this.theArray[orig(this.topOfStack)] in orig(this.theArray[this.topOfStack..]))
(orig(this.topOfStack) < size(this.theArray[])-1)  ==>  (this.theArray[this.topOfStack+1..] is a subset of orig(this.theArray[this.topOfStack..]))
(orig(this.topOfStack) < size(this.theArray[])-1)  ==>  (this.theArray[this.topOfStack+1..orig(this.topOfStack)] is a subsequence of orig(this.theArray[this.topOfStack..]))
(orig(this.topOfStack) < size(this.theArray[])-1)  ==>  (this.topOfStack - orig(this.topOfStack) + 1 == 0)
(orig(this.topOfStack) < size(this.theArray[])-1)  ==>  (this.topOfStack < this.theArray.getClass().getName().length())
(orig(this.topOfStack) == size(this.theArray[])-1)  ==>  (orig(this.theArray[this.topOfStack..]) elements == orig(this.theArray[this.topOfStack]))
(orig(this.topOfStack) == size(this.theArray[])-1)  ==>  (size(this.theArray[]) one of { 1, 10, 20 })
(orig(this.topOfStack) == size(this.theArray[])-1)  ==>  (this.theArray[orig(this.topOfStack)+1..] == [])
(orig(this.topOfStack) == size(this.theArray[])-1)  ==>  (this.theArray[this.topOfStack+1..] == [null])
(orig(this.topOfStack) == size(this.theArray[])-1)  ==>  (this.topOfStack one of { -1, 8, 18 })
(this.topOfStack == -1)  <==>  (orig(this.topOfStack) == 0)
(this.topOfStack == -1)  ==>  (orig(this.theArray[0..this.topOfStack]) elements == orig(this.theArray[this.topOfStack]))
(this.topOfStack == -1)  ==>  (orig(this.topOfStack) is a pointer)
(this.topOfStack == -1)  ==>  (size(this.theArray[]) one of { 1, 10, 20 })
(this.topOfStack == -1)  ==>  (this.theArray[0..orig(this.topOfStack)] == [null])
(this.topOfStack == -1)  ==>  (this.theArray[0..this.topOfStack] == [])
(this.topOfStack == -1)  ==>  (this.theArray[] elements == null)
(this.topOfStack == -1)  ==>  (this.theArray[] elements == this.theArray[orig(this.topOfStack)])
(this.topOfStack == -1)  ==>  (this.theArray[].getClass().getName() elements == null)
(this.topOfStack >= 0)  <==>  (orig(this.topOfStack) >= 1)
(this.topOfStack >= 0)  ==>  ((size(this.theArray[]) >> size(this.theArray[])-1 == 0))
(this.topOfStack >= 0)  ==>  ((this.topOfStack >> return.getClass().getName().length() == 0))
(this.topOfStack >= 0)  ==>  (size(this.theArray[]) one of { 3, 10, 20 })
(this.topOfStack >= 0)  ==>  (this.theArray[0..this.topOfStack-1] == orig(this.theArray[0..post(this.topOfStack)-1]))
(this.topOfStack >= 0)  ==>  (this.theArray[this.topOfStack..orig(this.topOfStack)-1] elements == orig(this.theArray[post(this.topOfStack)]))
(this.topOfStack >= 0)  ==>  (this.theArray[this.topOfStack..orig(this.topOfStack)-1] elements == orig(this.theArray[this.topOfStack-1]))
(this.topOfStack >= 0)  ==>  (this.theArray[this.topOfStack..orig(this.topOfStack)-1] elements == this.theArray[orig(this.topOfStack)-1])
(this.topOfStack >= 0)  ==>  (this.theArray[this.topOfStack..orig(this.topOfStack)-1] elements == this.theArray[this.topOfStack])
(this.topOfStack >= 0)  ==>  (this.theArray[this.topOfStack..orig(this.topOfStack)-1] is a subsequence of orig(this.theArray[0..this.topOfStack]))
(this.topOfStack >= 0)  ==>  (this.theArray[this.topOfStack..orig(this.topOfStack)-1] is a subsequence of orig(this.theArray[post(this.topOfStack)..]))
(this.topOfStack >= 0)  ==>  (this.theArray[this.topOfStack] == orig(this.theArray[post(this.topOfStack)]))
(this.topOfStack >= 0)  ==>  (this.theArray[this.topOfStack] == orig(this.theArray[this.topOfStack-1]))
(this.topOfStack >= 0)  ==>  (this.theArray[this.topOfStack] == this.theArray[orig(this.topOfStack)-1])
(this.topOfStack >= 0)  ==>  (this.topOfStack - orig(this.topOfStack) + 1 == 0)
return != null
orig(this.topOfStack) >= 0
this.theArray[orig(this.topOfStack)] == null
this.theArray[this.topOfStack+1..orig(this.topOfStack)] == [null]
this.theArray[this.topOfStack+1..orig(this.topOfStack)-1] == []
this.topOfStack - orig(this.topOfStack) + 1 == 0
this.topOfStack < size(this.theArray[])-1
(orig(this.topOfStack) >> this.theArray.getClass().getName().length() == 0)
(size(this.theArray[])-1 == 0) ==> (orig(this.topOfStack) == 0)
this.theArray[this.topOfStack+1..] elements == this.theArray[orig(this.topOfStack)]
===========================================================================
DataStructures.StackAr.topAndPop():::EXIT111;condition="not(orig(topOfStack == -1))"
===========================================================================
DataStructures.StackAr.topAndPop():::EXIT111;condition="topOfStack == -1"
orig(this.topOfStack) == 0
size(this.theArray[]) one of { 1, 10, 20 }
this.theArray[0..orig(this.topOfStack)] == [null]
this.theArray[] elements == this.theArray[orig(this.topOfStack)]
orig(this.theArray[0..this.topOfStack]) elements == orig(this.theArray[this.topOfStack])
===========================================================================
DataStructures.StackAr.topAndPop():::EXIT111;condition="not(topOfStack == -1)"
===========================================================================
DataStructures.StackAr.topAndPop():::EXIT111;condition="orig(topOfStack == theArray.length - 1)"
this.theArray[0..this.topOfStack] == orig(this.theArray[0..this.topOfStack-1])
size(this.theArray[]) one of { 1, 10, 20 }
this.theArray[this.topOfStack+1..] == [null]
this.theArray[orig(this.topOfStack)] == null
this.theArray[this.topOfStack+1..] elements == this.theArray[orig(this.topOfStack)]
orig(this.theArray[this.topOfStack..]) elements == orig(this.theArray[this.topOfStack])
===========================================================================
DataStructures.StackAr.topAndPop():::EXIT111;condition="not(orig(topOfStack == theArray.length - 1))"
this.theArray[0..this.topOfStack] == orig(this.theArray[0..this.topOfStack-1])
return != null
orig(this.topOfStack) >= 0
size(this.theArray[]) one of { 3, 10, 20 }
this.theArray[orig(this.topOfStack)] == null
this.theArray[this.topOfStack+1..orig(this.topOfStack)] == [null]
this.theArray[this.topOfStack+1..orig(this.topOfStack)-1] == []
this.topOfStack - orig(this.topOfStack) + 1 == 0
(size(this.theArray[]) >> size(this.theArray[])-1 == 0)
this.theArray[this.topOfStack+1..] elements == this.theArray[orig(this.topOfStack)]
this.theArray[this.topOfStack+1..] is a subset of orig(this.theArray[this.topOfStack..])
this.theArray[orig(this.topOfStack)] in orig(this.theArray[this.topOfStack..])
this.theArray[this.topOfStack+1..orig(this.topOfStack)] is a subsequence of orig(this.theArray[this.topOfStack..])
===========================================================================
DataStructures.StackAr.topAndPop():::EXIT111;condition="not(topOfStack == theArray.length - 1)"
this.theArray[0..this.topOfStack] == orig(this.theArray[0..this.topOfStack-1])
return != null
orig(this.topOfStack) >= 0
this.theArray[orig(this.topOfStack)] == null
this.theArray[this.topOfStack+1..orig(this.topOfStack)] == [null]
this.theArray[this.topOfStack+1..orig(this.topOfStack)-1] == []
this.topOfStack - orig(this.topOfStack) + 1 == 0
(orig(this.topOfStack) >> this.theArray.getClass().getName().length() == 0)
(size(this.theArray[])-1 == 0) ==> (orig(this.topOfStack) == 0)
this.theArray[this.topOfStack+1..] elements == this.theArray[orig(this.topOfStack)]
===========================================================================
DataStructures.StackAr.topAndPop():::EXIT111;condition="isEmpty()"
orig(this.topOfStack) == 0
size(this.theArray[]) one of { 1, 10, 20 }
this.theArray[0..orig(this.topOfStack)] == [null]
this.theArray[] elements == this.theArray[orig(this.topOfStack)]
orig(this.theArray[0..this.topOfStack]) elements == orig(this.theArray[this.topOfStack])
===========================================================================
DataStructures.StackAr.topAndPop():::EXIT111;condition="not(isEmpty())"
===========================================================================
DataStructures.StackAr.topAndPop():::EXIT111;condition="not(orig(isEmpty()))"
===========================================================================
DataStructures.StackAr.topAndPop():::EXIT111;condition="not(isFull())"
this.theArray[0..this.topOfStack] == orig(this.theArray[0..this.topOfStack-1])
return != null
orig(this.topOfStack) >= 0
this.theArray[orig(this.topOfStack)] == null
this.theArray[this.topOfStack+1..orig(this.topOfStack)] == [null]
this.theArray[this.topOfStack+1..orig(this.topOfStack)-1] == []
this.topOfStack - orig(this.topOfStack) + 1 == 0
(orig(this.topOfStack) >> this.theArray.getClass().getName().length() == 0)
(size(this.theArray[])-1 == 0) ==> (orig(this.topOfStack) == 0)
this.theArray[this.topOfStack+1..] elements == this.theArray[orig(this.topOfStack)]
===========================================================================
DataStructures.StackAr.topAndPop():::EXIT111;condition="orig(isFull())"
this.theArray[0..this.topOfStack] == orig(this.theArray[0..this.topOfStack-1])
size(this.theArray[]) one of { 1, 10, 20 }
this.theArray[this.topOfStack+1..] == [null]
this.theArray[orig(this.topOfStack)] == null
this.theArray[this.topOfStack+1..] elements == this.theArray[orig(this.topOfStack)]
orig(this.theArray[this.topOfStack..]) elements == orig(this.theArray[this.topOfStack])
===========================================================================
DataStructures.StackAr.topAndPop():::EXIT111;condition="not(orig(isFull()))"
this.theArray[0..this.topOfStack] == orig(this.theArray[0..this.topOfStack-1])
return != null
orig(this.topOfStack) >= 0
size(this.theArray[]) one of { 3, 10, 20 }
this.theArray[orig(this.topOfStack)] == null
this.theArray[this.topOfStack+1..orig(this.topOfStack)] == [null]
this.theArray[this.topOfStack+1..orig(this.topOfStack)-1] == []
this.topOfStack - orig(this.topOfStack) + 1 == 0
(size(this.theArray[]) >> size(this.theArray[])-1 == 0)
this.theArray[this.topOfStack+1..] elements == this.theArray[orig(this.topOfStack)]
this.theArray[this.topOfStack+1..] is a subset of orig(this.theArray[this.topOfStack..])
this.theArray[orig(this.topOfStack)] in orig(this.theArray[this.topOfStack..])
this.theArray[this.topOfStack+1..orig(this.topOfStack)] is a subsequence of orig(this.theArray[this.topOfStack..])
===========================================================================
DataStructures.StackAr.topAndPop():::EXIT
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.theArray.getClass().getName().length() == orig(this.theArray.getClass().getName()).length()
size(this.theArray[]) == orig(size(this.theArray[]))
this.theArray[0..this.topOfStack] == orig(this.theArray[0..post(this.topOfStack)])
this.theArray[orig(this.topOfStack)+1..] == orig(this.theArray[this.topOfStack+1..])
(orig(this.topOfStack) < size(this.theArray[])-1)  ==>  ((size(this.theArray[])-1 == 0) ==> (return.getClass().getName().length() == 0))
(orig(this.topOfStack) < size(this.theArray[])-1)  ==>  ((size(this.theArray[])-1 >> this.theArray.getClass().getName().length() == 0))
(orig(this.topOfStack) < size(this.theArray[])-1)  ==>  (orig(this.topOfStack) <= this.theArray.getClass().getName().length())
(orig(this.topOfStack) < size(this.theArray[])-1)  ==>  (this.theArray[] is a subset of orig(this.theArray[]))
(orig(this.topOfStack) < size(this.theArray[])-1)  ==>  (this.theArray[this.topOfStack+1..] is a subset of orig(this.theArray[post(this.topOfStack)+1..]))
(orig(this.topOfStack) < size(this.theArray[])-1)  ==>  (this.theArray[this.topOfStack+1..orig(this.topOfStack)] is a subsequence of orig(this.theArray[post(this.topOfStack)+1..]))
(orig(this.topOfStack) < size(this.theArray[])-1)  ==>  (this.topOfStack < size(this.theArray[])-1)
(orig(this.topOfStack) < size(this.theArray[])-1)  ==>  (this.topOfStack < this.theArray.getClass().getName().length())
(orig(this.topOfStack) == size(this.theArray[])-1)  ==>  (orig(this.topOfStack) != this.theArray.getClass().getName().length())
(orig(this.topOfStack) == size(this.theArray[])-1)  ==>  (this.theArray[orig(this.topOfStack)+1..] == [])
(orig(this.topOfStack) == size(this.theArray[])-1)  ==>  (this.topOfStack one of { -1, 8, 18 })
(return != null)  <==>  (orig(this.topOfStack) >= 0)
(return != null)  <==>  (this.theArray[this.topOfStack+1..orig(this.topOfStack)] == [null])
(return != null)  ==>  ((orig(this.topOfStack) >> return.getClass().getName().length() == 0))
(return != null)  ==>  ((orig(this.topOfStack) >> this.theArray.getClass().getName().length() == 0))
(return != null)  ==>  ((size(this.theArray[]) >> return.getClass().getName().length() == 0))
(return != null)  ==>  ((size(this.theArray[])-1 == 0) ==> (orig(this.topOfStack) == 0))
(return != null)  ==>  ((size(this.theArray[])-1 >> return.getClass().getName().length() == 0))
(return != null)  ==>  (orig(this.topOfStack) != return.getClass().getName().length())
(return != null)  ==>  (return.getClass().getName() in orig(this.theArray[].getClass().getName()))
(return != null)  ==>  (return.getClass().getName() is printable)
(return != null)  ==>  (return.getClass().getName().length() == 0  (mod 8))
(return != null)  ==>  (return.getClass().getName().length() one of { 16, 24 })
(return != null)  ==>  (size(this.theArray[]) != return.getClass().getName().length())
(return != null)  ==>  (size(this.theArray[])-1 != return.getClass().getName().length())
(return != null)  ==>  (this.theArray.getClass().getName() != return.getClass().getName())
(return != null)  ==>  (this.theArray.getClass().getName().length() != return.getClass().getName().length())
(return != null)  ==>  (this.theArray[0..this.topOfStack] == orig(this.theArray[0..this.topOfStack-1]))
(return != null)  ==>  (this.theArray[orig(this.topOfStack)..] elements == null)
(return != null)  ==>  (this.theArray[orig(this.topOfStack)..] elements == this.theArray[orig(this.topOfStack)])
(return != null)  ==>  (this.theArray[orig(this.topOfStack)] == null)
(return != null)  ==>  (this.theArray[this.topOfStack+1..] elements == this.theArray[orig(this.topOfStack)])
(return != null)  ==>  (this.theArray[this.topOfStack+1..orig(this.topOfStack)-1] == [])
(return != null)  ==>  (this.topOfStack - orig(this.topOfStack) + 1 == 0)
(return != null)  ==>  (this.topOfStack < size(this.theArray[])-1)
(return == null)  <==>  (orig(this.topOfStack) == -1)
(return == null)  <==>  (this.theArray[this.topOfStack+1..orig(this.topOfStack)] == [])
(return == null)  <==>  (this.topOfStack == orig(this.topOfStack))
(return == null)  ==>  (orig(this.theArray[0..this.topOfStack]) == [])
(return == null)  ==>  (orig(this.theArray[]) elements == null)
(return == null)  ==>  (orig(this.theArray[].getClass().getName()) elements == null)
(return == null)  ==>  (orig(this.theArray[post(this.topOfStack)+1..]) elements == null)
(return == null)  ==>  (orig(this.topOfStack) < this.theArray.getClass().getName().length())
(return == null)  ==>  (this.theArray[0..orig(this.topOfStack)] == [])
(return == null)  ==>  (this.theArray[0..this.topOfStack] == [])
(return == null)  ==>  (this.theArray[] == orig(this.theArray[]))
(return == null)  ==>  (this.theArray[] elements == null)
(return == null)  ==>  (this.theArray[].getClass().getName() elements == null)
(return == null)  ==>  (this.theArray[orig(this.topOfStack)+1..this.topOfStack] == [])
(return == null)  ==>  (this.topOfStack < this.theArray.getClass().getName().length())
(return == null)  ==>  (this.topOfStack == -1)
(this.topOfStack == -1)  <==>  (orig(this.topOfStack) one of { -1, 0 })
(this.topOfStack == -1)  ==>  (orig(this.topOfStack) < this.theArray.getClass().getName().length())
(this.topOfStack == -1)  ==>  (orig(this.topOfStack) == (size(this.theArray[]) >> return.getClass().getName().length()))
(this.topOfStack == -1)  ==>  (orig(this.topOfStack) == (size(this.theArray[]) >>> return.getClass().getName().length()))
(this.topOfStack == -1)  ==>  (orig(this.topOfStack) == (size(this.theArray[])-1 >> return.getClass().getName().length()))
(this.topOfStack == -1)  ==>  (orig(this.topOfStack) == (size(this.theArray[])-1 >>> return.getClass().getName().length()))
(this.topOfStack == -1)  ==>  (this.theArray[0..this.topOfStack] == [])
(this.topOfStack == -1)  ==>  (this.theArray[] elements == null)
(this.topOfStack == -1)  ==>  (this.theArray[].getClass().getName() elements == null)
(this.topOfStack == -1)  ==>  (this.topOfStack < this.theArray.getClass().getName().length())
(this.topOfStack == size(this.theArray[])-1)  ==>  (orig(this.theArray[0..this.topOfStack]) == [])
(this.topOfStack == size(this.theArray[])-1)  ==>  (orig(this.theArray[]) == [])
(this.topOfStack == size(this.theArray[])-1)  ==>  (orig(this.theArray[].getClass().getName()) == [])
(this.topOfStack == size(this.theArray[])-1)  ==>  (orig(this.theArray[post(this.topOfStack)+1..]) == [])
(this.topOfStack == size(this.theArray[])-1)  ==>  (return == null)
(this.topOfStack == size(this.theArray[])-1)  ==>  (size(this.theArray[]) is a pointer)
(this.topOfStack == size(this.theArray[])-1)  ==>  (this.theArray[0..orig(this.topOfStack)] == [])
(this.topOfStack == size(this.theArray[])-1)  ==>  (this.theArray[0..this.topOfStack] == [])
(this.topOfStack == size(this.theArray[])-1)  ==>  (this.theArray[] == [])
(this.topOfStack == size(this.theArray[])-1)  ==>  (this.theArray[] == orig(this.theArray[]))
(this.topOfStack == size(this.theArray[])-1)  ==>  (this.theArray[].getClass().getName() == [])
(this.topOfStack == size(this.theArray[])-1)  ==>  (this.theArray[orig(this.topOfStack)+1..] == [])
(this.topOfStack == size(this.theArray[])-1)  ==>  (this.theArray[orig(this.topOfStack)+1..this.topOfStack] == [])
(this.topOfStack == size(this.theArray[])-1)  ==>  (this.theArray[this.topOfStack+1..] == [])
(this.topOfStack == size(this.theArray[])-1)  ==>  (this.theArray[this.topOfStack+1..orig(this.topOfStack)] == [])
(this.topOfStack == size(this.theArray[])-1)  ==>  (this.topOfStack == orig(this.topOfStack))
(this.topOfStack >= 0)  <==>  (orig(this.topOfStack) >= 1)
(this.topOfStack >= 0)  ==>  ((orig(this.topOfStack) >> this.theArray.getClass().getName().length() == 0))
(this.topOfStack >= 0)  ==>  ((size(this.theArray[]) >> size(this.theArray[])-1 == 0))
(this.topOfStack >= 0)  ==>  ((this.topOfStack >> return.getClass().getName().length() == 0))
(this.topOfStack >= 0)  ==>  (return != null)
(this.topOfStack >= 0)  ==>  (size(this.theArray[]) one of { 3, 10, 20 })
(this.topOfStack >= 0)  ==>  (this.theArray[0..this.topOfStack-1] == orig(this.theArray[0..post(this.topOfStack)-1]))
(this.topOfStack >= 0)  ==>  (this.theArray[0..this.topOfStack] == orig(this.theArray[0..this.topOfStack-1]))
(this.topOfStack >= 0)  ==>  (this.theArray[orig(this.topOfStack)..] elements == null)
(this.topOfStack >= 0)  ==>  (this.theArray[orig(this.topOfStack)..] elements == this.theArray[orig(this.topOfStack)])
(this.topOfStack >= 0)  ==>  (this.theArray[orig(this.topOfStack)] == null)
(this.topOfStack >= 0)  ==>  (this.theArray[this.topOfStack+1..] elements == this.theArray[orig(this.topOfStack)])
(this.topOfStack >= 0)  ==>  (this.theArray[this.topOfStack+1..orig(this.topOfStack)-1] == [])
(this.topOfStack >= 0)  ==>  (this.theArray[this.topOfStack+1..orig(this.topOfStack)] == [null])
(this.topOfStack >= 0)  ==>  (this.theArray[this.topOfStack..orig(this.topOfStack)-1] elements == orig(this.theArray[post(this.topOfStack)]))
(this.topOfStack >= 0)  ==>  (this.theArray[this.topOfStack..orig(this.topOfStack)-1] elements == orig(this.theArray[this.topOfStack-1]))
(this.topOfStack >= 0)  ==>  (this.theArray[this.topOfStack..orig(this.topOfStack)-1] elements == this.theArray[orig(this.topOfStack)-1])
(this.topOfStack >= 0)  ==>  (this.theArray[this.topOfStack..orig(this.topOfStack)-1] elements == this.theArray[this.topOfStack])
(this.topOfStack >= 0)  ==>  (this.theArray[this.topOfStack..orig(this.topOfStack)-1] is a subsequence of orig(this.theArray[0..this.topOfStack]))
(this.topOfStack >= 0)  ==>  (this.theArray[this.topOfStack..orig(this.topOfStack)-1] is a subsequence of orig(this.theArray[post(this.topOfStack)..]))
(this.topOfStack >= 0)  ==>  (this.theArray[this.topOfStack] == orig(this.theArray[post(this.topOfStack)]))
(this.topOfStack >= 0)  ==>  (this.theArray[this.topOfStack] == orig(this.theArray[this.topOfStack-1]))
(this.topOfStack >= 0)  ==>  (this.theArray[this.topOfStack] == this.theArray[orig(this.topOfStack)-1])
(this.topOfStack >= 0)  ==>  (this.topOfStack - orig(this.topOfStack) + 1 == 0)
(this.topOfStack >= 0)  ==>  (this.topOfStack < size(this.theArray[])-1)
return.getClass().getName() is printable
return.getClass().getName().length() one of { 16, 24 }
return.getClass().getName().length() == 0  (mod 8)
this.theArray[0..orig(this.topOfStack)] contains no duplicates
this.theArray.getClass().getName() != return.getClass().getName()
this.topOfStack <= orig(this.topOfStack)
this.topOfStack <= this.theArray.getClass().getName().length()
return.getClass().getName() in orig(this.theArray[].getClass().getName())
orig(this.topOfStack) <= size(this.theArray[])-1
(orig(this.topOfStack) >> return.getClass().getName().length() == 0)
orig(this.topOfStack) != return.getClass().getName().length()
this.theArray.getClass().getName().length() != return.getClass().getName().length()
(size(this.theArray[]) == 0) ==> (return.getClass().getName().length() == 0)
(size(this.theArray[]) >> return.getClass().getName().length() == 0)
size(this.theArray[]) != return.getClass().getName().length()
(size(this.theArray[])-1 >> return.getClass().getName().length() == 0)
size(this.theArray[])-1 != return.getClass().getName().length()
===========================================================================
DataStructures.StackAr.topAndPop():::EXIT;condition="orig(topOfStack == -1)"
this.theArray[] == orig(this.theArray[])
this.topOfStack == orig(this.topOfStack)
this.theArray[] elements == null
this.theArray[].getClass().getName() elements == null
this.topOfStack == -1
return == null
this.theArray[0..this.topOfStack] == []
===========================================================================
DataStructures.StackAr.topAndPop():::EXIT;condition="not(orig(topOfStack == -1))"
this.theArray[0..this.topOfStack] == orig(this.theArray[0..this.topOfStack-1])
return != null
orig(this.topOfStack) >= 0
this.theArray[orig(this.topOfStack)] == null
this.theArray[this.topOfStack+1..orig(this.topOfStack)] == [null]
this.theArray[this.topOfStack+1..orig(this.topOfStack)-1] == []
this.topOfStack - orig(this.topOfStack) + 1 == 0
this.topOfStack < size(this.theArray[])-1
(orig(this.topOfStack) >> this.theArray.getClass().getName().length() == 0)
(size(this.theArray[])-1 == 0) ==> (orig(this.topOfStack) == 0)
this.theArray[this.topOfStack+1..] elements == this.theArray[orig(this.topOfStack)]
===========================================================================
DataStructures.StackAr.topAndPop():::EXIT;condition="topOfStack == -1"
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.theArray.getClass().getName().length() == orig(this.theArray.getClass().getName()).length()
size(this.theArray[]) == orig(size(this.theArray[]))
this.theArray[orig(this.topOfStack)+1..] == orig(this.theArray[this.topOfStack+1..])
this.theArray != null
this.theArray.getClass().getName() == java.lang.Object[].class
this.theArray[] elements == null
this.theArray[].getClass().getName() elements == null
this.topOfStack == -1
return.getClass().getName() is printable
this.theArray.getClass().getName().length() == 18
return.getClass().getName().length() one of { 16, 24 }
this.theArray[0..this.topOfStack] == []
this.topOfStack <= orig(this.topOfStack)
this.topOfStack <= size(this.theArray[])-1
return.getClass().getName() in orig(this.theArray[].getClass().getName())
orig(this.topOfStack) < this.theArray.getClass().getName().length()
orig(this.topOfStack) <= size(this.theArray[])-1
(size(this.theArray[]) >> this.theArray.getClass().getName().length() == 0)
this.theArray.getClass().getName().length() != size(this.theArray[])
this.theArray.getClass().getName().length() != size(this.theArray[])-1
(size(this.theArray[]) == 0) ==> (return.getClass().getName().length() == 0)
(size(this.theArray[]) >> return.getClass().getName().length() == 0)
(size(this.theArray[])-1 >> return.getClass().getName().length() == 0)
orig(this.topOfStack) == (size(this.theArray[]) >> return.getClass().getName().length())
orig(this.topOfStack) == (size(this.theArray[]) >>> return.getClass().getName().length())
orig(this.topOfStack) == (size(this.theArray[])-1 >> return.getClass().getName().length())
orig(this.topOfStack) == (size(this.theArray[])-1 >>> return.getClass().getName().length())
===========================================================================
DataStructures.StackAr.topAndPop():::EXIT;condition="not(topOfStack == -1)"
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.theArray.getClass().getName().length() == orig(this.theArray.getClass().getName()).length()
size(this.theArray[]) == orig(size(this.theArray[]))
this.theArray[this.topOfStack] == this.theArray[orig(this.topOfStack)-1]
this.theArray[this.topOfStack] == orig(this.theArray[post(this.topOfStack)])
this.theArray[this.topOfStack] == orig(this.theArray[this.topOfStack-1])
this.theArray[0..this.topOfStack] == orig(this.theArray[0..post(this.topOfStack)])
this.theArray[0..this.topOfStack] == orig(this.theArray[0..this.topOfStack-1])
this.theArray[0..this.topOfStack-1] == orig(this.theArray[0..post(this.topOfStack)-1])
this.theArray[orig(this.topOfStack)+1..] == orig(this.theArray[this.topOfStack+1..])
this.theArray != null
this.theArray.getClass().getName() == java.lang.Object[].class
this.topOfStack >= 0
return != null
return.getClass().getName() is printable
this.theArray.getClass().getName().length() == 18
size(this.theArray[]) one of { 3, 10, 20 }
return.getClass().getName().length() one of { 16, 24 }
return.getClass().getName().length() == 0  (mod 8)
this.theArray[this.topOfStack+1..] elements == null
this.theArray[orig(this.topOfStack)] == null
this.theArray[0..orig(this.topOfStack)] contains no duplicates
this.theArray[this.topOfStack+1..orig(this.topOfStack)] == [null]
this.theArray[this.topOfStack+1..orig(this.topOfStack)-1] == []
this.theArray.getClass().getName() != return.getClass().getName()
this.topOfStack - orig(this.topOfStack) + 1 == 0
this.topOfStack <= this.theArray.getClass().getName().length()
this.topOfStack < size(this.theArray[])-1
(this.topOfStack >> return.getClass().getName().length() == 0)
return.getClass().getName() in orig(this.theArray[].getClass().getName())
(orig(this.topOfStack) >> this.theArray.getClass().getName().length() == 0)
orig(this.topOfStack) <= size(this.theArray[])-1
(orig(this.topOfStack) >> return.getClass().getName().length() == 0)
orig(this.topOfStack) != return.getClass().getName().length()
this.theArray.getClass().getName().length() != size(this.theArray[])
this.theArray.getClass().getName().length() != size(this.theArray[])-1
this.theArray.getClass().getName().length() != return.getClass().getName().length()
(size(this.theArray[]) >> size(this.theArray[])-1 == 0)
(size(this.theArray[]) >> return.getClass().getName().length() == 0)
size(this.theArray[]) != return.getClass().getName().length()
(size(this.theArray[])-1 >> return.getClass().getName().length() == 0)
size(this.theArray[])-1 != return.getClass().getName().length()
this.theArray[this.topOfStack..orig(this.topOfStack)-1] elements == this.theArray[this.topOfStack]
this.theArray[this.topOfStack+1..] elements == this.theArray[orig(this.topOfStack)]
this.theArray[this.topOfStack..orig(this.topOfStack)-1] is a subsequence of orig(this.theArray[post(this.topOfStack)..])
this.theArray[this.topOfStack..orig(this.topOfStack)-1] is a subsequence of orig(this.theArray[0..this.topOfStack])
===========================================================================
DataStructures.StackAr.topAndPop():::EXIT;condition="orig(topOfStack == theArray.length - 1)"
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
orig(this.topOfStack) == size(this.theArray[])-1
orig(this.topOfStack) == orig(size(this.theArray[]))-1
this.theArray.getClass().getName().length() == orig(this.theArray.getClass().getName()).length()
size(this.theArray[]) == orig(size(this.theArray[]))
this.theArray[0..this.topOfStack] == orig(this.theArray[0..post(this.topOfStack)])
this.theArray.getClass().getName() == java.lang.Object[].class
this.topOfStack one of { -1, 8, 18 }
return.getClass().getName() is printable
this.theArray.getClass().getName().length() == 18
return.getClass().getName().length() one of { 16, 24 }
this.theArray[this.topOfStack+1..] elements == null
this.theArray[orig(this.topOfStack)+1..] == []
this.topOfStack <= orig(this.topOfStack)
this.topOfStack <= this.theArray.getClass().getName().length()
return.getClass().getName() in orig(this.theArray[].getClass().getName())
orig(this.topOfStack) != this.theArray.getClass().getName().length()
(orig(this.topOfStack) >> return.getClass().getName().length() == 0)
this.theArray.getClass().getName().length() != size(this.theArray[])
(size(this.theArray[]) == 0) ==> (return.getClass().getName().length() == 0)
(size(this.theArray[]) >> return.getClass().getName().length() == 0)
===========================================================================
DataStructures.StackAr.topAndPop():::EXIT;condition="not(orig(topOfStack == theArray.length - 1))"
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.theArray.getClass().getName().length() == orig(this.theArray.getClass().getName()).length()
size(this.theArray[]) == orig(size(this.theArray[]))
this.theArray[0..this.topOfStack] == orig(this.theArray[0..post(this.topOfStack)])
this.theArray[orig(this.topOfStack)+1..] == orig(this.theArray[this.topOfStack+1..])
this.theArray != null
this.theArray.getClass().getName() == java.lang.Object[].class
this.topOfStack >= -1
return.getClass().getName() is printable
orig(this.topOfStack) >= -1
this.theArray.getClass().getName().length() == 18
return.getClass().getName().length() one of { 16, 24 }
return.getClass().getName().length() == 0  (mod 8)
this.theArray[this.topOfStack+1..] elements == null
this.theArray[0..orig(this.topOfStack)] contains no duplicates
orig(this.theArray[0..this.topOfStack]) contains no duplicates
orig(this.theArray[0..this.topOfStack]) elements != null
this.theArray.getClass().getName() != return.getClass().getName()
this.theArray[] is a subset of orig(this.theArray[])
this.topOfStack <= orig(this.topOfStack)
this.topOfStack < this.theArray.getClass().getName().length()
this.topOfStack < size(this.theArray[])-1
return.getClass().getName() in orig(this.theArray[].getClass().getName())
orig(this.topOfStack) <= this.theArray.getClass().getName().length()
orig(this.topOfStack) < size(this.theArray[])-1
(orig(this.topOfStack) >> return.getClass().getName().length() == 0)
orig(this.topOfStack) != return.getClass().getName().length()
(size(this.theArray[]) >> this.theArray.getClass().getName().length() == 0)
this.theArray.getClass().getName().length() != size(this.theArray[])
(size(this.theArray[])-1 >> this.theArray.getClass().getName().length() == 0)
this.theArray.getClass().getName().length() != size(this.theArray[])-1
this.theArray.getClass().getName().length() != return.getClass().getName().length()
(size(this.theArray[]) >> return.getClass().getName().length() == 0)
size(this.theArray[]) != return.getClass().getName().length()
(size(this.theArray[])-1 == 0) ==> (return.getClass().getName().length() == 0)
(size(this.theArray[])-1 >> return.getClass().getName().length() == 0)
size(this.theArray[])-1 != return.getClass().getName().length()
this.theArray[this.topOfStack+1..] is a subset of orig(this.theArray[post(this.topOfStack)+1..])
this.theArray[this.topOfStack+1..orig(this.topOfStack)] is a subsequence of orig(this.theArray[post(this.topOfStack)+1..])
===========================================================================
DataStructures.StackAr.topAndPop():::EXIT;condition="topOfStack == theArray.length - 1"
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.theArray[] == orig(this.theArray[])
this.topOfStack == orig(this.topOfStack)
this.topOfStack == size(this.theArray[])-1
this.topOfStack == orig(size(this.theArray[]))-1
this.theArray.getClass().getName().length() == orig(this.theArray.getClass().getName()).length()
this.theArray.getClass().getName() == java.lang.Object[].class
this.theArray[] == []
this.theArray[].getClass().getName() == []
return == null
this.theArray.getClass().getName().length() == 18
===========================================================================
DataStructures.StackAr.topAndPop():::EXIT;condition="not(topOfStack == theArray.length - 1)"
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.theArray.getClass().getName().length() == orig(this.theArray.getClass().getName()).length()
size(this.theArray[]) == orig(size(this.theArray[]))
this.theArray[0..this.topOfStack] == orig(this.theArray[0..post(this.topOfStack)])
this.theArray[orig(this.topOfStack)+1..] == orig(this.theArray[this.topOfStack+1..])
this.theArray != null
this.theArray.getClass().getName() == java.lang.Object[].class
this.topOfStack >= -1
return.getClass().getName() is printable
this.theArray.getClass().getName().length() == 18
size(this.theArray[]) >= 1
return.getClass().getName().length() one of { 16, 24 }
return.getClass().getName().length() == 0  (mod 8)
this.theArray[this.topOfStack+1..] elements == null
this.theArray[0..orig(this.topOfStack)] contains no duplicates
this.theArray.getClass().getName() != return.getClass().getName()
this.topOfStack <= orig(this.topOfStack)
this.topOfStack <= this.theArray.getClass().getName().length()
this.topOfStack < size(this.theArray[])-1
return.getClass().getName() in orig(this.theArray[].getClass().getName())
orig(this.topOfStack) <= size(this.theArray[])-1
(orig(this.topOfStack) >> return.getClass().getName().length() == 0)
orig(this.topOfStack) != return.getClass().getName().length()
(size(this.theArray[]) >> this.theArray.getClass().getName().length() == 0)
this.theArray.getClass().getName().length() != size(this.theArray[])
(size(this.theArray[])-1 >> this.theArray.getClass().getName().length() == 0)
this.theArray.getClass().getName().length() != size(this.theArray[])-1
this.theArray.getClass().getName().length() != return.getClass().getName().length()
(size(this.theArray[]) >> return.getClass().getName().length() == 0)
size(this.theArray[]) != return.getClass().getName().length()
(size(this.theArray[])-1 >> return.getClass().getName().length() == 0)
size(this.theArray[])-1 != return.getClass().getName().length()
===========================================================================
DataStructures.StackAr.topAndPop():::EXIT;condition="isEmpty()"
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.theArray.getClass().getName().length() == orig(this.theArray.getClass().getName()).length()
size(this.theArray[]) == orig(size(this.theArray[]))
this.theArray[orig(this.topOfStack)+1..] == orig(this.theArray[this.topOfStack+1..])
this.theArray != null
this.theArray.getClass().getName() == java.lang.Object[].class
this.theArray[] elements == null
this.theArray[].getClass().getName() elements == null
this.topOfStack == -1
return.getClass().getName() is printable
this.theArray.getClass().getName().length() == 18
return.getClass().getName().length() one of { 16, 24 }
this.theArray[0..this.topOfStack] == []
this.topOfStack <= orig(this.topOfStack)
this.topOfStack <= size(this.theArray[])-1
return.getClass().getName() in orig(this.theArray[].getClass().getName())
orig(this.topOfStack) < this.theArray.getClass().getName().length()
orig(this.topOfStack) <= size(this.theArray[])-1
(size(this.theArray[]) >> this.theArray.getClass().getName().length() == 0)
this.theArray.getClass().getName().length() != size(this.theArray[])
this.theArray.getClass().getName().length() != size(this.theArray[])-1
(size(this.theArray[]) == 0) ==> (return.getClass().getName().length() == 0)
(size(this.theArray[]) >> return.getClass().getName().length() == 0)
(size(this.theArray[])-1 >> return.getClass().getName().length() == 0)
orig(this.topOfStack) == (size(this.theArray[]) >> return.getClass().getName().length())
orig(this.topOfStack) == (size(this.theArray[]) >>> return.getClass().getName().length())
orig(this.topOfStack) == (size(this.theArray[])-1 >> return.getClass().getName().length())
orig(this.topOfStack) == (size(this.theArray[])-1 >>> return.getClass().getName().length())
===========================================================================
DataStructures.StackAr.topAndPop():::EXIT;condition="not(isEmpty())"
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.theArray.getClass().getName().length() == orig(this.theArray.getClass().getName()).length()
size(this.theArray[]) == orig(size(this.theArray[]))
this.theArray[this.topOfStack] == this.theArray[orig(this.topOfStack)-1]
this.theArray[this.topOfStack] == orig(this.theArray[post(this.topOfStack)])
this.theArray[this.topOfStack] == orig(this.theArray[this.topOfStack-1])
this.theArray[0..this.topOfStack] == orig(this.theArray[0..post(this.topOfStack)])
this.theArray[0..this.topOfStack] == orig(this.theArray[0..this.topOfStack-1])
this.theArray[0..this.topOfStack-1] == orig(this.theArray[0..post(this.topOfStack)-1])
this.theArray[orig(this.topOfStack)+1..] == orig(this.theArray[this.topOfStack+1..])
this.theArray != null
this.theArray.getClass().getName() == java.lang.Object[].class
this.topOfStack >= 0
return != null
return.getClass().getName() is printable
this.theArray.getClass().getName().length() == 18
size(this.theArray[]) one of { 3, 10, 20 }
return.getClass().getName().length() one of { 16, 24 }
return.getClass().getName().length() == 0  (mod 8)
this.theArray[this.topOfStack+1..] elements == null
this.theArray[orig(this.topOfStack)] == null
this.theArray[0..orig(this.topOfStack)] contains no duplicates
this.theArray[this.topOfStack+1..orig(this.topOfStack)] == [null]
this.theArray[this.topOfStack+1..orig(this.topOfStack)-1] == []
this.theArray.getClass().getName() != return.getClass().getName()
this.topOfStack - orig(this.topOfStack) + 1 == 0
this.topOfStack <= this.theArray.getClass().getName().length()
this.topOfStack < size(this.theArray[])-1
(this.topOfStack >> return.getClass().getName().length() == 0)
return.getClass().getName() in orig(this.theArray[].getClass().getName())
(orig(this.topOfStack) >> this.theArray.getClass().getName().length() == 0)
orig(this.topOfStack) <= size(this.theArray[])-1
(orig(this.topOfStack) >> return.getClass().getName().length() == 0)
orig(this.topOfStack) != return.getClass().getName().length()
this.theArray.getClass().getName().length() != size(this.theArray[])
this.theArray.getClass().getName().length() != size(this.theArray[])-1
this.theArray.getClass().getName().length() != return.getClass().getName().length()
(size(this.theArray[]) >> size(this.theArray[])-1 == 0)
(size(this.theArray[]) >> return.getClass().getName().length() == 0)
size(this.theArray[]) != return.getClass().getName().length()
(size(this.theArray[])-1 >> return.getClass().getName().length() == 0)
size(this.theArray[])-1 != return.getClass().getName().length()
this.theArray[this.topOfStack..orig(this.topOfStack)-1] elements == this.theArray[this.topOfStack]
this.theArray[this.topOfStack+1..] elements == this.theArray[orig(this.topOfStack)]
this.theArray[this.topOfStack..orig(this.topOfStack)-1] is a subsequence of orig(this.theArray[post(this.topOfStack)..])
this.theArray[this.topOfStack..orig(this.topOfStack)-1] is a subsequence of orig(this.theArray[0..this.topOfStack])
===========================================================================
DataStructures.StackAr.topAndPop():::EXIT;condition="orig(isEmpty())"
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.theArray[] == orig(this.theArray[])
this.topOfStack == orig(this.topOfStack)
this.theArray.getClass().getName().length() == orig(this.theArray.getClass().getName()).length()
this.theArray != null
this.theArray.getClass().getName() == java.lang.Object[].class
this.theArray[] elements == null
this.theArray[].getClass().getName() elements == null
this.topOfStack == -1
return == null
this.theArray.getClass().getName().length() == 18
this.theArray[0..this.topOfStack] == []
this.topOfStack <= size(this.theArray[])-1
(size(this.theArray[]) >> this.theArray.getClass().getName().length() == 0)
this.theArray.getClass().getName().length() != size(this.theArray[])
this.theArray.getClass().getName().length() != size(this.theArray[])-1
===========================================================================
DataStructures.StackAr.topAndPop():::EXIT;condition="not(orig(isEmpty()))"
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.theArray.getClass().getName().length() == orig(this.theArray.getClass().getName()).length()
size(this.theArray[]) == orig(size(this.theArray[]))
this.theArray[0..this.topOfStack] == orig(this.theArray[0..post(this.topOfStack)])
this.theArray[0..this.topOfStack] == orig(this.theArray[0..this.topOfStack-1])
this.theArray[orig(this.topOfStack)+1..] == orig(this.theArray[this.topOfStack+1..])
this.theArray != null
this.theArray.getClass().getName() == java.lang.Object[].class
this.topOfStack >= -1
return != null
return.getClass().getName() is printable
orig(this.topOfStack) >= 0
this.theArray.getClass().getName().length() == 18
return.getClass().getName().length() one of { 16, 24 }
return.getClass().getName().length() == 0  (mod 8)
this.theArray[this.topOfStack+1..] elements == null
this.theArray[orig(this.topOfStack)] == null
this.theArray[0..orig(this.topOfStack)] contains no duplicates
orig(this.theArray[0..this.topOfStack]) contains no duplicates
orig(this.theArray[0..this.topOfStack]) elements != null
this.theArray[this.topOfStack+1..orig(this.topOfStack)] == [null]
this.theArray[this.topOfStack+1..orig(this.topOfStack)-1] == []
this.theArray.getClass().getName() != return.getClass().getName()
this.topOfStack - orig(this.topOfStack) + 1 == 0
this.topOfStack <= this.theArray.getClass().getName().length()
this.topOfStack < size(this.theArray[])-1
return.getClass().getName() in orig(this.theArray[].getClass().getName())
(orig(this.topOfStack) >> this.theArray.getClass().getName().length() == 0)
(size(this.theArray[])-1 == 0) ==> (orig(this.topOfStack) == 0)
orig(this.topOfStack) <= size(this.theArray[])-1
(orig(this.topOfStack) >> return.getClass().getName().length() == 0)
orig(this.topOfStack) != return.getClass().getName().length()
this.theArray.getClass().getName().length() != size(this.theArray[])
this.theArray.getClass().getName().length() != size(this.theArray[])-1
this.theArray.getClass().getName().length() != return.getClass().getName().length()
(size(this.theArray[]) >> return.getClass().getName().length() == 0)
size(this.theArray[]) != return.getClass().getName().length()
(size(this.theArray[])-1 >> return.getClass().getName().length() == 0)
size(this.theArray[])-1 != return.getClass().getName().length()
this.theArray[this.topOfStack+1..] elements == this.theArray[orig(this.topOfStack)]
===========================================================================
DataStructures.StackAr.topAndPop():::EXIT;condition="isFull()"
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.theArray[] == orig(this.theArray[])
this.topOfStack == orig(this.topOfStack)
this.topOfStack == size(this.theArray[])-1
this.topOfStack == orig(size(this.theArray[]))-1
this.theArray.getClass().getName().length() == orig(this.theArray.getClass().getName()).length()
this.theArray.getClass().getName() == java.lang.Object[].class
this.theArray[] == []
this.theArray[].getClass().getName() == []
return == null
this.theArray.getClass().getName().length() == 18
===========================================================================
DataStructures.StackAr.topAndPop():::EXIT;condition="not(isFull())"
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.theArray.getClass().getName().length() == orig(this.theArray.getClass().getName()).length()
size(this.theArray[]) == orig(size(this.theArray[]))
this.theArray[0..this.topOfStack] == orig(this.theArray[0..post(this.topOfStack)])
this.theArray[orig(this.topOfStack)+1..] == orig(this.theArray[this.topOfStack+1..])
this.theArray != null
this.theArray.getClass().getName() == java.lang.Object[].class
this.topOfStack >= -1
return.getClass().getName() is printable
this.theArray.getClass().getName().length() == 18
size(this.theArray[]) >= 1
return.getClass().getName().length() one of { 16, 24 }
return.getClass().getName().length() == 0  (mod 8)
this.theArray[this.topOfStack+1..] elements == null
this.theArray[0..orig(this.topOfStack)] contains no duplicates
this.theArray.getClass().getName() != return.getClass().getName()
this.topOfStack <= orig(this.topOfStack)
this.topOfStack <= this.theArray.getClass().getName().length()
this.topOfStack < size(this.theArray[])-1
return.getClass().getName() in orig(this.theArray[].getClass().getName())
orig(this.topOfStack) <= size(this.theArray[])-1
(orig(this.topOfStack) >> return.getClass().getName().length() == 0)
orig(this.topOfStack) != return.getClass().getName().length()
(size(this.theArray[]) >> this.theArray.getClass().getName().length() == 0)
this.theArray.getClass().getName().length() != size(this.theArray[])
(size(this.theArray[])-1 >> this.theArray.getClass().getName().length() == 0)
this.theArray.getClass().getName().length() != size(this.theArray[])-1
this.theArray.getClass().getName().length() != return.getClass().getName().length()
(size(this.theArray[]) >> return.getClass().getName().length() == 0)
size(this.theArray[]) != return.getClass().getName().length()
(size(this.theArray[])-1 >> return.getClass().getName().length() == 0)
size(this.theArray[])-1 != return.getClass().getName().length()
===========================================================================
DataStructures.StackAr.topAndPop():::EXIT;condition="orig(isFull())"
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
orig(this.topOfStack) == size(this.theArray[])-1
orig(this.topOfStack) == orig(size(this.theArray[]))-1
this.theArray.getClass().getName().length() == orig(this.theArray.getClass().getName()).length()
size(this.theArray[]) == orig(size(this.theArray[]))
this.theArray[0..this.topOfStack] == orig(this.theArray[0..post(this.topOfStack)])
this.theArray.getClass().getName() == java.lang.Object[].class
this.topOfStack one of { -1, 8, 18 }
return.getClass().getName() is printable
this.theArray.getClass().getName().length() == 18
return.getClass().getName().length() one of { 16, 24 }
this.theArray[this.topOfStack+1..] elements == null
this.theArray[orig(this.topOfStack)+1..] == []
this.topOfStack <= orig(this.topOfStack)
this.topOfStack <= this.theArray.getClass().getName().length()
return.getClass().getName() in orig(this.theArray[].getClass().getName())
orig(this.topOfStack) != this.theArray.getClass().getName().length()
(orig(this.topOfStack) >> return.getClass().getName().length() == 0)
this.theArray.getClass().getName().length() != size(this.theArray[])
(size(this.theArray[]) == 0) ==> (return.getClass().getName().length() == 0)
(size(this.theArray[]) >> return.getClass().getName().length() == 0)
===========================================================================
DataStructures.StackAr.topAndPop():::EXIT;condition="not(orig(isFull()))"
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.theArray.getClass().getName().length() == orig(this.theArray.getClass().getName()).length()
size(this.theArray[]) == orig(size(this.theArray[]))
this.theArray[0..this.topOfStack] == orig(this.theArray[0..post(this.topOfStack)])
this.theArray[orig(this.topOfStack)+1..] == orig(this.theArray[this.topOfStack+1..])
this.theArray != null
this.theArray.getClass().getName() == java.lang.Object[].class
this.topOfStack >= -1
return.getClass().getName() is printable
orig(this.topOfStack) >= -1
this.theArray.getClass().getName().length() == 18
return.getClass().getName().length() one of { 16, 24 }
return.getClass().getName().length() == 0  (mod 8)
this.theArray[this.topOfStack+1..] elements == null
this.theArray[0..orig(this.topOfStack)] contains no duplicates
orig(this.theArray[0..this.topOfStack]) contains no duplicates
orig(this.theArray[0..this.topOfStack]) elements != null
this.theArray.getClass().getName() != return.getClass().getName()
this.theArray[] is a subset of orig(this.theArray[])
this.topOfStack <= orig(this.topOfStack)
this.topOfStack < this.theArray.getClass().getName().length()
this.topOfStack < size(this.theArray[])-1
return.getClass().getName() in orig(this.theArray[].getClass().getName())
orig(this.topOfStack) <= this.theArray.getClass().getName().length()
orig(this.topOfStack) < size(this.theArray[])-1
(orig(this.topOfStack) >> return.getClass().getName().length() == 0)
orig(this.topOfStack) != return.getClass().getName().length()
(size(this.theArray[]) >> this.theArray.getClass().getName().length() == 0)
this.theArray.getClass().getName().length() != size(this.theArray[])
(size(this.theArray[])-1 >> this.theArray.getClass().getName().length() == 0)
this.theArray.getClass().getName().length() != size(this.theArray[])-1
this.theArray.getClass().getName().length() != return.getClass().getName().length()
(size(this.theArray[]) >> return.getClass().getName().length() == 0)
size(this.theArray[]) != return.getClass().getName().length()
(size(this.theArray[])-1 == 0) ==> (return.getClass().getName().length() == 0)
(size(this.theArray[])-1 >> return.getClass().getName().length() == 0)
size(this.theArray[])-1 != return.getClass().getName().length()
this.theArray[this.topOfStack+1..] is a subset of orig(this.theArray[post(this.topOfStack)+1..])
this.theArray[this.topOfStack+1..orig(this.topOfStack)] is a subsequence of orig(this.theArray[post(this.topOfStack)+1..])
