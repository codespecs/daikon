package DataStructures;

// StackAr class
//
// CONSTRUCTION: with or without a capacity; default is 10
//
// ******************PUBLIC OPERATIONS*********************
// void push( x )         --> Insert x
// void pop( )            --> Remove most recently inserted item
// Object top( )          --> Return most recently inserted item
// Object topAndPop( )    --> Return and remove most recently inserted item
// boolean isEmpty( )     --> Return true if empty; else false
// boolean isFull( )      --> Return true if full; else false
// void makeEmpty( )      --> Remove all items
// ******************ERRORS********************************
// Overflow and Underflow thrown as needed

/**
 * Array-based implementation of the stack.
 * @author Mark Allen Weiss
 */
public class StackAr
{

    /*@ invariant this.theArray != null; */
    /*@ invariant \typeof(this.theArray) == \type(java.lang.Object[]); */
    /*@ invariant this.topOfStack >= -1; */
    /*@ invariant \typeof(this.theArray).length() == 18; */
    /*@ invariant (\forall int i; (this.topOfStack+1 <= i && i <= this.theArray.length-1) ==> (this.theArray[i] == null)); */
    /*@ invariant (\forall int i; (0 <= i && i <= this.topOfStack) ==> (this.theArray[i] != null)); */
    /*@ invariant this.topOfStack <= this.theArray.length-1; */
    /*@ invariant \typeof(this.theArray).length() != this.theArray.length; */
    /*@ invariant \typeof(this.theArray).length() != this.theArray.length-1; */
    /*@ invariant theArray.owner == this; */
    /*@ requires capacity >= 0; */
    /*@ ensures \old(capacity) == this.theArray.length; */
    /*@ ensures (\forall int i; (0 <= i && i <= this.theArray.length-1) ==> (this.theArray[i] == null)); */
    /*@ ensures (\forall int i; (0 <= i && i <= this.theArray.length-1) ==> (\typeof(this.theArray[i]) == \typeof(null))); */
    /*@ ensures this.topOfStack == -1; */
    /*@ ensures (\forall int i; (0 <= i && i <= this.topOfStack) ==> (this.theArray[i] != null)); */
    /*@ ensures \old(capacity) != \typeof(this.theArray).length(); */
    /**
     * Construct the stack.
     * @param capacity the capacity.
     */
    public StackAr( int capacity )
    {
        theArray = new Object[ capacity ];
        /*@ set theArray.owner = this; */
        topOfStack = -1;
    }

    /*@ modifies this.theArray[this.topOfStack], this.theArray[this.topOfStack-1], this.theArray[this.topOfStack..], this.theArray[0..this.topOfStack-1]; */
    /*@ ensures (this.topOfStack == -1)  ==  (\result == true); */
    /*@ ensures (this.topOfStack == -1)  ==>  ((\forall int i; (0 <= i && i <= this.topOfStack) ==> (this.theArray[i] != null))); */
    /*@ ensures (this.topOfStack == -1)  ==>  ((\forall int i; (0 <= i && i <= this.theArray.length-1) ==> (this.theArray[i] == null))); */
    /*@ ensures (this.topOfStack == -1)  ==>  ((\forall int i; (0 <= i && i <= this.theArray.length-1) ==> (\typeof(this.theArray[i]) == \typeof(null)))); */
    /*@ ensures (this.topOfStack == -1)  ==>  (this.topOfStack < \typeof(this.theArray).length()); */
    /*@ ensures (this.topOfStack >= 0)  ==  (\result == false); */
    /*@ ensures (this.topOfStack >= 0)  ==>  ((this.theArray.length-1 == 0) ==> (this.topOfStack == 0)); */
    /*@ ensures (this.topOfStack >= 0)  ==>  ((\forall int i; (\old(this.topOfStack) <= i && i <= this.topOfStack+1) ==> (this.theArray[i] != null))); */
    /*@ ensures (this.topOfStack >= 0)  ==>  ((\forall int i; (this.topOfStack <= i && i <= \old(this.topOfStack)+1) ==> (this.theArray[i] != null))); */
    /*@ ensures (\forall int i; (this.topOfStack+1 <= i && i <= \old(this.topOfStack)) ==> (this.theArray[i] != null)); */
    /**
     * Test if the stack is logically empty.
     * @return true if empty, false otherwise.
     * @observer // annotation added by Jeremy
     */
    public boolean isEmpty( )
    {
        return topOfStack == -1;
    }

    /*@ modifies this.theArray[this.topOfStack], this.theArray[this.topOfStack-1], this.theArray[this.topOfStack..], this.theArray[0..this.topOfStack-1]; */
    /*@ ensures (\result == false)  ==  ((\forall int i; (this.topOfStack+1 <= i && i <= this.theArray.length-1) ==> (this.theArray[i] == null))); */
    /*@ ensures (\result == false)  ==  (this.topOfStack < this.theArray.length-1); */
    /*@ ensures (\result == false)  ==>  (this.topOfStack <= \typeof(this.theArray).length()); */
    /*@ ensures (\result == true)  ==  (this.topOfStack == this.theArray.length-1); */
    /*@ ensures (\result == true)  ==>  (\nonnullelements(this.theArray)); */
    /*@ ensures (\result == true)  ==>  ((\forall int i; (this.topOfStack+1 <= i && i <= this.theArray.length-1) ==> (this.theArray[i] != null))); */
    /*@ ensures (\result == true)  ==>  (this.topOfStack != \typeof(this.theArray).length()); */
    /*@ ensures (\forall int i; (this.topOfStack+1 <= i && i <= \old(this.topOfStack)) ==> (this.theArray[i] != null)); */
    /**
     * Test if the stack is logically full.
     * @return true if full, false otherwise.
     * @observer // annotation added by Jeremy
     */
    public boolean isFull( )
    {
        return topOfStack == theArray.length - 1;
    }


    /*@ requires this.topOfStack < \typeof(this.theArray).length(); */
    /*@ requires (this.topOfStack == 0) ==> (this.theArray.length-1 == 0); */
    /*@ modifies this.theArray[*], this.topOfStack, this.theArray[this.topOfStack], this.theArray[this.topOfStack-1], this.theArray[this.topOfStack..], this.theArray[0..this.topOfStack], this.theArray[0..this.topOfStack-1]; */
    /*@ ensures (\forall int i; (0 <= i && i <= this.theArray.length-1) ==> (this.theArray[i] == null)); */
    /*@ ensures (\forall int i; (0 <= i && i <= this.theArray.length-1) ==> (\typeof(this.theArray[i]) == \typeof(null))); */
    /*@ ensures this.topOfStack == -1; */
    /*@ ensures (\forall int i; (0 <= i && i <= this.topOfStack) ==> (this.theArray[i] != null)); */
    /*@ ensures this.topOfStack <= \old(this.topOfStack); */
    /*@ ensures \old(this.topOfStack) < \typeof(this.theArray).length(); */
    /*@ ensures (\old(this.topOfStack) == 0) ==> (this.theArray.length-1 == 0); */
    /*@ ensures \old(this.topOfStack) <= this.theArray.length-1; */
    /**
     * Make the stack logically empty.
     */
    public void makeEmpty( )
    {
        java.util.Arrays.fill(theArray, 0, topOfStack + 1, null);
        topOfStack = -1;
    }

    /*@ modifies this.theArray[this.topOfStack], this.theArray[this.topOfStack-1], this.theArray[this.topOfStack..], this.theArray[0..this.topOfStack-1]; */
    /*@ ensures (this.topOfStack == -1)  ==  (\result == null); */
    /*@ ensures (this.topOfStack == -1)  ==>  ((\forall int i; (0 <= i && i <= this.topOfStack) ==> (this.theArray[i] != null))); */
    /*@ ensures (this.topOfStack == -1)  ==>  ((\forall int i; (0 <= i && i <= this.theArray.length-1) ==> (this.theArray[i] == null))); */
    /*@ ensures (this.topOfStack == -1)  ==>  ((\forall int i; (0 <= i && i <= this.theArray.length-1) ==> (this.theArray[i] == \result))); */
    /*@ ensures (this.topOfStack == -1)  ==>  ((\forall int i; (0 <= i && i <= this.theArray.length-1) ==> (\typeof(this.theArray[i]) == \typeof(null)))); */
    /*@ ensures (this.topOfStack == -1)  ==>  ((\forall int i; (this.topOfStack+1 <= i && i <= this.theArray.length-1) ==> (this.theArray[i] == \result))); */
    /*@ ensures (this.topOfStack == -1)  ==>  (this.topOfStack < \typeof(this.theArray).length()); */
    /*@ ensures (this.topOfStack >= 0)  ==>  ((this.theArray.length-1 == 0) ==> (this.topOfStack == 0)); */
    /*@ ensures (this.topOfStack >= 0)  ==>  (\result == \old(this.theArray[this.topOfStack])); */
    /*@ ensures (this.topOfStack >= 0)  ==>  (\result == this.theArray[\old(this.topOfStack)]); */
    /*@ ensures (this.topOfStack >= 0)  ==>  (\result == this.theArray[this.topOfStack]); */
    /*@ ensures (this.topOfStack >= 0)  ==>  (!(\forall int i; (0 <= i && i <= this.theArray.length-1) ==> (\typeof(this.theArray[i]) != \typeof(\result)))); */
    /*@ ensures (this.topOfStack >= 0)  ==>  (\typeof(\result).length() == 16 || \typeof(\result).length() == 22 || \typeof(\result).length() == 24); */
    /*@ ensures (this.topOfStack >= 0)  ==>  (this.theArray.length != \typeof(\result).length()); */
    /*@ ensures (this.topOfStack >= 0)  ==>  (this.theArray.length-1 != \typeof(\result).length()); */
    /*@ ensures (this.topOfStack >= 0)  ==>  (\typeof(this.theArray) != \typeof(\result)); */
    /*@ ensures (this.topOfStack >= 0)  ==>  (\typeof(this.theArray).length() != \typeof(\result).length()); */
    /*@ ensures (this.topOfStack >= 0)  ==>  ((\forall int i; (\old(this.topOfStack) <= i && i <= this.topOfStack+1) ==> (this.theArray[i] != null))); */
    /*@ ensures (this.topOfStack >= 0)  ==>  ((\forall int i; (this.topOfStack <= i && i <= \old(this.topOfStack)+1) ==> (this.theArray[i] != null))); */
    /*@ ensures \typeof(\result).length() == 16 || \typeof(\result).length() == 22 || \typeof(\result).length() == 24; */
    /*@ ensures (\forall int i; (this.topOfStack+1 <= i && i <= \old(this.topOfStack)) ==> (this.theArray[i] != null)); */
    /*@ ensures \typeof(this.theArray) != \typeof(\result); */
    /*@ ensures !(\forall int i; (0 <= i && i <= this.theArray.length-1) ==> (\typeof(this.theArray[i]) != \typeof(\result))); */
    /*@ ensures \typeof(this.theArray).length() != \typeof(\result).length(); */
    /*@ ensures (this.theArray.length == 0) ==> (\typeof(\result).length() == 0); */
    /*@ ensures this.theArray.length != \typeof(\result).length(); */
    /*@ ensures this.theArray.length-1 != \typeof(\result).length(); */
    /**
     * Get the most recently inserted item in the stack.
     * Does not alter the stack.
     * @return the most recently inserted item in the stack, or null, if empty.
     * @observer // annotation added by Jeremy
     */
    public Object top( )
    {
        if( isEmpty( ) )
            return null;
        return theArray[ topOfStack ];
    }

    /*@ requires this.topOfStack >= 0; */
    /*@ modifies this.theArray[*], this.topOfStack, this.theArray[this.topOfStack], this.theArray[this.topOfStack-1], this.theArray[this.topOfStack..], this.theArray[this.topOfStack+1..], this.theArray[0..this.topOfStack], this.theArray[0..this.topOfStack-1]; */
    /*@ ensures this.theArray[\old(this.topOfStack)] == null; */
    /*@ ensures (\forall int i; (this.topOfStack+1 <= i && i <= \old(this.topOfStack)) ==> (this.theArray[i] == null)); */
    /*@ ensures (\forall int i; (this.topOfStack+1 <= i && i <= \old(this.topOfStack)+1) ==> (this.theArray[i] != null)); */
    /*@ ensures this.topOfStack - \old(this.topOfStack) + 1 == 0; */
    /*@ ensures this.topOfStack <= \typeof(this.theArray).length(); */
    /*@ ensures this.topOfStack < this.theArray.length-1; */
    /*@ ensures \old(this.topOfStack) <= this.theArray.length-1; */
    /*@ ensures (\forall int i; (this.topOfStack+1 <= i && i <= this.theArray.length-1) ==> (this.theArray[i] == this.theArray[\old(this.topOfStack)])); */
    /**
     * Remove the most recently inserted item from the stack.
     * @exception Underflow if stack is already empty.
     */
    public void pop( ) throws Underflow
    {
        if( isEmpty( ) )
            throw new Underflow( );
        theArray[ topOfStack-- ] = null;
    }

    /*@ requires x != null; */
    /*@ requires \typeof(x).length() == 16 || \typeof(x).length() == 22 || \typeof(x).length() == 24; */
    /*@ requires \typeof(this.theArray) != \typeof(x); */
    /*@ requires this.topOfStack <= \typeof(this.theArray).length(); */
    /*@ requires this.topOfStack < this.theArray.length-1; */
    /*@ requires \typeof(this.theArray).length() != \typeof(x).length(); */
    /*@ requires this.theArray.length != \typeof(x).length(); */
    /*@ requires this.theArray.length-1 != \typeof(x).length(); */
    /*@ modifies this.theArray[*], this.topOfStack, this.theArray[this.topOfStack], this.theArray[this.topOfStack-1], this.theArray[this.topOfStack..], this.theArray[this.topOfStack+1..], this.theArray[0..this.topOfStack-1]; */
    /*@ ensures \old(x) == this.theArray[this.topOfStack]; */
    /*@ ensures this.topOfStack >= 0; */
    /*@ ensures \typeof(x).length() == 16 || \typeof(x).length() == 22 || \typeof(x).length() == 24; */
    /*@ ensures (\forall int i; (this.topOfStack <= i && i <= \old(this.theArray.length-1)) ==> (\old(this.theArray[i]) == null)); */
    /*@ ensures (\forall int i; (\old(this.topOfStack)+1 <= i && i <= this.topOfStack+1) ==> (this.theArray[i] != null)); */
    /*@ ensures \typeof(this.theArray) != \old(\typeof(x)); */
    /*@ ensures !(\forall int i; (0 <= i && i <= this.theArray.length-1) ==> (\typeof(this.theArray[i]) != \old(\typeof(x)))); */
    /*@ ensures this.topOfStack - \old(this.topOfStack) - 1 == 0; */
    /*@ ensures (this.theArray.length-1 == 0) ==> (this.topOfStack == 0); */
    /*@ ensures \old(this.topOfStack) <= \typeof(this.theArray).length(); */
    /*@ ensures \old(this.topOfStack) < this.theArray.length-1; */
    /*@ ensures (\forall int i; (\old(this.topOfStack)+1 <= i && i <= this.topOfStack) ==> (this.theArray[i] == \old(x))); */
    /*@ ensures \typeof(this.theArray).length() != \typeof(x).length(); */
    /*@ ensures this.theArray.length != \typeof(x).length(); */
    /*@ ensures this.theArray.length-1 != \typeof(x).length(); */
    /**
     * Insert a new item into the stack, if not already full.
     * @param x the item to insert.
     * @exception Overflow if stack is already full.
     */
    public void push( Object x ) throws Overflow
    {
        if( isFull( ) )
            throw new Overflow( );
        theArray[ ++topOfStack ] = x;
    }

    /*@ modifies this.theArray[*], this.topOfStack, this.theArray[this.topOfStack], this.theArray[this.topOfStack-1], this.theArray[this.topOfStack..], this.theArray[this.topOfStack+1..], this.theArray[0..this.topOfStack], this.theArray[0..this.topOfStack-1]; */
    /*@ ensures (\result != null)  ==  (\old(this.topOfStack) >= 0); */
    /*@ ensures (\result != null)  ==  ((\forall int i; (this.topOfStack+1 <= i && i <= \old(this.topOfStack)) ==> (this.theArray[i] == null))); */
    /*@ ensures (\result != null)  ==>  ((this.theArray.length-1 == 0) ==> (\old(this.topOfStack) == 0)); */
    /*@ ensures (\result != null)  ==>  (\old(this.topOfStack) != \typeof(\result).length()); */
    /*@ ensures (\result != null)  ==>  (!(\forall int i; (0 <= i && i <= \old(this.theArray.length-1)) ==> (\old(\typeof(this.theArray[i])) != \typeof(\result)))); */
    /*@ ensures (\result != null)  ==>  (\typeof(\result).length() == 16 || \typeof(\result).length() == 24); */
    /*@ ensures (\result != null)  ==>  (this.theArray.length != \typeof(\result).length()); */
    /*@ ensures (\result != null)  ==>  (this.theArray.length-1 != \typeof(\result).length()); */
    /*@ ensures (\result != null)  ==>  (\typeof(this.theArray) != \typeof(\result)); */
    /*@ ensures (\result != null)  ==>  (\typeof(this.theArray).length() != \typeof(\result).length()); */
    /*@ ensures (\result != null)  ==>  ((\forall int i; (\old(this.topOfStack) <= i && i <= this.theArray.length-1) ==> (this.theArray[i] == null))); */
    /*@ ensures (\result != null)  ==>  ((\forall int i; (\old(this.topOfStack) <= i && i <= this.theArray.length-1) ==> (this.theArray[i] == this.theArray[\old(this.topOfStack)]))); */
    /*@ ensures (\result != null)  ==>  (this.theArray[\old(this.topOfStack)] == null); */
    /*@ ensures (\result != null)  ==>  ((\forall int i; (this.topOfStack+1 <= i && i <= this.theArray.length-1) ==> (this.theArray[i] == this.theArray[\old(this.topOfStack)]))); */
    /*@ ensures (\result != null)  ==>  ((\forall int i; (this.topOfStack+1 <= i && i <= \old(this.topOfStack)+1) ==> (this.theArray[i] != null))); */
    /*@ ensures (\result != null)  ==>  (this.topOfStack - \old(this.topOfStack) + 1 == 0); */
    /*@ ensures (\result != null)  ==>  (this.topOfStack < this.theArray.length-1); */
    /*@ ensures (\result == null)  ==  (\old(this.topOfStack) == -1); */
    /*@ ensures (\result == null)  ==  ((\forall int i; (this.topOfStack+1 <= i && i <= \old(this.topOfStack)) ==> (this.theArray[i] != null))); */
    /*@ ensures (\result == null)  ==  (this.topOfStack == \old(this.topOfStack)); */
    /*@ ensures (\result == null)  ==>  ((\forall int i; (0 <= i && i <= \old(this.topOfStack)) ==> (\old(this.theArray[i]) != null))); */
    /*@ ensures (\result == null)  ==>  ((\forall int i; (0 <= i && i <= \old(this.theArray.length-1)) ==> (\old(this.theArray[i]) == null))); */
    /*@ ensures (\result == null)  ==>  ((\forall int i; (0 <= i && i <= \old(this.theArray.length-1)) ==> (\old(\typeof(this.theArray[i])) == \typeof(null)))); */
    /*@ ensures (\result == null)  ==>  ((\forall int i; (this.topOfStack+1 <= i && i <= \old(this.theArray.length-1)) ==> (\old(this.theArray[i]) == null))); */
    /*@ ensures (\result == null)  ==>  (\old(this.topOfStack) < \typeof(this.theArray).length()); */
    /*@ ensures (\result == null)  ==>  ((\forall int i; (0 <= i && i <= \old(this.topOfStack)) ==> (this.theArray[i] != null))); */
    /*@ ensures (\result == null)  ==>  ((\forall int i; (0 <= i && i <= this.topOfStack) ==> (this.theArray[i] != null))); */
    /*@ ensures (\result == null)  ==>  ((\forall int i; (0 <= i && i <= this.theArray.length-1) ==> (this.theArray[i] == null))); */
    /*@ ensures (\result == null)  ==>  ((\forall int i; (0 <= i && i <= this.theArray.length-1) ==> (\typeof(this.theArray[i]) == \typeof(null)))); */
    /*@ ensures (\result == null)  ==>  ((\forall int i; (\old(this.topOfStack)+1 <= i && i <= this.topOfStack) ==> (this.theArray[i] != null))); */
    /*@ ensures (\result == null)  ==>  (this.topOfStack < \typeof(this.theArray).length()); */
    /*@ ensures (\result == null)  ==>  (this.topOfStack == -1); */
    /*@ ensures \typeof(\result).length() == 16 || \typeof(\result).length() == 24; */
    /*@ ensures \typeof(this.theArray) != \typeof(\result); */
    /*@ ensures this.topOfStack <= \old(this.topOfStack); */
    /*@ ensures this.topOfStack <= \typeof(this.theArray).length(); */
    /*@ ensures !(\forall int i; (0 <= i && i <= \old(this.theArray.length-1)) ==> (\old(\typeof(this.theArray[i])) != \typeof(\result))); */
    /*@ ensures \old(this.topOfStack) <= this.theArray.length-1; */
    /*@ ensures \old(this.topOfStack) != \typeof(\result).length(); */
    /*@ ensures \typeof(this.theArray).length() != \typeof(\result).length(); */
    /*@ ensures (this.theArray.length == 0) ==> (\typeof(\result).length() == 0); */
    /*@ ensures this.theArray.length != \typeof(\result).length(); */
    /*@ ensures this.theArray.length-1 != \typeof(\result).length(); */
    /**
     * Return and remove most recently inserted item from the stack.
     * @return most recently inserted item, or null, if stack is empty.
     */
    public Object topAndPop( )
    {
        if( isEmpty( ) )
            return null;
        Object topItem = top( );
        theArray[ topOfStack-- ] = null;
        return topItem;
    }

    /*@ spec_public */ private Object [ ] theArray;
    /*@ spec_public */ private int        topOfStack;

}
