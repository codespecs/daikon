===========================================================================
DataStructures.StackAr:::OBJECT
this.theArray != null
this.theArray.getClass().getName() == java.lang.Object[].class
this.topOfStack >= -1
this.theArray.getClass().getName().length() == 18
this.theArray[this.topOfStack+1..] elements == null
this.theArray[0..this.topOfStack] elements != null
this.topOfStack <= size(this.theArray[])-1
(size(this.theArray[]) >> this.theArray.getClass().getName().length() == 0)
this.theArray.getClass().getName().length() != size(this.theArray[])
this.theArray.getClass().getName().length() != size(this.theArray[])-1
===========================================================================
DataStructures.StackAr.StackAr(int):::ENTER
capacity >= 0
===========================================================================
DataStructures.StackAr.StackAr(int):::EXIT
orig(capacity) == size(this.theArray[])
this.theArray[] elements == null
this.theArray[].getClass().getName() elements == null
this.topOfStack == -1
this.theArray[0..this.topOfStack] == []
(orig(capacity) >> this.theArray.getClass().getName().length() == 0)
orig(capacity) != this.theArray.getClass().getName().length()
===========================================================================
DataStructures.StackAr.isEmpty():::ENTER
===========================================================================
DataStructures.StackAr.isEmpty():::EXIT
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.theArray[] == orig(this.theArray[])
this.topOfStack == orig(this.topOfStack)
this.theArray.getClass().getName().length() == orig(this.theArray.getClass().getName()).length()
(this.topOfStack == -1)  <==>  (return == true)
(this.topOfStack == -1)  ==>  (this.theArray[0..this.topOfStack] == [])
(this.topOfStack == -1)  ==>  (this.theArray[] elements == null)
(this.topOfStack == -1)  ==>  (this.theArray[].getClass().getName() elements == null)
(this.topOfStack == -1)  ==>  (this.topOfStack < this.theArray.getClass().getName().length())
(this.topOfStack >= 0)  <==>  (return == false)
(this.topOfStack >= 0)  ==>  ((size(this.theArray[])-1 == 0) ==> (this.topOfStack == 0))
(this.topOfStack >= 0)  ==>  ((size(this.theArray[])-1 >> this.theArray.getClass().getName().length() == 0))
(this.topOfStack >= 0)  ==>  ((this.topOfStack >> this.theArray.getClass().getName().length() == 0))
(this.topOfStack >= 0)  ==>  (this.theArray[orig(this.topOfStack)..this.topOfStack-1] == [])
(this.topOfStack >= 0)  ==>  (this.theArray[this.topOfStack..orig(this.topOfStack)-1] == [])
this.theArray[this.topOfStack+1..orig(this.topOfStack)] == []
===========================================================================
DataStructures.StackAr.isEmpty():::EXIT;condition="return == true"
this.theArray[] elements == null
this.theArray[].getClass().getName() elements == null
this.topOfStack == -1
return == true
this.theArray[0..this.topOfStack] == []
===========================================================================
DataStructures.StackAr.isEmpty():::EXIT;condition="not(return == true)"
this.topOfStack >= 0
return == false
(this.topOfStack >> this.theArray.getClass().getName().length() == 0)
(size(this.theArray[])-1 == 0) ==> (this.topOfStack == 0)
(size(this.theArray[])-1 >> this.theArray.getClass().getName().length() == 0)
===========================================================================
DataStructures.StackAr.isFull():::ENTER
===========================================================================
DataStructures.StackAr.isFull():::EXIT
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.theArray[] == orig(this.theArray[])
this.topOfStack == orig(this.topOfStack)
this.theArray.getClass().getName().length() == orig(this.theArray.getClass().getName()).length()
(return == false)  <==>  (this.theArray[this.topOfStack+1..] elements == null)
(return == false)  <==>  (this.topOfStack < size(this.theArray[])-1)
(return == false)  ==>  ((size(this.theArray[])-1 >> this.theArray.getClass().getName().length() == 0))
(return == false)  ==>  (this.topOfStack <= this.theArray.getClass().getName().length())
(return == true)  <==>  (this.topOfStack == size(this.theArray[])-1)
(return == true)  ==>  (this.theArray[] elements != null)
(return == true)  ==>  (this.theArray[this.topOfStack+1..] == [])
(return == true)  ==>  (this.topOfStack != this.theArray.getClass().getName().length())
this.theArray[this.topOfStack+1..orig(this.topOfStack)] == []
===========================================================================
DataStructures.StackAr.isFull():::EXIT;condition="return == true"
this.topOfStack == size(this.theArray[])-1
this.topOfStack == orig(size(this.theArray[]))-1
this.theArray[] elements != null
return == true
this.theArray[this.topOfStack+1..] == []
this.topOfStack != this.theArray.getClass().getName().length()
===========================================================================
DataStructures.StackAr.isFull():::EXIT;condition="not(return == true)"
return == false
this.topOfStack <= this.theArray.getClass().getName().length()
this.topOfStack < size(this.theArray[])-1
(size(this.theArray[])-1 >> this.theArray.getClass().getName().length() == 0)
===========================================================================
DataStructures.StackAr.makeEmpty():::ENTER
this.topOfStack < this.theArray.getClass().getName().length()
(this.topOfStack == 0) ==> (size(this.theArray[])-1 == 0)
===========================================================================
DataStructures.StackAr.makeEmpty():::EXIT
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.theArray.getClass().getName().length() == orig(this.theArray.getClass().getName()).length()
size(this.theArray[]) == orig(size(this.theArray[]))
this.theArray[orig(this.topOfStack)+1..] == orig(this.theArray[this.topOfStack+1..])
this.theArray[] elements == null
this.theArray[].getClass().getName() elements == null
this.topOfStack == -1
this.theArray[0..this.topOfStack] == []
this.topOfStack <= orig(this.topOfStack)
orig(this.topOfStack) < this.theArray.getClass().getName().length()
(orig(this.topOfStack) == 0) ==> (size(this.theArray[])-1 == 0)
orig(this.topOfStack) <= size(this.theArray[])-1
===========================================================================
DataStructures.StackAr.pop():::ENTER
this.topOfStack >= 0
this.theArray[0..this.topOfStack] contains no duplicates
(this.topOfStack >> this.theArray.getClass().getName().length() == 0)
===========================================================================
DataStructures.StackAr.pop():::EXIT
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.theArray.getClass().getName().length() == orig(this.theArray.getClass().getName()).length()
size(this.theArray[]) == orig(size(this.theArray[]))
this.theArray[0..this.topOfStack] == orig(this.theArray[0..post(this.topOfStack)])
this.theArray[0..this.topOfStack] == orig(this.theArray[0..this.topOfStack-1])
this.theArray[orig(this.topOfStack)+1..] == orig(this.theArray[this.topOfStack+1..])
this.theArray[orig(this.topOfStack)] == null
this.theArray[0..orig(this.topOfStack)] contains no duplicates
this.theArray[this.topOfStack+1..orig(this.topOfStack)] == [null]
this.theArray[this.topOfStack+1..orig(this.topOfStack)-1] == []
this.topOfStack - orig(this.topOfStack) + 1 == 0
this.topOfStack <= this.theArray.getClass().getName().length()
this.topOfStack < size(this.theArray[])-1
(orig(this.topOfStack) >> this.theArray.getClass().getName().length() == 0)
orig(this.topOfStack) <= size(this.theArray[])-1
this.theArray[this.topOfStack+1..] elements == this.theArray[orig(this.topOfStack)]
===========================================================================
DataStructures.StackAr.push(java.lang.Object):::ENTER
x != null
x.getClass().getName() is printable
x.getClass().getName().length() one of { 16, 22, 24 }
x.getClass().getName().length() == 0  (mod 2)
this.theArray.getClass().getName() != x.getClass().getName()
this.topOfStack <= this.theArray.getClass().getName().length()
this.topOfStack < size(this.theArray[])-1
(size(this.theArray[])-1 >> this.theArray.getClass().getName().length() == 0)
this.theArray.getClass().getName().length() != x.getClass().getName().length()
(size(this.theArray[]) >> x.getClass().getName().length() == 0)
size(this.theArray[]) != x.getClass().getName().length()
(size(this.theArray[])-1 >> x.getClass().getName().length() == 0)
size(this.theArray[])-1 != x.getClass().getName().length()
===========================================================================
DataStructures.StackAr.push(java.lang.Object):::EXIT
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
orig(x) == this.theArray[this.topOfStack]
this.theArray.getClass().getName().length() == orig(this.theArray.getClass().getName()).length()
size(this.theArray[]) == orig(size(this.theArray[]))
x.getClass().getName().length() == orig(x.getClass().getName()).length()
this.theArray[this.topOfStack+1..] == orig(this.theArray[post(this.topOfStack)+1..])
this.theArray[0..this.topOfStack-1] == orig(this.theArray[0..post(this.topOfStack)-1])
this.theArray[0..this.topOfStack-1] == orig(this.theArray[0..this.topOfStack])
this.topOfStack >= 0
x.getClass().getName().length() one of { 16, 22, 24 }
x.getClass().getName().length() == 0  (mod 2)
orig(this.theArray[post(this.topOfStack)..]) elements == null
this.theArray[orig(this.topOfStack)+1..this.topOfStack-1] == []
this.theArray.getClass().getName() != orig(x.getClass().getName())
orig(x.getClass().getName()) in this.theArray[].getClass().getName()
this.topOfStack - orig(this.topOfStack) - 1 == 0
(this.topOfStack >> this.theArray.getClass().getName().length() == 0)
(size(this.theArray[])-1 == 0) ==> (this.topOfStack == 0)
(this.topOfStack >> x.getClass().getName().length() == 0)
orig(this.topOfStack) <= this.theArray.getClass().getName().length()
orig(this.topOfStack) < size(this.theArray[])-1
this.theArray[orig(this.topOfStack)+1..this.topOfStack] elements == orig(x)
(size(this.theArray[])-1 >> this.theArray.getClass().getName().length() == 0)
this.theArray.getClass().getName().length() != x.getClass().getName().length()
(size(this.theArray[]) >> x.getClass().getName().length() == 0)
size(this.theArray[]) != x.getClass().getName().length()
(size(this.theArray[])-1 >> x.getClass().getName().length() == 0)
size(this.theArray[])-1 != x.getClass().getName().length()
orig(this.theArray[post(this.topOfStack)..]) elements == orig(this.theArray[post(this.topOfStack)])
===========================================================================
DataStructures.StackAr.top():::ENTER
===========================================================================
DataStructures.StackAr.top():::EXIT74
this.theArray[] elements == null
this.theArray[].getClass().getName() elements == null
this.topOfStack == -1
return == null
this.theArray[0..this.topOfStack] == []
this.theArray[] elements == return
===========================================================================
DataStructures.StackAr.top():::EXIT75
return == this.theArray[this.topOfStack]
return == this.theArray[orig(this.topOfStack)]
return == orig(this.theArray[post(this.topOfStack)])
return == orig(this.theArray[this.topOfStack])
this.topOfStack >= 0
(this.topOfStack >> this.theArray.getClass().getName().length() == 0)
(size(this.theArray[])-1 == 0) ==> (this.topOfStack == 0)
(size(this.theArray[])-1 >> this.theArray.getClass().getName().length() == 0)
===========================================================================
DataStructures.StackAr.top():::EXIT
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.theArray[] == orig(this.theArray[])
this.topOfStack == orig(this.topOfStack)
this.theArray.getClass().getName().length() == orig(this.theArray.getClass().getName()).length()
(this.topOfStack == -1)  <==>  (return == null)
(this.topOfStack == -1)  ==>  (this.theArray[0..this.topOfStack] == [])
(this.topOfStack == -1)  ==>  (this.theArray[] elements == null)
(this.topOfStack == -1)  ==>  (this.theArray[] elements == return)
(this.topOfStack == -1)  ==>  (this.theArray[].getClass().getName() elements == null)
(this.topOfStack == -1)  ==>  (this.theArray[this.topOfStack+1..] elements == return)
(this.topOfStack == -1)  ==>  (this.topOfStack < this.theArray.getClass().getName().length())
(this.topOfStack >= 0)  ==>  ((size(this.theArray[]) >> return.getClass().getName().length() == 0))
(this.topOfStack >= 0)  ==>  ((size(this.theArray[])-1 == 0) ==> (this.topOfStack == 0))
(this.topOfStack >= 0)  ==>  ((size(this.theArray[])-1 >> return.getClass().getName().length() == 0))
(this.topOfStack >= 0)  ==>  ((size(this.theArray[])-1 >> this.theArray.getClass().getName().length() == 0))
(this.topOfStack >= 0)  ==>  ((this.topOfStack >> return.getClass().getName().length() == 0))
(this.topOfStack >= 0)  ==>  ((this.topOfStack >> this.theArray.getClass().getName().length() == 0))
(this.topOfStack >= 0)  ==>  (return == orig(this.theArray[post(this.topOfStack)]))
(this.topOfStack >= 0)  ==>  (return == orig(this.theArray[this.topOfStack]))
(this.topOfStack >= 0)  ==>  (return == this.theArray[orig(this.topOfStack)])
(this.topOfStack >= 0)  ==>  (return == this.theArray[this.topOfStack])
(this.topOfStack >= 0)  ==>  (return.getClass().getName() in this.theArray[].getClass().getName())
(this.topOfStack >= 0)  ==>  (return.getClass().getName() is printable)
(this.topOfStack >= 0)  ==>  (return.getClass().getName().length() == 0  (mod 2))
(this.topOfStack >= 0)  ==>  (return.getClass().getName().length() one of { 16, 22, 24 })
(this.topOfStack >= 0)  ==>  (size(this.theArray[]) != return.getClass().getName().length())
(this.topOfStack >= 0)  ==>  (size(this.theArray[])-1 != return.getClass().getName().length())
(this.topOfStack >= 0)  ==>  (this.theArray.getClass().getName() != return.getClass().getName())
(this.topOfStack >= 0)  ==>  (this.theArray.getClass().getName().length() != return.getClass().getName().length())
(this.topOfStack >= 0)  ==>  (this.theArray[orig(this.topOfStack)..this.topOfStack-1] == [])
(this.topOfStack >= 0)  ==>  (this.theArray[this.topOfStack..orig(this.topOfStack)-1] == [])
return.getClass().getName() is printable
return.getClass().getName().length() one of { 16, 22, 24 }
return.getClass().getName().length() == 0  (mod 2)
this.theArray[this.topOfStack+1..orig(this.topOfStack)] == []
this.theArray.getClass().getName() != return.getClass().getName()
return.getClass().getName() in this.theArray[].getClass().getName()
(this.topOfStack >> return.getClass().getName().length() == 0)
this.theArray.getClass().getName().length() != return.getClass().getName().length()
(size(this.theArray[]) == 0) ==> (return.getClass().getName().length() == 0)
(size(this.theArray[]) >> return.getClass().getName().length() == 0)
size(this.theArray[]) != return.getClass().getName().length()
(size(this.theArray[])-1 >> return.getClass().getName().length() == 0)
size(this.theArray[])-1 != return.getClass().getName().length()
===========================================================================
DataStructures.StackAr.topAndPop():::ENTER
this.theArray[0..this.topOfStack] contains no duplicates
===========================================================================
DataStructures.StackAr.topAndPop():::EXIT108
this.theArray[] == orig(this.theArray[])
this.topOfStack == orig(this.topOfStack)
this.theArray[] elements == null
this.theArray[].getClass().getName() elements == null
this.topOfStack == -1
return == null
this.theArray[0..this.topOfStack] == []
===========================================================================
DataStructures.StackAr.topAndPop():::EXIT111
this.theArray[0..this.topOfStack] == orig(this.theArray[0..this.topOfStack-1])
return != null
orig(this.topOfStack) >= 0
this.theArray[orig(this.topOfStack)] == null
this.theArray[this.topOfStack+1..orig(this.topOfStack)] == [null]
this.theArray[this.topOfStack+1..orig(this.topOfStack)-1] == []
this.topOfStack - orig(this.topOfStack) + 1 == 0
this.topOfStack < size(this.theArray[])-1
(orig(this.topOfStack) >> this.theArray.getClass().getName().length() == 0)
(size(this.theArray[])-1 == 0) ==> (orig(this.topOfStack) == 0)
this.theArray[this.topOfStack+1..] elements == this.theArray[orig(this.topOfStack)]
===========================================================================
DataStructures.StackAr.topAndPop():::EXIT
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.theArray.getClass().getName().length() == orig(this.theArray.getClass().getName()).length()
size(this.theArray[]) == orig(size(this.theArray[]))
this.theArray[0..this.topOfStack] == orig(this.theArray[0..post(this.topOfStack)])
this.theArray[orig(this.topOfStack)+1..] == orig(this.theArray[this.topOfStack+1..])
(return != null)  <==>  (orig(this.topOfStack) >= 0)
(return != null)  <==>  (this.theArray[this.topOfStack+1..orig(this.topOfStack)] == [null])
(return != null)  ==>  ((orig(this.topOfStack) >> return.getClass().getName().length() == 0))
(return != null)  ==>  ((orig(this.topOfStack) >> this.theArray.getClass().getName().length() == 0))
(return != null)  ==>  ((size(this.theArray[]) >> return.getClass().getName().length() == 0))
(return != null)  ==>  ((size(this.theArray[])-1 == 0) ==> (orig(this.topOfStack) == 0))
(return != null)  ==>  ((size(this.theArray[])-1 >> return.getClass().getName().length() == 0))
(return != null)  ==>  (orig(this.topOfStack) != return.getClass().getName().length())
(return != null)  ==>  (return.getClass().getName() in orig(this.theArray[].getClass().getName()))
(return != null)  ==>  (return.getClass().getName() is printable)
(return != null)  ==>  (return.getClass().getName().length() == 0  (mod 8))
(return != null)  ==>  (return.getClass().getName().length() one of { 16, 24 })
(return != null)  ==>  (size(this.theArray[]) != return.getClass().getName().length())
(return != null)  ==>  (size(this.theArray[])-1 != return.getClass().getName().length())
(return != null)  ==>  (this.theArray.getClass().getName() != return.getClass().getName())
(return != null)  ==>  (this.theArray.getClass().getName().length() != return.getClass().getName().length())
(return != null)  ==>  (this.theArray[0..this.topOfStack] == orig(this.theArray[0..this.topOfStack-1]))
(return != null)  ==>  (this.theArray[orig(this.topOfStack)..] elements == null)
(return != null)  ==>  (this.theArray[orig(this.topOfStack)..] elements == this.theArray[orig(this.topOfStack)])
(return != null)  ==>  (this.theArray[orig(this.topOfStack)] == null)
(return != null)  ==>  (this.theArray[this.topOfStack+1..] elements == this.theArray[orig(this.topOfStack)])
(return != null)  ==>  (this.theArray[this.topOfStack+1..orig(this.topOfStack)-1] == [])
(return != null)  ==>  (this.topOfStack - orig(this.topOfStack) + 1 == 0)
(return != null)  ==>  (this.topOfStack < size(this.theArray[])-1)
(return == null)  <==>  (orig(this.topOfStack) == -1)
(return == null)  <==>  (this.theArray[this.topOfStack+1..orig(this.topOfStack)] == [])
(return == null)  <==>  (this.topOfStack == orig(this.topOfStack))
(return == null)  ==>  (orig(this.theArray[0..this.topOfStack]) == [])
(return == null)  ==>  (orig(this.theArray[]) elements == null)
(return == null)  ==>  (orig(this.theArray[].getClass().getName()) elements == null)
(return == null)  ==>  (orig(this.theArray[post(this.topOfStack)+1..]) elements == null)
(return == null)  ==>  (orig(this.topOfStack) < this.theArray.getClass().getName().length())
(return == null)  ==>  (this.theArray[0..orig(this.topOfStack)] == [])
(return == null)  ==>  (this.theArray[0..this.topOfStack] == [])
(return == null)  ==>  (this.theArray[] == orig(this.theArray[]))
(return == null)  ==>  (this.theArray[] elements == null)
(return == null)  ==>  (this.theArray[].getClass().getName() elements == null)
(return == null)  ==>  (this.theArray[orig(this.topOfStack)+1..this.topOfStack] == [])
(return == null)  ==>  (this.topOfStack < this.theArray.getClass().getName().length())
(return == null)  ==>  (this.topOfStack == -1)
return.getClass().getName() is printable
return.getClass().getName().length() one of { 16, 24 }
return.getClass().getName().length() == 0  (mod 8)
this.theArray[0..orig(this.topOfStack)] contains no duplicates
this.theArray.getClass().getName() != return.getClass().getName()
this.topOfStack <= orig(this.topOfStack)
this.topOfStack <= this.theArray.getClass().getName().length()
return.getClass().getName() in orig(this.theArray[].getClass().getName())
orig(this.topOfStack) <= size(this.theArray[])-1
(orig(this.topOfStack) >> return.getClass().getName().length() == 0)
orig(this.topOfStack) != return.getClass().getName().length()
this.theArray.getClass().getName().length() != return.getClass().getName().length()
(size(this.theArray[]) == 0) ==> (return.getClass().getName().length() == 0)
(size(this.theArray[]) >> return.getClass().getName().length() == 0)
size(this.theArray[]) != return.getClass().getName().length()
(size(this.theArray[])-1 >> return.getClass().getName().length() == 0)
size(this.theArray[])-1 != return.getClass().getName().length()
