===========================================================================
PolyCalc.RatTermVec:::OBJECT
this.wrapped != null
this.wrapped[] elements != null
this.wrapped[].getClass().getName() elements == PolyCalc.RatTerm.class
===========================================================================
PolyCalc.RatTermVec.RatTermVec():::EXIT
this.wrapped[] == []
this.wrapped[].getClass().getName() == []
===========================================================================
PolyCalc.RatTermVec.addElement(PolyCalc.RatTerm):::ENTER
this.wrapped[] contains no duplicates
t != null
===========================================================================
PolyCalc.RatTermVec.addElement(PolyCalc.RatTerm):::EXIT
this.wrapped == orig(this.wrapped)
size(this.wrapped[])-1 == orig(size(this.wrapped[]))
this.wrapped[] contains no duplicates
size(this.wrapped[]) >= 1
orig(this.wrapped[]) is a subsequence of this.wrapped[]
this.wrapped[] is a superset of orig(this.wrapped[])
===========================================================================
PolyCalc.RatTermVec.copy():::ENTER
this.wrapped[] contains no duplicates
===========================================================================
PolyCalc.RatTermVec.copy():::EXIT
this.wrapped == orig(this.wrapped)
this.wrapped[] == orig(this.wrapped[])
this.wrapped[] contains no duplicates
return != null
return.wrapped != null
return.wrapped[] contains no duplicates
return.wrapped[] elements != null
return.wrapped[].getClass().getName() elements == PolyCalc.RatTerm.class
===========================================================================
PolyCalc.RatTermVec.get(int):::ENTER
index >= 0
size(this.wrapped[]) >= 1
===========================================================================
PolyCalc.RatTermVec.get(int):::EXIT
this.wrapped == orig(this.wrapped)
this.wrapped[] == orig(this.wrapped[])
return != null
size(this.wrapped[]) >= 1
===========================================================================
PolyCalc.RatTermVec.insert(PolyCalc.RatTerm, int):::ENTER
t != null
index >= 0
===========================================================================
PolyCalc.RatTermVec.insert(PolyCalc.RatTerm, int):::EXIT
this.wrapped == orig(this.wrapped)
size(this.wrapped[])-1 == orig(size(this.wrapped[]))
size(this.wrapped[]) >= 1
this.wrapped[] is a superset of orig(this.wrapped[])
===========================================================================
PolyCalc.RatTermVec.printDebug():::ENTER
===========================================================================
PolyCalc.RatTermVec.printDebug():::EXIT
this.wrapped == orig(this.wrapped)
this.wrapped[] == orig(this.wrapped[])
return != null
return.toString is printable
===========================================================================
PolyCalc.RatTermVec.remove(int):::ENTER
this.wrapped[] contains no duplicates
index >= 0
size(this.wrapped[]) >= 1
===========================================================================
PolyCalc.RatTermVec.remove(int):::EXIT
this.wrapped == orig(this.wrapped)
size(this.wrapped[]) == orig(size(this.wrapped[]))-1
this.wrapped[] contains no duplicates
this.wrapped[] is a subset of orig(this.wrapped[])
===========================================================================
PolyCalc.RatTermVec.set(PolyCalc.RatTerm, int):::ENTER
this.wrapped[] contains no duplicates
t != null
index >= 0
size(this.wrapped[]) >= 1
===========================================================================
PolyCalc.RatTermVec.set(PolyCalc.RatTerm, int):::EXIT
this.wrapped == orig(this.wrapped)
size(this.wrapped[]) == orig(size(this.wrapped[]))
this.wrapped[] contains no duplicates
size(this.wrapped[]) >= 1
===========================================================================
PolyCalc.RatTermVec.size():::ENTER
this.wrapped[] contains no duplicates
===========================================================================
PolyCalc.RatTermVec.size():::EXIT
this.wrapped == orig(this.wrapped)
this.wrapped[] == orig(this.wrapped[])
this.wrapped[] contains no duplicates
return >= 0
===========================================================================
PolyCalc.RatTermVec.toString():::ENTER
===========================================================================
PolyCalc.RatTermVec.toString():::EXIT
this.wrapped == orig(this.wrapped)
this.wrapped[] == orig(this.wrapped[])
return != null
return.toString is printable
