===========================================================================
misc.Suppress01:::OBJECT
    Variables: this this.theArray this.theArray[] this.theArray2 this.theArray2[] this.b size(this.theArray[]) size(this.theArray[])-1 size(this.theArray2[]) size(this.theArray2[])-1
this != null
this.theArray != null
daikon.Quant.eltsGTE(this.theArray, 0)
daikon.Quant.eltsLteIndex(this.theArray)
this.theArray2 != null
daikon.Quant.eltsGTE(this.theArray2, 0)
daikon.Quant.eltsLteIndex(this.theArray2)
this.b == 0
daikon.Quant.subsetOf(this.theArray, this.theArray2)
daikon.Quant.eltsLTE(this.theArray, daikon.Quant.size(this.theArray)-1)
daikon.Quant.eltsLT(this.theArray, daikon.Quant.size(this.theArray2)-1)
daikon.Quant.eltsLTE(this.theArray2, daikon.Quant.size(this.theArray))
daikon.Quant.memberOf(daikon.Quant.size(this.theArray)-1 , this.theArray2 )
daikon.Quant.eltsLTE(this.theArray2, daikon.Quant.size(this.theArray2)-1)
(daikon.Quant.size(this.theArray2)-1 >> daikon.Quant.size(this.theArray) == 0)
daikon.Quant.size(this.theArray) <= daikon.Quant.size(this.theArray2)-1
===========================================================================
misc.Suppress01.Suppress01():::EXIT
    Variables: this this.theArray this.theArray[] this.theArray2 this.theArray2[] this.b size(this.theArray[]) size(this.theArray[])-1 size(this.theArray2[]) size(this.theArray2[])-1
daikon.Quant.size(this.theArray) == daikon.Quant.size(this.theArray2)-1
this.theArray != null
daikon.Quant.eltsEqual(this.theArray, 0)
daikon.Quant.eltsEqualIndex(this.theArray)
this.theArray2 != null
daikon.Quant.eltsEqualIndex(this.theArray2)
daikon.Quant.size(this.theArray2) == 2
daikon.Quant.memberOf(daikon.Quant.size(this.theArray)-1 , this.theArray )
daikon.Quant.eltsEqual(this.theArray, daikon.Quant.size(this.theArray)-1)
daikon.Quant.memberOf(daikon.Quant.size(this.theArray) , this.theArray2 )
===========================================================================
misc.Suppress01.f():::ENTER
    Variables: this this.theArray this.theArray[] this.theArray2 this.theArray2[] this.b size(this.theArray[]) size(this.theArray[])-1 size(this.theArray2[]) size(this.theArray2[])-1
===========================================================================
misc.Suppress01.f():::EXIT
    Variables: this this.theArray this.theArray[] this.theArray2 this.theArray2[] this.b orig(this) orig(this.theArray) orig(this.theArray[]) orig(this.theArray2) orig(this.theArray2[]) orig(this.b) size(this.theArray[]) size(this.theArray[])-1 size(this.theArray2[]) size(this.theArray2[])-1 orig(size(this.theArray[])) orig(size(this.theArray[]))-1 orig(size(this.theArray2[])) orig(size(this.theArray2[]))-1
assignable this.theArray, this.theArray[*], this.theArray2, this.theArray2[*]
this.b == \old(this.b)
daikon.Quant.size(this.theArray)-1 == \old(daikon.Quant.size(this.theArray))
daikon.Quant.subsetOf(\old(this.theArray), this.theArray)
daikon.Quant.subsetOf(this.theArray, \old(this.theArray2))
daikon.Quant.memberOf(\old(daikon.Quant.size(this.theArray))-1 , this.theArray )
daikon.Quant.eltsLTE(this.theArray, \old(daikon.Quant.size(this.theArray))-1)
daikon.Quant.eltsLT(this.theArray, \old(daikon.Quant.size(this.theArray2))-1)
daikon.Quant.subsetOf(\old(this.theArray), this.theArray2)
daikon.Quant.subsetOf(\old(this.theArray2), this.theArray2)
daikon.Quant.eltsLTE(this.theArray2, daikon.Quant.size(this.theArray)-1)
daikon.Quant.eltsLT(this.theArray2, daikon.Quant.size(this.theArray2)-1)
daikon.Quant.memberOf(\old(daikon.Quant.size(this.theArray))-1 , this.theArray2 )
daikon.Quant.eltsLTE(this.theArray2, \old(daikon.Quant.size(this.theArray2))-1)
daikon.Quant.eltsLT(\old(this.theArray), daikon.Quant.size(this.theArray2)-1)
daikon.Quant.eltsLTE(\old(this.theArray2), daikon.Quant.size(this.theArray)-1)
daikon.Quant.eltsLT(\old(this.theArray2), daikon.Quant.size(this.theArray2)-1)
daikon.Quant.size(this.theArray) - daikon.Quant.size(this.theArray2) + 2 == 0
(\old(daikon.Quant.size(this.theArray2)) >> daikon.Quant.size(this.theArray) == 0)
daikon.Quant.size(this.theArray) <= \old(daikon.Quant.size(this.theArray2))
daikon.Quant.size(this.theArray) % \old(daikon.Quant.size(this.theArray2))-1 == 0
daikon.Quant.size(this.theArray) >= \old(daikon.Quant.size(this.theArray2))-1
(\old(daikon.Quant.size(this.theArray2))-1 >> daikon.Quant.size(this.theArray)-1 == 0)
daikon.Quant.size(this.theArray)-1 <= \old(daikon.Quant.size(this.theArray2))-1
(daikon.Quant.size(this.theArray2) >> daikon.Quant.size(this.theArray2)-1 == 0)
(daikon.Quant.size(this.theArray2)-1 >> \old(daikon.Quant.size(this.theArray2)) == 0)
daikon.Quant.size(this.theArray2)-1 == (\old(daikon.Quant.size(this.theArray2)) | daikon.Quant.size(this.theArray2)-1)
daikon.Quant.size(this.theArray2)-1 >= \old(daikon.Quant.size(this.theArray2))
===========================================================================
misc.Suppress01.main(java.lang.String[]):::ENTER
    Variables: args args.getClass().getName() args[] args[].toString size(args[]) size(args[])-1
args != null
args.getClass().getName() == java.lang.String[].class.getName()
daikon.Quant.pairwiseEqual(daikon.Quant.collectObject(args, "toString()"), new String[] {  })
===========================================================================
misc.Suppress01.main(java.lang.String[]):::EXIT
    Variables: args args.getClass().getName() args[] args[].toString orig(args) orig(args.getClass().getName()) orig(args[]) orig(args[].toString) size(args[]) size(args[])-1 orig(size(args[])) orig(size(args[]))-1
assignable args[*]
daikon.Quant.pairwiseEqual(daikon.Quant.collectObject(args, "toString()"), new String[] {  })
