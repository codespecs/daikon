===========================================================================
misc.Suppress01:::OBJECT
    Variables: this this.theArray this.theArray[] this.theArray2 this.theArray2[] this.b size(this.theArray[]) size(this.theArray[])-1 size(this.theArray2[]) size(this.theArray2[])-1
this != null
this.theArray != null
(\forall int i; (0 <= i && i <= this.theArray.length-1) ==> (this.theArray[i] >= 0))
(\forall int i; (0 <= i && i <= this.theArray.length-1) ==> (this.theArray[i] <= i))
this.theArray2 != null
(\forall int i; (0 <= i && i <= this.theArray2.length-1) ==> (this.theArray2[i] >= 0))
(\forall int i; (0 <= i && i <= this.theArray2.length-1) ==> (this.theArray2[i] <= i))
this.b == 0
warning: method daikon.inv.binary.twoSequence.SubSet.format_esc() needs to be implemented: this.theArray[] is a subset of this.theArray2[]
(\forall int i; (0 <= i && i <= this.theArray.length-1) ==> (this.theArray[i] <= this.theArray.length-1))
(\forall int i; (0 <= i && i <= this.theArray.length-1) ==> (this.theArray[i] < this.theArray2.length-1))
(\forall int i; (0 <= i && i <= this.theArray2.length-1) ==> (this.theArray2[i] <= this.theArray.length))
!(\forall int i; (0 <= i && i <= this.theArray2.length-1) ==> (this.theArray2[i] != this.theArray.length-1))
(\forall int i; (0 <= i && i <= this.theArray2.length-1) ==> (this.theArray2[i] <= this.theArray2.length-1))
(this.theArray2.length-1 >> this.theArray.length == 0)
this.theArray.length <= this.theArray2.length-1
===========================================================================
misc.Suppress01.Suppress01():::EXIT
    Variables: this this.theArray this.theArray[] this.theArray2 this.theArray2[] this.b size(this.theArray[]) size(this.theArray[])-1 size(this.theArray2[]) size(this.theArray2[])-1
this.theArray.length == this.theArray2.length-1
this.theArray != null
(\forall int i; (0 <= i && i <= this.theArray.length-1) ==> (this.theArray[i] == 0))
(\forall int i; (0 <= i && i <= this.theArray.length-1) ==> (this.theArray[i] == i))
this.theArray2 != null
(\forall int i; (0 <= i && i <= this.theArray2.length-1) ==> (this.theArray2[i] == i))
this.theArray2.length == 2
!(\forall int i; (0 <= i && i <= this.theArray.length-1) ==> (this.theArray[i] != this.theArray.length-1))
(\forall int i; (0 <= i && i <= this.theArray.length-1) ==> (this.theArray[i] == this.theArray.length-1))
!(\forall int i; (0 <= i && i <= this.theArray2.length-1) ==> (this.theArray2[i] != this.theArray.length))
===========================================================================
misc.Suppress01.f():::ENTER
    Variables: this this.theArray this.theArray[] this.theArray2 this.theArray2[] this.b size(this.theArray[]) size(this.theArray[])-1 size(this.theArray2[]) size(this.theArray2[])-1
===========================================================================
misc.Suppress01.f():::EXIT
    Variables: this this.theArray this.theArray[] this.theArray2 this.theArray2[] this.b orig(this) orig(this.theArray) orig(this.theArray[]) orig(this.theArray2) orig(this.theArray2[]) orig(this.b) size(this.theArray[]) size(this.theArray[])-1 size(this.theArray2[]) size(this.theArray2[])-1 orig(size(this.theArray[])) orig(size(this.theArray[]))-1 orig(size(this.theArray2[])) orig(size(this.theArray2[]))-1
      Modified variables: this.theArray this.theArray[] this.theArray2 this.theArray2[] size(this.theArray[]) size(this.theArray2[])
      Unmodified variables: this this.b
modifies this.theArray, this.theArray[*], this.theArray2, this.theArray2[*]
this.theArray.length-1 == \old(this.theArray.length)
warning: method daikon.inv.binary.twoSequence.SuperSet.format_esc() needs to be implemented: this.theArray[] is a superset of orig(this.theArray[])
warning: method daikon.inv.binary.twoSequence.SubSet.format_esc() needs to be implemented: this.theArray[] is a subset of orig(this.theArray2[])
!(\forall int i; (0 <= i && i <= this.theArray.length-1) ==> (this.theArray[i] != \old(this.theArray.length)-1))
(\forall int i; (0 <= i && i <= this.theArray.length-1) ==> (this.theArray[i] <= \old(this.theArray.length)-1))
(\forall int i; (0 <= i && i <= this.theArray.length-1) ==> (this.theArray[i] < \old(this.theArray2.length)-1))
warning: method daikon.inv.binary.twoSequence.SuperSet.format_esc() needs to be implemented: this.theArray2[] is a superset of orig(this.theArray[])
warning: method daikon.inv.binary.twoSequence.SuperSet.format_esc() needs to be implemented: this.theArray2[] is a superset of orig(this.theArray2[])
(\forall int i; (0 <= i && i <= this.theArray2.length-1) ==> (this.theArray2[i] <= this.theArray.length-1))
(\forall int i; (0 <= i && i <= this.theArray2.length-1) ==> (this.theArray2[i] < this.theArray2.length-1))
!(\forall int i; (0 <= i && i <= this.theArray2.length-1) ==> (this.theArray2[i] != \old(this.theArray.length)-1))
(\forall int i; (0 <= i && i <= this.theArray2.length-1) ==> (this.theArray2[i] <= \old(this.theArray2.length)-1))
(\forall int i; (0 <= i && i <= \old(this.theArray.length-1)) ==> (\old(this.theArray[i]) < this.theArray2.length-1))
(\forall int i; (0 <= i && i <= \old(this.theArray2.length-1)) ==> (\old(this.theArray2[i]) <= this.theArray.length-1))
(\forall int i; (0 <= i && i <= \old(this.theArray2.length-1)) ==> (\old(this.theArray2[i]) < this.theArray2.length-1))
this.theArray.length - this.theArray2.length + 2 == 0
(\old(this.theArray2.length) >> this.theArray.length == 0)
this.theArray.length <= \old(this.theArray2.length)
this.theArray.length % \old(this.theArray2.length)-1 == 0
this.theArray.length >= \old(this.theArray2.length)-1
(\old(this.theArray2.length)-1 >> this.theArray.length-1 == 0)
this.theArray.length-1 <= \old(this.theArray2.length)-1
(this.theArray2.length >> this.theArray2.length-1 == 0)
(this.theArray2.length-1 >> \old(this.theArray2.length) == 0)
this.theArray2.length-1 == (\old(this.theArray2.length) | this.theArray2.length-1)
this.theArray2.length-1 >= \old(this.theArray2.length)
===========================================================================
misc.Suppress01.main(java.lang.String[]):::ENTER
    Variables: args args.getClass().getName() args[] args[].toString size(args[]) size(args[])-1
args != null
\typeof(args) == \type(java.lang.String[])
warning: method daikon.inv.unary.stringsequence.OneOfStringSequence.format(OutputFormat:ESC/Java) needs to be implemented: args[].toString == []
===========================================================================
misc.Suppress01.main(java.lang.String[]):::EXIT
    Variables: args args.getClass().getName() args[] args[].toString orig(args) orig(args.getClass().getName()) orig(args[]) orig(args[].toString) size(args[]) size(args[])-1 orig(size(args[])) orig(size(args[]))-1
      Modified variables: args[]
      Unmodified variables: args args.getClass().getName() args[].toString size(args[])
modifies args[*]
warning: method daikon.inv.unary.stringsequence.OneOfStringSequence.format(OutputFormat:ESC/Java) needs to be implemented: args[].toString == []
