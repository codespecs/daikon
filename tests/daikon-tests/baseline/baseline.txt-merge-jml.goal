// default package

public class DataAvg
{

  /*@ invariant this.sum >= 0; */
  /*@ invariant this.count <= 1000; */
  /*@ invariant this.count >= 0; */
  /*@ invariant this.sum >= this.count; */
  /*@ spec_public */ private int sum;
  /*@ spec_public */ private int count;

  /*@
  @ public normal_behavior // Generated by Daikon
  @ ensures this.sum == this.count;
  @ ensures this.sum == 0;
  @*/
  public DataAvg()
  {
    sum = 0;
    count = 0;
  }

  /*@
  @ public normal_behavior // Generated by Daikon
  @ requires element != 0;
  @ requires element <= 1275;
  @ requires element >= -1023;
  @ requires this.count != element;
  @ ensures this.count >= 1;
  @ ensures this.sum > this.count;
  @ ensures this.sum != \old(this.sum);
  @ ensures this.sum > \old(this.count);
  @ ensures this.sum >= \old(element);
  @ ensures this.count != \old(this.sum);
  @ ensures this.count - \old(this.count) - 1 == 0;
  @ ensures this.count != \old(element);
  @ ensures this.sum - \old(this.sum) - \old(element) == 0;
  @*/
  public void insert(int element)
  {
    sum += element;
    count++;
  }


  /*@
  @ public normal_behavior // Generated by Daikon
  @ requires this.count >= 5;
  @ requires this.sum > this.count;
  @ ensures this.sum == \old(this.sum);
  @ ensures this.count == \old(this.count);
  @ ensures this.count >= 5;
  @ ensures this.sum > this.count;
  @ ensures this.sum > \result;
  @ ensures this.count != \result;
  @*/
  public int average()
  {
    return sum / count;
  }

}
// default package

public class Main
{
  /*@
  @ public normal_behavior // Generated by Daikon
  @ requires args != null;
  @ requires args.getClass().getName() == java.lang.String[].class.getName();
  @ requires daikon.Quant.pairwiseEqual(daikon.Quant.collectObject(args, "toString()"), new String[] {  });
  @ ensures daikon.Quant.pairwiseEqual(args, \old(args));
  @ ensures daikon.Quant.pairwiseEqual(daikon.Quant.collectObject(args, "toString()"), new String[] {  });
  @*/
  public static void main(String[] args) {
    TestScores.six170();
    TestScores.six821();
    TestScores.six893();
    RandomMean.compute();
  }
}
// default package

public class RandomMean
{
  /*@
  @ public normal_behavior // Generated by Daikon
  @ requires true;
  @*/
  public static void main() {
    compute();
  }

  /*@
  @ public normal_behavior // Generated by Daikon
  @ requires true;
  @*/
  public static void compute() {
    DataAvg accum = new DataAvg();
    int seed = 2001;
    for (int i=0; i<1000; i++) {
      seed = seed * 17 * 107;
      int num = seed & 0x08FF;
      num -= 0x0400;
      accum.insert(num);
    }
    int mean = accum.average();
    System.out.println("1000 trials over range +/- 1024 average = " + mean);
  }

}
// default package

public class TestScores
{

  /*@
  @ public normal_behavior // Generated by Daikon
  @ requires true;
  @*/
  public static void main(String[] args) {
    six170();
    six821();
  }

  /*@
  @ private normal_behavior // Generated by Daikon
  @ requires scores != null;
  @ requires daikon.Quant.size(scores) >= 5;
  @ ensures daikon.Quant.pairwiseEqual(scores, \old(scores));
  @ ensures \result <= 100;
  @*/
  private static int classAve(int[] scores) {
    DataAvg avg = new DataAvg();
    for (int i=0; i<scores.length; i++) {
      avg.insert(scores[i]);
    }
    int result = avg.average();
    return result;
  }

  /*@
  @ public normal_behavior // Generated by Daikon
  @ requires true;
  @*/
  public static void six170() {
    int[][] six170 = {
      {76, 88, 53, 12, 100, 96, 98, 72, 26, 82, 82, 76, 50},
      {98, 72, 26, 82, 82, 76, 50, 76, 88, 53, 12, 100},
      {12, 100, 98, 72, 26, 82, 82, 76, 50, 76},
      {82, 76, 50, 76, 12, 100, 98, 72, 26}
    };

    for (int i=0; i<six170.length; i++) {
      int ave = classAve(six170[i]);
      System.out.println("Class ave for 6170:" + i + " = " + ave);
    }
  }

  /*@
  @ public normal_behavior // Generated by Daikon
  @ requires true;
  @*/
  public static void six821() {
    int[][] six821 = {
      {76, 99, 80, 97, 100, 20, 92, 94},
      {20, 92, 94, 76, 99, 80, 97},
      {80, 97, 20, 92, 94, 76},
      {20, 92, 99, 80, 97}
    };

    for (int i=0; i<six821.length; i++) {
      int ave = classAve(six821[i]);
      System.out.println("Class ave for 6821:" + i + " = " + ave);
    }
  }

  /*@
  @ public normal_behavior // Generated by Daikon
  @ requires true;
  @*/
  public static void six893() {
    int[][] six893 = {
      {100, 100, 100, 100, 100},
      {100, 100, 100, 100, 100},
      {100, 100, 100, 100, 100},
    };

    for (int i=0; i<six893.length; i++) {
      int ave = classAve(six893[i]);
      System.out.println("Class ave for 6893:A" + i + " = " + ave);
    }

    six893 = new int[][] {
      {60, 70, 80, 90, 100},
      {70, 80, 90, 100, 60},
      {90, 100, 60, 70, 80}
    };

    for (int i=0; i<six893.length; i++) {
      int ave = classAve(six893[i]);
      System.out.println("Class ave for 6893:B" + i + " = " + ave);
    }
  }

}
