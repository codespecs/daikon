/*
 * Copyright (c) 1997, 2010, Oracle and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the LICENSE file that accompanied this code.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 */

package javautil;

import java.util.*;

/**
 * This class provides a skeletal implementation of the {@link List}
 * interface to minimize the effort required to implement this interface
 * backed by a "random access" data store (such as an array).  For sequential
 * access data (such as a linked list), {@link AbstractSequentialList} should
 * be used in preference to this class.
 *
 * <p>To implement an unmodifiable list, the programmer needs only to extend
 * this class and provide implementations for the {@link #get(int)} and
 * {@link List#size() size()} methods.
 *
 * <p>To implement a modifiable list, the programmer must additionally
 * override the {@link #set(int, Object) set(int, E)} method (which otherwise
 * throws an {@code UnsupportedOperationException}).  If the list is
 * variable-size the programmer must additionally override the
 * {@link #add(int, Object) add(int, E)} and {@link #remove(int)} methods.
 *
 * <p>The programmer should generally provide a void (no argument) and collection
 * constructor, as per the recommendation in the {@link Collection} interface
 * specification.
 *
 * <p>Unlike the other abstract collection implementations, the programmer does
 * <i>not</i> have to provide an iterator implementation; the iterator and
 * list iterator are implemented by this class, on top of the "random access"
 * methods:
 * {@link #get(int)},
 * {@link #set(int, Object) set(int, E)},
 * {@link #add(int, Object) add(int, E)} and
 * {@link #remove(int)}.
 *
 * <p>The documentation for each non-abstract method in this class describes its
 * implementation in detail.  Each of these methods may be overridden if the
 * collection being implemented admits a more efficient implementation.
 *
 * <p>This class is a member of the
 * <a href="{@docRoot}/../technotes/guides/collections/index.html">
 * Java Collections Framework</a>.
 *
 * @author  Josh Bloch
 * @author  Neal Gafter
 * @since 1.2
 */

public abstract class AbstractList17<E> extends AbstractCollection<E> implements List<E> {
    /*@ invariant this.getClass().getName() == javautil.ArrayList17.class.getName(); */
    /*@ invariant this.modCount == 0; */
    /*@
    @ protected normal_behavior // Generated by Daikon
    @ requires true;
    @*/
    /**
     * Sole constructor.  (For invocation by subclass constructors, typically
     * implicit.)
     */
    protected AbstractList17() {
    }

    /*@
    @ public normal_behavior // Generated by Daikon
    @ requires true;
    @*/
    /**
     * Appends the specified element to the end of this list (optional
     * operation).
     *
     * <p>Lists that support this operation may place limitations on what
     * elements may be added to this list.  In particular, some
     * lists will refuse to add null elements, and others will impose
     * restrictions on the type of elements that may be added.  List
     * classes should clearly specify in their documentation any restrictions
     * on what elements may be added.
     *
     * <p>This implementation calls {@code add(size(), e)}.
     *
     * <p>Note that this implementation throws an
     * {@code UnsupportedOperationException} unless
     * {@link #add(int, Object) add(int, E)} is overridden.
     *
     * @param e element to be appended to this list
     * @return {@code true} (as specified by {@link Collection#add})
     * @throws UnsupportedOperationException if the {@code add} operation
     *         is not supported by this list
     * @throws ClassCastException if the class of the specified element
     *         prevents it from being added to this list
     * @throws NullPointerException if the specified element is null and this
     *         list does not permit null elements
     * @throws IllegalArgumentException if some property of this element
     *         prevents it from being added to this list
     */
    public boolean add(E e) {
        add(size(), e);
        return true;
    }

    /*@
    @ also
    @ public normal_behavior // Generated by Daikon
    @ requires true;
    @*/
    /**
     * {@inheritDoc}
     *
     * @throws IndexOutOfBoundsException {@inheritDoc}
     */
    abstract public E get(int index);

    /*@
    @ public normal_behavior // Generated by Daikon
    @ requires true;
    @*/
    /**
     * {@inheritDoc}
     *
     * <p>This implementation always throws an
     * {@code UnsupportedOperationException}.
     *
     * @throws UnsupportedOperationException {@inheritDoc}
     * @throws ClassCastException            {@inheritDoc}
     * @throws NullPointerException          {@inheritDoc}
     * @throws IllegalArgumentException      {@inheritDoc}
     * @throws IndexOutOfBoundsException     {@inheritDoc}
     */
    public E set(int index, E element) {
        throw new UnsupportedOperationException();
    }

    /*@
    @ public normal_behavior // Generated by Daikon
    @ requires true;
    @*/
    /**
     * {@inheritDoc}
     *
     * <p>This implementation always throws an
     * {@code UnsupportedOperationException}.
     *
     * @throws UnsupportedOperationException {@inheritDoc}
     * @throws ClassCastException            {@inheritDoc}
     * @throws NullPointerException          {@inheritDoc}
     * @throws IllegalArgumentException      {@inheritDoc}
     * @throws IndexOutOfBoundsException     {@inheritDoc}
     */
    public void add(int index, E element) {
        throw new UnsupportedOperationException();
    }

    /*@
    @ also
    @ public normal_behavior // Generated by Daikon
    @ requires true;
    @*/
    /**
     * {@inheritDoc}
     *
     * <p>This implementation always throws an
     * {@code UnsupportedOperationException}.
     *
     * @throws UnsupportedOperationException {@inheritDoc}
     * @throws IndexOutOfBoundsException     {@inheritDoc}
     */
    public E remove(int index) {
        throw new UnsupportedOperationException();
    }


    /*@
    @ also
    @ public normal_behavior // Generated by Daikon
    @ requires true;
    @*/
    // Search Operations

    /**
     * {@inheritDoc}
     *
     * <p>This implementation first gets a list iterator (with
     * {@code listIterator()}).  Then, it iterates over the list until the
     * specified element is found or the end of the list is reached.
     *
     * @throws ClassCastException   {@inheritDoc}
     * @throws NullPointerException {@inheritDoc}
     */
    public int indexOf(Object o) {
        ListIterator<E> it = listIterator();
        if (o==null) {
            while (it.hasNext())
                if (it.next()==null)
                    return it.previousIndex();
        } else {
            while (it.hasNext())
                if (o.equals(it.next()))
                    return it.previousIndex();
        }
        return -1;
    }

    /*@
    @ also
    @ public normal_behavior // Generated by Daikon
    @ requires true;
    @*/
    /**
     * {@inheritDoc}
     *
     * <p>This implementation first gets a list iterator that points to the end
     * of the list (with {@code listIterator(size())}).  Then, it iterates
     * backwards over the list until the specified element is found, or the
     * beginning of the list is reached.
     *
     * @throws ClassCastException   {@inheritDoc}
     * @throws NullPointerException {@inheritDoc}
     */
    public int lastIndexOf(Object o) {
        ListIterator<E> it = listIterator(size());
        if (o==null) {
            while (it.hasPrevious())
                if (it.previous()==null)
                    return it.nextIndex();
        } else {
            while (it.hasPrevious())
                if (o.equals(it.previous()))
                    return it.nextIndex();
        }
        return -1;
    }


    /*@
    @ also
    @ public normal_behavior // Generated by Daikon
    @ requires true;
    @*/
    // Bulk Operations

    /**
     * Removes all of the elements from this list (optional operation).
     * The list will be empty after this call returns.
     *
     * <p>This implementation calls {@code removeRange(0, size())}.
     *
     * <p>Note that this implementation throws an
     * {@code UnsupportedOperationException} unless {@code remove(int
     * index)} or {@code removeRange(int fromIndex, int toIndex)} is
     * overridden.
     *
     * @throws UnsupportedOperationException if the {@code clear} operation
     *         is not supported by this list
     */
    public void clear() {
        removeRange(0, size());
    }

    /*@
    @ public normal_behavior // Generated by Daikon
    @ requires true;
    @*/
    /**
     * {@inheritDoc}
     *
     * <p>This implementation gets an iterator over the specified collection
     * and iterates over it, inserting the elements obtained from the
     * iterator into this list at the appropriate position, one at a time,
     * using {@code add(int, E)}.
     * Many implementations will override this method for efficiency.
     *
     * <p>Note that this implementation throws an
     * {@code UnsupportedOperationException} unless
     * {@link #add(int, Object) add(int, E)} is overridden.
     *
     * @throws UnsupportedOperationException {@inheritDoc}
     * @throws ClassCastException            {@inheritDoc}
     * @throws NullPointerException          {@inheritDoc}
     * @throws IllegalArgumentException      {@inheritDoc}
     * @throws IndexOutOfBoundsException     {@inheritDoc}
     */
    public boolean addAll(int index, Collection<? extends E> c) {
        rangeCheckForAdd(index);
        boolean modified = false;
        for (E e : c) {
            add(index++, e);
            modified = true;
        }
        return modified;
    }


    /*@
    @ also
    @ public normal_behavior // Generated by Daikon
    @ requires true;
    @*/
    // Iterators

    /**
     * Returns an iterator over the elements in this list in proper sequence.
     *
     * <p>This implementation returns a straightforward implementation of the
     * iterator interface, relying on the backing list's {@code size()},
     * {@code get(int)}, and {@code remove(int)} methods.
     *
     * <p>Note that the iterator returned by this method will throw an
     * {@link UnsupportedOperationException} in response to its
     * {@code remove} method unless the list's {@code remove(int)} method is
     * overridden.
     *
     * <p>This implementation can be made to throw runtime exceptions in the
     * face of concurrent modification, as described in the specification
     * for the (protected) {@link #modCount} field.
     *
     * @return an iterator over the elements in this list in proper sequence
     */
    public Iterator<E> iterator() {
        return new Itr();
    }

    /*@
    @ also
    @ public normal_behavior // Generated by Daikon
    @ requires true;
    @*/
    /**
     * {@inheritDoc}
     *
     * <p>This implementation returns {@code listIterator(0)}.
     *
     * @see #listIterator(int)
     */
    public ListIterator<E> listIterator() {
        return listIterator(0);
    }

    /*@
    @ also
    @ public normal_behavior // Generated by Daikon
    @ requires true;
    @*/
    /**
     * {@inheritDoc}
     *
     * <p>This implementation returns a straightforward implementation of the
     * {@code ListIterator} interface that extends the implementation of the
     * {@code Iterator} interface returned by the {@code iterator()} method.
     * The {@code ListIterator} implementation relies on the backing list's
     * {@code get(int)}, {@code set(int, E)}, {@code add(int, E)}
     * and {@code remove(int)} methods.
     *
     * <p>Note that the list iterator returned by this implementation will
     * throw an {@link UnsupportedOperationException} in response to its
     * {@code remove}, {@code set} and {@code add} methods unless the
     * list's {@code remove(int)}, {@code set(int, E)}, and
     * {@code add(int, E)} methods are overridden.
     *
     * <p>This implementation can be made to throw runtime exceptions in the
     * face of concurrent modification, as described in the specification for
     * the (protected) {@link #modCount} field.
     *
     * @throws IndexOutOfBoundsException {@inheritDoc}
     */
    public ListIterator<E> listIterator(final int index) {
        rangeCheckForAdd(index);

        return new ListItr(index);
    }

    private class Itr implements Iterator<E> {
        /**
         * Index of element to be returned by subsequent call to next.
         */
        /*@ spec_public */ int cursor = 0;

        /**
         * Index of element returned by most recent call to next or
         * previous.  Reset to -1 if this element is deleted by a call
         * to remove.
         */
        /*@ spec_public */ int lastRet = -1;

        /**
         * The modCount value that the iterator believes that the backing
         * List should have.  If this expectation is violated, the iterator
         * has detected concurrent modification.
         */
        /*@ spec_public */ int expectedModCount = modCount;

        /*@
        @ also
        @ public normal_behavior // Generated by Daikon
        @ requires true;
        @*/
        public boolean hasNext() {
            return cursor != size();
        }

        /*@
        @ also
        @ public normal_behavior // Generated by Daikon
        @ requires true;
        @*/
        public E next() {
            checkForComodification();
            try {
                int i = cursor;
                E next = get(i);
                lastRet = i;
                cursor = i + 1;
                return next;
            } catch (IndexOutOfBoundsException e) {
                checkForComodification();
                throw new NoSuchElementException();
            }
        }

        /*@
        @ also
        @ public normal_behavior // Generated by Daikon
        @ requires true;
        @*/
        public void remove() {
            if (lastRet < 0)
                throw new IllegalStateException();
            checkForComodification();

            try {
                AbstractList17.this.remove(lastRet);
                if (lastRet < cursor)
                    cursor--;
                lastRet = -1;
                expectedModCount = modCount;
            } catch (IndexOutOfBoundsException e) {
                throw new ConcurrentModificationException();
            }
        }

        /*@
        @ private normal_behavior // Generated by Daikon
        @ requires true;
        @*/
        final void checkForComodification() {
            if (modCount != expectedModCount)
                throw new ConcurrentModificationException();
        }
    }

    private class ListItr extends Itr implements ListIterator<E> {
        /*@
        @ private normal_behavior // Generated by Daikon
        @ requires true;
        @*/
        ListItr(int index) {
            cursor = index;
        }

        /*@
        @ also
        @ public normal_behavior // Generated by Daikon
        @ requires true;
        @*/
        public boolean hasPrevious() {
            return cursor != 0;
        }

        /*@
        @ also
        @ public normal_behavior // Generated by Daikon
        @ requires true;
        @*/
        public E previous() {
            checkForComodification();
            try {
                int i = cursor - 1;
                E previous = get(i);
                lastRet = cursor = i;
                return previous;
            } catch (IndexOutOfBoundsException e) {
                checkForComodification();
                throw new NoSuchElementException();
            }
        }

        /*@
        @ also
        @ public normal_behavior // Generated by Daikon
        @ requires true;
        @*/
        public int nextIndex() {
            return cursor;
        }

        /*@
        @ also
        @ public normal_behavior // Generated by Daikon
        @ requires true;
        @*/
        public int previousIndex() {
            return cursor-1;
        }

        /*@
        @ public normal_behavior // Generated by Daikon
        @ requires true;
        @*/
        public void set(E e) {
            if (lastRet < 0)
                throw new IllegalStateException();
            checkForComodification();

            try {
                AbstractList17.this.set(lastRet, e);
                expectedModCount = modCount;
            } catch (IndexOutOfBoundsException ex) {
                throw new ConcurrentModificationException();
            }
        }

        /*@
        @ public normal_behavior // Generated by Daikon
        @ requires true;
        @*/
        public void add(E e) {
            checkForComodification();

            try {
                int i = cursor;
                AbstractList17.this.add(i, e);
                lastRet = -1;
                cursor = i + 1;
                expectedModCount = modCount;
            } catch (IndexOutOfBoundsException ex) {
                throw new ConcurrentModificationException();
            }
        }
    }

    /*@
    @ also
    @ public normal_behavior // Generated by Daikon
    @ requires true;
    @*/
    /**
     * {@inheritDoc}
     *
     * <p>This implementation returns a list that subclasses
     * {@code AbstractList}.  The subclass stores, in private fields, the
     * offset of the subList within the backing list, the size of the subList
     * (which can change over its lifetime), and the expected
     * {@code modCount} value of the backing list.  There are two variants
     * of the subclass, one of which implements {@code RandomAccess}.
     * If this list implements {@code RandomAccess} the returned list will
     * be an instance of the subclass that implements {@code RandomAccess}.
     *
     * <p>The subclass's {@code set(int, E)}, {@code get(int)},
     * {@code add(int, E)}, {@code remove(int)}, {@code addAll(int,
     * Collection)} and {@code removeRange(int, int)} methods all
     * delegate to the corresponding methods on the backing abstract list,
     * after bounds-checking the index and adjusting for the offset.  The
     * {@code addAll(Collection c)} method merely returns {@code addAll(size,
     * c)}.
     *
     * <p>The {@code listIterator(int)} method returns a "wrapper object"
     * over a list iterator on the backing list, which is created with the
     * corresponding method on the backing list.  The {@code iterator} method
     * merely returns {@code listIterator()}, and the {@code size} method
     * merely returns the subclass's {@code size} field.
     *
     * <p>All methods first check to see if the actual {@code modCount} of
     * the backing list is equal to its expected value, and throw a
     * {@code ConcurrentModificationException} if it is not.
     *
     * @throws IndexOutOfBoundsException if an endpoint index value is out of range
     *         {@code (fromIndex < 0 || toIndex > size)}
     * @throws IllegalArgumentException if the endpoint indices are out of order
     *         {@code (fromIndex > toIndex)}
     */
    public List<E> subList(int fromIndex, int toIndex) {
        return (this instanceof RandomAccess ?
                new RandomAccessSubList17<>(this, fromIndex, toIndex) :
                new SubList<>(this, fromIndex, toIndex));
    }

    /*@
    @ also
    @ public normal_behavior // Generated by Daikon
    @ requires true;
    @*/
    // Comparison and hashing

    /**
     * Compares the specified object with this list for equality.  Returns
     * {@code true} if and only if the specified object is also a list, both
     * lists have the same size, and all corresponding pairs of elements in
     * the two lists are <i>equal</i>.  (Two elements {@code e1} and
     * {@code e2} are <i>equal</i> if {@code (e1==null ? e2==null :
     * e1.equals(e2))}.)  In other words, two lists are defined to be
     * equal if they contain the same elements in the same order.<p>
     *
     * This implementation first checks if the specified object is this
     * list. If so, it returns {@code true}; if not, it checks if the
     * specified object is a list. If not, it returns {@code false}; if so,
     * it iterates over both lists, comparing corresponding pairs of elements.
     * If any comparison returns {@code false}, this method returns
     * {@code false}.  If either iterator runs out of elements before the
     * other it returns {@code false} (as the lists are of unequal length);
     * otherwise it returns {@code true} when the iterations complete.
     *
     * @param o the object to be compared for equality with this list
     * @return {@code true} if the specified object is equal to this list
     */
    public boolean equals(Object o) {
        if (o == this)
            return true;
        if (!(o instanceof List))
            return false;

        ListIterator<E> e1 = listIterator();
        ListIterator e2 = ((List) o).listIterator();
        while (e1.hasNext() && e2.hasNext()) {
            E o1 = e1.next();
            Object o2 = e2.next();
            if (!(o1==null ? o2==null : o1.equals(o2)))
                return false;
        }
        return !(e1.hasNext() || e2.hasNext());
    }

    /*@
    @ also
    @ public normal_behavior // Generated by Daikon
    @ requires true;
    @*/
    /**
     * Returns the hash code value for this list.
     *
     * <p>This implementation uses exactly the code that is used to define the
     * list hash function in the documentation for the {@link List#hashCode}
     * method.
     *
     * @return the hash code value for this list
     */
    public int hashCode() {
        int hashCode = 1;
        for (E e : this)
            hashCode = 31*hashCode + (e==null ? 0 : e.hashCode());
        return hashCode;
    }

    /*@
    @ protected normal_behavior // Generated by Daikon
    @ requires true;
    @*/
    /**
     * Removes from this list all of the elements whose index is between
     * {@code fromIndex}, inclusive, and {@code toIndex}, exclusive.
     * Shifts any succeeding elements to the left (reduces their index).
     * This call shortens the list by {@code (toIndex - fromIndex)} elements.
     * (If {@code toIndex==fromIndex}, this operation has no effect.)
     *
     * <p>This method is called by the {@code clear} operation on this list
     * and its subLists.  Overriding this method to take advantage of
     * the internals of the list implementation can <i>substantially</i>
     * improve the performance of the {@code clear} operation on this list
     * and its subLists.
     *
     * <p>This implementation gets a list iterator positioned before
     * {@code fromIndex}, and repeatedly calls {@code ListIterator.next}
     * followed by {@code ListIterator.remove} until the entire range has
     * been removed.  <b>Note: if {@code ListIterator.remove} requires linear
     * time, this implementation requires quadratic time.</b>
     *
     * @param fromIndex index of first element to be removed
     * @param toIndex index after last element to be removed
     */
    protected void removeRange(int fromIndex, int toIndex) {
        ListIterator<E> it = listIterator(fromIndex);
        for (int i=0, n=toIndex-fromIndex; i<n; i++) {
            it.next();
            it.remove();
        }
    }

    /**
     * The number of times this list has been <i>structurally modified</i>.
     * Structural modifications are those that change the size of the
     * list, or otherwise perturb it in such a fashion that iterations in
     * progress may yield incorrect results.
     *
     * <p>This field is used by the iterator and list iterator implementation
     * returned by the {@code iterator} and {@code listIterator} methods.
     * If the value of this field changes unexpectedly, the iterator (or list
     * iterator) will throw a {@code ConcurrentModificationException} in
     * response to the {@code next}, {@code remove}, {@code previous},
     * {@code set} or {@code add} operations.  This provides
     * <i>fail-fast</i> behavior, rather than non-deterministic behavior in
     * the face of concurrent modification during iteration.
     *
     * <p><b>Use of this field by subclasses is optional.</b> If a subclass
     * wishes to provide fail-fast iterators (and list iterators), then it
     * merely has to increment this field in its {@code add(int, E)} and
     * {@code remove(int)} methods (and any other methods that it overrides
     * that result in structural modifications to the list).  A single call to
     * {@code add(int, E)} or {@code remove(int)} must add no more than
     * one to this field, or the iterators (and list iterators) will throw
     * bogus {@code ConcurrentModificationExceptions}.  If an implementation
     * does not wish to provide fail-fast iterators, this field may be
     * ignored.
     */
    /*@ spec_public */ protected transient int modCount = 0;

    /*@
    @ private normal_behavior // Generated by Daikon
    @ requires true;
    @*/
    private void rangeCheckForAdd(int index) {
        if (index < 0 || index > size())
            throw new IndexOutOfBoundsException(outOfBoundsMsg(index));
    }

    /*@
    @ private normal_behavior // Generated by Daikon
    @ requires true;
    @*/
    private String outOfBoundsMsg(int index) {
        return "Index: "+index+", Size: "+size();
    }
}

class SubList<E> extends AbstractList17<E> {
    /*@ spec_public */ private final AbstractList17<E> l;
    /*@ spec_public */ private final int offset;
    /*@ spec_public */ private int size;

    /*@
    @ private normal_behavior // Generated by Daikon
    @ requires true;
    @*/
    SubList(AbstractList17<E> list, int fromIndex, int toIndex) {
        if (fromIndex < 0)
            throw new IndexOutOfBoundsException("fromIndex = " + fromIndex);
        if (toIndex > list.size())
            throw new IndexOutOfBoundsException("toIndex = " + toIndex);
        if (fromIndex > toIndex)
            throw new IllegalArgumentException("fromIndex(" + fromIndex +
                                               ") > toIndex(" + toIndex + ")");
        l = list;
        offset = fromIndex;
        size = toIndex - fromIndex;
        this.modCount = l.modCount;
    }

    /*@
    @ public normal_behavior // Generated by Daikon
    @ requires true;
    @*/
    public E set(int index, E element) {
        rangeCheck(index);
        checkForComodification();
        return l.set(index+offset, element);
    }

    /*@
    @ also
    @ public normal_behavior // Generated by Daikon
    @ requires true;
    @*/
    public E get(int index) {
        rangeCheck(index);
        checkForComodification();
        return l.get(index+offset);
    }

    /*@
    @ also
    @ public normal_behavior // Generated by Daikon
    @ requires true;
    @*/
    public int size() {
        checkForComodification();
        return size;
    }

    /*@
    @ public normal_behavior // Generated by Daikon
    @ requires true;
    @*/
    public void add(int index, E element) {
        rangeCheckForAdd(index);
        checkForComodification();
        l.add(index+offset, element);
        this.modCount = l.modCount;
        size++;
    }

    /*@
    @ also
    @ public normal_behavior // Generated by Daikon
    @ requires true;
    @*/
    public E remove(int index) {
        rangeCheck(index);
        checkForComodification();
        E result = l.remove(index+offset);
        this.modCount = l.modCount;
        size--;
        return result;
    }

    /*@
    @ also
    @ protected normal_behavior // Generated by Daikon
    @ requires true;
    @*/
    protected void removeRange(int fromIndex, int toIndex) {
        checkForComodification();
        l.removeRange(fromIndex+offset, toIndex+offset);
        this.modCount = l.modCount;
        size -= (toIndex-fromIndex);
    }

    /*@
    @ public normal_behavior // Generated by Daikon
    @ requires true;
    @*/
    public boolean addAll(Collection<? extends E> c) {
        return addAll(size, c);
    }

    /*@
    @ public normal_behavior // Generated by Daikon
    @ requires true;
    @*/
    public boolean addAll(int index, Collection<? extends E> c) {
        rangeCheckForAdd(index);
        int cSize = c.size();
        if (cSize==0)
            return false;

        checkForComodification();
        l.addAll(offset+index, c);
        this.modCount = l.modCount;
        size += cSize;
        return true;
    }

    /*@
    @ also
    @ public normal_behavior // Generated by Daikon
    @ requires true;
    @*/
    public Iterator<E> iterator() {
        return listIterator();
    }

    /*@
    @ also
    @ public normal_behavior // Generated by Daikon
    @ requires true;
    @*/
    public ListIterator<E> listIterator(final int index) {
        checkForComodification();
        rangeCheckForAdd(index);

        return new ListIterator<E>() {
            /*@ spec_public */ private final ListIterator<E> i = l.listIterator(index+offset);

            /*@
            @ public normal_behavior // Generated by Daikon
            @ requires true;
            @*/
            public boolean hasNext() {
                return nextIndex() < size;
            }

            /*@
            @ public normal_behavior // Generated by Daikon
            @ requires true;
            @*/
            public E next() {
                if (hasNext())
                    return i.next();
                else
                    throw new NoSuchElementException();
            }

            /*@
            @ public normal_behavior // Generated by Daikon
            @ requires true;
            @*/
            public boolean hasPrevious() {
                return previousIndex() >= 0;
            }

            /*@
            @ public normal_behavior // Generated by Daikon
            @ requires true;
            @*/
            public E previous() {
                if (hasPrevious())
                    return i.previous();
                else
                    throw new NoSuchElementException();
            }

            /*@
            @ public normal_behavior // Generated by Daikon
            @ requires true;
            @*/
            public int nextIndex() {
                return i.nextIndex() - offset;
            }

            /*@
            @ public normal_behavior // Generated by Daikon
            @ requires true;
            @*/
            public int previousIndex() {
                return i.previousIndex() - offset;
            }

            /*@
            @ public normal_behavior // Generated by Daikon
            @ requires true;
            @*/
            public void remove() {
                i.remove();
                SubList.this.modCount = l.modCount;
                size--;
            }

            /*@
            @ public normal_behavior // Generated by Daikon
            @ requires true;
            @*/
            public void set(E e) {
                i.set(e);
            }

            /*@
            @ public normal_behavior // Generated by Daikon
            @ requires true;
            @*/
            public void add(E e) {
                i.add(e);
                SubList.this.modCount = l.modCount;
                size++;
            }
        };
    }

    /*@
    @ also
    @ public normal_behavior // Generated by Daikon
    @ requires true;
    @*/
    public List<E> subList(int fromIndex, int toIndex) {
        return new SubList<>(this, fromIndex, toIndex);
    }

    /*@
    @ private normal_behavior // Generated by Daikon
    @ requires true;
    @*/
    private void rangeCheck(int index) {
        if (index < 0 || index >= size)
            throw new IndexOutOfBoundsException(outOfBoundsMsg(index));
    }

    /*@
    @ also
    @ private normal_behavior // Generated by Daikon
    @ requires true;
    @*/
    private void rangeCheckForAdd(int index) {
        if (index < 0 || index > size)
            throw new IndexOutOfBoundsException(outOfBoundsMsg(index));
    }

    /*@
    @ also
    @ private normal_behavior // Generated by Daikon
    @ requires true;
    @*/
    private String outOfBoundsMsg(int index) {
        return "Index: "+index+", Size: "+size;
    }

    /*@
    @ private normal_behavior // Generated by Daikon
    @ requires true;
    @*/
    private void checkForComodification() {
        if (this.modCount != l.modCount)
            throw new ConcurrentModificationException();
    }
}

class RandomAccessSubList17<E> extends SubList<E> implements RandomAccess {
    /*@
    @ private normal_behavior // Generated by Daikon
    @ requires true;
    @*/
    RandomAccessSubList17(AbstractList17<E> list, int fromIndex, int toIndex) {
        super(list, fromIndex, toIndex);
    }

    /*@
    @ also
    @ public normal_behavior // Generated by Daikon
    @ requires true;
    @*/
    public List<E> subList(int fromIndex, int toIndex) {
        return new RandomAccessSubList17<>(this, fromIndex, toIndex);
    }
}
/*
 * Copyright (c) 1997, 2013, Oracle and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the LICENSE file that accompanied this code.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 */

package javautil;

import java.util.*;

/**
 * Resizable-array implementation of the <tt>List</tt> interface.  Implements
 * all optional list operations, and permits all elements, including
 * <tt>null</tt>.  In addition to implementing the <tt>List</tt> interface,
 * this class provides methods to manipulate the size of the array that is
 * used internally to store the list.  (This class is roughly equivalent to
 * <tt>Vector</tt>, except that it is unsynchronized.)
 *
 * <p>The <tt>size</tt>, <tt>isEmpty</tt>, <tt>get</tt>, <tt>set</tt>,
 * <tt>iterator</tt>, and <tt>listIterator</tt> operations run in constant
 * time.  The <tt>add</tt> operation runs in <i>amortized constant time</i>,
 * that is, adding n elements requires O(n) time.  All of the other operations
 * run in linear time (roughly speaking).  The constant factor is low compared
 * to that for the <tt>LinkedList</tt> implementation.
 *
 * <p>Each <tt>ArrayList</tt> instance has a <i>capacity</i>.  The capacity is
 * the size of the array used to store the elements in the list.  It is always
 * at least as large as the list size.  As elements are added to an ArrayList,
 * its capacity grows automatically.  The details of the growth policy are not
 * specified beyond the fact that adding an element has constant amortized
 * time cost.
 *
 * <p>An application can increase the capacity of an <tt>ArrayList</tt> instance
 * before adding a large number of elements using the <tt>ensureCapacity</tt>
 * operation.  This may reduce the amount of incremental reallocation.
 *
 * <p><strong>Note that this implementation is not synchronized.</strong>
 * If multiple threads access an <tt>ArrayList</tt> instance concurrently,
 * and at least one of the threads modifies the list structurally, it
 * <i>must</i> be synchronized externally.  (A structural modification is
 * any operation that adds or deletes one or more elements, or explicitly
 * resizes the backing array; merely setting the value of an element is not
 * a structural modification.)  This is typically accomplished by
 * synchronizing on some object that naturally encapsulates the list.
 *
 * If no such object exists, the list should be "wrapped" using the
 * {@link Collections#synchronizedList Collections.synchronizedList}
 * method.  This is best done at creation time, to prevent accidental
 * unsynchronized access to the list:<pre>
 *   List list = Collections.synchronizedList(new ArrayList(...));</pre>
 *
 * <p><a name="fail-fast"/>
 * The iterators returned by this class's {@link #iterator() iterator} and
 * {@link #listIterator(int) listIterator} methods are <em>fail-fast</em>:
 * if the list is structurally modified at any time after the iterator is
 * created, in any way except through the iterator's own
 * {@link ListIterator#remove() remove} or
 * {@link ListIterator#add(Object) add} methods, the iterator will throw a
 * {@link ConcurrentModificationException}.  Thus, in the face of
 * concurrent modification, the iterator fails quickly and cleanly, rather
 * than risking arbitrary, non-deterministic behavior at an undetermined
 * time in the future.
 *
 * <p>Note that the fail-fast behavior of an iterator cannot be guaranteed
 * as it is, generally speaking, impossible to make any hard guarantees in the
 * presence of unsynchronized concurrent modification.  Fail-fast iterators
 * throw {@code ConcurrentModificationException} on a best-effort basis.
 * Therefore, it would be wrong to write a program that depended on this
 * exception for its correctness:  <i>the fail-fast behavior of iterators
 * should be used only to detect bugs.</i>
 *
 * <p>This class is a member of the
 * <a href="{@docRoot}/../technotes/guides/collections/index.html">
 * Java Collections Framework</a>.
 *
 * @author  Josh Bloch
 * @author  Neal Gafter
 * @see     Collection
 * @see     List
 * @see     LinkedList
 * @see     Vector
 * @since   1.2
 */

public class ArrayList17<E> extends AbstractList17<E>
        implements List<E>, RandomAccess, Cloneable, java.io.Serializable
{
    /*@ invariant javautil.ArrayList17.EMPTY_ELEMENTDATA.getClass().getName() == this.elementData.getClass().getName(); */
    /*@ invariant this.elementData != null; */
    /*@ invariant this.size >= 0; */
    /*@ invariant this.modCount >= 0; */
    /*@ invariant daikon.Quant.size(this.elementData)-1 != 0; */
    /*@ invariant daikon.Quant.eltsEqual(daikon.Quant.slice(this.elementData, this.size, daikon.Quant.size(this.elementData)), null); */
    /*@ invariant daikon.Quant.noDups(daikon.Quant.slice(this.elementData, 0, this.size-1)); */
    /*@ invariant daikon.Quant.eltsNotEqual(daikon.Quant.slice(this.elementData, 0, this.size-1), null); */
    /*@ invariant this.size >= daikon.Quant.size(javautil.ArrayList17.EMPTY_ELEMENTDATA); */
    /*@ invariant (!(daikon.Quant.size(this.elementData) == 0)) || (this.size == 0); */
    /*@ invariant this.size <= daikon.Quant.size(this.elementData); */
    /*@ invariant daikon.Quant.size(javautil.ArrayList17.EMPTY_ELEMENTDATA) <= daikon.Quant.size(this.elementData); */
    /*@ invariant daikon.Quant.size(javautil.ArrayList17.EMPTY_ELEMENTDATA) != daikon.Quant.size(this.elementData)-1; */
    /*@ invariant daikon.Quant.size(javautil.ArrayList17.EMPTY_ELEMENTDATA)-1 <= daikon.Quant.size(this.elementData)-1; */
    /*@ spec_public */ private static final long serialVersionUID = 8683452581122892189L;

    /**
     * Default initial capacity.
     */
    /*@ spec_public */ private static final int DEFAULT_CAPACITY = 10;

    /**
     * Shared empty array instance used for empty instances.
     */
    /*@ spec_public */ private static final Object[] EMPTY_ELEMENTDATA = {};

    /**
     * The array buffer into which the elements of the ArrayList are stored.
     * The capacity of the ArrayList is the length of this array buffer. Any
     * empty ArrayList with elementData == EMPTY_ELEMENTDATA will be expanded to
     * DEFAULT_CAPACITY when the first element is added.
     */
    /*@ spec_public */ private transient Object[] elementData;

    /**
     * The size of the ArrayList (the number of elements it contains).
     *
     * @serial
     */
    /*@ spec_public */ private int size;

    /*@
    @ public normal_behavior // Generated by Daikon
    @ requires initialCapacity == 22;
    @ ensures this.size == daikon.Quant.size(javautil.ArrayList17.EMPTY_ELEMENTDATA);
    @ ensures \old(initialCapacity) == daikon.Quant.size(this.elementData);
    @ ensures daikon.Quant.getElement_Object(this.elementData, this.size) == daikon.Quant.getElement_Object(this.elementData, \old(initialCapacity)-1);
    @ ensures this.elementData != null;
    @ ensures daikon.Quant.eltsEqual(this.elementData, null);
    @ ensures this.modCount == 0;
    @ ensures daikon.Quant.eltsEqual(this.elementData, daikon.Quant.getElement_Object(this.elementData, this.size));
    @*/
    /**
     * Constructs an empty list with the specified initial capacity.
     *
     * @param  initialCapacity  the initial capacity of the list
     * @throws IllegalArgumentException if the specified initial capacity
     *         is negative
     */
    public ArrayList17(int initialCapacity) {
        super();
        if (initialCapacity < 0)
            throw new IllegalArgumentException("Illegal Capacity: "+
                                               initialCapacity);
        this.elementData = new Object[initialCapacity];
    }

    /*@
    @ public normal_behavior // Generated by Daikon
    @ ensures javautil.ArrayList17.EMPTY_ELEMENTDATA == this.elementData;
    @ ensures this.size == daikon.Quant.size(javautil.ArrayList17.EMPTY_ELEMENTDATA);
    @ ensures this.size == daikon.Quant.size(this.elementData);
    @ ensures this.modCount == 0;
    @*/
    /**
     * Constructs an empty list with an initial capacity of ten.
     */
    public ArrayList17() {
        super();
        this.elementData = EMPTY_ELEMENTDATA;
    }

    /*@
    @ public normal_behavior // Generated by Daikon
    @ requires true;
    @*/
    /**
     * Constructs a list containing the elements of the specified
     * collection, in the order they are returned by the collection's
     * iterator.
     *
     * @param c the collection whose elements are to be placed into this list
     * @throws NullPointerException if the specified collection is null
     */
    public ArrayList17(Collection<? extends E> c) {
        elementData = c.toArray();
        size = elementData.length;
        // c.toArray might (incorrectly) not return Object[] (see 6260652)
        if (elementData.getClass() != Object[].class)
            elementData = Arrays.copyOf(elementData, size, Object[].class);
    }

    /*@
    @ public normal_behavior // Generated by Daikon
    @ requires true;
    @*/
    /**
     * Trims the capacity of this <tt>ArrayList</tt> instance to be the
     * list's current size.  An application can use this operation to minimize
     * the storage of an <tt>ArrayList</tt> instance.
     */
    public void trimToSize() {
        modCount++;
        if (size < elementData.length) {
            elementData = Arrays.copyOf(elementData, size);
        }
    }

    /*@
    @ public normal_behavior // Generated by Daikon
    @ requires true;
    @*/
    /**
     * Increases the capacity of this <tt>ArrayList</tt> instance, if
     * necessary, to ensure that it can hold at least the number of elements
     * specified by the minimum capacity argument.
     *
     * @param   minCapacity   the desired minimum capacity
     */
    public void ensureCapacity(int minCapacity) {
        int minExpand = (elementData != EMPTY_ELEMENTDATA)
            // any size if real element table
            ? 0
            // larger than default for empty table. It's already supposed to be
            // at default size.
            : DEFAULT_CAPACITY;

        if (minCapacity > minExpand) {
            ensureExplicitCapacity(minCapacity);
        }
    }

    /*@
    @ private normal_behavior // Generated by Daikon
    @ requires this != null;
    @ requires this.size - minCapacity + 1 == 0;
    @ requires minCapacity > daikon.Quant.size(javautil.ArrayList17.EMPTY_ELEMENTDATA);
    @ requires daikon.Quant.size(javautil.ArrayList17.EMPTY_ELEMENTDATA) < daikon.Quant.size(this.elementData)-1;
    @ ensures javautil.ArrayList17.EMPTY_ELEMENTDATA == \old(javautil.ArrayList17.EMPTY_ELEMENTDATA);
    @ ensures javautil.ArrayList17.EMPTY_ELEMENTDATA.getClass().getName() == \old(javautil.ArrayList17.EMPTY_ELEMENTDATA.getClass().getName());
    @ ensures javautil.ArrayList17.EMPTY_ELEMENTDATA.getClass().getName() == \old(this.elementData.getClass().getName());
    @ ensures daikon.Quant.pairwiseEqual(javautil.ArrayList17.EMPTY_ELEMENTDATA, \old(javautil.ArrayList17.EMPTY_ELEMENTDATA));
    @ ensures this.size == \old(this.size);
    @ ensures daikon.Quant.getElement_Object(this.elementData, this.size) == daikon.Quant.getElement_Object(this.elementData, \old(minCapacity)-1);
    @ ensures daikon.Quant.pairwiseEqual(daikon.Quant.slice(this.elementData, 0, this.size-1), \old(daikon.Quant.slice(this.elementData, 0, this.size-1)));
    @ ensures daikon.Quant.noDups(daikon.Quant.slice(this.elementData, 0, this.size));
    @ ensures daikon.Quant.subsetOf(\old(this.elementData), this.elementData);
    @ ensures this.size - \old(minCapacity) + 1 == 0;
    @ ensures this.size <= daikon.Quant.size(this.elementData)-1;
    @ ensures this.size <= \old(daikon.Quant.size(this.elementData));
    @ ensures this.modCount - \old(this.modCount) - 1 == 0;
    @ ensures daikon.Quant.subsetOf(\old(this.elementData), daikon.Quant.slice(this.elementData, 0, this.size));
    @ ensures \old(minCapacity) > daikon.Quant.size(javautil.ArrayList17.EMPTY_ELEMENTDATA);
    @ ensures \old(minCapacity) <= daikon.Quant.size(this.elementData);
    @ ensures daikon.Quant.size(javautil.ArrayList17.EMPTY_ELEMENTDATA) < daikon.Quant.size(this.elementData)-1;
    @ ensures daikon.Quant.size(javautil.ArrayList17.EMPTY_ELEMENTDATA) < \old(daikon.Quant.size(this.elementData))-1;
    @ ensures daikon.Quant.size(this.elementData) >= \old(daikon.Quant.size(this.elementData));
    @ ensures daikon.Quant.size(this.elementData)-1 != \old(daikon.Quant.size(this.elementData));
    @ ensures daikon.Quant.size(this.elementData)-1 >= \old(daikon.Quant.size(this.elementData))-1;
    @ ensures daikon.Quant.eltsEqual(daikon.Quant.slice(this.elementData, this.size, daikon.Quant.size(this.elementData)), daikon.Quant.getElement_Object(this.elementData, this.size));
    @*/
    private void ensureCapacityInternal(int minCapacity) {
        if (elementData == EMPTY_ELEMENTDATA) {
            minCapacity = Math.max(DEFAULT_CAPACITY, minCapacity);
        }

        ensureExplicitCapacity(minCapacity);
    }

    /*@
    @ private normal_behavior // Generated by Daikon
    @ requires this != null;
    @ requires this.size - minCapacity + 1 == 0;
    @ requires minCapacity > daikon.Quant.size(javautil.ArrayList17.EMPTY_ELEMENTDATA);
    @ requires daikon.Quant.size(javautil.ArrayList17.EMPTY_ELEMENTDATA) < daikon.Quant.size(this.elementData)-1;
    @ ensures javautil.ArrayList17.EMPTY_ELEMENTDATA == \old(javautil.ArrayList17.EMPTY_ELEMENTDATA);
    @ ensures javautil.ArrayList17.EMPTY_ELEMENTDATA.getClass().getName() == \old(javautil.ArrayList17.EMPTY_ELEMENTDATA.getClass().getName());
    @ ensures javautil.ArrayList17.EMPTY_ELEMENTDATA.getClass().getName() == \old(this.elementData.getClass().getName());
    @ ensures daikon.Quant.pairwiseEqual(javautil.ArrayList17.EMPTY_ELEMENTDATA, \old(javautil.ArrayList17.EMPTY_ELEMENTDATA));
    @ ensures this.size == \old(this.size);
    @ ensures daikon.Quant.getElement_Object(this.elementData, this.size) == daikon.Quant.getElement_Object(this.elementData, \old(minCapacity)-1);
    @ ensures daikon.Quant.pairwiseEqual(daikon.Quant.slice(this.elementData, 0, this.size-1), \old(daikon.Quant.slice(this.elementData, 0, this.size-1)));
    @ ensures daikon.Quant.noDups(daikon.Quant.slice(this.elementData, 0, this.size));
    @ ensures daikon.Quant.subsetOf(\old(this.elementData), this.elementData);
    @ ensures this.size - \old(minCapacity) + 1 == 0;
    @ ensures this.size <= daikon.Quant.size(this.elementData)-1;
    @ ensures this.size <= \old(daikon.Quant.size(this.elementData));
    @ ensures this.modCount - \old(this.modCount) - 1 == 0;
    @ ensures daikon.Quant.subsetOf(\old(this.elementData), daikon.Quant.slice(this.elementData, 0, this.size));
    @ ensures \old(minCapacity) > daikon.Quant.size(javautil.ArrayList17.EMPTY_ELEMENTDATA);
    @ ensures \old(minCapacity) <= daikon.Quant.size(this.elementData);
    @ ensures daikon.Quant.size(javautil.ArrayList17.EMPTY_ELEMENTDATA) < daikon.Quant.size(this.elementData)-1;
    @ ensures daikon.Quant.size(javautil.ArrayList17.EMPTY_ELEMENTDATA) < \old(daikon.Quant.size(this.elementData))-1;
    @ ensures daikon.Quant.size(this.elementData) >= \old(daikon.Quant.size(this.elementData));
    @ ensures daikon.Quant.size(this.elementData)-1 != \old(daikon.Quant.size(this.elementData));
    @ ensures daikon.Quant.size(this.elementData)-1 >= \old(daikon.Quant.size(this.elementData))-1;
    @ ensures daikon.Quant.eltsEqual(daikon.Quant.slice(this.elementData, this.size, daikon.Quant.size(this.elementData)), daikon.Quant.getElement_Object(this.elementData, this.size));
    @*/
    private void ensureExplicitCapacity(int minCapacity) {
        modCount++;

        // overflow-conscious code
        if (minCapacity - elementData.length > 0)
            grow(minCapacity);
    }

    /**
     * The maximum size of array to allocate.
     * Some VMs reserve some header words in an array.
     * Attempts to allocate larger arrays may result in
     * OutOfMemoryError: Requested array size exceeds VM limit
     */
    /*@ spec_public */ private static final int MAX_ARRAY_SIZE = Integer.MAX_VALUE - 8;

    /*@
    @ private normal_behavior // Generated by Daikon
    @ requires this.size == daikon.Quant.size(this.elementData);
    @ requires this != null;
    @ requires this.size - minCapacity + 1 == 0;
    @ ensures javautil.ArrayList17.EMPTY_ELEMENTDATA == \old(javautil.ArrayList17.EMPTY_ELEMENTDATA);
    @ ensures javautil.ArrayList17.EMPTY_ELEMENTDATA.getClass().getName() == \old(javautil.ArrayList17.EMPTY_ELEMENTDATA.getClass().getName());
    @ ensures javautil.ArrayList17.EMPTY_ELEMENTDATA.getClass().getName() == \old(this.elementData.getClass().getName());
    @ ensures daikon.Quant.pairwiseEqual(javautil.ArrayList17.EMPTY_ELEMENTDATA, \old(javautil.ArrayList17.EMPTY_ELEMENTDATA));
    @ ensures this.size == \old(this.size);
    @ ensures this.size == \old(daikon.Quant.size(this.elementData));
    @ ensures this.modCount == \old(this.modCount);
    @ ensures daikon.Quant.pairwiseEqual(\old(this.elementData), daikon.Quant.slice(this.elementData, 0, this.size-1));
    @ ensures daikon.Quant.pairwiseEqual(\old(this.elementData), daikon.Quant.slice(this.elementData, 0, \old(this.size)-1));
    @ ensures daikon.Quant.getElement_Object(this.elementData, this.size) == daikon.Quant.getElement_Object(this.elementData, \old(minCapacity));
    @ ensures daikon.Quant.getElement_Object(this.elementData, this.size) == daikon.Quant.getElement_Object(this.elementData, \old(minCapacity)-1);
    @ ensures daikon.Quant.getElement_Object(this.elementData, this.size-1) == \old(daikon.Quant.getElement_Object(this.elementData, this.size-1));
    @ ensures this.size - \old(minCapacity) + 1 == 0;
    @ ensures daikon.Quant.eltsEqual(daikon.Quant.slice(this.elementData, this.size, daikon.Quant.size(this.elementData)), daikon.Quant.getElement_Object(this.elementData, this.size));
    @*/
    /**
     * Increases the capacity to ensure that it can hold at least the
     * number of elements specified by the minimum capacity argument.
     *
     * @param minCapacity the desired minimum capacity
     */
    private void grow(int minCapacity) {
        // overflow-conscious code
        int oldCapacity = elementData.length;
        int newCapacity = oldCapacity + (oldCapacity >> 1);
        if (newCapacity - minCapacity < 0)
            newCapacity = minCapacity;
        if (newCapacity - MAX_ARRAY_SIZE > 0)
            newCapacity = hugeCapacity(minCapacity);
        // minCapacity is usually close to size, so this is a win:
        elementData = Arrays.copyOf(elementData, newCapacity);
    }

    /*@
    @ also
    @ private normal_behavior // Generated by Daikon
    @ requires true;
    @*/
    private static int hugeCapacity(int minCapacity) {
        if (minCapacity < 0) // overflow
            throw new OutOfMemoryError();
        return (minCapacity > MAX_ARRAY_SIZE) ?
            Integer.MAX_VALUE :
            MAX_ARRAY_SIZE;
    }

    /*@
    @ also
    @ public normal_behavior // Generated by Daikon
    @ requires true;
    @*/
    /**
     * Returns the number of elements in this list.
     *
     * @return the number of elements in this list
     */
    public int size() {
        return size;
    }

    /*@
    @ also
    @ public normal_behavior // Generated by Daikon
    @ requires true;
    @*/
    /**
     * Returns <tt>true</tt> if this list contains no elements.
     *
     * @return <tt>true</tt> if this list contains no elements
     */
    public boolean isEmpty() {
        return size == 0;
    }

    /*@
    @ also
    @ public normal_behavior // Generated by Daikon
    @ requires true;
    @*/
    /**
     * Returns <tt>true</tt> if this list contains the specified element.
     * More formally, returns <tt>true</tt> if and only if this list contains
     * at least one element <tt>e</tt> such that
     * <tt>(o==null&nbsp;?&nbsp;e==null&nbsp;:&nbsp;o.equals(e))</tt>.
     *
     * @param o element whose presence in this list is to be tested
     * @return <tt>true</tt> if this list contains the specified element
     */
    public boolean contains(Object o) {
        return indexOf(o) >= 0;
    }

    /*@
    @ also
    @ public normal_behavior // Generated by Daikon
    @ requires true;
    @*/
    /**
     * Returns the index of the first occurrence of the specified element
     * in this list, or -1 if this list does not contain the element.
     * More formally, returns the lowest index <tt>i</tt> such that
     * <tt>(o==null&nbsp;?&nbsp;get(i)==null&nbsp;:&nbsp;o.equals(get(i)))</tt>,
     * or -1 if there is no such index.
     */
    public int indexOf(Object o) {
        if (o == null) {
            for (int i = 0; i < size; i++)
                if (elementData[i]==null)
                    return i;
        } else {
            for (int i = 0; i < size; i++)
                if (o.equals(elementData[i]))
                    return i;
        }
        return -1;
    }

    /*@
    @ also
    @ public normal_behavior // Generated by Daikon
    @ requires true;
    @*/
    /**
     * Returns the index of the last occurrence of the specified element
     * in this list, or -1 if this list does not contain the element.
     * More formally, returns the highest index <tt>i</tt> such that
     * <tt>(o==null&nbsp;?&nbsp;get(i)==null&nbsp;:&nbsp;o.equals(get(i)))</tt>,
     * or -1 if there is no such index.
     */
    public int lastIndexOf(Object o) {
        if (o == null) {
            for (int i = size-1; i >= 0; i--)
                if (elementData[i]==null)
                    return i;
        } else {
            for (int i = size-1; i >= 0; i--)
                if (o.equals(elementData[i]))
                    return i;
        }
        return -1;
    }

    /*@
    @ also
    @ public normal_behavior // Generated by Daikon
    @ requires true;
    @*/
    /**
     * Returns a shallow copy of this <tt>ArrayList</tt> instance.  (The
     * elements themselves are not copied.)
     *
     * @return a clone of this <tt>ArrayList</tt> instance
     */
    public Object clone() {
        try {
            @SuppressWarnings("unchecked")
                ArrayList17<E> v = (ArrayList17<E>) super.clone();
            v.elementData = Arrays.copyOf(elementData, size);
            v.modCount = 0;
            return v;
        } catch (CloneNotSupportedException e) {
            // this shouldn't happen, since we are Cloneable
            throw new InternalError();
        }
    }

    /*@
    @ also
    @ public normal_behavior // Generated by Daikon
    @ requires true;
    @*/
    /**
     * Returns an array containing all of the elements in this list
     * in proper sequence (from first to last element).
     *
     * <p>The returned array will be "safe" in that no references to it are
     * maintained by this list.  (In other words, this method must allocate
     * a new array).  The caller is thus free to modify the returned array.
     *
     * <p>This method acts as bridge between array-based and collection-based
     * APIs.
     *
     * @return an array containing all of the elements in this list in
     *         proper sequence
     */
    public Object[] toArray() {
        return Arrays.copyOf(elementData, size);
    }

    /*@
    @ public normal_behavior // Generated by Daikon
    @ requires true;
    @*/
    /**
     * Returns an array containing all of the elements in this list in proper
     * sequence (from first to last element); the runtime type of the returned
     * array is that of the specified array.  If the list fits in the
     * specified array, it is returned therein.  Otherwise, a new array is
     * allocated with the runtime type of the specified array and the size of
     * this list.
     *
     * <p>If the list fits in the specified array with room to spare
     * (i.e., the array has more elements than the list), the element in
     * the array immediately following the end of the collection is set to
     * <tt>null</tt>.  (This is useful in determining the length of the
     * list <i>only</i> if the caller knows that the list does not contain
     * any null elements.)
     *
     * @param a the array into which the elements of the list are to
     *          be stored, if it is big enough; otherwise, a new array of the
     *          same runtime type is allocated for this purpose.
     * @return an array containing the elements of the list
     * @throws ArrayStoreException if the runtime type of the specified array
     *         is not a supertype of the runtime type of every element in
     *         this list
     * @throws NullPointerException if the specified array is null
     */
    @SuppressWarnings("unchecked")
    public <T> T[] toArray(T[] a) {
        if (a.length < size)
            // Make a new array of a's runtime type, but my contents:
            return (T[]) Arrays.copyOf(elementData, size, a.getClass());
        System.arraycopy(elementData, 0, a, 0, size);
        if (a.length > size)
            a[size] = null;
        return a;
    }

    /*@
    @ private normal_behavior // Generated by Daikon
    @ requires this != null;
    @ requires this.elementData != null;
    @ requires index % 3 == 0;
    @ requires daikon.Quant.size(this.elementData) == 109;
    @ requires 3 * this.size - index - 201 == 0;
    @ requires this.size > index;
    @ requires this.size > daikon.Quant.size(javautil.ArrayList17.EMPTY_ELEMENTDATA);
    @ requires this.size < daikon.Quant.size(this.elementData)-1;
    @ requires index > daikon.Quant.size(javautil.ArrayList17.EMPTY_ELEMENTDATA);
    @ requires index < daikon.Quant.size(this.elementData)-1;
    @ requires daikon.Quant.eltsEqual(daikon.Quant.slice(this.elementData, this.size, daikon.Quant.size(this.elementData)), daikon.Quant.getElement_Object(this.elementData, this.size));
    @ requires daikon.Quant.size(javautil.ArrayList17.EMPTY_ELEMENTDATA) == (java.lang.Math.pow(daikon.Quant.size(this.elementData)-1, this.size));
    @ ensures javautil.ArrayList17.EMPTY_ELEMENTDATA == \old(javautil.ArrayList17.EMPTY_ELEMENTDATA);
    @ ensures javautil.ArrayList17.EMPTY_ELEMENTDATA.getClass().getName() == \old(javautil.ArrayList17.EMPTY_ELEMENTDATA.getClass().getName());
    @ ensures javautil.ArrayList17.EMPTY_ELEMENTDATA.getClass().getName() == \old(this.elementData.getClass().getName());
    @ ensures daikon.Quant.pairwiseEqual(javautil.ArrayList17.EMPTY_ELEMENTDATA, \old(javautil.ArrayList17.EMPTY_ELEMENTDATA));
    @ ensures this.elementData == \old(this.elementData);
    @ ensures daikon.Quant.pairwiseEqual(this.elementData, \old(this.elementData));
    @ ensures this.size == \old(this.size);
    @ ensures this.modCount == \old(this.modCount);
    @ ensures \result == daikon.Quant.getElement_Object(this.elementData, \old(index));
    @ ensures \result == \old(daikon.Quant.getElement_Object(this.elementData, index));
    @ ensures this.elementData != null;
    @ ensures \result.getClass().getName() == java.lang.Integer.class.getName();
    @ ensures daikon.Quant.size(this.elementData) == 109;
    @ ensures javautil.ArrayList17.EMPTY_ELEMENTDATA.getClass().getName() != \result.getClass().getName();
    @ ensures 3 * this.size - \old(index) - 201 == 0;
    @ ensures this.size > \old(index);
    @ ensures this.size > daikon.Quant.size(javautil.ArrayList17.EMPTY_ELEMENTDATA);
    @ ensures this.size < daikon.Quant.size(this.elementData)-1;
    @ ensures \old(index) > daikon.Quant.size(javautil.ArrayList17.EMPTY_ELEMENTDATA);
    @ ensures \old(index) < daikon.Quant.size(this.elementData)-1;
    @ ensures daikon.Quant.eltsEqual(daikon.Quant.slice(this.elementData, this.size, daikon.Quant.size(this.elementData)), daikon.Quant.getElement_Object(this.elementData, this.size));
    @ ensures daikon.Quant.size(javautil.ArrayList17.EMPTY_ELEMENTDATA) == (java.lang.Math.pow(daikon.Quant.size(this.elementData)-1, this.size));
    @*/
    // Positional Access Operations

    @SuppressWarnings("unchecked")
    E elementData(int index) {
        return (E) elementData[index];
    }

    /*@
    @ also
    @ public normal_behavior // Generated by Daikon
    @ requires true;
    @*/
    /**
     * Returns the element at the specified position in this list.
     *
     * @param  index index of the element to return
     * @return the element at the specified position in this list
     * @throws IndexOutOfBoundsException {@inheritDoc}
     */
    public E get(int index) {
        rangeCheck(index);

        return elementData(index);
    }

    /*@
    @ public normal_behavior // Generated by Daikon
    @ requires true;
    @*/
    /**
     * Replaces the element at the specified position in this list with
     * the specified element.
     *
     * @param index index of the element to replace
     * @param element element to be stored at the specified position
     * @return the element previously at the specified position
     * @throws IndexOutOfBoundsException {@inheritDoc}
     */
    public E set(int index, E element) {
        rangeCheck(index);

        E oldValue = elementData(index);
        elementData[index] = element;
        return oldValue;
    }

    /*@
    @ public normal_behavior // Generated by Daikon
    @ requires this != null;
    @ requires e != null;
    @ requires e.getClass().getName() == java.lang.Integer.class.getName();
    @ requires javautil.ArrayList17.EMPTY_ELEMENTDATA.getClass().getName() != e.getClass().getName();
    @ requires daikon.Quant.size(javautil.ArrayList17.EMPTY_ELEMENTDATA) < daikon.Quant.size(this.elementData)-1;
    @ ensures javautil.ArrayList17.EMPTY_ELEMENTDATA == \old(javautil.ArrayList17.EMPTY_ELEMENTDATA);
    @ ensures javautil.ArrayList17.EMPTY_ELEMENTDATA.getClass().getName() == \old(javautil.ArrayList17.EMPTY_ELEMENTDATA.getClass().getName());
    @ ensures javautil.ArrayList17.EMPTY_ELEMENTDATA.getClass().getName() == \old(this.elementData.getClass().getName());
    @ ensures daikon.Quant.pairwiseEqual(javautil.ArrayList17.EMPTY_ELEMENTDATA, \old(javautil.ArrayList17.EMPTY_ELEMENTDATA));
    @ ensures \old(e) == daikon.Quant.getElement_Object(this.elementData, this.size-1);
    @ ensures \old(e) == daikon.Quant.getElement_Object(this.elementData, \old(this.size));
    @ ensures daikon.Quant.pairwiseEqual(daikon.Quant.slice(this.elementData, 0, \old(this.size)-1), \old(daikon.Quant.slice(this.elementData, 0, this.size-1)));
    @ ensures \result == true;
    @ ensures javautil.ArrayList17.EMPTY_ELEMENTDATA.getClass().getName() != \old(e.getClass().getName());
    @ ensures this.size - \old(this.size) - 1 == 0;
    @ ensures this.size > daikon.Quant.size(javautil.ArrayList17.EMPTY_ELEMENTDATA);
    @ ensures this.modCount - \old(this.modCount) - 1 == 0;
    @ ensures \old(this.size) >= daikon.Quant.size(javautil.ArrayList17.EMPTY_ELEMENTDATA);
    @ ensures \old(this.size) <= daikon.Quant.size(this.elementData)-1;
    @ ensures daikon.Quant.size(javautil.ArrayList17.EMPTY_ELEMENTDATA) < daikon.Quant.size(this.elementData)-1;
    @ ensures daikon.Quant.size(javautil.ArrayList17.EMPTY_ELEMENTDATA) < \old(daikon.Quant.size(this.elementData))-1;
    @ ensures daikon.Quant.size(this.elementData) >= \old(daikon.Quant.size(this.elementData));
    @ ensures daikon.Quant.size(this.elementData)-1 != \old(daikon.Quant.size(this.elementData));
    @ ensures daikon.Quant.size(this.elementData)-1 >= \old(daikon.Quant.size(this.elementData))-1;
    @*/
    /**
     * Appends the specified element to the end of this list.
     *
     * @param e element to be appended to this list
     * @return <tt>true</tt> (as specified by {@link Collection#add})
     */
    public boolean add(E e) {
        ensureCapacityInternal(size + 1);  // Increments modCount!!
        elementData[size++] = e;
        return true;
    }

    /*@
    @ public normal_behavior // Generated by Daikon
    @ requires true;
    @*/
    /**
     * Inserts the specified element at the specified position in this
     * list. Shifts the element currently at that position (if any) and
     * any subsequent elements to the right (adds one to their indices).
     *
     * @param index index at which the specified element is to be inserted
     * @param element element to be inserted
     * @throws IndexOutOfBoundsException {@inheritDoc}
     */
    public void add(int index, E element) {
        rangeCheckForAdd(index);

        ensureCapacityInternal(size + 1);  // Increments modCount!!
        System.arraycopy(elementData, index, elementData, index + 1,
                         size - index);
        elementData[index] = element;
        size++;
    }

    /*@
    @ also
    @ public normal_behavior // Generated by Daikon
    @ requires this != null;
    @ requires this.elementData != null;
    @ requires index % 3 == 0;
    @ requires daikon.Quant.size(this.elementData) == 109;
    @ requires 3 * this.size - 3 * index - 201 == 0;
    @ requires this.size > daikon.Quant.size(javautil.ArrayList17.EMPTY_ELEMENTDATA);
    @ requires this.size < daikon.Quant.size(this.elementData)-1;
    @ requires index > daikon.Quant.size(javautil.ArrayList17.EMPTY_ELEMENTDATA);
    @ requires index < daikon.Quant.size(this.elementData)-1;
    @ requires daikon.Quant.eltsEqual(daikon.Quant.slice(this.elementData, this.size, daikon.Quant.size(this.elementData)), daikon.Quant.getElement_Object(this.elementData, this.size));
    @ requires daikon.Quant.size(javautil.ArrayList17.EMPTY_ELEMENTDATA) == (java.lang.Math.pow(daikon.Quant.size(this.elementData)-1, this.size));
    @ ensures javautil.ArrayList17.EMPTY_ELEMENTDATA == \old(javautil.ArrayList17.EMPTY_ELEMENTDATA);
    @ ensures javautil.ArrayList17.EMPTY_ELEMENTDATA.getClass().getName() == \old(javautil.ArrayList17.EMPTY_ELEMENTDATA.getClass().getName());
    @ ensures javautil.ArrayList17.EMPTY_ELEMENTDATA.getClass().getName() == \old(this.elementData.getClass().getName());
    @ ensures daikon.Quant.pairwiseEqual(javautil.ArrayList17.EMPTY_ELEMENTDATA, \old(javautil.ArrayList17.EMPTY_ELEMENTDATA));
    @ ensures this.elementData == \old(this.elementData);
    @ ensures daikon.Quant.size(this.elementData) == \old(daikon.Quant.size(this.elementData));
    @ ensures daikon.Quant.getElement_Object(this.elementData, this.size) == daikon.Quant.getElement_Object(this.elementData, \old(this.size));
    @ ensures daikon.Quant.getElement_Object(this.elementData, this.size) == daikon.Quant.getElement_Object(this.elementData, \old(this.size)-1);
    @ ensures daikon.Quant.getElement_Object(this.elementData, this.size) == \old(daikon.Quant.getElement_Object(this.elementData, this.size));
    @ ensures daikon.Quant.pairwiseEqual(daikon.Quant.slice(this.elementData, this.size+1, daikon.Quant.size(this.elementData)), \old(daikon.Quant.slice(this.elementData, this.size, daikon.Quant.size(this.elementData))));
    @ ensures daikon.Quant.pairwiseEqual(daikon.Quant.slice(this.elementData, \old(this.size)+1, daikon.Quant.size(this.elementData)), \old(daikon.Quant.slice(this.elementData, this.size+1, daikon.Quant.size(this.elementData))));
    @ ensures daikon.Quant.getElement_Object(this.elementData, \old(index)-1) == \old(daikon.Quant.getElement_Object(this.elementData, index-1));
    @ ensures daikon.Quant.pairwiseEqual(daikon.Quant.slice(this.elementData, 0, \old(index)-1), \old(daikon.Quant.slice(this.elementData, 0, index-1)));
    @ ensures this.elementData != null;
    @ ensures \result != null;
    @ ensures \result.getClass().getName() == java.lang.Integer.class.getName();
    @ ensures daikon.Quant.size(this.elementData) == 109;
    @ ensures daikon.Quant.getElement_Object(this.elementData, this.size-1) != null;
    @ ensures javautil.ArrayList17.EMPTY_ELEMENTDATA.getClass().getName() != \result.getClass().getName();
    @ ensures daikon.Quant.subsetOf(this.elementData, \old(this.elementData));
    @ ensures daikon.Quant.subsetOf(this.elementData, \old(daikon.Quant.slice(this.elementData, 0, this.size)));
    @ ensures this.size - \old(this.size) + 1 == 0;
    @ ensures 3 * this.size - \old(index) - 198 == 0;
    @ ensures this.size >= \old(index);
    @ ensures this.size > daikon.Quant.size(javautil.ArrayList17.EMPTY_ELEMENTDATA);
    @ ensures this.size < daikon.Quant.size(this.elementData)-1;
    @ ensures this.modCount - \old(this.modCount) - 1 == 0;
    @ ensures \old(this.size) > daikon.Quant.size(javautil.ArrayList17.EMPTY_ELEMENTDATA);
    @ ensures \old(this.size) < daikon.Quant.size(this.elementData)-1;
    @ ensures \old(index) > daikon.Quant.size(javautil.ArrayList17.EMPTY_ELEMENTDATA);
    @ ensures \old(index) < daikon.Quant.size(this.elementData)-1;
    @ ensures daikon.Quant.eltsEqual(daikon.Quant.slice(this.elementData, this.size, daikon.Quant.size(this.elementData)), daikon.Quant.getElement_Object(this.elementData, this.size));
    @ ensures daikon.Quant.subsetOf(daikon.Quant.slice(this.elementData, this.size, daikon.Quant.size(this.elementData)), \old(daikon.Quant.slice(this.elementData, 0, this.size)));
    @ ensures daikon.Quant.subsetOf(daikon.Quant.slice(this.elementData, this.size, daikon.Quant.size(this.elementData)), \old(daikon.Quant.slice(this.elementData, index, daikon.Quant.size(this.elementData))));
    @ ensures daikon.Quant.subsetOf(daikon.Quant.slice(this.elementData, this.size, daikon.Quant.size(this.elementData)), \old(daikon.Quant.slice(this.elementData, index+1, daikon.Quant.size(this.elementData))));
    @ ensures daikon.Quant.subsetOf(daikon.Quant.slice(this.elementData, 0, this.size), \old(daikon.Quant.slice(this.elementData, 0, this.size)));
    @ ensures daikon.Quant.subsetOf(daikon.Quant.slice(this.elementData, 0, this.size-1), \old(daikon.Quant.slice(this.elementData, 0, this.size)));
    @ ensures daikon.Quant.subsetOf(daikon.Quant.slice(this.elementData, 0, \old(this.size)), \old(daikon.Quant.slice(this.elementData, 0, this.size)));
    @ ensures daikon.Quant.memberOf(daikon.Quant.getElement_Object(this.elementData, \old(index)) , \old(daikon.Quant.slice(this.elementData, index, daikon.Quant.size(this.elementData))) );
    @ ensures daikon.Quant.memberOf(daikon.Quant.getElement_Object(this.elementData, \old(index)) , \old(daikon.Quant.slice(this.elementData, index+1, daikon.Quant.size(this.elementData))) );
    @ ensures daikon.Quant.subsetOf(daikon.Quant.slice(this.elementData, \old(index), daikon.Quant.size(this.elementData)), \old(daikon.Quant.slice(this.elementData, 0, this.size)));
    @ ensures daikon.Quant.subsetOf(daikon.Quant.slice(this.elementData, \old(index), daikon.Quant.size(this.elementData)), \old(daikon.Quant.slice(this.elementData, index, daikon.Quant.size(this.elementData))));
    @ ensures daikon.Quant.subsetOf(daikon.Quant.slice(this.elementData, \old(index), daikon.Quant.size(this.elementData)), \old(daikon.Quant.slice(this.elementData, index+1, daikon.Quant.size(this.elementData))));
    @ ensures daikon.Quant.subsetOf(daikon.Quant.slice(this.elementData, \old(index)+1, daikon.Quant.size(this.elementData)), \old(daikon.Quant.slice(this.elementData, 0, this.size)));
    @ ensures daikon.Quant.subsetOf(daikon.Quant.slice(this.elementData, \old(index)+1, daikon.Quant.size(this.elementData)), \old(daikon.Quant.slice(this.elementData, index, daikon.Quant.size(this.elementData))));
    @ ensures daikon.Quant.subsetOf(daikon.Quant.slice(this.elementData, \old(index)+1, daikon.Quant.size(this.elementData)), \old(daikon.Quant.slice(this.elementData, index+1, daikon.Quant.size(this.elementData))));
    @ ensures daikon.Quant.subsetOf(daikon.Quant.slice(this.elementData, 0, \old(index)), \old(daikon.Quant.slice(this.elementData, 0, this.size)));
    @ ensures daikon.Quant.size(javautil.ArrayList17.EMPTY_ELEMENTDATA) == (java.lang.Math.pow(daikon.Quant.size(this.elementData)-1, this.size));
    @ ensures daikon.Quant.size(javautil.ArrayList17.EMPTY_ELEMENTDATA) == (java.lang.Math.pow(daikon.Quant.size(this.elementData)-1, \old(this.size)));
    @*/
    /**
     * Removes the element at the specified position in this list.
     * Shifts any subsequent elements to the left (subtracts one from their
     * indices).
     *
     * @param index the index of the element to be removed
     * @return the element that was removed from the list
     * @throws IndexOutOfBoundsException {@inheritDoc}
     */
    public E remove(int index) {
        rangeCheck(index);

        modCount++;
        E oldValue = elementData(index);

        int numMoved = size - index - 1;
        if (numMoved > 0)
            System.arraycopy(elementData, index+1, elementData, index,
                             numMoved);
        elementData[--size] = null; // clear to let GC do its work

        return oldValue;
    }

    /*@
    @ also
    @ public normal_behavior // Generated by Daikon
    @ requires true;
    @*/
    /**
     * Removes the first occurrence of the specified element from this list,
     * if it is present.  If the list does not contain the element, it is
     * unchanged.  More formally, removes the element with the lowest index
     * <tt>i</tt> such that
     * <tt>(o==null&nbsp;?&nbsp;get(i)==null&nbsp;:&nbsp;o.equals(get(i)))</tt>
     * (if such an element exists).  Returns <tt>true</tt> if this list
     * contained the specified element (or equivalently, if this list
     * changed as a result of the call).
     *
     * @param o element to be removed from this list, if present
     * @return <tt>true</tt> if this list contained the specified element
     */
    public boolean remove(Object o) {
        if (o == null) {
            for (int index = 0; index < size; index++)
                if (elementData[index] == null) {
                    fastRemove(index);
                    return true;
                }
        } else {
            for (int index = 0; index < size; index++)
                if (o.equals(elementData[index])) {
                    fastRemove(index);
                    return true;
                }
        }
        return false;
    }

    /*@
    @ private normal_behavior // Generated by Daikon
    @ requires true;
    @*/
    /*
     * Private remove method that skips bounds checking and does not
     * return the value removed.
     */
    private void fastRemove(int index) {
        modCount++;
        int numMoved = size - index - 1;
        if (numMoved > 0)
            System.arraycopy(elementData, index+1, elementData, index,
                             numMoved);
        elementData[--size] = null; // clear to let GC do its work
    }

    /*@
    @ also
    @ public normal_behavior // Generated by Daikon
    @ requires true;
    @*/
    /**
     * Removes all of the elements from this list.  The list will
     * be empty after this call returns.
     */
    public void clear() {
        modCount++;

        // clear to let GC do its work
        for (int i = 0; i < size; i++)
            elementData[i] = null;

        size = 0;
    }

    /*@
    @ public normal_behavior // Generated by Daikon
    @ requires true;
    @*/
    /**
     * Appends all of the elements in the specified collection to the end of
     * this list, in the order that they are returned by the
     * specified collection's Iterator.  The behavior of this operation is
     * undefined if the specified collection is modified while the operation
     * is in progress.  (This implies that the behavior of this call is
     * undefined if the specified collection is this list, and this
     * list is nonempty.)
     *
     * @param c collection containing elements to be added to this list
     * @return <tt>true</tt> if this list changed as a result of the call
     * @throws NullPointerException if the specified collection is null
     */
    public boolean addAll(Collection<? extends E> c) {
        Object[] a = c.toArray();
        int numNew = a.length;
        ensureCapacityInternal(size + numNew);  // Increments modCount
        System.arraycopy(a, 0, elementData, size, numNew);
        size += numNew;
        return numNew != 0;
    }

    /*@
    @ public normal_behavior // Generated by Daikon
    @ requires true;
    @*/
    /**
     * Inserts all of the elements in the specified collection into this
     * list, starting at the specified position.  Shifts the element
     * currently at that position (if any) and any subsequent elements to
     * the right (increases their indices).  The new elements will appear
     * in the list in the order that they are returned by the
     * specified collection's iterator.
     *
     * @param index index at which to insert the first element from the
     *              specified collection
     * @param c collection containing elements to be added to this list
     * @return <tt>true</tt> if this list changed as a result of the call
     * @throws IndexOutOfBoundsException {@inheritDoc}
     * @throws NullPointerException if the specified collection is null
     */
    public boolean addAll(int index, Collection<? extends E> c) {
        rangeCheckForAdd(index);

        Object[] a = c.toArray();
        int numNew = a.length;
        ensureCapacityInternal(size + numNew);  // Increments modCount

        int numMoved = size - index;
        if (numMoved > 0)
            System.arraycopy(elementData, index, elementData, index + numNew,
                             numMoved);

        System.arraycopy(a, 0, elementData, index, numNew);
        size += numNew;
        return numNew != 0;
    }

    /*@
    @ also
    @ protected normal_behavior // Generated by Daikon
    @ requires true;
    @*/
    /**
     * Removes from this list all of the elements whose index is between
     * {@code fromIndex}, inclusive, and {@code toIndex}, exclusive.
     * Shifts any succeeding elements to the left (reduces their index).
     * This call shortens the list by {@code (toIndex - fromIndex)} elements.
     * (If {@code toIndex==fromIndex}, this operation has no effect.)
     *
     * @throws IndexOutOfBoundsException if {@code fromIndex} or
     *         {@code toIndex} is out of range
     *         ({@code fromIndex < 0 ||
     *          fromIndex >= size() ||
     *          toIndex > size() ||
     *          toIndex < fromIndex})
     */
    protected void removeRange(int fromIndex, int toIndex) {
        modCount++;
        int numMoved = size - toIndex;
        System.arraycopy(elementData, toIndex, elementData, fromIndex,
                         numMoved);

        // clear to let GC do its work
        int newSize = size - (toIndex-fromIndex);
        for (int i = newSize; i < size; i++) {
            elementData[i] = null;
        }
        size = newSize;
    }

    /*@
    @ private normal_behavior // Generated by Daikon
    @ requires this != null;
    @ requires this.elementData != null;
    @ requires index % 3 == 0;
    @ requires daikon.Quant.size(this.elementData) == 109;
    @ requires 3 * this.size - index - 201 == 0;
    @ requires this.size > index;
    @ requires this.size > daikon.Quant.size(javautil.ArrayList17.EMPTY_ELEMENTDATA);
    @ requires this.size < daikon.Quant.size(this.elementData)-1;
    @ requires index > daikon.Quant.size(javautil.ArrayList17.EMPTY_ELEMENTDATA);
    @ requires index < daikon.Quant.size(this.elementData)-1;
    @ requires daikon.Quant.eltsEqual(daikon.Quant.slice(this.elementData, this.size, daikon.Quant.size(this.elementData)), daikon.Quant.getElement_Object(this.elementData, this.size));
    @ requires daikon.Quant.size(javautil.ArrayList17.EMPTY_ELEMENTDATA) == (java.lang.Math.pow(daikon.Quant.size(this.elementData)-1, this.size));
    @ ensures javautil.ArrayList17.EMPTY_ELEMENTDATA == \old(javautil.ArrayList17.EMPTY_ELEMENTDATA);
    @ ensures javautil.ArrayList17.EMPTY_ELEMENTDATA.getClass().getName() == \old(javautil.ArrayList17.EMPTY_ELEMENTDATA.getClass().getName());
    @ ensures javautil.ArrayList17.EMPTY_ELEMENTDATA.getClass().getName() == \old(this.elementData.getClass().getName());
    @ ensures daikon.Quant.pairwiseEqual(javautil.ArrayList17.EMPTY_ELEMENTDATA, \old(javautil.ArrayList17.EMPTY_ELEMENTDATA));
    @ ensures this.elementData == \old(this.elementData);
    @ ensures daikon.Quant.pairwiseEqual(this.elementData, \old(this.elementData));
    @ ensures this.size == \old(this.size);
    @ ensures this.modCount == \old(this.modCount);
    @ ensures this.elementData != null;
    @ ensures daikon.Quant.size(this.elementData) == 109;
    @ ensures 3 * this.size - \old(index) - 201 == 0;
    @ ensures this.size > \old(index);
    @ ensures this.size > daikon.Quant.size(javautil.ArrayList17.EMPTY_ELEMENTDATA);
    @ ensures this.size < daikon.Quant.size(this.elementData)-1;
    @ ensures \old(index) > daikon.Quant.size(javautil.ArrayList17.EMPTY_ELEMENTDATA);
    @ ensures \old(index) < daikon.Quant.size(this.elementData)-1;
    @ ensures daikon.Quant.eltsEqual(daikon.Quant.slice(this.elementData, this.size, daikon.Quant.size(this.elementData)), daikon.Quant.getElement_Object(this.elementData, this.size));
    @ ensures daikon.Quant.size(javautil.ArrayList17.EMPTY_ELEMENTDATA) == (java.lang.Math.pow(daikon.Quant.size(this.elementData)-1, this.size));
    @*/
    /**
     * Checks if the given index is in range.  If not, throws an appropriate
     * runtime exception.  This method does *not* check if the index is
     * negative: It is always used immediately prior to an array access,
     * which throws an ArrayIndexOutOfBoundsException if index is negative.
     */
    private void rangeCheck(int index) {
        if (index >= size)
            throw new IndexOutOfBoundsException(outOfBoundsMsg(index));
    }

    /*@
    @ also
    @ private normal_behavior // Generated by Daikon
    @ requires true;
    @*/
    /**
     * A version of rangeCheck used by add and addAll.
     */
    private void rangeCheckForAdd(int index) {
        if (index > size || index < 0)
            throw new IndexOutOfBoundsException(outOfBoundsMsg(index));
    }

    /*@
    @ also
    @ private normal_behavior // Generated by Daikon
    @ requires true;
    @*/
    /**
     * Constructs an IndexOutOfBoundsException detail message.
     * Of the many possible refactorings of the error handling code,
     * this "outlining" performs best with both server and client VMs.
     */
    private String outOfBoundsMsg(int index) {
        return "Index: "+index+", Size: "+size;
    }

    /*@
    @ public normal_behavior // Generated by Daikon
    @ requires true;
    @*/
    /**
     * Removes from this list all of its elements that are contained in the
     * specified collection.
     *
     * @param c collection containing elements to be removed from this list
     * @return {@code true} if this list changed as a result of the call
     * @throws ClassCastException if the class of an element of this list
     *         is incompatible with the specified collection
     * (<a href="Collection.html#optional-restrictions">optional</a>)
     * @throws NullPointerException if this list contains a null element and the
     *         specified collection does not permit null elements
     * (<a href="Collection.html#optional-restrictions">optional</a>),
     *         or if the specified collection is null
     * @see Collection#contains(Object)
     */
    public boolean removeAll(Collection<?> c) {
        return batchRemove(c, false);
    }

    /*@
    @ public normal_behavior // Generated by Daikon
    @ requires true;
    @*/
    /**
     * Retains only the elements in this list that are contained in the
     * specified collection.  In other words, removes from this list all
     * of its elements that are not contained in the specified collection.
     *
     * @param c collection containing elements to be retained in this list
     * @return {@code true} if this list changed as a result of the call
     * @throws ClassCastException if the class of an element of this list
     *         is incompatible with the specified collection
     * (<a href="Collection.html#optional-restrictions">optional</a>)
     * @throws NullPointerException if this list contains a null element and the
     *         specified collection does not permit null elements
     * (<a href="Collection.html#optional-restrictions">optional</a>),
     *         or if the specified collection is null
     * @see Collection#contains(Object)
     */
    public boolean retainAll(Collection<?> c) {
        return batchRemove(c, true);
    }

    /*@
    @ private normal_behavior // Generated by Daikon
    @ requires true;
    @*/
    private boolean batchRemove(Collection<?> c, boolean complement) {
        final Object[] elementData = this.elementData;
        int r = 0, w = 0;
        boolean modified = false;
        try {
            for (; r < size; r++)
                if (c.contains(elementData[r]) == complement)
                    elementData[w++] = elementData[r];
        } finally {
            // Preserve behavioral compatibility with AbstractCollection,
            // even if c.contains() throws.
            if (r != size) {
                System.arraycopy(elementData, r,
                                 elementData, w,
                                 size - r);
                w += size - r;
            }
            if (w != size) {
                // clear to let GC do its work
                for (int i = w; i < size; i++)
                    elementData[i] = null;
                modCount += size - w;
                size = w;
                modified = true;
            }
        }
        return modified;
    }

    /*@
    @ private normal_behavior // Generated by Daikon
    @ requires true;
    @*/
    /**
     * Save the state of the <tt>ArrayList</tt> instance to a stream (that
     * is, serialize it).
     *
     * @serialData The length of the array backing the <tt>ArrayList</tt>
     *             instance is emitted (int), followed by all of its elements
     *             (each an <tt>Object</tt>) in the proper order.
     */
    private void writeObject(java.io.ObjectOutputStream s)
        throws java.io.IOException{
        // Write out element count, and any hidden stuff
        int expectedModCount = modCount;
        s.defaultWriteObject();

        // Write out size as capacity for behavioural compatibility with clone()
        s.writeInt(size);

        // Write out all elements in the proper order.
        for (int i=0; i<size; i++) {
            s.writeObject(elementData[i]);
        }

        if (modCount != expectedModCount) {
            throw new ConcurrentModificationException();
        }
    }

    /*@
    @ private normal_behavior // Generated by Daikon
    @ requires true;
    @*/
    /**
     * Reconstitute the <tt>ArrayList</tt> instance from a stream (that is,
     * deserialize it).
     */
    private void readObject(java.io.ObjectInputStream s)
        throws java.io.IOException, ClassNotFoundException {
        elementData = EMPTY_ELEMENTDATA;

        // Read in size, and any hidden stuff
        s.defaultReadObject();

        // Read in capacity
        s.readInt(); // ignored

        if (size > 0) {
            // be like clone(), allocate array based upon size not capacity
            ensureCapacityInternal(size);

            Object[] a = elementData;
            // Read in all elements in the proper order.
            for (int i=0; i<size; i++) {
                a[i] = s.readObject();
            }
        }
    }

    /*@
    @ also
    @ public normal_behavior // Generated by Daikon
    @ requires true;
    @*/
    /**
     * Returns a list iterator over the elements in this list (in proper
     * sequence), starting at the specified position in the list.
     * The specified index indicates the first element that would be
     * returned by an initial call to {@link ListIterator#next next}.
     * An initial call to {@link ListIterator#previous previous} would
     * return the element with the specified index minus one.
     *
     * <p>The returned list iterator is <a href="#fail-fast"><i>fail-fast</i></a>.
     *
     * @throws IndexOutOfBoundsException {@inheritDoc}
     */
    public ListIterator<E> listIterator(int index) {
        if (index < 0 || index > size)
            throw new IndexOutOfBoundsException("Index: "+index);
        return new ListItr(index);
    }

    /*@
    @ also
    @ public normal_behavior // Generated by Daikon
    @ requires true;
    @*/
    /**
     * Returns a list iterator over the elements in this list (in proper
     * sequence).
     *
     * <p>The returned list iterator is <a href="#fail-fast"><i>fail-fast</i></a>.
     *
     * @see #listIterator(int)
     */
    public ListIterator<E> listIterator() {
        return new ListItr(0);
    }

    /*@
    @ also
    @ public normal_behavior // Generated by Daikon
    @ requires true;
    @*/
    /**
     * Returns an iterator over the elements in this list in proper sequence.
     *
     * <p>The returned iterator is <a href="#fail-fast"><i>fail-fast</i></a>.
     *
     * @return an iterator over the elements in this list in proper sequence
     */
    public Iterator<E> iterator() {
        return new Itr();
    }

    /**
     * An optimized version of AbstractList.Itr
     */
    private class Itr implements Iterator<E> {
        /*@ spec_public */ int cursor;       // index of next element to return
        /*@ spec_public */ int lastRet = -1; // index of last element returned; -1 if no such
        /*@ spec_public */ int expectedModCount = modCount;

        /*@
        @ also
        @ public normal_behavior // Generated by Daikon
        @ requires true;
        @*/
        public boolean hasNext() {
            return cursor != size;
        }

        /*@
        @ also
        @ public normal_behavior // Generated by Daikon
        @ requires true;
        @*/
        @SuppressWarnings("unchecked")
        public E next() {
            checkForComodification();
            int i = cursor;
            if (i >= size)
                throw new NoSuchElementException();
            Object[] elementData = ArrayList17.this.elementData;
            if (i >= elementData.length)
                throw new ConcurrentModificationException();
            cursor = i + 1;
            return (E) elementData[lastRet = i];
        }

        /*@
        @ also
        @ public normal_behavior // Generated by Daikon
        @ requires true;
        @*/
        public void remove() {
            if (lastRet < 0)
                throw new IllegalStateException();
            checkForComodification();

            try {
                ArrayList17.this.remove(lastRet);
                cursor = lastRet;
                lastRet = -1;
                expectedModCount = modCount;
            } catch (IndexOutOfBoundsException ex) {
                throw new ConcurrentModificationException();
            }
        }

        /*@
        @ private normal_behavior // Generated by Daikon
        @ requires true;
        @*/
        final void checkForComodification() {
            if (modCount != expectedModCount)
                throw new ConcurrentModificationException();
        }
    }

    /**
     * An optimized version of AbstractList.ListItr
     */
    private class ListItr extends Itr implements ListIterator<E> {
        /*@
        @ private normal_behavior // Generated by Daikon
        @ requires true;
        @*/
        ListItr(int index) {
            super();
            cursor = index;
        }

        /*@
        @ also
        @ public normal_behavior // Generated by Daikon
        @ requires true;
        @*/
        public boolean hasPrevious() {
            return cursor != 0;
        }

        /*@
        @ also
        @ public normal_behavior // Generated by Daikon
        @ requires true;
        @*/
        public int nextIndex() {
            return cursor;
        }

        /*@
        @ also
        @ public normal_behavior // Generated by Daikon
        @ requires true;
        @*/
        public int previousIndex() {
            return cursor - 1;
        }

        /*@
        @ also
        @ public normal_behavior // Generated by Daikon
        @ requires true;
        @*/
        @SuppressWarnings("unchecked")
        public E previous() {
            checkForComodification();
            int i = cursor - 1;
            if (i < 0)
                throw new NoSuchElementException();
            Object[] elementData = ArrayList17.this.elementData;
            if (i >= elementData.length)
                throw new ConcurrentModificationException();
            cursor = i;
            return (E) elementData[lastRet = i];
        }

        /*@
        @ public normal_behavior // Generated by Daikon
        @ requires true;
        @*/
        public void set(E e) {
            if (lastRet < 0)
                throw new IllegalStateException();
            checkForComodification();

            try {
                ArrayList17.this.set(lastRet, e);
            } catch (IndexOutOfBoundsException ex) {
                throw new ConcurrentModificationException();
            }
        }

        /*@
        @ public normal_behavior // Generated by Daikon
        @ requires true;
        @*/
        public void add(E e) {
            checkForComodification();

            try {
                int i = cursor;
                ArrayList17.this.add(i, e);
                cursor = i + 1;
                lastRet = -1;
                expectedModCount = modCount;
            } catch (IndexOutOfBoundsException ex) {
                throw new ConcurrentModificationException();
            }
        }
    }

    /*@
    @ also
    @ public normal_behavior // Generated by Daikon
    @ requires true;
    @*/
    /**
     * Returns a view of the portion of this list between the specified
     * {@code fromIndex}, inclusive, and {@code toIndex}, exclusive.  (If
     * {@code fromIndex} and {@code toIndex} are equal, the returned list is
     * empty.)  The returned list is backed by this list, so non-structural
     * changes in the returned list are reflected in this list, and vice-versa.
     * The returned list supports all of the optional list operations.
     *
     * <p>This method eliminates the need for explicit range operations (of
     * the sort that commonly exist for arrays).  Any operation that expects
     * a list can be used as a range operation by passing a subList view
     * instead of a whole list.  For example, the following idiom
     * removes a range of elements from a list:
     * <pre>
     *      list.subList(from, to).clear();
     * </pre>
     * Similar idioms may be constructed for {@link #indexOf(Object)} and
     * {@link #lastIndexOf(Object)}, and all of the algorithms in the
     * {@link Collections} class can be applied to a subList.
     *
     * <p>The semantics of the list returned by this method become undefined if
     * the backing list (i.e., this list) is <i>structurally modified</i> in
     * any way other than via the returned list.  (Structural modifications are
     * those that change the size of this list, or otherwise perturb it in such
     * a fashion that iterations in progress may yield incorrect results.)
     *
     * @throws IndexOutOfBoundsException {@inheritDoc}
     * @throws IllegalArgumentException {@inheritDoc}
     */
    public List<E> subList(int fromIndex, int toIndex) {
        subListRangeCheck(fromIndex, toIndex, size);
        return new SubList(this, 0, fromIndex, toIndex);
    }

    /*@
    @ private normal_behavior // Generated by Daikon
    @ requires true;
    @*/
    static void subListRangeCheck(int fromIndex, int toIndex, int size) {
        if (fromIndex < 0)
            throw new IndexOutOfBoundsException("fromIndex = " + fromIndex);
        if (toIndex > size)
            throw new IndexOutOfBoundsException("toIndex = " + toIndex);
        if (fromIndex > toIndex)
            throw new IllegalArgumentException("fromIndex(" + fromIndex +
                                               ") > toIndex(" + toIndex + ")");
    }

    private class SubList extends AbstractList17<E> implements RandomAccess {
        /*@ spec_public */ private final AbstractList17<E> parent;
        /*@ spec_public */ private final int parentOffset;
        /*@ spec_public */ private final int offset;
        /*@ spec_public */ int size;

        /*@
        @ private normal_behavior // Generated by Daikon
        @ requires true;
        @*/
        SubList(AbstractList17<E> parent,
                int offset, int fromIndex, int toIndex) {
            this.parent = parent;
            this.parentOffset = fromIndex;
            this.offset = offset + fromIndex;
            this.size = toIndex - fromIndex;
            this.modCount = ArrayList17.this.modCount;
        }

        /*@
        @ public normal_behavior // Generated by Daikon
        @ requires true;
        @*/
        public E set(int index, E e) {
            rangeCheck(index);
            checkForComodification();
            E oldValue = ArrayList17.this.elementData(offset + index);
            ArrayList17.this.elementData[offset + index] = e;
            return oldValue;
        }

        /*@
        @ also
        @ public normal_behavior // Generated by Daikon
        @ requires true;
        @*/
        public E get(int index) {
            rangeCheck(index);
            checkForComodification();
            return ArrayList17.this.elementData(offset + index);
        }

        /*@
        @ also
        @ public normal_behavior // Generated by Daikon
        @ requires true;
        @*/
        public int size() {
            checkForComodification();
            return this.size;
        }

        /*@
        @ public normal_behavior // Generated by Daikon
        @ requires true;
        @*/
        public void add(int index, E e) {
            rangeCheckForAdd(index);
            checkForComodification();
            parent.add(parentOffset + index, e);
            this.modCount = parent.modCount;
            this.size++;
        }

        /*@
        @ also
        @ public normal_behavior // Generated by Daikon
        @ requires true;
        @*/
        public E remove(int index) {
            rangeCheck(index);
            checkForComodification();
            E result = parent.remove(parentOffset + index);
            this.modCount = parent.modCount;
            this.size--;
            return result;
        }

        /*@
        @ also
        @ protected normal_behavior // Generated by Daikon
        @ requires true;
        @*/
        protected void removeRange(int fromIndex, int toIndex) {
            checkForComodification();
            parent.removeRange(parentOffset + fromIndex,
                               parentOffset + toIndex);
            this.modCount = parent.modCount;
            this.size -= toIndex - fromIndex;
        }

        /*@
        @ public normal_behavior // Generated by Daikon
        @ requires true;
        @*/
        public boolean addAll(Collection<? extends E> c) {
            return addAll(this.size, c);
        }

        /*@
        @ public normal_behavior // Generated by Daikon
        @ requires true;
        @*/
        public boolean addAll(int index, Collection<? extends E> c) {
            rangeCheckForAdd(index);
            int cSize = c.size();
            if (cSize==0)
                return false;

            checkForComodification();
            parent.addAll(parentOffset + index, c);
            this.modCount = parent.modCount;
            this.size += cSize;
            return true;
        }

        /*@
        @ also
        @ public normal_behavior // Generated by Daikon
        @ requires true;
        @*/
        public Iterator<E> iterator() {
            return listIterator();
        }

        /*@
        @ also
        @ public normal_behavior // Generated by Daikon
        @ requires true;
        @*/
        public ListIterator<E> listIterator(final int index) {
            checkForComodification();
            rangeCheckForAdd(index);
            final int offset = this.offset;

            return new ListIterator<E>() {
                /*@ spec_public */ int cursor = index;
                /*@ spec_public */ int lastRet = -1;
                /*@ spec_public */ int expectedModCount = ArrayList17.this.modCount;

                /*@
                @ public normal_behavior // Generated by Daikon
                @ requires true;
                @*/
                public boolean hasNext() {
                    return cursor != SubList.this.size;
                }

                /*@
                @ public normal_behavior // Generated by Daikon
                @ requires true;
                @*/
                @SuppressWarnings("unchecked")
                public E next() {
                    checkForComodification();
                    int i = cursor;
                    if (i >= SubList.this.size)
                        throw new NoSuchElementException();
                    Object[] elementData = ArrayList17.this.elementData;
                    if (offset + i >= elementData.length)
                        throw new ConcurrentModificationException();
                    cursor = i + 1;
                    return (E) elementData[offset + (lastRet = i)];
                }

                /*@
                @ public normal_behavior // Generated by Daikon
                @ requires true;
                @*/
                public boolean hasPrevious() {
                    return cursor != 0;
                }

                /*@
                @ public normal_behavior // Generated by Daikon
                @ requires true;
                @*/
                @SuppressWarnings("unchecked")
                public E previous() {
                    checkForComodification();
                    int i = cursor - 1;
                    if (i < 0)
                        throw new NoSuchElementException();
                    Object[] elementData = ArrayList17.this.elementData;
                    if (offset + i >= elementData.length)
                        throw new ConcurrentModificationException();
                    cursor = i;
                    return (E) elementData[offset + (lastRet = i)];
                }

                /*@
                @ public normal_behavior // Generated by Daikon
                @ requires true;
                @*/
                public int nextIndex() {
                    return cursor;
                }

                /*@
                @ public normal_behavior // Generated by Daikon
                @ requires true;
                @*/
                public int previousIndex() {
                    return cursor - 1;
                }

                /*@
                @ public normal_behavior // Generated by Daikon
                @ requires true;
                @*/
                public void remove() {
                    if (lastRet < 0)
                        throw new IllegalStateException();
                    checkForComodification();

                    try {
                        SubList.this.remove(lastRet);
                        cursor = lastRet;
                        lastRet = -1;
                        expectedModCount = ArrayList17.this.modCount;
                    } catch (IndexOutOfBoundsException ex) {
                        throw new ConcurrentModificationException();
                    }
                }

                /*@
                @ public normal_behavior // Generated by Daikon
                @ requires true;
                @*/
                public void set(E e) {
                    if (lastRet < 0)
                        throw new IllegalStateException();
                    checkForComodification();

                    try {
                        ArrayList17.this.set(offset + lastRet, e);
                    } catch (IndexOutOfBoundsException ex) {
                        throw new ConcurrentModificationException();
                    }
                }

                /*@
                @ public normal_behavior // Generated by Daikon
                @ requires true;
                @*/
                public void add(E e) {
                    checkForComodification();

                    try {
                        int i = cursor;
                        SubList.this.add(i, e);
                        cursor = i + 1;
                        lastRet = -1;
                        expectedModCount = ArrayList17.this.modCount;
                    } catch (IndexOutOfBoundsException ex) {
                        throw new ConcurrentModificationException();
                    }
                }

                /*@
                @ private normal_behavior // Generated by Daikon
                @ requires true;
                @*/
                final void checkForComodification() {
                    if (expectedModCount != ArrayList17.this.modCount)
                        throw new ConcurrentModificationException();
                }
            };
        }

        /*@
        @ also
        @ public normal_behavior // Generated by Daikon
        @ requires true;
        @*/
        public List<E> subList(int fromIndex, int toIndex) {
            subListRangeCheck(fromIndex, toIndex, size);
            return new SubList(this, offset, fromIndex, toIndex);
        }

        /*@
        @ private normal_behavior // Generated by Daikon
        @ requires true;
        @*/
        private void rangeCheck(int index) {
            if (index < 0 || index >= this.size)
                throw new IndexOutOfBoundsException(outOfBoundsMsg(index));
        }

        /*@
        @ also
        @ private normal_behavior // Generated by Daikon
        @ requires true;
        @*/
        private void rangeCheckForAdd(int index) {
            if (index < 0 || index > this.size)
                throw new IndexOutOfBoundsException(outOfBoundsMsg(index));
        }

        /*@
        @ also
        @ private normal_behavior // Generated by Daikon
        @ requires true;
        @*/
        private String outOfBoundsMsg(int index) {
            return "Index: "+index+", Size: "+this.size;
        }

        /*@
        @ private normal_behavior // Generated by Daikon
        @ requires true;
        @*/
        private void checkForComodification() {
            if (ArrayList17.this.modCount != this.modCount)
                throw new ConcurrentModificationException();
        }
    }
}
