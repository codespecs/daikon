===========================================================================
DataStructures.BinaryHeap:::CLASS
    Variables: DataStructures.BinaryHeap.DEFAULT_CAPACITY
===========================================================================
DataStructures.BinaryHeap:::OBJECT
    Variables: this DataStructures.BinaryHeap.DEFAULT_CAPACITY this.currentSize this.array this.array.getClass().getName() this.array[] this.array[].getClass().getName() size(this.array[]) size(this.array[])-1 this.array[this.currentSize] this.array[this.currentSize-1] this.array[this.currentSize..] this.array[this.currentSize+1..] this.array[0..this.currentSize] this.array[0..this.currentSize-1]
this != null
this.currentSize >= 0
this.array != null
this.array != null
this.array.getClass().getName() == DataStructures.Comparable[].class.getName()
daikon.Quant.size(this.array) == 101
daikon.Quant.noDups(daikon.Quant.slice(this.array, 0, this.currentSize))
this.currentSize <= daikon.Quant.size(this.array)-1
===========================================================================
DataStructures.BinaryHeap.BinaryHeap(int):::ENTER
    Variables: capacity
capacity == 100
===========================================================================
DataStructures.BinaryHeap.BinaryHeap(int):::EXIT
    Variables: this DataStructures.BinaryHeap.DEFAULT_CAPACITY this.currentSize this.array this.array.getClass().getName() this.array[] this.array[].getClass().getName() capacity orig(capacity) size(this.array[]) size(this.array[])-1 this.array[this.currentSize] this.array[this.currentSize-1] this.array[this.currentSize..] this.array[this.currentSize+1..] this.array[0..this.currentSize] this.array[0..this.currentSize-1] this.array[capacity] this.array[capacity-1] this.array[capacity..] this.array[capacity+1..] this.array[0..capacity] this.array[0..capacity-1] this.array[orig(capacity)] this.array[orig(capacity)-1] this.array[orig(capacity)..] this.array[orig(capacity)+1..] this.array[0..orig(capacity)] this.array[0..orig(capacity)-1]
\old(capacity) == daikon.Quant.size(this.array)-1
daikon.Quant.getElement_Object(this.array, this.currentSize) == daikon.Quant.getElement_Object(this.array, \old(capacity))
daikon.Quant.getElement_Object(this.array, this.currentSize) == daikon.Quant.getElement_Object(this.array, \old(capacity)-1)
this.currentSize == 0
("oneOf.java.jpp: SEQUENCE unimplemented" != null)
daikon.Quant.eltsEqual(this.array, null)
daikon.Quant.pairwiseEqual(daikon.Quant.typeArray(this.array), new String[] { null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null })
daikon.Quant.eltsEqual(daikon.Quant.typeArray(this.array), null)
("oneOf.java.jpp: SEQUENCE unimplemented" != null)
("oneOf.java.jpp: SEQUENCE unimplemented" != null)
("oneOf.java.jpp: SEQUENCE unimplemented" != null)
daikon.Quant.eltsEqual(this.array, daikon.Quant.getElement_Object(this.array, this.currentSize))
===========================================================================
DataStructures.BinaryHeap.deleteMin():::ENTER
    Variables: this DataStructures.BinaryHeap.DEFAULT_CAPACITY this.currentSize this.array this.array.getClass().getName() this.array[] this.array[].getClass().getName() size(this.array[]) size(this.array[])-1 this.array[this.currentSize] this.array[this.currentSize-1] this.array[this.currentSize..] this.array[this.currentSize+1..] this.array[0..this.currentSize] this.array[0..this.currentSize-1]
daikon.Quant.pairwiseEqual(daikon.Quant.typeArray(this.array), new String[] { null, "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", null })
daikon.Quant.getElement_Object(this.array, this.currentSize) != null
this.currentSize < daikon.Quant.size(this.array)-1
===========================================================================
DataStructures.BinaryHeap.deleteMin():::EXIT84
    Variables: this DataStructures.BinaryHeap.DEFAULT_CAPACITY this.currentSize this.array this.array.getClass().getName() this.array[] this.array[].getClass().getName() return return.getClass().getName() orig(this) orig(this.currentSize) orig(this.array) orig(this.array.getClass().getName()) orig(this.array[]) orig(this.array[].getClass().getName()) size(this.array[]) size(this.array[])-1 orig(size(this.array[])) orig(size(this.array[]))-1 this.array[this.currentSize] this.array[this.currentSize-1] this.array[this.currentSize..] this.array[this.currentSize+1..] this.array[0..this.currentSize] this.array[0..this.currentSize-1] orig(this.array[post(this.currentSize)]) orig(this.array[post(this.currentSize)-1]) orig(this.array[post(this.currentSize)..]) orig(this.array[post(this.currentSize)+1..]) orig(this.array[0..post(this.currentSize)]) orig(this.array[0..post(this.currentSize)-1]) this.array[orig(this.currentSize)] this.array[orig(this.currentSize)-1] this.array[orig(this.currentSize)..] this.array[orig(this.currentSize)+1..] this.array[0..orig(this.currentSize)] this.array[0..orig(this.currentSize)-1] orig(this.array[this.currentSize]) orig(this.array[this.currentSize-1]) orig(this.array[this.currentSize..]) orig(this.array[this.currentSize+1..]) orig(this.array[0..this.currentSize]) orig(this.array[0..this.currentSize-1])
assignable this.currentSize, this.array[*], this.array[this.currentSize], this.array[this.currentSize-1], this.array[this.currentSize+1..], this.array[0..this.currentSize], this.array[0..this.currentSize-1]
===========================================================================
DataStructures.BinaryHeap.deleteMin():::EXIT
    Variables: this DataStructures.BinaryHeap.DEFAULT_CAPACITY this.currentSize this.array this.array.getClass().getName() this.array[] this.array[].getClass().getName() return return.getClass().getName() orig(this) orig(this.currentSize) orig(this.array) orig(this.array.getClass().getName()) orig(this.array[]) orig(this.array[].getClass().getName()) size(this.array[]) size(this.array[])-1 orig(size(this.array[])) orig(size(this.array[]))-1 this.array[this.currentSize] this.array[this.currentSize-1] this.array[this.currentSize..] this.array[this.currentSize+1..] this.array[0..this.currentSize] this.array[0..this.currentSize-1] orig(this.array[post(this.currentSize)]) orig(this.array[post(this.currentSize)-1]) orig(this.array[post(this.currentSize)..]) orig(this.array[post(this.currentSize)+1..]) orig(this.array[0..post(this.currentSize)]) orig(this.array[0..post(this.currentSize)-1]) this.array[orig(this.currentSize)] this.array[orig(this.currentSize)-1] this.array[orig(this.currentSize)..] this.array[orig(this.currentSize)+1..] this.array[0..orig(this.currentSize)] this.array[0..orig(this.currentSize)-1] orig(this.array[this.currentSize]) orig(this.array[this.currentSize-1]) orig(this.array[this.currentSize..]) orig(this.array[this.currentSize+1..]) orig(this.array[0..this.currentSize]) orig(this.array[0..this.currentSize-1])
assignable this.currentSize, this.array[*], this.array[this.currentSize], this.array[this.currentSize-1], this.array[this.currentSize+1..], this.array[0..this.currentSize], this.array[0..this.currentSize-1]
this.array == \old(this.array)
this.array.getClass().getName() == \old(this.array.getClass().getName())
daikon.Quant.size(this.array) == \old(daikon.Quant.size(this.array))
daikon.Quant.getElement_Object(this.array, this.currentSize) == daikon.Quant.getElement_Object(this.array, \old(this.currentSize)-1)
daikon.Quant.pairwiseEqual(daikon.Quant.slice(this.array, this.currentSize+1, daikon.Quant.size(this.array)), \old(daikon.Quant.slice(this.array, \new(this.currentSize)+1, daikon.Quant.size(this.array))))
daikon.Quant.pairwiseEqual(daikon.Quant.slice(this.array, this.currentSize+1, daikon.Quant.size(this.array)), \old(daikon.Quant.slice(this.array, this.currentSize, daikon.Quant.size(this.array))))
\old(daikon.Quant.getElement_Object(this.array, \new(this.currentSize))) == \old(daikon.Quant.getElement_Object(this.array, this.currentSize-1))
daikon.Quant.getElement_Object(this.array, \old(this.currentSize)) == \old(daikon.Quant.getElement_Object(this.array, this.currentSize))
daikon.Quant.pairwiseEqual(daikon.Quant.slice(this.array, \old(this.currentSize)+1, daikon.Quant.size(this.array)), \old(daikon.Quant.slice(this.array, this.currentSize+1, daikon.Quant.size(this.array))))
daikon.Quant.pairwiseEqual(daikon.Quant.typeArray(this.array), new String[] { null, "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", null })
\result != null
\result.getClass().getName() == DataStructures.MyInteger.class.getName()
daikon.Quant.getElement_Object(this.array, \old(this.currentSize)) != null
this.currentSize - \old(this.currentSize) + 1 == 0
this.currentSize < daikon.Quant.size(this.array)-1
this.array.getClass().getName() != \result.getClass().getName()
daikon.Quant.subsetOf(this.array, \old(this.array))
daikon.Quant.memberOf(\old(daikon.Quant.getElement_Object(this.array, \new(this.currentSize))) , this.array )
daikon.Quant.memberOf(\result.getClass().getName() , daikon.Quant.typeArray(this.array) )
daikon.Quant.memberOf(\result , \old(this.array) )
daikon.Quant.memberOf(\result , \old(daikon.Quant.slice(this.array, 0, this.currentSize)) )
\old(this.currentSize) < daikon.Quant.size(this.array)-1
daikon.Quant.memberOf(daikon.Quant.getElement_Object(this.array, this.currentSize) , \old(daikon.Quant.slice(this.array, \new(this.currentSize), daikon.Quant.size(this.array))) )
daikon.Quant.memberOf(daikon.Quant.getElement_Object(this.array, this.currentSize) , \old(daikon.Quant.slice(this.array, 0, this.currentSize)) )
daikon.Quant.subsetOf(daikon.Quant.slice(this.array, this.currentSize, daikon.Quant.size(this.array)), \old(daikon.Quant.slice(this.array, \new(this.currentSize), daikon.Quant.size(this.array))))
daikon.Quant.subsetOf(daikon.Quant.slice(this.array, 0, this.currentSize), \old(daikon.Quant.slice(this.array, 0, this.currentSize)))
daikon.Quant.subsetOf(daikon.Quant.slice(this.array, 0, this.currentSize-1), \old(daikon.Quant.slice(this.array, 0, this.currentSize)))
daikon.Quant.subsetOf(daikon.Quant.slice(this.array, 0, \old(this.currentSize)), \old(daikon.Quant.slice(this.array, 0, this.currentSize)))
===========================================================================
DataStructures.BinaryHeap.findMin():::ENTER
    Variables: this DataStructures.BinaryHeap.DEFAULT_CAPACITY this.currentSize this.array this.array.getClass().getName() this.array[] this.array[].getClass().getName() size(this.array[]) size(this.array[])-1 this.array[this.currentSize] this.array[this.currentSize-1] this.array[this.currentSize..] this.array[this.currentSize+1..] this.array[0..this.currentSize] this.array[0..this.currentSize-1]
daikon.Quant.pairwiseEqual(daikon.Quant.typeArray(this.array), new String[] { null, "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", null })
daikon.Quant.getElement_Object(this.array, this.currentSize) != null
this.currentSize < daikon.Quant.size(this.array)-1
===========================================================================
DataStructures.BinaryHeap.findMin():::EXIT68
    Variables: this DataStructures.BinaryHeap.DEFAULT_CAPACITY this.currentSize this.array this.array.getClass().getName() this.array[] this.array[].getClass().getName() return return.getClass().getName() orig(this) orig(this.currentSize) orig(this.array) orig(this.array.getClass().getName()) orig(this.array[]) orig(this.array[].getClass().getName()) size(this.array[]) size(this.array[])-1 orig(size(this.array[])) orig(size(this.array[]))-1 this.array[this.currentSize] this.array[this.currentSize-1] this.array[this.currentSize..] this.array[this.currentSize+1..] this.array[0..this.currentSize] this.array[0..this.currentSize-1] orig(this.array[post(this.currentSize)]) orig(this.array[post(this.currentSize)-1]) orig(this.array[post(this.currentSize)..]) orig(this.array[post(this.currentSize)+1..]) orig(this.array[0..post(this.currentSize)]) orig(this.array[0..post(this.currentSize)-1]) this.array[orig(this.currentSize)] this.array[orig(this.currentSize)-1] this.array[orig(this.currentSize)..] this.array[orig(this.currentSize)+1..] this.array[0..orig(this.currentSize)] this.array[0..orig(this.currentSize)-1] orig(this.array[this.currentSize]) orig(this.array[this.currentSize-1]) orig(this.array[this.currentSize..]) orig(this.array[this.currentSize+1..]) orig(this.array[0..this.currentSize]) orig(this.array[0..this.currentSize-1])
===========================================================================
DataStructures.BinaryHeap.findMin():::EXIT
    Variables: this DataStructures.BinaryHeap.DEFAULT_CAPACITY this.currentSize this.array this.array.getClass().getName() this.array[] this.array[].getClass().getName() return return.getClass().getName() orig(this) orig(this.currentSize) orig(this.array) orig(this.array.getClass().getName()) orig(this.array[]) orig(this.array[].getClass().getName()) size(this.array[]) size(this.array[])-1 orig(size(this.array[])) orig(size(this.array[]))-1 this.array[this.currentSize] this.array[this.currentSize-1] this.array[this.currentSize..] this.array[this.currentSize+1..] this.array[0..this.currentSize] this.array[0..this.currentSize-1] orig(this.array[post(this.currentSize)]) orig(this.array[post(this.currentSize)-1]) orig(this.array[post(this.currentSize)..]) orig(this.array[post(this.currentSize)+1..]) orig(this.array[0..post(this.currentSize)]) orig(this.array[0..post(this.currentSize)-1]) this.array[orig(this.currentSize)] this.array[orig(this.currentSize)-1] this.array[orig(this.currentSize)..] this.array[orig(this.currentSize)+1..] this.array[0..orig(this.currentSize)] this.array[0..orig(this.currentSize)-1] orig(this.array[this.currentSize]) orig(this.array[this.currentSize-1]) orig(this.array[this.currentSize..]) orig(this.array[this.currentSize+1..]) orig(this.array[0..this.currentSize]) orig(this.array[0..this.currentSize-1])
this.currentSize == \old(this.currentSize)
this.array == \old(this.array)
this.array.getClass().getName() == \old(this.array.getClass().getName())
daikon.Quant.pairwiseEqual(this.array, \old(this.array))
daikon.Quant.pairwiseEqual(daikon.Quant.typeArray(this.array), new String[] { null, "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", null })
\result != null
\result.getClass().getName() == DataStructures.MyInteger.class.getName()
daikon.Quant.getElement_Object(this.array, this.currentSize) != null
this.currentSize < daikon.Quant.size(this.array)-1
this.array.getClass().getName() != \result.getClass().getName()
daikon.Quant.memberOf(\result , this.array )
daikon.Quant.memberOf(\result.getClass().getName() , daikon.Quant.typeArray(this.array) )
daikon.Quant.memberOf(\result , daikon.Quant.slice(this.array, 0, this.currentSize) )
===========================================================================
DataStructures.BinaryHeap.insert(DataStructures.Comparable):::ENTER
    Variables: this DataStructures.BinaryHeap.DEFAULT_CAPACITY this.currentSize this.array this.array.getClass().getName() this.array[] this.array[].getClass().getName() x x.getClass().getName() size(this.array[]) size(this.array[])-1 this.array[this.currentSize] this.array[this.currentSize-1] this.array[this.currentSize..] this.array[this.currentSize+1..] this.array[0..this.currentSize] this.array[0..this.currentSize-1]
x != null
x.getClass().getName() == DataStructures.MyInteger.class.getName()
this.currentSize < daikon.Quant.size(this.array)-1
this.array.getClass().getName() != x.getClass().getName()
===========================================================================
DataStructures.BinaryHeap.insert(DataStructures.Comparable):::EXIT
    Variables: this DataStructures.BinaryHeap.DEFAULT_CAPACITY this.currentSize this.array this.array.getClass().getName() this.array[] this.array[].getClass().getName() x x.getClass().getName() orig(this) orig(this.currentSize) orig(this.array) orig(this.array.getClass().getName()) orig(this.array[]) orig(this.array[].getClass().getName()) orig(x) orig(x.getClass().getName()) size(this.array[]) size(this.array[])-1 orig(size(this.array[])) orig(size(this.array[]))-1 this.array[this.currentSize] this.array[this.currentSize-1] this.array[this.currentSize..] this.array[this.currentSize+1..] this.array[0..this.currentSize] this.array[0..this.currentSize-1] orig(this.array[post(this.currentSize)]) orig(this.array[post(this.currentSize)-1]) orig(this.array[post(this.currentSize)..]) orig(this.array[post(this.currentSize)+1..]) orig(this.array[0..post(this.currentSize)]) orig(this.array[0..post(this.currentSize)-1]) this.array[orig(this.currentSize)] this.array[orig(this.currentSize)-1] this.array[orig(this.currentSize)..] this.array[orig(this.currentSize)+1..] this.array[0..orig(this.currentSize)] this.array[0..orig(this.currentSize)-1] orig(this.array[this.currentSize]) orig(this.array[this.currentSize-1]) orig(this.array[this.currentSize..]) orig(this.array[this.currentSize+1..]) orig(this.array[0..this.currentSize]) orig(this.array[0..this.currentSize-1])
assignable this.currentSize, this.array[*], this.array[this.currentSize], this.array[this.currentSize-1], this.array[this.currentSize..], this.array[this.currentSize+1..], this.array[0..this.currentSize], this.array[0..this.currentSize-1]
this.array == \old(this.array)
this.array.getClass().getName() == \old(this.array.getClass().getName())
daikon.Quant.size(this.array) == \old(daikon.Quant.size(this.array))
daikon.Quant.getElement_Object(this.array, this.currentSize-1) == \old(daikon.Quant.getElement_Object(this.array, \new(this.currentSize)-1))
daikon.Quant.getElement_Object(this.array, this.currentSize-1) == daikon.Quant.getElement_Object(this.array, \old(this.currentSize))
daikon.Quant.getElement_Object(this.array, this.currentSize-1) == \old(daikon.Quant.getElement_Object(this.array, this.currentSize))
daikon.Quant.pairwiseEqual(daikon.Quant.slice(this.array, this.currentSize+1, daikon.Quant.size(this.array)), \old(daikon.Quant.slice(this.array, \new(this.currentSize)+1, daikon.Quant.size(this.array))))
daikon.Quant.getElement_Object(this.array, this.currentSize) != null
this.currentSize - \old(this.currentSize) - 1 == 0
this.array.getClass().getName() != \old(x.getClass().getName())
daikon.Quant.memberOf(\old(x) , this.array )
daikon.Quant.memberOf(\old(x.getClass().getName()) , daikon.Quant.typeArray(this.array) )
\old(this.currentSize) < daikon.Quant.size(this.array)-1
daikon.Quant.memberOf(\old(x) , daikon.Quant.slice(this.array, 0, this.currentSize) )
===========================================================================
DataStructures.BinaryHeap.isEmpty():::ENTER
    Variables: this DataStructures.BinaryHeap.DEFAULT_CAPACITY this.currentSize this.array this.array.getClass().getName() this.array[] this.array[].getClass().getName() size(this.array[]) size(this.array[])-1 this.array[this.currentSize] this.array[this.currentSize-1] this.array[this.currentSize..] this.array[this.currentSize+1..] this.array[0..this.currentSize] this.array[0..this.currentSize-1]
daikon.Quant.pairwiseEqual(daikon.Quant.typeArray(this.array), new String[] { null, "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", null })
daikon.Quant.getElement_Object(this.array, this.currentSize) != null
this.currentSize < daikon.Quant.size(this.array)-1
===========================================================================
DataStructures.BinaryHeap.isEmpty():::EXIT
    Variables: this DataStructures.BinaryHeap.DEFAULT_CAPACITY this.currentSize this.array this.array.getClass().getName() this.array[] this.array[].getClass().getName() return orig(this) orig(this.currentSize) orig(this.array) orig(this.array.getClass().getName()) orig(this.array[]) orig(this.array[].getClass().getName()) size(this.array[]) size(this.array[])-1 orig(size(this.array[])) orig(size(this.array[]))-1 this.array[this.currentSize] this.array[this.currentSize-1] this.array[this.currentSize..] this.array[this.currentSize+1..] this.array[0..this.currentSize] this.array[0..this.currentSize-1] orig(this.array[post(this.currentSize)]) orig(this.array[post(this.currentSize)-1]) orig(this.array[post(this.currentSize)..]) orig(this.array[post(this.currentSize)+1..]) orig(this.array[0..post(this.currentSize)]) orig(this.array[0..post(this.currentSize)-1]) this.array[orig(this.currentSize)] this.array[orig(this.currentSize)-1] this.array[orig(this.currentSize)..] this.array[orig(this.currentSize)+1..] this.array[0..orig(this.currentSize)] this.array[0..orig(this.currentSize)-1] orig(this.array[this.currentSize]) orig(this.array[this.currentSize-1]) orig(this.array[this.currentSize..]) orig(this.array[this.currentSize+1..]) orig(this.array[0..this.currentSize]) orig(this.array[0..this.currentSize-1])
this.currentSize == \old(this.currentSize)
this.array == \old(this.array)
this.array.getClass().getName() == \old(this.array.getClass().getName())
daikon.Quant.pairwiseEqual(this.array, \old(this.array))
daikon.Quant.pairwiseEqual(daikon.Quant.typeArray(this.array), new String[] { null, "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", null })
\result == false
daikon.Quant.getElement_Object(this.array, this.currentSize) != null
this.currentSize < daikon.Quant.size(this.array)-1
===========================================================================
DataStructures.BinaryHeap.isFull():::ENTER
    Variables: this DataStructures.BinaryHeap.DEFAULT_CAPACITY this.currentSize this.array this.array.getClass().getName() this.array[] this.array[].getClass().getName() size(this.array[]) size(this.array[])-1 this.array[this.currentSize] this.array[this.currentSize-1] this.array[this.currentSize..] this.array[this.currentSize+1..] this.array[0..this.currentSize] this.array[0..this.currentSize-1]
===========================================================================
DataStructures.BinaryHeap.isFull():::EXIT
    Variables: this DataStructures.BinaryHeap.DEFAULT_CAPACITY this.currentSize this.array this.array.getClass().getName() this.array[] this.array[].getClass().getName() return orig(this) orig(this.currentSize) orig(this.array) orig(this.array.getClass().getName()) orig(this.array[]) orig(this.array[].getClass().getName()) size(this.array[]) size(this.array[])-1 orig(size(this.array[])) orig(size(this.array[]))-1 this.array[this.currentSize] this.array[this.currentSize-1] this.array[this.currentSize..] this.array[this.currentSize+1..] this.array[0..this.currentSize] this.array[0..this.currentSize-1] orig(this.array[post(this.currentSize)]) orig(this.array[post(this.currentSize)-1]) orig(this.array[post(this.currentSize)..]) orig(this.array[post(this.currentSize)+1..]) orig(this.array[0..post(this.currentSize)]) orig(this.array[0..post(this.currentSize)-1]) this.array[orig(this.currentSize)] this.array[orig(this.currentSize)-1] this.array[orig(this.currentSize)..] this.array[orig(this.currentSize)+1..] this.array[0..orig(this.currentSize)] this.array[0..orig(this.currentSize)-1] orig(this.array[this.currentSize]) orig(this.array[this.currentSize-1]) orig(this.array[this.currentSize..]) orig(this.array[this.currentSize+1..]) orig(this.array[0..this.currentSize]) orig(this.array[0..this.currentSize-1])
assignable this.array[this.currentSize-1]
this.currentSize == \old(this.currentSize)
this.array == \old(this.array)
this.array.getClass().getName() == \old(this.array.getClass().getName())
daikon.Quant.pairwiseEqual(this.array, \old(this.array))
(\result == false)  <==>  (this.currentSize < daikon.Quant.size(this.array)-1)
(\result == true)  <==>  (this.currentSize == daikon.Quant.size(this.array)-1)
(\result == true)  ==>  (\old(daikon.Quant.getElement_Object(this.array, \new(this.currentSize)-1)) != null)
(\result == true)  ==>  (\old(daikon.Quant.getElement_Object(this.array, this.currentSize-1)) != null)
(\result == true)  ==>  (("oneOf.java.jpp: SEQUENCE unimplemented" != null))
(\result == true)  ==>  (("oneOf.java.jpp: SEQUENCE unimplemented" != null))
(\result == true)  ==>  (("oneOf.java.jpp: SEQUENCE unimplemented" != null))
(\result == true)  ==>  (daikon.Quant.pairwiseEqual(daikon.Quant.typeArray(this.array), new String[] { null, "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger" }))
(\result == true)  ==>  (daikon.Quant.getElement_Object(this.array, \old(this.currentSize)-1) != null)
(\result == true)  ==>  (("oneOf.java.jpp: SEQUENCE unimplemented" != null))
(\result == true)  ==>  (daikon.Quant.getElement_Object(this.array, this.currentSize-1) != null)
(\result == true)  ==>  (("oneOf.java.jpp: SEQUENCE unimplemented" != null))
(\result == true)  ==>  (daikon.Quant.eltsEqual(daikon.Quant.slice(this.array, this.currentSize, daikon.Quant.size(this.array)), daikon.Quant.getElement_Object(this.array, this.currentSize)))
(\result == true)  ==>  (daikon.Quant.eltsNotEqual(daikon.Quant.slice(this.array, this.currentSize, daikon.Quant.size(this.array)), null))
===========================================================================
DataStructures.BinaryHeap.main(java.lang.String[]):::ENTER
    Variables: DataStructures.BinaryHeap.DEFAULT_CAPACITY args args.getClass().getName() args[] args[].toString size(args[]) size(args[])-1
args != null
args.getClass().getName() == java.lang.String[].class.getName()
("oneOf.java.jpp: SEQUENCE unimplemented" != null)
daikon.Quant.pairwiseEqual(daikon.Quant.collectObject(args, "toString()"), new String[] {  })
===========================================================================
DataStructures.BinaryHeap.main(java.lang.String[]):::EXIT
    Variables: DataStructures.BinaryHeap.DEFAULT_CAPACITY args args.getClass().getName() args[] args[].toString orig(args) orig(args.getClass().getName()) orig(args[]) orig(args[].toString) size(args[]) size(args[])-1 orig(size(args[])) orig(size(args[]))-1
daikon.Quant.pairwiseEqual(args, \old(args))
("oneOf.java.jpp: SEQUENCE unimplemented" != null)
daikon.Quant.pairwiseEqual(daikon.Quant.collectObject(args, "toString()"), new String[] {  })
===========================================================================
DataStructures.BinaryHeap.percolateDown(int):::ENTER
    Variables: this DataStructures.BinaryHeap.DEFAULT_CAPACITY this.currentSize this.array this.array.getClass().getName() this.array[] this.array[].getClass().getName() hole size(this.array[]) size(this.array[])-1 this.array[this.currentSize] this.array[this.currentSize-1] this.array[this.currentSize..] this.array[this.currentSize+1..] this.array[0..this.currentSize] this.array[0..this.currentSize-1] this.array[hole] this.array[hole-1] this.array[hole..] this.array[hole+1..] this.array[0..hole] this.array[0..hole-1]
daikon.Quant.pairwiseEqual(daikon.Quant.typeArray(this.array), new String[] { null, "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", null })
hole == 1
daikon.Quant.getElement_Object(this.array, hole) != null
daikon.Quant.noDups(daikon.Quant.slice(this.array, 0, hole))
("oneOf.java.jpp: SEQUENCE unimplemented" != null)
daikon.Quant.eltsEqual(daikon.Quant.slice(this.array, 0, hole-1), null)
this.currentSize < daikon.Quant.size(this.array)-1
daikon.Quant.eltsEqual(daikon.Quant.slice(this.array, 0, hole-1), daikon.Quant.getElement_Object(this.array, hole-1))
===========================================================================
DataStructures.BinaryHeap.percolateDown(int):::EXIT
    Variables: this DataStructures.BinaryHeap.DEFAULT_CAPACITY this.currentSize this.array this.array.getClass().getName() this.array[] this.array[].getClass().getName() hole orig(this) orig(this.currentSize) orig(this.array) orig(this.array.getClass().getName()) orig(this.array[]) orig(this.array[].getClass().getName()) orig(hole) size(this.array[]) size(this.array[])-1 orig(size(this.array[])) orig(size(this.array[]))-1 this.array[this.currentSize] this.array[this.currentSize-1] this.array[this.currentSize..] this.array[this.currentSize+1..] this.array[0..this.currentSize] this.array[0..this.currentSize-1] orig(this.array[post(this.currentSize)]) orig(this.array[post(this.currentSize)-1]) orig(this.array[post(this.currentSize)..]) orig(this.array[post(this.currentSize)+1..]) orig(this.array[0..post(this.currentSize)]) orig(this.array[0..post(this.currentSize)-1]) this.array[hole] this.array[hole-1] this.array[hole..] this.array[hole+1..] this.array[0..hole] this.array[0..hole-1] this.array[orig(this.currentSize)] this.array[orig(this.currentSize)-1] this.array[orig(this.currentSize)..] this.array[orig(this.currentSize)+1..] this.array[0..orig(this.currentSize)] this.array[0..orig(this.currentSize)-1] this.array[orig(hole)] this.array[orig(hole)-1] this.array[orig(hole)..] this.array[orig(hole)+1..] this.array[0..orig(hole)] this.array[0..orig(hole)-1] orig(this.array[post(hole)]) orig(this.array[post(hole)-1]) orig(this.array[post(hole)..]) orig(this.array[post(hole)+1..]) orig(this.array[0..post(hole)]) orig(this.array[0..post(hole)-1]) orig(this.array[this.currentSize]) orig(this.array[this.currentSize-1]) orig(this.array[this.currentSize..]) orig(this.array[this.currentSize+1..]) orig(this.array[0..this.currentSize]) orig(this.array[0..this.currentSize-1]) orig(this.array[hole]) orig(this.array[hole-1]) orig(this.array[hole..]) orig(this.array[hole+1..]) orig(this.array[0..hole]) orig(this.array[0..hole-1])
assignable this.array[*], this.array[this.currentSize], this.array[this.currentSize-1], this.array[this.currentSize..], this.array[0..this.currentSize], this.array[0..this.currentSize-1]
this.currentSize == \old(this.currentSize)
this.array == \old(this.array)
this.array.getClass().getName() == \old(this.array.getClass().getName())
daikon.Quant.size(this.array) == \old(daikon.Quant.size(this.array))
daikon.Quant.pairwiseEqual(daikon.Quant.slice(this.array, this.currentSize+1, daikon.Quant.size(this.array)), \old(daikon.Quant.slice(this.array, \new(this.currentSize)+1, daikon.Quant.size(this.array))))
daikon.Quant.pairwiseEqual(daikon.Quant.slice(this.array, this.currentSize+1, daikon.Quant.size(this.array)), \old(daikon.Quant.slice(this.array, this.currentSize+1, daikon.Quant.size(this.array))))
daikon.Quant.getElement_Object(this.array, \old(hole)-1) == \old(daikon.Quant.getElement_Object(this.array, hole-1))
daikon.Quant.pairwiseEqual(daikon.Quant.slice(this.array, 0, \old(hole)-1), \old(daikon.Quant.slice(this.array, 0, hole-1)))
daikon.Quant.pairwiseEqual(daikon.Quant.typeArray(this.array), new String[] { null, "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", null })
daikon.Quant.getElement_Object(this.array, \old(hole)) != null
("oneOf.java.jpp: SEQUENCE unimplemented" != null)
daikon.Quant.eltsEqual(daikon.Quant.slice(this.array, 0, \old(hole)-1), null)
\old(daikon.Quant.getElement_Object(this.array, \new(hole))) != null
daikon.Quant.noDups(\old(daikon.Quant.slice(this.array, 0, \new(hole))))
this.currentSize < daikon.Quant.size(this.array)-1
daikon.Quant.subsetOf(this.array, \old(this.array))
daikon.Quant.subsetOf(\old(this.array), this.array)
daikon.Quant.subsetOf(this.array, \old(daikon.Quant.slice(this.array, hole, daikon.Quant.size(this.array))))
daikon.Quant.subsetOf(this.array, \old(daikon.Quant.slice(this.array, hole+1, daikon.Quant.size(this.array))))
daikon.Quant.subsetOf(\old(this.array), daikon.Quant.slice(this.array, \old(hole), daikon.Quant.size(this.array)))
daikon.Quant.memberOf(daikon.Quant.getElement_Object(this.array, this.currentSize) , \old(daikon.Quant.slice(this.array, \new(hole), daikon.Quant.size(this.array))) )
daikon.Quant.memberOf(daikon.Quant.getElement_Object(this.array, this.currentSize) , \old(daikon.Quant.slice(this.array, this.currentSize, daikon.Quant.size(this.array))) )
daikon.Quant.memberOf(daikon.Quant.getElement_Object(this.array, this.currentSize) , \old(daikon.Quant.slice(this.array, 0, this.currentSize)) )
daikon.Quant.subsetOf(daikon.Quant.slice(this.array, this.currentSize, daikon.Quant.size(this.array)), \old(daikon.Quant.slice(this.array, \new(hole), daikon.Quant.size(this.array))))
daikon.Quant.subsetOf(daikon.Quant.slice(this.array, this.currentSize, daikon.Quant.size(this.array)), \old(daikon.Quant.slice(this.array, this.currentSize, daikon.Quant.size(this.array))))
daikon.Quant.subsetOf(daikon.Quant.slice(this.array, this.currentSize, daikon.Quant.size(this.array)), \old(daikon.Quant.slice(this.array, hole, daikon.Quant.size(this.array))))
daikon.Quant.subsetOf(daikon.Quant.slice(this.array, this.currentSize, daikon.Quant.size(this.array)), \old(daikon.Quant.slice(this.array, hole+1, daikon.Quant.size(this.array))))
daikon.Quant.memberOf(\old(daikon.Quant.getElement_Object(this.array, \new(hole)-1)) , daikon.Quant.slice(this.array, 0, this.currentSize) )
daikon.Quant.memberOf(\old(daikon.Quant.getElement_Object(this.array, this.currentSize)) , daikon.Quant.slice(this.array, 0, this.currentSize) )
daikon.Quant.subsetOf(daikon.Quant.slice(this.array, 0, this.currentSize), \old(daikon.Quant.slice(this.array, 0, this.currentSize)))
daikon.Quant.subsetOf(daikon.Quant.slice(this.array, 0, this.currentSize), \old(daikon.Quant.slice(this.array, hole, daikon.Quant.size(this.array))))
daikon.Quant.subsetOf(daikon.Quant.slice(this.array, 0, this.currentSize), \old(daikon.Quant.slice(this.array, hole+1, daikon.Quant.size(this.array))))
daikon.Quant.subsetOf(daikon.Quant.slice(this.array, 0, this.currentSize-1), \old(daikon.Quant.slice(this.array, 0, this.currentSize)))
daikon.Quant.subsetOf(daikon.Quant.slice(this.array, 0, this.currentSize-1), \old(daikon.Quant.slice(this.array, hole, daikon.Quant.size(this.array))))
daikon.Quant.subsetOf(daikon.Quant.slice(this.array, 0, this.currentSize-1), \old(daikon.Quant.slice(this.array, hole+1, daikon.Quant.size(this.array))))
daikon.Quant.memberOf(daikon.Quant.getElement_Object(this.array, \old(hole)) , \old(daikon.Quant.slice(this.array, 0, \new(hole))) )
daikon.Quant.eltsEqual(daikon.Quant.slice(this.array, 0, \old(hole)-1), daikon.Quant.getElement_Object(this.array, \old(hole)-1))
daikon.Quant.subsetOf(daikon.Quant.slice(this.array, \old(hole), daikon.Quant.size(this.array)), \old(daikon.Quant.slice(this.array, hole, daikon.Quant.size(this.array))))
daikon.Quant.subsetOf(daikon.Quant.slice(this.array, \old(hole), daikon.Quant.size(this.array)), \old(daikon.Quant.slice(this.array, hole+1, daikon.Quant.size(this.array))))
daikon.Quant.memberOf(\old(daikon.Quant.getElement_Object(this.array, \new(hole))) , daikon.Quant.slice(this.array, \old(hole)+1, daikon.Quant.size(this.array)) )
daikon.Quant.memberOf(\old(daikon.Quant.getElement_Object(this.array, \new(hole)-1)) , daikon.Quant.slice(this.array, \old(hole)+1, daikon.Quant.size(this.array)) )
daikon.Quant.memberOf(\old(daikon.Quant.getElement_Object(this.array, this.currentSize)) , daikon.Quant.slice(this.array, \old(hole)+1, daikon.Quant.size(this.array)) )
daikon.Quant.subsetOf(daikon.Quant.slice(this.array, \old(hole)+1, daikon.Quant.size(this.array)), \old(daikon.Quant.slice(this.array, hole, daikon.Quant.size(this.array))))
daikon.Quant.subsetOf(daikon.Quant.slice(this.array, \old(hole)+1, daikon.Quant.size(this.array)), \old(daikon.Quant.slice(this.array, hole+1, daikon.Quant.size(this.array))))
daikon.Quant.subsetOf(daikon.Quant.slice(this.array, 0, \old(hole)), \old(daikon.Quant.slice(this.array, 0, \new(hole))))
daikon.Quant.subsetOf(daikon.Quant.slice(this.array, 0, \old(hole)), \old(daikon.Quant.slice(this.array, hole, daikon.Quant.size(this.array))))
daikon.Quant.subsetOf(daikon.Quant.slice(this.array, 0, \old(hole)), \old(daikon.Quant.slice(this.array, hole+1, daikon.Quant.size(this.array))))
