===========================================================================
ExceptionHandling.DaikonAnalyseExceptions:::OBJECT
this has only one value
this.classVar >= 2
===========================================================================
ExceptionHandling.DaikonAnalyseExceptions.DaikonAnalyseExceptions():::EXIT
this.classVar == 42
===========================================================================
ExceptionHandling.DaikonAnalyseExceptions.testCase1(int):::ENTER
this.classVar == parameter
===========================================================================
ExceptionHandling.DaikonAnalyseExceptions.testCase1(int):::EXCEPTION
this == orig(this)
this.classVar == parameter
this.classVar == orig(this.classVar)
this.classVar == orig(parameter)
exception != null
exception.getClass().getName() == java.lang.Exception.class
===========================================================================
ExceptionHandling.DaikonAnalyseExceptions.testCase1(int):::EXCEPTION20
===========================================================================
ExceptionHandling.DaikonAnalyseExceptions.testCase1(int):::EXIT23
this.classVar == return
return == orig(this.classVar)
return == orig(parameter)
return == 0  (mod 2)
===========================================================================
ExceptionHandling.DaikonAnalyseExceptions.testCase1(int):::EXIT25
this.classVar == 1  (mod 2)
return == this.classVar**2
this.classVar < return
===========================================================================
ExceptionHandling.DaikonAnalyseExceptions.testCase1(int):::EXIT
this.classVar == orig(this.classVar)
this.classVar == orig(parameter)
(this.classVar == 0  (mod 2))  <==>  (this.classVar == return)
(this.classVar == 0  (mod 2))  ==>  (return == 0  (mod 2))
(this.classVar == 1  (mod 2))  <==>  (this.classVar < return)
(this.classVar == 1  (mod 2))  ==>  (return == this.classVar**2)
return % this.classVar == 0
this.classVar <= return
===========================================================================
ExceptionHandling.DaikonAnalyseExceptions.testCase2(int):::ENTER
this.classVar == parameter
===========================================================================
ExceptionHandling.DaikonAnalyseExceptions.testCase2(int):::EXCEPTION
this == orig(this)
this.classVar == parameter
this.classVar == orig(this.classVar)
this.classVar == orig(parameter)
exception.getClass().getName() == java.lang.ArithmeticException.class
===========================================================================
ExceptionHandling.DaikonAnalyseExceptions.testCase2(int):::EXCEPTIONUNCAUGHT
===========================================================================
ExceptionHandling.DaikonAnalyseExceptions.testCase2(int):::EXIT35
this.classVar == return
return == orig(this.classVar)
return == orig(parameter)
return == 0  (mod 2)
===========================================================================
ExceptionHandling.DaikonAnalyseExceptions.testCase2(int):::EXIT37
this.classVar == 1  (mod 2)
return == this.classVar**2
this.classVar < return
===========================================================================
ExceptionHandling.DaikonAnalyseExceptions.testCase2(int):::EXIT
this.classVar == orig(this.classVar)
this.classVar == orig(parameter)
(this.classVar == 0  (mod 2))  <==>  (this.classVar == return)
(this.classVar == 0  (mod 2))  ==>  (return == 0  (mod 2))
(this.classVar == 1  (mod 2))  <==>  (this.classVar < return)
(this.classVar == 1  (mod 2))  ==>  (return == this.classVar**2)
return % this.classVar == 0
this.classVar <= return
===========================================================================
ExceptionHandling.DaikonAnalyseExceptions.testCase3(int):::ENTER
this.classVar == parameter
===========================================================================
ExceptionHandling.DaikonAnalyseExceptions.testCase3(int):::EXIT46
this.classVar <= return
===========================================================================
ExceptionHandling.DaikonAnalyseExceptions.testCase3(int):::EXIT48
return == 0
===========================================================================
ExceptionHandling.DaikonAnalyseExceptions.testCase3(int):::EXIT
this.classVar == orig(this.classVar)
this.classVar == orig(parameter)
(return == 0)  ==>  (return is a pointer)
return >= 0
return % this.classVar == 0
===========================================================================
ExceptionHandling.DaikonAnalyseExceptions.testCase5(int):::ENTER
this.classVar == parameter
===========================================================================
ExceptionHandling.DaikonAnalyseExceptions.testCase5(int):::EXCEPTION
this == orig(this)
this.classVar == parameter
this.classVar == orig(this.classVar)
this.classVar == orig(parameter)
exception.getClass().getName() is printable
===========================================================================
ExceptionHandling.DaikonAnalyseExceptions.testCase5(int):::EXCEPTION80
exception.getClass().getName() == java.lang.Exception.class
===========================================================================
ExceptionHandling.DaikonAnalyseExceptions.testCase5(int):::EXCEPTIONUNCAUGHT
exception.getClass().getName() == java.lang.ArithmeticException.class
===========================================================================
ExceptionHandling.DaikonAnalyseExceptions.testCase5(int):::EXIT84
this.classVar == return
return == orig(this.classVar)
return == orig(parameter)
return == 0  (mod 2)
===========================================================================
ExceptionHandling.DaikonAnalyseExceptions.testCase5(int):::EXIT86
this.classVar == 1  (mod 2)
return == this.classVar**2
this.classVar < return
===========================================================================
ExceptionHandling.DaikonAnalyseExceptions.testCase5(int):::EXIT
this.classVar == orig(this.classVar)
this.classVar == orig(parameter)
(this.classVar == 0  (mod 2))  <==>  (this.classVar == return)
(this.classVar == 0  (mod 2))  ==>  (return == 0  (mod 2))
(this.classVar == 1  (mod 2))  <==>  (this.classVar < return)
(this.classVar == 1  (mod 2))  ==>  (return == this.classVar**2)
return % this.classVar == 0
this.classVar <= return
===========================================================================
ExceptionHandling.DaikonAnalyseExceptions.testCase6(int):::ENTER
this.classVar == parameter
===========================================================================
ExceptionHandling.DaikonAnalyseExceptions.testCase6(int):::EXCEPTION
this == orig(this)
this.classVar == parameter
this.classVar == orig(this.classVar)
this.classVar == orig(parameter)
exception.getClass().getName() == java.lang.Exception.class
===========================================================================
ExceptionHandling.DaikonAnalyseExceptions.testCase6(int):::EXCEPTION96
===========================================================================
ExceptionHandling.DaikonAnalyseExceptions.testCase6(int):::EXCEPTION99
===========================================================================
ExceptionHandling.DaikonAnalyseExceptions.testCase6(int):::EXIT102
this.classVar == return
return == orig(this.classVar)
return == orig(parameter)
return == 0  (mod 2)
===========================================================================
ExceptionHandling.DaikonAnalyseExceptions.testCase6(int):::EXIT104
this.classVar == 1  (mod 2)
return == this.classVar**2
this.classVar < return
===========================================================================
ExceptionHandling.DaikonAnalyseExceptions.testCase6(int):::EXIT
this.classVar == orig(this.classVar)
this.classVar == orig(parameter)
(this.classVar == 0  (mod 2))  <==>  (this.classVar == return)
(this.classVar == 0  (mod 2))  ==>  (return == 0  (mod 2))
(this.classVar == 1  (mod 2))  <==>  (this.classVar < return)
(this.classVar == 1  (mod 2))  ==>  (return == this.classVar**2)
return % this.classVar == 0
this.classVar <= return
