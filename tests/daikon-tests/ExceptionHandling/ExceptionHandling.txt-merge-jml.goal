package ExceptionHandling;

public class DaikonAnalyseExceptions {

  /*@ invariant this != null; */
  /*@ invariant this.classVar >= 2; */
  public int classVar = 42;

  /*@
  @ public normal_behavior // Generated by Daikon
  @ requires true;
  @*/
  public boolean isEvan(int parameter) {
    return ((parameter % 2) == 0);
  }

  /*@
  @ public normal_behavior // Generated by Daikon
  @ requires true;
  @*/
  public boolean isFiveTimes(int parameter) {
    return ((parameter % 5) == 0);
  }

  /*@
  @ public normal_behavior // Generated by Daikon
  @ requires this.classVar == parameter;
  @ ensures this.classVar == \old(this.classVar);
  @ ensures this.classVar == \old(parameter);
  @ ensures (this.classVar % 2 == 0)  <==>  (this.classVar == \result);
  @ ensures (this.classVar % 2 == 0)  ==>  (\result % 2 == 0);
  @ ensures (this.classVar % 2 == 1)  <==>  (this.classVar < \result);
  @ ensures (this.classVar % 2 == 1)  ==>  (\result == this.classVar*this.classVar);
  @ ensures \result % this.classVar == 0;
  @ ensures this.classVar <= \result;
  @ also
  @ public exceptional_behavior // Generated by Daikon
  @ requires this == \old(this);
  @ requires this.classVar == parameter;
  @ requires this.classVar == \old(this.classVar);
  @ requires this.classVar == \old(parameter);
  @ requires Exception != null;
  @ requires Exception.getClass().getName() == java.lang.Exception.class.getName();
  @*/
  /**
   * Throws one Exception.
   */
  public int testCase1(int parameter) throws Exception {
    if ((parameter % 5) == 0) {
      throw new Exception();
    }
    if ((parameter % 2) == 0) { //even
      return parameter;
    } else {
      return parameter * parameter;
    }
  }

  /*@
  @ public normal_behavior // Generated by Daikon
  @ requires this.classVar == parameter;
  @ ensures this.classVar == \old(this.classVar);
  @ ensures this.classVar == \old(parameter);
  @ ensures (this.classVar % 2 == 0)  <==>  (this.classVar == \result);
  @ ensures (this.classVar % 2 == 0)  ==>  (\result % 2 == 0);
  @ ensures (this.classVar % 2 == 1)  <==>  (this.classVar < \result);
  @ ensures (this.classVar % 2 == 1)  ==>  (\result == this.classVar*this.classVar);
  @ ensures \result % this.classVar == 0;
  @ ensures this.classVar <= \result;
  @ also
  @ public exceptional_behavior // Generated by Daikon
  @ requires this == \old(this);
  @ requires this.classVar == parameter;
  @ requires this.classVar == \old(this.classVar);
  @ requires this.classVar == \old(parameter);
  @ requires Exception.getClass().getName() == java.lang.ArithmeticException.class.getName();
  @*/
  /**
   * Throws one derivated Exception.
   */
  public int testCase2(int parameter) throws Exception {
    int x = 42 / (parameter % 5);
    if ((parameter % 2) == 0) { //even
      return parameter;
    } else {
      return parameter * parameter;
    }
  }

  /*@
  @ public normal_behavior // Generated by Daikon
  @ requires this.classVar == parameter;
  @ ensures this.classVar == \old(this.classVar);
  @ ensures this.classVar == \old(parameter);
  @ ensures (\result == 0)  ==>  (\result is a pointer);
  @ ensures \result >= 0;
  @ ensures \result % this.classVar == 0;
  @*/
  /**
   * Catches a derivated Exception.
   */
  public int testCase3(int parameter) {
    try {
      return testCase1(parameter);
    } catch (Exception e) {
      return 0;
    }
  }

  /*@
  @ public normal_behavior // Generated by Daikon
  @ requires true;
  @*/
  /**
   * Throws an Exception and one derivated Exception, which
   * are both be catched in the same Method.
   *
   * Creates an Exit-PPT and ThrowNN-PPT in the same call.
   *  --> error! dont call!
   */
  public int testCase4(int parameter) {
    try {
      if ((parameter % 5) == 0) {
        throw new Exception();
      }
      int x = 42 / (parameter % 5);
      if ((parameter % 2) == 0) {
        return parameter;
      } else {
        return parameter * parameter;
      }
    } catch (Exception e) {
      return 0;
    }
  }

  /*@
  @ public normal_behavior // Generated by Daikon
  @ requires this.classVar == parameter;
  @ ensures this.classVar == \old(this.classVar);
  @ ensures this.classVar == \old(parameter);
  @ ensures (this.classVar % 2 == 0)  <==>  (this.classVar == \result);
  @ ensures (this.classVar % 2 == 0)  ==>  (\result % 2 == 0);
  @ ensures (this.classVar % 2 == 1)  <==>  (this.classVar < \result);
  @ ensures (this.classVar % 2 == 1)  ==>  (\result == this.classVar*this.classVar);
  @ ensures \result % this.classVar == 0;
  @ ensures this.classVar <= \result;
  @ also
  @ public exceptional_behavior // Generated by Daikon
  @ requires this == \old(this);
  @ requires this.classVar == parameter;
  @ requires this.classVar == \old(this.classVar);
  @ requires this.classVar == \old(parameter);
  @*/
  /**
   * Throws an Exception and one derivated Exception,
   */
  public int testCase5(int parameter) throws Exception {
    if ((parameter % 5) == 0) {
      throw new Exception();
    }
    int x = 42 / (parameter % 6);
    if ((parameter % 2) == 0) { //even
      return parameter;
    } else {
      return parameter * parameter;
    }
  }

  /*@
  @ public normal_behavior // Generated by Daikon
  @ requires this.classVar == parameter;
  @ ensures this.classVar == \old(this.classVar);
  @ ensures this.classVar == \old(parameter);
  @ ensures (this.classVar % 2 == 0)  <==>  (this.classVar == \result);
  @ ensures (this.classVar % 2 == 0)  ==>  (\result % 2 == 0);
  @ ensures (this.classVar % 2 == 1)  <==>  (this.classVar < \result);
  @ ensures (this.classVar % 2 == 1)  ==>  (\result == this.classVar*this.classVar);
  @ ensures \result % this.classVar == 0;
  @ ensures this.classVar <= \result;
  @ also
  @ public exceptional_behavior // Generated by Daikon
  @ requires this == \old(this);
  @ requires this.classVar == parameter;
  @ requires this.classVar == \old(this.classVar);
  @ requires this.classVar == \old(parameter);
  @ requires Exception.getClass().getName() == java.lang.Exception.class.getName();
  @*/
  /**
   * Throws two Exceptions.
   * Creates Two THROWNN-PPTs.
   */
  public int testCase6(int parameter) throws Exception {
    if ((parameter % 5) == 0) {
      throw new Exception();
    }
    if ((parameter % 6) == 0) {
      throw new Exception();
    }
    if ((parameter % 2) == 0) { //even
      return parameter;
    } else {
      return parameter * parameter;
    }
  }

  ///**
  //* check the Valid of the new created Stackframe Table
  //*/
  //public int paratest(int i , int[] ia , Integer in, Integer[] inA, float flo, float[] floA, Float floa, Float[] floaA){
  ////        char cc = 'C';
  ////        int[] iii = {3,4,5};
  ////        int blub= 6;
  ////        Integer john = 45;
  ////        Integer[] huhu = {13,12};
  ////        float bu = 0.5f;
  ////        Float hehe = 4545.0f;
  ////        boolean b = true;
  ////        byte by = 0x4;
  ////        char c = 'C';
  ////        short s = 7;

  //for (int i1 = -2; i1 <= 2; i1++) {
  //i;
  //}
  //return  47;
  //}
}
