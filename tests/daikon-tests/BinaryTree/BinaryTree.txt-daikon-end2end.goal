===========================================================================
DataStructures.BinarySearchTree:::OBJECT
===========================================================================
DataStructures.BinarySearchTree.BinarySearchTree():::EXIT
this.root == null
===========================================================================
DataStructures.BinarySearchTree.elementAt(DataStructures.BinaryNode):::ENTER
(this.root == null)  ==>  (t == null)
(this.root == null)  ==>  (this.root == t)
===========================================================================
DataStructures.BinarySearchTree.elementAt(DataStructures.BinaryNode):::ENTER;condition="root == null"
this.root == t
this.root == null
===========================================================================
DataStructures.BinarySearchTree.elementAt(DataStructures.BinaryNode):::ENTER;condition="not(root == null)"
this.root != null
===========================================================================
DataStructures.BinarySearchTree.elementAt(DataStructures.BinaryNode):::ENTER;condition="isEmpty()"
this.root == t
this.root == null
===========================================================================
DataStructures.BinarySearchTree.elementAt(DataStructures.BinaryNode):::ENTER;condition="not(isEmpty())"
this.root != null
===========================================================================
DataStructures.BinarySearchTree.elementAt(DataStructures.BinaryNode):::EXIT
this.root == orig(this.root)
(this.root != null)  ==>  (return.getClass().getName() == DataStructures.MyInteger.class)
(this.root == null)  ==>  (orig(t) == null)
(this.root == null)  ==>  (return == null)
(this.root == null)  ==>  (this.root == orig(t))
return.getClass().getName() == DataStructures.MyInteger.class
===========================================================================
DataStructures.BinarySearchTree.elementAt(DataStructures.BinaryNode):::EXIT;condition="orig(root == null)"
this.root == orig(t)
this.root == null
return == null
===========================================================================
DataStructures.BinarySearchTree.elementAt(DataStructures.BinaryNode):::EXIT;condition="not(orig(root == null))"
this.root != null
===========================================================================
DataStructures.BinarySearchTree.elementAt(DataStructures.BinaryNode):::EXIT;condition="root == null"
this.root == orig(this.root)
this.root == orig(t)
this.root == null
return == null
===========================================================================
DataStructures.BinarySearchTree.elementAt(DataStructures.BinaryNode):::EXIT;condition="not(root == null)"
this.root == orig(this.root)
this.root != null
return.getClass().getName() == DataStructures.MyInteger.class
===========================================================================
DataStructures.BinarySearchTree.elementAt(DataStructures.BinaryNode):::EXIT;condition="isEmpty()"
this.root == orig(this.root)
this.root == orig(t)
this.root == null
return == null
===========================================================================
DataStructures.BinarySearchTree.elementAt(DataStructures.BinaryNode):::EXIT;condition="not(isEmpty())"
this.root == orig(this.root)
this.root != null
return.getClass().getName() == DataStructures.MyInteger.class
===========================================================================
DataStructures.BinarySearchTree.elementAt(DataStructures.BinaryNode):::EXIT;condition="orig(isEmpty())"
this.root == orig(this.root)
this.root == orig(t)
this.root == null
return == null
===========================================================================
DataStructures.BinarySearchTree.elementAt(DataStructures.BinaryNode):::EXIT;condition="not(orig(isEmpty()))"
this.root == orig(this.root)
this.root != null
return.getClass().getName() == DataStructures.MyInteger.class
===========================================================================
DataStructures.BinarySearchTree.find(DataStructures.Comparable):::ENTER
x != null
x.getClass().getName() == DataStructures.MyInteger.class
===========================================================================
DataStructures.BinarySearchTree.find(DataStructures.Comparable):::EXIT
this.root == orig(this.root)
return.getClass().getName() == orig(x.getClass().getName())
return.getClass().getName() == DataStructures.MyInteger.class
===========================================================================
DataStructures.BinarySearchTree.find(DataStructures.Comparable, DataStructures.BinaryNode):::ENTER
(this.root == null)  ==>  (t == null)
(this.root == null)  ==>  (this.root == t)
x != null
x.getClass().getName() == DataStructures.MyInteger.class
===========================================================================
DataStructures.BinarySearchTree.find(DataStructures.Comparable, DataStructures.BinaryNode):::ENTER;condition="root == null"
this.root == t
this.root == null
===========================================================================
DataStructures.BinarySearchTree.find(DataStructures.Comparable, DataStructures.BinaryNode):::ENTER;condition="not(root == null)"
this.root != null
===========================================================================
DataStructures.BinarySearchTree.find(DataStructures.Comparable, DataStructures.BinaryNode):::ENTER;condition="isEmpty()"
this.root == t
this.root == null
x != null
x.getClass().getName() == DataStructures.MyInteger.class
===========================================================================
DataStructures.BinarySearchTree.find(DataStructures.Comparable, DataStructures.BinaryNode):::ENTER;condition="not(isEmpty())"
this.root != null
x != null
x.getClass().getName() == DataStructures.MyInteger.class
===========================================================================
DataStructures.BinarySearchTree.find(DataStructures.Comparable, DataStructures.BinaryNode):::EXIT196
return == orig(t)
(this.root == null)  ==>  (this.root == return)
return == null
===========================================================================
DataStructures.BinarySearchTree.find(DataStructures.Comparable, DataStructures.BinaryNode):::EXIT196;condition="orig(root == null)"
===========================================================================
DataStructures.BinarySearchTree.find(DataStructures.Comparable, DataStructures.BinaryNode):::EXIT196;condition="not(orig(root == null))"
===========================================================================
DataStructures.BinarySearchTree.find(DataStructures.Comparable, DataStructures.BinaryNode):::EXIT196;condition="root == null"
===========================================================================
DataStructures.BinarySearchTree.find(DataStructures.Comparable, DataStructures.BinaryNode):::EXIT196;condition="not(root == null)"
return == orig(t)
return == null
===========================================================================
DataStructures.BinarySearchTree.find(DataStructures.Comparable, DataStructures.BinaryNode):::EXIT196;condition="isEmpty()"
===========================================================================
DataStructures.BinarySearchTree.find(DataStructures.Comparable, DataStructures.BinaryNode):::EXIT196;condition="not(isEmpty())"
return == orig(t)
return == null
===========================================================================
DataStructures.BinarySearchTree.find(DataStructures.Comparable, DataStructures.BinaryNode):::EXIT196;condition="orig(isEmpty())"
===========================================================================
DataStructures.BinarySearchTree.find(DataStructures.Comparable, DataStructures.BinaryNode):::EXIT196;condition="not(orig(isEmpty()))"
return == orig(t)
return == null
===========================================================================
DataStructures.BinarySearchTree.find(DataStructures.Comparable, DataStructures.BinaryNode):::EXIT198
this.root != null
orig(t) != null
===========================================================================
DataStructures.BinarySearchTree.find(DataStructures.Comparable, DataStructures.BinaryNode):::EXIT198;condition="not(orig(root == null))"
===========================================================================
DataStructures.BinarySearchTree.find(DataStructures.Comparable, DataStructures.BinaryNode):::EXIT198;condition="not(root == null)"
orig(t) != null
===========================================================================
DataStructures.BinarySearchTree.find(DataStructures.Comparable, DataStructures.BinaryNode):::EXIT198;condition="not(isEmpty())"
orig(t) != null
===========================================================================
DataStructures.BinarySearchTree.find(DataStructures.Comparable, DataStructures.BinaryNode):::EXIT198;condition="not(orig(isEmpty()))"
orig(t) != null
===========================================================================
DataStructures.BinarySearchTree.find(DataStructures.Comparable, DataStructures.BinaryNode):::EXIT200
this.root != null
orig(t) != null
===========================================================================
DataStructures.BinarySearchTree.find(DataStructures.Comparable, DataStructures.BinaryNode):::EXIT200;condition="not(orig(root == null))"
===========================================================================
DataStructures.BinarySearchTree.find(DataStructures.Comparable, DataStructures.BinaryNode):::EXIT200;condition="not(root == null)"
orig(t) != null
===========================================================================
DataStructures.BinarySearchTree.find(DataStructures.Comparable, DataStructures.BinaryNode):::EXIT200;condition="not(isEmpty())"
orig(t) != null
===========================================================================
DataStructures.BinarySearchTree.find(DataStructures.Comparable, DataStructures.BinaryNode):::EXIT200;condition="not(orig(isEmpty()))"
orig(t) != null
===========================================================================
DataStructures.BinarySearchTree.find(DataStructures.Comparable, DataStructures.BinaryNode):::EXIT202
return == orig(t)
this.root != null
return != null
===========================================================================
DataStructures.BinarySearchTree.find(DataStructures.Comparable, DataStructures.BinaryNode):::EXIT202;condition="not(orig(root == null))"
===========================================================================
DataStructures.BinarySearchTree.find(DataStructures.Comparable, DataStructures.BinaryNode):::EXIT202;condition="not(root == null)"
return == orig(t)
return != null
===========================================================================
DataStructures.BinarySearchTree.find(DataStructures.Comparable, DataStructures.BinaryNode):::EXIT202;condition="not(isEmpty())"
return == orig(t)
return != null
===========================================================================
DataStructures.BinarySearchTree.find(DataStructures.Comparable, DataStructures.BinaryNode):::EXIT202;condition="not(orig(isEmpty()))"
return == orig(t)
return != null
===========================================================================
DataStructures.BinarySearchTree.find(DataStructures.Comparable, DataStructures.BinaryNode):::EXIT
this.root == orig(this.root)
(this.root == null)  ==>  (orig(t) == null)
(this.root == null)  ==>  (return == null)
(this.root == null)  ==>  (return == orig(t))
(this.root == null)  ==>  (this.root == return)
===========================================================================
DataStructures.BinarySearchTree.find(DataStructures.Comparable, DataStructures.BinaryNode):::EXIT;condition="orig(root == null)"
this.root == return
return == orig(this.root)
return == orig(t)
return == null
===========================================================================
DataStructures.BinarySearchTree.find(DataStructures.Comparable, DataStructures.BinaryNode):::EXIT;condition="not(orig(root == null))"
this.root != null
===========================================================================
DataStructures.BinarySearchTree.find(DataStructures.Comparable, DataStructures.BinaryNode):::EXIT;condition="root == null"
this.root == return
return == orig(this.root)
return == orig(t)
return == null
===========================================================================
DataStructures.BinarySearchTree.find(DataStructures.Comparable, DataStructures.BinaryNode):::EXIT;condition="not(root == null)"
this.root == orig(this.root)
this.root != null
===========================================================================
DataStructures.BinarySearchTree.find(DataStructures.Comparable, DataStructures.BinaryNode):::EXIT;condition="isEmpty()"
this.root == return
return == orig(this.root)
return == orig(t)
return == null
===========================================================================
DataStructures.BinarySearchTree.find(DataStructures.Comparable, DataStructures.BinaryNode):::EXIT;condition="not(isEmpty())"
this.root == orig(this.root)
this.root != null
===========================================================================
DataStructures.BinarySearchTree.find(DataStructures.Comparable, DataStructures.BinaryNode):::EXIT;condition="orig(isEmpty())"
this.root == return
return == orig(this.root)
return == orig(t)
return == null
orig(x) != null
orig(x.getClass().getName()) == DataStructures.MyInteger.class
===========================================================================
DataStructures.BinarySearchTree.find(DataStructures.Comparable, DataStructures.BinaryNode):::EXIT;condition="not(orig(isEmpty()))"
this.root == orig(this.root)
this.root != null
orig(x) != null
orig(x.getClass().getName()) == DataStructures.MyInteger.class
===========================================================================
DataStructures.BinarySearchTree.findMax():::ENTER
===========================================================================
DataStructures.BinarySearchTree.findMax():::EXIT
this.root == orig(this.root)
return.getClass().getName() == DataStructures.MyInteger.class
===========================================================================
DataStructures.BinarySearchTree.findMax(DataStructures.BinaryNode):::ENTER
this.root == t
===========================================================================
DataStructures.BinarySearchTree.findMax(DataStructures.BinaryNode):::ENTER;condition="root == null"
this.root == null
===========================================================================
DataStructures.BinarySearchTree.findMax(DataStructures.BinaryNode):::ENTER;condition="not(root == null)"
this.root != null
===========================================================================
DataStructures.BinarySearchTree.findMax(DataStructures.BinaryNode):::ENTER;condition="isEmpty()"
this.root == t
this.root == null
===========================================================================
DataStructures.BinarySearchTree.findMax(DataStructures.BinaryNode):::ENTER;condition="not(isEmpty())"
this.root == t
this.root != null
===========================================================================
DataStructures.BinarySearchTree.findMax(DataStructures.BinaryNode):::EXIT
this.root == orig(this.root)
this.root == orig(t)
(this.root != null)  <==>  (return != null)
(this.root == null)  <==>  (return == null)
(this.root == null)  ==>  (this.root == return)
===========================================================================
DataStructures.BinarySearchTree.findMax(DataStructures.BinaryNode):::EXIT;condition="orig(root == null)"
this.root == return
return == orig(this.root)
return == orig(t)
return == null
===========================================================================
DataStructures.BinarySearchTree.findMax(DataStructures.BinaryNode):::EXIT;condition="not(orig(root == null))"
this.root != null
return != null
===========================================================================
DataStructures.BinarySearchTree.findMax(DataStructures.BinaryNode):::EXIT;condition="root == null"
this.root == return
return == orig(this.root)
return == orig(t)
return == null
===========================================================================
DataStructures.BinarySearchTree.findMax(DataStructures.BinaryNode):::EXIT;condition="not(root == null)"
this.root == orig(this.root)
this.root == orig(t)
this.root != null
return != null
===========================================================================
DataStructures.BinarySearchTree.findMax(DataStructures.BinaryNode):::EXIT;condition="isEmpty()"
this.root == return
return == orig(this.root)
return == orig(t)
return == null
===========================================================================
DataStructures.BinarySearchTree.findMax(DataStructures.BinaryNode):::EXIT;condition="not(isEmpty())"
this.root == orig(this.root)
this.root == orig(t)
this.root != null
return != null
===========================================================================
DataStructures.BinarySearchTree.findMax(DataStructures.BinaryNode):::EXIT;condition="orig(isEmpty())"
this.root == return
return == orig(this.root)
return == orig(t)
return == null
===========================================================================
DataStructures.BinarySearchTree.findMax(DataStructures.BinaryNode):::EXIT;condition="not(orig(isEmpty()))"
this.root == orig(this.root)
this.root == orig(t)
this.root != null
return != null
===========================================================================
DataStructures.BinarySearchTree.findMin():::ENTER
===========================================================================
DataStructures.BinarySearchTree.findMin():::EXIT
this.root == orig(this.root)
return.getClass().getName() == DataStructures.MyInteger.class
===========================================================================
DataStructures.BinarySearchTree.findMin(DataStructures.BinaryNode):::ENTER
(this.root != null)  <==>  (t != null)
(this.root == null)  <==>  (t == null)
(this.root == null)  ==>  (this.root == t)
===========================================================================
DataStructures.BinarySearchTree.findMin(DataStructures.BinaryNode):::ENTER;condition="root == null"
this.root == t
this.root == null
===========================================================================
DataStructures.BinarySearchTree.findMin(DataStructures.BinaryNode):::ENTER;condition="not(root == null)"
this.root != null
t != null
===========================================================================
DataStructures.BinarySearchTree.findMin(DataStructures.BinaryNode):::ENTER;condition="isEmpty()"
this.root == t
this.root == null
===========================================================================
DataStructures.BinarySearchTree.findMin(DataStructures.BinaryNode):::ENTER;condition="not(isEmpty())"
this.root != null
t != null
===========================================================================
DataStructures.BinarySearchTree.findMin(DataStructures.BinaryNode):::EXIT167
this.root == return
return == orig(this.root)
return == orig(t)
return == null
===========================================================================
DataStructures.BinarySearchTree.findMin(DataStructures.BinaryNode):::EXIT167;condition="orig(root == null)"
===========================================================================
DataStructures.BinarySearchTree.findMin(DataStructures.BinaryNode):::EXIT167;condition="root == null"
===========================================================================
DataStructures.BinarySearchTree.findMin(DataStructures.BinaryNode):::EXIT167;condition="isEmpty()"
===========================================================================
DataStructures.BinarySearchTree.findMin(DataStructures.BinaryNode):::EXIT167;condition="orig(isEmpty())"
===========================================================================
DataStructures.BinarySearchTree.findMin(DataStructures.BinaryNode):::EXIT169
return == orig(t)
this.root != null
return != null
===========================================================================
DataStructures.BinarySearchTree.findMin(DataStructures.BinaryNode):::EXIT169;condition="not(orig(root == null))"
===========================================================================
DataStructures.BinarySearchTree.findMin(DataStructures.BinaryNode):::EXIT169;condition="not(root == null)"
return == orig(t)
===========================================================================
DataStructures.BinarySearchTree.findMin(DataStructures.BinaryNode):::EXIT169;condition="not(isEmpty())"
return == orig(t)
===========================================================================
DataStructures.BinarySearchTree.findMin(DataStructures.BinaryNode):::EXIT169;condition="not(orig(isEmpty()))"
return == orig(t)
===========================================================================
DataStructures.BinarySearchTree.findMin(DataStructures.BinaryNode):::EXIT170
this.root != null
return != null
orig(t) != null
===========================================================================
DataStructures.BinarySearchTree.findMin(DataStructures.BinaryNode):::EXIT170;condition="not(orig(root == null))"
===========================================================================
DataStructures.BinarySearchTree.findMin(DataStructures.BinaryNode):::EXIT170;condition="not(root == null)"
===========================================================================
DataStructures.BinarySearchTree.findMin(DataStructures.BinaryNode):::EXIT170;condition="not(isEmpty())"
===========================================================================
DataStructures.BinarySearchTree.findMin(DataStructures.BinaryNode):::EXIT170;condition="not(orig(isEmpty()))"
===========================================================================
DataStructures.BinarySearchTree.findMin(DataStructures.BinaryNode):::EXIT
this.root == orig(this.root)
(this.root != null)  <==>  (orig(t) != null)
(this.root != null)  <==>  (return != null)
(this.root == null)  <==>  (orig(t) == null)
(this.root == null)  <==>  (return == null)
(this.root == null)  ==>  (return == orig(t))
(this.root == null)  ==>  (this.root == return)
===========================================================================
DataStructures.BinarySearchTree.findMin(DataStructures.BinaryNode):::EXIT;condition="orig(root == null)"
this.root == return
return == orig(this.root)
return == orig(t)
return == null
===========================================================================
DataStructures.BinarySearchTree.findMin(DataStructures.BinaryNode):::EXIT;condition="not(orig(root == null))"
this.root != null
return != null
orig(t) != null
===========================================================================
DataStructures.BinarySearchTree.findMin(DataStructures.BinaryNode):::EXIT;condition="root == null"
this.root == return
return == orig(this.root)
return == orig(t)
return == null
===========================================================================
DataStructures.BinarySearchTree.findMin(DataStructures.BinaryNode):::EXIT;condition="not(root == null)"
this.root == orig(this.root)
this.root != null
return != null
===========================================================================
DataStructures.BinarySearchTree.findMin(DataStructures.BinaryNode):::EXIT;condition="isEmpty()"
this.root == return
return == orig(this.root)
return == orig(t)
return == null
===========================================================================
DataStructures.BinarySearchTree.findMin(DataStructures.BinaryNode):::EXIT;condition="not(isEmpty())"
this.root == orig(this.root)
this.root != null
return != null
===========================================================================
DataStructures.BinarySearchTree.findMin(DataStructures.BinaryNode):::EXIT;condition="orig(isEmpty())"
this.root == return
return == orig(this.root)
return == orig(t)
return == null
===========================================================================
DataStructures.BinarySearchTree.findMin(DataStructures.BinaryNode):::EXIT;condition="not(orig(isEmpty()))"
this.root == orig(this.root)
this.root != null
return != null
orig(t) != null
===========================================================================
DataStructures.BinarySearchTree.insert(DataStructures.Comparable):::ENTER
x != null
x.getClass().getName() == DataStructures.MyInteger.class
===========================================================================
DataStructures.BinarySearchTree.insert(DataStructures.Comparable):::EXIT
this.root != null
===========================================================================
DataStructures.BinarySearchTree.insert(DataStructures.Comparable, DataStructures.BinaryNode):::ENTER
(this.root == null)  ==>  (t == null)
(this.root == null)  ==>  (this.root == t)
x != null
x.getClass().getName() == DataStructures.MyInteger.class
===========================================================================
DataStructures.BinarySearchTree.insert(DataStructures.Comparable, DataStructures.BinaryNode):::ENTER;condition="root == null"
this.root == t
this.root == null
===========================================================================
DataStructures.BinarySearchTree.insert(DataStructures.Comparable, DataStructures.BinaryNode):::ENTER;condition="not(root == null)"
this.root != null
===========================================================================
DataStructures.BinarySearchTree.insert(DataStructures.Comparable, DataStructures.BinaryNode):::ENTER;condition="isEmpty()"
this.root == t
this.root == null
x != null
x.getClass().getName() == DataStructures.MyInteger.class
===========================================================================
DataStructures.BinarySearchTree.insert(DataStructures.Comparable, DataStructures.BinaryNode):::ENTER;condition="not(isEmpty())"
this.root != null
x != null
x.getClass().getName() == DataStructures.MyInteger.class
===========================================================================
DataStructures.BinarySearchTree.insert(DataStructures.Comparable, DataStructures.BinaryNode):::EXIT
this.root == orig(this.root)
(this.root == null)  ==>  (orig(t) == null)
(this.root == null)  ==>  (this.root == orig(t))
return != null
===========================================================================
DataStructures.BinarySearchTree.insert(DataStructures.Comparable, DataStructures.BinaryNode):::EXIT;condition="orig(root == null)"
this.root == orig(t)
this.root == null
===========================================================================
DataStructures.BinarySearchTree.insert(DataStructures.Comparable, DataStructures.BinaryNode):::EXIT;condition="not(orig(root == null))"
this.root != null
===========================================================================
DataStructures.BinarySearchTree.insert(DataStructures.Comparable, DataStructures.BinaryNode):::EXIT;condition="root == null"
this.root == orig(this.root)
this.root == orig(t)
this.root == null
return != null
===========================================================================
DataStructures.BinarySearchTree.insert(DataStructures.Comparable, DataStructures.BinaryNode):::EXIT;condition="not(root == null)"
this.root == orig(this.root)
this.root != null
return != null
===========================================================================
DataStructures.BinarySearchTree.insert(DataStructures.Comparable, DataStructures.BinaryNode):::EXIT;condition="isEmpty()"
this.root == orig(this.root)
this.root == orig(t)
this.root == null
return != null
===========================================================================
DataStructures.BinarySearchTree.insert(DataStructures.Comparable, DataStructures.BinaryNode):::EXIT;condition="not(isEmpty())"
this.root == orig(this.root)
this.root != null
return != null
===========================================================================
DataStructures.BinarySearchTree.insert(DataStructures.Comparable, DataStructures.BinaryNode):::EXIT;condition="orig(isEmpty())"
this.root == orig(this.root)
this.root == orig(t)
this.root == null
return != null
orig(x) != null
orig(x.getClass().getName()) == DataStructures.MyInteger.class
===========================================================================
DataStructures.BinarySearchTree.insert(DataStructures.Comparable, DataStructures.BinaryNode):::EXIT;condition="not(orig(isEmpty()))"
this.root == orig(this.root)
this.root != null
return != null
orig(x) != null
orig(x.getClass().getName()) == DataStructures.MyInteger.class
===========================================================================
DataStructures.BinarySearchTree.isEmpty():::ENTER
===========================================================================
DataStructures.BinarySearchTree.isEmpty():::EXIT
this.root == orig(this.root)
(this.root != null)  <==>  (return == false)
(this.root == null)  <==>  (return == true)
===========================================================================
DataStructures.BinarySearchTree.isEmpty():::EXIT;condition="return == true"
this.root == null
return == true
===========================================================================
DataStructures.BinarySearchTree.isEmpty():::EXIT;condition="not(return == true)"
this.root != null
return == false
===========================================================================
DataStructures.BinarySearchTree.isEmpty():::EXIT;condition="orig(root == null)"
this.root == orig(this.root)
this.root == null
return == true
===========================================================================
DataStructures.BinarySearchTree.isEmpty():::EXIT;condition="not(orig(root == null))"
this.root == orig(this.root)
this.root != null
return == false
===========================================================================
DataStructures.BinarySearchTree.isEmpty():::EXIT;condition="root == null"
this.root == orig(this.root)
this.root == null
return == true
===========================================================================
DataStructures.BinarySearchTree.isEmpty():::EXIT;condition="not(root == null)"
this.root == orig(this.root)
this.root != null
return == false
===========================================================================
DataStructures.BinarySearchTree.makeEmpty():::ENTER
===========================================================================
DataStructures.BinarySearchTree.makeEmpty():::EXIT
this.root == null
===========================================================================
DataStructures.BinarySearchTree.remove(DataStructures.Comparable):::ENTER
x != null
x.getClass().getName() == DataStructures.MyInteger.class
===========================================================================
DataStructures.BinarySearchTree.remove(DataStructures.Comparable):::EXIT
===========================================================================
DataStructures.BinarySearchTree.remove(DataStructures.Comparable, DataStructures.BinaryNode):::ENTER
(this.root == null)  ==>  (t == null)
(this.root == null)  ==>  (this.root == t)
x != null
x.getClass().getName() == DataStructures.MyInteger.class
===========================================================================
DataStructures.BinarySearchTree.remove(DataStructures.Comparable, DataStructures.BinaryNode):::ENTER;condition="root == null"
this.root == t
this.root == null
===========================================================================
DataStructures.BinarySearchTree.remove(DataStructures.Comparable, DataStructures.BinaryNode):::ENTER;condition="not(root == null)"
this.root != null
===========================================================================
DataStructures.BinarySearchTree.remove(DataStructures.Comparable, DataStructures.BinaryNode):::ENTER;condition="isEmpty()"
this.root == t
this.root == null
x != null
x.getClass().getName() == DataStructures.MyInteger.class
===========================================================================
DataStructures.BinarySearchTree.remove(DataStructures.Comparable, DataStructures.BinaryNode):::ENTER;condition="not(isEmpty())"
this.root != null
x != null
x.getClass().getName() == DataStructures.MyInteger.class
===========================================================================
DataStructures.BinarySearchTree.remove(DataStructures.Comparable, DataStructures.BinaryNode):::EXIT144
return == orig(t)
(this.root == null)  ==>  (this.root == return)
return == null
===========================================================================
DataStructures.BinarySearchTree.remove(DataStructures.Comparable, DataStructures.BinaryNode):::EXIT144;condition="orig(root == null)"
===========================================================================
DataStructures.BinarySearchTree.remove(DataStructures.Comparable, DataStructures.BinaryNode):::EXIT144;condition="not(orig(root == null))"
===========================================================================
DataStructures.BinarySearchTree.remove(DataStructures.Comparable, DataStructures.BinaryNode):::EXIT144;condition="root == null"
===========================================================================
DataStructures.BinarySearchTree.remove(DataStructures.Comparable, DataStructures.BinaryNode):::EXIT144;condition="not(root == null)"
return == orig(t)
return == null
===========================================================================
DataStructures.BinarySearchTree.remove(DataStructures.Comparable, DataStructures.BinaryNode):::EXIT144;condition="isEmpty()"
===========================================================================
DataStructures.BinarySearchTree.remove(DataStructures.Comparable, DataStructures.BinaryNode):::EXIT144;condition="not(isEmpty())"
return == orig(t)
return == null
===========================================================================
DataStructures.BinarySearchTree.remove(DataStructures.Comparable, DataStructures.BinaryNode):::EXIT144;condition="orig(isEmpty())"
===========================================================================
DataStructures.BinarySearchTree.remove(DataStructures.Comparable, DataStructures.BinaryNode):::EXIT144;condition="not(orig(isEmpty()))"
return == orig(t)
return == null
===========================================================================
DataStructures.BinarySearchTree.remove(DataStructures.Comparable, DataStructures.BinaryNode):::EXIT156
this.root != null
orig(t) != null
===========================================================================
DataStructures.BinarySearchTree.remove(DataStructures.Comparable, DataStructures.BinaryNode):::EXIT156;condition="not(orig(root == null))"
===========================================================================
DataStructures.BinarySearchTree.remove(DataStructures.Comparable, DataStructures.BinaryNode):::EXIT156;condition="not(root == null)"
orig(t) != null
===========================================================================
DataStructures.BinarySearchTree.remove(DataStructures.Comparable, DataStructures.BinaryNode):::EXIT156;condition="not(isEmpty())"
orig(t) != null
===========================================================================
DataStructures.BinarySearchTree.remove(DataStructures.Comparable, DataStructures.BinaryNode):::EXIT156;condition="not(orig(isEmpty()))"
orig(t) != null
===========================================================================
DataStructures.BinarySearchTree.remove(DataStructures.Comparable, DataStructures.BinaryNode):::EXIT
this.root == orig(this.root)
(orig(t) != null)  ==>  (this.root != null)
(orig(t) == null)  ==>  (return == null)
(orig(t) == null)  ==>  (return == orig(t))
(this.root == null)  ==>  (orig(t) == null)
(this.root == null)  ==>  (return == null)
(this.root == null)  ==>  (return == orig(t))
(this.root == null)  ==>  (this.root == return)
===========================================================================
DataStructures.BinarySearchTree.remove(DataStructures.Comparable, DataStructures.BinaryNode):::EXIT;condition="orig(root == null)"
this.root == return
return == orig(this.root)
return == orig(t)
return == null
===========================================================================
DataStructures.BinarySearchTree.remove(DataStructures.Comparable, DataStructures.BinaryNode):::EXIT;condition="not(orig(root == null))"
this.root != null
===========================================================================
DataStructures.BinarySearchTree.remove(DataStructures.Comparable, DataStructures.BinaryNode):::EXIT;condition="root == null"
this.root == return
return == orig(this.root)
return == orig(t)
return == null
===========================================================================
DataStructures.BinarySearchTree.remove(DataStructures.Comparable, DataStructures.BinaryNode):::EXIT;condition="not(root == null)"
this.root == orig(this.root)
this.root != null
===========================================================================
DataStructures.BinarySearchTree.remove(DataStructures.Comparable, DataStructures.BinaryNode):::EXIT;condition="isEmpty()"
this.root == return
return == orig(this.root)
return == orig(t)
return == null
===========================================================================
DataStructures.BinarySearchTree.remove(DataStructures.Comparable, DataStructures.BinaryNode):::EXIT;condition="not(isEmpty())"
this.root == orig(this.root)
this.root != null
===========================================================================
DataStructures.BinarySearchTree.remove(DataStructures.Comparable, DataStructures.BinaryNode):::EXIT;condition="orig(isEmpty())"
this.root == return
return == orig(this.root)
return == orig(t)
return == null
orig(x) != null
orig(x.getClass().getName()) == DataStructures.MyInteger.class
===========================================================================
DataStructures.BinarySearchTree.remove(DataStructures.Comparable, DataStructures.BinaryNode):::EXIT;condition="not(orig(isEmpty()))"
this.root == orig(this.root)
this.root != null
orig(x) != null
orig(x.getClass().getName()) == DataStructures.MyInteger.class
