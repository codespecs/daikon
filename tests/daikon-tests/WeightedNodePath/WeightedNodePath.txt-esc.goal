===========================================================================
MapQuick.WeightedNodePath:::OBJECT
    Variables: this this.node this.path this.path.node this.path.path this.path.path.node this.path.path.path this.path.path.cost this.path.cost this.cost
this.node != null
(this.path != null)  ==>  (this.path.node != null)
((this.path != null) && (this.path.path != null))  ==>  (this.path.path.node != null)
((this.path != null) && (this.path.path != null))  ==>  (this.path.path.cost >= 1)
(this.path != null)  ==>  (this.path.cost >= 1)
this.cost >= 1
((this.path != null) && (this.path.path != null))  ==>  (this.path.path.cost < this.path.cost)
((this.path != null) && (this.path.path != null))  ==>  (this.path.path.cost < this.cost)
(this.path != null)  ==>  (this.path.cost < this.cost)
===========================================================================
MapQuick.WeightedNodePath.WeightedNodePath(MapQuick.WeightedNode):::ENTER
    Variables: node
node != null
===========================================================================
MapQuick.WeightedNodePath.WeightedNodePath(MapQuick.WeightedNode):::EXIT
    Variables: this this.node this.path this.path.node this.path.path this.path.path.node this.path.path.path this.path.path.cost this.path.cost this.cost node orig(node)
      Unmodified variables: node
this.node == \old(node)
this.path == null
===========================================================================
MapQuick.WeightedNodePath.WeightedNodePath(MapQuick.WeightedNode, MapQuick.WeightedNodePath):::ENTER
    Variables: node path path.node path.path path.path.node path.path.path path.path.cost path.cost
node != null
(path != null)  ==>  (path.node != null)
((path != null) && (path.path != null))  ==>  (path.path.node != null)
((path != null) && (path.path != null))  ==>  (path.path.cost >= 1)
(path != null)  ==>  (path.cost >= 1)
((path != null) && (path.path != null))  ==>  (path.path.cost < path.cost)
===========================================================================
MapQuick.WeightedNodePath.WeightedNodePath(MapQuick.WeightedNode, MapQuick.WeightedNodePath):::EXIT
    Variables: this this.node this.path this.path.node this.path.path this.path.path.node this.path.path.path this.path.path.cost this.path.cost this.cost node path path.node path.path path.path.node path.path.path path.path.cost path.cost orig(node) orig(path) orig(path.node) orig(path.path) orig(path.path.node) orig(path.path.path) orig(path.path.cost) orig(path.cost)
      Unmodified variables: node path path.node path.path path.path.node path.path.path path.path.cost path.cost
this.node == \old(node)
this.path == \old(path)
((this.path != null) && (path != null))  ==>  (this.path.node == path.node)
((this.path != null) && (path != null))  ==>  (this.path.path == path.path)
((this.path != null) && (this.path.path != null) && (path != null) && (path.path != null))  ==>  (this.path.path.node == path.path.node)
((this.path != null) && (this.path.path != null) && (path != null) && (path.path != null))  ==>  (this.path.path.path == path.path.path)
((this.path != null) && (this.path.path != null) && (path != null) && (path.path != null))  ==>  (this.path.path.cost == path.path.cost)
((this.path != null) && (path != null))  ==>  (this.path.cost == path.cost)
(path != null)  ==>  (path.node != null)
((path != null) && (path.path != null))  ==>  (path.path.node != null)
((path != null) && (path.path != null))  ==>  (path.path.cost >= 1)
(path != null)  ==>  (path.cost >= 1)
((path != null) && (path.path != null))  ==>  (this.cost > path.path.cost)
(path != null)  ==>  (this.cost > path.cost)
((path != null) && (path.path != null))  ==>  (path.path.cost < path.cost)
===========================================================================
MapQuick.WeightedNodePath.cost():::ENTER
    Variables: this this.node this.path this.path.node this.path.path this.path.path.node this.path.path.path this.path.path.cost this.path.cost this.cost
===========================================================================
MapQuick.WeightedNodePath.cost():::EXIT
    Variables: this this.node this.path this.path.node this.path.path this.path.path.node this.path.path.path this.path.path.cost this.path.cost this.cost return orig(this) orig(this.node) orig(this.path) orig(this.path.node) orig(this.path.path) orig(this.path.path.node) orig(this.path.path.path) orig(this.path.path.cost) orig(this.path.cost) orig(this.cost)
      Unmodified variables: this this.node this.path this.path.node this.path.path this.path.path.node this.path.path.path this.path.path.cost this.path.cost this.cost
\result >= 1.0
===========================================================================
MapQuick.WeightedNodePath.elements():::ENTER
    Variables: this this.node this.path this.path.node this.path.path this.path.path.node this.path.path.path this.path.path.cost this.path.cost this.cost
(this.path != null)  ==>  ((this.cost >> this.path.cost == 0))
===========================================================================
MapQuick.WeightedNodePath.elements():::EXIT
    Variables: this this.node this.path this.path.node this.path.path this.path.path.node this.path.path.path this.path.path.cost this.path.cost this.cost return return.getClass().getName() orig(this) orig(this.node) orig(this.path) orig(this.path.node) orig(this.path.path) orig(this.path.path.node) orig(this.path.path.path) orig(this.path.path.cost) orig(this.path.cost) orig(this.cost)
      Unmodified variables: this this.node this.path this.path.node this.path.path this.path.path.node this.path.path.path this.path.path.cost this.path.cost this.cost
\result != null
\typeof(\result) == \type(java.util.Collections.UnmodifiableCollection$1)
(this.path != null)  ==>  ((this.cost >> this.path.cost == 0))
===========================================================================
MapQuick.WeightedNodePath.extend(MapQuick.WeightedNode):::ENTER
    Variables: this this.node this.path this.path.node this.path.path this.path.path.node this.path.path.path this.path.path.cost this.path.cost this.cost node
node != null
===========================================================================
MapQuick.WeightedNodePath.extend(MapQuick.WeightedNode):::EXIT
    Variables: this this.node this.path this.path.node this.path.path this.path.path.node this.path.path.path this.path.path.cost this.path.cost this.cost node return return.getClass().getName() orig(this) orig(this.node) orig(this.path) orig(this.path.node) orig(this.path.path) orig(this.path.path.node) orig(this.path.path.path) orig(this.path.path.cost) orig(this.path.cost) orig(this.cost) orig(node)
      Unmodified variables: this this.node this.path this.path.node this.path.path this.path.path.node this.path.path.path this.path.path.cost this.path.cost this.cost node
\result != null
\typeof(\result) == \type(MapQuick.WeightedNodePath)
===========================================================================
MapQuick.WeightedNodePath.extend(java.lang.Object):::ENTER
    Variables: this this.node this.path this.path.node this.path.path this.path.path.node this.path.path.path this.path.path.cost this.path.cost this.cost o o.getClass().getName()
o != null
\typeof(o) == \type(MapQuick.WeightedNode)
===========================================================================
MapQuick.WeightedNodePath.extend(java.lang.Object):::EXIT
    Variables: this this.node this.path this.path.node this.path.path this.path.path.node this.path.path.path this.path.path.cost this.path.cost this.cost o o.getClass().getName() return return.getClass().getName() orig(this) orig(this.node) orig(this.path) orig(this.path.node) orig(this.path.path) orig(this.path.path.node) orig(this.path.path.path) orig(this.path.path.cost) orig(this.path.cost) orig(this.cost) orig(o) orig(o.getClass().getName())
      Unmodified variables: this this.node this.path this.path.node this.path.path this.path.path.node this.path.path.path this.path.path.cost this.path.cost this.cost o o.getClass().getName()
\result != null
\typeof(\result) == \type(MapQuick.WeightedNodePath)
warning: method daikon.inv.binary.twoString.StdString$SubString.format(OutputFormat:ESC/Java) needs to be implemented: orig(o.getClass().getName()) is a substring of return.getClass().getName()
\typeof(\result) != \old(\typeof(o))
===========================================================================
MapQuick.WeightedNodePath.hashCode():::ENTER
    Variables: this this.node this.path this.path.node this.path.path this.path.path.node this.path.path.path this.path.path.cost this.path.cost this.cost
this.path == null
===========================================================================
MapQuick.WeightedNodePath.hashCode():::EXIT
    Variables: this this.node this.path this.path.node this.path.path this.path.path.node this.path.path.path this.path.path.cost this.path.cost this.cost return orig(this) orig(this.node) orig(this.path) orig(this.path.node) orig(this.path.path) orig(this.path.path.node) orig(this.path.path.path) orig(this.path.path.cost) orig(this.path.cost) orig(this.cost)
      Modified variables: this.path.node this.path.path this.path.path.node this.path.path.path this.path.path.cost this.path.cost
      Unmodified variables: this this.node this.path this.cost
modifies this.path.node, this.path.path, this.path.path.node, this.path.path.path, this.path.path.cost, this.path.cost
this.path == null
