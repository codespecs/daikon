===========================================================================
..get_char():::ENTER
size(::default1[]) == size(::base[])
size(::next[]) == size(::check[])
::default1 has only one value
::default1[] == [54, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 51, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, -3, -1, -1, -1, -1, -1, -1, -1]
::default1[] elements != 0
::default1[i] != i
::base has only one value
::base[] == [-32, -96, -105, -93, -94, -87, -1, -97, -86, -1, -99, -1, -72, -1, -80, -82, -1, 53, 43, -1, -1, -1, -1, -1, -1, -1, 133, -1, 233, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, 40, -1, 251, -1, -1, -1, -1, -1]
::base[i] != i
::next has only one value
::next[] == [0, 2, 26, 28, 3, 4, 5, 23, 19, 20, 6, -1, 25, 8, 9, 11, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, -1, 30, -1, 31, 13, 15, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 21, -1, 22, 32, -1, 24, 7, 17, 17, 17, 17, 17, 17, 17, 12, 17, 17, 1, 17, 17, 10, 17, 17, 17, 17, 17, 17, 17, 17, 14, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, -1, 26, 26, 27, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 0, 0, -1, -1, -1, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29]
::next[] elements >= -1
::check has only one value
::check[] == [0, 1, 0, 0, 2, 3, 4, 0, 0, 0, 5, -1, 0, 7, 8, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, -1, 0, 12, 14, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 31, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, -1, -1, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 54, 54, -1, -1, -1, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28]
::check[] elements >= -1
stream_ptr has only one value
stream_ptr != null
stream_ptr[] contains no nulls and has only one value, of length 1
stream_ptr[] elements has only one value
stream_ptr[] elements != null
stream_ptr[].fp contains no nulls and has only one value, of length 1
stream_ptr[].fp elements has only one value
stream_ptr[].fp elements != null
stream_ptr[i].stream_ind > i
size(::default1[]) == 60
size(::next[]) == 360
size(stream_ptr[]) == 1
::default1[] elements < size(::default1[])-1
::default1[] elements < size(::next[])-1
::base[] < stream_ptr[].stream_ind (lexically)
::base[] <= stream_ptr[].stream_ind (lexically)
::base[] elements < size(::next[])-1
size(stream_ptr[])-1 in ::base[]
::next[] < stream_ptr[].stream_ind (lexically)
::next[] <= stream_ptr[].stream_ind (lexically)
::next[] elements < size(::default1[])-1
::next[] elements < size(::next[])-1
size(stream_ptr[]) in ::next[]
size(stream_ptr[])-1 in ::next[]
::check[] < stream_ptr[].stream_ind (lexically)
::check[] <= stream_ptr[].stream_ind (lexically)
::check[] elements < size(::default1[])-1
::check[] elements < size(::next[])-1
size(stream_ptr[]) in ::check[]
size(stream_ptr[])-1 in ::check[]
stream_ptr[].stream_ind elements <= size(::default1[])
stream_ptr[].stream_ind elements < size(::next[])-1
stream_ptr[].stream_ind elements > size(stream_ptr[])
===========================================================================
..get_char():::EXIT
::default1 == orig(::default1)
::default1[] == orig(::default1[])
::base == orig(::base)
::base[] == orig(::base[])
::next == orig(::next)
::next[] == orig(::next[])
::check == orig(::check)
::check[] == orig(::check[])
stream_ptr[] == orig(stream_ptr[])
stream_ptr[].fp == orig(stream_ptr[].fp)
size(::default1[]) == size(::base[])
size(::default1[]) == orig(size(::base[]))
size(::next[]) == size(::check[])
size(::next[]) == orig(size(::check[]))
::default1 has only one value
::default1[] == [54, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 51, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, -3, -1, -1, -1, -1, -1, -1, -1]
::default1[] elements != 0
::default1[i] != i
::base has only one value
::base[] == [-32, -96, -105, -93, -94, -87, -1, -97, -86, -1, -99, -1, -72, -1, -80, -82, -1, 53, 43, -1, -1, -1, -1, -1, -1, -1, 133, -1, 233, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, 40, -1, 251, -1, -1, -1, -1, -1]
::base[i] != i
::next has only one value
::next[] == [0, 2, 26, 28, 3, 4, 5, 23, 19, 20, 6, -1, 25, 8, 9, 11, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, -1, 30, -1, 31, 13, 15, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 21, -1, 22, 32, -1, 24, 7, 17, 17, 17, 17, 17, 17, 17, 12, 17, 17, 1, 17, 17, 10, 17, 17, 17, 17, 17, 17, 17, 17, 14, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, -1, 26, 26, 27, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 0, 0, -1, -1, -1, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29]
::next[] elements >= -1
::check has only one value
::check[] == [0, 1, 0, 0, 2, 3, 4, 0, 0, 0, 5, -1, 0, 7, 8, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, -1, 0, 12, 14, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 31, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, -1, -1, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 54, 54, -1, -1, -1, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28]
::check[] elements >= -1
stream_ptr[] contains no nulls and has only one value, of length 1
stream_ptr[] elements has only one value
stream_ptr[] elements != null
stream_ptr[].fp contains no nulls and has only one value, of length 1
stream_ptr[].fp elements has only one value
stream_ptr[].fp elements != null
stream_ptr[i].stream_ind > i
return != 0
size(::default1[]) == 60
size(::next[]) == 360
{0, 26, -1, 17, 27, 29} subset of ::next[return+1..]
{-1, 51, 52, 26, 54, 28} subset of ::check[return+1..]
::default1[] elements < size(::default1[])-1
::default1[] elements < size(::next[])-1
::base[] < stream_ptr[].stream_ind (lexically)
::base[] <= stream_ptr[].stream_ind (lexically)
::base[] < orig(stream_ptr[].stream_ind) (lexically)
::base[] <= orig(stream_ptr[].stream_ind) (lexically)
::base[] elements < size(::next[])-1
size(stream_ptr[])-1 in ::base[]
::next[] < stream_ptr[].stream_ind (lexically)
::next[] <= stream_ptr[].stream_ind (lexically)
::next[] < orig(stream_ptr[].stream_ind) (lexically)
::next[] <= orig(stream_ptr[].stream_ind) (lexically)
::next[] elements < size(::default1[])-1
::next[] elements < size(::next[])-1
size(stream_ptr[])-1 in ::next[]
orig(size(stream_ptr[])) in ::next[]
::check[] < stream_ptr[].stream_ind (lexically)
::check[] <= stream_ptr[].stream_ind (lexically)
::check[] < orig(stream_ptr[].stream_ind) (lexically)
::check[] <= orig(stream_ptr[].stream_ind) (lexically)
::check[] elements < size(::default1[])-1
::check[] elements < size(::next[])-1
size(stream_ptr[])-1 in ::check[]
orig(size(stream_ptr[])) in ::check[]
stream_ptr[].stream_ind elements <= size(::default1[])
stream_ptr[].stream_ind elements < size(::next[])-1
stream_ptr[].stream_ind elements > orig(size(stream_ptr[]))
return != size(::default1[])
return < size(::next[])-1
return != size(stream_ptr[])-1
return != orig(size(stream_ptr[]))
::check[0..return] elements < return
orig(stream_ptr[].stream_ind) elements <= size(::default1[])
orig(stream_ptr[].stream_ind) elements < size(::next[])-1
size(stream_ptr[])-1 in ::next[return+1..]
size(stream_ptr[])-1 == (return / size(::next[]))
size(stream_ptr[])-1 == (return / size(::next[])-1)
orig(size(stream_ptr[])) == (org.plumelib.util.MathPlume.gcd(return, size(::next[])-1))
===========================================================================
..get_token():::ENTER
size(::default1[]) == size(::base[])
size(::next[]) == size(::check[])
size(tstream_ptr[]) == size(tstream_ptr[].ch_stream[0])
::default1 has only one value
::default1[] == [54, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 51, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, -3, -1, -1, -1, -1, -1, -1, -1]
::default1[i] != i
::base has only one value
::base[] == [-32, -96, -105, -93, -94, -87, -1, -97, -86, -1, -99, -1, -72, -1, -80, -82, -1, 53, 43, -1, -1, -1, -1, -1, -1, -1, 133, -1, 233, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, 40, -1, 251, -1, -1, -1, -1, -1]
::base[i] != i
::next has only one value
::next[] == [0, 2, 26, 28, 3, 4, 5, 23, 19, 20, 6, -1, 25, 8, 9, 11, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, -1, 30, -1, 31, 13, 15, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 21, -1, 22, 32, -1, 24, 7, 17, 17, 17, 17, 17, 17, 17, 12, 17, 17, 1, 17, 17, 10, 17, 17, 17, 17, 17, 17, 17, 17, 14, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, -1, 26, 26, 27, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 0, 0, -1, -1, -1, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29]
::next[] elements >= -1
::check has only one value
::check[] == [0, 1, 0, 0, 2, 3, 4, 0, 0, 0, 5, -1, 0, 7, 8, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, -1, 0, 12, 14, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 31, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, -1, -1, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 54, 54, -1, -1, -1, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28]
::check[] elements >= -1
tstream_ptr has only one value
tstream_ptr != null
tstream_ptr[] contains no nulls and has only one value, of length 1
tstream_ptr[] elements has only one value
tstream_ptr[] elements != null
tstream_ptr[].ch_stream contains no nulls and has only one value, of length 1
tstream_ptr[].ch_stream elements has only one value
tstream_ptr[].ch_stream elements != null
tstream_ptr[].ch_stream[0] contains no nulls and has only one value, of length 1
tstream_ptr[].ch_stream[0] elements has only one value
tstream_ptr[].ch_stream[0] elements != null
tstream_ptr[].ch_stream->fp contains no nulls and has only one value, of length 1
tstream_ptr[].ch_stream->fp elements has only one value
tstream_ptr[].ch_stream->fp elements != null
tstream_ptr[i].ch_stream->stream_ind > i
size(::default1[]) == 60
size(::next[]) == 360
size(tstream_ptr[]) == 1
::default1[] elements < size(::default1[])-1
::default1[] elements < size(::next[])-1
::base[] < tstream_ptr[].ch_stream->stream_ind (lexically)
::base[] <= tstream_ptr[].ch_stream->stream_ind (lexically)
::base[] elements < size(::next[])-1
size(tstream_ptr[])-1 in ::base[]
::next[] < tstream_ptr[].ch_stream->stream_ind (lexically)
::next[] <= tstream_ptr[].ch_stream->stream_ind (lexically)
::next[] elements < size(::default1[])-1
::next[] elements < size(::next[])-1
size(tstream_ptr[]) in ::next[]
size(tstream_ptr[])-1 in ::next[]
::check[] < tstream_ptr[].ch_stream->stream_ind (lexically)
::check[] <= tstream_ptr[].ch_stream->stream_ind (lexically)
::check[] elements < size(::default1[])-1
::check[] elements < size(::next[])-1
size(tstream_ptr[]) in ::check[]
size(tstream_ptr[])-1 in ::check[]
tstream_ptr[].ch_stream->stream_ind elements <= size(::default1[])-1
tstream_ptr[].ch_stream->stream_ind elements < size(::next[])-1
tstream_ptr[].ch_stream->stream_ind elements > size(tstream_ptr[])
===========================================================================
..get_token():::EXIT
::default1 == orig(::default1)
::default1[] == orig(::default1[])
::base == orig(::base)
::base[] == orig(::base[])
::next == orig(::next)
::next[] == orig(::next[])
::check == orig(::check)
::check[] == orig(::check[])
tstream_ptr[] == orig(tstream_ptr[])
tstream_ptr[].ch_stream == orig(tstream_ptr[].ch_stream)
tstream_ptr[].ch_stream[0] == orig(tstream_ptr[].ch_stream[0])
tstream_ptr[].ch_stream->fp == orig(tstream_ptr[].ch_stream->fp)
size(::default1[]) == size(::base[])
size(::default1[]) == orig(size(::base[]))
size(::next[]) == size(::check[])
size(::next[]) == orig(size(::check[]))
size(return[]) == orig(size(tstream_ptr[]))
size(return[]) == orig(size(tstream_ptr[].ch_stream[0]))
::default1 has only one value
::default1[] == [54, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 51, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, -3, -1, -1, -1, -1, -1, -1, -1]
::default1[i] != i
::base has only one value
::base[] == [-32, -96, -105, -93, -94, -87, -1, -97, -86, -1, -99, -1, -72, -1, -80, -82, -1, 53, 43, -1, -1, -1, -1, -1, -1, -1, 133, -1, 233, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, 40, -1, 251, -1, -1, -1, -1, -1]
::base[i] != i
::next has only one value
::next[] == [0, 2, 26, 28, 3, 4, 5, 23, 19, 20, 6, -1, 25, 8, 9, 11, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, -1, 30, -1, 31, 13, 15, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 21, -1, 22, 32, -1, 24, 7, 17, 17, 17, 17, 17, 17, 17, 12, 17, 17, 1, 17, 17, 10, 17, 17, 17, 17, 17, 17, 17, 17, 14, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, -1, 26, 26, 27, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 0, 0, -1, -1, -1, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29]
::next[] elements >= -1
::check has only one value
::check[] == [0, 1, 0, 0, 2, 3, 4, 0, 0, 0, 5, -1, 0, 7, 8, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, -1, 0, 12, 14, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 31, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, -1, -1, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 54, 54, -1, -1, -1, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28]
::check[] elements >= -1
tstream_ptr[] contains no nulls and has only one value, of length 1
tstream_ptr[] elements has only one value
tstream_ptr[] elements != null
tstream_ptr[].ch_stream contains no nulls and has only one value, of length 1
tstream_ptr[].ch_stream elements has only one value
tstream_ptr[].ch_stream elements != null
tstream_ptr[].ch_stream[0] contains no nulls and has only one value, of length 1
tstream_ptr[].ch_stream[0] elements has only one value
tstream_ptr[].ch_stream[0] elements != null
tstream_ptr[].ch_stream->fp contains no nulls and has only one value, of length 1
tstream_ptr[].ch_stream->fp elements has only one value
tstream_ptr[].ch_stream->fp elements != null
tstream_ptr[i].ch_stream->stream_ind > i
return != null
return[] elements != null
return[i].token_id >= i
size(::default1[]) == 60
size(::next[]) == 360
size(return[]) == 1
::default1[] > return[].token_id (lexically)
::default1[] >= return[].token_id (lexically)
::default1[] elements < size(::default1[])-1
::default1[] elements < size(::next[])-1
::base[] < tstream_ptr[].ch_stream->stream_ind (lexically)
::base[] <= tstream_ptr[].ch_stream->stream_ind (lexically)
::base[] < return[].token_id (lexically)
::base[] <= return[].token_id (lexically)
::base[] < orig(tstream_ptr[].ch_stream->stream_ind) (lexically)
::base[] <= orig(tstream_ptr[].ch_stream->stream_ind) (lexically)
::base[] elements < size(::next[])-1
size(tstream_ptr[])-1 in ::base[]
::next[] < tstream_ptr[].ch_stream->stream_ind (lexically)
::next[] <= tstream_ptr[].ch_stream->stream_ind (lexically)
::next[] is a superset of return[].token_id
return[].token_id is a subsequence of ::next[]
::next[] < orig(tstream_ptr[].ch_stream->stream_ind) (lexically)
::next[] <= orig(tstream_ptr[].ch_stream->stream_ind) (lexically)
::next[] elements < size(::default1[])-1
::next[] elements < size(::next[])-1
size(tstream_ptr[])-1 in ::next[]
size(return[]) in ::next[]
::check[] < tstream_ptr[].ch_stream->stream_ind (lexically)
::check[] <= tstream_ptr[].ch_stream->stream_ind (lexically)
::check[] < orig(tstream_ptr[].ch_stream->stream_ind) (lexically)
::check[] <= orig(tstream_ptr[].ch_stream->stream_ind) (lexically)
::check[] elements < size(::default1[])-1
::check[] elements < size(::next[])-1
size(tstream_ptr[])-1 in ::check[]
size(return[]) in ::check[]
tstream_ptr[].ch_stream->stream_ind elements <= size(::default1[])-1
tstream_ptr[].ch_stream->stream_ind elements < size(::next[])-1
tstream_ptr[].ch_stream->stream_ind elements > size(return[])
return[].token_id elements >= size(tstream_ptr[])-1
orig(tstream_ptr[].ch_stream->stream_ind) elements <= size(::default1[])-1
orig(tstream_ptr[].ch_stream->stream_ind) elements < size(::next[])-1
orig(tstream_ptr[].ch_stream->stream_ind) elements > size(return[])
===========================================================================
..is_end_of_character_stream():::ENTER
size(::default1[]) == size(::base[])
size(::next[]) == size(::check[])
::default1 has only one value
::default1[] == [54, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 51, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, -3, -1, -1, -1, -1, -1, -1, -1]
::default1[i] != i
::base has only one value
::base[] == [-32, -96, -105, -93, -94, -87, -1, -97, -86, -1, -99, -1, -72, -1, -80, -82, -1, 53, 43, -1, -1, -1, -1, -1, -1, -1, 133, -1, 233, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, 40, -1, 251, -1, -1, -1, -1, -1]
::base[i] != i
::next has only one value
::next[] == [0, 2, 26, 28, 3, 4, 5, 23, 19, 20, 6, -1, 25, 8, 9, 11, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, -1, 30, -1, 31, 13, 15, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 21, -1, 22, 32, -1, 24, 7, 17, 17, 17, 17, 17, 17, 17, 12, 17, 17, 1, 17, 17, 10, 17, 17, 17, 17, 17, 17, 17, 17, 14, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, -1, 26, 26, 27, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 0, 0, -1, -1, -1, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29]
::next[] elements >= -1
::check has only one value
::check[] == [0, 1, 0, 0, 2, 3, 4, 0, 0, 0, 5, -1, 0, 7, 8, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, -1, 0, 12, 14, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 31, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, -1, -1, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 54, 54, -1, -1, -1, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28]
::check[] elements >= -1
stream_ptr has only one value
stream_ptr != null
stream_ptr[] contains no nulls and has only one value, of length 1
stream_ptr[] elements has only one value
stream_ptr[] elements != null
stream_ptr[].fp contains no nulls and has only one value, of length 1
stream_ptr[].fp elements has only one value
stream_ptr[].fp elements != null
stream_ptr[i].stream_ind > i
size(::default1[]) == 60
size(::next[]) == 360
size(stream_ptr[]) == 1
::default1[] elements < size(::default1[])-1
::default1[] elements < size(::next[])-1
::base[] < stream_ptr[].stream_ind (lexically)
::base[] <= stream_ptr[].stream_ind (lexically)
::base[] elements < size(::next[])-1
size(stream_ptr[])-1 in ::base[]
::next[] < stream_ptr[].stream_ind (lexically)
::next[] <= stream_ptr[].stream_ind (lexically)
::next[] elements < size(::default1[])-1
::next[] elements < size(::next[])-1
size(stream_ptr[]) in ::next[]
size(stream_ptr[])-1 in ::next[]
::check[] < stream_ptr[].stream_ind (lexically)
::check[] <= stream_ptr[].stream_ind (lexically)
::check[] elements < size(::default1[])-1
::check[] elements < size(::next[])-1
size(stream_ptr[]) in ::check[]
size(stream_ptr[])-1 in ::check[]
stream_ptr[].stream_ind elements < size(::default1[])-1
stream_ptr[].stream_ind elements < size(::next[])-1
stream_ptr[].stream_ind elements > size(stream_ptr[])
===========================================================================
..is_end_of_character_stream():::EXIT
::default1 == orig(::default1)
::default1[] == orig(::default1[])
::base == orig(::base)
::base[] == orig(::base[])
::next == orig(::next)
::next[] == orig(::next[])
::check == orig(::check)
::check[] == orig(::check[])
stream_ptr[] == orig(stream_ptr[])
stream_ptr[].fp == orig(stream_ptr[].fp)
stream_ptr[].stream_ind == orig(stream_ptr[].stream_ind)
return == ::check[return]
return == orig(::check[post(return)])
size(::default1[]) == size(::base[])
size(::default1[]) == orig(size(::base[]))
size(::next[]) == size(::check[])
size(::next[]) == orig(size(::check[]))
::next[0..return-1] == orig(::check[0..post(return)-1])
::default1 has only one value
::default1[] == [54, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 51, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, -3, -1, -1, -1, -1, -1, -1, -1]
::default1[i] != i
::base has only one value
::base[] == [-32, -96, -105, -93, -94, -87, -1, -97, -86, -1, -99, -1, -72, -1, -80, -82, -1, 53, 43, -1, -1, -1, -1, -1, -1, -1, 133, -1, 233, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, 40, -1, 251, -1, -1, -1, -1, -1]
::base[i] != i
::next has only one value
::next[] == [0, 2, 26, 28, 3, 4, 5, 23, 19, 20, 6, -1, 25, 8, 9, 11, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, -1, 30, -1, 31, 13, 15, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 21, -1, 22, 32, -1, 24, 7, 17, 17, 17, 17, 17, 17, 17, 12, 17, 17, 1, 17, 17, 10, 17, 17, 17, 17, 17, 17, 17, 17, 14, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, -1, 26, 26, 27, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 0, 0, -1, -1, -1, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29]
::next[] elements >= -1
::check has only one value
::check[] == [0, 1, 0, 0, 2, 3, 4, 0, 0, 0, 5, -1, 0, 7, 8, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, -1, 0, 12, 14, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 31, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, -1, -1, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 54, 54, -1, -1, -1, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28]
::check[] elements >= -1
stream_ptr[] contains no nulls and has only one value, of length 1
stream_ptr[] elements has only one value
stream_ptr[] elements != null
stream_ptr[].fp contains no nulls and has only one value, of length 1
stream_ptr[].fp elements has only one value
stream_ptr[].fp elements != null
stream_ptr[i].stream_ind > i
return one of { 0, 1 }
size(::default1[]) == 60
size(::next[]) == 360
::default1[return..] one of { [17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 51, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, -3, -1, -1, -1, -1, -1, -1, -1], [54, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 51, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, -3, -1, -1, -1, -1, -1, -1, -1] }
::default1[return+1..] one of { [17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 51, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, -3, -1, -1, -1, -1, -1, -1, -1], [17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 51, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, -3, -1, -1, -1, -1, -1, -1, -1] }
::default1[0..return] elements one of { 17, 54 }
::default1[0..return] one of { [54], [54, 17] }
::default1[0..return] sorted by >
::default1[0..return-1] elements == 54
::default1[0..return-1] one of { [], [54] }
::base[return..] one of { [-96, -105, -93, -94, -87, -1, -97, -86, -1, -99, -1, -72, -1, -80, -82, -1, 53, 43, -1, -1, -1, -1, -1, -1, -1, 133, -1, 233, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, 40, -1, 251, -1, -1, -1, -1, -1], [-32, -96, -105, -93, -94, -87, -1, -97, -86, -1, -99, -1, -72, -1, -80, -82, -1, 53, 43, -1, -1, -1, -1, -1, -1, -1, 133, -1, 233, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, 40, -1, 251, -1, -1, -1, -1, -1] }
::base[return+1..] one of { [-105, -93, -94, -87, -1, -97, -86, -1, -99, -1, -72, -1, -80, -82, -1, 53, 43, -1, -1, -1, -1, -1, -1, -1, 133, -1, 233, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, 40, -1, 251, -1, -1, -1, -1, -1], [-96, -105, -93, -94, -87, -1, -97, -86, -1, -99, -1, -72, -1, -80, -82, -1, 53, 43, -1, -1, -1, -1, -1, -1, -1, 133, -1, 233, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, 40, -1, 251, -1, -1, -1, -1, -1] }
::base[0..return] elements one of { -96, -32 }
::base[0..return] one of { [-32], [-32, -96] }
::base[0..return] sorted by >
::base[0..return-1] elements == -32
::base[0..return-1] one of { [], [-32] }
::next[return] == 0  (mod 2)
::next[return..] one of { [0, 2, 26, 28, 3, 4, 5, 23, 19, 20, 6, -1, 25, 8, 9, 11, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, -1, 30, -1, 31, 13, 15, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 21, -1, 22, 32, -1, 24, 7, 17, 17, 17, 17, 17, 17, 17, 12, 17, 17, 1, 17, 17, 10, 17, 17, 17, 17, 17, 17, 17, 17, 14, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, -1, 26, 26, 27, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 0, 0, -1, -1, -1, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29], [2, 26, 28, 3, 4, 5, 23, 19, 20, 6, -1, 25, 8, 9, 11, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, -1, 30, -1, 31, 13, 15, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 21, -1, 22, 32, -1, 24, 7, 17, 17, 17, 17, 17, 17, 17, 12, 17, 17, 1, 17, 17, 10, 17, 17, 17, 17, 17, 17, 17, 17, 14, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, -1, 26, 26, 27, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 0, 0, -1, -1, -1, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29] }
::next[return+1..] one of { [2, 26, 28, 3, 4, 5, 23, 19, 20, 6, -1, 25, 8, 9, 11, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, -1, 30, -1, 31, 13, 15, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 21, -1, 22, 32, -1, 24, 7, 17, 17, 17, 17, 17, 17, 17, 12, 17, 17, 1, 17, 17, 10, 17, 17, 17, 17, 17, 17, 17, 17, 14, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, -1, 26, 26, 27, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 0, 0, -1, -1, -1, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29], [26, 28, 3, 4, 5, 23, 19, 20, 6, -1, 25, 8, 9, 11, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, -1, 30, -1, 31, 13, 15, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 21, -1, 22, 32, -1, 24, 7, 17, 17, 17, 17, 17, 17, 17, 12, 17, 17, 1, 17, 17, 10, 17, 17, 17, 17, 17, 17, 17, 17, 14, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, -1, 26, 26, 27, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 0, 0, -1, -1, -1, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29] }
::next[0..return] elements one of { 0, 2 }
::next[0..return] one of { [0], [0, 2] }
::next[0..return] sorted by <
::next[0..return-1] elements == 0
::next[0..return-1] one of { [], [0] }
::check[return..] one of { [0, 1, 0, 0, 2, 3, 4, 0, 0, 0, 5, -1, 0, 7, 8, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, -1, 0, 12, 14, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 31, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, -1, -1, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 54, 54, -1, -1, -1, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28], [1, 0, 0, 2, 3, 4, 0, 0, 0, 5, -1, 0, 7, 8, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, -1, 0, 12, 14, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 31, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, -1, -1, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 54, 54, -1, -1, -1, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28] }
::check[return+1..] one of { [0, 0, 2, 3, 4, 0, 0, 0, 5, -1, 0, 7, 8, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, -1, 0, 12, 14, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 31, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, -1, -1, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 54, 54, -1, -1, -1, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28], [1, 0, 0, 2, 3, 4, 0, 0, 0, 5, -1, 0, 7, 8, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, -1, 0, 12, 14, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 31, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, -1, -1, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 54, 54, -1, -1, -1, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28] }
::check[0..return] elements one of { 0, 1 }
::check[0..return] one of { [0], [0, 1] }
::check[0..return] == (index)
::check[0..return] sorted by <
stream_ptr[0..return-1].stream_ind elements == 6
stream_ptr[0..return-1].stream_ind one of { [], [6] }
::default1[] elements < size(::default1[])-1
::default1[] elements < size(::next[])-1
::default1[] elements > ::base[return]
::base[] < stream_ptr[].stream_ind (lexically)
::base[] <= stream_ptr[].stream_ind (lexically)
::base[] elements < size(::next[])-1
size(stream_ptr[])-1 in ::base[]
::next[] < stream_ptr[].stream_ind (lexically)
::next[] <= stream_ptr[].stream_ind (lexically)
return in ::next[]
::next[] elements < size(::default1[])-1
::next[] elements < size(::next[])-1
size(stream_ptr[])-1 in ::next[]
orig(size(stream_ptr[])) in ::next[]
::next[] elements > ::base[return]
::check[] < stream_ptr[].stream_ind (lexically)
::check[] <= stream_ptr[].stream_ind (lexically)
::check[] elements < size(::default1[])-1
::check[] elements < size(::next[])-1
size(stream_ptr[])-1 in ::check[]
orig(size(stream_ptr[])) in ::check[]
::default1[return] in ::check[]
::check[] elements > ::base[return]
::next[return] in ::check[]
stream_ptr[].stream_ind elements > return
stream_ptr[].stream_ind elements < size(::default1[])-1
stream_ptr[].stream_ind elements < size(::next[])-1
stream_ptr[].stream_ind elements > orig(size(stream_ptr[]))
stream_ptr[].stream_ind elements > ::base[return]
stream_ptr[].stream_ind elements > ::next[return]
return < size(::default1[])-1
return < size(::next[])-1
return >= size(stream_ptr[])-1
return <= orig(size(stream_ptr[]))
return < ::default1[return]
::default1[0..return] elements > return
return > ::base[return]
::base[0..return] elements < return
return <= ::next[return]
return in ::next[return..]
return in ::next[return+1..]
::check[0..return] elements <= return
size(::default1[])-1 > ::default1[return]
size(::default1[])-1 > ::base[return]
::base[0..return] elements < size(::default1[])-1
size(::default1[])-1 > ::next[return]
size(::next[])-1 > ::default1[return]
size(::next[])-1 > ::base[return]
size(::next[])-1 > ::next[return]
size(stream_ptr[])-1 > ::base[return]
size(stream_ptr[])-1 in ::base[return..]
size(stream_ptr[])-1 in ::base[return+1..]
::base[0..return] elements < size(stream_ptr[])-1
size(stream_ptr[])-1 <= ::next[return]
size(stream_ptr[])-1 in ::next[return..]
size(stream_ptr[])-1 in ::next[return+1..]
::next[0..return] elements >= size(stream_ptr[])-1
size(stream_ptr[])-1 in ::next[0..return]
::next[0..return-1] elements == size(stream_ptr[])-1
size(stream_ptr[])-1 in ::check[return..]
size(stream_ptr[])-1 in ::check[return+1..]
::check[0..return] elements >= size(stream_ptr[])-1
size(stream_ptr[])-1 in ::check[0..return]
orig(size(stream_ptr[])) < ::default1[return]
::default1[0..return] elements > orig(size(stream_ptr[]))
orig(size(stream_ptr[])) != ::next[return]
orig(size(stream_ptr[])) in ::next[return..]
orig(size(stream_ptr[])) in ::next[return+1..]
orig(size(stream_ptr[])) in ::check[return..]
::check[0..return] elements <= orig(size(stream_ptr[]))
::default1[0..return] elements >= ::default1[return]
::default1[return] > ::base[return]
::base[0..return] elements < ::default1[return]
::default1[return] > ::next[return]
::next[0..return] elements < ::default1[return]
::default1[return] in ::check[return..]
::default1[return] in ::check[return+1..]
::check[0..return] elements < ::default1[return]
::default1[0..return] > ::base[0..return] (elementwise)
::default1[0..return] elements > ::next[return]
::default1[0..return] > ::next[0..return] (elementwise)
::default1[0..return] is a subset of ::check[return..]
::default1[0..return] is a subset of ::check[return+1..]
::default1[0..return] > ::check[0..return] (elementwise)
::default1[0..return-1] is a subsequence of ::check[return..]
::default1[0..return-1] is a subset of ::check[return..]
::default1[0..return-1] is a subsequence of ::check[return+1..]
::default1[0..return-1] is a subset of ::check[return+1..]
::base[0..return] elements >= ::base[return]
::base[return] < ::next[return]
::next[0..return-1] is a subsequence of ::base[return..]
::next[0..return-1] is a subsequence of ::base[return+1..]
::base[0..return] elements < ::next[return]
::base[0..return] < ::next[0..return] (elementwise)
::base[0..return] < ::check[0..return] (elementwise)
::next[0..return] elements <= ::next[return]
::next[return] in ::check[return..]
::next[return] in ::check[return+1..]
::check[0..return] elements <= ::next[return]
stream_ptr[0..return-1].stream_ind is a subsequence of ::next[return..]
stream_ptr[0..return-1].stream_ind is a subsequence of ::next[return+1..]
::next[0..return] is a subsequence of ::check[return..]
::next[0..return] is a subset of ::check[return..]
::next[0..return] is a subsequence of ::check[return+1..]
::next[0..return] is a subset of ::check[return+1..]
::next[0..return] >= ::check[0..return] (elementwise)
===========================================================================
..is_eof_token():::ENTER
size(::default1[]) == size(::base[])
size(::next[]) == size(::check[])
::default1 has only one value
::default1[] == [54, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 51, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, -3, -1, -1, -1, -1, -1, -1, -1]
::default1[i] != i
::base has only one value
::base[] == [-32, -96, -105, -93, -94, -87, -1, -97, -86, -1, -99, -1, -72, -1, -80, -82, -1, 53, 43, -1, -1, -1, -1, -1, -1, -1, 133, -1, 233, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, 40, -1, 251, -1, -1, -1, -1, -1]
::base[i] != i
::next has only one value
::next[] == [0, 2, 26, 28, 3, 4, 5, 23, 19, 20, 6, -1, 25, 8, 9, 11, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, -1, 30, -1, 31, 13, 15, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 21, -1, 22, 32, -1, 24, 7, 17, 17, 17, 17, 17, 17, 17, 12, 17, 17, 1, 17, 17, 10, 17, 17, 17, 17, 17, 17, 17, 17, 14, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, -1, 26, 26, 27, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 0, 0, -1, -1, -1, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29]
::next[] elements >= -1
::check has only one value
::check[] == [0, 1, 0, 0, 2, 3, 4, 0, 0, 0, 5, -1, 0, 7, 8, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, -1, 0, 12, 14, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 31, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, -1, -1, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 54, 54, -1, -1, -1, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28]
::check[] elements >= -1
t != null
t[] elements != null
t[i].token_id >= i
size(::default1[]) == 60
size(::next[]) == 360
size(t[]) == 1
::default1[] > t[].token_id (lexically)
::default1[] >= t[].token_id (lexically)
::default1[] elements < size(::default1[])-1
::default1[] elements < size(::next[])-1
::base[] < t[].token_id (lexically)
::base[] <= t[].token_id (lexically)
::base[] elements < size(::next[])-1
size(t[])-1 in ::base[]
::next[] is a superset of t[].token_id
t[].token_id is a subsequence of ::next[]
::next[] elements < size(::default1[])-1
::next[] elements < size(::next[])-1
size(t[]) in ::next[]
size(t[])-1 in ::next[]
::check[] elements < size(::default1[])-1
::check[] elements < size(::next[])-1
size(t[]) in ::check[]
size(t[])-1 in ::check[]
t[].token_id elements >= size(t[])-1
===========================================================================
..is_eof_token():::EXIT
::default1 == orig(::default1)
::default1[] == orig(::default1[])
::base == orig(::base)
::base[] == orig(::base[])
::next == orig(::next)
::next[] == orig(::next[])
::check == orig(::check)
::check[] == orig(::check[])
t[] == orig(t[])
t[].token_id == orig(t[].token_id)
return == ::check[return]
return == orig(::check[post(return)])
size(::default1[]) == size(::base[])
size(::default1[]) == orig(size(::base[]))
size(::next[]) == size(::check[])
size(::next[]) == orig(size(::check[]))
::next[0..return-1] == t[0..return-1].token_id
::next[0..return-1] == orig(::check[0..post(return)-1])
::next[0..return-1] == orig(t[0..post(return)-1].token_id)
::default1 has only one value
::default1[] == [54, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 51, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, -3, -1, -1, -1, -1, -1, -1, -1]
::default1[i] != i
::base has only one value
::base[] == [-32, -96, -105, -93, -94, -87, -1, -97, -86, -1, -99, -1, -72, -1, -80, -82, -1, 53, 43, -1, -1, -1, -1, -1, -1, -1, 133, -1, 233, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, 40, -1, 251, -1, -1, -1, -1, -1]
::base[i] != i
::next has only one value
::next[] == [0, 2, 26, 28, 3, 4, 5, 23, 19, 20, 6, -1, 25, 8, 9, 11, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, -1, 30, -1, 31, 13, 15, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 21, -1, 22, 32, -1, 24, 7, 17, 17, 17, 17, 17, 17, 17, 12, 17, 17, 1, 17, 17, 10, 17, 17, 17, 17, 17, 17, 17, 17, 14, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, -1, 26, 26, 27, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 0, 0, -1, -1, -1, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29]
::next[] elements >= -1
::check has only one value
::check[] == [0, 1, 0, 0, 2, 3, 4, 0, 0, 0, 5, -1, 0, 7, 8, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, -1, 0, 12, 14, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 31, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, -1, -1, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 54, 54, -1, -1, -1, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28]
::check[] elements >= -1
t[] elements != null
t[i].token_id >= i
return one of { 0, 1 }
size(::default1[]) == 60
size(::next[]) == 360
::default1[return..] one of { [17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 51, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, -3, -1, -1, -1, -1, -1, -1, -1], [54, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 51, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, -3, -1, -1, -1, -1, -1, -1, -1] }
::default1[return+1..] one of { [17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 51, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, -3, -1, -1, -1, -1, -1, -1, -1], [17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 51, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, -3, -1, -1, -1, -1, -1, -1, -1] }
::default1[0..return] elements one of { 17, 54 }
::default1[0..return] one of { [54], [54, 17] }
::default1[0..return] sorted by >
::default1[0..return-1] elements == 54
::default1[0..return-1] one of { [], [54] }
::base[return..] one of { [-96, -105, -93, -94, -87, -1, -97, -86, -1, -99, -1, -72, -1, -80, -82, -1, 53, 43, -1, -1, -1, -1, -1, -1, -1, 133, -1, 233, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, 40, -1, 251, -1, -1, -1, -1, -1], [-32, -96, -105, -93, -94, -87, -1, -97, -86, -1, -99, -1, -72, -1, -80, -82, -1, 53, 43, -1, -1, -1, -1, -1, -1, -1, 133, -1, 233, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, 40, -1, 251, -1, -1, -1, -1, -1] }
::base[return+1..] one of { [-105, -93, -94, -87, -1, -97, -86, -1, -99, -1, -72, -1, -80, -82, -1, 53, 43, -1, -1, -1, -1, -1, -1, -1, 133, -1, 233, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, 40, -1, 251, -1, -1, -1, -1, -1], [-96, -105, -93, -94, -87, -1, -97, -86, -1, -99, -1, -72, -1, -80, -82, -1, 53, 43, -1, -1, -1, -1, -1, -1, -1, 133, -1, 233, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, 40, -1, 251, -1, -1, -1, -1, -1] }
::base[0..return] elements one of { -96, -32 }
::base[0..return] one of { [-32], [-32, -96] }
::base[0..return] sorted by >
::base[0..return-1] elements == -32
::base[0..return-1] one of { [], [-32] }
::next[return] == 0  (mod 2)
::next[return..] one of { [0, 2, 26, 28, 3, 4, 5, 23, 19, 20, 6, -1, 25, 8, 9, 11, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, -1, 30, -1, 31, 13, 15, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 21, -1, 22, 32, -1, 24, 7, 17, 17, 17, 17, 17, 17, 17, 12, 17, 17, 1, 17, 17, 10, 17, 17, 17, 17, 17, 17, 17, 17, 14, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, -1, 26, 26, 27, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 0, 0, -1, -1, -1, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29], [2, 26, 28, 3, 4, 5, 23, 19, 20, 6, -1, 25, 8, 9, 11, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, -1, 30, -1, 31, 13, 15, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 21, -1, 22, 32, -1, 24, 7, 17, 17, 17, 17, 17, 17, 17, 12, 17, 17, 1, 17, 17, 10, 17, 17, 17, 17, 17, 17, 17, 17, 14, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, -1, 26, 26, 27, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 0, 0, -1, -1, -1, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29] }
::next[return+1..] one of { [2, 26, 28, 3, 4, 5, 23, 19, 20, 6, -1, 25, 8, 9, 11, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, -1, 30, -1, 31, 13, 15, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 21, -1, 22, 32, -1, 24, 7, 17, 17, 17, 17, 17, 17, 17, 12, 17, 17, 1, 17, 17, 10, 17, 17, 17, 17, 17, 17, 17, 17, 14, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, -1, 26, 26, 27, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 0, 0, -1, -1, -1, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29], [26, 28, 3, 4, 5, 23, 19, 20, 6, -1, 25, 8, 9, 11, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, -1, 30, -1, 31, 13, 15, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 21, -1, 22, 32, -1, 24, 7, 17, 17, 17, 17, 17, 17, 17, 12, 17, 17, 1, 17, 17, 10, 17, 17, 17, 17, 17, 17, 17, 17, 14, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, -1, 26, 26, 27, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 0, 0, -1, -1, -1, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29] }
::next[0..return] elements one of { 0, 2 }
::next[0..return] one of { [0], [0, 2] }
::next[0..return] sorted by <
::next[0..return-1] elements == 0
::next[0..return-1] one of { [], [0] }
::check[return..] one of { [0, 1, 0, 0, 2, 3, 4, 0, 0, 0, 5, -1, 0, 7, 8, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, -1, 0, 12, 14, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 31, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, -1, -1, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 54, 54, -1, -1, -1, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28], [1, 0, 0, 2, 3, 4, 0, 0, 0, 5, -1, 0, 7, 8, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, -1, 0, 12, 14, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 31, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, -1, -1, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 54, 54, -1, -1, -1, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28] }
::check[return+1..] one of { [0, 0, 2, 3, 4, 0, 0, 0, 5, -1, 0, 7, 8, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, -1, 0, 12, 14, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 31, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, -1, -1, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 54, 54, -1, -1, -1, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28], [1, 0, 0, 2, 3, 4, 0, 0, 0, 5, -1, 0, 7, 8, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, -1, 0, 12, 14, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 31, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, -1, -1, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 54, 54, -1, -1, -1, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28] }
::check[0..return] elements one of { 0, 1 }
::check[0..return] one of { [0], [0, 1] }
::check[0..return] == (index)
::check[0..return] sorted by <
t[0..return-1] elements has only one value
t[return..].token_id > (index)
::default1[] > t[].token_id (lexically)
::default1[] >= t[].token_id (lexically)
::default1[] elements < size(::default1[])-1
::default1[] elements < size(::next[])-1
::default1[] elements > ::base[return]
::base[] < t[].token_id (lexically)
::base[] <= t[].token_id (lexically)
::base[] elements < size(::next[])-1
size(t[])-1 in ::base[]
::next[] is a superset of t[].token_id
return in ::next[]
::next[] elements < size(::default1[])-1
::next[] elements < size(::next[])-1
size(t[])-1 in ::next[]
orig(size(t[])) in ::next[]
::next[] elements > ::base[return]
::check[] elements < size(::default1[])-1
::check[] elements < size(::next[])-1
size(t[])-1 in ::check[]
orig(size(t[])) in ::check[]
::default1[return] in ::check[]
::check[] elements > ::base[return]
::next[return] in ::check[]
t[].token_id elements >= size(t[])-1
t[].token_id elements < ::default1[return]
t[].token_id is a subsequence of ::next[return..]
t[].token_id is a subset of ::next[return..]
t[].token_id is a subsequence of ::next[return+1..]
t[].token_id is a subset of ::next[return+1..]
return < size(::default1[])-1
return < size(::next[])-1
return >= size(t[])-1
return <= orig(size(t[]))
return < ::default1[return]
::default1[0..return] elements > return
return > ::base[return]
::base[0..return] elements < return
return <= ::next[return]
return in ::next[return..]
return in ::next[return+1..]
::check[0..return] elements <= return
t[return..].token_id elements > return
size(::default1[])-1 > ::default1[return]
size(::default1[])-1 > ::base[return]
::base[0..return] elements < size(::default1[])-1
size(::default1[])-1 > ::next[return]
size(::next[])-1 > ::default1[return]
size(::next[])-1 > ::base[return]
size(::next[])-1 > ::next[return]
size(t[])-1 > ::base[return]
size(t[])-1 in ::base[return..]
size(t[])-1 in ::base[return+1..]
::base[0..return] elements < size(t[])-1
size(t[])-1 <= ::next[return]
size(t[])-1 in ::next[return..]
size(t[])-1 in ::next[return+1..]
::next[0..return] elements >= size(t[])-1
size(t[])-1 in ::next[0..return]
::next[0..return-1] elements == size(t[])-1
size(t[])-1 in ::check[return..]
size(t[])-1 in ::check[return+1..]
::check[0..return] elements >= size(t[])-1
size(t[])-1 in ::check[0..return]
orig(size(t[])) < ::default1[return]
::default1[0..return] elements > orig(size(t[]))
orig(size(t[])) != ::next[return]
orig(size(t[])) in ::next[return..]
orig(size(t[])) in ::next[return+1..]
orig(size(t[])) in ::check[return..]
::check[0..return] elements <= orig(size(t[]))
t[return..].token_id elements > orig(size(t[]))
::default1[0..return] elements >= ::default1[return]
::default1[return] > ::base[return]
::base[0..return] elements < ::default1[return]
::default1[return] > ::next[return]
::next[0..return] elements < ::default1[return]
::default1[return] in ::check[return..]
::default1[return] in ::check[return+1..]
::check[0..return] elements < ::default1[return]
::default1[0..return] > ::base[0..return] (elementwise)
::default1[0..return] elements > ::next[return]
::default1[0..return] > ::next[0..return] (elementwise)
::default1[0..return] is a subset of ::check[return..]
::default1[0..return] is a subset of ::check[return+1..]
::default1[0..return] > ::check[0..return] (elementwise)
::default1[0..return-1] is a subsequence of ::check[return..]
::default1[0..return-1] is a subset of ::check[return..]
::default1[0..return-1] is a subsequence of ::check[return+1..]
::default1[0..return-1] is a subset of ::check[return+1..]
::base[0..return] elements >= ::base[return]
::base[return] < ::next[return]
::next[0..return-1] is a subsequence of ::base[return..]
::next[0..return-1] is a subsequence of ::base[return+1..]
::base[0..return] elements < ::next[return]
::base[0..return] < ::next[0..return] (elementwise)
::base[0..return] < ::check[0..return] (elementwise)
::next[0..return] elements <= ::next[return]
::next[return] in ::check[return..]
::next[return] in ::check[return+1..]
::check[0..return] elements <= ::next[return]
t[return..].token_id elements > ::next[return]
t[return..].token_id is a subsequence of ::next[return..]
t[return..].token_id is a subsequence of ::next[return+1..]
::next[0..return] is a subsequence of ::check[return..]
::next[0..return] is a subset of ::check[return..]
::next[0..return] is a subsequence of ::check[return+1..]
::next[0..return] is a subset of ::check[return+1..]
::next[0..return] >= ::check[0..return] (elementwise)
===========================================================================
..open_character_stream():::ENTER
size(::default1[]) == size(::base[])
size(::next[]) == size(::check[])
::default1 has only one value
::default1[] == [54, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 51, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, -3, -1, -1, -1, -1, -1, -1, -1]
::base has only one value
::base[] == [-32, -96, -105, -93, -94, -87, -1, -97, -86, -1, -99, -1, -72, -1, -80, -82, -1, 53, 43, -1, -1, -1, -1, -1, -1, -1, 133, -1, 233, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, 40, -1, 251, -1, -1, -1, -1, -1]
::next has only one value
::next[] == [0, 2, 26, 28, 3, 4, 5, 23, 19, 20, 6, -1, 25, 8, 9, 11, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, -1, 30, -1, 31, 13, 15, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 21, -1, 22, 32, -1, 24, 7, 17, 17, 17, 17, 17, 17, 17, 12, 17, 17, 1, 17, 17, 10, 17, 17, 17, 17, 17, 17, 17, 17, 14, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, -1, 26, 26, 27, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 0, 0, -1, -1, -1, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29]
::next[] elements >= -1
::check has only one value
::check[] == [0, 1, 0, 0, 2, 3, 4, 0, 0, 0, 5, -1, 0, 7, 8, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, -1, 0, 12, 14, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 31, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, -1, -1, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 54, 54, -1, -1, -1, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28]
::check[] elements >= -1
size(::default1[]) == 60
size(::next[]) == 360
===========================================================================
..open_character_stream():::EXIT
::default1 == orig(::default1)
::default1[] == orig(::default1[])
::base == orig(::base)
::base[] == orig(::base[])
::next == orig(::next)
::next[] == orig(::next[])
::check == orig(::check)
::check[] == orig(::check[])
size(::default1[]) == size(::base[])
size(::default1[]) == orig(size(::base[]))
size(::next[]) == size(::check[])
size(::next[]) == orig(size(::check[]))
::default1 has only one value
::default1[] == [54, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 51, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, -3, -1, -1, -1, -1, -1, -1, -1]
::base has only one value
::base[] == [-32, -96, -105, -93, -94, -87, -1, -97, -86, -1, -99, -1, -72, -1, -80, -82, -1, 53, 43, -1, -1, -1, -1, -1, -1, -1, 133, -1, 233, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, 40, -1, 251, -1, -1, -1, -1, -1]
::next has only one value
::next[] == [0, 2, 26, 28, 3, 4, 5, 23, 19, 20, 6, -1, 25, 8, 9, 11, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, -1, 30, -1, 31, 13, 15, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 21, -1, 22, 32, -1, 24, 7, 17, 17, 17, 17, 17, 17, 17, 12, 17, 17, 1, 17, 17, 10, 17, 17, 17, 17, 17, 17, 17, 17, 14, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, -1, 26, 26, 27, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 0, 0, -1, -1, -1, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29]
::next[] elements >= -1
::check has only one value
::check[] == [0, 1, 0, 0, 2, 3, 4, 0, 0, 0, 5, -1, 0, 7, 8, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, -1, 0, 12, 14, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 31, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, -1, -1, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 54, 54, -1, -1, -1, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28]
::check[] elements >= -1
return has only one value
return[] contains no nulls and has only one value, of length 1
return[] elements has only one value
return[].fp contains no nulls and has only one value, of length 1
return[].fp elements has only one value
return[].stream_ind == [5]
return[].stream_ind elements == 5
size(::default1[]) == 60
size(::next[]) == 360
size(return[]) == 1
size(return[])-1 in ::base[]
::next[] is a superset of return[].stream_ind
return[].stream_ind is a subsequence of ::next[]
size(return[]) in ::next[]
size(return[])-1 in ::next[]
::check[] is a superset of return[].stream_ind
return[].stream_ind is a subsequence of ::check[]
size(return[]) in ::check[]
size(return[])-1 in ::check[]
===========================================================================
..open_token_stream():::ENTER
size(::default1[]) == size(::base[])
size(::next[]) == size(::check[])
::default1 has only one value
::default1[] == [54, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 51, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, -3, -1, -1, -1, -1, -1, -1, -1]
::base has only one value
::base[] == [-32, -96, -105, -93, -94, -87, -1, -97, -86, -1, -99, -1, -72, -1, -80, -82, -1, 53, 43, -1, -1, -1, -1, -1, -1, -1, 133, -1, 233, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, 40, -1, 251, -1, -1, -1, -1, -1]
::next has only one value
::next[] == [0, 2, 26, 28, 3, 4, 5, 23, 19, 20, 6, -1, 25, 8, 9, 11, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, -1, 30, -1, 31, 13, 15, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 21, -1, 22, 32, -1, 24, 7, 17, 17, 17, 17, 17, 17, 17, 12, 17, 17, 1, 17, 17, 10, 17, 17, 17, 17, 17, 17, 17, 17, 14, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, -1, 26, 26, 27, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 0, 0, -1, -1, -1, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29]
::next[] elements >= -1
::check has only one value
::check[] == [0, 1, 0, 0, 2, 3, 4, 0, 0, 0, 5, -1, 0, 7, 8, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, -1, 0, 12, 14, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 31, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, -1, -1, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 54, 54, -1, -1, -1, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28]
::check[] elements >= -1
size(::default1[]) == 60
size(::next[]) == 360
===========================================================================
..open_token_stream():::EXIT
::default1 == orig(::default1)
::default1[] == orig(::default1[])
::base == orig(::base)
::base[] == orig(::base[])
::next == orig(::next)
::next[] == orig(::next[])
::check == orig(::check)
::check[] == orig(::check[])
size(::default1[]) == size(::base[])
size(::default1[]) == orig(size(::base[]))
size(::next[]) == size(::check[])
size(::next[]) == orig(size(::check[]))
size(return[]) == size(return[].ch_stream[0])
::default1 has only one value
::default1[] == [54, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 51, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, -3, -1, -1, -1, -1, -1, -1, -1]
::base has only one value
::base[] == [-32, -96, -105, -93, -94, -87, -1, -97, -86, -1, -99, -1, -72, -1, -80, -82, -1, 53, 43, -1, -1, -1, -1, -1, -1, -1, 133, -1, 233, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, 40, -1, 251, -1, -1, -1, -1, -1]
::next has only one value
::next[] == [0, 2, 26, 28, 3, 4, 5, 23, 19, 20, 6, -1, 25, 8, 9, 11, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, -1, 30, -1, 31, 13, 15, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 21, -1, 22, 32, -1, 24, 7, 17, 17, 17, 17, 17, 17, 17, 12, 17, 17, 1, 17, 17, 10, 17, 17, 17, 17, 17, 17, 17, 17, 14, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, -1, 26, 26, 27, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 0, 0, -1, -1, -1, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29]
::next[] elements >= -1
::check has only one value
::check[] == [0, 1, 0, 0, 2, 3, 4, 0, 0, 0, 5, -1, 0, 7, 8, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, -1, 0, 12, 14, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 31, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, -1, -1, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 54, 54, -1, -1, -1, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28]
::check[] elements >= -1
return has only one value
return[] contains no nulls and has only one value, of length 1
return[] elements has only one value
return[].ch_stream contains no nulls and has only one value, of length 1
return[].ch_stream elements has only one value
return[].ch_stream[0] contains no nulls and has only one value, of length 1
return[].ch_stream[0] elements has only one value
return[].ch_stream->fp contains no nulls and has only one value, of length 1
return[].ch_stream->fp elements has only one value
return[].ch_stream->stream_ind == [5]
return[].ch_stream->stream_ind elements == 5
size(::default1[]) == 60
size(::next[]) == 360
size(return[]) == 1
size(return[])-1 in ::base[]
::next[] is a superset of return[].ch_stream->stream_ind
return[].ch_stream->stream_ind is a subsequence of ::next[]
size(return[]) in ::next[]
size(return[])-1 in ::next[]
::check[] is a superset of return[].ch_stream->stream_ind
return[].ch_stream->stream_ind is a subsequence of ::check[]
size(return[]) in ::check[]
size(return[])-1 in ::check[]
===========================================================================
..print_token():::ENTER
size(::default1[]) == size(::base[])
size(::next[]) == size(::check[])
::default1 has only one value
::default1[] == [54, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 51, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, -3, -1, -1, -1, -1, -1, -1, -1]
::default1[i] != i
::base has only one value
::base[] == [-32, -96, -105, -93, -94, -87, -1, -97, -86, -1, -99, -1, -72, -1, -80, -82, -1, 53, 43, -1, -1, -1, -1, -1, -1, -1, 133, -1, 233, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, 40, -1, 251, -1, -1, -1, -1, -1]
::base[i] != i
::next has only one value
::next[] == [0, 2, 26, 28, 3, 4, 5, 23, 19, 20, 6, -1, 25, 8, 9, 11, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, -1, 30, -1, 31, 13, 15, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 21, -1, 22, 32, -1, 24, 7, 17, 17, 17, 17, 17, 17, 17, 12, 17, 17, 1, 17, 17, 10, 17, 17, 17, 17, 17, 17, 17, 17, 14, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, -1, 26, 26, 27, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 0, 0, -1, -1, -1, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29]
::next[] elements >= -1
::check has only one value
::check[] == [0, 1, 0, 0, 2, 3, 4, 0, 0, 0, 5, -1, 0, 7, 8, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, -1, 0, 12, 14, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 31, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, -1, -1, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 54, 54, -1, -1, -1, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28]
::check[] elements >= -1
token_ptr != null
token_ptr[] elements != null
token_ptr[i].token_id >= i
size(::default1[]) == 60
size(::next[]) == 360
size(token_ptr[]) == 1
::default1[] > token_ptr[].token_id (lexically)
::default1[] >= token_ptr[].token_id (lexically)
::default1[] elements < size(::default1[])-1
::default1[] elements < size(::next[])-1
::base[] < token_ptr[].token_id (lexically)
::base[] <= token_ptr[].token_id (lexically)
::base[] elements < size(::next[])-1
size(token_ptr[])-1 in ::base[]
::next[] is a superset of token_ptr[].token_id
token_ptr[].token_id is a subsequence of ::next[]
::next[] elements < size(::default1[])-1
::next[] elements < size(::next[])-1
size(token_ptr[]) in ::next[]
size(token_ptr[])-1 in ::next[]
::check[] elements < size(::default1[])-1
::check[] elements < size(::next[])-1
size(token_ptr[]) in ::check[]
size(token_ptr[])-1 in ::check[]
token_ptr[].token_id elements >= size(token_ptr[])-1
===========================================================================
..print_token():::EXIT
::default1 == orig(::default1)
::default1[] == orig(::default1[])
::base == orig(::base)
::base[] == orig(::base[])
::next == orig(::next)
::next[] == orig(::next[])
::check == orig(::check)
::check[] == orig(::check[])
token_ptr[] == orig(token_ptr[])
token_ptr[].token_id == orig(token_ptr[].token_id)
return == orig(size(token_ptr[]))
return == ::check[return]
return == orig(::check[post(return)])
size(::default1[]) == size(::base[])
size(::default1[]) == orig(size(::base[]))
size(::next[]) == size(::check[])
size(::next[]) == orig(size(::check[]))
size(token_ptr[])-1 == ::next[return-1]
size(token_ptr[])-1 == ::check[return-1]
size(token_ptr[])-1 == orig(::next[post(return)-1])
size(token_ptr[])-1 == orig(::check[post(return)-1])
::next[0..return-1] == orig(::check[0..post(return)-1])
::default1 has only one value
::default1[] == [54, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 51, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, -3, -1, -1, -1, -1, -1, -1, -1]
::default1[i] != i
::base has only one value
::base[] == [-32, -96, -105, -93, -94, -87, -1, -97, -86, -1, -99, -1, -72, -1, -80, -82, -1, 53, 43, -1, -1, -1, -1, -1, -1, -1, 133, -1, 233, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, 40, -1, 251, -1, -1, -1, -1, -1]
::base[i] != i
::next has only one value
::next[] == [0, 2, 26, 28, 3, 4, 5, 23, 19, 20, 6, -1, 25, 8, 9, 11, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, -1, 30, -1, 31, 13, 15, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 21, -1, 22, 32, -1, 24, 7, 17, 17, 17, 17, 17, 17, 17, 12, 17, 17, 1, 17, 17, 10, 17, 17, 17, 17, 17, 17, 17, 17, 14, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, -1, 26, 26, 27, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 0, 0, -1, -1, -1, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29]
::next[] elements >= -1
::check has only one value
::check[] == [0, 1, 0, 0, 2, 3, 4, 0, 0, 0, 5, -1, 0, 7, 8, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, -1, 0, 12, 14, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 31, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, -1, -1, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 54, 54, -1, -1, -1, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28]
::check[] elements >= -1
token_ptr[] elements != null
token_ptr[i].token_id >= i
return == 1
size(::default1[]) == 60
size(::next[]) == 360
::default1[return] == 17
::default1[return..] == [17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 51, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, -3, -1, -1, -1, -1, -1, -1, -1]
::default1[return+1..] == [17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 51, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, -3, -1, -1, -1, -1, -1, -1, -1]
::default1[0..return] == [54, 17]
::default1[0..return] elements one of { 17, 54 }
::default1[0..return] sorted by >
::default1[0..return-1] == [54]
::default1[0..return-1] elements == 54
::base[return] == -96
::base[return..] == [-96, -105, -93, -94, -87, -1, -97, -86, -1, -99, -1, -72, -1, -80, -82, -1, 53, 43, -1, -1, -1, -1, -1, -1, -1, 133, -1, 233, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, 40, -1, 251, -1, -1, -1, -1, -1]
::base[return+1..] == [-105, -93, -94, -87, -1, -97, -86, -1, -99, -1, -72, -1, -80, -82, -1, 53, 43, -1, -1, -1, -1, -1, -1, -1, 133, -1, 233, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, 40, -1, 251, -1, -1, -1, -1, -1]
::base[0..return] == [-32, -96]
::base[0..return] elements one of { -96, -32 }
::base[0..return] sorted by >
::base[0..return-1] == [-32]
::base[0..return-1] elements == -32
::next[return] == 2
::next[return..] == [2, 26, 28, 3, 4, 5, 23, 19, 20, 6, -1, 25, 8, 9, 11, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, -1, 30, -1, 31, 13, 15, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 21, -1, 22, 32, -1, 24, 7, 17, 17, 17, 17, 17, 17, 17, 12, 17, 17, 1, 17, 17, 10, 17, 17, 17, 17, 17, 17, 17, 17, 14, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, -1, 26, 26, 27, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 0, 0, -1, -1, -1, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29]
::next[return+1..] == [26, 28, 3, 4, 5, 23, 19, 20, 6, -1, 25, 8, 9, 11, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, -1, 30, -1, 31, 13, 15, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 21, -1, 22, 32, -1, 24, 7, 17, 17, 17, 17, 17, 17, 17, 12, 17, 17, 1, 17, 17, 10, 17, 17, 17, 17, 17, 17, 17, 17, 14, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, -1, 26, 26, 27, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 0, 0, -1, -1, -1, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29]
::next[0..return] == [0, 2]
::next[0..return] elements one of { 0, 2 }
::next[0..return] sorted by <
::next[0..return-1] == [0]
::next[0..return-1] elements == 0
::check[return..] == [1, 0, 0, 2, 3, 4, 0, 0, 0, 5, -1, 0, 7, 8, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, -1, 0, 12, 14, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 31, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, -1, -1, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 54, 54, -1, -1, -1, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28]
::check[return..] != (index)
::check[return+1..] == [0, 0, 2, 3, 4, 0, 0, 0, 5, -1, 0, 7, 8, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, -1, 0, 12, 14, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 31, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, -1, -1, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 54, 54, -1, -1, -1, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28]
::check[0..return] == [0, 1]
::check[0..return] elements one of { 0, 1 }
::check[0..return] == (index)
::check[0..return] sorted by <
token_ptr[return..] == []
token_ptr[return..].token_id == []
::default1[] elements < size(::default1[])-1
::default1[] elements < size(::next[])-1
::default1[] elements <= ::default1[return-1]
::default1[] elements > ::base[return]
::default1[] elements > ::base[return-1]
::base[] elements < size(::next[])-1
size(token_ptr[])-1 in ::base[]
return in ::next[]
::next[] elements < size(::default1[])-1
::next[] elements < size(::next[])-1
::default1[return] in ::next[]
::next[] elements < ::default1[return-1]
::next[] elements > ::base[return]
::next[] elements > ::base[return-1]
::check[] elements < size(::default1[])-1
::check[] elements < size(::next[])-1
::default1[return] in ::check[]
::check[] elements <= ::default1[return-1]
::default1[return-1] in ::check[]
::check[] elements > ::base[return]
::check[] elements > ::base[return-1]
::next[return] in ::check[]
token_ptr[] elements == token_ptr[return-1]
token_ptr[].token_id elements >= size(token_ptr[])-1
token_ptr[].token_id < ::default1[0..return-1] (elementwise)
token_ptr[].token_id > ::base[0..return-1] (elementwise)
token_ptr[].token_id is a subsequence of ::next[return..]
token_ptr[].token_id is a subset of ::next[return..]
token_ptr[].token_id is a subsequence of ::next[return+1..]
token_ptr[].token_id is a subset of ::next[return+1..]
token_ptr[].token_id >= ::next[0..return-1] (elementwise)
token_ptr[].token_id elements == token_ptr[return-1].token_id
::default1[0..return] elements > return
return in ::next[return..]
return in ::next[return+1..]
::check[0..return] elements <= return
return != token_ptr[return-1].token_id
::base[0..return] elements < size(::default1[])-1
size(::default1[])-1 > token_ptr[return-1].token_id
size(::next[])-1 > token_ptr[return-1].token_id
size(token_ptr[])-1 in ::base[return..]
size(token_ptr[])-1 in ::base[return+1..]
::base[0..return] elements < size(token_ptr[])-1
::next[0..return] elements >= size(token_ptr[])-1
::next[0..return-1] elements == size(token_ptr[])-1
::check[0..return] elements >= size(token_ptr[])-1
size(token_ptr[])-1 <= token_ptr[return-1].token_id
::default1[0..return] elements >= ::default1[return]
::base[0..return] elements < ::default1[return]
::default1[return] in ::next[return..]
::default1[return] in ::next[return+1..]
::next[0..return] elements < ::default1[return]
::default1[return] in ::check[return..]
::default1[return] in ::check[return+1..]
::check[0..return] elements < ::default1[return]
(token_ptr[return-1].token_id >> ::default1[return] == 0)
::default1[return..] elements < ::default1[return-1]
::default1[0..return-1] elements == ::default1[return-1]
::base[0..return] elements < ::default1[return-1]
::default1[return-1] in ::check[return..]
::default1[return-1] in ::check[return+1..]
::check[0..return] elements < ::default1[return-1]
::default1[return-1] > token_ptr[return-1].token_id
::default1[0..return] > ::base[0..return] (elementwise)
::default1[0..return] elements > ::next[return]
::default1[0..return] > ::next[0..return] (elementwise)
::default1[0..return] is a subset of ::check[return..]
::default1[0..return] is a subset of ::check[return+1..]
::default1[0..return] > ::check[0..return] (elementwise)
::default1[0..return-1] > ::base[0..return-1] (elementwise)
::default1[0..return-1] > ::next[0..return-1] (elementwise)
::default1[0..return-1] is a subsequence of ::check[return..]
::default1[0..return-1] is a subset of ::check[return..]
::default1[0..return-1] is a subsequence of ::check[return+1..]
::default1[0..return-1] is a subset of ::check[return+1..]
::base[0..return] elements >= ::base[return]
::base[return] < token_ptr[return-1].token_id
::base[0..return] elements <= ::base[return-1]
::base[0..return-1] elements == ::base[return-1]
::base[return-1] < token_ptr[return-1].token_id
::next[0..return-1] is a subsequence of ::base[return..]
::next[0..return-1] is a subsequence of ::base[return+1..]
::base[0..return] elements < ::next[return]
::base[0..return] < ::next[0..return] (elementwise)
::base[0..return] < ::check[0..return] (elementwise)
::base[0..return] elements < token_ptr[return-1].token_id
::base[0..return-1] < ::next[0..return-1] (elementwise)
::next[0..return] elements <= ::next[return]
::next[return] in ::check[return..]
::next[return] in ::check[return+1..]
::check[0..return] elements < ::next[return]
::next[return] != token_ptr[return-1].token_id
::next[0..return] is a subsequence of ::check[return..]
::next[0..return] is a subset of ::check[return..]
::next[0..return] is a subsequence of ::check[return+1..]
::next[0..return] is a subset of ::check[return+1..]
::next[0..return] >= ::check[0..return] (elementwise)
size(token_ptr[])-1 == (token_ptr[return-1].token_id / ::base[return])
===========================================================================
..unget_char():::ENTER
size(::default1[]) == size(::base[])
size(::next[]) == size(::check[])
::default1[ch] == ::default1[ch-1]
::default1 has only one value
::default1[] == [54, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 51, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, -3, -1, -1, -1, -1, -1, -1, -1]
::default1[i] != i
::base has only one value
::base[] == [-32, -96, -105, -93, -94, -87, -1, -97, -86, -1, -99, -1, -72, -1, -80, -82, -1, 53, 43, -1, -1, -1, -1, -1, -1, -1, 133, -1, 233, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, 40, -1, 251, -1, -1, -1, -1, -1]
::base[i] != i
::next has only one value
::next[] == [0, 2, 26, 28, 3, 4, 5, 23, 19, 20, 6, -1, 25, 8, 9, 11, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, -1, 30, -1, 31, 13, 15, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 21, -1, 22, 32, -1, 24, 7, 17, 17, 17, 17, 17, 17, 17, 12, 17, 17, 1, 17, 17, 10, 17, 17, 17, 17, 17, 17, 17, 17, 14, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, -1, 26, 26, 27, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 0, 0, -1, -1, -1, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29]
::next[] elements >= -1
::check has only one value
::check[] == [0, 1, 0, 0, 2, 3, 4, 0, 0, 0, 5, -1, 0, 7, 8, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, -1, 0, 12, 14, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 31, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, -1, -1, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 54, 54, -1, -1, -1, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28]
::check[] elements >= -1
ch one of { 10, 32 }
stream_ptr has only one value
stream_ptr != null
stream_ptr[] contains no nulls and has only one value, of length 1
stream_ptr[] elements has only one value
stream_ptr[] elements != null
stream_ptr[].fp contains no nulls and has only one value, of length 1
stream_ptr[].fp elements has only one value
stream_ptr[].fp elements != null
stream_ptr[i].stream_ind > i
size(::default1[]) == 60
size(::next[]) == 360
size(stream_ptr[]) == 1
::default1[ch] one of { -1, 17 }
::default1[ch..] one of { [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, -3, -1, -1, -1, -1, -1, -1, -1], [17, 17, 17, 17, 17, 17, 17, 51, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, -3, -1, -1, -1, -1, -1, -1, -1] }
::default1[ch+1..] one of { [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, -3, -1, -1, -1, -1, -1, -1, -1], [17, 17, 17, 17, 17, 17, 51, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, -3, -1, -1, -1, -1, -1, -1, -1] }
::default1[0..ch] one of { [54, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17], [54, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 51, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] }
::default1[0..ch-1] one of { [54, 17, 17, 17, 17, 17, 17, 17, 17, 17], [54, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 51, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] }
::base[ch] one of { -99, -1 }
::base[ch-1] one of { -1, 0 }
::base[ch..] one of { [-99, -1, -72, -1, -80, -82, -1, 53, 43, -1, -1, -1, -1, -1, -1, -1, 133, -1, 233, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, 40, -1, 251, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, 40, -1, 251, -1, -1, -1, -1, -1] }
::base[ch+1..] one of { [-1, -72, -1, -80, -82, -1, 53, 43, -1, -1, -1, -1, -1, -1, -1, 133, -1, 233, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, 40, -1, 251, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, 40, -1, 251, -1, -1, -1, -1, -1] }
::base[0..ch] one of { [-32, -96, -105, -93, -94, -87, -1, -97, -86, -1, -99], [-32, -96, -105, -93, -94, -87, -1, -97, -86, -1, -99, -1, -72, -1, -80, -82, -1, 53, 43, -1, -1, -1, -1, -1, -1, -1, 133, -1, 233, -1, -1, 0, -1] }
::base[0..ch-1] one of { [-32, -96, -105, -93, -94, -87, -1, -97, -86, -1], [-32, -96, -105, -93, -94, -87, -1, -97, -86, -1, -99, -1, -72, -1, -80, -82, -1, 53, 43, -1, -1, -1, -1, -1, -1, -1, 133, -1, 233, -1, -1, 0] }
::next[ch] one of { 6, 16 }
::next[ch-1] one of { 15, 20 }
::next[ch-1] == 0  (mod 5)
::next[ch..] one of { [6, -1, 25, 8, 9, 11, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, -1, 30, -1, 31, 13, 15, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 21, -1, 22, 32, -1, 24, 7, 17, 17, 17, 17, 17, 17, 17, 12, 17, 17, 1, 17, 17, 10, 17, 17, 17, 17, 17, 17, 17, 17, 14, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, -1, 26, 26, 27, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 0, 0, -1, -1, -1, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29], [16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 21, -1, 22, 32, -1, 24, 7, 17, 17, 17, 17, 17, 17, 17, 12, 17, 17, 1, 17, 17, 10, 17, 17, 17, 17, 17, 17, 17, 17, 14, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, -1, 26, 26, 27, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 0, 0, -1, -1, -1, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29] }
::next[ch+1..] one of { [-1, 25, 8, 9, 11, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, -1, 30, -1, 31, 13, 15, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 21, -1, 22, 32, -1, 24, 7, 17, 17, 17, 17, 17, 17, 17, 12, 17, 17, 1, 17, 17, 10, 17, 17, 17, 17, 17, 17, 17, 17, 14, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, -1, 26, 26, 27, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 0, 0, -1, -1, -1, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29], [17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 21, -1, 22, 32, -1, 24, 7, 17, 17, 17, 17, 17, 17, 17, 12, 17, 17, 1, 17, 17, 10, 17, 17, 17, 17, 17, 17, 17, 17, 14, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, -1, 26, 26, 27, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 0, 0, -1, -1, -1, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29] }
::next[0..ch] one of { [0, 2, 26, 28, 3, 4, 5, 23, 19, 20, 6], [0, 2, 26, 28, 3, 4, 5, 23, 19, 20, 6, -1, 25, 8, 9, 11, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, -1, 30, -1, 31, 13, 15, 16] }
::next[0..ch-1] one of { [0, 2, 26, 28, 3, 4, 5, 23, 19, 20], [0, 2, 26, 28, 3, 4, 5, 23, 19, 20, 6, -1, 25, 8, 9, 11, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, -1, 30, -1, 31, 13, 15] }
::check[ch] one of { 5, 15 }
::check[ch-1] one of { 0, 14 }
::check[ch..] one of { [5, -1, 0, 7, 8, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, -1, 0, 12, 14, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 31, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, -1, -1, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 54, 54, -1, -1, -1, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28], [15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 31, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, -1, -1, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 54, 54, -1, -1, -1, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28] }
::check[ch..] != (index)
::check[ch+1..] one of { [-1, 0, 7, 8, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, -1, 0, 12, 14, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 31, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, -1, -1, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 54, 54, -1, -1, -1, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 31, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, -1, -1, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 54, 54, -1, -1, -1, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28] }
::check[0..ch] one of { [0, 1, 0, 0, 2, 3, 4, 0, 0, 0, 5], [0, 1, 0, 0, 2, 3, 4, 0, 0, 0, 5, -1, 0, 7, 8, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, -1, 0, 12, 14, 15] }
::check[0..ch-1] one of { [0, 1, 0, 0, 2, 3, 4, 0, 0, 0], [0, 1, 0, 0, 2, 3, 4, 0, 0, 0, 5, -1, 0, 7, 8, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, -1, 0, 12, 14] }
::default1[] elements < size(::default1[])-1
::default1[] elements < size(::next[])-1
::base[] < stream_ptr[].stream_ind (lexically)
::base[] <= stream_ptr[].stream_ind (lexically)
::base[] elements < size(::next[])-1
size(stream_ptr[])-1 in ::base[]
ch in ::next[]
::next[] < stream_ptr[].stream_ind (lexically)
::next[] <= stream_ptr[].stream_ind (lexically)
::next[] elements < size(::default1[])-1
::next[] elements < size(::next[])-1
size(stream_ptr[]) in ::next[]
size(stream_ptr[])-1 in ::next[]
::default1[ch] in ::next[]
::next[] elements >= ::base[ch]
::base[ch-1] in ::next[]
::check[ch] in ::next[]
::check[ch-1] in ::next[]
::check[] < stream_ptr[].stream_ind (lexically)
::check[] <= stream_ptr[].stream_ind (lexically)
::check[] elements < size(::default1[])-1
::check[] elements < size(::next[])-1
size(stream_ptr[]) in ::check[]
size(stream_ptr[])-1 in ::check[]
::default1[ch] in ::check[]
::check[] elements >= ::base[ch]
::base[ch-1] in ::check[]
ch < size(::default1[])-1
ch < size(::next[])-1
ch > size(stream_ptr[])
ch != ::default1[ch]
ch > ::base[ch]
ch > ::base[ch-1]
ch > ::next[ch]
ch != ::next[ch-1]
ch in ::next[ch..]
ch in ::next[ch+1..]
ch > ::check[ch]
ch > ::check[ch-1]
::check[0..ch] elements < ch
stream_ptr[].stream_ind elements <= size(::default1[])
stream_ptr[].stream_ind elements < size(::next[])-1
stream_ptr[].stream_ind elements > size(stream_ptr[])
stream_ptr[].stream_ind elements > ::default1[ch]
stream_ptr[].stream_ind > ::default1[ch..] (lexically)
stream_ptr[].stream_ind >= ::default1[ch..] (lexically)
stream_ptr[].stream_ind > ::default1[ch+1..] (lexically)
stream_ptr[].stream_ind >= ::default1[ch+1..] (lexically)
stream_ptr[].stream_ind elements > ::base[ch]
stream_ptr[].stream_ind elements > ::base[ch-1]
size(::default1[])-1 > ::default1[ch]
size(::default1[])-1 > ::base[ch]
size(::default1[])-1 > ::base[ch-1]
size(::default1[])-1 > ::next[ch]
size(::default1[])-1 > ::next[ch-1]
size(::default1[])-1 > ::check[ch]
size(::default1[])-1 > ::check[ch-1]
size(::next[])-1 > ::default1[ch]
size(::next[])-1 > ::base[ch]
size(::next[])-1 > ::base[ch-1]
size(::next[])-1 > ::next[ch]
size(::next[])-1 > ::next[ch-1]
size(::next[])-1 > ::check[ch]
size(::next[])-1 > ::check[ch-1]
size(stream_ptr[]) != ::default1[ch]
size(stream_ptr[]) < ::next[ch]
size(stream_ptr[]) < ::next[ch-1]
size(stream_ptr[]) in ::next[ch..]
size(stream_ptr[]) in ::next[ch+1..]
size(stream_ptr[]) < ::check[ch]
size(stream_ptr[]) != ::check[ch-1]
size(stream_ptr[]) in ::check[0..ch]
size(stream_ptr[]) in ::check[0..ch-1]
size(stream_ptr[])-1 != ::default1[ch]
size(stream_ptr[])-1 > ::base[ch]
size(stream_ptr[])-1 >= ::base[ch-1]
size(stream_ptr[])-1 in ::next[ch..]
size(stream_ptr[])-1 in ::next[ch+1..]
size(stream_ptr[])-1 in ::next[0..ch]
size(stream_ptr[])-1 in ::next[0..ch-1]
size(stream_ptr[])-1 <= ::check[ch-1]
size(stream_ptr[])-1 in ::check[ch..]
size(stream_ptr[])-1 in ::check[ch+1..]
size(stream_ptr[])-1 in ::check[0..ch]
size(stream_ptr[])-1 in ::check[0..ch-1]
::default1[ch] >= ::base[ch]
::default1[ch] != ::base[ch-1]
::default1[ch] != ::next[ch]
::default1[ch] < ::next[ch-1]
::default1[ch] in ::next[ch..]
::default1[ch] in ::next[ch+1..]
::default1[ch] != ::check[ch]
::default1[ch] != ::check[ch-1]
::default1[ch] in ::check[ch..]
::default1[ch] in ::check[ch+1..]
::base[ch] < ::base[ch-1]
::base[ch..] elements >= ::base[ch]
::base[ch] < ::next[ch]
::base[ch] < ::next[ch-1]
::base[ch] < ::check[ch]
::base[ch] < ::check[ch-1]
::base[ch-1] < ::next[ch]
::base[ch-1] < ::next[ch-1]
::base[ch-1] in ::next[ch..]
::base[ch-1] in ::next[ch+1..]
::base[ch-1] < ::check[ch]
::base[ch-1] < ::check[ch-1]
::base[ch-1] in ::check[ch..]
::base[ch-1] in ::check[ch+1..]
::next[ch] != ::next[ch-1]
::next[ch] > ::check[ch]
::next[ch] > ::check[ch-1]
::check[0..ch] elements < ::next[ch]
::next[ch-1] >= ::check[ch]
::next[ch-1] > ::check[ch-1]
::check[0..ch] elements <= ::next[ch-1]
::check[0..ch-1] elements < ::next[ch-1]
::check[ch-1] in ::next[ch..]
::check[ch-1] in ::next[ch+1..]
::check[ch] in ::next[0..ch]
::next[0..ch] >= ::check[0..ch] (elementwise)
::check[ch] in ::next[0..ch-1]
::next[0..ch-1] >= ::check[0..ch-1] (elementwise)
::check[ch] > ::check[ch-1]
::check[0..ch] elements <= ::check[ch]
::check[0..ch-1] elements < ::check[ch]
===========================================================================
..unget_char():::EXIT
::default1 == orig(::default1)
::default1[] == orig(::default1[])
::base == orig(::base)
::base[] == orig(::base[])
::next == orig(::next)
::next[] == orig(::next[])
::check == orig(::check)
::check[] == orig(::check[])
stream_ptr[] == orig(stream_ptr[])
stream_ptr[].fp == orig(stream_ptr[].fp)
size(::default1[]) == size(::base[])
size(::default1[]) == orig(size(::base[]))
size(::next[]) == size(::check[])
size(::next[]) == orig(size(::check[]))
::default1[orig(ch)] == ::default1[orig(ch)-1]
::default1[orig(ch)] == orig(::default1[post(ch)-1])
::default1[orig(ch)] == orig(::default1[ch-1])
::default1 has only one value
::default1[] == [54, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 51, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, -3, -1, -1, -1, -1, -1, -1, -1]
::default1[i] != i
::base has only one value
::base[] == [-32, -96, -105, -93, -94, -87, -1, -97, -86, -1, -99, -1, -72, -1, -80, -82, -1, 53, 43, -1, -1, -1, -1, -1, -1, -1, 133, -1, 233, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, 40, -1, 251, -1, -1, -1, -1, -1]
::base[i] != i
::next has only one value
::next[] == [0, 2, 26, 28, 3, 4, 5, 23, 19, 20, 6, -1, 25, 8, 9, 11, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, -1, 30, -1, 31, 13, 15, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 21, -1, 22, 32, -1, 24, 7, 17, 17, 17, 17, 17, 17, 17, 12, 17, 17, 1, 17, 17, 10, 17, 17, 17, 17, 17, 17, 17, 17, 14, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, -1, 26, 26, 27, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 0, 0, -1, -1, -1, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29]
::next[] elements >= -1
::check has only one value
::check[] == [0, 1, 0, 0, 2, 3, 4, 0, 0, 0, 5, -1, 0, 7, 8, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, -1, 0, 12, 14, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 31, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, -1, -1, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 54, 54, -1, -1, -1, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28]
::check[] elements >= -1
stream_ptr[] contains no nulls and has only one value, of length 1
stream_ptr[] elements has only one value
stream_ptr[] elements != null
stream_ptr[].fp contains no nulls and has only one value, of length 1
stream_ptr[].fp elements has only one value
stream_ptr[].fp elements != null
stream_ptr[i].stream_ind > i
size(::default1[]) == 60
size(::next[]) == 360
::default1[return] one of { -1, 17, 52 }
::default1[return-1] one of { -1, 17 }
::default1[orig(ch)] one of { -1, 17 }
::default1[orig(ch)..] one of { [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, -3, -1, -1, -1, -1, -1, -1, -1], [17, 17, 17, 17, 17, 17, 17, 51, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, -3, -1, -1, -1, -1, -1, -1, -1] }
::default1[orig(ch)+1..] one of { [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, -3, -1, -1, -1, -1, -1, -1, -1], [17, 17, 17, 17, 17, 17, 51, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, -3, -1, -1, -1, -1, -1, -1, -1] }
::default1[0..orig(ch)] one of { [54, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17], [54, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 51, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] }
::default1[0..orig(ch)-1] one of { [54, 17, 17, 17, 17, 17, 17, 17, 17, 17], [54, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 51, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] }
::base[orig(ch)] one of { -99, -1 }
::base[orig(ch)-1] one of { -1, 0 }
::base[orig(ch)..] one of { [-99, -1, -72, -1, -80, -82, -1, 53, 43, -1, -1, -1, -1, -1, -1, -1, 133, -1, 233, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, 40, -1, 251, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, 40, -1, 251, -1, -1, -1, -1, -1] }
::base[orig(ch)+1..] one of { [-1, -72, -1, -80, -82, -1, 53, 43, -1, -1, -1, -1, -1, -1, -1, 133, -1, 233, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, 40, -1, 251, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, 40, -1, 251, -1, -1, -1, -1, -1] }
::base[0..orig(ch)] one of { [-32, -96, -105, -93, -94, -87, -1, -97, -86, -1, -99], [-32, -96, -105, -93, -94, -87, -1, -97, -86, -1, -99, -1, -72, -1, -80, -82, -1, 53, 43, -1, -1, -1, -1, -1, -1, -1, 133, -1, 233, -1, -1, 0, -1] }
::base[0..orig(ch)-1] one of { [-32, -96, -105, -93, -94, -87, -1, -97, -86, -1], [-32, -96, -105, -93, -94, -87, -1, -97, -86, -1, -99, -1, -72, -1, -80, -82, -1, 53, 43, -1, -1, -1, -1, -1, -1, -1, 133, -1, 233, -1, -1, 0] }
::next[orig(ch)] one of { 6, 16 }
::next[orig(ch)-1] one of { 15, 20 }
::next[orig(ch)-1] == 0  (mod 5)
::next[orig(ch)..] one of { [6, -1, 25, 8, 9, 11, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, -1, 30, -1, 31, 13, 15, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 21, -1, 22, 32, -1, 24, 7, 17, 17, 17, 17, 17, 17, 17, 12, 17, 17, 1, 17, 17, 10, 17, 17, 17, 17, 17, 17, 17, 17, 14, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, -1, 26, 26, 27, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 0, 0, -1, -1, -1, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29], [16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 21, -1, 22, 32, -1, 24, 7, 17, 17, 17, 17, 17, 17, 17, 12, 17, 17, 1, 17, 17, 10, 17, 17, 17, 17, 17, 17, 17, 17, 14, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, -1, 26, 26, 27, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 0, 0, -1, -1, -1, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29] }
::next[orig(ch)+1..] one of { [-1, 25, 8, 9, 11, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, -1, 30, -1, 31, 13, 15, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 21, -1, 22, 32, -1, 24, 7, 17, 17, 17, 17, 17, 17, 17, 12, 17, 17, 1, 17, 17, 10, 17, 17, 17, 17, 17, 17, 17, 17, 14, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, -1, 26, 26, 27, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 0, 0, -1, -1, -1, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29], [17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 21, -1, 22, 32, -1, 24, 7, 17, 17, 17, 17, 17, 17, 17, 12, 17, 17, 1, 17, 17, 10, 17, 17, 17, 17, 17, 17, 17, 17, 14, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, -1, 26, 26, 27, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 0, 0, -1, -1, -1, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29] }
::next[0..orig(ch)] one of { [0, 2, 26, 28, 3, 4, 5, 23, 19, 20, 6], [0, 2, 26, 28, 3, 4, 5, 23, 19, 20, 6, -1, 25, 8, 9, 11, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, -1, 30, -1, 31, 13, 15, 16] }
::next[0..orig(ch)-1] one of { [0, 2, 26, 28, 3, 4, 5, 23, 19, 20], [0, 2, 26, 28, 3, 4, 5, 23, 19, 20, 6, -1, 25, 8, 9, 11, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, -1, 30, -1, 31, 13, 15] }
::check[return] one of { -1, 0 }
::check[orig(ch)] one of { 5, 15 }
::check[orig(ch)-1] one of { 0, 14 }
::check[orig(ch)..] one of { [5, -1, 0, 7, 8, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, -1, 0, 12, 14, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 31, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, -1, -1, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 54, 54, -1, -1, -1, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28], [15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 31, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, -1, -1, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 54, 54, -1, -1, -1, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28] }
::check[orig(ch)..] != (index)
::check[orig(ch)+1..] one of { [-1, 0, 7, 8, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, -1, 0, 12, 14, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 31, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, -1, -1, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 54, 54, -1, -1, -1, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 31, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, -1, -1, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 54, 54, -1, -1, -1, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28] }
::check[0..orig(ch)] one of { [0, 1, 0, 0, 2, 3, 4, 0, 0, 0, 5], [0, 1, 0, 0, 2, 3, 4, 0, 0, 0, 5, -1, 0, 7, 8, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, -1, 0, 12, 14, 15] }
::check[0..orig(ch)-1] one of { [0, 1, 0, 0, 2, 3, 4, 0, 0, 0], [0, 1, 0, 0, 2, 3, 4, 0, 0, 0, 5, -1, 0, 7, 8, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, -1, 0, 12, 14] }
::default1[] elements < size(::default1[])-1
::default1[] elements < size(::next[])-1
::base[] < stream_ptr[].stream_ind (lexically)
::base[] <= stream_ptr[].stream_ind (lexically)
::base[] < orig(stream_ptr[].stream_ind) (lexically)
::base[] <= orig(stream_ptr[].stream_ind) (lexically)
::base[] elements < size(::next[])-1
size(stream_ptr[])-1 in ::base[]
::check[return] in ::base[]
::next[] < stream_ptr[].stream_ind (lexically)
::next[] <= stream_ptr[].stream_ind (lexically)
orig(ch) in ::next[]
::next[] < orig(stream_ptr[].stream_ind) (lexically)
::next[] <= orig(stream_ptr[].stream_ind) (lexically)
::next[] elements < size(::default1[])-1
::next[] elements < size(::next[])-1
size(stream_ptr[])-1 in ::next[]
orig(size(stream_ptr[])) in ::next[]
::default1[return-1] in ::next[]
::default1[orig(ch)] in ::next[]
::next[] elements >= ::base[orig(ch)]
::base[orig(ch)-1] in ::next[]
::check[return] in ::next[]
::check[return-1] in ::next[]
::check[orig(ch)] in ::next[]
::check[orig(ch)-1] in ::next[]
::check[] < stream_ptr[].stream_ind (lexically)
::check[] <= stream_ptr[].stream_ind (lexically)
::check[] < orig(stream_ptr[].stream_ind) (lexically)
::check[] <= orig(stream_ptr[].stream_ind) (lexically)
::check[] elements < size(::default1[])-1
::check[] elements < size(::next[])-1
size(stream_ptr[])-1 in ::check[]
orig(size(stream_ptr[])) in ::check[]
::default1[return] in ::check[]
::default1[return-1] in ::check[]
::default1[orig(ch)] in ::check[]
::check[] elements >= ::base[orig(ch)]
::base[orig(ch)-1] in ::check[]
return in stream_ptr[].stream_ind
stream_ptr[].stream_ind elements == return
stream_ptr[].stream_ind - orig(stream_ptr[].stream_ind) + 1 == 0
stream_ptr[].stream_ind < orig(stream_ptr[].stream_ind) (elementwise)
stream_ptr[].stream_ind elements <= size(::default1[])-1
stream_ptr[].stream_ind elements < size(::next[])-1
stream_ptr[].stream_ind elements > orig(size(stream_ptr[]))
stream_ptr[].stream_ind elements > ::default1[orig(ch)]
stream_ptr[].stream_ind > ::default1[orig(ch)..] (lexically)
stream_ptr[].stream_ind >= ::default1[orig(ch)..] (lexically)
stream_ptr[].stream_ind > ::default1[orig(ch)+1..] (lexically)
stream_ptr[].stream_ind >= ::default1[orig(ch)+1..] (lexically)
stream_ptr[].stream_ind elements > ::base[orig(ch)]
stream_ptr[].stream_ind elements > ::base[orig(ch)-1]
stream_ptr[].stream_ind elements > ::check[return]
stream_ptr[].stream_ind elements > ::check[return-1]
(orig(ch) >> return == 0)
(return >> orig(ch) == 0)
return != orig(ch)
orig(stream_ptr[].stream_ind) elements > return
(size(::default1[]) >> return == 0)
(size(::default1[])-1 >> return == 0)
return <= size(::default1[])-1
return < size(::next[])-1
return > orig(size(stream_ptr[]))
return != ::default1[return]
return != ::default1[return-1]
return > ::default1[orig(ch)]
return != ::base[return]
return != ::base[return-1]
return > ::base[orig(ch)]
return > ::base[orig(ch)-1]
return != ::next[return]
return != ::next[return-1]
(::next[orig(ch)] >> return == 0)
(return >> ::next[orig(ch)] == 0)
(::next[orig(ch)-1] >> return == 0)
(return >> ::next[orig(ch)-1] == 0)
return != ::next[orig(ch)-1]
return > ::check[return]
return > ::check[return-1]
::check[0..return] elements < return
(::check[orig(ch)] >> return == 0)
return != ::check[orig(ch)]
(::check[orig(ch)-1] >> return == 0)
return != ::check[orig(ch)-1]
orig(ch) < size(::default1[])-1
orig(ch) < size(::next[])-1
orig(ch) != ::default1[return]
orig(ch) > ::default1[return-1]
orig(ch) != ::default1[orig(ch)]
orig(ch) != ::base[return]
orig(ch) != ::base[return-1]
orig(ch) > ::base[orig(ch)]
orig(ch) > ::base[orig(ch)-1]
orig(ch) != ::next[return]
orig(ch) != ::next[return-1]
orig(ch) in ::next[return..]
orig(ch) in ::next[return+1..]
orig(ch) > ::next[orig(ch)]
orig(ch) != ::next[orig(ch)-1]
orig(ch) in ::next[orig(ch)..]
orig(ch) in ::next[orig(ch)+1..]
orig(ch) > ::check[return]
orig(ch) > ::check[return-1]
orig(ch) > ::check[orig(ch)]
orig(ch) > ::check[orig(ch)-1]
::check[0..orig(ch)] elements < orig(ch)
orig(stream_ptr[].stream_ind) elements <= size(::default1[])
orig(stream_ptr[].stream_ind) elements < size(::next[])-1
orig(stream_ptr[].stream_ind) elements > ::default1[orig(ch)]
orig(stream_ptr[].stream_ind) > ::default1[orig(ch)..] (lexically)
orig(stream_ptr[].stream_ind) >= ::default1[orig(ch)..] (lexically)
orig(stream_ptr[].stream_ind) > ::default1[orig(ch)+1..] (lexically)
orig(stream_ptr[].stream_ind) >= ::default1[orig(ch)+1..] (lexically)
orig(stream_ptr[].stream_ind) elements > ::base[orig(ch)]
orig(stream_ptr[].stream_ind) elements > ::base[orig(ch)-1]
orig(stream_ptr[].stream_ind) elements > ::check[return]
orig(stream_ptr[].stream_ind) elements > ::check[return-1]
size(::default1[]) != ::base[return]
size(::default1[]) != ::base[return-1]
size(::default1[])-1 > ::default1[return]
size(::default1[])-1 > ::default1[return-1]
size(::default1[])-1 > ::default1[orig(ch)]
size(::default1[])-1 != ::base[return]
size(::default1[])-1 != ::base[return-1]
size(::default1[])-1 > ::base[orig(ch)]
size(::default1[])-1 > ::base[orig(ch)-1]
size(::default1[])-1 > ::next[return]
size(::default1[])-1 > ::next[return-1]
size(::default1[])-1 > ::next[orig(ch)]
size(::default1[])-1 > ::next[orig(ch)-1]
size(::default1[])-1 > ::check[return]
size(::default1[])-1 > ::check[return-1]
size(::default1[])-1 > ::check[orig(ch)]
size(::default1[])-1 > ::check[orig(ch)-1]
size(::next[])-1 > ::default1[return]
size(::next[])-1 > ::default1[return-1]
size(::next[])-1 > ::default1[orig(ch)]
size(::next[])-1 > ::base[return]
size(::next[])-1 > ::base[return-1]
size(::next[])-1 > ::base[orig(ch)]
size(::next[])-1 > ::base[orig(ch)-1]
size(::next[])-1 > ::next[return]
size(::next[])-1 > ::next[return-1]
size(::next[])-1 > ::next[orig(ch)]
size(::next[])-1 > ::next[orig(ch)-1]
size(::next[])-1 > ::check[return]
size(::next[])-1 > ::check[return-1]
size(::next[])-1 > ::check[orig(ch)]
size(::next[])-1 > ::check[orig(ch)-1]
size(stream_ptr[])-1 != ::default1[return]
size(stream_ptr[])-1 != ::default1[return-1]
size(stream_ptr[])-1 != ::default1[orig(ch)]
size(stream_ptr[])-1 != ::base[return]
size(stream_ptr[])-1 != ::base[return-1]
size(stream_ptr[])-1 > ::base[orig(ch)]
size(stream_ptr[])-1 >= ::base[orig(ch)-1]
size(stream_ptr[])-1 != ::next[return]
size(stream_ptr[])-1 != ::next[return-1]
size(stream_ptr[])-1 in ::next[return..]
size(stream_ptr[])-1 in ::next[return+1..]
size(stream_ptr[])-1 in ::next[0..return]
size(stream_ptr[])-1 in ::next[0..return-1]
size(stream_ptr[])-1 in ::next[orig(ch)..]
size(stream_ptr[])-1 in ::next[orig(ch)+1..]
size(stream_ptr[])-1 in ::next[0..orig(ch)]
size(stream_ptr[])-1 in ::next[0..orig(ch)-1]
size(stream_ptr[])-1 >= ::check[return]
size(stream_ptr[])-1 in ::check[return..]
size(stream_ptr[])-1 in ::check[return+1..]
size(stream_ptr[])-1 in ::check[0..return]
size(stream_ptr[])-1 in ::check[0..return-1]
size(stream_ptr[])-1 <= ::check[orig(ch)-1]
size(stream_ptr[])-1 in ::check[orig(ch)..]
size(stream_ptr[])-1 in ::check[orig(ch)+1..]
size(stream_ptr[])-1 in ::check[0..orig(ch)]
size(stream_ptr[])-1 in ::check[0..orig(ch)-1]
orig(size(stream_ptr[])) != ::default1[return]
orig(size(stream_ptr[])) != ::default1[return-1]
orig(size(stream_ptr[])) != ::default1[orig(ch)]
orig(size(stream_ptr[])) != ::base[return]
orig(size(stream_ptr[])) != ::base[return-1]
orig(size(stream_ptr[])) != ::next[return]
orig(size(stream_ptr[])) != ::next[return-1]
orig(size(stream_ptr[])) in ::next[return..]
orig(size(stream_ptr[])) in ::next[return+1..]
orig(size(stream_ptr[])) < ::next[orig(ch)]
orig(size(stream_ptr[])) < ::next[orig(ch)-1]
orig(size(stream_ptr[])) in ::next[orig(ch)..]
orig(size(stream_ptr[])) in ::next[orig(ch)+1..]
orig(size(stream_ptr[])) != ::check[return-1]
orig(size(stream_ptr[])) in ::check[0..return]
orig(size(stream_ptr[])) in ::check[0..return-1]
orig(size(stream_ptr[])) < ::check[orig(ch)]
orig(size(stream_ptr[])) != ::check[orig(ch)-1]
orig(size(stream_ptr[])) in ::check[0..orig(ch)]
orig(size(stream_ptr[])) in ::check[0..orig(ch)-1]
::default1[return] % ::default1[return-1] == 0
::default1[return] >= ::default1[return-1]
::default1[return] is a bitwise subset of ::default1[return-1]
::default1[return] >= ::base[orig(ch)]
::default1[return] != ::next[orig(ch)]
::default1[return] != ::next[orig(ch)-1]
::check[return] % ::default1[return] == 0
::check[return] is a bitwise subset of ::default1[return]
::default1[return] in ::check[return..]
::default1[return] in ::check[return+1..]
::default1[return] != ::check[orig(ch)]
::default1[return] != ::check[orig(ch)-1]
::default1[return] in ::check[orig(ch)..]
::default1[return] in ::check[orig(ch)+1..]
::default1[return-1] >= ::base[orig(ch)]
::default1[return-1] <= ::next[return]
::default1[return-1] in ::next[return..]
::default1[return-1] in ::next[return+1..]
::default1[return-1] != ::next[orig(ch)]
::default1[return-1] != ::next[orig(ch)-1]
::default1[return-1] in ::next[orig(ch)..]
::default1[return-1] in ::next[orig(ch)+1..]
::default1[return-1] in ::check[return..]
::default1[return-1] in ::check[return+1..]
::default1[return-1] != ::check[orig(ch)]
::default1[return-1] != ::check[orig(ch)-1]
::default1[return-1] in ::check[orig(ch)..]
::default1[return-1] in ::check[orig(ch)+1..]
::default1[orig(ch)] >= ::base[orig(ch)]
::default1[orig(ch)] != ::base[orig(ch)-1]
::default1[orig(ch)] in ::next[return..]
::default1[orig(ch)] in ::next[return+1..]
::default1[orig(ch)] != ::next[orig(ch)]
::default1[orig(ch)] < ::next[orig(ch)-1]
::default1[orig(ch)] in ::next[orig(ch)..]
::default1[orig(ch)] in ::next[orig(ch)+1..]
::default1[orig(ch)] in ::check[return..]
::default1[orig(ch)] in ::check[return+1..]
::default1[orig(ch)] != ::check[orig(ch)]
::default1[orig(ch)] != ::check[orig(ch)-1]
::default1[orig(ch)] in ::check[orig(ch)..]
::default1[orig(ch)] in ::check[orig(ch)+1..]
::base[return] != ::next[return]
::base[return] != ::next[orig(ch)]
::base[return] != ::next[orig(ch)-1]
::base[return] != ::check[return]
::check[return-1] % ::base[return] == 0
::check[return-1] is a bitwise subset of ::base[return]
::base[return] != ::check[orig(ch)]
::base[return] != ::check[orig(ch)-1]
::base[return-1] != ::next[return-1]
::base[return-1] != ::next[orig(ch)]
::base[return-1] != ::next[orig(ch)-1]
::check[return] % ::base[return-1] == 0
::check[return] is a bitwise subset of ::base[return-1]
::base[return-1] != ::check[return-1]
::base[return-1] != ::check[orig(ch)]
::base[return-1] != ::check[orig(ch)-1]
::base[orig(ch)] < ::base[orig(ch)-1]
::base[orig(ch)..] elements >= ::base[orig(ch)]
::base[orig(ch)] <= ::next[return]
::base[orig(ch)] <= ::next[return-1]
::base[orig(ch)] < ::next[orig(ch)]
::base[orig(ch)] < ::next[orig(ch)-1]
::base[orig(ch)] <= ::check[return]
::base[orig(ch)] <= ::check[return-1]
::base[orig(ch)] < ::check[orig(ch)]
::base[orig(ch)] < ::check[orig(ch)-1]
::base[orig(ch)-1] in ::next[return..]
::base[orig(ch)-1] in ::next[return+1..]
::base[orig(ch)-1] in ::next[0..return]
::base[orig(ch)-1] in ::next[0..return-1]
::base[orig(ch)-1] < ::next[orig(ch)]
::base[orig(ch)-1] < ::next[orig(ch)-1]
::base[orig(ch)-1] in ::next[orig(ch)..]
::base[orig(ch)-1] in ::next[orig(ch)+1..]
::base[orig(ch)-1] in ::check[return..]
::base[orig(ch)-1] in ::check[return+1..]
::base[orig(ch)-1] in ::check[0..return]
::base[orig(ch)-1] in ::check[0..return-1]
::base[orig(ch)-1] < ::check[orig(ch)]
::base[orig(ch)-1] < ::check[orig(ch)-1]
::base[orig(ch)-1] in ::check[orig(ch)..]
::base[orig(ch)-1] in ::check[orig(ch)+1..]
::next[return] != ::next[orig(ch)]
::next[return] != ::next[orig(ch)-1]
::check[return] % ::next[return] == 0
::check[return] is a bitwise subset of ::next[return]
::next[return] >= ::check[return]
::next[return] != ::check[return-1]
::next[return] != ::check[orig(ch)]
::next[return] != ::check[orig(ch)-1]
::next[return-1] != ::next[orig(ch)-1]
::next[return-1] != ::check[return]
::next[return-1] >= ::check[return-1]
::next[return-1] != ::check[orig(ch)]
::next[return-1] != ::check[orig(ch)-1]
::check[return] in ::next[return..]
::check[orig(ch)-1] in ::next[return..]
::check[return] in ::next[return+1..]
::check[orig(ch)-1] in ::next[return+1..]
::check[return] in ::next[0..return]
::next[0..return] >= ::check[0..return] (elementwise)
::check[return] in ::next[0..return-1]
::next[0..return-1] >= ::check[0..return-1] (elementwise)
::next[orig(ch)] != ::next[orig(ch)-1]
::next[orig(ch)] > ::check[return]
::next[orig(ch)] > ::check[return-1]
::next[orig(ch)] > ::check[orig(ch)]
::next[orig(ch)] > ::check[orig(ch)-1]
::check[0..orig(ch)] elements < ::next[orig(ch)]
::next[orig(ch)-1] > ::check[return]
::next[orig(ch)-1] >= ::check[return-1]
::check[0..return] elements <= ::next[orig(ch)-1]
::next[orig(ch)-1] >= ::check[orig(ch)]
::next[orig(ch)-1] > ::check[orig(ch)-1]
::check[0..orig(ch)] elements <= ::next[orig(ch)-1]
::check[0..orig(ch)-1] elements < ::next[orig(ch)-1]
::check[return] in ::next[orig(ch)..]
::check[orig(ch)-1] in ::next[orig(ch)..]
::check[return] in ::next[orig(ch)+1..]
::check[orig(ch)-1] in ::next[orig(ch)+1..]
::check[orig(ch)] in ::next[0..orig(ch)]
::next[0..orig(ch)] >= ::check[0..orig(ch)] (elementwise)
::check[orig(ch)] in ::next[0..orig(ch)-1]
::next[0..orig(ch)-1] >= ::check[0..orig(ch)-1] (elementwise)
(::check[return] & ::check[return-1]) == 0
::check[return] < ::check[orig(ch)]
::check[return] <= ::check[orig(ch)-1]
::check[return-1] <= ::check[orig(ch)]
::check[orig(ch)] > ::check[orig(ch)-1]
::check[0..orig(ch)] elements <= ::check[orig(ch)]
::check[0..orig(ch)-1] elements < ::check[orig(ch)]
orig(size(stream_ptr[])) == (org.plumelib.util.MathPlume.gcd(return, size(::next[])-1))
size(stream_ptr[])-1 == (::default1[orig(ch)] / return)
size(stream_ptr[])-1 == (::base[orig(ch)-1] / return)
size(stream_ptr[])-1 == (::check[return] / return)
size(stream_ptr[])-1 == (::check[return-1] / return)
orig(size(stream_ptr[])) == (org.plumelib.util.MathPlume.gcd(return, ::default1[return]))
orig(size(stream_ptr[])) == (org.plumelib.util.MathPlume.gcd(return, ::default1[return-1]))
::check[return] == (::next[return] >> return)
size(stream_ptr[])-1 == (::check[return-1] / orig(ch))
::check[return] == (::next[return] >> orig(ch))
size(stream_ptr[])-1 == (::next[return] / size(::default1[]))
size(stream_ptr[])-1 == (::next[return-1] / size(::default1[]))
::check[return] == (::next[return] >> size(::default1[]))
size(stream_ptr[])-1 == (::next[return] / size(::default1[])-1)
size(stream_ptr[])-1 == (::next[return-1] / size(::default1[])-1)
orig(size(stream_ptr[])) == (org.plumelib.util.MathPlume.gcd(size(::default1[])-1, ::base[return]))
orig(size(stream_ptr[])) == (org.plumelib.util.MathPlume.gcd(size(::default1[])-1, ::next[return]))
orig(size(stream_ptr[])) == (org.plumelib.util.MathPlume.gcd(size(::default1[])-1, ::next[return-1]))
::check[return] == (::next[return] >> size(::default1[])-1)
size(stream_ptr[])-1 == (::base[return] / size(::next[]))
size(stream_ptr[])-1 == (::next[return] / size(::next[]))
size(stream_ptr[])-1 == (::next[return-1] / size(::next[]))
size(stream_ptr[])-1 == (::base[return] / size(::next[])-1)
size(stream_ptr[])-1 == (::next[return] / size(::next[])-1)
size(stream_ptr[])-1 == (::next[return-1] / size(::next[])-1)
orig(size(stream_ptr[])) == (org.plumelib.util.MathPlume.gcd(size(::next[])-1, ::base[return]))
orig(size(stream_ptr[])) == (org.plumelib.util.MathPlume.gcd(size(::next[])-1, ::next[return]))
orig(size(stream_ptr[])) == (org.plumelib.util.MathPlume.gcd(size(::next[])-1, ::next[return-1]))
size(stream_ptr[])-1 == (::check[return] / ::base[return])
::check[return] == (java.lang.Math.min(size(stream_ptr[])-1, ::next[return]))
size(stream_ptr[])-1 == (::check[return-1] / ::next[return])
size(stream_ptr[])-1 == (::check[return] / ::next[return-1])
size(stream_ptr[])-1 == (::check[return-1] / ::next[orig(ch)])
size(stream_ptr[])-1 == (::check[return] * ::check[return-1])
orig(size(stream_ptr[])) == (org.plumelib.util.MathPlume.gcd(::default1[return], ::default1[orig(ch)]))
orig(size(stream_ptr[])) == (org.plumelib.util.MathPlume.gcd(::default1[return], ::base[return-1]))
orig(size(stream_ptr[])) == (org.plumelib.util.MathPlume.gcd(::default1[return], ::base[orig(ch)]))
orig(size(stream_ptr[])) == (org.plumelib.util.MathPlume.gcd(::default1[return], ::next[return]))
orig(size(stream_ptr[])) == (org.plumelib.util.MathPlume.gcd(::default1[return], ::next[return-1]))
orig(size(stream_ptr[])) == (org.plumelib.util.MathPlume.gcd(::default1[return], ::check[orig(ch)]))
orig(size(stream_ptr[])) == (org.plumelib.util.MathPlume.gcd(::default1[return-1], ::base[return]))
orig(size(stream_ptr[])) == (org.plumelib.util.MathPlume.gcd(::default1[return-1], ::base[return-1]))
orig(size(stream_ptr[])) == (org.plumelib.util.MathPlume.gcd(::default1[return-1], ::next[return]))
orig(size(stream_ptr[])) == (org.plumelib.util.MathPlume.gcd(::default1[return-1], ::next[return-1]))
orig(size(stream_ptr[])) == (org.plumelib.util.MathPlume.gcd(::default1[orig(ch)], ::base[return]))
orig(size(stream_ptr[])) == (org.plumelib.util.MathPlume.gcd(::default1[orig(ch)], ::base[return-1]))
orig(size(stream_ptr[])) == (org.plumelib.util.MathPlume.gcd(::base[return], ::base[return-1]))
orig(size(stream_ptr[])) == (org.plumelib.util.MathPlume.gcd(::base[return], ::base[orig(ch)]))
orig(size(stream_ptr[])) == (org.plumelib.util.MathPlume.gcd(::base[return], ::next[return]))
orig(size(stream_ptr[])) == (org.plumelib.util.MathPlume.gcd(::base[return], ::next[return-1]))
orig(size(stream_ptr[])) == (org.plumelib.util.MathPlume.gcd(::base[return], ::check[orig(ch)]))
orig(size(stream_ptr[])) == (org.plumelib.util.MathPlume.gcd(::base[return-1], ::base[orig(ch)]))
orig(size(stream_ptr[])) == (org.plumelib.util.MathPlume.gcd(::base[return-1], ::next[return-1]))
orig(size(stream_ptr[])) == (org.plumelib.util.MathPlume.gcd(::base[return-1], ::next[orig(ch)-1]))
orig(size(stream_ptr[])) == (org.plumelib.util.MathPlume.gcd(::base[return-1], ::check[orig(ch)]))
::check[return] == (orig(size(stream_ptr[])) / ::next[return])
::default1[return-1] == (::default1[return] | ::base[orig(ch)-1])
::base[orig(ch)-1] == (::default1[return-1] % ::default1[orig(ch)])
::base[orig(ch)-1] == (::default1[return-1] % ::base[orig(ch)])
::check[return] == (::next[return] >> ::next[orig(ch)])
::check[return] == (::next[return] >> ::next[orig(ch)-1])
::check[return] == (::next[return] >> ::check[orig(ch)])
===========================================================================
print_tokens.c.check_delimiter():::ENTER
size(::default1[]) == size(::base[])
size(::next[]) == size(::check[])
::default1[ch] == ::default1[ch-1]
::default1 has only one value
::default1[] == [54, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 51, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, -3, -1, -1, -1, -1, -1, -1, -1]
::default1[i] != i
::base has only one value
::base[] == [-32, -96, -105, -93, -94, -87, -1, -97, -86, -1, -99, -1, -72, -1, -80, -82, -1, 53, 43, -1, -1, -1, -1, -1, -1, -1, 133, -1, 233, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, 40, -1, 251, -1, -1, -1, -1, -1]
::next has only one value
::next[] == [0, 2, 26, 28, 3, 4, 5, 23, 19, 20, 6, -1, 25, 8, 9, 11, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, -1, 30, -1, 31, 13, 15, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 21, -1, 22, 32, -1, 24, 7, 17, 17, 17, 17, 17, 17, 17, 12, 17, 17, 1, 17, 17, 10, 17, 17, 17, 17, 17, 17, 17, 17, 14, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, -1, 26, 26, 27, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 0, 0, -1, -1, -1, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29]
::next[] elements >= -1
::check has only one value
::check[] == [0, 1, 0, 0, 2, 3, 4, 0, 0, 0, 5, -1, 0, 7, 8, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, -1, 0, 12, 14, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 31, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, -1, -1, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 54, 54, -1, -1, -1, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28]
::check[] elements >= -1
ch one of { 10, 32 }
size(::default1[]) == 60
size(::next[]) == 360
::default1[ch] one of { -1, 17 }
::default1[ch..] one of { [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, -3, -1, -1, -1, -1, -1, -1, -1], [17, 17, 17, 17, 17, 17, 17, 51, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, -3, -1, -1, -1, -1, -1, -1, -1] }
::default1[ch+1..] one of { [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, -3, -1, -1, -1, -1, -1, -1, -1], [17, 17, 17, 17, 17, 17, 51, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, -3, -1, -1, -1, -1, -1, -1, -1] }
::default1[0..ch] one of { [54, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17], [54, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 51, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] }
::default1[0..ch-1] one of { [54, 17, 17, 17, 17, 17, 17, 17, 17, 17], [54, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 51, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] }
::base[ch] one of { -99, -1 }
::base[ch-1] one of { -1, 0 }
::base[ch..] one of { [-99, -1, -72, -1, -80, -82, -1, 53, 43, -1, -1, -1, -1, -1, -1, -1, 133, -1, 233, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, 40, -1, 251, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, 40, -1, 251, -1, -1, -1, -1, -1] }
::base[ch+1..] one of { [-1, -72, -1, -80, -82, -1, 53, 43, -1, -1, -1, -1, -1, -1, -1, 133, -1, 233, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, 40, -1, 251, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, 40, -1, 251, -1, -1, -1, -1, -1] }
::base[0..ch] one of { [-32, -96, -105, -93, -94, -87, -1, -97, -86, -1, -99], [-32, -96, -105, -93, -94, -87, -1, -97, -86, -1, -99, -1, -72, -1, -80, -82, -1, 53, 43, -1, -1, -1, -1, -1, -1, -1, 133, -1, 233, -1, -1, 0, -1] }
::base[0..ch-1] one of { [-32, -96, -105, -93, -94, -87, -1, -97, -86, -1], [-32, -96, -105, -93, -94, -87, -1, -97, -86, -1, -99, -1, -72, -1, -80, -82, -1, 53, 43, -1, -1, -1, -1, -1, -1, -1, 133, -1, 233, -1, -1, 0] }
::next[ch] one of { 6, 16 }
::next[ch-1] one of { 15, 20 }
::next[ch..] one of { [6, -1, 25, 8, 9, 11, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, -1, 30, -1, 31, 13, 15, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 21, -1, 22, 32, -1, 24, 7, 17, 17, 17, 17, 17, 17, 17, 12, 17, 17, 1, 17, 17, 10, 17, 17, 17, 17, 17, 17, 17, 17, 14, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, -1, 26, 26, 27, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 0, 0, -1, -1, -1, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29], [16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 21, -1, 22, 32, -1, 24, 7, 17, 17, 17, 17, 17, 17, 17, 12, 17, 17, 1, 17, 17, 10, 17, 17, 17, 17, 17, 17, 17, 17, 14, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, -1, 26, 26, 27, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 0, 0, -1, -1, -1, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29] }
::next[ch+1..] one of { [-1, 25, 8, 9, 11, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, -1, 30, -1, 31, 13, 15, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 21, -1, 22, 32, -1, 24, 7, 17, 17, 17, 17, 17, 17, 17, 12, 17, 17, 1, 17, 17, 10, 17, 17, 17, 17, 17, 17, 17, 17, 14, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, -1, 26, 26, 27, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 0, 0, -1, -1, -1, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29], [17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 21, -1, 22, 32, -1, 24, 7, 17, 17, 17, 17, 17, 17, 17, 12, 17, 17, 1, 17, 17, 10, 17, 17, 17, 17, 17, 17, 17, 17, 14, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, -1, 26, 26, 27, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 0, 0, -1, -1, -1, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29] }
::next[0..ch] one of { [0, 2, 26, 28, 3, 4, 5, 23, 19, 20, 6], [0, 2, 26, 28, 3, 4, 5, 23, 19, 20, 6, -1, 25, 8, 9, 11, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, -1, 30, -1, 31, 13, 15, 16] }
::next[0..ch-1] one of { [0, 2, 26, 28, 3, 4, 5, 23, 19, 20], [0, 2, 26, 28, 3, 4, 5, 23, 19, 20, 6, -1, 25, 8, 9, 11, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, -1, 30, -1, 31, 13, 15] }
::check[ch] one of { 5, 15 }
::check[ch-1] one of { 0, 14 }
::check[ch..] one of { [5, -1, 0, 7, 8, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, -1, 0, 12, 14, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 31, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, -1, -1, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 54, 54, -1, -1, -1, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28], [15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 31, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, -1, -1, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 54, 54, -1, -1, -1, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28] }
::check[ch..] != (index)
::check[ch+1..] one of { [-1, 0, 7, 8, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, -1, 0, 12, 14, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 31, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, -1, -1, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 54, 54, -1, -1, -1, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 31, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, -1, -1, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 54, 54, -1, -1, -1, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28] }
::check[0..ch] one of { [0, 1, 0, 0, 2, 3, 4, 0, 0, 0, 5], [0, 1, 0, 0, 2, 3, 4, 0, 0, 0, 5, -1, 0, 7, 8, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, -1, 0, 12, 14, 15] }
::check[0..ch-1] one of { [0, 1, 0, 0, 2, 3, 4, 0, 0, 0], [0, 1, 0, 0, 2, 3, 4, 0, 0, 0, 5, -1, 0, 7, 8, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, -1, 0, 12, 14] }
::default1[] elements < size(::default1[])-1
::default1[] elements < size(::next[])-1
::base[] elements < size(::next[])-1
ch in ::next[]
::next[] elements < size(::default1[])-1
::next[] elements < size(::next[])-1
::default1[ch] in ::next[]
::next[] elements >= ::base[ch]
::base[ch-1] in ::next[]
::check[ch] in ::next[]
::check[ch-1] in ::next[]
::check[] elements < size(::default1[])-1
::check[] elements < size(::next[])-1
::default1[ch] in ::check[]
::check[] elements >= ::base[ch]
::base[ch-1] in ::check[]
ch < size(::default1[])-1
ch < size(::next[])-1
ch != ::default1[ch]
ch > ::base[ch]
ch > ::base[ch-1]
ch > ::next[ch]
ch != ::next[ch-1]
ch in ::next[ch..]
ch in ::next[ch+1..]
ch > ::check[ch]
ch > ::check[ch-1]
::check[0..ch] elements < ch
size(::default1[])-1 > ::default1[ch]
size(::default1[])-1 > ::base[ch]
size(::default1[])-1 > ::base[ch-1]
size(::default1[])-1 > ::next[ch]
size(::default1[])-1 > ::next[ch-1]
size(::default1[])-1 > ::check[ch]
size(::default1[])-1 > ::check[ch-1]
size(::next[])-1 > ::default1[ch]
size(::next[])-1 > ::base[ch]
size(::next[])-1 > ::base[ch-1]
size(::next[])-1 > ::next[ch]
size(::next[])-1 > ::next[ch-1]
size(::next[])-1 > ::check[ch]
size(::next[])-1 > ::check[ch-1]
::default1[ch] >= ::base[ch]
::default1[ch] != ::base[ch-1]
::default1[ch] != ::next[ch]
::default1[ch] < ::next[ch-1]
::default1[ch] in ::next[ch..]
::default1[ch] in ::next[ch+1..]
::default1[ch] != ::check[ch]
::default1[ch] != ::check[ch-1]
::default1[ch] in ::check[ch..]
::default1[ch] in ::check[ch+1..]
::base[ch] < ::base[ch-1]
::base[ch..] elements >= ::base[ch]
::base[ch] < ::next[ch]
::base[ch] < ::next[ch-1]
::base[ch] < ::check[ch]
::base[ch] < ::check[ch-1]
::base[ch-1] < ::next[ch]
::base[ch-1] < ::next[ch-1]
::base[ch-1] in ::next[ch..]
::base[ch-1] in ::next[ch+1..]
::base[ch-1] < ::check[ch]
::base[ch-1] < ::check[ch-1]
::base[ch-1] in ::check[ch..]
::base[ch-1] in ::check[ch+1..]
::next[ch] != ::next[ch-1]
::next[ch] > ::check[ch]
::next[ch] > ::check[ch-1]
::check[0..ch] elements < ::next[ch]
::next[ch-1] >= ::check[ch]
::next[ch-1] > ::check[ch-1]
::check[0..ch] elements <= ::next[ch-1]
::check[0..ch-1] elements < ::next[ch-1]
::check[ch-1] in ::next[ch..]
::check[ch-1] in ::next[ch+1..]
::check[ch] in ::next[0..ch]
::next[0..ch] >= ::check[0..ch] (elementwise)
::check[ch] in ::next[0..ch-1]
::next[0..ch-1] >= ::check[0..ch-1] (elementwise)
::check[ch] > ::check[ch-1]
::check[0..ch] elements <= ::check[ch]
::check[0..ch-1] elements < ::check[ch]
===========================================================================
print_tokens.c.check_delimiter():::EXIT
::default1 == orig(::default1)
::default1[] == orig(::default1[])
::base == orig(::base)
::base[] == orig(::base[])
::next == orig(::next)
::next[] == orig(::next[])
::check == orig(::check)
::check[] == orig(::check[])
return == ::check[return]
return == orig(::check[post(return)])
size(::default1[]) == size(::base[])
size(::default1[]) == orig(size(::base[]))
size(::next[]) == size(::check[])
size(::next[]) == orig(size(::check[]))
::default1[orig(ch)] == ::default1[orig(ch)-1]
::default1[orig(ch)] == orig(::default1[post(ch)-1])
::default1[orig(ch)] == orig(::default1[ch-1])
::next[return-1] == ::check[return-1]
::next[return-1] == orig(::check[post(return)-1])
::next[0..return-1] == orig(::check[0..post(return)-1])
::default1 has only one value
::default1[] == [54, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 51, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, -3, -1, -1, -1, -1, -1, -1, -1]
::default1[i] != i
::base has only one value
::base[] == [-32, -96, -105, -93, -94, -87, -1, -97, -86, -1, -99, -1, -72, -1, -80, -82, -1, 53, 43, -1, -1, -1, -1, -1, -1, -1, 133, -1, 233, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, 40, -1, 251, -1, -1, -1, -1, -1]
::next has only one value
::next[] == [0, 2, 26, 28, 3, 4, 5, 23, 19, 20, 6, -1, 25, 8, 9, 11, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, -1, 30, -1, 31, 13, 15, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 21, -1, 22, 32, -1, 24, 7, 17, 17, 17, 17, 17, 17, 17, 12, 17, 17, 1, 17, 17, 10, 17, 17, 17, 17, 17, 17, 17, 17, 14, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, -1, 26, 26, 27, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 0, 0, -1, -1, -1, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29]
::next[] elements >= -1
::check has only one value
::check[] == [0, 1, 0, 0, 2, 3, 4, 0, 0, 0, 5, -1, 0, 7, 8, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, -1, 0, 12, 14, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 31, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, -1, -1, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 54, 54, -1, -1, -1, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28]
::check[] elements >= -1
return == 1
size(::default1[]) == 60
size(::next[]) == 360
::default1[return] == 17
::default1[return..] == [17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 51, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, -3, -1, -1, -1, -1, -1, -1, -1]
::default1[return+1..] == [17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 51, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, -3, -1, -1, -1, -1, -1, -1, -1]
::default1[0..return] == [54, 17]
::default1[0..return] elements one of { 17, 54 }
::default1[0..return] sorted by >
::default1[0..return-1] == [54]
::default1[0..return-1] elements == 54
::default1[orig(ch)] one of { -1, 17 }
::default1[orig(ch)..] one of { [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, -3, -1, -1, -1, -1, -1, -1, -1], [17, 17, 17, 17, 17, 17, 17, 51, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, -3, -1, -1, -1, -1, -1, -1, -1] }
::default1[orig(ch)+1..] one of { [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, -3, -1, -1, -1, -1, -1, -1, -1], [17, 17, 17, 17, 17, 17, 51, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, -3, -1, -1, -1, -1, -1, -1, -1] }
::default1[0..orig(ch)] one of { [54, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17], [54, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 51, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] }
::default1[0..orig(ch)-1] one of { [54, 17, 17, 17, 17, 17, 17, 17, 17, 17], [54, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 51, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1] }
::base[return] == -96
::base[return..] == [-96, -105, -93, -94, -87, -1, -97, -86, -1, -99, -1, -72, -1, -80, -82, -1, 53, 43, -1, -1, -1, -1, -1, -1, -1, 133, -1, 233, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, 40, -1, 251, -1, -1, -1, -1, -1]
::base[return+1..] == [-105, -93, -94, -87, -1, -97, -86, -1, -99, -1, -72, -1, -80, -82, -1, 53, 43, -1, -1, -1, -1, -1, -1, -1, 133, -1, 233, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, 40, -1, 251, -1, -1, -1, -1, -1]
::base[0..return] == [-32, -96]
::base[0..return] elements one of { -96, -32 }
::base[0..return] sorted by >
::base[0..return-1] == [-32]
::base[0..return-1] elements == -32
::base[orig(ch)] one of { -99, -1 }
::base[orig(ch)-1] one of { -1, 0 }
::base[orig(ch)..] one of { [-99, -1, -72, -1, -80, -82, -1, 53, 43, -1, -1, -1, -1, -1, -1, -1, 133, -1, 233, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, 40, -1, 251, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, 40, -1, 251, -1, -1, -1, -1, -1] }
::base[orig(ch)+1..] one of { [-1, -72, -1, -80, -82, -1, 53, 43, -1, -1, -1, -1, -1, -1, -1, 133, -1, 233, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, 40, -1, 251, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, 40, -1, 251, -1, -1, -1, -1, -1] }
::base[0..orig(ch)] one of { [-32, -96, -105, -93, -94, -87, -1, -97, -86, -1, -99], [-32, -96, -105, -93, -94, -87, -1, -97, -86, -1, -99, -1, -72, -1, -80, -82, -1, 53, 43, -1, -1, -1, -1, -1, -1, -1, 133, -1, 233, -1, -1, 0, -1] }
::base[0..orig(ch)-1] one of { [-32, -96, -105, -93, -94, -87, -1, -97, -86, -1], [-32, -96, -105, -93, -94, -87, -1, -97, -86, -1, -99, -1, -72, -1, -80, -82, -1, 53, 43, -1, -1, -1, -1, -1, -1, -1, 133, -1, 233, -1, -1, 0] }
::next[return] == 2
::next[return..] == [2, 26, 28, 3, 4, 5, 23, 19, 20, 6, -1, 25, 8, 9, 11, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, -1, 30, -1, 31, 13, 15, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 21, -1, 22, 32, -1, 24, 7, 17, 17, 17, 17, 17, 17, 17, 12, 17, 17, 1, 17, 17, 10, 17, 17, 17, 17, 17, 17, 17, 17, 14, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, -1, 26, 26, 27, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 0, 0, -1, -1, -1, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29]
::next[return+1..] == [26, 28, 3, 4, 5, 23, 19, 20, 6, -1, 25, 8, 9, 11, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, -1, 30, -1, 31, 13, 15, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 21, -1, 22, 32, -1, 24, 7, 17, 17, 17, 17, 17, 17, 17, 12, 17, 17, 1, 17, 17, 10, 17, 17, 17, 17, 17, 17, 17, 17, 14, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, -1, 26, 26, 27, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 0, 0, -1, -1, -1, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29]
::next[0..return] == [0, 2]
::next[0..return] elements one of { 0, 2 }
::next[0..return] sorted by <
::next[0..return-1] == [0]
::next[0..return-1] elements == 0
::next[orig(ch)] one of { 6, 16 }
::next[orig(ch)-1] one of { 15, 20 }
::next[orig(ch)..] one of { [6, -1, 25, 8, 9, 11, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, -1, 30, -1, 31, 13, 15, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 21, -1, 22, 32, -1, 24, 7, 17, 17, 17, 17, 17, 17, 17, 12, 17, 17, 1, 17, 17, 10, 17, 17, 17, 17, 17, 17, 17, 17, 14, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, -1, 26, 26, 27, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 0, 0, -1, -1, -1, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29], [16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 21, -1, 22, 32, -1, 24, 7, 17, 17, 17, 17, 17, 17, 17, 12, 17, 17, 1, 17, 17, 10, 17, 17, 17, 17, 17, 17, 17, 17, 14, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, -1, 26, 26, 27, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 0, 0, -1, -1, -1, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29] }
::next[orig(ch)+1..] one of { [-1, 25, 8, 9, 11, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, -1, 30, -1, 31, 13, 15, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 21, -1, 22, 32, -1, 24, 7, 17, 17, 17, 17, 17, 17, 17, 12, 17, 17, 1, 17, 17, 10, 17, 17, 17, 17, 17, 17, 17, 17, 14, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, -1, 26, 26, 27, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 0, 0, -1, -1, -1, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29], [17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 21, -1, 22, 32, -1, 24, 7, 17, 17, 17, 17, 17, 17, 17, 12, 17, 17, 1, 17, 17, 10, 17, 17, 17, 17, 17, 17, 17, 17, 14, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, -1, 26, 26, 27, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 0, 0, -1, -1, -1, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29] }
::next[0..orig(ch)] one of { [0, 2, 26, 28, 3, 4, 5, 23, 19, 20, 6], [0, 2, 26, 28, 3, 4, 5, 23, 19, 20, 6, -1, 25, 8, 9, 11, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, -1, 30, -1, 31, 13, 15, 16] }
::next[0..orig(ch)-1] one of { [0, 2, 26, 28, 3, 4, 5, 23, 19, 20], [0, 2, 26, 28, 3, 4, 5, 23, 19, 20, 6, -1, 25, 8, 9, 11, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, -1, 30, -1, 31, 13, 15] }
::check[return..] == [1, 0, 0, 2, 3, 4, 0, 0, 0, 5, -1, 0, 7, 8, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, -1, 0, 12, 14, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 31, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, -1, -1, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 54, 54, -1, -1, -1, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28]
::check[return..] != (index)
::check[return+1..] == [0, 0, 2, 3, 4, 0, 0, 0, 5, -1, 0, 7, 8, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, -1, 0, 12, 14, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 31, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, -1, -1, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 54, 54, -1, -1, -1, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28]
::check[0..return] == [0, 1]
::check[0..return] elements one of { 0, 1 }
::check[0..return] == (index)
::check[0..return] sorted by <
::check[orig(ch)] one of { 5, 15 }
::check[orig(ch)-1] one of { 0, 14 }
::check[orig(ch)..] one of { [5, -1, 0, 7, 8, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, -1, 0, 12, 14, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 31, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, -1, -1, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 54, 54, -1, -1, -1, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28], [15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 31, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, -1, -1, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 54, 54, -1, -1, -1, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28] }
::check[orig(ch)+1..] one of { [-1, 0, 7, 8, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, -1, 0, 12, 14, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 31, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, -1, -1, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 54, 54, -1, -1, -1, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 31, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, -1, -1, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 54, 54, -1, -1, -1, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28] }
::check[0..orig(ch)] one of { [0, 1, 0, 0, 2, 3, 4, 0, 0, 0, 5], [0, 1, 0, 0, 2, 3, 4, 0, 0, 0, 5, -1, 0, 7, 8, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, -1, 0, 12, 14, 15] }
::check[0..orig(ch)-1] one of { [0, 1, 0, 0, 2, 3, 4, 0, 0, 0], [0, 1, 0, 0, 2, 3, 4, 0, 0, 0, 5, -1, 0, 7, 8, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, -1, 0, 12, 14] }
::default1[] elements < size(::default1[])-1
::default1[] elements < size(::next[])-1
::default1[] elements <= ::default1[return-1]
::default1[] elements > ::base[return]
::default1[] elements > ::base[return-1]
::base[] elements < size(::next[])-1
::next[return-1] in ::base[]
return in ::next[]
orig(ch) in ::next[]
::next[] elements < size(::default1[])-1
::next[] elements < size(::next[])-1
::default1[return] in ::next[]
::next[] elements < ::default1[return-1]
::default1[orig(ch)] in ::next[]
::next[] elements > ::base[return]
::next[] elements > ::base[return-1]
::next[] elements >= ::base[orig(ch)]
::base[orig(ch)-1] in ::next[]
::check[orig(ch)] in ::next[]
::check[orig(ch)-1] in ::next[]
::check[] elements < size(::default1[])-1
::check[] elements < size(::next[])-1
::default1[return] in ::check[]
::check[] elements <= ::default1[return-1]
::default1[return-1] in ::check[]
::default1[orig(ch)] in ::check[]
::check[] elements > ::base[return]
::check[] elements > ::base[return-1]
::check[] elements >= ::base[orig(ch)]
::base[orig(ch)-1] in ::check[]
::next[return] in ::check[]
return < orig(ch)
::default1[0..return] elements > return
return != ::default1[orig(ch)]
::base[0..return] elements < return
return > ::base[orig(ch)]
return > ::base[orig(ch)-1]
return in ::next[return..]
return in ::next[return+1..]
return < ::next[orig(ch)]
return < ::next[orig(ch)-1]
return in ::next[orig(ch)..]
return in ::next[orig(ch)+1..]
::check[0..return] elements <= return
return < ::check[orig(ch)]
return != ::check[orig(ch)-1]
orig(ch) < size(::default1[])-1
orig(ch) < size(::next[])-1
orig(ch) != ::default1[return]
orig(ch) < ::default1[return-1]
orig(ch) != ::default1[orig(ch)]
orig(ch) > ::base[return]
orig(ch) > ::base[return-1]
::base[0..return] elements < orig(ch)
orig(ch) > ::base[orig(ch)]
orig(ch) > ::base[orig(ch)-1]
orig(ch) > ::next[return]
orig(ch) > ::next[return-1]
orig(ch) in ::next[return..]
orig(ch) in ::next[return+1..]
orig(ch) > ::next[orig(ch)]
orig(ch) != ::next[orig(ch)-1]
orig(ch) in ::next[orig(ch)..]
orig(ch) in ::next[orig(ch)+1..]
orig(ch) > ::check[orig(ch)]
orig(ch) > ::check[orig(ch)-1]
::check[0..orig(ch)] elements < orig(ch)
size(::default1[])-1 > ::default1[orig(ch)]
::base[0..return] elements < size(::default1[])-1
size(::default1[])-1 > ::base[orig(ch)]
size(::default1[])-1 > ::base[orig(ch)-1]
size(::default1[])-1 > ::next[orig(ch)]
size(::default1[])-1 > ::next[orig(ch)-1]
size(::default1[])-1 > ::check[orig(ch)]
size(::default1[])-1 > ::check[orig(ch)-1]
size(::next[])-1 > ::default1[orig(ch)]
size(::next[])-1 > ::base[orig(ch)]
size(::next[])-1 > ::base[orig(ch)-1]
size(::next[])-1 > ::next[orig(ch)]
size(::next[])-1 > ::next[orig(ch)-1]
size(::next[])-1 > ::check[orig(ch)]
size(::next[])-1 > ::check[orig(ch)-1]
::default1[0..return] elements >= ::default1[return]
::default1[return] >= ::default1[orig(ch)]
::base[0..return] elements < ::default1[return]
::default1[return] > ::base[orig(ch)]
::default1[return] > ::base[orig(ch)-1]
::default1[return] in ::next[return..]
::default1[return] in ::next[return+1..]
::default1[return] > ::next[orig(ch)]
::default1[return] != ::next[orig(ch)-1]
::default1[return] in ::next[orig(ch)..]
::default1[return] in ::next[orig(ch)+1..]
::default1[return] in ::check[return..]
::default1[return] in ::check[return+1..]
::default1[return] > ::check[orig(ch)]
::default1[return] > ::check[orig(ch)-1]
::default1[return] in ::check[orig(ch)..]
::default1[return] in ::check[orig(ch)+1..]
::check[0..orig(ch)] elements < ::default1[return]
::default1[return..] elements < ::default1[return-1]
::default1[0..return-1] elements == ::default1[return-1]
::default1[return-1] > ::default1[orig(ch)]
::base[0..return] elements < ::default1[return-1]
::default1[return-1] > ::base[orig(ch)]
::default1[return-1] > ::base[orig(ch)-1]
::default1[return-1] > ::next[orig(ch)]
::default1[return-1] > ::next[orig(ch)-1]
::default1[return-1] in ::check[return..]
::default1[return-1] in ::check[return+1..]
::default1[return-1] > ::check[orig(ch)]
::default1[return-1] > ::check[orig(ch)-1]
::default1[return-1] in ::check[orig(ch)..]
::default1[return-1] in ::check[orig(ch)+1..]
::check[0..orig(ch)] elements < ::default1[return-1]
::default1[0..return] elements >= ::default1[orig(ch)]
::default1[0..return] > ::base[0..return] (elementwise)
::default1[0..return] elements > ::base[orig(ch)]
::default1[0..return] elements > ::base[orig(ch)-1]
::default1[0..return] elements > ::next[return]
::default1[0..return] elements > ::next[return-1]
::default1[0..return] > ::next[0..return] (elementwise)
::default1[0..return] elements > ::next[orig(ch)]
::default1[0..return] is a subset of ::check[return..]
::default1[0..return] is a subset of ::check[return+1..]
::default1[0..return] > ::check[0..return] (elementwise)
::default1[0..return] elements > ::check[orig(ch)]
::default1[0..return] elements > ::check[orig(ch)-1]
::default1[0..return] is a subset of ::check[orig(ch)..]
::default1[0..return] is a subset of ::check[orig(ch)+1..]
::default1[0..return-1] > ::base[0..return-1] (elementwise)
::default1[0..return-1] > ::next[0..return-1] (elementwise)
::default1[0..return-1] is a subsequence of ::check[return..]
::default1[0..return-1] is a subset of ::check[return..]
::default1[0..return-1] is a subsequence of ::check[return+1..]
::default1[0..return-1] is a subset of ::check[return+1..]
::default1[0..return-1] is a subsequence of ::check[orig(ch)..]
::default1[0..return-1] is a subset of ::check[orig(ch)..]
::default1[0..return-1] is a subsequence of ::check[orig(ch)+1..]
::default1[0..return-1] is a subset of ::check[orig(ch)+1..]
::default1[orig(ch)] > ::base[return]
::default1[orig(ch)] > ::base[return-1]
::base[0..return] elements < ::default1[orig(ch)]
::default1[orig(ch)] >= ::base[orig(ch)]
::default1[orig(ch)] != ::base[orig(ch)-1]
::default1[orig(ch)] != ::next[return]
::default1[orig(ch)] != ::next[return-1]
::default1[orig(ch)] in ::next[return..]
::default1[orig(ch)] in ::next[return+1..]
::default1[orig(ch)] != ::next[orig(ch)]
::default1[orig(ch)] < ::next[orig(ch)-1]
::default1[orig(ch)] in ::next[orig(ch)..]
::default1[orig(ch)] in ::next[orig(ch)+1..]
::default1[orig(ch)] in ::check[return..]
::default1[orig(ch)] in ::check[return+1..]
::default1[orig(ch)] != ::check[orig(ch)]
::default1[orig(ch)] != ::check[orig(ch)-1]
::default1[orig(ch)] in ::check[orig(ch)..]
::default1[orig(ch)] in ::check[orig(ch)+1..]
::base[0..return] elements >= ::base[return]
::base[return] != ::base[orig(ch)]
::base[return] < ::base[orig(ch)-1]
::base[orig(ch)+1..] elements > ::base[return]
::base[return] < ::next[orig(ch)]
::base[return] < ::next[orig(ch)-1]
::base[return] < ::check[orig(ch)]
::base[return] < ::check[orig(ch)-1]
::base[0..return] elements <= ::base[return-1]
::base[0..return-1] elements == ::base[return-1]
::base[return-1] != ::base[orig(ch)]
::base[return-1] < ::base[orig(ch)-1]
::base[return-1] < ::next[orig(ch)]
::base[return-1] < ::next[orig(ch)-1]
::base[return-1] < ::check[orig(ch)]
::base[return-1] < ::check[orig(ch)-1]
::next[return-1] in ::base[return..]
::next[0..return-1] is a subsequence of ::base[return..]
::next[return-1] in ::base[return+1..]
::next[0..return-1] is a subsequence of ::base[return+1..]
::base[0..return] elements < ::base[orig(ch)-1]
::base[0..return] elements < ::next[return]
::base[0..return] elements < ::next[return-1]
::base[0..return] < ::next[0..return] (elementwise)
::base[0..return] elements < ::next[orig(ch)]
::base[0..return] elements < ::next[orig(ch)-1]
::base[0..return] < ::check[0..return] (elementwise)
::base[0..return] elements < ::check[orig(ch)]
::base[0..return] elements < ::check[orig(ch)-1]
::base[0..return-1] < ::next[0..return-1] (elementwise)
::base[orig(ch)] < ::base[orig(ch)-1]
::base[orig(ch)..] elements >= ::base[orig(ch)]
::base[orig(ch)] < ::next[return]
::base[orig(ch)] < ::next[return-1]
::next[0..return] elements > ::base[orig(ch)]
::base[orig(ch)] < ::next[orig(ch)]
::base[orig(ch)] < ::next[orig(ch)-1]
::check[0..return] elements > ::base[orig(ch)]
::base[orig(ch)] < ::check[orig(ch)]
::base[orig(ch)] < ::check[orig(ch)-1]
::base[orig(ch)-1] < ::next[return]
::base[orig(ch)-1] <= ::next[return-1]
::base[orig(ch)-1] in ::next[return..]
::base[orig(ch)-1] in ::next[return+1..]
::next[0..return] elements >= ::base[orig(ch)-1]
::base[orig(ch)-1] < ::next[orig(ch)]
::base[orig(ch)-1] < ::next[orig(ch)-1]
::base[orig(ch)-1] in ::next[orig(ch)..]
::base[orig(ch)-1] in ::next[orig(ch)+1..]
::base[orig(ch)-1] in ::check[return..]
::base[orig(ch)-1] in ::check[return+1..]
::check[0..return] elements >= ::base[orig(ch)-1]
::base[orig(ch)-1] < ::check[orig(ch)]
::base[orig(ch)-1] < ::check[orig(ch)-1]
::base[orig(ch)-1] in ::check[orig(ch)..]
::base[orig(ch)-1] in ::check[orig(ch)+1..]
::next[0..return] elements <= ::next[return]
::next[return] < ::next[orig(ch)]
::next[return] < ::next[orig(ch)-1]
::next[return] in ::check[return..]
::next[return] in ::check[return+1..]
::check[0..return] elements < ::next[return]
::next[return] < ::check[orig(ch)]
::next[return] != ::check[orig(ch)-1]
::next[return] in ::check[0..orig(ch)]
::next[return] in ::check[0..orig(ch)-1]
::next[0..return] elements >= ::next[return-1]
::next[0..return-1] elements == ::next[return-1]
::next[return-1] < ::next[orig(ch)]
::next[return-1] < ::next[orig(ch)-1]
::check[0..return] elements >= ::next[return-1]
::next[return-1] < ::check[orig(ch)]
::next[return-1] <= ::check[orig(ch)-1]
::check[orig(ch)] in ::next[return..]
::check[orig(ch)-1] in ::next[return..]
::check[orig(ch)] in ::next[return+1..]
::check[orig(ch)-1] in ::next[return+1..]
::next[0..return] is a subsequence of ::check[return..]
::next[0..return] is a subset of ::check[return..]
::next[0..return] is a subsequence of ::check[return+1..]
::next[0..return] is a subset of ::check[return+1..]
::next[0..return] >= ::check[0..return] (elementwise)
::next[0..return] is a subsequence of ::check[0..orig(ch)]
::next[0..return] is a subset of ::check[0..orig(ch)]
::next[0..return] is a subsequence of ::check[0..orig(ch)-1]
::next[0..return] is a subset of ::check[0..orig(ch)-1]
::next[orig(ch)] != ::next[orig(ch)-1]
::next[orig(ch)] > ::check[orig(ch)]
::next[orig(ch)] > ::check[orig(ch)-1]
::check[0..orig(ch)] elements < ::next[orig(ch)]
::next[orig(ch)-1] >= ::check[orig(ch)]
::next[orig(ch)-1] > ::check[orig(ch)-1]
::check[0..orig(ch)] elements <= ::next[orig(ch)-1]
::check[0..orig(ch)-1] elements < ::next[orig(ch)-1]
::check[orig(ch)-1] in ::next[orig(ch)..]
::check[orig(ch)-1] in ::next[orig(ch)+1..]
::check[orig(ch)] in ::next[0..orig(ch)]
::next[0..orig(ch)] >= ::check[0..orig(ch)] (elementwise)
::check[orig(ch)] in ::next[0..orig(ch)-1]
::next[0..orig(ch)-1] >= ::check[0..orig(ch)-1] (elementwise)
::check[orig(ch)] > ::check[orig(ch)-1]
::check[0..orig(ch)] elements <= ::check[orig(ch)]
::check[0..orig(ch)-1] elements < ::check[orig(ch)]
===========================================================================
print_tokens.c.constant():::ENTER
size(::default1[]) == size(::base[])
size(::next[]) == size(::check[])
::default1[state] == ::default1[state-1]
::default1[state] == ::default1[token_ind]
::default1[state] == ::base[state]
::default1[state] == ::base[token_ind]
::default1[state] == ::next[state-1]
::default1[state] == ::check[state-1]
::next[token_ind] == ::next[token_ind-1]
::check[state] == ::check[token_ind]
::check[state] == ::check[token_ind-1]
::default1 has only one value
::default1[] == [54, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 51, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, -3, -1, -1, -1, -1, -1, -1, -1]
::base has only one value
::base[] == [-32, -96, -105, -93, -94, -87, -1, -97, -86, -1, -99, -1, -72, -1, -80, -82, -1, 53, 43, -1, -1, -1, -1, -1, -1, -1, 133, -1, 233, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, 40, -1, 251, -1, -1, -1, -1, -1]
::next has only one value
::next[] == [0, 2, 26, 28, 3, 4, 5, 23, 19, 20, 6, -1, 25, 8, 9, 11, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, -1, 30, -1, 31, 13, 15, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 21, -1, 22, 32, -1, 24, 7, 17, 17, 17, 17, 17, 17, 17, 12, 17, 17, 1, 17, 17, 10, 17, 17, 17, 17, 17, 17, 17, 17, 14, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, -1, 26, 26, 27, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 0, 0, -1, -1, -1, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29]
::next[] elements >= -1
::check has only one value
::check[] == [0, 1, 0, 0, 2, 3, 4, 0, 0, 0, 5, -1, 0, 7, 8, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, -1, 0, 12, 14, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 31, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, -1, -1, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 54, 54, -1, -1, -1, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28]
::check[] elements >= -1
state == 27
token_ind == 19
size(::default1[]) == 60
size(::next[]) == 360
::default1[state] == -1
::default1[state..] == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, -3, -1, -1, -1, -1, -1, -1, -1]
::default1[state+1..] == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, -3, -1, -1, -1, -1, -1, -1, -1]
::default1[0..state] == [54, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 51, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1]
::default1[0..state-1] == [54, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 51, -2, -1, -1, -1, -1, -1, -1, -1, -1]
::default1[token_ind-1] == -2
::default1[token_ind..] == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, -3, -1, -1, -1, -1, -1, -1, -1]
::default1[token_ind..] elements one of { -3, -1, 52 }
::default1[token_ind+1..] == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, -3, -1, -1, -1, -1, -1, -1, -1]
::default1[0..token_ind] == [54, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 51, -2, -1]
::default1[0..token_ind-1] == [54, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 51, -2]
::base[state-1] == 133
::base[state..] == [-1, 233, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, 40, -1, 251, -1, -1, -1, -1, -1]
::base[state+1..] == [233, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, 40, -1, 251, -1, -1, -1, -1, -1]
::base[0..state] == [-32, -96, -105, -93, -94, -87, -1, -97, -86, -1, -99, -1, -72, -1, -80, -82, -1, 53, 43, -1, -1, -1, -1, -1, -1, -1, 133, -1]
::base[0..state-1] == [-32, -96, -105, -93, -94, -87, -1, -97, -86, -1, -99, -1, -72, -1, -80, -82, -1, 53, 43, -1, -1, -1, -1, -1, -1, -1, 133]
::base[token_ind-1] == 43
::base[token_ind..] == [-1, -1, -1, -1, -1, -1, -1, 133, -1, 233, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, 40, -1, 251, -1, -1, -1, -1, -1]
::base[token_ind+1..] == [-1, -1, -1, -1, -1, -1, 133, -1, 233, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, 40, -1, 251, -1, -1, -1, -1, -1]
::base[0..token_ind] == [-32, -96, -105, -93, -94, -87, -1, -97, -86, -1, -99, -1, -72, -1, -80, -82, -1, 53, 43, -1]
::base[0..token_ind-1] == [-32, -96, -105, -93, -94, -87, -1, -97, -86, -1, -99, -1, -72, -1, -80, -82, -1, 53, 43]
::next[state] == 30
::next[state..] == [30, -1, 31, 13, 15, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 21, -1, 22, 32, -1, 24, 7, 17, 17, 17, 17, 17, 17, 17, 12, 17, 17, 1, 17, 17, 10, 17, 17, 17, 17, 17, 17, 17, 17, 14, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, -1, 26, 26, 27, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 0, 0, -1, -1, -1, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29]
::next[state+1..] == [-1, 31, 13, 15, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 21, -1, 22, 32, -1, 24, 7, 17, 17, 17, 17, 17, 17, 17, 12, 17, 17, 1, 17, 17, 10, 17, 17, 17, 17, 17, 17, 17, 17, 14, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, -1, 26, 26, 27, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 0, 0, -1, -1, -1, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29]
::next[0..state] == [0, 2, 26, 28, 3, 4, 5, 23, 19, 20, 6, -1, 25, 8, 9, 11, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, -1, 30]
::next[0..state-1] == [0, 2, 26, 28, 3, 4, 5, 23, 19, 20, 6, -1, 25, 8, 9, 11, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, -1]
::next[token_ind] == 18
::next[token_ind..] == [18, 18, 18, 18, 18, 18, 18, -1, 30, -1, 31, 13, 15, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 21, -1, 22, 32, -1, 24, 7, 17, 17, 17, 17, 17, 17, 17, 12, 17, 17, 1, 17, 17, 10, 17, 17, 17, 17, 17, 17, 17, 17, 14, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, -1, 26, 26, 27, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 0, 0, -1, -1, -1, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29]
::next[token_ind+1..] == [18, 18, 18, 18, 18, 18, -1, 30, -1, 31, 13, 15, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 21, -1, 22, 32, -1, 24, 7, 17, 17, 17, 17, 17, 17, 17, 12, 17, 17, 1, 17, 17, 10, 17, 17, 17, 17, 17, 17, 17, 17, 14, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, -1, 26, 26, 27, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 0, 0, -1, -1, -1, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29]
::next[0..token_ind] == [0, 2, 26, 28, 3, 4, 5, 23, 19, 20, 6, -1, 25, 8, 9, 11, 18, 18, 18, 18]
::next[0..token_ind-1] == [0, 2, 26, 28, 3, 4, 5, 23, 19, 20, 6, -1, 25, 8, 9, 11, 18, 18, 18]
::check[state] == 0
::check[state..] == [0, -1, 0, 12, 14, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 31, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, -1, -1, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 54, 54, -1, -1, -1, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28]
::check[state+1..] == [-1, 0, 12, 14, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 31, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, -1, -1, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 54, 54, -1, -1, -1, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28]
::check[0..state] == [0, 1, 0, 0, 2, 3, 4, 0, 0, 0, 5, -1, 0, 7, 8, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0]
::check[0..state-1] == [0, 1, 0, 0, 2, 3, 4, 0, 0, 0, 5, -1, 0, 7, 8, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1]
::check[token_ind..] == [0, 0, 0, 0, 0, 0, 0, -1, 0, -1, 0, 12, 14, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 31, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, -1, -1, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 54, 54, -1, -1, -1, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28]
::check[token_ind+1..] == [0, 0, 0, 0, 0, 0, -1, 0, -1, 0, 12, 14, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 31, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, -1, -1, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 54, 54, -1, -1, -1, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28]
::check[0..token_ind] == [0, 1, 0, 0, 2, 3, 4, 0, 0, 0, 5, -1, 0, 7, 8, 10, 0, 0, 0, 0]
::check[0..token_ind-1] == [0, 1, 0, 0, 2, 3, 4, 0, 0, 0, 5, -1, 0, 7, 8, 10, 0, 0, 0]
::check[state] in ::base[]
state in ::next[]
token_ind in ::next[]
::check[state] in ::next[]
::next[token_ind] in ::check[]
state in ::next[state..]
state in ::next[state+1..]
state in ::next[token_ind..]
state in ::next[token_ind+1..]
token_ind in ::next[0..state]
token_ind in ::next[0..state-1]
token_ind in ::next[0..token_ind]
token_ind in ::next[0..token_ind-1]
::check[state] in ::base[state..]
::check[state] in ::base[state+1..]
::check[state] in ::base[token_ind..]
::check[state] in ::base[token_ind+1..]
::check[state] in ::next[state..]
::check[state] in ::next[state+1..]
::check[state] in ::next[0..state]
::check[state] in ::next[0..state-1]
::next[token_ind] in ::check[state..]
::next[token_ind] in ::check[state+1..]
::next[token_ind] in ::check[token_ind..]
::next[token_ind] in ::check[token_ind+1..]
::check[state] in ::next[token_ind..]
::check[state] in ::next[token_ind+1..]
::check[state] in ::next[0..token_ind]
::check[state] in ::next[0..token_ind-1]
===========================================================================
print_tokens.c.constant():::EXIT
::default1 == orig(::default1)
::default1[] == orig(::default1[])
::base == orig(::base)
::base[] == orig(::base[])
::next == orig(::next)
::next[] == orig(::next[])
::check == orig(::check)
::check[] == orig(::check[])
return == orig(state)
size(::default1[]) == size(::base[])
size(::default1[]) == orig(size(::base[]))
size(::next[]) == size(::check[])
size(::next[]) == orig(size(::check[]))
::default1[return] == ::default1[return-1]
::default1[return] == ::default1[orig(state)-1]
::default1[return] == ::default1[orig(token_ind)]
::default1[return] == ::base[return]
::default1[return] == ::base[orig(state)]
::default1[return] == ::base[orig(token_ind)]
::default1[return] == ::next[return-1]
::default1[return] == ::next[orig(state)-1]
::default1[return] == ::check[return-1]
::default1[return] == ::check[orig(state)-1]
::default1[return] == orig(::default1[post(state)-1])
::default1[return] == orig(::base[post(state)])
::default1[return] == orig(::next[post(state)-1])
::default1[return] == orig(::check[post(state)-1])
::default1[return] == orig(::default1[post(token_ind)])
::default1[return] == orig(::base[post(token_ind)])
::default1[return] == orig(::default1[post(return)-1])
::default1[return] == orig(::base[post(return)])
::default1[return] == orig(::next[post(return)-1])
::default1[return] == orig(::check[post(return)-1])
::default1[return] == orig(::default1[state-1])
::default1[return] == orig(::default1[token_ind])
::default1[return] == orig(::base[state])
::default1[return] == orig(::base[token_ind])
::default1[return] == orig(::next[state-1])
::default1[return] == orig(::check[state-1])
::next[orig(token_ind)] == ::next[orig(token_ind)-1]
::next[orig(token_ind)] == orig(::next[post(token_ind)-1])
::next[orig(token_ind)] == orig(::next[token_ind-1])
::check[return] == ::check[orig(token_ind)]
::check[return] == ::check[orig(token_ind)-1]
::check[return] == orig(::check[post(token_ind)])
::check[return] == orig(::check[post(token_ind)-1])
::check[return] == orig(::check[token_ind])
::check[return] == orig(::check[token_ind-1])
::default1 has only one value
::default1[] == [54, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 51, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, -3, -1, -1, -1, -1, -1, -1, -1]
::base has only one value
::base[] == [-32, -96, -105, -93, -94, -87, -1, -97, -86, -1, -99, -1, -72, -1, -80, -82, -1, 53, 43, -1, -1, -1, -1, -1, -1, -1, 133, -1, 233, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, 40, -1, 251, -1, -1, -1, -1, -1]
::next has only one value
::next[] == [0, 2, 26, 28, 3, 4, 5, 23, 19, 20, 6, -1, 25, 8, 9, 11, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, -1, 30, -1, 31, 13, 15, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 21, -1, 22, 32, -1, 24, 7, 17, 17, 17, 17, 17, 17, 17, 12, 17, 17, 1, 17, 17, 10, 17, 17, 17, 17, 17, 17, 17, 17, 14, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, -1, 26, 26, 27, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 0, 0, -1, -1, -1, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29]
::next[] elements >= -1
::check has only one value
::check[] == [0, 1, 0, 0, 2, 3, 4, 0, 0, 0, 5, -1, 0, 7, 8, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, -1, 0, 12, 14, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 31, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, -1, -1, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 54, 54, -1, -1, -1, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28]
::check[] elements >= -1
return == 27
size(::default1[]) == 60
size(::next[]) == 360
::default1[return] == -1
::default1[return..] == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, -3, -1, -1, -1, -1, -1, -1, -1]
::default1[return+1..] == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, -3, -1, -1, -1, -1, -1, -1, -1]
::default1[0..return] == [54, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 51, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1]
::default1[0..return-1] == [54, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 51, -2, -1, -1, -1, -1, -1, -1, -1, -1]
::default1[orig(token_ind)-1] == -2
::default1[orig(token_ind)..] == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, -3, -1, -1, -1, -1, -1, -1, -1]
::default1[orig(token_ind)..] elements one of { -3, -1, 52 }
::default1[orig(token_ind)+1..] == [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, -3, -1, -1, -1, -1, -1, -1, -1]
::default1[0..orig(token_ind)] == [54, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 51, -2, -1]
::default1[0..orig(token_ind)-1] == [54, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 51, -2]
::base[return-1] == 133
::base[return..] == [-1, 233, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, 40, -1, 251, -1, -1, -1, -1, -1]
::base[return+1..] == [233, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, 40, -1, 251, -1, -1, -1, -1, -1]
::base[0..return] == [-32, -96, -105, -93, -94, -87, -1, -97, -86, -1, -99, -1, -72, -1, -80, -82, -1, 53, 43, -1, -1, -1, -1, -1, -1, -1, 133, -1]
::base[0..return-1] == [-32, -96, -105, -93, -94, -87, -1, -97, -86, -1, -99, -1, -72, -1, -80, -82, -1, 53, 43, -1, -1, -1, -1, -1, -1, -1, 133]
::base[orig(token_ind)-1] == 43
::base[orig(token_ind)..] == [-1, -1, -1, -1, -1, -1, -1, 133, -1, 233, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, 40, -1, 251, -1, -1, -1, -1, -1]
::base[orig(token_ind)+1..] == [-1, -1, -1, -1, -1, -1, 133, -1, 233, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, 40, -1, 251, -1, -1, -1, -1, -1]
::base[0..orig(token_ind)] == [-32, -96, -105, -93, -94, -87, -1, -97, -86, -1, -99, -1, -72, -1, -80, -82, -1, 53, 43, -1]
::base[0..orig(token_ind)-1] == [-32, -96, -105, -93, -94, -87, -1, -97, -86, -1, -99, -1, -72, -1, -80, -82, -1, 53, 43]
::next[return] == 30
::next[return..] == [30, -1, 31, 13, 15, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 21, -1, 22, 32, -1, 24, 7, 17, 17, 17, 17, 17, 17, 17, 12, 17, 17, 1, 17, 17, 10, 17, 17, 17, 17, 17, 17, 17, 17, 14, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, -1, 26, 26, 27, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 0, 0, -1, -1, -1, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29]
::next[return+1..] == [-1, 31, 13, 15, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 21, -1, 22, 32, -1, 24, 7, 17, 17, 17, 17, 17, 17, 17, 12, 17, 17, 1, 17, 17, 10, 17, 17, 17, 17, 17, 17, 17, 17, 14, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, -1, 26, 26, 27, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 0, 0, -1, -1, -1, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29]
::next[0..return] == [0, 2, 26, 28, 3, 4, 5, 23, 19, 20, 6, -1, 25, 8, 9, 11, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, -1, 30]
::next[0..return-1] == [0, 2, 26, 28, 3, 4, 5, 23, 19, 20, 6, -1, 25, 8, 9, 11, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, -1]
::next[orig(token_ind)] == 18
::next[orig(token_ind)..] == [18, 18, 18, 18, 18, 18, 18, -1, 30, -1, 31, 13, 15, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 21, -1, 22, 32, -1, 24, 7, 17, 17, 17, 17, 17, 17, 17, 12, 17, 17, 1, 17, 17, 10, 17, 17, 17, 17, 17, 17, 17, 17, 14, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, -1, 26, 26, 27, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 0, 0, -1, -1, -1, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29]
::next[orig(token_ind)+1..] == [18, 18, 18, 18, 18, 18, -1, 30, -1, 31, 13, 15, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 21, -1, 22, 32, -1, 24, 7, 17, 17, 17, 17, 17, 17, 17, 12, 17, 17, 1, 17, 17, 10, 17, 17, 17, 17, 17, 17, 17, 17, 14, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, -1, 26, 26, 27, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 0, 0, -1, -1, -1, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29]
::next[0..orig(token_ind)] == [0, 2, 26, 28, 3, 4, 5, 23, 19, 20, 6, -1, 25, 8, 9, 11, 18, 18, 18, 18]
::next[0..orig(token_ind)-1] == [0, 2, 26, 28, 3, 4, 5, 23, 19, 20, 6, -1, 25, 8, 9, 11, 18, 18, 18]
::check[return] == 0
::check[return..] == [0, -1, 0, 12, 14, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 31, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, -1, -1, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 54, 54, -1, -1, -1, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28]
::check[return+1..] == [-1, 0, 12, 14, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 31, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, -1, -1, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 54, 54, -1, -1, -1, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28]
::check[0..return] == [0, 1, 0, 0, 2, 3, 4, 0, 0, 0, 5, -1, 0, 7, 8, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0]
::check[0..return-1] == [0, 1, 0, 0, 2, 3, 4, 0, 0, 0, 5, -1, 0, 7, 8, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1]
::check[orig(token_ind)..] == [0, 0, 0, 0, 0, 0, 0, -1, 0, -1, 0, 12, 14, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 31, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, -1, -1, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 54, 54, -1, -1, -1, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28]
::check[orig(token_ind)+1..] == [0, 0, 0, 0, 0, 0, -1, 0, -1, 0, 12, 14, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 31, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, -1, -1, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 54, 54, -1, -1, -1, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28]
::check[0..orig(token_ind)] == [0, 1, 0, 0, 2, 3, 4, 0, 0, 0, 5, -1, 0, 7, 8, 10, 0, 0, 0, 0]
::check[0..orig(token_ind)-1] == [0, 1, 0, 0, 2, 3, 4, 0, 0, 0, 5, -1, 0, 7, 8, 10, 0, 0, 0]
::check[return] in ::base[]
return in ::next[]
orig(token_ind) in ::next[]
::check[return] in ::next[]
::next[orig(token_ind)] in ::check[]
return in ::next[return..]
return in ::next[return+1..]
return in ::next[orig(token_ind)..]
return in ::next[orig(token_ind)+1..]
orig(token_ind) in ::next[0..return]
orig(token_ind) in ::next[0..return-1]
orig(token_ind) in ::next[0..orig(token_ind)]
orig(token_ind) in ::next[0..orig(token_ind)-1]
::check[return] in ::base[return..]
::check[return] in ::base[return+1..]
::check[return] in ::base[orig(token_ind)..]
::check[return] in ::base[orig(token_ind)+1..]
::check[return] in ::next[return..]
::check[return] in ::next[return+1..]
::check[return] in ::next[0..return]
::check[return] in ::next[0..return-1]
::next[orig(token_ind)] in ::check[return..]
::next[orig(token_ind)] in ::check[return+1..]
::next[orig(token_ind)] in ::check[orig(token_ind)..]
::next[orig(token_ind)] in ::check[orig(token_ind)+1..]
::check[return] in ::next[orig(token_ind)..]
::check[return] in ::next[orig(token_ind)+1..]
::check[return] in ::next[0..orig(token_ind)]
::check[return] in ::next[0..orig(token_ind)-1]
===========================================================================
print_tokens.c.error_or_eof_case():::ENTER
cu_state == size(tstream_ptr[])-1
cu_state == size(tstream_ptr[].ch_stream[0])-1
cu_state == ::next[cu_state]
cu_state == ::next[token_ind-1]
cu_state == ::check[cu_state]
cu_state == ::check[token_ind-1]
token_ind == size(tstream_ptr[])
token_ind == size(tstream_ptr[].ch_stream[0])
token_ind == ::check[token_ind]
size(::default1[]) == size(::base[])
size(::next[]) == size(::check[])
::default1[cu_state] == ::default1[token_ind-1]
::base[cu_state] == ::base[token_ind-1]
tstream_ptr[cu_state] == tstream_ptr[token_ind-1]
tstream_ptr[cu_state].ch_stream == tstream_ptr[token_ind-1].ch_stream
tstream_ptr[cu_state].ch_stream[0] == tstream_ptr[token_ind-1].ch_stream[0]
tstream_ptr[cu_state].ch_stream->fp == tstream_ptr[token_ind-1].ch_stream->fp
tstream_ptr[cu_state].ch_stream->stream_ind == tstream_ptr[token_ind-1].ch_stream->stream_ind
::default1 has only one value
::default1[] == [54, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 51, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, -3, -1, -1, -1, -1, -1, -1, -1]
::base has only one value
::base[] == [-32, -96, -105, -93, -94, -87, -1, -97, -86, -1, -99, -1, -72, -1, -80, -82, -1, 53, 43, -1, -1, -1, -1, -1, -1, -1, 133, -1, 233, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, 40, -1, 251, -1, -1, -1, -1, -1]
::next has only one value
::next[] == [0, 2, 26, 28, 3, 4, 5, 23, 19, 20, 6, -1, 25, 8, 9, 11, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, -1, 30, -1, 31, 13, 15, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 21, -1, 22, 32, -1, 24, 7, 17, 17, 17, 17, 17, 17, 17, 12, 17, 17, 1, 17, 17, 10, 17, 17, 17, 17, 17, 17, 17, 17, 14, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, -1, 26, 26, 27, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 0, 0, -1, -1, -1, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29]
::check has only one value
::check[] == [0, 1, 0, 0, 2, 3, 4, 0, 0, 0, 5, -1, 0, 7, 8, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, -1, 0, 12, 14, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 31, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, -1, -1, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 54, 54, -1, -1, -1, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28]
tstream_ptr has only one value
tstream_ptr[] contains no nulls and has only one value, of length 1
tstream_ptr[] elements has only one value
tstream_ptr[].ch_stream contains no nulls and has only one value, of length 1
tstream_ptr[].ch_stream elements has only one value
tstream_ptr[].ch_stream[0] contains no nulls and has only one value, of length 1
tstream_ptr[].ch_stream[0] elements has only one value
tstream_ptr[].ch_stream->fp contains no nulls and has only one value, of length 1
tstream_ptr[].ch_stream->fp elements has only one value
tstream_ptr[].ch_stream->stream_ind == [6]
tstream_ptr[].ch_stream->stream_ind elements == 6
token_ptr has only one value
token_ind == 1
ch == -1
size(::default1[]) == 60
size(::next[]) == 360
::default1[0..cu_state] == [54]
::default1[0..cu_state] elements == 54
::default1[token_ind] == 17
::default1[token_ind..] == [17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 51, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, -3, -1, -1, -1, -1, -1, -1, -1]
::default1[token_ind+1..] == [17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 51, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, -3, -1, -1, -1, -1, -1, -1, -1]
::default1[0..token_ind] == [54, 17]
::default1[0..token_ind] elements one of { 17, 54 }
::default1[0..ch] == []
::base[0..cu_state] == [-32]
::base[0..cu_state] elements == -32
::base[token_ind] == -96
::base[token_ind..] == [-96, -105, -93, -94, -87, -1, -97, -86, -1, -99, -1, -72, -1, -80, -82, -1, 53, 43, -1, -1, -1, -1, -1, -1, -1, 133, -1, 233, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, 40, -1, 251, -1, -1, -1, -1, -1]
::base[token_ind+1..] == [-105, -93, -94, -87, -1, -97, -86, -1, -99, -1, -72, -1, -80, -82, -1, 53, 43, -1, -1, -1, -1, -1, -1, -1, 133, -1, 233, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, 40, -1, 251, -1, -1, -1, -1, -1]
::base[0..token_ind] == [-32, -96]
::base[0..token_ind] elements one of { -96, -32 }
::next[0..cu_state] == [0]
::next[0..cu_state] elements == 0
::next[token_ind] == 2
::next[token_ind..] == [2, 26, 28, 3, 4, 5, 23, 19, 20, 6, -1, 25, 8, 9, 11, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, -1, 30, -1, 31, 13, 15, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 21, -1, 22, 32, -1, 24, 7, 17, 17, 17, 17, 17, 17, 17, 12, 17, 17, 1, 17, 17, 10, 17, 17, 17, 17, 17, 17, 17, 17, 14, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, -1, 26, 26, 27, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 0, 0, -1, -1, -1, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29]
::next[token_ind+1..] == [26, 28, 3, 4, 5, 23, 19, 20, 6, -1, 25, 8, 9, 11, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, -1, 30, -1, 31, 13, 15, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 21, -1, 22, 32, -1, 24, 7, 17, 17, 17, 17, 17, 17, 17, 12, 17, 17, 1, 17, 17, 10, 17, 17, 17, 17, 17, 17, 17, 17, 14, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, -1, 26, 26, 27, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 0, 0, -1, -1, -1, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29]
::next[0..token_ind] == [0, 2]
::next[0..token_ind] elements one of { 0, 2 }
::check[token_ind..] == [1, 0, 0, 2, 3, 4, 0, 0, 0, 5, -1, 0, 7, 8, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, -1, 0, 12, 14, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 31, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, -1, -1, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 54, 54, -1, -1, -1, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28]
::check[token_ind+1..] == [0, 0, 2, 3, 4, 0, 0, 0, 5, -1, 0, 7, 8, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, -1, 0, 12, 14, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 31, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, -1, -1, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 54, 54, -1, -1, -1, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28]
::check[0..token_ind] == [0, 1]
::check[0..token_ind] elements one of { 0, 1 }
::check[0..token_ind] == (index)
tstream_ptr[token_ind..] == []
tstream_ptr[token_ind..].ch_stream == []
tstream_ptr[token_ind..].ch_stream[0] == []
tstream_ptr[token_ind..].ch_stream->fp == []
ch in ::default1[]
cu_state in ::base[]
ch in ::base[]
token_ind in ::next[]
ch in ::next[]
::default1[token_ind] in ::next[]
ch in ::check[]
::default1[cu_state] in ::check[]
::default1[token_ind] in ::check[]
::next[token_ind] in ::check[]
tstream_ptr[] elements == tstream_ptr[cu_state]
tstream_ptr[].ch_stream elements == tstream_ptr[cu_state].ch_stream
tstream_ptr[].ch_stream[0] elements == tstream_ptr[cu_state].ch_stream[0]
tstream_ptr[].ch_stream->fp elements == tstream_ptr[cu_state].ch_stream->fp
tstream_ptr[].ch_stream->stream_ind is a subsequence of ::next[token_ind..]
tstream_ptr[].ch_stream->stream_ind is a subset of ::next[token_ind..]
tstream_ptr[].ch_stream->stream_ind is a subsequence of ::next[token_ind+1..]
tstream_ptr[].ch_stream->stream_ind is a subset of ::next[token_ind+1..]
tstream_ptr[].ch_stream->stream_ind elements == tstream_ptr[cu_state].ch_stream->stream_ind
cu_state in ::base[token_ind..]
cu_state in ::base[token_ind+1..]
::next[0..cu_state] elements == cu_state
token_ind in ::next[token_ind..]
token_ind in ::next[token_ind+1..]
ch in ::default1[token_ind..]
ch in ::default1[token_ind+1..]
ch in ::base[token_ind..]
ch in ::base[token_ind+1..]
ch in ::next[token_ind..]
ch in ::next[token_ind+1..]
ch in ::check[token_ind..]
ch in ::check[token_ind+1..]
::default1[0..cu_state] elements == ::default1[cu_state]
::default1[cu_state] in ::check[token_ind..]
::default1[cu_state] in ::check[token_ind+1..]
::default1[0..cu_state] is a subsequence of ::check[token_ind..]
::default1[0..cu_state] is a subset of ::check[token_ind..]
::default1[0..cu_state] is a subsequence of ::check[token_ind+1..]
::default1[0..cu_state] is a subset of ::check[token_ind+1..]
::default1[token_ind] in ::next[token_ind..]
::default1[token_ind] in ::next[token_ind+1..]
::default1[token_ind] in ::check[token_ind..]
::default1[token_ind] in ::check[token_ind+1..]
::default1[0..token_ind] is a subset of ::check[token_ind..]
::default1[0..token_ind] is a subset of ::check[token_ind+1..]
::base[0..cu_state] elements == ::base[cu_state]
::next[0..cu_state] is a subsequence of ::base[token_ind..]
::next[0..cu_state] is a subsequence of ::base[token_ind+1..]
::next[token_ind] in ::check[token_ind..]
::next[token_ind] in ::check[token_ind+1..]
::next[0..token_ind] is a subsequence of ::check[token_ind..]
::next[0..token_ind] is a subset of ::check[token_ind..]
::next[0..token_ind] is a subsequence of ::check[token_ind+1..]
::next[0..token_ind] is a subset of ::check[token_ind+1..]
===========================================================================
print_tokens.c.error_or_eof_case():::EXIT
::default1 == orig(::default1)
::default1[] == orig(::default1[])
::base == orig(::base)
::base[] == orig(::base[])
::next == orig(::next)
::next[] == orig(::next[])
::check == orig(::check)
::check[] == orig(::check[])
tstream_ptr[] == orig(tstream_ptr[])
tstream_ptr[].ch_stream == orig(tstream_ptr[].ch_stream)
tstream_ptr[].ch_stream[0] == orig(tstream_ptr[].ch_stream[0])
tstream_ptr[].ch_stream->fp == orig(tstream_ptr[].ch_stream->fp)
tstream_ptr[].ch_stream->stream_ind == orig(tstream_ptr[].ch_stream->stream_ind)
token_ptr[] == return[]
token_ptr[].token_id == return[].token_id
token_ptr[].token_id == orig(::next[0..post(cu_state)])
token_ptr[].token_id == orig(::check[0..post(cu_state)])
token_ptr[].token_id == orig(::next[0..post(token_ind)-1])
token_ptr[].token_id == orig(::check[0..post(token_ind)-1])
token_ptr[].token_id == orig(::next[0..cu_state])
token_ptr[].token_id == orig(::next[0..token_ind-1])
token_ptr[].token_id == orig(::check[0..cu_state])
token_ptr[].token_id == orig(::check[0..token_ind-1])
return == orig(token_ptr)
orig(cu_state) == size(tstream_ptr[])-1
orig(cu_state) == size(tstream_ptr[].ch_stream[0])-1
orig(cu_state) == size(token_ptr[])-1
orig(cu_state) == size(return[])-1
orig(cu_state) == ::next[orig(cu_state)]
orig(cu_state) == ::next[orig(token_ind)-1]
orig(cu_state) == ::check[orig(cu_state)]
orig(cu_state) == ::check[orig(token_ind)-1]
orig(cu_state) == token_ptr[orig(cu_state)].token_id
orig(cu_state) == token_ptr[orig(token_ind)-1].token_id
orig(cu_state) == orig(::next[post(cu_state)])
orig(cu_state) == orig(::check[post(cu_state)])
orig(cu_state) == orig(::next[post(token_ind)-1])
orig(cu_state) == orig(::check[post(token_ind)-1])
orig(cu_state) == return[orig(cu_state)].token_id
orig(cu_state) == return[orig(token_ind)-1].token_id
orig(token_ind) == size(return[])
orig(token_ind) == ::check[orig(token_ind)]
orig(token_ind) == orig(::check[post(token_ind)])
size(::default1[]) == size(::base[])
size(::default1[]) == orig(size(::base[]))
size(::next[]) == size(::check[])
size(::next[]) == orig(size(::check[]))
::default1[orig(cu_state)] == ::default1[orig(token_ind)-1]
::default1[orig(cu_state)] == orig(::default1[post(token_ind)-1])
::default1[orig(cu_state)] == orig(::default1[token_ind-1])
::base[orig(cu_state)] == ::base[orig(token_ind)-1]
::base[orig(cu_state)] == orig(::base[post(token_ind)-1])
::base[orig(cu_state)] == orig(::base[token_ind-1])
tstream_ptr[orig(cu_state)] == tstream_ptr[orig(token_ind)-1]
tstream_ptr[orig(cu_state)] == orig(tstream_ptr[post(token_ind)-1])
tstream_ptr[orig(cu_state)] == orig(tstream_ptr[token_ind-1])
tstream_ptr[orig(cu_state)].ch_stream == tstream_ptr[orig(token_ind)-1].ch_stream
tstream_ptr[orig(cu_state)].ch_stream == orig(tstream_ptr[post(token_ind)-1].ch_stream)
tstream_ptr[orig(cu_state)].ch_stream == orig(tstream_ptr[token_ind-1].ch_stream)
tstream_ptr[orig(cu_state)].ch_stream[0] == tstream_ptr[orig(token_ind)-1].ch_stream[0]
tstream_ptr[orig(cu_state)].ch_stream[0] == orig(tstream_ptr[post(token_ind)-1].ch_stream[0])
tstream_ptr[orig(cu_state)].ch_stream[0] == orig(tstream_ptr[token_ind-1].ch_stream[0])
tstream_ptr[orig(cu_state)].ch_stream->fp == tstream_ptr[orig(token_ind)-1].ch_stream->fp
tstream_ptr[orig(cu_state)].ch_stream->fp == orig(tstream_ptr[post(token_ind)-1].ch_stream->fp)
tstream_ptr[orig(cu_state)].ch_stream->fp == orig(tstream_ptr[token_ind-1].ch_stream->fp)
tstream_ptr[orig(cu_state)].ch_stream->stream_ind == tstream_ptr[orig(token_ind)-1].ch_stream->stream_ind
tstream_ptr[orig(cu_state)].ch_stream->stream_ind == orig(tstream_ptr[post(token_ind)-1].ch_stream->stream_ind)
tstream_ptr[orig(cu_state)].ch_stream->stream_ind == orig(tstream_ptr[token_ind-1].ch_stream->stream_ind)
token_ptr[orig(cu_state)] == token_ptr[orig(token_ind)-1]
token_ptr[orig(cu_state)] == return[orig(token_ind)-1]
::default1 has only one value
::default1[] == [54, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 51, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, -3, -1, -1, -1, -1, -1, -1, -1]
::base has only one value
::base[] == [-32, -96, -105, -93, -94, -87, -1, -97, -86, -1, -99, -1, -72, -1, -80, -82, -1, 53, 43, -1, -1, -1, -1, -1, -1, -1, 133, -1, 233, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, 40, -1, 251, -1, -1, -1, -1, -1]
::next has only one value
::next[] == [0, 2, 26, 28, 3, 4, 5, 23, 19, 20, 6, -1, 25, 8, 9, 11, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, -1, 30, -1, 31, 13, 15, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 21, -1, 22, 32, -1, 24, 7, 17, 17, 17, 17, 17, 17, 17, 12, 17, 17, 1, 17, 17, 10, 17, 17, 17, 17, 17, 17, 17, 17, 14, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, -1, 26, 26, 27, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 0, 0, -1, -1, -1, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29]
::check has only one value
::check[] == [0, 1, 0, 0, 2, 3, 4, 0, 0, 0, 5, -1, 0, 7, 8, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, -1, 0, 12, 14, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 31, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, -1, -1, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 54, 54, -1, -1, -1, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28]
tstream_ptr[] contains no nulls and has only one value, of length 1
tstream_ptr[] elements has only one value
tstream_ptr[].ch_stream contains no nulls and has only one value, of length 1
tstream_ptr[].ch_stream elements has only one value
tstream_ptr[].ch_stream[0] contains no nulls and has only one value, of length 1
tstream_ptr[].ch_stream[0] elements has only one value
tstream_ptr[].ch_stream->fp contains no nulls and has only one value, of length 1
tstream_ptr[].ch_stream->fp elements has only one value
tstream_ptr[].ch_stream->stream_ind == [6]
tstream_ptr[].ch_stream->stream_ind elements == 6
token_ptr[] contains no nulls and has only one value, of length 1
token_ptr[] elements has only one value
token_ptr[].token_id == [0]
token_ptr[].token_id elements == 0
token_ptr[].token_string == []
token_ptr[].token_string elements == ""
return has only one value
size(::default1[]) == 60
size(::next[]) == 360
::default1[0..orig(cu_state)] == [54]
::default1[0..orig(cu_state)] elements == 54
::default1[orig(token_ind)] == 17
::default1[orig(token_ind)..] == [17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 51, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, -3, -1, -1, -1, -1, -1, -1, -1]
::default1[orig(token_ind)+1..] == [17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 51, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, -3, -1, -1, -1, -1, -1, -1, -1]
::default1[0..orig(token_ind)] == [54, 17]
::default1[0..orig(token_ind)] elements one of { 17, 54 }
::default1[0..orig(ch)] == []
::base[0..orig(cu_state)] == [-32]
::base[0..orig(cu_state)] elements == -32
::base[orig(token_ind)] == -96
::base[orig(token_ind)..] == [-96, -105, -93, -94, -87, -1, -97, -86, -1, -99, -1, -72, -1, -80, -82, -1, 53, 43, -1, -1, -1, -1, -1, -1, -1, 133, -1, 233, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, 40, -1, 251, -1, -1, -1, -1, -1]
::base[orig(token_ind)+1..] == [-105, -93, -94, -87, -1, -97, -86, -1, -99, -1, -72, -1, -80, -82, -1, 53, 43, -1, -1, -1, -1, -1, -1, -1, 133, -1, 233, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, 40, -1, 251, -1, -1, -1, -1, -1]
::base[0..orig(token_ind)] == [-32, -96]
::base[0..orig(token_ind)] elements one of { -96, -32 }
::next[orig(token_ind)] == 2
::next[orig(token_ind)..] == [2, 26, 28, 3, 4, 5, 23, 19, 20, 6, -1, 25, 8, 9, 11, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, -1, 30, -1, 31, 13, 15, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 21, -1, 22, 32, -1, 24, 7, 17, 17, 17, 17, 17, 17, 17, 12, 17, 17, 1, 17, 17, 10, 17, 17, 17, 17, 17, 17, 17, 17, 14, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, -1, 26, 26, 27, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 0, 0, -1, -1, -1, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29]
::next[orig(token_ind)+1..] == [26, 28, 3, 4, 5, 23, 19, 20, 6, -1, 25, 8, 9, 11, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, -1, 30, -1, 31, 13, 15, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 21, -1, 22, 32, -1, 24, 7, 17, 17, 17, 17, 17, 17, 17, 12, 17, 17, 1, 17, 17, 10, 17, 17, 17, 17, 17, 17, 17, 17, 14, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, -1, 26, 26, 27, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 0, 0, -1, -1, -1, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29]
::next[0..orig(token_ind)] == [0, 2]
::next[0..orig(token_ind)] elements one of { 0, 2 }
::check[orig(token_ind)..] == [1, 0, 0, 2, 3, 4, 0, 0, 0, 5, -1, 0, 7, 8, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, -1, 0, 12, 14, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 31, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, -1, -1, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 54, 54, -1, -1, -1, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28]
::check[orig(token_ind)+1..] == [0, 0, 2, 3, 4, 0, 0, 0, 5, -1, 0, 7, 8, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, -1, 0, 12, 14, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 31, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, -1, -1, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 54, 54, -1, -1, -1, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28]
::check[0..orig(token_ind)] == [0, 1]
::check[0..orig(token_ind)] elements one of { 0, 1 }
::check[0..orig(token_ind)] == (index)
tstream_ptr[orig(token_ind)..] == []
tstream_ptr[orig(token_ind)..].ch_stream == []
tstream_ptr[orig(token_ind)..].ch_stream[0] == []
tstream_ptr[orig(token_ind)..].ch_stream->fp == []
token_ptr[orig(token_ind)..] == []
orig(ch) in ::default1[]
orig(ch) in ::base[]
orig(token_ind) in ::next[]
orig(ch) in ::next[]
::default1[orig(token_ind)] in ::next[]
orig(ch) in ::check[]
::default1[orig(cu_state)] in ::check[]
::default1[orig(token_ind)] in ::check[]
::next[orig(token_ind)] in ::check[]
tstream_ptr[] elements == tstream_ptr[orig(cu_state)]
tstream_ptr[].ch_stream elements == tstream_ptr[orig(cu_state)].ch_stream
tstream_ptr[].ch_stream[0] elements == tstream_ptr[orig(cu_state)].ch_stream[0]
tstream_ptr[].ch_stream->fp elements == tstream_ptr[orig(cu_state)].ch_stream->fp
tstream_ptr[].ch_stream->stream_ind is a subsequence of ::next[orig(token_ind)..]
tstream_ptr[].ch_stream->stream_ind is a subset of ::next[orig(token_ind)..]
tstream_ptr[].ch_stream->stream_ind is a subsequence of ::next[orig(token_ind)+1..]
tstream_ptr[].ch_stream->stream_ind is a subset of ::next[orig(token_ind)+1..]
tstream_ptr[].ch_stream->stream_ind elements == tstream_ptr[orig(cu_state)].ch_stream->stream_ind
token_ptr[] elements == token_ptr[orig(cu_state)]
token_ptr[].token_id elements == orig(cu_state)
token_ptr[].token_id is a subsequence of ::base[orig(token_ind)..]
token_ptr[].token_id is a subset of ::base[orig(token_ind)..]
token_ptr[].token_id is a subsequence of ::base[orig(token_ind)+1..]
token_ptr[].token_id is a subset of ::base[orig(token_ind)+1..]
orig(token_ind) in ::next[orig(token_ind)..]
orig(token_ind) in ::next[orig(token_ind)+1..]
orig(ch) in ::default1[orig(token_ind)..]
orig(ch) in ::default1[orig(token_ind)+1..]
orig(ch) in ::base[orig(token_ind)..]
orig(ch) in ::base[orig(token_ind)+1..]
orig(ch) in ::next[orig(token_ind)..]
orig(ch) in ::next[orig(token_ind)+1..]
orig(ch) in ::check[orig(token_ind)..]
orig(ch) in ::check[orig(token_ind)+1..]
::default1[0..orig(cu_state)] elements == ::default1[orig(cu_state)]
::default1[orig(cu_state)] in ::check[orig(token_ind)..]
::default1[orig(cu_state)] in ::check[orig(token_ind)+1..]
::default1[0..orig(cu_state)] is a subsequence of ::check[orig(token_ind)..]
::default1[0..orig(cu_state)] is a subset of ::check[orig(token_ind)..]
::default1[0..orig(cu_state)] is a subsequence of ::check[orig(token_ind)+1..]
::default1[0..orig(cu_state)] is a subset of ::check[orig(token_ind)+1..]
::default1[orig(token_ind)] in ::next[orig(token_ind)..]
::default1[orig(token_ind)] in ::next[orig(token_ind)+1..]
::default1[orig(token_ind)] in ::check[orig(token_ind)..]
::default1[orig(token_ind)] in ::check[orig(token_ind)+1..]
::default1[0..orig(token_ind)] is a subset of ::check[orig(token_ind)..]
::default1[0..orig(token_ind)] is a subset of ::check[orig(token_ind)+1..]
::base[0..orig(cu_state)] elements == ::base[orig(cu_state)]
::next[orig(token_ind)] in ::check[orig(token_ind)..]
::next[orig(token_ind)] in ::check[orig(token_ind)+1..]
::next[0..orig(token_ind)] is a subsequence of ::check[orig(token_ind)..]
::next[0..orig(token_ind)] is a subset of ::check[orig(token_ind)..]
::next[0..orig(token_ind)] is a subsequence of ::check[orig(token_ind)+1..]
::next[0..orig(token_ind)] is a subset of ::check[orig(token_ind)+1..]
===========================================================================
print_tokens.c.get_actual_token():::ENTER
size(::default1[]) == size(::base[])
size(::next[]) == size(::check[])
::default1 has only one value
::default1[] == [54, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 51, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, -3, -1, -1, -1, -1, -1, -1, -1]
::default1[i] != i
::base has only one value
::base[] == [-32, -96, -105, -93, -94, -87, -1, -97, -86, -1, -99, -1, -72, -1, -80, -82, -1, 53, 43, -1, -1, -1, -1, -1, -1, -1, 133, -1, 233, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, 40, -1, 251, -1, -1, -1, -1, -1]
::next has only one value
::next[] == [0, 2, 26, 28, 3, 4, 5, 23, 19, 20, 6, -1, 25, 8, 9, 11, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, -1, 30, -1, 31, 13, 15, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 21, -1, 22, 32, -1, 24, 7, 17, 17, 17, 17, 17, 17, 17, 12, 17, 17, 1, 17, 17, 10, 17, 17, 17, 17, 17, 17, 17, 17, 14, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, -1, 26, 26, 27, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 0, 0, -1, -1, -1, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29]
::next[] elements >= -1
::check has only one value
::check[] == [0, 1, 0, 0, 2, 3, 4, 0, 0, 0, 5, -1, 0, 7, 8, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, -1, 0, 12, 14, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 31, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, -1, -1, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 54, 54, -1, -1, -1, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28]
::check[] elements >= -1
size(::default1[]) == 60
size(::next[]) == 360
::default1[token_ind] one of { -1, 17 }
::default1[token_ind-1] one of { -2, -1, 17 }
::check[token_ind] one of { -1, 0, 4 }
::check[token_ind-1] one of { 0, 1, 3 }
::default1[] elements < size(::default1[])-1
::default1[] elements < size(::next[])-1
::base[] elements < size(::next[])-1
::next[] elements < size(::default1[])-1
::next[] elements < size(::next[])-1
::default1[token_ind] in ::next[]
::check[token_ind] in ::next[]
::check[token_ind-1] in ::next[]
::check[] elements < size(::default1[])-1
::check[] elements < size(::next[])-1
::default1[token_ind] in ::check[]
token_ind < size(::default1[])-1
token_ind < size(::next[])-1
token_ind != ::default1[token_ind]
token_ind != ::default1[token_ind-1]
token_ind != ::base[token_ind]
token_ind != ::base[token_ind-1]
token_ind != ::next[token_ind]
(::next[token_ind-1] >> token_ind == 0)
(token_ind >> ::next[token_ind-1] == 0)
token_ind > ::check[token_ind]
token_ind > ::check[token_ind-1]
::check[0..token_ind] elements < token_ind
size(::default1[]) != ::base[token_ind]
size(::default1[])-1 > ::default1[token_ind]
size(::default1[])-1 > ::default1[token_ind-1]
size(::default1[])-1 != ::base[token_ind]
size(::default1[])-1 > ::base[token_ind-1]
size(::default1[])-1 > ::next[token_ind]
size(::default1[])-1 > ::next[token_ind-1]
size(::default1[])-1 > ::check[token_ind]
size(::default1[])-1 > ::check[token_ind-1]
size(::next[])-1 > ::default1[token_ind]
size(::next[])-1 > ::default1[token_ind-1]
size(::next[])-1 > ::base[token_ind]
size(::next[])-1 > ::base[token_ind-1]
size(::next[])-1 > ::next[token_ind]
size(::next[])-1 > ::next[token_ind-1]
size(::next[])-1 > ::check[token_ind]
size(::next[])-1 > ::check[token_ind-1]
::default1[token_ind-1] % ::default1[token_ind] == 0
::default1[token_ind-1] is a bitwise subset of ::default1[token_ind]
::default1[token_ind] >= ::default1[token_ind-1]
::default1[token_ind] != ::next[token_ind-1]
::default1[token_ind] in ::next[token_ind..]
::default1[token_ind] in ::next[token_ind+1..]
::default1[token_ind] != ::check[token_ind-1]
::default1[token_ind] in ::check[token_ind..]
::default1[token_ind] in ::check[token_ind+1..]
::default1[token_ind-1] != ::next[token_ind-1]
::default1[token_ind-1] != ::check[token_ind-1]
::base[token_ind] != ::next[token_ind]
::base[token_ind] != ::next[token_ind-1]
::base[token_ind] != ::check[token_ind]
::base[token_ind] != ::check[token_ind-1]
::check[token_ind-1] is a bitwise subset of ::base[token_ind]
::base[token_ind-1] != ::next[token_ind-1]
::base[token_ind-1] != ::check[token_ind-1]
::check[token_ind] is a bitwise subset of ::next[token_ind]
::next[token_ind] >= ::check[token_ind]
::next[token_ind] != ::check[token_ind-1]
::next[token_ind-1] >= ::check[token_ind]
(::next[token_ind-1] & ::check[token_ind-1]) == 0
::next[token_ind-1] > ::check[token_ind-1]
::check[0..token_ind] elements <= ::next[token_ind-1]
::check[0..token_ind-1] elements < ::next[token_ind-1]
::check[token_ind] in ::next[0..token_ind]
::next[0..token_ind] >= ::check[0..token_ind] (elementwise)
::check[token_ind] in ::next[0..token_ind-1]
::next[0..token_ind-1] >= ::check[0..token_ind-1] (elementwise)
(::check[token_ind] & ::check[token_ind-1]) == 0
===========================================================================
print_tokens.c.get_actual_token():::EXIT
::default1 == orig(::default1)
::default1[] == orig(::default1[])
::base == orig(::base)
::base[] == orig(::base[])
::next == orig(::next)
::next[] == orig(::next[])
::check == orig(::check)
::check[] == orig(::check[])
size(::default1[]) == size(::base[])
size(::default1[]) == orig(size(::base[]))
size(::next[]) == size(::check[])
size(::next[]) == orig(size(::check[]))
::default1[return] == ::default1[return-1]
::default1[return] == ::default1[orig(token_ind)]
::default1[return] == orig(::default1[post(token_ind)])
::default1[return] == orig(::default1[post(return)-1])
::default1[return] == orig(::default1[token_ind])
::base[return-1] == ::base[orig(token_ind)]
::base[return-1] == orig(::base[post(token_ind)])
::base[return-1] == orig(::base[token_ind])
::next[return-1] == ::next[orig(token_ind)]
::next[return-1] == orig(::next[post(token_ind)])
::next[return-1] == orig(::next[token_ind])
::check[return-1] == ::check[orig(token_ind)]
::check[return-1] == orig(::check[post(token_ind)])
::check[return-1] == orig(::check[token_ind])
::default1 has only one value
::default1[] == [54, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 51, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, -3, -1, -1, -1, -1, -1, -1, -1]
::default1[i] != i
::base has only one value
::base[] == [-32, -96, -105, -93, -94, -87, -1, -97, -86, -1, -99, -1, -72, -1, -80, -82, -1, 53, 43, -1, -1, -1, -1, -1, -1, -1, 133, -1, 233, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, 40, -1, 251, -1, -1, -1, -1, -1]
::next has only one value
::next[] == [0, 2, 26, 28, 3, 4, 5, 23, 19, 20, 6, -1, 25, 8, 9, 11, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, -1, 30, -1, 31, 13, 15, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 21, -1, 22, 32, -1, 24, 7, 17, 17, 17, 17, 17, 17, 17, 12, 17, 17, 1, 17, 17, 10, 17, 17, 17, 17, 17, 17, 17, 17, 14, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, -1, 26, 26, 27, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 0, 0, -1, -1, -1, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29]
::next[] elements >= -1
::check has only one value
::check[] == [0, 1, 0, 0, 2, 3, 4, 0, 0, 0, 5, -1, 0, 7, 8, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, -1, 0, 12, 14, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 31, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, -1, -1, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 54, 54, -1, -1, -1, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28]
::check[] elements >= -1
size(::default1[]) == 60
size(::next[]) == 360
::default1[return] one of { -1, 17 }
::default1[orig(token_ind)-1] one of { -2, -1, 17 }
::base[return] one of { -97, -93, -1 }
::check[return] == 0
::check[return-1] one of { -1, 0, 4 }
::check[orig(token_ind)-1] one of { 0, 1, 3 }
::default1[] elements < size(::default1[])-1
::default1[] elements < size(::next[])-1
::base[] elements < size(::next[])-1
::check[return] in ::base[]
::next[] elements < size(::default1[])-1
::next[] elements < size(::next[])-1
::default1[return] in ::next[]
::next[] elements >= ::base[return]
::check[return] in ::next[]
::check[return-1] in ::next[]
::check[orig(token_ind)-1] in ::next[]
::check[] elements < size(::default1[])-1
::check[] elements < size(::next[])-1
::default1[return] in ::check[]
::check[] elements >= ::base[return]
(return >> orig(token_ind) == 0)
return - orig(token_ind) - 1 == 0
return < size(::default1[])-1
return < size(::next[])-1
return != ::default1[return]
return != ::default1[orig(token_ind)-1]
return > ::base[return]
return is a bitwise subset of ::base[return]
return != ::base[return-1]
return != ::base[orig(token_ind)-1]
(return >> ::next[return] == 0)
return != ::next[return]
return != ::next[return-1]
(::next[orig(token_ind)-1] >> return == 0)
(return >> ::next[orig(token_ind)-1] == 0)
return != ::next[orig(token_ind)-1]
return > ::check[return]
return > ::check[return-1]
::check[0..return] elements < return
::check[orig(token_ind)-1] is a bitwise subset of return
return > ::check[orig(token_ind)-1]
orig(token_ind) < size(::default1[])-1
orig(token_ind) < size(::next[])-1
orig(token_ind) != ::default1[return]
orig(token_ind) != ::default1[orig(token_ind)-1]
orig(token_ind) > ::base[return]
orig(token_ind) is a bitwise subset of ::base[return]
orig(token_ind) != ::base[return-1]
orig(token_ind) != ::base[orig(token_ind)-1]
(orig(token_ind) >> ::next[return] == 0)
orig(token_ind) != ::next[return]
orig(token_ind) != ::next[return-1]
(::next[orig(token_ind)-1] >> orig(token_ind) == 0)
(orig(token_ind) >> ::next[orig(token_ind)-1] == 0)
orig(token_ind) > ::check[return]
orig(token_ind) > ::check[return-1]
::check[0..return] elements < orig(token_ind)
orig(token_ind) > ::check[orig(token_ind)-1]
size(::default1[]) != ::base[return-1]
(size(::default1[]) >> ::next[return] == 0)
size(::default1[])-1 > ::default1[return]
size(::default1[])-1 > ::default1[orig(token_ind)-1]
size(::default1[])-1 > ::base[return]
size(::default1[])-1 != ::base[return-1]
size(::default1[])-1 > ::base[orig(token_ind)-1]
(size(::default1[])-1 >> ::next[return] == 0)
size(::default1[])-1 > ::next[return]
size(::default1[])-1 > ::next[return-1]
size(::default1[])-1 > ::next[orig(token_ind)-1]
size(::default1[])-1 > ::check[return-1]
size(::default1[])-1 > ::check[orig(token_ind)-1]
(size(::next[]) >> ::next[return] == 0)
size(::next[])-1 > ::default1[return]
size(::next[])-1 > ::default1[orig(token_ind)-1]
size(::next[])-1 > ::base[return]
size(::next[])-1 > ::base[return-1]
size(::next[])-1 > ::base[orig(token_ind)-1]
(size(::next[])-1 >> ::next[return] == 0)
size(::next[])-1 > ::next[return]
size(::next[])-1 > ::next[return-1]
size(::next[])-1 > ::next[orig(token_ind)-1]
size(::next[])-1 > ::check[return-1]
size(::next[])-1 > ::check[orig(token_ind)-1]
::default1[orig(token_ind)-1] % ::default1[return] == 0
::default1[orig(token_ind)-1] is a bitwise subset of ::default1[return]
::default1[return] >= ::default1[orig(token_ind)-1]
::default1[return] >= ::base[return]
::default1[return] < ::next[return]
::default1[return] in ::next[return..]
::default1[return] in ::next[return+1..]
::default1[return] != ::next[orig(token_ind)-1]
::default1[return] in ::next[orig(token_ind)..]
::default1[return] != ::check[return]
::default1[return] in ::check[return..]
::default1[return] in ::check[return+1..]
::default1[return] != ::check[orig(token_ind)-1]
::default1[return] in ::check[orig(token_ind)..]
::default1[orig(token_ind)-1] < ::next[return]
::default1[orig(token_ind)-1] != ::next[orig(token_ind)-1]
::default1[orig(token_ind)-1] != ::check[return]
::default1[orig(token_ind)-1] != ::check[orig(token_ind)-1]
::base[return] < ::next[return]
::base[return] <= ::next[return-1]
::base[return] < ::next[orig(token_ind)-1]
::next[orig(token_ind)-1] is a bitwise subset of ::base[return]
::base[return] < ::check[return]
::base[return] <= ::check[return-1]
::check[return-1] is a bitwise subset of ::base[return]
::base[return] < ::check[orig(token_ind)-1]
::check[orig(token_ind)-1] is a bitwise subset of ::base[return]
::base[return-1] != ::next[return]
::base[return-1] != ::next[return-1]
::base[return-1] != ::next[orig(token_ind)-1]
::base[return-1] != ::check[return]
::base[return-1] != ::check[return-1]
::base[return-1] != ::check[orig(token_ind)-1]
::check[orig(token_ind)-1] is a bitwise subset of ::base[return-1]
::base[orig(token_ind)-1] != ::next[return]
::base[orig(token_ind)-1] != ::next[orig(token_ind)-1]
::base[orig(token_ind)-1] != ::check[return]
::base[orig(token_ind)-1] != ::check[orig(token_ind)-1]
::next[return] >= ::next[return-1]
(::next[orig(token_ind)-1] >> ::next[return] == 0)
::next[return] > ::check[return]
::next[return] > ::check[return-1]
::check[0..return] elements < ::next[return]
::next[return] > ::check[orig(token_ind)-1]
::next[return-1] != ::check[return]
::check[return-1] is a bitwise subset of ::next[return-1]
::next[return-1] >= ::check[return-1]
::next[return-1] != ::check[orig(token_ind)-1]
::check[return] in ::next[return..]
::check[return] in ::next[return+1..]
::check[return] in ::next[0..return]
::check[return-1] in ::next[0..return]
::next[0..return] >= ::check[0..return] (elementwise)
::check[return] in ::next[0..return-1]
::check[return-1] in ::next[0..return-1]
::next[0..return-1] >= ::check[0..return-1] (elementwise)
::next[orig(token_ind)-1] > ::check[return]
::next[orig(token_ind)-1] >= ::check[return-1]
::check[0..return] elements <= ::next[orig(token_ind)-1]
(::next[orig(token_ind)-1] & ::check[orig(token_ind)-1]) == 0
::next[orig(token_ind)-1] > ::check[orig(token_ind)-1]
::check[0..orig(token_ind)-1] elements < ::next[orig(token_ind)-1]
::check[return] in ::next[orig(token_ind)..]
::check[return] in ::next[0..orig(token_ind)-1]
::check[return-1] in ::next[0..orig(token_ind)-1]
::next[0..orig(token_ind)-1] >= ::check[0..orig(token_ind)-1] (elementwise)
::check[return] <= ::check[orig(token_ind)-1]
(::check[return-1] & ::check[orig(token_ind)-1]) == 0
::check[return] == (::check[return-1] / return)
::check[return] == (::check[return-1] / orig(token_ind))
::check[return] == (::next[return-1] / size(::default1[]))
::check[return] == (::next[return-1] / size(::default1[])-1)
::check[return] == (::base[orig(token_ind)-1] / size(::next[]))
::check[return] == (::next[return-1] / size(::next[]))
::check[return] == (::base[orig(token_ind)-1] / size(::next[])-1)
::check[return] == (::next[return-1] / size(::next[])-1)
::default1[return] == (java.lang.Math.max(::default1[orig(token_ind)-1], ::base[return]))
::check[return] == (::default1[return] / ::next[return])
::check[return] == (::check[orig(token_ind)-1] / ::default1[return])
::check[return] == (::default1[orig(token_ind)-1] / ::next[return])
::check[return] == (::check[orig(token_ind)-1] / ::default1[orig(token_ind)-1])
::check[return] == (::check[orig(token_ind)-1] / ::base[return])
::check[return] == (::check[orig(token_ind)-1] / ::base[orig(token_ind)-1])
::check[return] == (::check[return-1] / ::next[return])
::check[return] == (::check[orig(token_ind)-1] / ::next[return-1])
===========================================================================
print_tokens.c.keyword():::ENTER
size(::default1[]) == size(::base[])
size(::next[]) == size(::check[])
::default1[state] == ::default1[state-1]
::default1 has only one value
::default1[] == [54, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 51, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, -3, -1, -1, -1, -1, -1, -1, -1]
::default1[i] != i
::base has only one value
::base[] == [-32, -96, -105, -93, -94, -87, -1, -97, -86, -1, -99, -1, -72, -1, -80, -82, -1, 53, 43, -1, -1, -1, -1, -1, -1, -1, 133, -1, 233, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, 40, -1, 251, -1, -1, -1, -1, -1]
::next has only one value
::next[] == [0, 2, 26, 28, 3, 4, 5, 23, 19, 20, 6, -1, 25, 8, 9, 11, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, -1, 30, -1, 31, 13, 15, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 21, -1, 22, 32, -1, 24, 7, 17, 17, 17, 17, 17, 17, 17, 12, 17, 17, 1, 17, 17, 10, 17, 17, 17, 17, 17, 17, 17, 17, 14, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, -1, 26, 26, 27, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 0, 0, -1, -1, -1, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29]
::next[] elements >= -1
::check has only one value
::check[] == [0, 1, 0, 0, 2, 3, 4, 0, 0, 0, 5, -1, 0, 7, 8, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, -1, 0, 12, 14, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 31, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, -1, -1, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 54, 54, -1, -1, -1, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28]
::check[] elements >= -1
size(::default1[]) == 60
size(::next[]) == 360
::default1[state] == 17
::default1[0..state] elements one of { 17, 54 }
::default1[0..state] sorted by >=
::default1[0..state-1] sorted by >=
::base[state] == -1
::check[state-1] >= 0
::default1[] elements < size(::default1[])-1
::default1[] elements < size(::next[])-1
::base[state] in ::default1[]
::default1[] elements > ::base[state-1]
::base[] elements < size(::next[])-1
state in ::next[]
::next[] elements < size(::default1[])-1
::next[] elements < size(::next[])-1
::default1[state] in ::next[]
::base[state] in ::next[]
::next[] elements >= ::base[state]
::next[] elements > ::base[state-1]
::check[state] in ::next[]
::check[state-1] in ::next[]
::check[] elements < size(::default1[])-1
::check[] elements < size(::next[])-1
::default1[state] in ::check[]
::base[state] in ::check[]
::check[] elements >= ::base[state]
::check[] elements > ::base[state-1]
(size(::default1[]) >> state == 0)
(size(::default1[])-1 >> state == 0)
state < size(::default1[])-1
state < size(::next[])-1
(::default1[state] >> state == 0)
state < ::default1[state]
::default1[0..state] elements > state
state > ::base[state]
state > ::base[state-1]
::base[0..state] elements < state
state != ::next[state]
(::next[state-1] >> state == 0)
(state >> ::next[state-1] == 0)
state != ::next[state-1]
state in ::next[state..]
state in ::next[state+1..]
state > ::check[state]
state > ::check[state-1]
::check[0..state] elements < state
size(::default1[])-1 > ::base[state-1]
::base[0..state] elements < size(::default1[])-1
size(::default1[])-1 > ::next[state]
size(::default1[])-1 > ::next[state-1]
size(::default1[])-1 > ::check[state]
size(::default1[])-1 > ::check[state-1]
size(::next[]) % ::next[state] == 0
size(::next[])-1 > ::base[state-1]
size(::next[])-1 > ::next[state]
size(::next[])-1 > ::next[state-1]
size(::next[])-1 > ::check[state]
size(::next[])-1 > ::check[state-1]
::default1[0..state] elements >= ::default1[state]
::default1[state] > ::base[state-1]
::base[0..state] elements < ::default1[state]
::default1[state] != ::next[state]
(::next[state-1] >> ::default1[state] == 0)
::default1[state] != ::next[state-1]
::default1[state] in ::next[state..]
::default1[state] in ::next[state+1..]
::default1[state] > ::check[state]
::default1[state] > ::check[state-1]
::default1[state] in ::check[state..]
::default1[state] in ::check[state+1..]
::check[0..state] elements < ::default1[state]
::base[state] in ::default1[state..]
::base[state] in ::default1[state+1..]
::default1[0..state] elements > ::base[state]
::default1[0..state] > ::base[0..state] (elementwise)
::default1[0..state] elements > ::check[state]
::default1[0..state] elements > ::check[state-1]
::default1[0..state] is a subset of ::check[state..]
::default1[0..state] is a subset of ::check[state+1..]
::default1[0..state] > ::check[0..state] (elementwise)
::default1[0..state-1] > ::base[0..state-1] (elementwise)
::default1[0..state-1] is a subset of ::check[state..]
::default1[0..state-1] is a subset of ::check[state+1..]
::default1[0..state-1] > ::check[0..state-1] (elementwise)
::base[state] > ::base[state-1]
::base[0..state] elements <= ::base[state]
::base[state] <= ::next[state]
::base[state] < ::next[state-1]
::base[state] in ::next[state..]
::base[state] in ::next[state+1..]
::base[state] <= ::check[state]
::base[state] < ::check[state-1]
::base[state] in ::check[state..]
::base[state] in ::check[state+1..]
::base[state-1] < ::next[state]
::base[state-1] < ::next[state-1]
::base[state-1] < ::check[state]
::base[state-1] < ::check[state-1]
::base[0..state] elements <= ::next[state]
::base[0..state] elements < ::next[state-1]
::base[0..state] <= ::next[0..state] (elementwise)
::base[0..state] elements <= ::check[state]
::base[0..state] elements < ::check[state-1]
::base[0..state] <= ::check[0..state] (elementwise)
::base[0..state-1] <= ::next[0..state-1] (elementwise)
::base[0..state-1] <= ::check[0..state-1] (elementwise)
::next[state] != ::next[state-1]
::next[state] >= ::check[state]
::next[state] != ::check[state-1]
::next[state-1] >= ::check[state]
::next[state-1] > ::check[state-1]
::check[0..state] elements <= ::next[state-1]
::check[0..state-1] elements < ::next[state-1]
::next[0..state] >= ::check[0..state] (elementwise)
::next[0..state-1] >= ::check[0..state-1] (elementwise)
::base[state] == (::base[state-1] / size(::default1[]))
::base[state] == (::base[state-1] >> size(::default1[]))
::base[state] == (::base[state-1] / size(::default1[])-1)
::base[state] == (::base[state-1] >> size(::default1[])-1)
::base[state] == (::base[state-1] >> ::default1[state])
===========================================================================
print_tokens.c.keyword():::EXIT
::default1 == orig(::default1)
::default1[] == orig(::default1[])
::base == orig(::base)
::base[] == orig(::base[])
::next == orig(::next)
::next[] == orig(::next[])
::check == orig(::check)
::check[] == orig(::check[])
return == orig(state)
size(::default1[]) == size(::base[])
size(::default1[]) == orig(size(::base[]))
size(::next[]) == size(::check[])
size(::next[]) == orig(size(::check[]))
::default1[return] == ::default1[return-1]
::default1[return] == ::default1[orig(state)-1]
::default1[return] == orig(::default1[post(state)-1])
::default1[return] == orig(::default1[post(return)-1])
::default1[return] == orig(::default1[state-1])
::default1 has only one value
::default1[] == [54, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 51, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, -3, -1, -1, -1, -1, -1, -1, -1]
::default1[i] != i
::base has only one value
::base[] == [-32, -96, -105, -93, -94, -87, -1, -97, -86, -1, -99, -1, -72, -1, -80, -82, -1, 53, 43, -1, -1, -1, -1, -1, -1, -1, 133, -1, 233, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, 40, -1, 251, -1, -1, -1, -1, -1]
::next has only one value
::next[] == [0, 2, 26, 28, 3, 4, 5, 23, 19, 20, 6, -1, 25, 8, 9, 11, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, -1, 30, -1, 31, 13, 15, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 21, -1, 22, 32, -1, 24, 7, 17, 17, 17, 17, 17, 17, 17, 12, 17, 17, 1, 17, 17, 10, 17, 17, 17, 17, 17, 17, 17, 17, 14, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, -1, 26, 26, 27, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 0, 0, -1, -1, -1, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29]
::next[] elements >= -1
::check has only one value
::check[] == [0, 1, 0, 0, 2, 3, 4, 0, 0, 0, 5, -1, 0, 7, 8, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, -1, 0, 12, 14, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 31, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, -1, -1, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 54, 54, -1, -1, -1, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28]
::check[] elements >= -1
size(::default1[]) == 60
size(::next[]) == 360
::default1[return] == 17
::default1[0..return] elements one of { 17, 54 }
::default1[0..return] sorted by >=
::default1[0..return-1] sorted by >=
::base[return] == -1
::check[return-1] >= 0
::default1[] elements < size(::default1[])-1
::default1[] elements < size(::next[])-1
::base[return] in ::default1[]
::default1[] elements > ::base[return-1]
::base[] elements < size(::next[])-1
return in ::next[]
::next[] elements < size(::default1[])-1
::next[] elements < size(::next[])-1
::default1[return] in ::next[]
::base[return] in ::next[]
::next[] elements >= ::base[return]
::next[] elements > ::base[return-1]
::check[return] in ::next[]
::check[return-1] in ::next[]
::check[] elements < size(::default1[])-1
::check[] elements < size(::next[])-1
::default1[return] in ::check[]
::base[return] in ::check[]
::check[] elements >= ::base[return]
::check[] elements > ::base[return-1]
(size(::default1[]) >> return == 0)
(size(::default1[])-1 >> return == 0)
return < size(::default1[])-1
return < size(::next[])-1
(::default1[return] >> return == 0)
return < ::default1[return]
::default1[0..return] elements > return
return > ::base[return]
return > ::base[return-1]
::base[0..return] elements < return
return != ::next[return]
(::next[return-1] >> return == 0)
(return >> ::next[return-1] == 0)
return != ::next[return-1]
return in ::next[return..]
return in ::next[return+1..]
return > ::check[return]
return > ::check[return-1]
::check[0..return] elements < return
size(::default1[])-1 > ::base[return-1]
::base[0..return] elements < size(::default1[])-1
size(::default1[])-1 > ::next[return]
size(::default1[])-1 > ::next[return-1]
size(::default1[])-1 > ::check[return]
size(::default1[])-1 > ::check[return-1]
size(::next[]) % ::next[return] == 0
size(::next[])-1 > ::base[return-1]
size(::next[])-1 > ::next[return]
size(::next[])-1 > ::next[return-1]
size(::next[])-1 > ::check[return]
size(::next[])-1 > ::check[return-1]
::default1[0..return] elements >= ::default1[return]
::default1[return] > ::base[return-1]
::base[0..return] elements < ::default1[return]
::default1[return] != ::next[return]
(::next[return-1] >> ::default1[return] == 0)
::default1[return] != ::next[return-1]
::default1[return] in ::next[return..]
::default1[return] in ::next[return+1..]
::default1[return] > ::check[return]
::default1[return] > ::check[return-1]
::default1[return] in ::check[return..]
::default1[return] in ::check[return+1..]
::check[0..return] elements < ::default1[return]
::base[return] in ::default1[return..]
::base[return] in ::default1[return+1..]
::default1[0..return] elements > ::base[return]
::default1[0..return] > ::base[0..return] (elementwise)
::default1[0..return] elements > ::check[return]
::default1[0..return] elements > ::check[return-1]
::default1[0..return] is a subset of ::check[return..]
::default1[0..return] is a subset of ::check[return+1..]
::default1[0..return] > ::check[0..return] (elementwise)
::default1[0..return-1] > ::base[0..return-1] (elementwise)
::default1[0..return-1] is a subset of ::check[return..]
::default1[0..return-1] is a subset of ::check[return+1..]
::default1[0..return-1] > ::check[0..return-1] (elementwise)
::base[return] > ::base[return-1]
::base[0..return] elements <= ::base[return]
::base[return] <= ::next[return]
::base[return] < ::next[return-1]
::base[return] in ::next[return..]
::base[return] in ::next[return+1..]
::base[return] <= ::check[return]
::base[return] < ::check[return-1]
::base[return] in ::check[return..]
::base[return] in ::check[return+1..]
::base[return-1] < ::next[return]
::base[return-1] < ::next[return-1]
::base[return-1] < ::check[return]
::base[return-1] < ::check[return-1]
::base[0..return] elements <= ::next[return]
::base[0..return] elements < ::next[return-1]
::base[0..return] <= ::next[0..return] (elementwise)
::base[0..return] elements <= ::check[return]
::base[0..return] elements < ::check[return-1]
::base[0..return] <= ::check[0..return] (elementwise)
::base[0..return-1] <= ::next[0..return-1] (elementwise)
::base[0..return-1] <= ::check[0..return-1] (elementwise)
::next[return] != ::next[return-1]
::next[return] >= ::check[return]
::next[return] != ::check[return-1]
::next[return-1] >= ::check[return]
::next[return-1] > ::check[return-1]
::check[0..return] elements <= ::next[return-1]
::check[0..return-1] elements < ::next[return-1]
::next[0..return] >= ::check[0..return] (elementwise)
::next[0..return-1] >= ::check[0..return-1] (elementwise)
::base[return] == (::base[return-1] / size(::default1[]))
::base[return] == (::base[return-1] >> size(::default1[]))
::base[return] == (::base[return-1] / size(::default1[])-1)
::base[return] == (::base[return-1] >> size(::default1[])-1)
::base[return] == (::base[return-1] >> ::default1[return])
===========================================================================
print_tokens.c.next_state():::ENTER
size(::default1[]) == size(::base[])
size(::next[]) == size(::check[])
::default1 has only one value
::default1[] == [54, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 51, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, -3, -1, -1, -1, -1, -1, -1, -1]
::default1[] elements != 0
::default1[i] != i
::base has only one value
::base[] == [-32, -96, -105, -93, -94, -87, -1, -97, -86, -1, -99, -1, -72, -1, -80, -82, -1, 53, 43, -1, -1, -1, -1, -1, -1, -1, 133, -1, 233, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, 40, -1, 251, -1, -1, -1, -1, -1]
::base[i] != i
::next has only one value
::next[] == [0, 2, 26, 28, 3, 4, 5, 23, 19, 20, 6, -1, 25, 8, 9, 11, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, -1, 30, -1, 31, 13, 15, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 21, -1, 22, 32, -1, 24, 7, 17, 17, 17, 17, 17, 17, 17, 12, 17, 17, 1, 17, 17, 10, 17, 17, 17, 17, 17, 17, 17, 17, 14, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, -1, 26, 26, 27, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 0, 0, -1, -1, -1, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29]
::next[] elements >= -1
::check has only one value
::check[] == [0, 1, 0, 0, 2, 3, 4, 0, 0, 0, 5, -1, 0, 7, 8, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, -1, 0, 12, 14, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 31, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, -1, -1, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 54, 54, -1, -1, -1, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28]
::check[] elements >= -1
ch != 0
size(::default1[]) == 60
size(::next[]) == 360
{0, 26, -1, 17, 27, 29} subset of ::next[ch+1..]
{-1, 51, 52, 26, 54, 28} subset of ::check[ch+1..]
::default1[] elements < size(::default1[])-1
::default1[] elements < size(::next[])-1
::base[] elements < size(::next[])-1
::next[] elements < size(::default1[])-1
::next[] elements < size(::next[])-1
::check[] elements < size(::default1[])-1
::check[] elements < size(::next[])-1
state < size(::default1[])-1
state < size(::next[])-1
ch != size(::default1[])
ch < size(::next[])-1
::check[0..ch] elements < ch
===========================================================================
print_tokens.c.next_state():::EXIT
::default1 == orig(::default1)
::default1[] == orig(::default1[])
::base == orig(::base)
::base[] == orig(::base[])
::next == orig(::next)
::next[] == orig(::next[])
::check == orig(::check)
::check[] == orig(::check[])
size(::default1[]) == size(::base[])
size(::default1[]) == orig(size(::base[]))
size(::next[]) == size(::check[])
size(::next[]) == orig(size(::check[]))
::default1 has only one value
::default1[] == [54, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 51, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, -3, -1, -1, -1, -1, -1, -1, -1]
::default1[] elements != 0
::default1[i] != i
::base has only one value
::base[] == [-32, -96, -105, -93, -94, -87, -1, -97, -86, -1, -99, -1, -72, -1, -80, -82, -1, 53, 43, -1, -1, -1, -1, -1, -1, -1, 133, -1, 233, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, 40, -1, 251, -1, -1, -1, -1, -1]
::base[i] != i
::next has only one value
::next[] == [0, 2, 26, 28, 3, 4, 5, 23, 19, 20, 6, -1, 25, 8, 9, 11, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, -1, 30, -1, 31, 13, 15, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 21, -1, 22, 32, -1, 24, 7, 17, 17, 17, 17, 17, 17, 17, 12, 17, 17, 1, 17, 17, 10, 17, 17, 17, 17, 17, 17, 17, 17, 14, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, -1, 26, 26, 27, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 0, 0, -1, -1, -1, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29]
::next[] elements >= -1
::check has only one value
::check[] == [0, 1, 0, 0, 2, 3, 4, 0, 0, 0, 5, -1, 0, 7, 8, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, -1, 0, 12, 14, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 31, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, -1, -1, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 54, 54, -1, -1, -1, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28]
::check[] elements >= -1
size(::default1[]) == 60
size(::next[]) == 360
{0, 26, -1, 17, 27, 29} subset of ::next[orig(ch)+1..]
{-1, 51, 52, 26, 54, 28} subset of ::check[orig(ch)+1..]
::default1[] elements < size(::default1[])-1
::default1[] elements < size(::next[])-1
::base[] elements < size(::next[])-1
::next[] elements < size(::default1[])-1
::next[] elements < size(::next[])-1
::check[] elements < size(::default1[])-1
::check[] elements < size(::next[])-1
return <= orig(ch)
return < size(::default1[])-1
return < size(::next[])-1
orig(state) < size(::default1[])-1
orig(state) < size(::next[])-1
orig(ch) != size(::default1[])
orig(ch) < size(::next[])-1
::check[0..orig(ch)] elements < orig(ch)
===========================================================================
print_tokens.c.numeric_case():::ENTER
size(::default1[]) == size(::base[])
size(::next[]) == size(::check[])
size(tstream_ptr[]) == size(tstream_ptr[].ch_stream[0])
size(tstream_ptr[])-1 == ::check[ch-1]
size(tstream_ptr[])-1 == ::check[token_ind]
size(tstream_ptr[])-1 == ::check[token_ind-1]
::default1[ch] == ::default1[ch-1]
::default1[ch] == ::default1[token_ind]
::default1[ch] == ::default1[token_ind-1]
::default1 has only one value
::default1[] == [54, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 51, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, -3, -1, -1, -1, -1, -1, -1, -1]
::base has only one value
::base[] == [-32, -96, -105, -93, -94, -87, -1, -97, -86, -1, -99, -1, -72, -1, -80, -82, -1, 53, 43, -1, -1, -1, -1, -1, -1, -1, 133, -1, 233, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, 40, -1, 251, -1, -1, -1, -1, -1]
::next has only one value
::next[] == [0, 2, 26, 28, 3, 4, 5, 23, 19, 20, 6, -1, 25, 8, 9, 11, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, -1, 30, -1, 31, 13, 15, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 21, -1, 22, 32, -1, 24, 7, 17, 17, 17, 17, 17, 17, 17, 12, 17, 17, 1, 17, 17, 10, 17, 17, 17, 17, 17, 17, 17, 17, 14, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, -1, 26, 26, 27, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 0, 0, -1, -1, -1, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29]
::next[] elements >= -1
::check has only one value
::check[] == [0, 1, 0, 0, 2, 3, 4, 0, 0, 0, 5, -1, 0, 7, 8, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, -1, 0, 12, 14, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 31, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, -1, -1, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 54, 54, -1, -1, -1, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28]
::check[] elements >= -1
tstream_ptr has only one value
tstream_ptr[] contains no nulls and has only one value, of length 1
tstream_ptr[] elements has only one value
tstream_ptr[].ch_stream contains no nulls and has only one value, of length 1
tstream_ptr[].ch_stream elements has only one value
tstream_ptr[].ch_stream[0] contains no nulls and has only one value, of length 1
tstream_ptr[].ch_stream[0] elements has only one value
tstream_ptr[].ch_stream->fp contains no nulls and has only one value, of length 1
tstream_ptr[].ch_stream->fp elements has only one value
tstream_ptr[].ch_stream->stream_ind == [23]
tstream_ptr[].ch_stream->stream_ind elements == 23
token_ptr has only one value
ch == 10
token_ind == 3
size(::default1[]) == 60
size(::next[]) == 360
size(tstream_ptr[]) == 1
::default1[ch] == 17
::default1[ch..] == [17, 17, 17, 17, 17, 17, 17, 51, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, -3, -1, -1, -1, -1, -1, -1, -1]
::default1[ch+1..] == [17, 17, 17, 17, 17, 17, 51, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, -3, -1, -1, -1, -1, -1, -1, -1]
::default1[0..ch] == [54, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17]
::default1[0..ch] elements one of { 17, 54 }
::default1[0..ch-1] == [54, 17, 17, 17, 17, 17, 17, 17, 17, 17]
::default1[token_ind..] == [17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 51, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, -3, -1, -1, -1, -1, -1, -1, -1]
::default1[token_ind+1..] == [17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 51, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, -3, -1, -1, -1, -1, -1, -1, -1]
::default1[0..token_ind] == [54, 17, 17, 17]
::default1[0..token_ind-1] == [54, 17, 17]
::base[ch] == -99
::base[ch-1] == -1
::base[ch..] == [-99, -1, -72, -1, -80, -82, -1, 53, 43, -1, -1, -1, -1, -1, -1, -1, 133, -1, 233, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, 40, -1, 251, -1, -1, -1, -1, -1]
::base[ch+1..] == [-1, -72, -1, -80, -82, -1, 53, 43, -1, -1, -1, -1, -1, -1, -1, 133, -1, 233, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, 40, -1, 251, -1, -1, -1, -1, -1]
::base[0..ch] == [-32, -96, -105, -93, -94, -87, -1, -97, -86, -1, -99]
::base[0..ch-1] == [-32, -96, -105, -93, -94, -87, -1, -97, -86, -1]
::base[token_ind] == -93
::base[token_ind-1] == -105
::base[token_ind..] == [-93, -94, -87, -1, -97, -86, -1, -99, -1, -72, -1, -80, -82, -1, 53, 43, -1, -1, -1, -1, -1, -1, -1, 133, -1, 233, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, 40, -1, 251, -1, -1, -1, -1, -1]
::base[token_ind+1..] == [-94, -87, -1, -97, -86, -1, -99, -1, -72, -1, -80, -82, -1, 53, 43, -1, -1, -1, -1, -1, -1, -1, 133, -1, 233, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, 40, -1, 251, -1, -1, -1, -1, -1]
::base[0..token_ind] == [-32, -96, -105, -93]
::base[0..token_ind-1] == [-32, -96, -105]
::base[0..token_ind-1] elements one of { -105, -96, -32 }
::next[ch] == 6
::next[ch-1] == 20
::next[ch..] == [6, -1, 25, 8, 9, 11, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, -1, 30, -1, 31, 13, 15, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 21, -1, 22, 32, -1, 24, 7, 17, 17, 17, 17, 17, 17, 17, 12, 17, 17, 1, 17, 17, 10, 17, 17, 17, 17, 17, 17, 17, 17, 14, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, -1, 26, 26, 27, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 0, 0, -1, -1, -1, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29]
::next[ch+1..] == [-1, 25, 8, 9, 11, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, -1, 30, -1, 31, 13, 15, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 21, -1, 22, 32, -1, 24, 7, 17, 17, 17, 17, 17, 17, 17, 12, 17, 17, 1, 17, 17, 10, 17, 17, 17, 17, 17, 17, 17, 17, 14, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, -1, 26, 26, 27, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 0, 0, -1, -1, -1, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29]
::next[0..ch] == [0, 2, 26, 28, 3, 4, 5, 23, 19, 20, 6]
::next[0..ch-1] == [0, 2, 26, 28, 3, 4, 5, 23, 19, 20]
::next[token_ind] == 28
::next[token_ind-1] == 26
::next[token_ind..] == [28, 3, 4, 5, 23, 19, 20, 6, -1, 25, 8, 9, 11, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, -1, 30, -1, 31, 13, 15, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 21, -1, 22, 32, -1, 24, 7, 17, 17, 17, 17, 17, 17, 17, 12, 17, 17, 1, 17, 17, 10, 17, 17, 17, 17, 17, 17, 17, 17, 14, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, -1, 26, 26, 27, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 0, 0, -1, -1, -1, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29]
::next[token_ind+1..] == [3, 4, 5, 23, 19, 20, 6, -1, 25, 8, 9, 11, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, -1, 30, -1, 31, 13, 15, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 21, -1, 22, 32, -1, 24, 7, 17, 17, 17, 17, 17, 17, 17, 12, 17, 17, 1, 17, 17, 10, 17, 17, 17, 17, 17, 17, 17, 17, 14, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, -1, 26, 26, 27, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 0, 0, -1, -1, -1, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29]
::next[0..token_ind] == [0, 2, 26, 28]
::next[0..token_ind-1] == [0, 2, 26]
::next[0..token_ind-1] elements one of { 0, 2, 26 }
::check[ch] == 5
::check[ch..] == [5, -1, 0, 7, 8, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, -1, 0, 12, 14, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 31, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, -1, -1, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 54, 54, -1, -1, -1, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28]
::check[ch+1..] == [-1, 0, 7, 8, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, -1, 0, 12, 14, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 31, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, -1, -1, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 54, 54, -1, -1, -1, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28]
::check[0..ch] == [0, 1, 0, 0, 2, 3, 4, 0, 0, 0, 5]
::check[0..ch-1] == [0, 1, 0, 0, 2, 3, 4, 0, 0, 0]
::check[token_ind..] == [0, 2, 3, 4, 0, 0, 0, 5, -1, 0, 7, 8, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, -1, 0, 12, 14, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 31, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, -1, -1, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 54, 54, -1, -1, -1, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28]
::check[token_ind+1..] == [2, 3, 4, 0, 0, 0, 5, -1, 0, 7, 8, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, -1, 0, 12, 14, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 31, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, -1, -1, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 54, 54, -1, -1, -1, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28]
::check[0..token_ind] == [0, 1, 0, 0]
::check[0..token_ind] elements one of { 0, 1 }
::check[0..token_ind-1] == [0, 1, 0]
::base[ch-1] in ::default1[]
size(tstream_ptr[])-1 in ::base[]
::next[] is a superset of tstream_ptr[].ch_stream->stream_ind
ch in ::next[]
token_ind in ::next[]
size(tstream_ptr[]) in ::next[]
size(tstream_ptr[])-1 in ::next[]
::default1[ch] in ::next[]
::base[ch-1] in ::next[]
::check[ch] in ::next[]
ch in ::check[]
token_ind in ::check[]
size(tstream_ptr[]) in ::check[]
::default1[ch] in ::check[]
::base[ch-1] in ::check[]
::next[token_ind] in ::check[]
::next[token_ind-1] in ::check[]
tstream_ptr[].ch_stream->stream_ind is a subsequence of ::next[0..ch]
tstream_ptr[].ch_stream->stream_ind is a subset of ::next[0..ch]
tstream_ptr[].ch_stream->stream_ind is a subsequence of ::next[0..ch-1]
tstream_ptr[].ch_stream->stream_ind is a subset of ::next[0..ch-1]
tstream_ptr[].ch_stream->stream_ind is a subsequence of ::next[token_ind..]
tstream_ptr[].ch_stream->stream_ind is a subset of ::next[token_ind..]
tstream_ptr[].ch_stream->stream_ind is a subsequence of ::next[token_ind+1..]
tstream_ptr[].ch_stream->stream_ind is a subset of ::next[token_ind+1..]
ch in ::next[ch..]
ch in ::next[ch+1..]
ch in ::next[token_ind..]
ch in ::next[token_ind+1..]
ch in ::check[ch..]
ch in ::check[ch+1..]
ch in ::check[token_ind..]
ch in ::check[token_ind+1..]
token_ind in ::next[0..ch]
token_ind in ::next[0..ch-1]
token_ind in ::next[token_ind..]
token_ind in ::next[token_ind+1..]
token_ind in ::check[0..ch]
token_ind in ::check[0..ch-1]
token_ind in ::check[token_ind..]
token_ind in ::check[token_ind+1..]
size(tstream_ptr[]) in ::next[ch..]
size(tstream_ptr[]) in ::next[ch+1..]
size(tstream_ptr[]) in ::next[token_ind..]
size(tstream_ptr[]) in ::next[token_ind+1..]
size(tstream_ptr[]) in ::check[0..ch]
size(tstream_ptr[]) in ::check[0..ch-1]
size(tstream_ptr[]) in ::check[0..token_ind]
size(tstream_ptr[]) in ::check[0..token_ind-1]
size(tstream_ptr[])-1 in ::base[ch..]
size(tstream_ptr[])-1 in ::base[ch+1..]
size(tstream_ptr[])-1 in ::base[token_ind..]
size(tstream_ptr[])-1 in ::base[token_ind+1..]
size(tstream_ptr[])-1 in ::next[ch..]
size(tstream_ptr[])-1 in ::next[ch+1..]
size(tstream_ptr[])-1 in ::next[0..ch]
size(tstream_ptr[])-1 in ::next[0..ch-1]
size(tstream_ptr[])-1 in ::next[token_ind..]
size(tstream_ptr[])-1 in ::next[token_ind+1..]
size(tstream_ptr[])-1 in ::next[0..token_ind]
size(tstream_ptr[])-1 in ::next[0..token_ind-1]
::default1[ch] in ::next[ch..]
::default1[ch] in ::next[ch+1..]
::default1[ch] in ::next[token_ind..]
::default1[ch] in ::next[token_ind+1..]
::default1[ch] in ::check[ch..]
::default1[ch] in ::check[ch+1..]
::default1[ch] in ::check[token_ind..]
::default1[ch] in ::check[token_ind+1..]
::base[ch-1] in ::default1[ch..]
::base[ch-1] in ::default1[ch+1..]
::default1[0..ch] is a subset of ::check[ch..]
::default1[0..ch] is a subset of ::check[ch+1..]
::default1[0..ch] is a subset of ::check[token_ind..]
::default1[0..ch] is a subset of ::check[token_ind+1..]
::default1[0..ch-1] is a subset of ::check[ch..]
::default1[0..ch-1] is a subset of ::check[ch+1..]
::default1[0..ch-1] is a subset of ::check[token_ind..]
::default1[0..ch-1] is a subset of ::check[token_ind+1..]
::base[ch-1] in ::default1[token_ind..]
::base[ch-1] in ::default1[token_ind+1..]
::default1[0..token_ind] is a subset of ::check[ch..]
::default1[0..token_ind] is a subset of ::check[ch+1..]
::default1[0..token_ind] is a subset of ::check[token_ind..]
::default1[0..token_ind] is a subset of ::check[token_ind+1..]
::default1[0..token_ind-1] is a subset of ::check[ch..]
::default1[0..token_ind-1] is a subset of ::check[ch+1..]
::default1[0..token_ind-1] is a subset of ::check[token_ind..]
::default1[0..token_ind-1] is a subset of ::check[token_ind+1..]
::base[ch-1] in ::next[ch..]
::base[ch-1] in ::next[ch+1..]
::base[ch-1] in ::next[token_ind..]
::base[ch-1] in ::next[token_ind+1..]
::base[ch-1] in ::check[ch..]
::base[ch-1] in ::check[ch+1..]
::base[ch-1] in ::check[token_ind..]
::base[ch-1] in ::check[token_ind+1..]
::check[ch] in ::next[0..ch]
::check[ch] in ::next[0..ch-1]
::next[token_ind] in ::check[ch..]
::next[token_ind] in ::check[ch+1..]
::next[token_ind] in ::check[token_ind..]
::next[token_ind] in ::check[token_ind+1..]
::next[token_ind-1] in ::check[ch..]
::next[token_ind-1] in ::check[ch+1..]
::next[token_ind-1] in ::check[token_ind..]
::next[token_ind-1] in ::check[token_ind+1..]
::check[ch] in ::next[token_ind..]
::check[ch] in ::next[token_ind+1..]
::next[0..token_ind] is a subset of ::check[token_ind..]
::next[0..token_ind] is a subset of ::check[token_ind+1..]
::next[0..token_ind-1] is a subset of ::check[token_ind..]
::next[0..token_ind-1] is a subset of ::check[token_ind+1..]
===========================================================================
print_tokens.c.numeric_case():::EXIT
::default1 == orig(::default1)
::default1[] == orig(::default1[])
::base == orig(::base)
::base[] == orig(::base[])
::next == orig(::next)
::next[] == orig(::next[])
::check == orig(::check)
::check[] == orig(::check[])
tstream_ptr[] == orig(tstream_ptr[])
tstream_ptr[].ch_stream == orig(tstream_ptr[].ch_stream)
tstream_ptr[].ch_stream[0] == orig(tstream_ptr[].ch_stream[0])
tstream_ptr[].ch_stream->fp == orig(tstream_ptr[].ch_stream->fp)
token_ptr[] == return[]
token_ptr[].token_id == return[].token_id
return == orig(token_ptr)
size(::default1[]) == size(::base[])
size(::default1[]) == orig(size(::base[]))
size(::next[]) == size(::check[])
size(::next[]) == orig(size(::check[]))
size(tstream_ptr[])-1 == ::check[orig(ch)-1]
size(tstream_ptr[])-1 == ::check[orig(token_ind)]
size(tstream_ptr[])-1 == ::check[orig(token_ind)-1]
size(tstream_ptr[])-1 == orig(::check[post(ch)-1])
size(tstream_ptr[])-1 == orig(::check[post(token_ind)])
size(tstream_ptr[])-1 == orig(::check[post(token_ind)-1])
size(tstream_ptr[])-1 == orig(::check[ch-1])
size(tstream_ptr[])-1 == orig(::check[token_ind])
size(tstream_ptr[])-1 == orig(::check[token_ind-1])
size(return[]) == orig(size(tstream_ptr[]))
size(return[]) == orig(size(tstream_ptr[].ch_stream[0]))
::default1[orig(ch)] == ::default1[orig(ch)-1]
::default1[orig(ch)] == ::default1[orig(token_ind)]
::default1[orig(ch)] == ::default1[orig(token_ind)-1]
::default1[orig(ch)] == orig(::default1[post(ch)-1])
::default1[orig(ch)] == orig(::default1[post(token_ind)])
::default1[orig(ch)] == orig(::default1[post(token_ind)-1])
::default1[orig(ch)] == orig(::default1[ch-1])
::default1[orig(ch)] == orig(::default1[token_ind])
::default1[orig(ch)] == orig(::default1[token_ind-1])
::default1 has only one value
::default1[] == [54, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 51, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, -3, -1, -1, -1, -1, -1, -1, -1]
::base has only one value
::base[] == [-32, -96, -105, -93, -94, -87, -1, -97, -86, -1, -99, -1, -72, -1, -80, -82, -1, 53, 43, -1, -1, -1, -1, -1, -1, -1, 133, -1, 233, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, 40, -1, 251, -1, -1, -1, -1, -1]
::next has only one value
::next[] == [0, 2, 26, 28, 3, 4, 5, 23, 19, 20, 6, -1, 25, 8, 9, 11, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, -1, 30, -1, 31, 13, 15, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 21, -1, 22, 32, -1, 24, 7, 17, 17, 17, 17, 17, 17, 17, 12, 17, 17, 1, 17, 17, 10, 17, 17, 17, 17, 17, 17, 17, 17, 14, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, -1, 26, 26, 27, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 0, 0, -1, -1, -1, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29]
::next[] elements >= -1
::check has only one value
::check[] == [0, 1, 0, 0, 2, 3, 4, 0, 0, 0, 5, -1, 0, 7, 8, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, -1, 0, 12, 14, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 31, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, -1, -1, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 54, 54, -1, -1, -1, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28]
::check[] elements >= -1
tstream_ptr[] contains no nulls and has only one value, of length 1
tstream_ptr[] elements has only one value
tstream_ptr[].ch_stream contains no nulls and has only one value, of length 1
tstream_ptr[].ch_stream elements has only one value
tstream_ptr[].ch_stream[0] contains no nulls and has only one value, of length 1
tstream_ptr[].ch_stream[0] elements has only one value
tstream_ptr[].ch_stream->fp contains no nulls and has only one value, of length 1
tstream_ptr[].ch_stream->fp elements has only one value
tstream_ptr[].ch_stream->stream_ind == [22]
tstream_ptr[].ch_stream->stream_ind elements == 22
token_ptr[] contains no nulls and has only one value, of length 1
token_ptr[] elements has only one value
token_ptr[].token_id == [18]
token_ptr[].token_id elements == 18
token_ptr[].token_string == [0]
token_ptr[].token_string elements == "0"
return has only one value
size(::default1[]) == 60
size(::next[]) == 360
size(return[]) == 1
::default1[orig(ch)] == 17
::default1[orig(ch)..] == [17, 17, 17, 17, 17, 17, 17, 51, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, -3, -1, -1, -1, -1, -1, -1, -1]
::default1[orig(ch)+1..] == [17, 17, 17, 17, 17, 17, 51, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, -3, -1, -1, -1, -1, -1, -1, -1]
::default1[0..orig(ch)] == [54, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17]
::default1[0..orig(ch)] elements one of { 17, 54 }
::default1[0..orig(ch)-1] == [54, 17, 17, 17, 17, 17, 17, 17, 17, 17]
::default1[orig(token_ind)..] == [17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 51, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, -3, -1, -1, -1, -1, -1, -1, -1]
::default1[orig(token_ind)+1..] == [17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 51, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, -3, -1, -1, -1, -1, -1, -1, -1]
::default1[0..orig(token_ind)] == [54, 17, 17, 17]
::default1[0..orig(token_ind)-1] == [54, 17, 17]
::base[orig(ch)] == -99
::base[orig(ch)-1] == -1
::base[orig(ch)..] == [-99, -1, -72, -1, -80, -82, -1, 53, 43, -1, -1, -1, -1, -1, -1, -1, 133, -1, 233, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, 40, -1, 251, -1, -1, -1, -1, -1]
::base[orig(ch)+1..] == [-1, -72, -1, -80, -82, -1, 53, 43, -1, -1, -1, -1, -1, -1, -1, 133, -1, 233, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, 40, -1, 251, -1, -1, -1, -1, -1]
::base[0..orig(ch)] == [-32, -96, -105, -93, -94, -87, -1, -97, -86, -1, -99]
::base[0..orig(ch)-1] == [-32, -96, -105, -93, -94, -87, -1, -97, -86, -1]
::base[orig(token_ind)] == -93
::base[orig(token_ind)-1] == -105
::base[orig(token_ind)..] == [-93, -94, -87, -1, -97, -86, -1, -99, -1, -72, -1, -80, -82, -1, 53, 43, -1, -1, -1, -1, -1, -1, -1, 133, -1, 233, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, 40, -1, 251, -1, -1, -1, -1, -1]
::base[orig(token_ind)+1..] == [-94, -87, -1, -97, -86, -1, -99, -1, -72, -1, -80, -82, -1, 53, 43, -1, -1, -1, -1, -1, -1, -1, 133, -1, 233, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, 40, -1, 251, -1, -1, -1, -1, -1]
::base[0..orig(token_ind)] == [-32, -96, -105, -93]
::base[0..orig(token_ind)-1] == [-32, -96, -105]
::base[0..orig(token_ind)-1] elements one of { -105, -96, -32 }
::next[orig(ch)] == 6
::next[orig(ch)-1] == 20
::next[orig(ch)..] == [6, -1, 25, 8, 9, 11, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, -1, 30, -1, 31, 13, 15, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 21, -1, 22, 32, -1, 24, 7, 17, 17, 17, 17, 17, 17, 17, 12, 17, 17, 1, 17, 17, 10, 17, 17, 17, 17, 17, 17, 17, 17, 14, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, -1, 26, 26, 27, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 0, 0, -1, -1, -1, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29]
::next[orig(ch)+1..] == [-1, 25, 8, 9, 11, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, -1, 30, -1, 31, 13, 15, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 21, -1, 22, 32, -1, 24, 7, 17, 17, 17, 17, 17, 17, 17, 12, 17, 17, 1, 17, 17, 10, 17, 17, 17, 17, 17, 17, 17, 17, 14, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, -1, 26, 26, 27, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 0, 0, -1, -1, -1, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29]
::next[0..orig(ch)] == [0, 2, 26, 28, 3, 4, 5, 23, 19, 20, 6]
::next[0..orig(ch)-1] == [0, 2, 26, 28, 3, 4, 5, 23, 19, 20]
::next[orig(token_ind)] == 28
::next[orig(token_ind)-1] == 26
::next[orig(token_ind)..] == [28, 3, 4, 5, 23, 19, 20, 6, -1, 25, 8, 9, 11, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, -1, 30, -1, 31, 13, 15, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 21, -1, 22, 32, -1, 24, 7, 17, 17, 17, 17, 17, 17, 17, 12, 17, 17, 1, 17, 17, 10, 17, 17, 17, 17, 17, 17, 17, 17, 14, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, -1, 26, 26, 27, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 0, 0, -1, -1, -1, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29]
::next[orig(token_ind)+1..] == [3, 4, 5, 23, 19, 20, 6, -1, 25, 8, 9, 11, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, -1, 30, -1, 31, 13, 15, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 21, -1, 22, 32, -1, 24, 7, 17, 17, 17, 17, 17, 17, 17, 12, 17, 17, 1, 17, 17, 10, 17, 17, 17, 17, 17, 17, 17, 17, 14, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, -1, 26, 26, 27, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 0, 0, -1, -1, -1, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29]
::next[0..orig(token_ind)] == [0, 2, 26, 28]
::next[0..orig(token_ind)-1] == [0, 2, 26]
::next[0..orig(token_ind)-1] elements one of { 0, 2, 26 }
::check[orig(ch)] == 5
::check[orig(ch)..] == [5, -1, 0, 7, 8, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, -1, 0, 12, 14, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 31, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, -1, -1, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 54, 54, -1, -1, -1, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28]
::check[orig(ch)+1..] == [-1, 0, 7, 8, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, -1, 0, 12, 14, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 31, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, -1, -1, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 54, 54, -1, -1, -1, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28]
::check[0..orig(ch)] == [0, 1, 0, 0, 2, 3, 4, 0, 0, 0, 5]
::check[0..orig(ch)-1] == [0, 1, 0, 0, 2, 3, 4, 0, 0, 0]
::check[orig(token_ind)..] == [0, 2, 3, 4, 0, 0, 0, 5, -1, 0, 7, 8, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, -1, 0, 12, 14, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 31, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, -1, -1, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 54, 54, -1, -1, -1, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28]
::check[orig(token_ind)+1..] == [2, 3, 4, 0, 0, 0, 5, -1, 0, 7, 8, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, -1, 0, 12, 14, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 31, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, -1, -1, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 54, 54, -1, -1, -1, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28]
::check[0..orig(token_ind)] == [0, 1, 0, 0]
::check[0..orig(token_ind)] elements one of { 0, 1 }
::check[0..orig(token_ind)-1] == [0, 1, 0]
::base[orig(ch)-1] in ::default1[]
size(tstream_ptr[])-1 in ::base[]
::next[] is a superset of tstream_ptr[].ch_stream->stream_ind
::next[] is a superset of token_ptr[].token_id
::next[] is a superset of orig(tstream_ptr[].ch_stream->stream_ind)
orig(ch) in ::next[]
orig(token_ind) in ::next[]
size(tstream_ptr[])-1 in ::next[]
size(return[]) in ::next[]
::default1[orig(ch)] in ::next[]
::base[orig(ch)-1] in ::next[]
::check[orig(ch)] in ::next[]
::check[] is a superset of token_ptr[].token_id
orig(ch) in ::check[]
orig(token_ind) in ::check[]
size(return[]) in ::check[]
::default1[orig(ch)] in ::check[]
::base[orig(ch)-1] in ::check[]
::next[orig(token_ind)] in ::check[]
::next[orig(token_ind)-1] in ::check[]
tstream_ptr[].ch_stream->stream_ind is a subsequence of ::next[orig(ch)..]
tstream_ptr[].ch_stream->stream_ind is a subset of ::next[orig(ch)..]
tstream_ptr[].ch_stream->stream_ind is a subsequence of ::next[orig(ch)+1..]
tstream_ptr[].ch_stream->stream_ind is a subset of ::next[orig(ch)+1..]
tstream_ptr[].ch_stream->stream_ind is a subsequence of ::next[orig(token_ind)..]
tstream_ptr[].ch_stream->stream_ind is a subset of ::next[orig(token_ind)..]
tstream_ptr[].ch_stream->stream_ind is a subsequence of ::next[orig(token_ind)+1..]
tstream_ptr[].ch_stream->stream_ind is a subset of ::next[orig(token_ind)+1..]
token_ptr[].token_id is a subsequence of ::next[orig(ch)..]
token_ptr[].token_id is a subset of ::next[orig(ch)..]
token_ptr[].token_id is a subsequence of ::next[orig(ch)+1..]
token_ptr[].token_id is a subset of ::next[orig(ch)+1..]
token_ptr[].token_id is a subsequence of ::next[orig(token_ind)..]
token_ptr[].token_id is a subset of ::next[orig(token_ind)..]
token_ptr[].token_id is a subsequence of ::next[orig(token_ind)+1..]
token_ptr[].token_id is a subset of ::next[orig(token_ind)+1..]
token_ptr[].token_id is a subsequence of ::check[orig(ch)..]
token_ptr[].token_id is a subset of ::check[orig(ch)..]
token_ptr[].token_id is a subsequence of ::check[orig(ch)+1..]
token_ptr[].token_id is a subset of ::check[orig(ch)+1..]
token_ptr[].token_id is a subsequence of ::check[orig(token_ind)..]
token_ptr[].token_id is a subset of ::check[orig(token_ind)..]
token_ptr[].token_id is a subsequence of ::check[orig(token_ind)+1..]
token_ptr[].token_id is a subset of ::check[orig(token_ind)+1..]
orig(tstream_ptr[].ch_stream->stream_ind) is a subsequence of ::next[0..orig(ch)]
orig(tstream_ptr[].ch_stream->stream_ind) is a subset of ::next[0..orig(ch)]
orig(tstream_ptr[].ch_stream->stream_ind) is a subsequence of ::next[0..orig(ch)-1]
orig(tstream_ptr[].ch_stream->stream_ind) is a subset of ::next[0..orig(ch)-1]
orig(tstream_ptr[].ch_stream->stream_ind) is a subsequence of ::next[orig(token_ind)..]
orig(tstream_ptr[].ch_stream->stream_ind) is a subset of ::next[orig(token_ind)..]
orig(tstream_ptr[].ch_stream->stream_ind) is a subsequence of ::next[orig(token_ind)+1..]
orig(tstream_ptr[].ch_stream->stream_ind) is a subset of ::next[orig(token_ind)+1..]
orig(ch) in ::next[orig(ch)..]
orig(ch) in ::next[orig(ch)+1..]
orig(ch) in ::next[orig(token_ind)..]
orig(ch) in ::next[orig(token_ind)+1..]
orig(ch) in ::check[orig(ch)..]
orig(ch) in ::check[orig(ch)+1..]
orig(ch) in ::check[orig(token_ind)..]
orig(ch) in ::check[orig(token_ind)+1..]
orig(token_ind) in ::next[0..orig(ch)]
orig(token_ind) in ::next[0..orig(ch)-1]
orig(token_ind) in ::next[orig(token_ind)..]
orig(token_ind) in ::next[orig(token_ind)+1..]
orig(token_ind) in ::check[0..orig(ch)]
orig(token_ind) in ::check[0..orig(ch)-1]
orig(token_ind) in ::check[orig(token_ind)..]
orig(token_ind) in ::check[orig(token_ind)+1..]
size(tstream_ptr[])-1 in ::base[orig(ch)..]
size(tstream_ptr[])-1 in ::base[orig(ch)+1..]
size(tstream_ptr[])-1 in ::base[orig(token_ind)..]
size(tstream_ptr[])-1 in ::base[orig(token_ind)+1..]
size(tstream_ptr[])-1 in ::next[orig(ch)..]
size(tstream_ptr[])-1 in ::next[orig(ch)+1..]
size(tstream_ptr[])-1 in ::next[0..orig(ch)]
size(tstream_ptr[])-1 in ::next[0..orig(ch)-1]
size(tstream_ptr[])-1 in ::next[orig(token_ind)..]
size(tstream_ptr[])-1 in ::next[orig(token_ind)+1..]
size(tstream_ptr[])-1 in ::next[0..orig(token_ind)]
size(tstream_ptr[])-1 in ::next[0..orig(token_ind)-1]
size(return[]) in ::next[orig(ch)..]
size(return[]) in ::next[orig(ch)+1..]
size(return[]) in ::next[orig(token_ind)..]
size(return[]) in ::next[orig(token_ind)+1..]
size(return[]) in ::check[0..orig(ch)]
size(return[]) in ::check[0..orig(ch)-1]
size(return[]) in ::check[0..orig(token_ind)]
size(return[]) in ::check[0..orig(token_ind)-1]
::default1[orig(ch)] in ::next[orig(ch)..]
::default1[orig(ch)] in ::next[orig(ch)+1..]
::default1[orig(ch)] in ::next[orig(token_ind)..]
::default1[orig(ch)] in ::next[orig(token_ind)+1..]
::default1[orig(ch)] in ::check[orig(ch)..]
::default1[orig(ch)] in ::check[orig(ch)+1..]
::default1[orig(ch)] in ::check[orig(token_ind)..]
::default1[orig(ch)] in ::check[orig(token_ind)+1..]
::base[orig(ch)-1] in ::default1[orig(ch)..]
::base[orig(ch)-1] in ::default1[orig(ch)+1..]
::default1[0..orig(ch)] is a subset of ::check[orig(ch)..]
::default1[0..orig(ch)] is a subset of ::check[orig(ch)+1..]
::default1[0..orig(ch)] is a subset of ::check[orig(token_ind)..]
::default1[0..orig(ch)] is a subset of ::check[orig(token_ind)+1..]
::default1[0..orig(ch)-1] is a subset of ::check[orig(ch)..]
::default1[0..orig(ch)-1] is a subset of ::check[orig(ch)+1..]
::default1[0..orig(ch)-1] is a subset of ::check[orig(token_ind)..]
::default1[0..orig(ch)-1] is a subset of ::check[orig(token_ind)+1..]
::base[orig(ch)-1] in ::default1[orig(token_ind)..]
::base[orig(ch)-1] in ::default1[orig(token_ind)+1..]
::default1[0..orig(token_ind)] is a subset of ::check[orig(ch)..]
::default1[0..orig(token_ind)] is a subset of ::check[orig(ch)+1..]
::default1[0..orig(token_ind)] is a subset of ::check[orig(token_ind)..]
::default1[0..orig(token_ind)] is a subset of ::check[orig(token_ind)+1..]
::default1[0..orig(token_ind)-1] is a subset of ::check[orig(ch)..]
::default1[0..orig(token_ind)-1] is a subset of ::check[orig(ch)+1..]
::default1[0..orig(token_ind)-1] is a subset of ::check[orig(token_ind)..]
::default1[0..orig(token_ind)-1] is a subset of ::check[orig(token_ind)+1..]
::base[orig(ch)-1] in ::next[orig(ch)..]
::base[orig(ch)-1] in ::next[orig(ch)+1..]
::base[orig(ch)-1] in ::next[orig(token_ind)..]
::base[orig(ch)-1] in ::next[orig(token_ind)+1..]
::base[orig(ch)-1] in ::check[orig(ch)..]
::base[orig(ch)-1] in ::check[orig(ch)+1..]
::base[orig(ch)-1] in ::check[orig(token_ind)..]
::base[orig(ch)-1] in ::check[orig(token_ind)+1..]
::check[orig(ch)] in ::next[0..orig(ch)]
::check[orig(ch)] in ::next[0..orig(ch)-1]
::next[orig(token_ind)] in ::check[orig(ch)..]
::next[orig(token_ind)] in ::check[orig(ch)+1..]
::next[orig(token_ind)] in ::check[orig(token_ind)..]
::next[orig(token_ind)] in ::check[orig(token_ind)+1..]
::next[orig(token_ind)-1] in ::check[orig(ch)..]
::next[orig(token_ind)-1] in ::check[orig(ch)+1..]
::next[orig(token_ind)-1] in ::check[orig(token_ind)..]
::next[orig(token_ind)-1] in ::check[orig(token_ind)+1..]
::check[orig(ch)] in ::next[orig(token_ind)..]
::check[orig(ch)] in ::next[orig(token_ind)+1..]
::next[0..orig(token_ind)] is a subset of ::check[orig(token_ind)..]
::next[0..orig(token_ind)] is a subset of ::check[orig(token_ind)+1..]
::next[0..orig(token_ind)-1] is a subset of ::check[orig(token_ind)..]
::next[0..orig(token_ind)-1] is a subset of ::check[orig(token_ind)+1..]
===========================================================================
print_tokens.c.skip():::ENTER
size(::default1[]) == size(::base[])
size(::next[]) == size(::check[])
::default1 has only one value
::default1[] == [54, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 51, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, -3, -1, -1, -1, -1, -1, -1, -1]
::default1[i] != i
::base has only one value
::base[] == [-32, -96, -105, -93, -94, -87, -1, -97, -86, -1, -99, -1, -72, -1, -80, -82, -1, 53, 43, -1, -1, -1, -1, -1, -1, -1, 133, -1, 233, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, 40, -1, 251, -1, -1, -1, -1, -1]
::base[i] != i
::next has only one value
::next[] == [0, 2, 26, 28, 3, 4, 5, 23, 19, 20, 6, -1, 25, 8, 9, 11, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, -1, 30, -1, 31, 13, 15, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 21, -1, 22, 32, -1, 24, 7, 17, 17, 17, 17, 17, 17, 17, 12, 17, 17, 1, 17, 17, 10, 17, 17, 17, 17, 17, 17, 17, 17, 14, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, -1, 26, 26, 27, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 0, 0, -1, -1, -1, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29]
::next[] elements >= -1
::check has only one value
::check[] == [0, 1, 0, 0, 2, 3, 4, 0, 0, 0, 5, -1, 0, 7, 8, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, -1, 0, 12, 14, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 31, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, -1, -1, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 54, 54, -1, -1, -1, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28]
::check[] elements >= -1
stream_ptr has only one value
stream_ptr != null
stream_ptr[] contains no nulls and has only one value, of length 1
stream_ptr[] elements has only one value
stream_ptr[] elements != null
stream_ptr[].fp contains no nulls and has only one value, of length 1
stream_ptr[].fp elements has only one value
stream_ptr[].fp elements != null
stream_ptr[i].stream_ind > i
size(::default1[]) == 60
size(::next[]) == 360
size(stream_ptr[]) == 1
::default1[] elements < size(::default1[])-1
::default1[] elements < size(::next[])-1
::base[] < stream_ptr[].stream_ind (lexically)
::base[] <= stream_ptr[].stream_ind (lexically)
::base[] elements < size(::next[])-1
size(stream_ptr[])-1 in ::base[]
::next[] < stream_ptr[].stream_ind (lexically)
::next[] <= stream_ptr[].stream_ind (lexically)
::next[] elements < size(::default1[])-1
::next[] elements < size(::next[])-1
size(stream_ptr[]) in ::next[]
size(stream_ptr[])-1 in ::next[]
::check[] < stream_ptr[].stream_ind (lexically)
::check[] <= stream_ptr[].stream_ind (lexically)
::check[] elements < size(::default1[])-1
::check[] elements < size(::next[])-1
size(stream_ptr[]) in ::check[]
size(stream_ptr[])-1 in ::check[]
stream_ptr[].stream_ind elements < size(::default1[])-1
stream_ptr[].stream_ind elements < size(::next[])-1
stream_ptr[].stream_ind elements > size(stream_ptr[])
===========================================================================
print_tokens.c.skip():::EXIT
::default1 == orig(::default1)
::default1[] == orig(::default1[])
::base == orig(::base)
::base[] == orig(::base[])
::next == orig(::next)
::next[] == orig(::next[])
::check == orig(::check)
::check[] == orig(::check[])
stream_ptr[] == orig(stream_ptr[])
stream_ptr[].fp == orig(stream_ptr[].fp)
size(::default1[]) == size(::base[])
size(::default1[]) == orig(size(::base[]))
size(::next[]) == size(::check[])
size(::next[]) == orig(size(::check[]))
size(stream_ptr[])-1 == ::check[return-1]
size(stream_ptr[])-1 == orig(::check[post(return)-1])
::default1[return] == ::default1[return-1]
::default1[return] == orig(::default1[post(return)-1])
::default1 has only one value
::default1[] == [54, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 51, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, -3, -1, -1, -1, -1, -1, -1, -1]
::default1[i] != i
::base has only one value
::base[] == [-32, -96, -105, -93, -94, -87, -1, -97, -86, -1, -99, -1, -72, -1, -80, -82, -1, 53, 43, -1, -1, -1, -1, -1, -1, -1, 133, -1, 233, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, 40, -1, 251, -1, -1, -1, -1, -1]
::base[i] != i
::next has only one value
::next[] == [0, 2, 26, 28, 3, 4, 5, 23, 19, 20, 6, -1, 25, 8, 9, 11, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, -1, 30, -1, 31, 13, 15, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 21, -1, 22, 32, -1, 24, 7, 17, 17, 17, 17, 17, 17, 17, 12, 17, 17, 1, 17, 17, 10, 17, 17, 17, 17, 17, 17, 17, 17, 14, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, -1, 26, 26, 27, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 0, 0, -1, -1, -1, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29]
::next[] elements >= -1
::check has only one value
::check[] == [0, 1, 0, 0, 2, 3, 4, 0, 0, 0, 5, -1, 0, 7, 8, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, -1, 0, 12, 14, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 31, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, -1, -1, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 54, 54, -1, -1, -1, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28]
::check[] elements >= -1
stream_ptr[] contains no nulls and has only one value, of length 1
stream_ptr[] elements has only one value
stream_ptr[] elements != null
stream_ptr[].fp contains no nulls and has only one value, of length 1
stream_ptr[].fp elements has only one value
stream_ptr[].fp elements != null
stream_ptr[i].stream_ind > i
return == 10
size(::default1[]) == 60
size(::next[]) == 360
::default1[return] == 17
::default1[return..] == [17, 17, 17, 17, 17, 17, 17, 51, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, -3, -1, -1, -1, -1, -1, -1, -1]
::default1[return+1..] == [17, 17, 17, 17, 17, 17, 51, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, -3, -1, -1, -1, -1, -1, -1, -1]
::default1[0..return] == [54, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17]
::default1[0..return] elements one of { 17, 54 }
::default1[0..return] sorted by >=
::default1[0..return-1] == [54, 17, 17, 17, 17, 17, 17, 17, 17, 17]
::default1[0..return-1] sorted by >=
::base[return] == -99
::base[return-1] == -1
::base[return..] == [-99, -1, -72, -1, -80, -82, -1, 53, 43, -1, -1, -1, -1, -1, -1, -1, 133, -1, 233, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, 40, -1, 251, -1, -1, -1, -1, -1]
::base[return+1..] == [-1, -72, -1, -80, -82, -1, 53, 43, -1, -1, -1, -1, -1, -1, -1, 133, -1, 233, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, 40, -1, 251, -1, -1, -1, -1, -1]
::base[0..return] == [-32, -96, -105, -93, -94, -87, -1, -97, -86, -1, -99]
::base[0..return-1] == [-32, -96, -105, -93, -94, -87, -1, -97, -86, -1]
::next[return] == 6
::next[return-1] == 20
::next[return..] == [6, -1, 25, 8, 9, 11, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, -1, 30, -1, 31, 13, 15, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 21, -1, 22, 32, -1, 24, 7, 17, 17, 17, 17, 17, 17, 17, 12, 17, 17, 1, 17, 17, 10, 17, 17, 17, 17, 17, 17, 17, 17, 14, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, -1, 26, 26, 27, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 0, 0, -1, -1, -1, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29]
::next[return..] != (index)
::next[return+1..] == [-1, 25, 8, 9, 11, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, -1, 30, -1, 31, 13, 15, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 21, -1, 22, 32, -1, 24, 7, 17, 17, 17, 17, 17, 17, 17, 12, 17, 17, 1, 17, 17, 10, 17, 17, 17, 17, 17, 17, 17, 17, 14, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, -1, 26, 26, 27, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 0, 0, -1, -1, -1, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29]
::next[0..return] == [0, 2, 26, 28, 3, 4, 5, 23, 19, 20, 6]
::next[0..return-1] == [0, 2, 26, 28, 3, 4, 5, 23, 19, 20]
::check[return] == 5
::check[return..] == [5, -1, 0, 7, 8, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, -1, 0, 12, 14, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 31, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, -1, -1, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 54, 54, -1, -1, -1, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28]
::check[return..] != (index)
::check[return+1..] == [-1, 0, 7, 8, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, -1, 0, 12, 14, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 31, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, -1, -1, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 54, 54, -1, -1, -1, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28]
::check[0..return] == [0, 1, 0, 0, 2, 3, 4, 0, 0, 0, 5]
::check[0..return-1] == [0, 1, 0, 0, 2, 3, 4, 0, 0, 0]
::default1[] elements < size(::default1[])-1
::default1[] elements < size(::next[])-1
::default1[] elements > ::base[return]
::base[return-1] in ::default1[]
::base[] < stream_ptr[].stream_ind (lexically)
::base[] <= stream_ptr[].stream_ind (lexically)
::base[] < orig(stream_ptr[].stream_ind) (lexically)
::base[] <= orig(stream_ptr[].stream_ind) (lexically)
::base[] elements < size(::next[])-1
size(stream_ptr[])-1 in ::base[]
::next[] < stream_ptr[].stream_ind (lexically)
::next[] <= stream_ptr[].stream_ind (lexically)
return in ::next[]
::next[] < orig(stream_ptr[].stream_ind) (lexically)
::next[] <= orig(stream_ptr[].stream_ind) (lexically)
::next[] elements < size(::default1[])-1
::next[] elements < size(::next[])-1
size(stream_ptr[])-1 in ::next[]
orig(size(stream_ptr[])) in ::next[]
::default1[return] in ::next[]
::next[] elements > ::base[return]
::base[return-1] in ::next[]
::next[] elements >= ::base[return-1]
::check[return] in ::next[]
::check[] < stream_ptr[].stream_ind (lexically)
::check[] <= stream_ptr[].stream_ind (lexically)
return in ::check[]
::check[] < orig(stream_ptr[].stream_ind) (lexically)
::check[] <= orig(stream_ptr[].stream_ind) (lexically)
::check[] elements < size(::default1[])-1
::check[] elements < size(::next[])-1
orig(size(stream_ptr[])) in ::check[]
::default1[return] in ::check[]
::check[] elements > ::base[return]
::base[return-1] in ::check[]
::check[] elements >= ::base[return-1]
stream_ptr[].stream_ind elements > return
stream_ptr[].stream_ind - orig(stream_ptr[].stream_ind) - 1 == 0
stream_ptr[].stream_ind > orig(stream_ptr[].stream_ind) (elementwise)
stream_ptr[].stream_ind elements <= size(::default1[])-1
stream_ptr[].stream_ind elements < size(::next[])-1
stream_ptr[].stream_ind elements > orig(size(stream_ptr[]))
stream_ptr[].stream_ind elements > ::default1[return]
stream_ptr[].stream_ind > ::default1[return..] (lexically)
stream_ptr[].stream_ind >= ::default1[return..] (lexically)
stream_ptr[].stream_ind > ::default1[return+1..] (lexically)
stream_ptr[].stream_ind >= ::default1[return+1..] (lexically)
stream_ptr[].stream_ind elements > ::base[return]
stream_ptr[].stream_ind elements > ::base[return-1]
stream_ptr[].stream_ind elements > ::next[return]
stream_ptr[].stream_ind elements > ::next[return-1]
stream_ptr[].stream_ind elements > ::check[return]
orig(stream_ptr[].stream_ind) elements > return
::default1[0..return] elements > return
::base[0..return] elements < return
return in ::next[return..]
return in ::next[return+1..]
return in ::check[return..]
return in ::check[return+1..]
::check[0..return] elements < return
orig(stream_ptr[].stream_ind) elements < size(::default1[])-1
orig(stream_ptr[].stream_ind) elements < size(::next[])-1
orig(stream_ptr[].stream_ind) elements > ::default1[return]
orig(stream_ptr[].stream_ind) > ::default1[return..] (lexically)
orig(stream_ptr[].stream_ind) >= ::default1[return..] (lexically)
orig(stream_ptr[].stream_ind) > ::default1[return+1..] (lexically)
orig(stream_ptr[].stream_ind) >= ::default1[return+1..] (lexically)
orig(stream_ptr[].stream_ind) elements > ::base[return]
orig(stream_ptr[].stream_ind) elements > ::base[return-1]
orig(stream_ptr[].stream_ind) elements > ::next[return]
orig(stream_ptr[].stream_ind) elements > ::next[return-1]
orig(stream_ptr[].stream_ind) elements > ::check[return]
::base[0..return] elements < size(::default1[])-1
size(stream_ptr[])-1 in ::base[return..]
size(stream_ptr[])-1 in ::base[return+1..]
::base[0..return] elements < size(stream_ptr[])-1
size(stream_ptr[])-1 in ::next[return..]
size(stream_ptr[])-1 in ::next[return+1..]
::next[0..return] elements >= size(stream_ptr[])-1
size(stream_ptr[])-1 in ::next[0..return]
size(stream_ptr[])-1 in ::next[0..return-1]
::check[0..return] elements >= size(stream_ptr[])-1
::default1[0..return] elements > orig(size(stream_ptr[]))
orig(size(stream_ptr[])) in ::next[return..]
orig(size(stream_ptr[])) in ::next[return+1..]
orig(size(stream_ptr[])) in ::check[0..return]
orig(size(stream_ptr[])) in ::check[0..return-1]
::default1[0..return] elements >= ::default1[return]
::base[0..return] elements < ::default1[return]
::default1[return] in ::next[return..]
::default1[return] in ::next[return+1..]
::default1[return] in ::check[return..]
::default1[return] in ::check[return+1..]
::check[0..return] elements < ::default1[return]
::base[return-1] in ::default1[return..]
::base[return-1] in ::default1[return+1..]
::default1[0..return] elements > ::base[return-1]
::default1[0..return] > ::base[0..return] (elementwise)
::default1[0..return] elements > ::next[return]
::default1[0..return] elements > ::check[return]
::default1[0..return] is a subset of ::check[return..]
::default1[0..return] is a subset of ::check[return+1..]
::default1[0..return] > ::check[0..return] (elementwise)
::default1[0..return-1] > ::base[0..return-1] (elementwise)
::default1[0..return-1] is a subset of ::check[return..]
::default1[0..return-1] is a subset of ::check[return+1..]
::default1[0..return-1] > ::check[0..return-1] (elementwise)
::base[return..] elements >= ::base[return]
::base[return+1..] elements > ::base[return]
::base[0..return] elements <= ::base[return-1]
::base[return-1] in ::next[return..]
::base[return-1] in ::next[return+1..]
::next[0..return] elements > ::base[return-1]
::base[return-1] in ::check[return..]
::base[return-1] in ::check[return+1..]
::check[0..return] elements > ::base[return-1]
::base[0..return] elements < ::next[return]
::base[0..return] elements < ::next[return-1]
::base[0..return] < ::next[0..return] (elementwise)
::base[0..return] elements < ::check[return]
::base[0..return] < ::check[0..return] (elementwise)
::base[0..return-1] < ::next[0..return-1] (elementwise)
::base[0..return-1] < ::check[0..return-1] (elementwise)
::check[0..return] elements < ::next[return]
::check[0..return] elements < ::next[return-1]
::check[return] in ::next[0..return]
::next[0..return] >= ::check[0..return] (elementwise)
::check[return] in ::next[0..return-1]
::next[0..return-1] >= ::check[0..return-1] (elementwise)
::check[0..return] elements <= ::check[return]
::check[0..return-1] elements < ::check[return]
===========================================================================
print_tokens.c.special():::ENTER
size(::default1[]) == size(::base[])
size(::next[]) == size(::check[])
::default1[state] == ::base[state]
::default1 has only one value
::default1[] == [54, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 51, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, -3, -1, -1, -1, -1, -1, -1, -1]
::default1[i] != i
::base has only one value
::base[] == [-32, -96, -105, -93, -94, -87, -1, -97, -86, -1, -99, -1, -72, -1, -80, -82, -1, 53, 43, -1, -1, -1, -1, -1, -1, -1, 133, -1, 233, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, 40, -1, 251, -1, -1, -1, -1, -1]
::next has only one value
::next[] == [0, 2, 26, 28, 3, 4, 5, 23, 19, 20, 6, -1, 25, 8, 9, 11, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, -1, 30, -1, 31, 13, 15, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 21, -1, 22, 32, -1, 24, 7, 17, 17, 17, 17, 17, 17, 17, 12, 17, 17, 1, 17, 17, 10, 17, 17, 17, 17, 17, 17, 17, 17, 14, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, -1, 26, 26, 27, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 0, 0, -1, -1, -1, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29]
::next[] elements >= -1
::check has only one value
::check[] == [0, 1, 0, 0, 2, 3, 4, 0, 0, 0, 5, -1, 0, 7, 8, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, -1, 0, 12, 14, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 31, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, -1, -1, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 54, 54, -1, -1, -1, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28]
::check[] elements >= -1
size(::default1[]) == 60
size(::next[]) == 360
::default1[state] == -1
::default1[state-1] one of { -2, -1 }
::default1[state..] elements one of { -3, -1, 52 }
::base[state-1] one of { -1, 0, 43 }
::next[state] one of { 16, 18 }
::next[state] == 0  (mod 2)
::next[state-1] one of { 15, 18 }
::check[state] one of { 0, 15 }
::check[state-1] one of { 0, 14 }
::default1[] elements < size(::default1[])-1
::default1[] elements < size(::next[])-1
::base[] elements < size(::next[])-1
state in ::next[]
::next[] elements < size(::default1[])-1
::next[] elements < size(::next[])-1
::default1[state] in ::next[]
::next[] elements >= ::default1[state]
::next[] elements >= ::default1[state-1]
::check[state] in ::next[]
::check[state-1] in ::next[]
::check[] elements < size(::default1[])-1
::check[] elements < size(::next[])-1
::check[] elements >= ::default1[state]
::default1[state] in ::check[]
::check[] elements >= ::default1[state-1]
::next[state-1] in ::check[]
(size(::default1[]) >> state == 0)
(size(::default1[])-1 >> state == 0)
state < size(::default1[])-1
(size(::next[]) >> state == 0)
(size(::next[])-1 >> state == 0)
state < size(::next[])-1
state > ::default1[state]
state > ::default1[state-1]
state != ::base[state-1]
(state >> ::next[state] == 0)
state > ::next[state]
(state >> ::next[state-1] == 0)
state > ::next[state-1]
(state & ::check[state]) == 0
state > ::check[state]
(state & ::check[state-1]) == 0
state > ::check[state-1]
::check[0..state] elements < state
size(::default1[])-1 > ::default1[state-1]
size(::default1[])-1 > ::base[state-1]
size(::default1[])-1 > ::next[state]
size(::default1[])-1 > ::next[state-1]
size(::default1[])-1 > ::check[state]
size(::default1[])-1 > ::check[state-1]
size(::next[])-1 > ::default1[state-1]
size(::next[])-1 > ::base[state-1]
size(::next[])-1 > ::next[state]
size(::next[])-1 > ::next[state-1]
size(::next[])-1 > ::check[state]
size(::next[])-1 > ::check[state-1]
::default1[state] >= ::default1[state-1]
::default1[state] <= ::base[state-1]
::base[state..] elements >= ::default1[state]
::default1[state] < ::next[state]
::default1[state] < ::next[state-1]
::default1[state] in ::next[state..]
::default1[state] in ::next[state+1..]
::default1[state] in ::next[0..state]
::default1[state] in ::next[0..state-1]
::default1[state] < ::check[state]
::default1[state] < ::check[state-1]
::default1[state] in ::check[state..]
::default1[state] in ::check[state+1..]
::default1[state] in ::check[0..state]
::default1[state] in ::check[0..state-1]
::default1[state-1] <= ::base[state-1]
::base[state..] elements >= ::default1[state-1]
::default1[state-1] < ::next[state]
::default1[state-1] < ::next[state-1]
::default1[state-1] < ::check[state]
::default1[state-1] < ::check[state-1]
::base[state-1] != ::next[state]
::base[state-1] != ::next[state-1]
(::base[state-1] & ::check[state]) == 0
::base[state-1] != ::check[state]
(::base[state-1] & ::check[state-1]) == 0
::base[state-1] != ::check[state-1]
::next[state] >= ::next[state-1]
::next[state] > ::check[state]
::next[state] > ::check[state-1]
::check[0..state] elements < ::next[state]
::next[state-1] >= ::check[state]
::next[state-1] > ::check[state-1]
::next[state-1] in ::check[state..]
::check[0..state] elements <= ::next[state-1]
::check[0..state-1] elements < ::next[state-1]
::check[state-1] in ::next[state..]
::check[state-1] in ::next[state+1..]
::check[state] in ::next[0..state]
::next[0..state] >= ::check[0..state] (elementwise)
::check[state] in ::next[0..state-1]
::next[0..state-1] >= ::check[0..state-1] (elementwise)
::check[state] >= ::check[state-1]
::default1[state] == (::default1[state-1] >> state)
::default1[state] == (state | ::default1[state-1])
::default1[state] == (::default1[state-1] | ::base[state-1])
::check[state] == (::next[state-1] % ::next[state])
===========================================================================
print_tokens.c.special():::EXIT
::default1 == orig(::default1)
::default1[] == orig(::default1[])
::base == orig(::base)
::base[] == orig(::base[])
::next == orig(::next)
::next[] == orig(::next[])
::check == orig(::check)
::check[] == orig(::check[])
return == orig(state)
size(::default1[]) == size(::base[])
size(::default1[]) == orig(size(::base[]))
size(::next[]) == size(::check[])
size(::next[]) == orig(size(::check[]))
::default1[return] == ::base[return]
::default1[return] == ::base[orig(state)]
::default1[return] == orig(::base[post(state)])
::default1[return] == orig(::base[post(return)])
::default1[return] == orig(::base[state])
::default1 has only one value
::default1[] == [54, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 51, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, -3, -1, -1, -1, -1, -1, -1, -1]
::default1[i] != i
::base has only one value
::base[] == [-32, -96, -105, -93, -94, -87, -1, -97, -86, -1, -99, -1, -72, -1, -80, -82, -1, 53, 43, -1, -1, -1, -1, -1, -1, -1, 133, -1, 233, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, 40, -1, 251, -1, -1, -1, -1, -1]
::next has only one value
::next[] == [0, 2, 26, 28, 3, 4, 5, 23, 19, 20, 6, -1, 25, 8, 9, 11, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, -1, 30, -1, 31, 13, 15, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 21, -1, 22, 32, -1, 24, 7, 17, 17, 17, 17, 17, 17, 17, 12, 17, 17, 1, 17, 17, 10, 17, 17, 17, 17, 17, 17, 17, 17, 14, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, -1, -1, 26, 26, 27, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 0, 0, -1, -1, -1, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29]
::next[] elements >= -1
::check has only one value
::check[] == [0, 1, 0, 0, 2, 3, 4, 0, 0, 0, 5, -1, 0, 7, 8, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, -1, 0, 12, 14, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 31, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, -1, -1, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 54, 54, -1, -1, -1, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28]
::check[] elements >= -1
size(::default1[]) == 60
size(::next[]) == 360
::default1[return] == -1
::default1[return-1] one of { -2, -1 }
::default1[return..] elements one of { -3, -1, 52 }
::base[return-1] one of { -1, 0, 43 }
::next[return] one of { 16, 18 }
::next[return] == 0  (mod 2)
::next[return-1] one of { 15, 18 }
::check[return] one of { 0, 15 }
::check[return-1] one of { 0, 14 }
::default1[] elements < size(::default1[])-1
::default1[] elements < size(::next[])-1
::base[] elements < size(::next[])-1
return in ::next[]
::next[] elements < size(::default1[])-1
::next[] elements < size(::next[])-1
::default1[return] in ::next[]
::next[] elements >= ::default1[return]
::next[] elements >= ::default1[return-1]
::check[return] in ::next[]
::check[return-1] in ::next[]
::check[] elements < size(::default1[])-1
::check[] elements < size(::next[])-1
::check[] elements >= ::default1[return]
::default1[return] in ::check[]
::check[] elements >= ::default1[return-1]
::next[return-1] in ::check[]
(size(::default1[]) >> return == 0)
(size(::default1[])-1 >> return == 0)
return < size(::default1[])-1
(size(::next[]) >> return == 0)
(size(::next[])-1 >> return == 0)
return < size(::next[])-1
return > ::default1[return]
return > ::default1[return-1]
return != ::base[return-1]
(return >> ::next[return] == 0)
return > ::next[return]
(return >> ::next[return-1] == 0)
return > ::next[return-1]
(return & ::check[return]) == 0
return > ::check[return]
(return & ::check[return-1]) == 0
return > ::check[return-1]
::check[0..return] elements < return
size(::default1[])-1 > ::default1[return-1]
size(::default1[])-1 > ::base[return-1]
size(::default1[])-1 > ::next[return]
size(::default1[])-1 > ::next[return-1]
size(::default1[])-1 > ::check[return]
size(::default1[])-1 > ::check[return-1]
size(::next[])-1 > ::default1[return-1]
size(::next[])-1 > ::base[return-1]
size(::next[])-1 > ::next[return]
size(::next[])-1 > ::next[return-1]
size(::next[])-1 > ::check[return]
size(::next[])-1 > ::check[return-1]
::default1[return] >= ::default1[return-1]
::default1[return] <= ::base[return-1]
::base[return..] elements >= ::default1[return]
::default1[return] < ::next[return]
::default1[return] < ::next[return-1]
::default1[return] in ::next[return..]
::default1[return] in ::next[return+1..]
::default1[return] in ::next[0..return]
::default1[return] in ::next[0..return-1]
::default1[return] < ::check[return]
::default1[return] < ::check[return-1]
::default1[return] in ::check[return..]
::default1[return] in ::check[return+1..]
::default1[return] in ::check[0..return]
::default1[return] in ::check[0..return-1]
::default1[return-1] <= ::base[return-1]
::base[return..] elements >= ::default1[return-1]
::default1[return-1] < ::next[return]
::default1[return-1] < ::next[return-1]
::default1[return-1] < ::check[return]
::default1[return-1] < ::check[return-1]
::base[return-1] != ::next[return]
::base[return-1] != ::next[return-1]
(::base[return-1] & ::check[return]) == 0
::base[return-1] != ::check[return]
(::base[return-1] & ::check[return-1]) == 0
::base[return-1] != ::check[return-1]
::next[return] >= ::next[return-1]
::next[return] > ::check[return]
::next[return] > ::check[return-1]
::check[0..return] elements < ::next[return]
::next[return-1] >= ::check[return]
::next[return-1] > ::check[return-1]
::next[return-1] in ::check[return..]
::check[0..return] elements <= ::next[return-1]
::check[0..return-1] elements < ::next[return-1]
::check[return-1] in ::next[return..]
::check[return-1] in ::next[return+1..]
::check[return] in ::next[0..return]
::next[0..return] >= ::check[0..return] (elementwise)
::check[return] in ::next[0..return-1]
::next[0..return-1] >= ::check[0..return-1] (elementwise)
::check[return] >= ::check[return-1]
::default1[return] == (::default1[return-1] >> return)
::default1[return] == (return | ::default1[return-1])
::default1[return] == (::default1[return-1] | ::base[return-1])
::check[return] == (::next[return-1] % ::next[return])
