===========================================================================
PolyCalc.RatNum:::OBJECT
    Variables: this this.numer this.denom
this.denom >= 0
===========================================================================
PolyCalc.RatNum.RatNum(int):::ENTER
    Variables: n
===========================================================================
PolyCalc.RatNum.RatNum(int):::EXIT
    Variables: this this.numer this.denom n orig(n)
      Unmodified variables: n
this.numer == \old(n)
this.denom == 1
===========================================================================
PolyCalc.RatNum.RatNum(int, int):::ENTER
    Variables: n d
===========================================================================
PolyCalc.RatNum.RatNum(int, int):::EXIT55
    Variables: this this.numer this.denom n d orig(n) orig(d)
      Unmodified variables: n d
this.numer == \old(n)
this.denom == \old(d)
this.denom == 0
===========================================================================
PolyCalc.RatNum.RatNum(int, int):::EXIT67
    Variables: this this.numer this.denom n d orig(n) orig(d)
      Unmodified variables: n d
this.denom >= 1
\old(d) != 0
\old(d) % this.denom == 0
===========================================================================
PolyCalc.RatNum.RatNum(int, int):::EXIT
    Variables: this this.numer this.denom n d orig(n) orig(d)
      Unmodified variables: n d
(this.denom == 0)  ==  (\old(d) == 0)
(this.denom == 0)  ==>  (\old(d) is a pointer)
(this.denom == 0)  ==>  (this.denom == \old(d))
(this.denom == 0)  ==>  (this.denom is a pointer)
(this.denom == 0)  ==>  (this.numer == \old(n))
(\old(n) == 0) ==> (this.numer == 0)
(this.numer == 0) ==> (\old(n) == 0)
(\old(d) == 0) ==> (this.denom == 0)
(this.denom == 0) ==> (\old(d) == 0)
===========================================================================
PolyCalc.RatNum.add(PolyCalc.RatNum):::ENTER
    Variables: this this.numer this.denom arg arg.numer arg.denom
arg != null
arg.denom >= 0
===========================================================================
PolyCalc.RatNum.add(PolyCalc.RatNum):::EXIT
    Variables: this this.numer this.denom arg arg.numer arg.denom return return.numer return.denom orig(this) orig(this.numer) orig(this.denom) orig(arg) orig(arg.numer) orig(arg.denom)
      Unmodified variables: this this.numer this.denom arg arg.numer arg.denom
arg.denom >= 0
\result != null
\result.denom >= 0
(this.denom == 0) ==> (\result.denom == 0)
(arg.denom == 0) ==> (\result.denom == 0)
===========================================================================
PolyCalc.RatNum.approx():::ENTER
    Variables: this this.numer this.denom
===========================================================================
PolyCalc.RatNum.approx():::EXIT117
    Variables: this this.numer this.denom return orig(this) orig(this.numer) orig(this.denom)
      Unmodified variables: this this.numer this.denom
this.denom == 0
\result == Double.NaN
this.numer != this.denom
===========================================================================
PolyCalc.RatNum.approx():::EXIT120
    Variables: this this.numer this.denom return orig(this) orig(this.numer) orig(this.denom)
      Unmodified variables: this this.numer this.denom
this.denom >= 1
===========================================================================
PolyCalc.RatNum.approx():::EXIT
    Variables: this this.numer this.denom return orig(this) orig(this.numer) orig(this.denom)
      Unmodified variables: this this.numer this.denom
(this.denom == 0)  ==>  (\result == Double.NaN)
(this.denom == 0)  ==>  (this.denom is a pointer)
(this.denom == 0)  ==>  (this.numer != this.denom)
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::ENTER
    Variables: this this.numer this.denom rn rn.numer rn.denom
rn != null
rn.denom >= 0
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::EXIT101
    Variables: this this.numer this.denom rn rn.numer rn.denom return orig(this) orig(this.numer) orig(this.denom) orig(rn) orig(rn.numer) orig(rn.denom)
      Unmodified variables: this this.numer this.denom rn rn.numer rn.denom
this.denom >= 1
rn.denom >= 1
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::EXIT94
    Variables: this this.numer this.denom rn rn.numer rn.denom return orig(this) orig(this.numer) orig(this.denom) orig(rn) orig(rn.numer) orig(rn.denom)
      Unmodified variables: this this.numer this.denom rn rn.numer rn.denom
this.denom == \result
rn.denom == \result
\result == \old(this.denom)
\result == \old(rn.denom)
\result == 0
this.numer != \result
rn.numer != \result
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::EXIT96
    Variables: this this.numer this.denom rn rn.numer rn.denom return orig(this) orig(this.numer) orig(this.denom) orig(rn) orig(rn.numer) orig(rn.denom)
      Unmodified variables: this this.numer this.denom rn rn.numer rn.denom
this.denom == 0
rn.numer >= -1
rn.denom >= 1
\result == 1
this.numer != this.denom
this.denom < rn.denom
rn.denom >= \result
warning: method daikon.inv.ternary.threeScalar.FunctionBinary$GcdLong_zxy.format(OutputFormat:ESC/Java) needs to be implemented: return == (org.plumelib.util.MathPlume.gcd(rn.numer, rn.denom))
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::EXIT98
    Variables: this this.numer this.denom rn rn.numer rn.denom return orig(this) orig(this.numer) orig(this.denom) orig(rn) orig(rn.numer) orig(rn.denom)
      Unmodified variables: this this.numer this.denom rn rn.numer rn.denom
this.denom >= 1
rn.numer != 0
rn.denom == 0
\result == -1
this.denom > rn.denom
this.denom > \result
rn.numer != rn.denom
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::EXIT
    Variables: this this.numer this.denom rn rn.numer rn.denom return orig(this) orig(this.numer) orig(this.denom) orig(rn) orig(rn.numer) orig(rn.denom)
      Unmodified variables: this this.numer this.denom rn rn.numer rn.denom
rn.denom >= 0
===========================================================================
PolyCalc.RatNum.debugPrint():::ENTER
    Variables: this this.numer this.denom
===========================================================================
PolyCalc.RatNum.debugPrint():::EXIT
    Variables: this this.numer this.denom return return.toString orig(this) orig(this.numer) orig(this.denom)
      Unmodified variables: this this.numer this.denom
\result != null
warning: method daikon.inv.unary.string.PrintableString.format(OutputFormat:ESC/Java) needs to be implemented: return.toString is printable
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::ENTER
    Variables: this this.numer this.denom arg arg.numer arg.denom
arg != null
arg.denom >= 0
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT187
    Variables: this this.numer this.denom arg arg.numer arg.denom return return.numer return.denom orig(this) orig(this.numer) orig(this.denom) orig(arg) orig(arg.numer) orig(arg.denom)
      Unmodified variables: this this.numer this.denom arg arg.numer arg.denom
arg.numer == \result.numer
arg.denom == \result.denom
\result == \old(arg)
arg.denom == 0
(arg.numer == 0) ==> (this.numer == 0)
this.denom >= arg.denom
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT189
    Variables: this this.numer this.denom arg arg.numer arg.denom return return.numer return.denom orig(this) orig(this.numer) orig(this.denom) orig(arg) orig(arg.numer) orig(arg.denom)
      Unmodified variables: this this.numer this.denom arg arg.numer arg.denom
arg.denom >= 1
(this.numer == 0) ==> (\result.numer == 0)
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT
    Variables: this this.numer this.denom arg arg.numer arg.denom return return.numer return.denom orig(this) orig(this.numer) orig(this.denom) orig(arg) orig(arg.numer) orig(arg.denom)
      Unmodified variables: this this.numer this.denom arg arg.numer arg.denom
(arg.denom == 0)  ==>  ((arg.numer == 0) ==> (this.numer == 0))
(arg.denom == 0)  ==>  (arg.denom == \result.denom)
(arg.denom == 0)  ==>  (arg.denom is a pointer)
(arg.denom == 0)  ==>  (arg.numer == \result.numer)
(arg.denom == 0)  ==>  (\result == \old(arg))
(arg.denom == 0)  ==>  (\result.denom == 0)
(arg.denom == 0)  ==>  (\result.denom is a pointer)
(arg.denom == 0)  ==>  (this.denom >= arg.denom)
(arg.denom == 0)  ==>  (this.denom >= \result.denom)
arg.denom >= 0
\result != null
\result.denom >= 0
(\result.numer == 0) ==> (this.numer == 0)
(this.denom == 0) ==> (\result.denom == 0)
(arg.numer == 0) ==> (\result.denom == 0)
(arg.denom == 0) ==> (\result.denom == 0)
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::ENTER
    Variables: this this.numer this.denom obj obj.getClass().getName()
obj != null
\typeof(obj) == \type(PolyCalc.RatNum)
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT230
    Variables: this this.numer this.denom obj obj.getClass().getName() return orig(this) orig(this.numer) orig(this.denom) orig(obj) orig(obj.getClass().getName())
      Unmodified variables: this this.numer this.denom obj obj.getClass().getName()
this.denom == 0
\result == true
this.numer != this.denom
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT232
    Variables: this this.numer this.denom obj obj.getClass().getName() return orig(this) orig(this.numer) orig(this.denom) orig(obj) orig(obj.getClass().getName())
      Unmodified variables: this this.numer this.denom obj obj.getClass().getName()
(\result == true)  ==>  (this.denom >= 1)
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT
    Variables: this this.numer this.denom obj obj.getClass().getName() return orig(this) orig(this.numer) orig(this.denom) orig(obj) orig(obj.getClass().getName())
      Unmodified variables: this this.numer this.denom obj obj.getClass().getName()
===========================================================================
PolyCalc.RatNum.gcd(int, int):::ENTER
    Variables: _a _b
_b != 0
===========================================================================
PolyCalc.RatNum.gcd(int, int):::EXIT209
    Variables: _a _b return orig(_a) orig(_b)
      Unmodified variables: _a _b
===========================================================================
PolyCalc.RatNum.gcd(int, int):::EXIT
    Variables: _a _b return orig(_a) orig(_b)
      Unmodified variables: _a _b
\result != 0
\old(_a) % \result == 0
\old(_b) % \result == 0
===========================================================================
PolyCalc.RatNum.isNaN():::ENTER
    Variables: this this.numer this.denom
===========================================================================
PolyCalc.RatNum.isNaN():::EXIT
    Variables: this this.numer this.denom return orig(this) orig(this.numer) orig(this.denom)
      Unmodified variables: this this.numer this.denom
(this.denom == 0)  ==  (\result == true)
(this.denom == 0)  ==>  (this.denom is a pointer)
===========================================================================
PolyCalc.RatNum.isNegative():::ENTER
    Variables: this this.numer this.denom
===========================================================================
PolyCalc.RatNum.isNegative():::EXIT
    Variables: this this.numer this.denom return orig(this) orig(this.numer) orig(this.denom)
      Unmodified variables: this this.numer this.denom
(\result == true)  ==>  (this.denom >= 1)
(\result == true)  ==>  (this.numer < this.denom)
(\result == true)  ==>  (this.numer <= -1)
===========================================================================
PolyCalc.RatNum.isPositive():::ENTER
    Variables: this this.numer this.denom
===========================================================================
PolyCalc.RatNum.isPositive():::EXIT
    Variables: this this.numer this.denom return orig(this) orig(this.numer) orig(this.denom)
      Unmodified variables: this this.numer this.denom
(\result == false)  ==>  (this.numer < this.denom)
(\result == true)  ==>  (this.numer != 0)
===========================================================================
PolyCalc.RatNum.mul(PolyCalc.RatNum):::ENTER
    Variables: this this.numer this.denom arg arg.numer arg.denom
arg != null
arg.denom >= 0
===========================================================================
PolyCalc.RatNum.mul(PolyCalc.RatNum):::EXIT
    Variables: this this.numer this.denom arg arg.numer arg.denom return return.numer return.denom orig(this) orig(this.numer) orig(this.denom) orig(arg) orig(arg.numer) orig(arg.denom)
      Unmodified variables: this this.numer this.denom arg arg.numer arg.denom
arg.denom >= 0
\result != null
\result.denom >= 0
(this.numer == 0) ==> (\result.numer == 0)
(this.denom == 0) ==> (\result.denom == 0)
(arg.numer == 0) ==> (\result.numer == 0)
(arg.denom == 0) ==> (\result.denom == 0)
===========================================================================
PolyCalc.RatNum.negate():::ENTER
    Variables: this this.numer this.denom
===========================================================================
PolyCalc.RatNum.negate():::EXIT
    Variables: this this.numer this.denom return return.numer return.denom orig(this) orig(this.numer) orig(this.denom)
      Unmodified variables: this this.numer this.denom
this.denom == \result.denom
\result != null
(\result.numer == 0) ==> (this.numer == 0)
(this.numer == 0) ==> (\result.numer == 0)
this.numer + \result.numer == 0
===========================================================================
PolyCalc.RatNum.parse(java.lang.String):::ENTER
    Variables: ratStr ratStr.toString
ratStr != null
warning: method daikon.inv.unary.string.PrintableString.format(OutputFormat:ESC/Java) needs to be implemented: ratStr.toString is printable
===========================================================================
PolyCalc.RatNum.parse(java.lang.String):::EXIT264
    Variables: ratStr ratStr.toString return return.numer return.denom orig(ratStr) orig(ratStr.toString)
      Unmodified variables: ratStr ratStr.toString
warning: method daikon.inv.unary.string.OneOfString.format(OutputFormat:ESC/Java) needs to be implemented: ratStr.toString == "NaN"
\result.numer == 1
\result.denom == 0
\old(ratStr) != null
===========================================================================
PolyCalc.RatNum.parse(java.lang.String):::EXIT267
    Variables: ratStr ratStr.toString return return.numer return.denom orig(ratStr) orig(ratStr.toString)
      Unmodified variables: ratStr ratStr.toString
\result.denom == 1
===========================================================================
PolyCalc.RatNum.parse(java.lang.String):::EXIT273
    Variables: ratStr ratStr.toString return return.numer return.denom orig(ratStr) orig(ratStr.toString)
      Unmodified variables: ratStr ratStr.toString
===========================================================================
PolyCalc.RatNum.parse(java.lang.String):::EXIT
    Variables: ratStr ratStr.toString return return.numer return.denom orig(ratStr) orig(ratStr.toString)
      Unmodified variables: ratStr ratStr.toString
warning: method daikon.inv.unary.string.PrintableString.format(OutputFormat:ESC/Java) needs to be implemented: ratStr.toString is printable
\result != null
\result.denom >= 0
===========================================================================
PolyCalc.RatNum.sub(PolyCalc.RatNum):::ENTER
    Variables: this this.numer this.denom arg arg.numer arg.denom
arg != null
arg.denom >= 0
===========================================================================
PolyCalc.RatNum.sub(PolyCalc.RatNum):::EXIT
    Variables: this this.numer this.denom arg arg.numer arg.denom return return.numer return.denom orig(this) orig(this.numer) orig(this.denom) orig(arg) orig(arg.numer) orig(arg.denom)
      Unmodified variables: this this.numer this.denom arg arg.numer arg.denom
arg.denom >= 0
\result != null
\result.denom >= 0
(this.denom == 0) ==> (\result.denom == 0)
(arg.denom == 0) ==> (\result.denom == 0)
===========================================================================
PolyCalc.RatNum.toString():::ENTER
    Variables: this this.numer this.denom
===========================================================================
PolyCalc.RatNum.toString():::EXIT
    Variables: this this.numer this.denom return return.toString orig(this) orig(this.numer) orig(this.denom)
      Unmodified variables: this this.numer this.denom
\result != null
warning: method daikon.inv.unary.string.PrintableString.format(OutputFormat:ESC/Java) needs to be implemented: return.toString is printable
===========================================================================
PolyCalc.RatNum.unparse():::ENTER
    Variables: this this.numer this.denom
===========================================================================
PolyCalc.RatNum.unparse():::EXIT133
    Variables: this this.numer this.denom return return.toString orig(this) orig(this.numer) orig(this.denom)
      Unmodified variables: this this.numer this.denom
this.denom == 0
\result != null
warning: method daikon.inv.unary.string.OneOfString.format(OutputFormat:ESC/Java) needs to be implemented: return.toString == "NaN"
===========================================================================
PolyCalc.RatNum.unparse():::EXIT135
    Variables: this this.numer this.denom return return.toString orig(this) orig(this.numer) orig(this.denom)
      Unmodified variables: this this.numer this.denom
this.numer != 0
this.denom >= 2
this.numer != this.denom
===========================================================================
PolyCalc.RatNum.unparse():::EXIT137
    Variables: this this.numer this.denom return return.toString orig(this) orig(this.numer) orig(this.denom)
      Unmodified variables: this this.numer this.denom
this.denom == 1
===========================================================================
PolyCalc.RatNum.unparse():::EXIT
    Variables: this this.numer this.denom return return.toString orig(this) orig(this.numer) orig(this.denom)
      Unmodified variables: this this.numer this.denom
\result != null
warning: method daikon.inv.unary.string.PrintableString.format(OutputFormat:ESC/Java) needs to be implemented: return.toString is printable
