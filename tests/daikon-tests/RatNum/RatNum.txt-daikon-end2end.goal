===========================================================================
PolyCalc.RatNum:::OBJECT
this.denom >= 0
===========================================================================
PolyCalc.RatNum:::OBJECT;condition="not(denom < 0)"
===========================================================================
PolyCalc.RatNum.RatNum(int):::ENTER
===========================================================================
PolyCalc.RatNum.RatNum(int):::EXIT
this.numer == orig(n)
this.denom == 1
===========================================================================
PolyCalc.RatNum.RatNum(int):::EXIT;condition="not(denom < 0)"
===========================================================================
PolyCalc.RatNum.RatNum(int, int):::ENTER
===========================================================================
PolyCalc.RatNum.RatNum(int, int):::EXIT55
this.numer == orig(n)
this.denom == orig(d)
this.denom == 0
===========================================================================
PolyCalc.RatNum.RatNum(int, int):::EXIT55;condition="not(denom < 0)"
===========================================================================
PolyCalc.RatNum.RatNum(int, int):::EXIT67
this.denom >= 1
orig(d) != 0
orig(d) % this.denom == 0
===========================================================================
PolyCalc.RatNum.RatNum(int, int):::EXIT67;condition="not(denom < 0)"
===========================================================================
PolyCalc.RatNum.RatNum(int, int):::EXIT
(this.denom == 0)  <==>  (orig(d) == 0)
(this.denom == 0)  ==>  (orig(d) is a pointer)
(this.denom == 0)  ==>  (this.denom == orig(d))
(this.denom == 0)  ==>  (this.denom is a pointer)
(this.denom == 0)  ==>  (this.numer == orig(n))
(orig(n) == 0) ==> (this.numer == 0)
(this.numer == 0) ==> (orig(n) == 0)
(orig(d) == 0) ==> (this.denom == 0)
(this.denom == 0) ==> (orig(d) == 0)
===========================================================================
PolyCalc.RatNum.RatNum(int, int):::EXIT;condition="not(denom < 0)"
===========================================================================
PolyCalc.RatNum.add(PolyCalc.RatNum):::ENTER
(this.denom == 0)  ==>  ((this.numer == 0) ==> (arg.denom == 0))
(this.denom == 0)  ==>  (this.denom <= arg.denom)
(this.denom == 0)  ==>  (this.denom is a pointer)
arg != null
arg.denom >= 0
===========================================================================
PolyCalc.RatNum.add(PolyCalc.RatNum):::ENTER;condition="not(denom < 0)"
===========================================================================
PolyCalc.RatNum.add(PolyCalc.RatNum):::ENTER;condition="(denom == 0)"
this.denom == 0
arg != null
arg.denom >= 0
(this.numer == 0) ==> (arg.denom == 0)
this.denom <= arg.denom
===========================================================================
PolyCalc.RatNum.add(PolyCalc.RatNum):::ENTER;condition="not((denom == 0))"
this.denom >= 1
arg != null
arg.denom >= 0
===========================================================================
PolyCalc.RatNum.add(PolyCalc.RatNum):::ENTER;condition="(this.denom != 0)&&(this.numer < 0)"
this.numer <= -1
this.denom >= 1
arg != null
arg.denom >= 0
this.numer < this.denom
this.numer < arg.denom
===========================================================================
PolyCalc.RatNum.add(PolyCalc.RatNum):::ENTER;condition="not((this.denom != 0)&&(this.numer < 0))"
this.denom >= 0
arg != null
arg.denom >= 0
===========================================================================
PolyCalc.RatNum.add(PolyCalc.RatNum):::ENTER;condition="(this.denom == 0)||(this.numer > 0)"
this.denom >= 0
arg != null
arg.denom >= 0
(this.numer == 0) ==> (this.denom == 0)
(this.numer == 0) ==> (arg.denom == 0)
===========================================================================
PolyCalc.RatNum.add(PolyCalc.RatNum):::ENTER;condition="not((this.denom == 0)||(this.numer > 0))"
this.numer <= 0
this.denom >= 1
arg != null
arg.denom >= 0
this.numer < this.denom
this.numer <= arg.denom
===========================================================================
PolyCalc.RatNum.add(PolyCalc.RatNum):::ENTER;condition="rn.isNaN()"
this.denom == 0
arg != null
arg.denom >= 0
(this.numer == 0) ==> (arg.denom == 0)
this.denom <= arg.denom
===========================================================================
PolyCalc.RatNum.add(PolyCalc.RatNum):::ENTER;condition="not(rn.isNaN())"
this.denom >= 1
arg != null
arg.denom >= 0
===========================================================================
PolyCalc.RatNum.add(PolyCalc.RatNum):::ENTER;condition="isNaN()"
this.denom == 0
arg != null
arg.denom >= 0
(this.numer == 0) ==> (arg.denom == 0)
this.denom <= arg.denom
===========================================================================
PolyCalc.RatNum.add(PolyCalc.RatNum):::ENTER;condition="not(isNaN())"
this.denom >= 1
arg != null
arg.denom >= 0
===========================================================================
PolyCalc.RatNum.add(PolyCalc.RatNum):::ENTER;condition="denom != 1"
this.denom >= 0
arg != null
arg.denom >= 0
(this.numer == 0) ==> (this.denom == 0)
(this.numer == 0) ==> (arg.denom == 0)
===========================================================================
PolyCalc.RatNum.add(PolyCalc.RatNum):::ENTER;condition="not(denom != 1)"
this.denom == 1
arg != null
arg.denom >= 0
===========================================================================
PolyCalc.RatNum.add(PolyCalc.RatNum):::EXIT
this.numer == orig(this.numer)
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
(this.denom == 0)  ==>  ((arg.denom == 0) ==> (return.numer == 0))
(this.denom == 0)  ==>  ((return.numer == 0) ==> (arg.denom == 0))
(this.denom == 0)  ==>  ((this.numer == 0) ==> (arg.denom == 0))
(this.denom == 0)  ==>  ((this.numer == 0) ==> (return.numer == 0))
(this.denom == 0)  ==>  (arg.denom >= return.denom)
(this.denom == 0)  ==>  (return.denom == 0)
(this.denom == 0)  ==>  (return.denom is a pointer)
(this.denom == 0)  ==>  (return.numer == (this.numer * arg.denom))
(this.denom == 0)  ==>  (this.denom <= arg.denom)
(this.denom == 0)  ==>  (this.denom == return.denom)
(this.denom == 0)  ==>  (this.denom is a pointer)
arg.denom >= 0
return != null
return.denom >= 0
(this.denom == 0) ==> (return.denom == 0)
(arg.denom == 0) ==> (return.denom == 0)
===========================================================================
PolyCalc.RatNum.add(PolyCalc.RatNum):::EXIT;condition="not(denom < 0)"
===========================================================================
PolyCalc.RatNum.add(PolyCalc.RatNum):::EXIT;condition="(denom == 0)"
this.numer == orig(this.numer)
this.denom == return.denom
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.denom == 0
arg.denom >= 0
return != null
(this.numer == 0) ==> (arg.denom == 0)
(this.numer == 0) ==> (return.numer == 0)
this.denom <= arg.denom
(arg.denom == 0) ==> (return.numer == 0)
(return.numer == 0) ==> (arg.denom == 0)
return.numer == (this.numer * arg.denom)
===========================================================================
PolyCalc.RatNum.add(PolyCalc.RatNum):::EXIT;condition="not((denom == 0))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.denom >= 1
arg.denom >= 0
return != null
return.denom >= 0
(arg.denom == 0) ==> (return.denom == 0)
(return.denom == 0) ==> (arg.denom == 0)
===========================================================================
PolyCalc.RatNum.add(PolyCalc.RatNum):::EXIT;condition="orig((denom == 0))"
this.numer == orig(this.numer)
this.denom == return.denom
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.denom == 0
arg.denom >= 0
return != null
orig(arg) != null
(this.numer == 0) ==> (arg.denom == 0)
(this.numer == 0) ==> (return.numer == 0)
this.denom <= arg.denom
(arg.denom == 0) ==> (return.numer == 0)
(return.numer == 0) ==> (arg.denom == 0)
return.numer == (this.numer * arg.denom)
===========================================================================
PolyCalc.RatNum.add(PolyCalc.RatNum):::EXIT;condition="not(orig((denom == 0)))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.denom >= 1
arg.denom >= 0
return != null
return.denom >= 0
orig(arg) != null
(arg.denom == 0) ==> (return.denom == 0)
(return.denom == 0) ==> (arg.denom == 0)
===========================================================================
PolyCalc.RatNum.add(PolyCalc.RatNum):::EXIT;condition="(this.denom != 0)&&(this.numer < 0)"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.numer <= -1
this.denom >= 1
arg.denom >= 0
return != null
return.denom >= 0
this.numer < this.denom
this.numer < arg.denom
this.numer < return.denom
(arg.denom == 0) ==> (return.denom == 0)
(return.denom == 0) ==> (arg.denom == 0)
===========================================================================
PolyCalc.RatNum.add(PolyCalc.RatNum):::EXIT;condition="not((this.denom != 0)&&(this.numer < 0))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.denom >= 0
arg.denom >= 0
return != null
return.denom >= 0
(this.denom == 0) ==> (return.denom == 0)
(arg.denom == 0) ==> (return.denom == 0)
===========================================================================
PolyCalc.RatNum.add(PolyCalc.RatNum):::EXIT;condition="orig((this.denom != 0)&&(this.numer < 0))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.numer <= -1
this.denom >= 1
arg.denom >= 0
return != null
return.denom >= 0
orig(arg) != null
this.numer < this.denom
this.numer < arg.denom
this.numer < return.denom
(arg.denom == 0) ==> (return.denom == 0)
(return.denom == 0) ==> (arg.denom == 0)
===========================================================================
PolyCalc.RatNum.add(PolyCalc.RatNum):::EXIT;condition="not(orig((this.denom != 0)&&(this.numer < 0)))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.denom >= 0
arg.denom >= 0
return != null
return.denom >= 0
orig(arg) != null
(this.denom == 0) ==> (return.denom == 0)
(arg.denom == 0) ==> (return.denom == 0)
===========================================================================
PolyCalc.RatNum.add(PolyCalc.RatNum):::EXIT;condition="(this.denom == 0)||(this.numer > 0)"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.denom >= 0
arg.denom >= 0
return != null
return.denom >= 0
(this.numer == 0) ==> (this.denom == 0)
(this.numer == 0) ==> (arg.denom == 0)
(this.numer == 0) ==> (return.numer == 0)
(this.numer == 0) ==> (return.denom == 0)
(this.denom == 0) ==> (return.denom == 0)
(arg.denom == 0) ==> (return.denom == 0)
===========================================================================
PolyCalc.RatNum.add(PolyCalc.RatNum):::EXIT;condition="not((this.denom == 0)||(this.numer > 0))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.numer <= 0
this.denom >= 1
arg.denom >= 0
return != null
return.denom >= 0
this.numer < this.denom
this.numer <= arg.denom
this.numer <= return.denom
(arg.denom == 0) ==> (return.denom == 0)
(return.denom == 0) ==> (arg.denom == 0)
===========================================================================
PolyCalc.RatNum.add(PolyCalc.RatNum):::EXIT;condition="orig((this.denom == 0)||(this.numer > 0))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.denom >= 0
arg.denom >= 0
return != null
return.denom >= 0
orig(arg) != null
(this.numer == 0) ==> (this.denom == 0)
(this.numer == 0) ==> (arg.denom == 0)
(this.numer == 0) ==> (return.numer == 0)
(this.numer == 0) ==> (return.denom == 0)
(this.denom == 0) ==> (return.denom == 0)
(arg.denom == 0) ==> (return.denom == 0)
===========================================================================
PolyCalc.RatNum.add(PolyCalc.RatNum):::EXIT;condition="not(orig((this.denom == 0)||(this.numer > 0)))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.numer <= 0
this.denom >= 1
arg.denom >= 0
return != null
return.denom >= 0
orig(arg) != null
this.numer < this.denom
this.numer <= arg.denom
this.numer <= return.denom
(arg.denom == 0) ==> (return.denom == 0)
(return.denom == 0) ==> (arg.denom == 0)
===========================================================================
PolyCalc.RatNum.add(PolyCalc.RatNum):::EXIT;condition="orig(rn.isNaN())"
this.numer == orig(this.numer)
this.denom == return.denom
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.denom == 0
arg.denom >= 0
return != null
orig(arg) != null
(this.numer == 0) ==> (arg.denom == 0)
(this.numer == 0) ==> (return.numer == 0)
this.denom <= arg.denom
(arg.denom == 0) ==> (return.numer == 0)
(return.numer == 0) ==> (arg.denom == 0)
return.numer == (this.numer * arg.denom)
===========================================================================
PolyCalc.RatNum.add(PolyCalc.RatNum):::EXIT;condition="not(orig(rn.isNaN()))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.denom >= 1
arg.denom >= 0
return != null
return.denom >= 0
orig(arg) != null
(arg.denom == 0) ==> (return.denom == 0)
(return.denom == 0) ==> (arg.denom == 0)
===========================================================================
PolyCalc.RatNum.add(PolyCalc.RatNum):::EXIT;condition="rn.isNaN()"
this.numer == orig(this.numer)
this.denom == return.denom
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.denom == 0
arg.denom >= 0
return != null
(this.numer == 0) ==> (arg.denom == 0)
(this.numer == 0) ==> (return.numer == 0)
this.denom <= arg.denom
(arg.denom == 0) ==> (return.numer == 0)
(return.numer == 0) ==> (arg.denom == 0)
return.numer == (this.numer * arg.denom)
===========================================================================
PolyCalc.RatNum.add(PolyCalc.RatNum):::EXIT;condition="not(rn.isNaN())"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.denom >= 1
arg.denom >= 0
return != null
return.denom >= 0
(arg.denom == 0) ==> (return.denom == 0)
(return.denom == 0) ==> (arg.denom == 0)
===========================================================================
PolyCalc.RatNum.add(PolyCalc.RatNum):::EXIT;condition="isNaN()"
this.numer == orig(this.numer)
this.denom == return.denom
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.denom == 0
arg.denom >= 0
return != null
(this.numer == 0) ==> (arg.denom == 0)
(this.numer == 0) ==> (return.numer == 0)
this.denom <= arg.denom
(arg.denom == 0) ==> (return.numer == 0)
(return.numer == 0) ==> (arg.denom == 0)
return.numer == (this.numer * arg.denom)
===========================================================================
PolyCalc.RatNum.add(PolyCalc.RatNum):::EXIT;condition="not(isNaN())"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.denom >= 1
arg.denom >= 0
return != null
return.denom >= 0
(arg.denom == 0) ==> (return.denom == 0)
(return.denom == 0) ==> (arg.denom == 0)
===========================================================================
PolyCalc.RatNum.add(PolyCalc.RatNum):::EXIT;condition="orig(isNaN())"
this.numer == orig(this.numer)
this.denom == return.denom
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.denom == 0
arg.denom >= 0
return != null
orig(arg) != null
(this.numer == 0) ==> (arg.denom == 0)
(this.numer == 0) ==> (return.numer == 0)
this.denom <= arg.denom
(arg.denom == 0) ==> (return.numer == 0)
(return.numer == 0) ==> (arg.denom == 0)
return.numer == (this.numer * arg.denom)
===========================================================================
PolyCalc.RatNum.add(PolyCalc.RatNum):::EXIT;condition="not(orig(isNaN()))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.denom >= 1
arg.denom >= 0
return != null
return.denom >= 0
orig(arg) != null
(arg.denom == 0) ==> (return.denom == 0)
(return.denom == 0) ==> (arg.denom == 0)
===========================================================================
PolyCalc.RatNum.add(PolyCalc.RatNum):::EXIT;condition="denom != 1"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.denom >= 0
arg.denom >= 0
return != null
return.denom >= 0
(this.numer == 0) ==> (this.denom == 0)
(this.numer == 0) ==> (arg.denom == 0)
(this.numer == 0) ==> (return.numer == 0)
(this.numer == 0) ==> (return.denom == 0)
(this.denom == 0) ==> (return.denom == 0)
(arg.denom == 0) ==> (return.denom == 0)
===========================================================================
PolyCalc.RatNum.add(PolyCalc.RatNum):::EXIT;condition="not(denom != 1)"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == return.denom
arg.denom == orig(arg.denom)
this.denom == 1
arg.denom >= 0
return != null
===========================================================================
PolyCalc.RatNum.add(PolyCalc.RatNum):::EXIT;condition="orig(denom != 1)"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.denom >= 0
arg.denom >= 0
return != null
return.denom >= 0
orig(arg) != null
(this.numer == 0) ==> (this.denom == 0)
(this.numer == 0) ==> (arg.denom == 0)
(this.numer == 0) ==> (return.numer == 0)
(this.numer == 0) ==> (return.denom == 0)
(this.denom == 0) ==> (return.denom == 0)
(arg.denom == 0) ==> (return.denom == 0)
===========================================================================
PolyCalc.RatNum.add(PolyCalc.RatNum):::EXIT;condition="not(orig(denom != 1))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == return.denom
arg.denom == orig(arg.denom)
this.denom == 1
arg.denom >= 0
return != null
orig(arg) != null
===========================================================================
PolyCalc.RatNum.approx():::ENTER
(this.denom == 0)  ==>  (this.denom is a pointer)
(this.denom == 0)  ==>  (this.numer != this.denom)
===========================================================================
PolyCalc.RatNum.approx():::ENTER;condition="not(denom < 0)"
===========================================================================
PolyCalc.RatNum.approx():::ENTER;condition="(denom == 0)"
this.denom == 0
this.numer != this.denom
===========================================================================
PolyCalc.RatNum.approx():::ENTER;condition="not((denom == 0))"
this.denom >= 1
===========================================================================
PolyCalc.RatNum.approx():::ENTER;condition="(this.denom != 0)&&(this.numer < 0)"
this.denom >= 1
this.numer < this.denom
===========================================================================
PolyCalc.RatNum.approx():::ENTER;condition="not((this.denom != 0)&&(this.numer < 0))"
this.denom >= 0
===========================================================================
PolyCalc.RatNum.approx():::ENTER;condition="(this.denom == 0)||(this.numer > 0)"
this.numer != 0
this.denom >= 0
===========================================================================
PolyCalc.RatNum.approx():::ENTER;condition="not((this.denom == 0)||(this.numer > 0))"
this.denom >= 1
this.numer < this.denom
===========================================================================
PolyCalc.RatNum.approx():::ENTER;condition="rn.isNaN()"
this.denom == 0
this.numer != this.denom
===========================================================================
PolyCalc.RatNum.approx():::ENTER;condition="not(rn.isNaN())"
this.denom >= 1
===========================================================================
PolyCalc.RatNum.approx():::EXIT117
this.denom == 0
return == Double.NaN
this.numer != this.denom
===========================================================================
PolyCalc.RatNum.approx():::EXIT117;condition="not(denom < 0)"
===========================================================================
PolyCalc.RatNum.approx():::EXIT117;condition="(denom == 0)"
===========================================================================
PolyCalc.RatNum.approx():::EXIT117;condition="orig((denom == 0))"
===========================================================================
PolyCalc.RatNum.approx():::EXIT117;condition="not((this.denom != 0)&&(this.numer < 0))"
this.denom == 0
return == Double.NaN
this.numer != this.denom
===========================================================================
PolyCalc.RatNum.approx():::EXIT117;condition="not(orig((this.denom != 0)&&(this.numer < 0)))"
this.denom == 0
return == Double.NaN
this.numer != this.denom
===========================================================================
PolyCalc.RatNum.approx():::EXIT117;condition="(this.denom == 0)||(this.numer > 0)"
this.denom == 0
return == Double.NaN
this.numer != this.denom
===========================================================================
PolyCalc.RatNum.approx():::EXIT117;condition="orig((this.denom == 0)||(this.numer > 0))"
this.denom == 0
return == Double.NaN
this.numer != this.denom
===========================================================================
PolyCalc.RatNum.approx():::EXIT117;condition="orig(rn.isNaN())"
===========================================================================
PolyCalc.RatNum.approx():::EXIT117;condition="rn.isNaN()"
===========================================================================
PolyCalc.RatNum.approx():::EXIT117;condition="isNaN()"
===========================================================================
PolyCalc.RatNum.approx():::EXIT117;condition="orig(isNaN())"
===========================================================================
PolyCalc.RatNum.approx():::EXIT120
this.denom >= 1
===========================================================================
PolyCalc.RatNum.approx():::EXIT120;condition="not(denom < 0)"
===========================================================================
PolyCalc.RatNum.approx():::EXIT120;condition="not((denom == 0))"
===========================================================================
PolyCalc.RatNum.approx():::EXIT120;condition="not(orig((denom == 0)))"
===========================================================================
PolyCalc.RatNum.approx():::EXIT120;condition="(this.denom != 0)&&(this.numer < 0)"
===========================================================================
PolyCalc.RatNum.approx():::EXIT120;condition="not((this.denom != 0)&&(this.numer < 0))"
this.denom >= 1
===========================================================================
PolyCalc.RatNum.approx():::EXIT120;condition="orig((this.denom != 0)&&(this.numer < 0))"
===========================================================================
PolyCalc.RatNum.approx():::EXIT120;condition="not(orig((this.denom != 0)&&(this.numer < 0)))"
this.denom >= 1
===========================================================================
PolyCalc.RatNum.approx():::EXIT120;condition="(this.denom == 0)||(this.numer > 0)"
this.numer >= 1
this.denom >= 1
===========================================================================
PolyCalc.RatNum.approx():::EXIT120;condition="not((this.denom == 0)||(this.numer > 0))"
===========================================================================
PolyCalc.RatNum.approx():::EXIT120;condition="orig((this.denom == 0)||(this.numer > 0))"
this.numer >= 1
this.denom >= 1
===========================================================================
PolyCalc.RatNum.approx():::EXIT120;condition="not(orig((this.denom == 0)||(this.numer > 0)))"
===========================================================================
PolyCalc.RatNum.approx():::EXIT120;condition="not(orig(rn.isNaN()))"
===========================================================================
PolyCalc.RatNum.approx():::EXIT120;condition="not(rn.isNaN())"
===========================================================================
PolyCalc.RatNum.approx():::EXIT120;condition="not(isNaN())"
===========================================================================
PolyCalc.RatNum.approx():::EXIT120;condition="not(orig(isNaN()))"
===========================================================================
PolyCalc.RatNum.approx():::EXIT
this.numer == orig(this.numer)
this.denom == orig(this.denom)
(this.denom == 0)  ==>  (return == Double.NaN)
(this.denom == 0)  ==>  (this.denom is a pointer)
(this.denom == 0)  ==>  (this.numer != this.denom)
===========================================================================
PolyCalc.RatNum.approx():::EXIT;condition="not(denom < 0)"
===========================================================================
PolyCalc.RatNum.approx():::EXIT;condition="(denom == 0)"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom == 0
return == Double.NaN
this.numer != this.denom
===========================================================================
PolyCalc.RatNum.approx():::EXIT;condition="not((denom == 0))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom >= 1
===========================================================================
PolyCalc.RatNum.approx():::EXIT;condition="orig((denom == 0))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom == 0
return == Double.NaN
this.numer != this.denom
===========================================================================
PolyCalc.RatNum.approx():::EXIT;condition="not(orig((denom == 0)))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom >= 1
===========================================================================
PolyCalc.RatNum.approx():::EXIT;condition="(this.denom != 0)&&(this.numer < 0)"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom >= 1
this.numer < this.denom
===========================================================================
PolyCalc.RatNum.approx():::EXIT;condition="not((this.denom != 0)&&(this.numer < 0))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom >= 0
===========================================================================
PolyCalc.RatNum.approx():::EXIT;condition="orig((this.denom != 0)&&(this.numer < 0))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom >= 1
this.numer < this.denom
===========================================================================
PolyCalc.RatNum.approx():::EXIT;condition="not(orig((this.denom != 0)&&(this.numer < 0)))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom >= 0
===========================================================================
PolyCalc.RatNum.approx():::EXIT;condition="(this.denom == 0)||(this.numer > 0)"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.numer != 0
this.denom >= 0
===========================================================================
PolyCalc.RatNum.approx():::EXIT;condition="not((this.denom == 0)||(this.numer > 0))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom >= 1
this.numer < this.denom
===========================================================================
PolyCalc.RatNum.approx():::EXIT;condition="orig((this.denom == 0)||(this.numer > 0))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.numer != 0
this.denom >= 0
===========================================================================
PolyCalc.RatNum.approx():::EXIT;condition="not(orig((this.denom == 0)||(this.numer > 0)))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom >= 1
this.numer < this.denom
===========================================================================
PolyCalc.RatNum.approx():::EXIT;condition="orig(rn.isNaN())"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom == 0
return == Double.NaN
this.numer != this.denom
===========================================================================
PolyCalc.RatNum.approx():::EXIT;condition="not(orig(rn.isNaN()))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom >= 1
===========================================================================
PolyCalc.RatNum.approx():::EXIT;condition="rn.isNaN()"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom == 0
return == Double.NaN
this.numer != this.denom
===========================================================================
PolyCalc.RatNum.approx():::EXIT;condition="not(rn.isNaN())"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom >= 1
===========================================================================
PolyCalc.RatNum.approx():::EXIT;condition="isNaN()"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom == 0
return == Double.NaN
this.numer != this.denom
===========================================================================
PolyCalc.RatNum.approx():::EXIT;condition="not(isNaN())"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom >= 1
===========================================================================
PolyCalc.RatNum.approx():::EXIT;condition="orig(isNaN())"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom == 0
return == Double.NaN
this.numer != this.denom
===========================================================================
PolyCalc.RatNum.approx():::EXIT;condition="not(orig(isNaN()))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom >= 1
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::ENTER
(this.denom == 0)  ==>  (this.denom <= rn.denom)
(this.denom == 0)  ==>  (this.denom is a pointer)
(this.denom == 0)  ==>  (this.numer != this.denom)
rn != null
rn.denom >= 0
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::ENTER;condition="not(denom < 0)"
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::ENTER;condition="(denom == 0)"
this.denom == 0
rn != null
rn.denom >= 0
this.numer != this.denom
this.denom <= rn.denom
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::ENTER;condition="not((denom == 0))"
this.denom >= 1
rn != null
rn.denom >= 0
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::ENTER;condition="(this.denom != 0)&&(this.numer < 0)"
this.numer <= -1
this.denom >= 1
rn != null
rn.denom >= 0
this.numer < this.denom
this.numer < rn.denom
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::ENTER;condition="not((this.denom != 0)&&(this.numer < 0))"
this.denom >= 0
rn != null
rn.denom >= 0
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::ENTER;condition="(this.denom == 0)||(this.numer > 0)"
this.numer != 0
this.denom >= 0
rn != null
rn.denom >= 0
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::ENTER;condition="not((this.denom == 0)||(this.numer > 0))"
this.numer <= 0
this.denom >= 1
rn != null
rn.denom >= 0
this.numer < this.denom
this.numer <= rn.denom
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::EXIT101
(this.numer <= -1)  ==>  (rn.denom != return)
(this.numer <= -1)  ==>  (rn.numer != return)
(this.numer <= -1)  ==>  (this.denom != return)
(this.numer <= -1)  ==>  (this.numer < rn.denom)
(this.numer <= -1)  ==>  (this.numer < this.denom)
(this.numer <= 0)  ==>  (this.numer < rn.denom)
(this.numer <= 0)  ==>  (this.numer < this.denom)
this.denom >= 1
rn.denom >= 1
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::EXIT101;condition="not(denom < 0)"
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::EXIT101;condition="not((denom == 0))"
rn.denom >= 1
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::EXIT101;condition="not(orig((denom == 0)))"
rn.denom >= 1
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::EXIT101;condition="(this.denom != 0)&&(this.numer < 0)"
rn.denom >= 1
rn.numer != return
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::EXIT101;condition="not((this.denom != 0)&&(this.numer < 0))"
this.numer >= 0
this.denom >= 1
rn.denom >= 1
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::EXIT101;condition="orig((this.denom != 0)&&(this.numer < 0))"
rn.denom >= 1
rn.numer != return
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::EXIT101;condition="not(orig((this.denom != 0)&&(this.numer < 0)))"
this.numer >= 0
this.denom >= 1
rn.denom >= 1
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::EXIT101;condition="(this.denom == 0)||(this.numer > 0)"
this.numer >= 1
this.denom >= 1
rn.denom >= 1
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::EXIT101;condition="not((this.denom == 0)||(this.numer > 0))"
rn.denom >= 1
this.numer < rn.denom
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::EXIT101;condition="orig((this.denom == 0)||(this.numer > 0))"
this.numer >= 1
this.denom >= 1
rn.denom >= 1
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::EXIT101;condition="not(orig((this.denom == 0)||(this.numer > 0)))"
rn.denom >= 1
this.numer < rn.denom
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::EXIT101;condition="not(orig(rn.isNaN()))"
rn.denom >= 1
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::EXIT101;condition="not(rn.isNaN())"
rn.denom >= 1
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::EXIT94
this.denom == return
rn.denom == return
return == orig(this.denom)
return == orig(rn.denom)
return == 0
this.numer != return
rn.numer != return
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::EXIT94;condition="not(denom < 0)"
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::EXIT94;condition="(denom == 0)"
this.denom == return
rn.denom == return
return == orig(this.denom)
return == orig(rn.denom)
return == 0
this.numer != return
rn.numer != return
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::EXIT94;condition="orig((denom == 0))"
this.denom == return
rn.denom == return
return == orig(this.denom)
return == orig(rn.denom)
return == 0
this.numer != return
rn.numer != return
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::EXIT94;condition="not((this.denom != 0)&&(this.numer < 0))"
this.denom == return
rn.denom == return
return == orig(this.denom)
return == orig(rn.denom)
return == 0
this.numer != return
rn.numer != return
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::EXIT94;condition="not(orig((this.denom != 0)&&(this.numer < 0)))"
this.denom == return
rn.denom == return
return == orig(this.denom)
return == orig(rn.denom)
return == 0
this.numer != return
rn.numer != return
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::EXIT94;condition="(this.denom == 0)||(this.numer > 0)"
this.denom == return
rn.denom == return
return == orig(this.denom)
return == orig(rn.denom)
return == 0
this.numer != return
rn.numer != return
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::EXIT94;condition="orig((this.denom == 0)||(this.numer > 0))"
this.denom == return
rn.denom == return
return == orig(this.denom)
return == orig(rn.denom)
return == 0
this.numer != return
rn.numer != return
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::EXIT94;condition="orig(rn.isNaN())"
this.denom == return
rn.denom == return
return == orig(this.denom)
return == orig(rn.denom)
return == 0
this.numer != return
rn.numer != return
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::EXIT94;condition="rn.isNaN()"
this.denom == return
rn.denom == return
return == orig(this.denom)
return == orig(rn.denom)
return == 0
this.numer != return
rn.numer != return
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::EXIT96
this.denom == 0
rn.numer >= -1
rn.denom >= 1
return == 1
this.numer != this.denom
this.denom < rn.denom
rn.denom >= return
return == (org.plumelib.util.MathPlume.gcd(rn.numer, rn.denom))
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::EXIT96;condition="not(denom < 0)"
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::EXIT96;condition="(denom == 0)"
rn.numer >= -1
rn.denom >= 1
return == 1
this.denom < rn.denom
return == (org.plumelib.util.MathPlume.gcd(rn.numer, rn.denom))
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::EXIT96;condition="orig((denom == 0))"
rn.numer >= -1
rn.denom >= 1
return == 1
this.denom < rn.denom
return == (org.plumelib.util.MathPlume.gcd(rn.numer, rn.denom))
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::EXIT96;condition="not((this.denom != 0)&&(this.numer < 0))"
this.denom == 0
rn.numer >= -1
rn.denom >= 1
return == 1
this.numer != this.denom
this.denom < rn.denom
rn.denom >= return
return == (org.plumelib.util.MathPlume.gcd(rn.numer, rn.denom))
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::EXIT96;condition="not(orig((this.denom != 0)&&(this.numer < 0)))"
this.denom == 0
rn.numer >= -1
rn.denom >= 1
return == 1
this.numer != this.denom
this.denom < rn.denom
rn.denom >= return
return == (org.plumelib.util.MathPlume.gcd(rn.numer, rn.denom))
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::EXIT96;condition="(this.denom == 0)||(this.numer > 0)"
this.denom == 0
rn.numer >= -1
rn.denom >= 1
return == 1
this.numer != this.denom
this.denom < rn.denom
rn.denom >= return
return == (org.plumelib.util.MathPlume.gcd(rn.numer, rn.denom))
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::EXIT96;condition="orig((this.denom == 0)||(this.numer > 0))"
this.denom == 0
rn.numer >= -1
rn.denom >= 1
return == 1
this.numer != this.denom
this.denom < rn.denom
rn.denom >= return
return == (org.plumelib.util.MathPlume.gcd(rn.numer, rn.denom))
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::EXIT96;condition="orig(rn.isNaN())"
rn.numer >= -1
rn.denom >= 1
return == 1
this.denom < rn.denom
return == (org.plumelib.util.MathPlume.gcd(rn.numer, rn.denom))
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::EXIT96;condition="rn.isNaN()"
rn.numer >= -1
rn.denom >= 1
return == 1
this.denom < rn.denom
return == (org.plumelib.util.MathPlume.gcd(rn.numer, rn.denom))
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::EXIT98
(this.numer <= -1)  <==>  (this.numer < rn.denom)
(this.numer <= -1)  <==>  (this.numer <= return)
(this.numer <= -1)  ==>  (this.numer < this.denom)
(this.numer <= 0)  <==>  (this.numer <= rn.denom)
(this.numer <= 0)  ==>  (this.numer < this.denom)
(this.numer >= 0)  <==>  (this.numer > return)
(this.numer >= 0)  <==>  (this.numer >= rn.denom)
(this.numer >= 1)  <==>  (this.numer > rn.denom)
(this.numer >= 1)  ==>  (this.numer > return)
this.denom >= 1
rn.numer != 0
rn.denom == 0
return == -1
this.denom > rn.denom
this.denom > return
rn.numer != rn.denom
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::EXIT98;condition="not(denom < 0)"
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::EXIT98;condition="not((denom == 0))"
rn.numer != 0
rn.denom == 0
return == -1
this.denom > rn.denom
this.denom > return
rn.numer != rn.denom
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::EXIT98;condition="not(orig((denom == 0)))"
rn.numer != 0
rn.denom == 0
return == -1
this.denom > rn.denom
this.denom > return
rn.numer != rn.denom
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::EXIT98;condition="(this.denom != 0)&&(this.numer < 0)"
rn.numer != 0
rn.denom == 0
return == -1
this.numer <= return
this.denom > rn.denom
this.denom > return
rn.numer != rn.denom
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::EXIT98;condition="not((this.denom != 0)&&(this.numer < 0))"
this.numer >= 0
this.denom >= 1
rn.numer != 0
rn.denom == 0
return == -1
this.numer >= rn.denom
this.numer > return
this.denom > rn.denom
this.denom > return
rn.numer != rn.denom
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::EXIT98;condition="orig((this.denom != 0)&&(this.numer < 0))"
rn.numer != 0
rn.denom == 0
return == -1
this.numer <= return
this.denom > rn.denom
this.denom > return
rn.numer != rn.denom
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::EXIT98;condition="not(orig((this.denom != 0)&&(this.numer < 0)))"
this.numer >= 0
this.denom >= 1
rn.numer != 0
rn.denom == 0
return == -1
this.numer >= rn.denom
this.numer > return
this.denom > rn.denom
this.denom > return
rn.numer != rn.denom
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::EXIT98;condition="(this.denom == 0)||(this.numer > 0)"
this.numer >= 1
this.denom >= 1
rn.numer != 0
rn.denom == 0
return == -1
this.numer > rn.denom
this.numer > return
this.denom > rn.denom
this.denom > return
rn.numer != rn.denom
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::EXIT98;condition="not((this.denom == 0)||(this.numer > 0))"
rn.numer != 0
rn.denom == 0
return == -1
this.denom > rn.denom
this.denom > return
rn.numer != rn.denom
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::EXIT98;condition="orig((this.denom == 0)||(this.numer > 0))"
this.numer >= 1
this.denom >= 1
rn.numer != 0
rn.denom == 0
return == -1
this.numer > rn.denom
this.numer > return
this.denom > rn.denom
this.denom > return
rn.numer != rn.denom
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::EXIT98;condition="not(orig((this.denom == 0)||(this.numer > 0)))"
rn.numer != 0
rn.denom == 0
return == -1
this.denom > rn.denom
this.denom > return
rn.numer != rn.denom
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::EXIT98;condition="not(orig(rn.isNaN()))"
rn.numer != 0
rn.denom == 0
return == -1
this.denom > rn.denom
this.denom > return
rn.numer != rn.denom
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::EXIT98;condition="not(rn.isNaN())"
rn.numer != 0
rn.denom == 0
return == -1
this.denom > rn.denom
this.denom > return
rn.numer != rn.denom
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::EXIT
this.numer == orig(this.numer)
this.denom == orig(this.denom)
rn.numer == orig(rn.numer)
rn.denom == orig(rn.denom)
(this.denom == 0)  ==>  ((return == 0) ==> (rn.denom == 0))
(this.denom == 0)  ==>  ((rn.denom == 0) ==> (return == 0))
(this.denom == 0)  ==>  (return one of { 0, 1 })
(this.denom == 0)  ==>  (rn.denom >= return)
(this.denom == 0)  ==>  (this.denom <= return)
(this.denom == 0)  ==>  (this.denom <= rn.denom)
(this.denom == 0)  ==>  (this.denom is a pointer)
(this.denom == 0)  ==>  (this.numer != this.denom)
rn.denom >= 0
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::EXIT;condition="not(denom < 0)"
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::EXIT;condition="(denom == 0)"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
rn.numer == orig(rn.numer)
rn.denom == orig(rn.denom)
this.denom == 0
rn.denom >= 0
return one of { 0, 1 }
this.numer != this.denom
this.denom <= rn.denom
this.denom <= return
(return == 0) ==> (rn.denom == 0)
(rn.denom == 0) ==> (return == 0)
rn.denom >= return
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::EXIT;condition="not((denom == 0))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
rn.numer == orig(rn.numer)
rn.denom == orig(rn.denom)
this.denom >= 1
rn.denom >= 0
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::EXIT;condition="orig((denom == 0))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
rn.numer == orig(rn.numer)
rn.denom == orig(rn.denom)
this.denom == 0
rn.denom >= 0
return one of { 0, 1 }
orig(rn) != null
this.numer != this.denom
this.denom <= rn.denom
this.denom <= return
(return == 0) ==> (rn.denom == 0)
(rn.denom == 0) ==> (return == 0)
rn.denom >= return
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::EXIT;condition="not(orig((denom == 0)))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
rn.numer == orig(rn.numer)
rn.denom == orig(rn.denom)
this.denom >= 1
rn.denom >= 0
orig(rn) != null
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::EXIT;condition="(this.denom != 0)&&(this.numer < 0)"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
rn.numer == orig(rn.numer)
rn.denom == orig(rn.denom)
this.numer <= -1
this.denom >= 1
rn.denom >= 0
this.numer < this.denom
this.numer < rn.denom
this.denom != return
rn.denom != return
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::EXIT;condition="not((this.denom != 0)&&(this.numer < 0))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
rn.numer == orig(rn.numer)
rn.denom == orig(rn.denom)
this.denom >= 0
rn.denom >= 0
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::EXIT;condition="orig((this.denom != 0)&&(this.numer < 0))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
rn.numer == orig(rn.numer)
rn.denom == orig(rn.denom)
this.numer <= -1
this.denom >= 1
rn.denom >= 0
orig(rn) != null
this.numer < this.denom
this.numer < rn.denom
this.denom != return
rn.denom != return
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::EXIT;condition="not(orig((this.denom != 0)&&(this.numer < 0)))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
rn.numer == orig(rn.numer)
rn.denom == orig(rn.denom)
this.denom >= 0
rn.denom >= 0
orig(rn) != null
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::EXIT;condition="(this.denom == 0)||(this.numer > 0)"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
rn.numer == orig(rn.numer)
rn.denom == orig(rn.denom)
this.numer != 0
this.denom >= 0
rn.denom >= 0
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::EXIT;condition="not((this.denom == 0)||(this.numer > 0))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
rn.numer == orig(rn.numer)
rn.denom == orig(rn.denom)
this.numer <= 0
this.denom >= 1
rn.denom >= 0
this.numer < this.denom
this.numer <= rn.denom
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::EXIT;condition="orig((this.denom == 0)||(this.numer > 0))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
rn.numer == orig(rn.numer)
rn.denom == orig(rn.denom)
this.numer != 0
this.denom >= 0
rn.denom >= 0
orig(rn) != null
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::EXIT;condition="not(orig((this.denom == 0)||(this.numer > 0)))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
rn.numer == orig(rn.numer)
rn.denom == orig(rn.denom)
this.numer <= 0
this.denom >= 1
rn.denom >= 0
orig(rn) != null
this.numer < this.denom
this.numer <= rn.denom
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::EXIT;condition="orig(rn.isNaN())"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
rn.numer == orig(rn.numer)
rn.denom == orig(rn.denom)
this.denom == 0
rn.denom >= 0
return one of { 0, 1 }
orig(rn) != null
this.numer != this.denom
this.denom <= rn.denom
this.denom <= return
(return == 0) ==> (rn.denom == 0)
(rn.denom == 0) ==> (return == 0)
rn.denom >= return
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::EXIT;condition="not(orig(rn.isNaN()))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
rn.numer == orig(rn.numer)
rn.denom == orig(rn.denom)
this.denom >= 1
rn.denom >= 0
orig(rn) != null
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::EXIT;condition="rn.isNaN()"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
rn.numer == orig(rn.numer)
rn.denom == orig(rn.denom)
this.denom == 0
rn.denom >= 0
return one of { 0, 1 }
orig(rn) != null
this.numer != this.denom
this.denom <= rn.denom
this.denom <= return
(return == 0) ==> (rn.denom == 0)
(rn.denom == 0) ==> (return == 0)
rn.denom >= return
===========================================================================
PolyCalc.RatNum.compareTo(PolyCalc.RatNum):::EXIT;condition="not(rn.isNaN())"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
rn.numer == orig(rn.numer)
rn.denom == orig(rn.denom)
this.denom >= 1
rn.denom >= 0
orig(rn) != null
===========================================================================
PolyCalc.RatNum.debugPrint():::ENTER
(this.denom == 0)  ==>  (this has only one value)
(this.denom == 0)  ==>  (this.denom is a pointer)
(this.denom == 0)  ==>  (this.numer == 1)
(this.numer one of { -10, -1 })  ==>  (this.denom == 1)
(this.numer one of { -10, -1 })  ==>  (this.numer < this.denom)
(this.numer one of { -10, -1, 0 })  ==>  (this.denom == 1)
(this.numer one of { -10, -1, 0 })  ==>  (this.numer < this.denom)
===========================================================================
PolyCalc.RatNum.debugPrint():::ENTER;condition="not(denom < 0)"
===========================================================================
PolyCalc.RatNum.debugPrint():::ENTER;condition="(denom == 0)"
this has only one value
this.numer == 1
this.denom == 0
===========================================================================
PolyCalc.RatNum.debugPrint():::ENTER;condition="not((denom == 0))"
this.denom >= 1
===========================================================================
PolyCalc.RatNum.debugPrint():::ENTER;condition="(this.denom != 0)&&(this.numer < 0)"
this.numer one of { -10, -1 }
this.denom == 1
this.numer < this.denom
===========================================================================
PolyCalc.RatNum.debugPrint():::ENTER;condition="not((this.denom != 0)&&(this.numer < 0))"
this.numer >= 0
===========================================================================
PolyCalc.RatNum.debugPrint():::ENTER;condition="(this.denom == 0)||(this.numer > 0)"
this.numer >= 1
===========================================================================
PolyCalc.RatNum.debugPrint():::ENTER;condition="not((this.denom == 0)||(this.numer > 0))"
this.numer one of { -10, -1, 0 }
this.denom == 1
this.numer < this.denom
===========================================================================
PolyCalc.RatNum.debugPrint():::ENTER;condition="rn.isNaN()"
this has only one value
this.numer == 1
this.denom == 0
===========================================================================
PolyCalc.RatNum.debugPrint():::ENTER;condition="not(rn.isNaN())"
this.denom >= 1
===========================================================================
PolyCalc.RatNum.debugPrint():::ENTER;condition="isNaN()"
this has only one value
this.numer == 1
this.denom == 0
===========================================================================
PolyCalc.RatNum.debugPrint():::ENTER;condition="not(isNaN())"
this.denom >= 1
===========================================================================
PolyCalc.RatNum.debugPrint():::ENTER;condition="denom != 1"
this.numer one of { 1, 3 }
this.numer == 1  (mod 2)
this.numer != this.denom
===========================================================================
PolyCalc.RatNum.debugPrint():::ENTER;condition="not(denom != 1)"
this.denom == 1
===========================================================================
PolyCalc.RatNum.debugPrint():::ENTER;condition="arg.isNaN()"
this has only one value
this.numer == 1
this.denom == 0
===========================================================================
PolyCalc.RatNum.debugPrint():::ENTER;condition="not(arg.isNaN())"
this.denom >= 1
===========================================================================
PolyCalc.RatNum.debugPrint():::EXIT
this.numer == orig(this.numer)
this.denom == orig(this.denom)
(this.denom == 0)  ==>  (orig(this) has only one value)
(this.denom == 0)  ==>  (return has only one value)
(this.denom == 0)  ==>  (return.toString == "RatNum<numer:1 denom:0>")
(this.denom == 0)  ==>  (this.denom is a pointer)
(this.denom == 0)  ==>  (this.numer == 1)
(this.numer one of { -10, -1 })  ==>  (return.toString one of { "RatNum<numer:-1 denom:1>", "RatNum<numer:-10 denom:1>" })
(this.numer one of { -10, -1 })  ==>  (this.denom == 1)
(this.numer one of { -10, -1 })  ==>  (this.numer < this.denom)
(this.numer one of { -10, -1, 0 })  ==>  (return.toString one of { "RatNum<numer:-1 denom:1>", "RatNum<numer:-10 denom:1>", "RatNum<numer:0 denom:1>" })
(this.numer one of { -10, -1, 0 })  ==>  (this.denom == 1)
(this.numer one of { -10, -1, 0 })  ==>  (this.numer < this.denom)
return != null
return.toString is printable
===========================================================================
PolyCalc.RatNum.debugPrint():::EXIT;condition="not(denom < 0)"
===========================================================================
PolyCalc.RatNum.debugPrint():::EXIT;condition="(denom == 0)"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.numer == 1
this.denom == 0
return has only one value
return.toString == "RatNum<numer:1 denom:0>"
===========================================================================
PolyCalc.RatNum.debugPrint():::EXIT;condition="not((denom == 0))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom >= 1
return != null
return.toString is printable
===========================================================================
PolyCalc.RatNum.debugPrint():::EXIT;condition="orig((denom == 0))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.numer == 1
this.denom == 0
return has only one value
return.toString == "RatNum<numer:1 denom:0>"
orig(this) has only one value
===========================================================================
PolyCalc.RatNum.debugPrint():::EXIT;condition="not(orig((denom == 0)))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom >= 1
return != null
return.toString is printable
===========================================================================
PolyCalc.RatNum.debugPrint():::EXIT;condition="(this.denom != 0)&&(this.numer < 0)"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.numer one of { -10, -1 }
this.denom == 1
return.toString one of { "RatNum<numer:-1 denom:1>", "RatNum<numer:-10 denom:1>" }
return.toString is printable
this.numer < this.denom
===========================================================================
PolyCalc.RatNum.debugPrint():::EXIT;condition="not((this.denom != 0)&&(this.numer < 0))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.numer >= 0
return != null
return.toString is printable
===========================================================================
PolyCalc.RatNum.debugPrint():::EXIT;condition="orig((this.denom != 0)&&(this.numer < 0))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.numer one of { -10, -1 }
this.denom == 1
return.toString one of { "RatNum<numer:-1 denom:1>", "RatNum<numer:-10 denom:1>" }
return.toString is printable
this.numer < this.denom
===========================================================================
PolyCalc.RatNum.debugPrint():::EXIT;condition="not(orig((this.denom != 0)&&(this.numer < 0)))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.numer >= 0
return != null
return.toString is printable
===========================================================================
PolyCalc.RatNum.debugPrint():::EXIT;condition="(this.denom == 0)||(this.numer > 0)"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.numer >= 1
return != null
return.toString is printable
===========================================================================
PolyCalc.RatNum.debugPrint():::EXIT;condition="not((this.denom == 0)||(this.numer > 0))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.numer one of { -10, -1, 0 }
this.denom == 1
return != null
return.toString one of { "RatNum<numer:-1 denom:1>", "RatNum<numer:-10 denom:1>", "RatNum<numer:0 denom:1>" }
return.toString is printable
this.numer < this.denom
===========================================================================
PolyCalc.RatNum.debugPrint():::EXIT;condition="orig((this.denom == 0)||(this.numer > 0))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.numer >= 1
return != null
return.toString is printable
===========================================================================
PolyCalc.RatNum.debugPrint():::EXIT;condition="not(orig((this.denom == 0)||(this.numer > 0)))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.numer one of { -10, -1, 0 }
this.denom == 1
return != null
return.toString one of { "RatNum<numer:-1 denom:1>", "RatNum<numer:-10 denom:1>", "RatNum<numer:0 denom:1>" }
return.toString is printable
this.numer < this.denom
===========================================================================
PolyCalc.RatNum.debugPrint():::EXIT;condition="orig(rn.isNaN())"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.numer == 1
this.denom == 0
return has only one value
return.toString == "RatNum<numer:1 denom:0>"
orig(this) has only one value
===========================================================================
PolyCalc.RatNum.debugPrint():::EXIT;condition="not(orig(rn.isNaN()))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom >= 1
return != null
return.toString is printable
===========================================================================
PolyCalc.RatNum.debugPrint():::EXIT;condition="rn.isNaN()"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.numer == 1
this.denom == 0
return has only one value
return.toString == "RatNum<numer:1 denom:0>"
===========================================================================
PolyCalc.RatNum.debugPrint():::EXIT;condition="not(rn.isNaN())"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom >= 1
return != null
return.toString is printable
===========================================================================
PolyCalc.RatNum.debugPrint():::EXIT;condition="isNaN()"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.numer == 1
this.denom == 0
return has only one value
return.toString == "RatNum<numer:1 denom:0>"
===========================================================================
PolyCalc.RatNum.debugPrint():::EXIT;condition="not(isNaN())"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom >= 1
return != null
return.toString is printable
===========================================================================
PolyCalc.RatNum.debugPrint():::EXIT;condition="orig(isNaN())"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.numer == 1
this.denom == 0
return has only one value
return.toString == "RatNum<numer:1 denom:0>"
orig(this) has only one value
===========================================================================
PolyCalc.RatNum.debugPrint():::EXIT;condition="not(orig(isNaN()))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom >= 1
return != null
return.toString is printable
===========================================================================
PolyCalc.RatNum.debugPrint():::EXIT;condition="denom != 1"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.numer one of { 1, 3 }
this.numer == 1  (mod 2)
return != null
return.toString is printable
this.numer != this.denom
===========================================================================
PolyCalc.RatNum.debugPrint():::EXIT;condition="not(denom != 1)"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom == 1
return != null
return.toString is printable
===========================================================================
PolyCalc.RatNum.debugPrint():::EXIT;condition="orig(denom != 1)"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.numer one of { 1, 3 }
this.numer == 1  (mod 2)
return != null
return.toString is printable
this.numer != this.denom
===========================================================================
PolyCalc.RatNum.debugPrint():::EXIT;condition="not(orig(denom != 1))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom == 1
return != null
return.toString is printable
===========================================================================
PolyCalc.RatNum.debugPrint():::EXIT;condition="arg.isNaN()"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.numer == 1
this.denom == 0
return has only one value
return.toString == "RatNum<numer:1 denom:0>"
===========================================================================
PolyCalc.RatNum.debugPrint():::EXIT;condition="not(arg.isNaN())"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom >= 1
return != null
return.toString is printable
===========================================================================
PolyCalc.RatNum.debugPrint():::EXIT;condition="orig(arg.isNaN())"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.numer == 1
this.denom == 0
return has only one value
return.toString == "RatNum<numer:1 denom:0>"
orig(this) has only one value
===========================================================================
PolyCalc.RatNum.debugPrint():::EXIT;condition="not(orig(arg.isNaN()))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom >= 1
return != null
return.toString is printable
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::ENTER
(this.denom == 0)  ==>  ((this.numer == 0) ==> (arg.numer == 0))
(this.denom == 0)  ==>  (this.denom <= arg.denom)
(this.denom == 0)  ==>  (this.denom is a pointer)
arg != null
arg.denom >= 0
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::ENTER;condition="not(denom < 0)"
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::ENTER;condition="(denom == 0)"
this.denom == 0
arg != null
arg.denom >= 0
(this.numer == 0) ==> (arg.numer == 0)
this.denom <= arg.denom
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::ENTER;condition="not((denom == 0))"
this.denom >= 1
arg != null
arg.denom >= 0
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::ENTER;condition="(this.denom != 0)&&(this.numer < 0)"
this.numer <= -1
this.denom >= 1
arg != null
arg.numer != 0
arg.denom >= 0
this.numer < this.denom
this.numer < arg.denom
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::ENTER;condition="not((this.denom != 0)&&(this.numer < 0))"
this.denom >= 0
arg != null
arg.denom >= 0
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::ENTER;condition="(this.denom == 0)||(this.numer > 0)"
this.denom >= 0
arg != null
arg.denom >= 0
(this.numer == 0) ==> (this.denom == 0)
(this.numer == 0) ==> (arg.numer == 0)
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::ENTER;condition="not((this.denom == 0)||(this.numer > 0))"
this.numer <= 0
this.denom >= 1
arg != null
arg.denom >= 0
this.numer < this.denom
(arg.numer == 0) ==> (this.numer == 0)
this.numer <= arg.denom
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::ENTER;condition="rn.isNaN()"
this.denom == 0
arg != null
arg.denom >= 0
(this.numer == 0) ==> (arg.numer == 0)
this.denom <= arg.denom
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::ENTER;condition="not(rn.isNaN())"
this.denom >= 1
arg != null
arg.denom >= 0
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::ENTER;condition="isNaN()"
this.denom == 0
arg != null
arg.denom >= 0
(this.numer == 0) ==> (arg.numer == 0)
this.denom <= arg.denom
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::ENTER;condition="not(isNaN())"
this.denom >= 1
arg != null
arg.denom >= 0
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::ENTER;condition="denom != 1"
this.denom >= 0
arg != null
arg.denom >= 0
(this.numer == 0) ==> (this.denom == 0)
(this.numer == 0) ==> (arg.numer == 0)
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::ENTER;condition="not(denom != 1)"
this.denom == 1
arg != null
arg.denom one of { 0, 1, 3 }
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT187
arg.numer == return.numer
arg.denom == return.denom
return == orig(arg)
(this.denom == 0)  <==>  (this.denom == arg.denom)
(this.denom == 0)  ==>  (arg.numer != arg.denom)
(this.denom == 0)  ==>  (this.denom != arg.numer)
(this.denom == 0)  ==>  (this.denom is a pointer)
(this.denom == 0)  ==>  (this.numer != arg.denom)
(this.denom == 0)  ==>  (this.numer != this.denom)
arg.denom == 0
(arg.numer == 0) ==> (this.numer == 0)
this.denom >= arg.denom
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT187;condition="not(denom < 0)"
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT187;condition="(denom == 0)"
this.denom == arg.denom
this.denom == orig(arg.denom)
arg.numer == return.numer
return == orig(arg)
this.numer != this.denom
this.denom != arg.numer
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT187;condition="not((denom == 0))"
arg.numer == return.numer
arg.denom == return.denom
return == orig(arg)
arg.denom == 0
(arg.numer == 0) ==> (this.numer == 0)
this.denom > arg.denom
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT187;condition="orig((denom == 0))"
this.denom == arg.denom
this.denom == orig(arg.denom)
arg.numer == return.numer
return == orig(arg)
this.numer != this.denom
this.denom != arg.numer
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT187;condition="not(orig((denom == 0)))"
arg.numer == return.numer
arg.denom == return.denom
return == orig(arg)
arg.denom == 0
(arg.numer == 0) ==> (this.numer == 0)
this.denom > arg.denom
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT187;condition="(this.denom != 0)&&(this.numer < 0)"
arg.numer == return.numer
arg.denom == return.denom
return == orig(arg)
arg.denom == 0
this.denom > arg.denom
arg.numer != arg.denom
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT187;condition="not((this.denom != 0)&&(this.numer < 0))"
arg.numer == return.numer
arg.denom == return.denom
return == orig(arg)
arg.denom == 0
(arg.numer == 0) ==> (this.numer == 0)
this.denom >= arg.denom
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT187;condition="orig((this.denom != 0)&&(this.numer < 0))"
arg.numer == return.numer
arg.denom == return.denom
return == orig(arg)
arg.denom == 0
this.denom > arg.denom
arg.numer != arg.denom
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT187;condition="not(orig((this.denom != 0)&&(this.numer < 0)))"
arg.numer == return.numer
arg.denom == return.denom
return == orig(arg)
arg.denom == 0
(arg.numer == 0) ==> (this.numer == 0)
this.denom >= arg.denom
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT187;condition="(this.denom == 0)||(this.numer > 0)"
arg.numer == return.numer
arg.denom == return.denom
return == orig(arg)
this.numer != 0
arg.numer != 0
arg.denom == 0
this.numer != arg.denom
this.denom >= arg.denom
arg.numer != arg.denom
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT187;condition="not((this.denom == 0)||(this.numer > 0))"
arg.numer == return.numer
arg.denom == return.denom
return == orig(arg)
arg.denom == 0
this.denom > arg.denom
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT187;condition="orig((this.denom == 0)||(this.numer > 0))"
arg.numer == return.numer
arg.denom == return.denom
return == orig(arg)
this.numer != 0
arg.numer != 0
arg.denom == 0
this.numer != arg.denom
this.denom >= arg.denom
arg.numer != arg.denom
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT187;condition="not(orig((this.denom == 0)||(this.numer > 0)))"
arg.numer == return.numer
arg.denom == return.denom
return == orig(arg)
arg.denom == 0
this.denom > arg.denom
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT187;condition="orig(rn.isNaN())"
this.denom == arg.denom
this.denom == orig(arg.denom)
arg.numer == return.numer
return == orig(arg)
this.numer != this.denom
this.denom != arg.numer
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT187;condition="not(orig(rn.isNaN()))"
arg.numer == return.numer
arg.denom == return.denom
return == orig(arg)
arg.denom == 0
(arg.numer == 0) ==> (this.numer == 0)
this.denom > arg.denom
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT187;condition="rn.isNaN()"
this.denom == arg.denom
this.denom == orig(arg.denom)
arg.numer == return.numer
return == orig(arg)
this.numer != this.denom
this.denom != arg.numer
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT187;condition="not(rn.isNaN())"
arg.numer == return.numer
arg.denom == return.denom
return == orig(arg)
arg.denom == 0
(arg.numer == 0) ==> (this.numer == 0)
this.denom > arg.denom
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT187;condition="isNaN()"
this.denom == arg.denom
this.denom == orig(arg.denom)
arg.numer == return.numer
return == orig(arg)
this.numer != this.denom
this.denom != arg.numer
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT187;condition="not(isNaN())"
arg.numer == return.numer
arg.denom == return.denom
return == orig(arg)
arg.denom == 0
(arg.numer == 0) ==> (this.numer == 0)
this.denom > arg.denom
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT187;condition="orig(isNaN())"
this.denom == arg.denom
this.denom == orig(arg.denom)
arg.numer == return.numer
return == orig(arg)
this.numer != this.denom
this.denom != arg.numer
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT187;condition="not(orig(isNaN()))"
arg.numer == return.numer
arg.denom == return.denom
return == orig(arg)
arg.denom == 0
(arg.numer == 0) ==> (this.numer == 0)
this.denom > arg.denom
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT187;condition="denom != 1"
arg.numer == return.numer
arg.denom == return.denom
return == orig(arg)
this.numer != 0
arg.numer != 0
arg.denom == 0
this.numer != this.denom
this.numer != arg.denom
this.denom >= arg.denom
arg.numer != arg.denom
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT187;condition="not(denom != 1)"
arg.numer == return.numer
arg.denom == return.denom
return == orig(arg)
this.numer <= 2
this.numer >= -1
arg.denom == 0
(arg.numer == 0) ==> (this.numer == 0)
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT187;condition="orig(denom != 1)"
arg.numer == return.numer
arg.denom == return.denom
return == orig(arg)
this.numer != 0
arg.numer != 0
arg.denom == 0
this.numer != this.denom
this.numer != arg.denom
this.denom >= arg.denom
arg.numer != arg.denom
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT187;condition="not(orig(denom != 1))"
arg.numer == return.numer
arg.denom == return.denom
return == orig(arg)
this.numer <= 2
this.numer >= -1
arg.denom == 0
(arg.numer == 0) ==> (this.numer == 0)
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT187;condition="arg.isNaN()"
this.denom == arg.denom
this.denom == orig(arg.denom)
arg.numer == return.numer
return == orig(arg)
this.numer != this.denom
this.denom != arg.numer
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT187;condition="not(arg.isNaN())"
arg.numer == return.numer
arg.denom == return.denom
return == orig(arg)
arg.denom == 0
(arg.numer == 0) ==> (this.numer == 0)
this.denom > arg.denom
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT187;condition="orig(arg.isNaN())"
this.denom == arg.denom
this.denom == orig(arg.denom)
arg.numer == return.numer
return == orig(arg)
this.numer != this.denom
this.denom != arg.numer
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT187;condition="not(orig(arg.isNaN()))"
arg.numer == return.numer
arg.denom == return.denom
return == orig(arg)
arg.denom == 0
(arg.numer == 0) ==> (this.numer == 0)
this.denom > arg.denom
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT189
(this.denom == 0)  ==>  ((return.numer == 0) ==> (arg.numer == 0))
(this.denom == 0)  ==>  ((this.numer == 0) ==> (arg.numer == 0))
(this.denom == 0)  ==>  (arg.denom > return.denom)
(this.denom == 0)  ==>  (arg.denom one of { 1, 2, 7 })
(this.denom == 0)  ==>  (arg.numer >= -1)
(this.denom == 0)  ==>  (return.denom == 0)
(this.denom == 0)  ==>  (return.denom is a pointer)
(this.denom == 0)  ==>  (return.numer % arg.denom == 0)
(this.denom == 0)  ==>  (return.numer == (this.numer * arg.denom))
(this.denom == 0)  ==>  (this.denom < arg.denom)
(this.denom == 0)  ==>  (this.denom == return.denom)
(this.denom == 0)  ==>  (this.denom is a pointer)
(this.denom == 0)  ==>  (this.numer == (return.numer / arg.denom))
arg.denom >= 1
(this.numer == 0) ==> (return.numer == 0)
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT189;condition="not(denom < 0)"
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT189;condition="(denom == 0)"
arg.numer >= -1
arg.denom one of { 1, 2, 7 }
this.denom < arg.denom
return.numer % arg.denom == 0
return.numer == (this.numer * arg.denom)
this.numer == (return.numer / arg.denom)
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT189;condition="not((denom == 0))"
arg.denom >= 1
(this.numer == 0) ==> (return.numer == 0)
(return.denom == 0) ==> (arg.numer == 0)
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT189;condition="orig((denom == 0))"
arg.numer >= -1
arg.denom one of { 1, 2, 7 }
this.denom < arg.denom
return.numer % arg.denom == 0
return.numer == (this.numer * arg.denom)
this.numer == (return.numer / arg.denom)
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT189;condition="not(orig((denom == 0)))"
arg.denom >= 1
(this.numer == 0) ==> (return.numer == 0)
(return.denom == 0) ==> (arg.numer == 0)
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT189;condition="(this.denom != 0)&&(this.numer < 0)"
arg.denom >= 1
return.denom >= 1
arg.numer != return.numer
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT189;condition="not((this.denom != 0)&&(this.numer < 0))"
arg.denom >= 1
(this.numer == 0) ==> (return.numer == 0)
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT189;condition="orig((this.denom != 0)&&(this.numer < 0))"
arg.denom >= 1
return.denom >= 1
arg.numer != return.numer
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT189;condition="not(orig((this.denom != 0)&&(this.numer < 0)))"
arg.denom >= 1
(this.numer == 0) ==> (return.numer == 0)
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT189;condition="(this.denom == 0)||(this.numer > 0)"
arg.denom >= 1
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT189;condition="not((this.denom == 0)||(this.numer > 0))"
arg.denom >= 1
this.numer < arg.denom
(this.numer == 0) ==> (return.numer == 0)
(return.denom == 0) ==> (this.numer == 0)
(return.denom == 0) ==> (arg.numer == 0)
(return.denom == 0) ==> (return.numer == 0)
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT189;condition="orig((this.denom == 0)||(this.numer > 0))"
arg.denom >= 1
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT189;condition="not(orig((this.denom == 0)||(this.numer > 0)))"
arg.denom >= 1
this.numer < arg.denom
(this.numer == 0) ==> (return.numer == 0)
(return.denom == 0) ==> (this.numer == 0)
(return.denom == 0) ==> (arg.numer == 0)
(return.denom == 0) ==> (return.numer == 0)
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT189;condition="orig(rn.isNaN())"
arg.numer >= -1
arg.denom one of { 1, 2, 7 }
this.denom < arg.denom
return.numer % arg.denom == 0
return.numer == (this.numer * arg.denom)
this.numer == (return.numer / arg.denom)
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT189;condition="not(orig(rn.isNaN()))"
arg.denom >= 1
(this.numer == 0) ==> (return.numer == 0)
(return.denom == 0) ==> (arg.numer == 0)
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT189;condition="rn.isNaN()"
arg.numer >= -1
arg.denom one of { 1, 2, 7 }
this.denom < arg.denom
return.numer % arg.denom == 0
return.numer == (this.numer * arg.denom)
this.numer == (return.numer / arg.denom)
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT189;condition="not(rn.isNaN())"
arg.denom >= 1
(this.numer == 0) ==> (return.numer == 0)
(return.denom == 0) ==> (arg.numer == 0)
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT189;condition="isNaN()"
arg.numer >= -1
arg.denom one of { 1, 2, 7 }
this.denom < arg.denom
return.numer % arg.denom == 0
return.numer == (this.numer * arg.denom)
this.numer == (return.numer / arg.denom)
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT189;condition="not(isNaN())"
arg.denom >= 1
(this.numer == 0) ==> (return.numer == 0)
(return.denom == 0) ==> (arg.numer == 0)
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT189;condition="orig(isNaN())"
arg.numer >= -1
arg.denom one of { 1, 2, 7 }
this.denom < arg.denom
return.numer % arg.denom == 0
return.numer == (this.numer * arg.denom)
this.numer == (return.numer / arg.denom)
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT189;condition="not(orig(isNaN()))"
arg.denom >= 1
(this.numer == 0) ==> (return.numer == 0)
(return.denom == 0) ==> (arg.numer == 0)
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT189;condition="denom != 1"
arg.denom >= 1
arg.denom != return.denom
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT189;condition="not(denom != 1)"
arg.denom one of { 1, 3 }
arg.denom == 1  (mod 2)
(this.numer == 0) ==> (return.numer == 0)
this.denom <= arg.denom
(return.denom == 0) ==> (arg.numer == 0)
return.numer % arg.denom == 0
this.denom == (org.plumelib.util.MathPlume.gcd(this.numer, arg.denom))
this.denom == (org.plumelib.util.MathPlume.gcd(arg.numer, arg.denom))
this.denom == (org.plumelib.util.MathPlume.gcd(arg.denom, return.denom))
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT189;condition="orig(denom != 1)"
arg.denom >= 1
arg.denom != return.denom
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT189;condition="not(orig(denom != 1))"
arg.denom one of { 1, 3 }
arg.denom == 1  (mod 2)
(this.numer == 0) ==> (return.numer == 0)
this.denom <= arg.denom
(return.denom == 0) ==> (arg.numer == 0)
return.numer % arg.denom == 0
this.denom == (org.plumelib.util.MathPlume.gcd(this.numer, arg.denom))
this.denom == (org.plumelib.util.MathPlume.gcd(arg.numer, arg.denom))
this.denom == (org.plumelib.util.MathPlume.gcd(arg.denom, return.denom))
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT189;condition="arg.isNaN()"
arg.numer >= -1
arg.denom one of { 1, 2, 7 }
this.denom < arg.denom
return.numer % arg.denom == 0
return.numer == (this.numer * arg.denom)
this.numer == (return.numer / arg.denom)
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT189;condition="not(arg.isNaN())"
arg.denom >= 1
(this.numer == 0) ==> (return.numer == 0)
(return.denom == 0) ==> (arg.numer == 0)
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT189;condition="orig(arg.isNaN())"
arg.numer >= -1
arg.denom one of { 1, 2, 7 }
this.denom < arg.denom
return.numer % arg.denom == 0
return.numer == (this.numer * arg.denom)
this.numer == (return.numer / arg.denom)
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT189;condition="not(orig(arg.isNaN()))"
arg.denom >= 1
(this.numer == 0) ==> (return.numer == 0)
(return.denom == 0) ==> (arg.numer == 0)
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT
this.numer == orig(this.numer)
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
(arg.denom == 0)  ==>  ((arg.numer == 0) ==> (this.numer == 0))
(arg.denom == 0)  ==>  (arg.denom == return.denom)
(arg.denom == 0)  ==>  (arg.denom is a pointer)
(arg.denom == 0)  ==>  (arg.numer == return.numer)
(arg.denom == 0)  ==>  (return == orig(arg))
(arg.denom == 0)  ==>  (return.denom == 0)
(arg.denom == 0)  ==>  (return.denom is a pointer)
(arg.denom == 0)  ==>  (this.denom >= arg.denom)
(arg.denom == 0)  ==>  (this.denom >= return.denom)
(this.denom == 0)  ==>  ((return.numer == 0) ==> (arg.numer == 0))
(this.denom == 0)  ==>  ((this.numer == 0) ==> (arg.numer == 0))
(this.denom == 0)  ==>  ((this.numer == 0) ==> (return.numer == 0))
(this.denom == 0)  ==>  (arg.denom >= return.denom)
(this.denom == 0)  ==>  (return.denom == 0)
(this.denom == 0)  ==>  (return.denom is a pointer)
(this.denom == 0)  ==>  (this.denom <= arg.denom)
(this.denom == 0)  ==>  (this.denom == return.denom)
(this.denom == 0)  ==>  (this.denom is a pointer)
arg.denom >= 0
return != null
return.denom >= 0
(return.numer == 0) ==> (this.numer == 0)
(this.denom == 0) ==> (return.denom == 0)
(arg.numer == 0) ==> (return.denom == 0)
(arg.denom == 0) ==> (return.denom == 0)
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT;condition="not(denom < 0)"
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT;condition="(denom == 0)"
this.numer == orig(this.numer)
this.denom == return.denom
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.denom == 0
arg.denom >= 0
return != null
(this.numer == 0) ==> (arg.numer == 0)
(return.numer == 0) ==> (this.numer == 0)
(this.numer == 0) ==> (return.numer == 0)
this.denom <= arg.denom
(return.numer == 0) ==> (arg.numer == 0)
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT;condition="not((denom == 0))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.denom >= 1
arg.denom >= 0
return != null
return.denom >= 0
(return.numer == 0) ==> (this.numer == 0)
(arg.numer == 0) ==> (return.denom == 0)
(arg.denom == 0) ==> (return.denom == 0)
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT;condition="orig((denom == 0))"
this.numer == orig(this.numer)
this.denom == return.denom
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.denom == 0
arg.denom >= 0
return != null
orig(arg) != null
(this.numer == 0) ==> (arg.numer == 0)
(return.numer == 0) ==> (this.numer == 0)
(this.numer == 0) ==> (return.numer == 0)
this.denom <= arg.denom
(return.numer == 0) ==> (arg.numer == 0)
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT;condition="not(orig((denom == 0)))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.denom >= 1
arg.denom >= 0
return != null
return.denom >= 0
orig(arg) != null
(return.numer == 0) ==> (this.numer == 0)
(arg.numer == 0) ==> (return.denom == 0)
(arg.denom == 0) ==> (return.denom == 0)
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT;condition="(this.denom != 0)&&(this.numer < 0)"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.numer <= -1
this.denom >= 1
arg.numer != 0
arg.denom >= 0
return != null
return.numer != 0
return.denom >= 0
this.numer < this.denom
this.numer < arg.denom
this.numer < return.denom
(arg.denom == 0) ==> (return.denom == 0)
(return.denom == 0) ==> (arg.denom == 0)
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT;condition="not((this.denom != 0)&&(this.numer < 0))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.denom >= 0
arg.denom >= 0
return != null
return.denom >= 0
(return.numer == 0) ==> (this.numer == 0)
(this.denom == 0) ==> (return.denom == 0)
(arg.numer == 0) ==> (return.denom == 0)
(arg.denom == 0) ==> (return.denom == 0)
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT;condition="orig((this.denom != 0)&&(this.numer < 0))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.numer <= -1
this.denom >= 1
arg.numer != 0
arg.denom >= 0
return != null
return.numer != 0
return.denom >= 0
orig(arg) != null
this.numer < this.denom
this.numer < arg.denom
this.numer < return.denom
(arg.denom == 0) ==> (return.denom == 0)
(return.denom == 0) ==> (arg.denom == 0)
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT;condition="not(orig((this.denom != 0)&&(this.numer < 0)))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.denom >= 0
arg.denom >= 0
return != null
return.denom >= 0
orig(arg) != null
(return.numer == 0) ==> (this.numer == 0)
(this.denom == 0) ==> (return.denom == 0)
(arg.numer == 0) ==> (return.denom == 0)
(arg.denom == 0) ==> (return.denom == 0)
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT;condition="(this.denom == 0)||(this.numer > 0)"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.denom >= 0
arg.denom >= 0
return != null
return.denom >= 0
(this.numer == 0) ==> (this.denom == 0)
(this.numer == 0) ==> (arg.numer == 0)
(return.numer == 0) ==> (this.numer == 0)
(this.numer == 0) ==> (return.numer == 0)
(this.numer == 0) ==> (return.denom == 0)
(return.numer == 0) ==> (this.denom == 0)
(this.denom == 0) ==> (return.denom == 0)
(return.numer == 0) ==> (arg.numer == 0)
(arg.numer == 0) ==> (return.denom == 0)
(arg.denom == 0) ==> (return.denom == 0)
(return.numer == 0) ==> (return.denom == 0)
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT;condition="not((this.denom == 0)||(this.numer > 0))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.numer <= 0
this.denom >= 1
arg.denom >= 0
return != null
return.denom >= 0
this.numer < this.denom
(arg.numer == 0) ==> (this.numer == 0)
this.numer <= arg.denom
(return.numer == 0) ==> (this.numer == 0)
this.numer <= return.denom
(arg.numer == 0) ==> (return.numer == 0)
(arg.numer == 0) ==> (return.denom == 0)
(arg.denom == 0) ==> (return.denom == 0)
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT;condition="orig((this.denom == 0)||(this.numer > 0))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.denom >= 0
arg.denom >= 0
return != null
return.denom >= 0
orig(arg) != null
(this.numer == 0) ==> (this.denom == 0)
(this.numer == 0) ==> (arg.numer == 0)
(return.numer == 0) ==> (this.numer == 0)
(this.numer == 0) ==> (return.numer == 0)
(this.numer == 0) ==> (return.denom == 0)
(return.numer == 0) ==> (this.denom == 0)
(this.denom == 0) ==> (return.denom == 0)
(return.numer == 0) ==> (arg.numer == 0)
(arg.numer == 0) ==> (return.denom == 0)
(arg.denom == 0) ==> (return.denom == 0)
(return.numer == 0) ==> (return.denom == 0)
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT;condition="not(orig((this.denom == 0)||(this.numer > 0)))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.numer <= 0
this.denom >= 1
arg.denom >= 0
return != null
return.denom >= 0
orig(arg) != null
this.numer < this.denom
(arg.numer == 0) ==> (this.numer == 0)
this.numer <= arg.denom
(return.numer == 0) ==> (this.numer == 0)
this.numer <= return.denom
(arg.numer == 0) ==> (return.numer == 0)
(arg.numer == 0) ==> (return.denom == 0)
(arg.denom == 0) ==> (return.denom == 0)
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT;condition="orig(rn.isNaN())"
this.numer == orig(this.numer)
this.denom == return.denom
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.denom == 0
arg.denom >= 0
return != null
orig(arg) != null
(this.numer == 0) ==> (arg.numer == 0)
(return.numer == 0) ==> (this.numer == 0)
(this.numer == 0) ==> (return.numer == 0)
this.denom <= arg.denom
(return.numer == 0) ==> (arg.numer == 0)
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT;condition="not(orig(rn.isNaN()))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.denom >= 1
arg.denom >= 0
return != null
return.denom >= 0
orig(arg) != null
(return.numer == 0) ==> (this.numer == 0)
(arg.numer == 0) ==> (return.denom == 0)
(arg.denom == 0) ==> (return.denom == 0)
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT;condition="rn.isNaN()"
this.numer == orig(this.numer)
this.denom == return.denom
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.denom == 0
arg.denom >= 0
return != null
(this.numer == 0) ==> (arg.numer == 0)
(return.numer == 0) ==> (this.numer == 0)
(this.numer == 0) ==> (return.numer == 0)
this.denom <= arg.denom
(return.numer == 0) ==> (arg.numer == 0)
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT;condition="not(rn.isNaN())"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.denom >= 1
arg.denom >= 0
return != null
return.denom >= 0
(return.numer == 0) ==> (this.numer == 0)
(arg.numer == 0) ==> (return.denom == 0)
(arg.denom == 0) ==> (return.denom == 0)
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT;condition="isNaN()"
this.numer == orig(this.numer)
this.denom == return.denom
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.denom == 0
arg.denom >= 0
return != null
(this.numer == 0) ==> (arg.numer == 0)
(return.numer == 0) ==> (this.numer == 0)
(this.numer == 0) ==> (return.numer == 0)
this.denom <= arg.denom
(return.numer == 0) ==> (arg.numer == 0)
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT;condition="not(isNaN())"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.denom >= 1
arg.denom >= 0
return != null
return.denom >= 0
(return.numer == 0) ==> (this.numer == 0)
(arg.numer == 0) ==> (return.denom == 0)
(arg.denom == 0) ==> (return.denom == 0)
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT;condition="orig(isNaN())"
this.numer == orig(this.numer)
this.denom == return.denom
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.denom == 0
arg.denom >= 0
return != null
orig(arg) != null
(this.numer == 0) ==> (arg.numer == 0)
(return.numer == 0) ==> (this.numer == 0)
(this.numer == 0) ==> (return.numer == 0)
this.denom <= arg.denom
(return.numer == 0) ==> (arg.numer == 0)
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT;condition="not(orig(isNaN()))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.denom >= 1
arg.denom >= 0
return != null
return.denom >= 0
orig(arg) != null
(return.numer == 0) ==> (this.numer == 0)
(arg.numer == 0) ==> (return.denom == 0)
(arg.denom == 0) ==> (return.denom == 0)
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT;condition="denom != 1"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.denom >= 0
arg.denom >= 0
return != null
return.denom >= 0
(this.numer == 0) ==> (this.denom == 0)
(this.numer == 0) ==> (arg.numer == 0)
(return.numer == 0) ==> (this.numer == 0)
(this.numer == 0) ==> (return.numer == 0)
(this.numer == 0) ==> (return.denom == 0)
(return.numer == 0) ==> (this.denom == 0)
(this.denom == 0) ==> (return.denom == 0)
(return.numer == 0) ==> (arg.numer == 0)
(arg.numer == 0) ==> (return.denom == 0)
(arg.denom == 0) ==> (return.denom == 0)
(return.numer == 0) ==> (return.denom == 0)
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT;condition="not(denom != 1)"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.denom == 1
arg.denom one of { 0, 1, 3 }
return != null
return.denom >= 0
(return.numer == 0) ==> (this.numer == 0)
(arg.numer == 0) ==> (return.denom == 0)
(arg.denom == 0) ==> (return.denom == 0)
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT;condition="orig(denom != 1)"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.denom >= 0
arg.denom >= 0
return != null
return.denom >= 0
orig(arg) != null
(this.numer == 0) ==> (this.denom == 0)
(this.numer == 0) ==> (arg.numer == 0)
(return.numer == 0) ==> (this.numer == 0)
(this.numer == 0) ==> (return.numer == 0)
(this.numer == 0) ==> (return.denom == 0)
(return.numer == 0) ==> (this.denom == 0)
(this.denom == 0) ==> (return.denom == 0)
(return.numer == 0) ==> (arg.numer == 0)
(arg.numer == 0) ==> (return.denom == 0)
(arg.denom == 0) ==> (return.denom == 0)
(return.numer == 0) ==> (return.denom == 0)
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT;condition="not(orig(denom != 1))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.denom == 1
arg.denom one of { 0, 1, 3 }
return != null
return.denom >= 0
orig(arg) != null
(return.numer == 0) ==> (this.numer == 0)
(arg.numer == 0) ==> (return.denom == 0)
(arg.denom == 0) ==> (return.denom == 0)
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT;condition="arg.isNaN()"
this.numer == orig(this.numer)
this.denom == return.denom
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.denom == 0
arg.denom >= 0
return != null
orig(arg) != null
(this.numer == 0) ==> (arg.numer == 0)
(return.numer == 0) ==> (this.numer == 0)
(this.numer == 0) ==> (return.numer == 0)
this.denom <= arg.denom
(return.numer == 0) ==> (arg.numer == 0)
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT;condition="not(arg.isNaN())"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.denom >= 1
arg.denom >= 0
return != null
return.denom >= 0
orig(arg) != null
(return.numer == 0) ==> (this.numer == 0)
(arg.numer == 0) ==> (return.denom == 0)
(arg.denom == 0) ==> (return.denom == 0)
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT;condition="orig(arg.isNaN())"
this.numer == orig(this.numer)
this.denom == return.denom
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.denom == 0
arg.denom >= 0
return != null
orig(arg) != null
(this.numer == 0) ==> (arg.numer == 0)
(return.numer == 0) ==> (this.numer == 0)
(this.numer == 0) ==> (return.numer == 0)
this.denom <= arg.denom
(return.numer == 0) ==> (arg.numer == 0)
===========================================================================
PolyCalc.RatNum.div(PolyCalc.RatNum):::EXIT;condition="not(orig(arg.isNaN()))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.denom >= 1
arg.denom >= 0
return != null
return.denom >= 0
orig(arg) != null
(return.numer == 0) ==> (this.numer == 0)
(arg.numer == 0) ==> (return.denom == 0)
(arg.denom == 0) ==> (return.denom == 0)
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::ENTER
(this.denom == 0)  ==>  (this.denom is a pointer)
(this.denom == 0)  ==>  (this.numer != 0)
(this.denom == 0)  ==>  (this.numer != this.denom)
obj != null
obj.getClass().getName() == PolyCalc.RatNum.class
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::ENTER;condition="not(denom < 0)"
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::ENTER;condition="(denom == 0)"
this.numer != 0
this.denom == 0
obj != null
obj.getClass().getName() == PolyCalc.RatNum.class
this.numer != this.denom
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::ENTER;condition="not((denom == 0))"
this.denom >= 1
obj != null
obj.getClass().getName() == PolyCalc.RatNum.class
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::ENTER;condition="(this.denom != 0)&&(this.numer < 0)"
this.numer <= -1
this.denom >= 1
obj != null
obj.getClass().getName() == PolyCalc.RatNum.class
this.numer < this.denom
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::ENTER;condition="not((this.denom != 0)&&(this.numer < 0))"
this.denom >= 0
obj != null
obj.getClass().getName() == PolyCalc.RatNum.class
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::ENTER;condition="(this.denom == 0)||(this.numer > 0)"
this.numer != 0
this.denom >= 0
obj != null
obj.getClass().getName() == PolyCalc.RatNum.class
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::ENTER;condition="not((this.denom == 0)||(this.numer > 0))"
this.numer <= 0
this.denom >= 1
obj != null
obj.getClass().getName() == PolyCalc.RatNum.class
this.numer < this.denom
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::ENTER;condition="rn.isNaN()"
this.numer != 0
this.denom == 0
obj != null
obj.getClass().getName() == PolyCalc.RatNum.class
this.numer != this.denom
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::ENTER;condition="not(rn.isNaN())"
this.denom >= 1
obj != null
obj.getClass().getName() == PolyCalc.RatNum.class
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::ENTER;condition="isNaN()"
this.numer != 0
this.denom == 0
obj != null
obj.getClass().getName() == PolyCalc.RatNum.class
this.numer != this.denom
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::ENTER;condition="not(isNaN())"
this.denom >= 1
obj != null
obj.getClass().getName() == PolyCalc.RatNum.class
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::ENTER;condition="denom != 1"
this.numer != 0
this.denom >= 0
obj != null
obj.getClass().getName() == PolyCalc.RatNum.class
this.numer != this.denom
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::ENTER;condition="not(denom != 1)"
this.denom == 1
obj != null
obj.getClass().getName() == PolyCalc.RatNum.class
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::ENTER;condition="arg.isNaN()"
this.numer != 0
this.denom == 0
obj != null
obj.getClass().getName() == PolyCalc.RatNum.class
this.numer != this.denom
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::ENTER;condition="not(arg.isNaN())"
this.denom >= 1
obj != null
obj.getClass().getName() == PolyCalc.RatNum.class
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT230
this.denom == 0
return == true
this.numer != this.denom
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT230;condition="return == true"
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT230;condition="not(denom < 0)"
this.denom == 0
return == true
this.numer != this.denom
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT230;condition="(denom == 0)"
return == true
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT230;condition="orig((denom == 0))"
return == true
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT230;condition="not((this.denom != 0)&&(this.numer < 0))"
this.denom == 0
return == true
this.numer != this.denom
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT230;condition="not(orig((this.denom != 0)&&(this.numer < 0)))"
this.denom == 0
return == true
this.numer != this.denom
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT230;condition="(this.denom == 0)||(this.numer > 0)"
this.denom == 0
return == true
this.numer != this.denom
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT230;condition="orig((this.denom == 0)||(this.numer > 0))"
this.denom == 0
return == true
this.numer != this.denom
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT230;condition="orig(rn.isNaN())"
return == true
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT230;condition="rn.isNaN()"
return == true
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT230;condition="isNaN()"
return == true
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT230;condition="orig(isNaN())"
return == true
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT230;condition="denom != 1"
this.denom == 0
return == true
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT230;condition="orig(denom != 1)"
this.denom == 0
return == true
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT230;condition="arg.isNaN()"
return == true
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT230;condition="orig(arg.isNaN())"
return == true
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT232
(return == true)  ==>  (this.denom >= 1)
(this.denom == 0)  ==>  (return == false)
(this.denom == 0)  ==>  (this.denom is a pointer)
(this.denom == 0)  ==>  (this.numer != 0)
(this.denom == 0)  ==>  (this.numer != this.denom)
(this.denom == 0)  ==>  (this.numer == 1  (mod 2))
(this.denom == 0)  ==>  (this.numer one of { -1, 1 })
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT232;condition="return == true"
this.denom >= 1
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT232;condition="not(return == true)"
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT232;condition="not(denom < 0)"
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT232;condition="(denom == 0)"
this.numer one of { -1, 1 }
this.numer == 1  (mod 2)
return == false
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT232;condition="not((denom == 0))"
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT232;condition="orig((denom == 0))"
this.numer one of { -1, 1 }
this.numer == 1  (mod 2)
return == false
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT232;condition="not(orig((denom == 0)))"
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT232;condition="(this.denom != 0)&&(this.numer < 0)"
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT232;condition="not((this.denom != 0)&&(this.numer < 0))"
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT232;condition="orig((this.denom != 0)&&(this.numer < 0))"
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT232;condition="not(orig((this.denom != 0)&&(this.numer < 0)))"
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT232;condition="(this.denom == 0)||(this.numer > 0)"
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT232;condition="not((this.denom == 0)||(this.numer > 0))"
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT232;condition="orig((this.denom == 0)||(this.numer > 0))"
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT232;condition="not(orig((this.denom == 0)||(this.numer > 0)))"
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT232;condition="orig(rn.isNaN())"
this.numer one of { -1, 1 }
this.numer == 1  (mod 2)
return == false
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT232;condition="not(orig(rn.isNaN()))"
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT232;condition="rn.isNaN()"
this.numer one of { -1, 1 }
this.numer == 1  (mod 2)
return == false
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT232;condition="not(rn.isNaN())"
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT232;condition="isNaN()"
this.numer one of { -1, 1 }
this.numer == 1  (mod 2)
return == false
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT232;condition="not(isNaN())"
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT232;condition="orig(isNaN())"
this.numer one of { -1, 1 }
this.numer == 1  (mod 2)
return == false
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT232;condition="not(orig(isNaN()))"
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT232;condition="denom != 1"
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT232;condition="not(denom != 1)"
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT232;condition="orig(denom != 1)"
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT232;condition="not(orig(denom != 1))"
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT232;condition="arg.isNaN()"
this.numer one of { -1, 1 }
this.numer == 1  (mod 2)
return == false
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT232;condition="not(arg.isNaN())"
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT232;condition="orig(arg.isNaN())"
this.numer one of { -1, 1 }
this.numer == 1  (mod 2)
return == false
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT232;condition="not(orig(arg.isNaN()))"
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT
this.numer == orig(this.numer)
this.denom == orig(this.denom)
(this.denom == 0)  ==>  (this.denom is a pointer)
(this.denom == 0)  ==>  (this.numer != 0)
(this.denom == 0)  ==>  (this.numer != this.denom)
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT;condition="return == true"
return == true
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT;condition="not(return == true)"
return == false
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT;condition="not(denom < 0)"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT;condition="(denom == 0)"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.numer != 0
this.denom == 0
this.numer != this.denom
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT;condition="not((denom == 0))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom >= 1
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT;condition="orig((denom == 0))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.numer != 0
this.denom == 0
orig(obj) != null
orig(obj.getClass().getName()) == PolyCalc.RatNum.class
this.numer != this.denom
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT;condition="not(orig((denom == 0)))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom >= 1
orig(obj) != null
orig(obj.getClass().getName()) == PolyCalc.RatNum.class
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT;condition="(this.denom != 0)&&(this.numer < 0)"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.numer <= -1
this.denom >= 1
this.numer < this.denom
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT;condition="not((this.denom != 0)&&(this.numer < 0))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom >= 0
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT;condition="orig((this.denom != 0)&&(this.numer < 0))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.numer <= -1
this.denom >= 1
orig(obj) != null
orig(obj.getClass().getName()) == PolyCalc.RatNum.class
this.numer < this.denom
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT;condition="not(orig((this.denom != 0)&&(this.numer < 0)))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom >= 0
orig(obj) != null
orig(obj.getClass().getName()) == PolyCalc.RatNum.class
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT;condition="(this.denom == 0)||(this.numer > 0)"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.numer != 0
this.denom >= 0
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT;condition="not((this.denom == 0)||(this.numer > 0))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.numer <= 0
this.denom >= 1
this.numer < this.denom
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT;condition="orig((this.denom == 0)||(this.numer > 0))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.numer != 0
this.denom >= 0
orig(obj) != null
orig(obj.getClass().getName()) == PolyCalc.RatNum.class
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT;condition="not(orig((this.denom == 0)||(this.numer > 0)))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.numer <= 0
this.denom >= 1
orig(obj) != null
orig(obj.getClass().getName()) == PolyCalc.RatNum.class
this.numer < this.denom
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT;condition="orig(rn.isNaN())"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.numer != 0
this.denom == 0
orig(obj) != null
orig(obj.getClass().getName()) == PolyCalc.RatNum.class
this.numer != this.denom
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT;condition="not(orig(rn.isNaN()))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom >= 1
orig(obj) != null
orig(obj.getClass().getName()) == PolyCalc.RatNum.class
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT;condition="rn.isNaN()"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.numer != 0
this.denom == 0
this.numer != this.denom
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT;condition="not(rn.isNaN())"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom >= 1
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT;condition="isNaN()"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.numer != 0
this.denom == 0
this.numer != this.denom
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT;condition="not(isNaN())"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom >= 1
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT;condition="orig(isNaN())"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.numer != 0
this.denom == 0
orig(obj) != null
orig(obj.getClass().getName()) == PolyCalc.RatNum.class
this.numer != this.denom
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT;condition="not(orig(isNaN()))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom >= 1
orig(obj) != null
orig(obj.getClass().getName()) == PolyCalc.RatNum.class
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT;condition="denom != 1"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.numer != 0
this.denom >= 0
this.numer != this.denom
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT;condition="not(denom != 1)"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom == 1
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT;condition="orig(denom != 1)"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.numer != 0
this.denom >= 0
orig(obj) != null
orig(obj.getClass().getName()) == PolyCalc.RatNum.class
this.numer != this.denom
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT;condition="not(orig(denom != 1))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom == 1
orig(obj) != null
orig(obj.getClass().getName()) == PolyCalc.RatNum.class
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT;condition="arg.isNaN()"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.numer != 0
this.denom == 0
this.numer != this.denom
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT;condition="not(arg.isNaN())"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom >= 1
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT;condition="orig(arg.isNaN())"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.numer != 0
this.denom == 0
orig(obj) != null
orig(obj.getClass().getName()) == PolyCalc.RatNum.class
this.numer != this.denom
===========================================================================
PolyCalc.RatNum.equals(java.lang.Object):::EXIT;condition="not(orig(arg.isNaN()))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom >= 1
orig(obj) != null
orig(obj.getClass().getName()) == PolyCalc.RatNum.class
===========================================================================
PolyCalc.RatNum.gcd(int, int):::ENTER
_b != 0
===========================================================================
PolyCalc.RatNum.gcd(int, int):::EXIT209
===========================================================================
PolyCalc.RatNum.gcd(int, int):::EXIT
return != 0
orig(_a) % return == 0
orig(_b) % return == 0
===========================================================================
PolyCalc.RatNum.isNaN():::ENTER
===========================================================================
PolyCalc.RatNum.isNaN():::ENTER;condition="not(denom < 0)"
===========================================================================
PolyCalc.RatNum.isNaN():::EXIT
this.numer == orig(this.numer)
this.denom == orig(this.denom)
(this.denom == 0)  <==>  (return == true)
(this.denom == 0)  ==>  (this.denom is a pointer)
===========================================================================
PolyCalc.RatNum.isNaN():::EXIT;condition="return == true"
this.denom == 0
return == true
===========================================================================
PolyCalc.RatNum.isNaN():::EXIT;condition="not(return == true)"
this.denom >= 1
return == false
===========================================================================
PolyCalc.RatNum.isNaN():::EXIT;condition="not(denom < 0)"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
===========================================================================
PolyCalc.RatNum.isNaN():::EXIT;condition="(denom == 0)"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom == 0
return == true
===========================================================================
PolyCalc.RatNum.isNaN():::EXIT;condition="not((denom == 0))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom >= 1
return == false
===========================================================================
PolyCalc.RatNum.isNaN():::EXIT;condition="orig((denom == 0))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom == 0
return == true
===========================================================================
PolyCalc.RatNum.isNaN():::EXIT;condition="not(orig((denom == 0)))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom >= 1
return == false
===========================================================================
PolyCalc.RatNum.isNegative():::ENTER
(this.denom == 0)  ==>  (this.denom is a pointer)
(this.denom == 0)  ==>  (this.numer != this.denom)
(this.denom == 0)  ==>  (this.numer one of { -1, 1, 100 })
===========================================================================
PolyCalc.RatNum.isNegative():::ENTER;condition="not(denom < 0)"
===========================================================================
PolyCalc.RatNum.isNegative():::ENTER;condition="(denom == 0)"
this.numer one of { -1, 1, 100 }
this.denom == 0
this.numer != this.denom
===========================================================================
PolyCalc.RatNum.isNegative():::ENTER;condition="not((denom == 0))"
this.denom >= 1
===========================================================================
PolyCalc.RatNum.isNegative():::EXIT
this.numer == orig(this.numer)
this.denom == orig(this.denom)
(return == true)  ==>  (this.denom >= 1)
(return == true)  ==>  (this.numer < this.denom)
(return == true)  ==>  (this.numer <= -1)
(this.denom == 0)  ==>  (return == false)
(this.denom == 0)  ==>  (this.denom is a pointer)
(this.denom == 0)  ==>  (this.numer != this.denom)
(this.denom == 0)  ==>  (this.numer one of { -1, 1, 100 })
===========================================================================
PolyCalc.RatNum.isNegative():::EXIT;condition="return == true"
this.numer <= -1
this.denom >= 1
return == true
this.numer < this.denom
===========================================================================
PolyCalc.RatNum.isNegative():::EXIT;condition="not(return == true)"
return == false
===========================================================================
PolyCalc.RatNum.isNegative():::EXIT;condition="not(denom < 0)"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
===========================================================================
PolyCalc.RatNum.isNegative():::EXIT;condition="(denom == 0)"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.numer one of { -1, 1, 100 }
this.denom == 0
return == false
this.numer != this.denom
===========================================================================
PolyCalc.RatNum.isNegative():::EXIT;condition="not((denom == 0))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom >= 1
===========================================================================
PolyCalc.RatNum.isNegative():::EXIT;condition="orig((denom == 0))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.numer one of { -1, 1, 100 }
this.denom == 0
return == false
this.numer != this.denom
===========================================================================
PolyCalc.RatNum.isNegative():::EXIT;condition="not(orig((denom == 0)))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom >= 1
===========================================================================
PolyCalc.RatNum.isNegative():::EXIT;condition="(this.denom != 0)&&(this.numer < 0)"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.numer <= -1
this.denom >= 1
return == true
this.numer < this.denom
===========================================================================
PolyCalc.RatNum.isNegative():::EXIT;condition="not((this.denom != 0)&&(this.numer < 0))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom >= 0
return == false
===========================================================================
PolyCalc.RatNum.isNegative():::EXIT;condition="orig((this.denom != 0)&&(this.numer < 0))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.numer <= -1
this.denom >= 1
return == true
this.numer < this.denom
===========================================================================
PolyCalc.RatNum.isNegative():::EXIT;condition="not(orig((this.denom != 0)&&(this.numer < 0)))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom >= 0
return == false
===========================================================================
PolyCalc.RatNum.isPositive():::ENTER
(this.denom == 0)  ==>  (this.denom is a pointer)
(this.denom == 0)  ==>  (this.numer one of { -1, 1, 100 })
===========================================================================
PolyCalc.RatNum.isPositive():::ENTER;condition="not(denom < 0)"
===========================================================================
PolyCalc.RatNum.isPositive():::ENTER;condition="(denom == 0)"
this.numer one of { -1, 1, 100 }
this.denom == 0
===========================================================================
PolyCalc.RatNum.isPositive():::ENTER;condition="not((denom == 0))"
this.denom >= 1
===========================================================================
PolyCalc.RatNum.isPositive():::ENTER;condition="(this.denom != 0)&&(this.numer < 0)"
this.numer < this.denom
===========================================================================
PolyCalc.RatNum.isPositive():::ENTER;condition="not((this.denom != 0)&&(this.numer < 0))"
this.denom >= 0
===========================================================================
PolyCalc.RatNum.isPositive():::EXIT
this.numer == orig(this.numer)
this.denom == orig(this.denom)
(return == false)  ==>  (this.numer < this.denom)
(return == true)  ==>  (this.numer != 0)
(this.denom == 0)  ==>  (return == true)
(this.denom == 0)  ==>  (this.denom is a pointer)
(this.denom == 0)  ==>  (this.numer one of { -1, 1, 100 })
===========================================================================
PolyCalc.RatNum.isPositive():::EXIT;condition="return == true"
this.numer != 0
return == true
===========================================================================
PolyCalc.RatNum.isPositive():::EXIT;condition="not(return == true)"
return == false
this.numer < this.denom
===========================================================================
PolyCalc.RatNum.isPositive():::EXIT;condition="not(denom < 0)"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
===========================================================================
PolyCalc.RatNum.isPositive():::EXIT;condition="(denom == 0)"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.numer one of { -1, 1, 100 }
this.denom == 0
return == true
===========================================================================
PolyCalc.RatNum.isPositive():::EXIT;condition="not((denom == 0))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom >= 1
===========================================================================
PolyCalc.RatNum.isPositive():::EXIT;condition="orig((denom == 0))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.numer one of { -1, 1, 100 }
this.denom == 0
return == true
===========================================================================
PolyCalc.RatNum.isPositive():::EXIT;condition="not(orig((denom == 0)))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom >= 1
===========================================================================
PolyCalc.RatNum.isPositive():::EXIT;condition="(this.denom != 0)&&(this.numer < 0)"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
return == false
this.numer < this.denom
===========================================================================
PolyCalc.RatNum.isPositive():::EXIT;condition="not((this.denom != 0)&&(this.numer < 0))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom >= 0
===========================================================================
PolyCalc.RatNum.isPositive():::EXIT;condition="orig((this.denom != 0)&&(this.numer < 0))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
return == false
this.numer < this.denom
===========================================================================
PolyCalc.RatNum.isPositive():::EXIT;condition="not(orig((this.denom != 0)&&(this.numer < 0)))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom >= 0
===========================================================================
PolyCalc.RatNum.isPositive():::EXIT;condition="(this.denom == 0)||(this.numer > 0)"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.numer != 0
this.denom >= 0
return == true
===========================================================================
PolyCalc.RatNum.isPositive():::EXIT;condition="not((this.denom == 0)||(this.numer > 0))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
return == false
this.numer < this.denom
===========================================================================
PolyCalc.RatNum.isPositive():::EXIT;condition="orig((this.denom == 0)||(this.numer > 0))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.numer != 0
this.denom >= 0
return == true
===========================================================================
PolyCalc.RatNum.isPositive():::EXIT;condition="not(orig((this.denom == 0)||(this.numer > 0)))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
return == false
this.numer < this.denom
===========================================================================
PolyCalc.RatNum.mul(PolyCalc.RatNum):::ENTER
(this.denom == 0)  ==>  (this.denom <= arg.denom)
(this.denom == 0)  ==>  (this.denom is a pointer)
(this.denom == 0)  ==>  (this.numer != this.denom)
arg != null
arg.denom >= 0
===========================================================================
PolyCalc.RatNum.mul(PolyCalc.RatNum):::ENTER;condition="not(denom < 0)"
===========================================================================
PolyCalc.RatNum.mul(PolyCalc.RatNum):::ENTER;condition="(denom == 0)"
this.denom == 0
arg != null
arg.denom >= 0
this.numer != this.denom
this.denom <= arg.denom
===========================================================================
PolyCalc.RatNum.mul(PolyCalc.RatNum):::ENTER;condition="not((denom == 0))"
this.denom >= 1
arg != null
arg.denom >= 0
===========================================================================
PolyCalc.RatNum.mul(PolyCalc.RatNum):::ENTER;condition="(this.denom != 0)&&(this.numer < 0)"
this.numer <= -1
this.denom >= 1
arg != null
arg.denom >= 0
this.numer < this.denom
this.numer < arg.denom
===========================================================================
PolyCalc.RatNum.mul(PolyCalc.RatNum):::ENTER;condition="not((this.denom != 0)&&(this.numer < 0))"
this.denom >= 0
arg != null
arg.denom >= 0
===========================================================================
PolyCalc.RatNum.mul(PolyCalc.RatNum):::ENTER;condition="(this.denom == 0)||(this.numer > 0)"
this.numer != 0
this.denom >= 0
arg != null
arg.denom >= 0
===========================================================================
PolyCalc.RatNum.mul(PolyCalc.RatNum):::ENTER;condition="not((this.denom == 0)||(this.numer > 0))"
this.numer <= 0
this.denom >= 1
arg != null
arg.denom >= 0
this.numer < this.denom
this.numer <= arg.denom
===========================================================================
PolyCalc.RatNum.mul(PolyCalc.RatNum):::ENTER;condition="rn.isNaN()"
this.denom == 0
arg != null
arg.denom >= 0
this.numer != this.denom
this.denom <= arg.denom
===========================================================================
PolyCalc.RatNum.mul(PolyCalc.RatNum):::ENTER;condition="not(rn.isNaN())"
this.denom >= 1
arg != null
arg.denom >= 0
===========================================================================
PolyCalc.RatNum.mul(PolyCalc.RatNum):::ENTER;condition="isNaN()"
this.denom == 0
arg != null
arg.denom >= 0
this.numer != this.denom
this.denom <= arg.denom
===========================================================================
PolyCalc.RatNum.mul(PolyCalc.RatNum):::ENTER;condition="not(isNaN())"
this.denom >= 1
arg != null
arg.denom >= 0
===========================================================================
PolyCalc.RatNum.mul(PolyCalc.RatNum):::ENTER;condition="denom != 1"
this.numer != 0
this.denom >= 0
arg != null
arg.denom >= 0
this.numer != this.denom
===========================================================================
PolyCalc.RatNum.mul(PolyCalc.RatNum):::ENTER;condition="not(denom != 1)"
this.denom == 1
arg != null
arg.denom >= 0
===========================================================================
PolyCalc.RatNum.mul(PolyCalc.RatNum):::EXIT
this.numer == orig(this.numer)
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
(this.denom == 0)  ==>  ((return.numer == 0) ==> (arg.numer == 0))
(this.denom == 0)  ==>  (arg.denom >= return.denom)
(this.denom == 0)  ==>  (arg.numer == (return.numer / this.numer))
(this.denom == 0)  ==>  (return.denom == 0)
(this.denom == 0)  ==>  (return.denom is a pointer)
(this.denom == 0)  ==>  (return.numer % this.numer == 0)
(this.denom == 0)  ==>  (return.numer == (this.numer * arg.numer))
(this.denom == 0)  ==>  (this.denom <= arg.denom)
(this.denom == 0)  ==>  (this.denom == return.denom)
(this.denom == 0)  ==>  (this.denom is a pointer)
(this.denom == 0)  ==>  (this.numer != return.denom)
(this.denom == 0)  ==>  (this.numer != this.denom)
arg.denom >= 0
return != null
return.denom >= 0
(this.numer == 0) ==> (return.numer == 0)
(this.denom == 0) ==> (return.denom == 0)
(arg.numer == 0) ==> (return.numer == 0)
(arg.denom == 0) ==> (return.denom == 0)
===========================================================================
PolyCalc.RatNum.mul(PolyCalc.RatNum):::EXIT;condition="not(denom < 0)"
===========================================================================
PolyCalc.RatNum.mul(PolyCalc.RatNum):::EXIT;condition="(denom == 0)"
this.numer == orig(this.numer)
this.denom == return.denom
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.denom == 0
arg.denom >= 0
return != null
this.numer != this.denom
return.numer % this.numer == 0
this.denom <= arg.denom
(arg.numer == 0) ==> (return.numer == 0)
(return.numer == 0) ==> (arg.numer == 0)
arg.numer == (return.numer / this.numer)
return.numer == (this.numer * arg.numer)
===========================================================================
PolyCalc.RatNum.mul(PolyCalc.RatNum):::EXIT;condition="not((denom == 0))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.denom >= 1
arg.denom >= 0
return != null
return.denom >= 0
(this.numer == 0) ==> (return.numer == 0)
(arg.numer == 0) ==> (return.numer == 0)
(arg.denom == 0) ==> (return.denom == 0)
(return.denom == 0) ==> (arg.denom == 0)
===========================================================================
PolyCalc.RatNum.mul(PolyCalc.RatNum):::EXIT;condition="orig((denom == 0))"
this.numer == orig(this.numer)
this.denom == return.denom
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.denom == 0
arg.denom >= 0
return != null
orig(arg) != null
this.numer != this.denom
return.numer % this.numer == 0
this.denom <= arg.denom
(arg.numer == 0) ==> (return.numer == 0)
(return.numer == 0) ==> (arg.numer == 0)
arg.numer == (return.numer / this.numer)
return.numer == (this.numer * arg.numer)
===========================================================================
PolyCalc.RatNum.mul(PolyCalc.RatNum):::EXIT;condition="not(orig((denom == 0)))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.denom >= 1
arg.denom >= 0
return != null
return.denom >= 0
orig(arg) != null
(this.numer == 0) ==> (return.numer == 0)
(arg.numer == 0) ==> (return.numer == 0)
(arg.denom == 0) ==> (return.denom == 0)
(return.denom == 0) ==> (arg.denom == 0)
===========================================================================
PolyCalc.RatNum.mul(PolyCalc.RatNum):::EXIT;condition="(this.denom != 0)&&(this.numer < 0)"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.numer <= -1
this.denom >= 1
arg.denom >= 0
return != null
return.denom >= 0
this.numer < this.denom
this.numer < arg.denom
this.numer < return.denom
(arg.numer == 0) ==> (return.numer == 0)
(return.numer == 0) ==> (arg.numer == 0)
(arg.denom == 0) ==> (return.denom == 0)
(return.denom == 0) ==> (arg.denom == 0)
===========================================================================
PolyCalc.RatNum.mul(PolyCalc.RatNum):::EXIT;condition="not((this.denom != 0)&&(this.numer < 0))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.denom >= 0
arg.denom >= 0
return != null
return.denom >= 0
(this.numer == 0) ==> (return.numer == 0)
(this.denom == 0) ==> (return.denom == 0)
(arg.numer == 0) ==> (return.numer == 0)
(arg.denom == 0) ==> (return.denom == 0)
===========================================================================
PolyCalc.RatNum.mul(PolyCalc.RatNum):::EXIT;condition="orig((this.denom != 0)&&(this.numer < 0))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.numer <= -1
this.denom >= 1
arg.denom >= 0
return != null
return.denom >= 0
orig(arg) != null
this.numer < this.denom
this.numer < arg.denom
this.numer < return.denom
(arg.numer == 0) ==> (return.numer == 0)
(return.numer == 0) ==> (arg.numer == 0)
(arg.denom == 0) ==> (return.denom == 0)
(return.denom == 0) ==> (arg.denom == 0)
===========================================================================
PolyCalc.RatNum.mul(PolyCalc.RatNum):::EXIT;condition="not(orig((this.denom != 0)&&(this.numer < 0)))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.denom >= 0
arg.denom >= 0
return != null
return.denom >= 0
orig(arg) != null
(this.numer == 0) ==> (return.numer == 0)
(this.denom == 0) ==> (return.denom == 0)
(arg.numer == 0) ==> (return.numer == 0)
(arg.denom == 0) ==> (return.denom == 0)
===========================================================================
PolyCalc.RatNum.mul(PolyCalc.RatNum):::EXIT;condition="(this.denom == 0)||(this.numer > 0)"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.numer != 0
this.denom >= 0
arg.denom >= 0
return != null
return.denom >= 0
(this.denom == 0) ==> (return.denom == 0)
(arg.numer == 0) ==> (return.numer == 0)
(return.numer == 0) ==> (arg.numer == 0)
(arg.denom == 0) ==> (return.denom == 0)
===========================================================================
PolyCalc.RatNum.mul(PolyCalc.RatNum):::EXIT;condition="not((this.denom == 0)||(this.numer > 0))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.numer <= 0
this.denom >= 1
arg.denom >= 0
return != null
return.denom >= 0
this.numer < this.denom
this.numer <= arg.denom
(this.numer == 0) ==> (return.numer == 0)
this.numer <= return.denom
(arg.numer == 0) ==> (return.numer == 0)
(arg.denom == 0) ==> (return.denom == 0)
(return.denom == 0) ==> (arg.denom == 0)
===========================================================================
PolyCalc.RatNum.mul(PolyCalc.RatNum):::EXIT;condition="orig((this.denom == 0)||(this.numer > 0))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.numer != 0
this.denom >= 0
arg.denom >= 0
return != null
return.denom >= 0
orig(arg) != null
(this.denom == 0) ==> (return.denom == 0)
(arg.numer == 0) ==> (return.numer == 0)
(return.numer == 0) ==> (arg.numer == 0)
(arg.denom == 0) ==> (return.denom == 0)
===========================================================================
PolyCalc.RatNum.mul(PolyCalc.RatNum):::EXIT;condition="not(orig((this.denom == 0)||(this.numer > 0)))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.numer <= 0
this.denom >= 1
arg.denom >= 0
return != null
return.denom >= 0
orig(arg) != null
this.numer < this.denom
this.numer <= arg.denom
(this.numer == 0) ==> (return.numer == 0)
this.numer <= return.denom
(arg.numer == 0) ==> (return.numer == 0)
(arg.denom == 0) ==> (return.denom == 0)
(return.denom == 0) ==> (arg.denom == 0)
===========================================================================
PolyCalc.RatNum.mul(PolyCalc.RatNum):::EXIT;condition="orig(rn.isNaN())"
this.numer == orig(this.numer)
this.denom == return.denom
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.denom == 0
arg.denom >= 0
return != null
orig(arg) != null
this.numer != this.denom
return.numer % this.numer == 0
this.denom <= arg.denom
(arg.numer == 0) ==> (return.numer == 0)
(return.numer == 0) ==> (arg.numer == 0)
arg.numer == (return.numer / this.numer)
return.numer == (this.numer * arg.numer)
===========================================================================
PolyCalc.RatNum.mul(PolyCalc.RatNum):::EXIT;condition="not(orig(rn.isNaN()))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.denom >= 1
arg.denom >= 0
return != null
return.denom >= 0
orig(arg) != null
(this.numer == 0) ==> (return.numer == 0)
(arg.numer == 0) ==> (return.numer == 0)
(arg.denom == 0) ==> (return.denom == 0)
(return.denom == 0) ==> (arg.denom == 0)
===========================================================================
PolyCalc.RatNum.mul(PolyCalc.RatNum):::EXIT;condition="rn.isNaN()"
this.numer == orig(this.numer)
this.denom == return.denom
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.denom == 0
arg.denom >= 0
return != null
this.numer != this.denom
return.numer % this.numer == 0
this.denom <= arg.denom
(arg.numer == 0) ==> (return.numer == 0)
(return.numer == 0) ==> (arg.numer == 0)
arg.numer == (return.numer / this.numer)
return.numer == (this.numer * arg.numer)
===========================================================================
PolyCalc.RatNum.mul(PolyCalc.RatNum):::EXIT;condition="not(rn.isNaN())"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.denom >= 1
arg.denom >= 0
return != null
return.denom >= 0
(this.numer == 0) ==> (return.numer == 0)
(arg.numer == 0) ==> (return.numer == 0)
(arg.denom == 0) ==> (return.denom == 0)
(return.denom == 0) ==> (arg.denom == 0)
===========================================================================
PolyCalc.RatNum.mul(PolyCalc.RatNum):::EXIT;condition="isNaN()"
this.numer == orig(this.numer)
this.denom == return.denom
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.denom == 0
arg.denom >= 0
return != null
this.numer != this.denom
return.numer % this.numer == 0
this.denom <= arg.denom
(arg.numer == 0) ==> (return.numer == 0)
(return.numer == 0) ==> (arg.numer == 0)
arg.numer == (return.numer / this.numer)
return.numer == (this.numer * arg.numer)
===========================================================================
PolyCalc.RatNum.mul(PolyCalc.RatNum):::EXIT;condition="not(isNaN())"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.denom >= 1
arg.denom >= 0
return != null
return.denom >= 0
(this.numer == 0) ==> (return.numer == 0)
(arg.numer == 0) ==> (return.numer == 0)
(arg.denom == 0) ==> (return.denom == 0)
(return.denom == 0) ==> (arg.denom == 0)
===========================================================================
PolyCalc.RatNum.mul(PolyCalc.RatNum):::EXIT;condition="orig(isNaN())"
this.numer == orig(this.numer)
this.denom == return.denom
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.denom == 0
arg.denom >= 0
return != null
orig(arg) != null
this.numer != this.denom
return.numer % this.numer == 0
this.denom <= arg.denom
(arg.numer == 0) ==> (return.numer == 0)
(return.numer == 0) ==> (arg.numer == 0)
arg.numer == (return.numer / this.numer)
return.numer == (this.numer * arg.numer)
===========================================================================
PolyCalc.RatNum.mul(PolyCalc.RatNum):::EXIT;condition="not(orig(isNaN()))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.denom >= 1
arg.denom >= 0
return != null
return.denom >= 0
orig(arg) != null
(this.numer == 0) ==> (return.numer == 0)
(arg.numer == 0) ==> (return.numer == 0)
(arg.denom == 0) ==> (return.denom == 0)
(return.denom == 0) ==> (arg.denom == 0)
===========================================================================
PolyCalc.RatNum.mul(PolyCalc.RatNum):::EXIT;condition="denom != 1"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.numer != 0
this.denom >= 0
arg.denom >= 0
return != null
return.denom >= 0
this.numer != this.denom
(this.denom == 0) ==> (return.denom == 0)
(arg.numer == 0) ==> (return.numer == 0)
(return.numer == 0) ==> (arg.numer == 0)
(arg.denom == 0) ==> (return.denom == 0)
===========================================================================
PolyCalc.RatNum.mul(PolyCalc.RatNum):::EXIT;condition="not(denom != 1)"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.denom == 1
arg.denom >= 0
return != null
return.denom >= 0
(this.numer == 0) ==> (return.numer == 0)
(arg.numer == 0) ==> (return.numer == 0)
(arg.denom == 0) ==> (return.denom == 0)
(return.denom == 0) ==> (arg.denom == 0)
arg.denom >= return.denom
===========================================================================
PolyCalc.RatNum.mul(PolyCalc.RatNum):::EXIT;condition="orig(denom != 1)"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.numer != 0
this.denom >= 0
arg.denom >= 0
return != null
return.denom >= 0
orig(arg) != null
this.numer != this.denom
(this.denom == 0) ==> (return.denom == 0)
(arg.numer == 0) ==> (return.numer == 0)
(return.numer == 0) ==> (arg.numer == 0)
(arg.denom == 0) ==> (return.denom == 0)
===========================================================================
PolyCalc.RatNum.mul(PolyCalc.RatNum):::EXIT;condition="not(orig(denom != 1))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.denom == 1
arg.denom >= 0
return != null
return.denom >= 0
orig(arg) != null
(this.numer == 0) ==> (return.numer == 0)
(arg.numer == 0) ==> (return.numer == 0)
(arg.denom == 0) ==> (return.denom == 0)
(return.denom == 0) ==> (arg.denom == 0)
arg.denom >= return.denom
===========================================================================
PolyCalc.RatNum.negate():::ENTER
(this.denom == 0)  ==>  (this.denom is a pointer)
===========================================================================
PolyCalc.RatNum.negate():::ENTER;condition="not(denom < 0)"
===========================================================================
PolyCalc.RatNum.negate():::ENTER;condition="(denom == 0)"
this.denom == 0
===========================================================================
PolyCalc.RatNum.negate():::ENTER;condition="not((denom == 0))"
this.denom >= 1
===========================================================================
PolyCalc.RatNum.negate():::ENTER;condition="(this.denom != 0)&&(this.numer < 0)"
this.numer <= -1
this.denom >= 1
this.numer < this.denom
===========================================================================
PolyCalc.RatNum.negate():::ENTER;condition="not((this.denom != 0)&&(this.numer < 0))"
this.denom >= 0
===========================================================================
PolyCalc.RatNum.negate():::ENTER;condition="(this.denom == 0)||(this.numer > 0)"
this.denom >= 0
(this.numer == 0) ==> (this.denom == 0)
===========================================================================
PolyCalc.RatNum.negate():::ENTER;condition="not((this.denom == 0)||(this.numer > 0))"
this.numer <= 0
this.denom >= 1
this.numer < this.denom
===========================================================================
PolyCalc.RatNum.negate():::ENTER;condition="rn.isNaN()"
this.denom == 0
===========================================================================
PolyCalc.RatNum.negate():::ENTER;condition="not(rn.isNaN())"
this.denom >= 1
===========================================================================
PolyCalc.RatNum.negate():::ENTER;condition="isNaN()"
this.denom == 0
===========================================================================
PolyCalc.RatNum.negate():::ENTER;condition="not(isNaN())"
this.denom >= 1
===========================================================================
PolyCalc.RatNum.negate():::ENTER;condition="denom != 1"
this.denom >= 0
(this.numer == 0) ==> (this.denom == 0)
===========================================================================
PolyCalc.RatNum.negate():::ENTER;condition="not(denom != 1)"
this.denom == 1
===========================================================================
PolyCalc.RatNum.negate():::EXIT
this.numer == orig(this.numer)
this.denom == return.denom
this.denom == orig(this.denom)
(this.denom == 0)  ==>  (this.denom is a pointer)
return != null
(return.numer == 0) ==> (this.numer == 0)
(this.numer == 0) ==> (return.numer == 0)
this.numer + return.numer == 0
===========================================================================
PolyCalc.RatNum.negate():::EXIT;condition="not(denom < 0)"
===========================================================================
PolyCalc.RatNum.negate():::EXIT;condition="(denom == 0)"
this.numer == orig(this.numer)
this.denom == return.denom
this.denom == orig(this.denom)
this.denom == 0
return != null
(return.numer == 0) ==> (this.numer == 0)
(this.numer == 0) ==> (return.numer == 0)
this.numer + return.numer == 0
===========================================================================
PolyCalc.RatNum.negate():::EXIT;condition="not((denom == 0))"
this.numer == orig(this.numer)
this.denom == return.denom
this.denom == orig(this.denom)
this.denom >= 1
return != null
(return.numer == 0) ==> (this.numer == 0)
(this.numer == 0) ==> (return.numer == 0)
this.numer + return.numer == 0
===========================================================================
PolyCalc.RatNum.negate():::EXIT;condition="orig((denom == 0))"
this.numer == orig(this.numer)
this.denom == return.denom
this.denom == orig(this.denom)
this.denom == 0
return != null
(return.numer == 0) ==> (this.numer == 0)
(this.numer == 0) ==> (return.numer == 0)
this.numer + return.numer == 0
===========================================================================
PolyCalc.RatNum.negate():::EXIT;condition="not(orig((denom == 0)))"
this.numer == orig(this.numer)
this.denom == return.denom
this.denom == orig(this.denom)
this.denom >= 1
return != null
(return.numer == 0) ==> (this.numer == 0)
(this.numer == 0) ==> (return.numer == 0)
this.numer + return.numer == 0
===========================================================================
PolyCalc.RatNum.negate():::EXIT;condition="(this.denom != 0)&&(this.numer < 0)"
this.numer == orig(this.numer)
this.denom == return.denom
this.denom == orig(this.denom)
this.numer <= -1
this.denom >= 1
return != null
return.numer >= 1
this.numer < this.denom
return.numer % this.numer == 0
this.numer % return.numer == 0
this.numer + return.numer == 0
this.numer < return.numer
===========================================================================
PolyCalc.RatNum.negate():::EXIT;condition="not((this.denom != 0)&&(this.numer < 0))"
this.numer == orig(this.numer)
this.denom == return.denom
this.denom == orig(this.denom)
this.denom >= 0
return != null
(return.numer == 0) ==> (this.numer == 0)
(this.numer == 0) ==> (return.numer == 0)
this.numer + return.numer == 0
===========================================================================
PolyCalc.RatNum.negate():::EXIT;condition="orig((this.denom != 0)&&(this.numer < 0))"
this.numer == orig(this.numer)
this.denom == return.denom
this.denom == orig(this.denom)
this.numer <= -1
this.denom >= 1
return != null
return.numer >= 1
this.numer < this.denom
return.numer % this.numer == 0
this.numer % return.numer == 0
this.numer + return.numer == 0
this.numer < return.numer
===========================================================================
PolyCalc.RatNum.negate():::EXIT;condition="not(orig((this.denom != 0)&&(this.numer < 0)))"
this.numer == orig(this.numer)
this.denom == return.denom
this.denom == orig(this.denom)
this.denom >= 0
return != null
(return.numer == 0) ==> (this.numer == 0)
(this.numer == 0) ==> (return.numer == 0)
this.numer + return.numer == 0
===========================================================================
PolyCalc.RatNum.negate():::EXIT;condition="(this.denom == 0)||(this.numer > 0)"
this.numer == orig(this.numer)
this.denom == return.denom
this.denom == orig(this.denom)
this.denom >= 0
return != null
(this.numer == 0) ==> (this.denom == 0)
(return.numer == 0) ==> (this.numer == 0)
(this.numer == 0) ==> (return.numer == 0)
this.numer + return.numer == 0
(return.numer == 0) ==> (this.denom == 0)
===========================================================================
PolyCalc.RatNum.negate():::EXIT;condition="not((this.denom == 0)||(this.numer > 0))"
this.numer == orig(this.numer)
this.denom == return.denom
this.denom == orig(this.denom)
this.numer <= 0
this.denom >= 1
return != null
return.numer >= 0
this.numer < this.denom
(return.numer == 0) ==> (this.numer == 0)
(this.numer == 0) ==> (return.numer == 0)
this.numer + return.numer == 0
this.numer <= return.numer
===========================================================================
PolyCalc.RatNum.negate():::EXIT;condition="orig((this.denom == 0)||(this.numer > 0))"
this.numer == orig(this.numer)
this.denom == return.denom
this.denom == orig(this.denom)
this.denom >= 0
return != null
(this.numer == 0) ==> (this.denom == 0)
(return.numer == 0) ==> (this.numer == 0)
(this.numer == 0) ==> (return.numer == 0)
this.numer + return.numer == 0
(return.numer == 0) ==> (this.denom == 0)
===========================================================================
PolyCalc.RatNum.negate():::EXIT;condition="not(orig((this.denom == 0)||(this.numer > 0)))"
this.numer == orig(this.numer)
this.denom == return.denom
this.denom == orig(this.denom)
this.numer <= 0
this.denom >= 1
return != null
return.numer >= 0
this.numer < this.denom
(return.numer == 0) ==> (this.numer == 0)
(this.numer == 0) ==> (return.numer == 0)
this.numer + return.numer == 0
this.numer <= return.numer
===========================================================================
PolyCalc.RatNum.negate():::EXIT;condition="orig(rn.isNaN())"
this.numer == orig(this.numer)
this.denom == return.denom
this.denom == orig(this.denom)
this.denom == 0
return != null
(return.numer == 0) ==> (this.numer == 0)
(this.numer == 0) ==> (return.numer == 0)
this.numer + return.numer == 0
===========================================================================
PolyCalc.RatNum.negate():::EXIT;condition="not(orig(rn.isNaN()))"
this.numer == orig(this.numer)
this.denom == return.denom
this.denom == orig(this.denom)
this.denom >= 1
return != null
(return.numer == 0) ==> (this.numer == 0)
(this.numer == 0) ==> (return.numer == 0)
this.numer + return.numer == 0
===========================================================================
PolyCalc.RatNum.negate():::EXIT;condition="rn.isNaN()"
this.numer == orig(this.numer)
this.denom == return.denom
this.denom == orig(this.denom)
this.denom == 0
return != null
(return.numer == 0) ==> (this.numer == 0)
(this.numer == 0) ==> (return.numer == 0)
this.numer + return.numer == 0
===========================================================================
PolyCalc.RatNum.negate():::EXIT;condition="not(rn.isNaN())"
this.numer == orig(this.numer)
this.denom == return.denom
this.denom == orig(this.denom)
this.denom >= 1
return != null
(return.numer == 0) ==> (this.numer == 0)
(this.numer == 0) ==> (return.numer == 0)
this.numer + return.numer == 0
===========================================================================
PolyCalc.RatNum.negate():::EXIT;condition="isNaN()"
this.numer == orig(this.numer)
this.denom == return.denom
this.denom == orig(this.denom)
this.denom == 0
return != null
(return.numer == 0) ==> (this.numer == 0)
(this.numer == 0) ==> (return.numer == 0)
this.numer + return.numer == 0
===========================================================================
PolyCalc.RatNum.negate():::EXIT;condition="not(isNaN())"
this.numer == orig(this.numer)
this.denom == return.denom
this.denom == orig(this.denom)
this.denom >= 1
return != null
(return.numer == 0) ==> (this.numer == 0)
(this.numer == 0) ==> (return.numer == 0)
this.numer + return.numer == 0
===========================================================================
PolyCalc.RatNum.negate():::EXIT;condition="orig(isNaN())"
this.numer == orig(this.numer)
this.denom == return.denom
this.denom == orig(this.denom)
this.denom == 0
return != null
(return.numer == 0) ==> (this.numer == 0)
(this.numer == 0) ==> (return.numer == 0)
this.numer + return.numer == 0
===========================================================================
PolyCalc.RatNum.negate():::EXIT;condition="not(orig(isNaN()))"
this.numer == orig(this.numer)
this.denom == return.denom
this.denom == orig(this.denom)
this.denom >= 1
return != null
(return.numer == 0) ==> (this.numer == 0)
(this.numer == 0) ==> (return.numer == 0)
this.numer + return.numer == 0
===========================================================================
PolyCalc.RatNum.negate():::EXIT;condition="denom != 1"
this.numer == orig(this.numer)
this.denom == return.denom
this.denom == orig(this.denom)
this.denom >= 0
return != null
(this.numer == 0) ==> (this.denom == 0)
(return.numer == 0) ==> (this.numer == 0)
(this.numer == 0) ==> (return.numer == 0)
this.numer + return.numer == 0
(return.numer == 0) ==> (this.denom == 0)
===========================================================================
PolyCalc.RatNum.negate():::EXIT;condition="not(denom != 1)"
this.numer == orig(this.numer)
this.denom == return.denom
this.denom == orig(this.denom)
this.denom == 1
return != null
(return.numer == 0) ==> (this.numer == 0)
(this.numer == 0) ==> (return.numer == 0)
this.numer + return.numer == 0
===========================================================================
PolyCalc.RatNum.negate():::EXIT;condition="orig(denom != 1)"
this.numer == orig(this.numer)
this.denom == return.denom
this.denom == orig(this.denom)
this.denom >= 0
return != null
(this.numer == 0) ==> (this.denom == 0)
(return.numer == 0) ==> (this.numer == 0)
(this.numer == 0) ==> (return.numer == 0)
this.numer + return.numer == 0
(return.numer == 0) ==> (this.denom == 0)
===========================================================================
PolyCalc.RatNum.negate():::EXIT;condition="not(orig(denom != 1))"
this.numer == orig(this.numer)
this.denom == return.denom
this.denom == orig(this.denom)
this.denom == 1
return != null
(return.numer == 0) ==> (this.numer == 0)
(this.numer == 0) ==> (return.numer == 0)
this.numer + return.numer == 0
===========================================================================
PolyCalc.RatNum.parse(java.lang.String):::ENTER
ratStr != null
ratStr.toString is printable
===========================================================================
PolyCalc.RatNum.parse(java.lang.String):::EXIT264
ratStr.toString == "NaN"
return.numer == 1
return.denom == 0
orig(ratStr) has only one value
===========================================================================
PolyCalc.RatNum.parse(java.lang.String):::EXIT267
return.denom == 1
===========================================================================
PolyCalc.RatNum.parse(java.lang.String):::EXIT273
===========================================================================
PolyCalc.RatNum.parse(java.lang.String):::EXIT
ratStr.toString == orig(ratStr.toString)
ratStr.toString is printable
return != null
return.denom >= 0
===========================================================================
PolyCalc.RatNum.sub(PolyCalc.RatNum):::ENTER
(this.denom == 0)  ==>  ((this.numer == 0) ==> (arg.denom == 0))
(this.denom == 0)  ==>  (this.denom <= arg.denom)
(this.denom == 0)  ==>  (this.denom is a pointer)
arg != null
arg.denom >= 0
===========================================================================
PolyCalc.RatNum.sub(PolyCalc.RatNum):::ENTER;condition="not(denom < 0)"
===========================================================================
PolyCalc.RatNum.sub(PolyCalc.RatNum):::ENTER;condition="(denom == 0)"
this.denom == 0
arg != null
arg.denom >= 0
(this.numer == 0) ==> (arg.denom == 0)
this.denom <= arg.denom
===========================================================================
PolyCalc.RatNum.sub(PolyCalc.RatNum):::ENTER;condition="not((denom == 0))"
this.denom >= 1
arg != null
arg.denom >= 0
===========================================================================
PolyCalc.RatNum.sub(PolyCalc.RatNum):::ENTER;condition="(this.denom != 0)&&(this.numer < 0)"
this.numer <= -1
this.denom >= 1
arg != null
arg.denom >= 0
this.numer < this.denom
this.numer < arg.denom
===========================================================================
PolyCalc.RatNum.sub(PolyCalc.RatNum):::ENTER;condition="not((this.denom != 0)&&(this.numer < 0))"
this.denom >= 0
arg != null
arg.denom >= 0
===========================================================================
PolyCalc.RatNum.sub(PolyCalc.RatNum):::ENTER;condition="(this.denom == 0)||(this.numer > 0)"
this.denom >= 0
arg != null
arg.denom >= 0
(this.numer == 0) ==> (this.denom == 0)
(this.numer == 0) ==> (arg.denom == 0)
===========================================================================
PolyCalc.RatNum.sub(PolyCalc.RatNum):::ENTER;condition="not((this.denom == 0)||(this.numer > 0))"
this.numer <= 0
this.denom >= 1
arg != null
arg.denom >= 0
this.numer < this.denom
this.numer <= arg.denom
===========================================================================
PolyCalc.RatNum.sub(PolyCalc.RatNum):::ENTER;condition="rn.isNaN()"
this.denom == 0
arg != null
arg.denom >= 0
(this.numer == 0) ==> (arg.denom == 0)
this.denom <= arg.denom
===========================================================================
PolyCalc.RatNum.sub(PolyCalc.RatNum):::ENTER;condition="not(rn.isNaN())"
this.denom >= 1
arg != null
arg.denom >= 0
===========================================================================
PolyCalc.RatNum.sub(PolyCalc.RatNum):::ENTER;condition="isNaN()"
this.denom == 0
arg != null
arg.denom >= 0
(this.numer == 0) ==> (arg.denom == 0)
this.denom <= arg.denom
===========================================================================
PolyCalc.RatNum.sub(PolyCalc.RatNum):::ENTER;condition="not(isNaN())"
this.denom >= 1
arg != null
arg.denom >= 0
===========================================================================
PolyCalc.RatNum.sub(PolyCalc.RatNum):::ENTER;condition="denom != 1"
this.denom >= 0
arg != null
arg.denom >= 0
(this.numer == 0) ==> (this.denom == 0)
(this.numer == 0) ==> (arg.denom == 0)
===========================================================================
PolyCalc.RatNum.sub(PolyCalc.RatNum):::ENTER;condition="not(denom != 1)"
this.denom == 1
arg != null
arg.denom >= 0
===========================================================================
PolyCalc.RatNum.sub(PolyCalc.RatNum):::EXIT
this.numer == orig(this.numer)
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
(this.denom == 0)  ==>  ((arg.denom == 0) ==> (return.numer == 0))
(this.denom == 0)  ==>  ((return.numer == 0) ==> (arg.denom == 0))
(this.denom == 0)  ==>  ((this.numer == 0) ==> (arg.denom == 0))
(this.denom == 0)  ==>  ((this.numer == 0) ==> (return.numer == 0))
(this.denom == 0)  ==>  (arg.denom >= return.denom)
(this.denom == 0)  ==>  (return.denom == 0)
(this.denom == 0)  ==>  (return.denom is a pointer)
(this.denom == 0)  ==>  (return.numer == (this.numer * arg.denom))
(this.denom == 0)  ==>  (this.denom <= arg.denom)
(this.denom == 0)  ==>  (this.denom == return.denom)
(this.denom == 0)  ==>  (this.denom is a pointer)
arg.denom >= 0
return != null
return.denom >= 0
(this.denom == 0) ==> (return.denom == 0)
(arg.denom == 0) ==> (return.denom == 0)
===========================================================================
PolyCalc.RatNum.sub(PolyCalc.RatNum):::EXIT;condition="not(denom < 0)"
===========================================================================
PolyCalc.RatNum.sub(PolyCalc.RatNum):::EXIT;condition="(denom == 0)"
this.numer == orig(this.numer)
this.denom == return.denom
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.denom == 0
arg.denom >= 0
return != null
(this.numer == 0) ==> (arg.denom == 0)
(this.numer == 0) ==> (return.numer == 0)
this.denom <= arg.denom
(arg.denom == 0) ==> (return.numer == 0)
(return.numer == 0) ==> (arg.denom == 0)
return.numer == (this.numer * arg.denom)
===========================================================================
PolyCalc.RatNum.sub(PolyCalc.RatNum):::EXIT;condition="not((denom == 0))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.denom >= 1
arg.denom >= 0
return != null
return.denom >= 0
(arg.denom == 0) ==> (return.denom == 0)
(return.denom == 0) ==> (arg.denom == 0)
===========================================================================
PolyCalc.RatNum.sub(PolyCalc.RatNum):::EXIT;condition="orig((denom == 0))"
this.numer == orig(this.numer)
this.denom == return.denom
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.denom == 0
arg.denom >= 0
return != null
orig(arg) != null
(this.numer == 0) ==> (arg.denom == 0)
(this.numer == 0) ==> (return.numer == 0)
this.denom <= arg.denom
(arg.denom == 0) ==> (return.numer == 0)
(return.numer == 0) ==> (arg.denom == 0)
return.numer == (this.numer * arg.denom)
===========================================================================
PolyCalc.RatNum.sub(PolyCalc.RatNum):::EXIT;condition="not(orig((denom == 0)))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.denom >= 1
arg.denom >= 0
return != null
return.denom >= 0
orig(arg) != null
(arg.denom == 0) ==> (return.denom == 0)
(return.denom == 0) ==> (arg.denom == 0)
===========================================================================
PolyCalc.RatNum.sub(PolyCalc.RatNum):::EXIT;condition="(this.denom != 0)&&(this.numer < 0)"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.numer <= -1
this.denom >= 1
arg.denom >= 0
return != null
return.denom >= 0
this.numer < this.denom
this.numer < arg.denom
this.numer < return.denom
arg.numer != return.numer
arg.denom != return.numer
(arg.denom == 0) ==> (return.denom == 0)
(return.denom == 0) ==> (arg.denom == 0)
return.numer != return.denom
===========================================================================
PolyCalc.RatNum.sub(PolyCalc.RatNum):::EXIT;condition="not((this.denom != 0)&&(this.numer < 0))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.denom >= 0
arg.denom >= 0
return != null
return.denom >= 0
(this.denom == 0) ==> (return.denom == 0)
(arg.denom == 0) ==> (return.denom == 0)
===========================================================================
PolyCalc.RatNum.sub(PolyCalc.RatNum):::EXIT;condition="orig((this.denom != 0)&&(this.numer < 0))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.numer <= -1
this.denom >= 1
arg.denom >= 0
return != null
return.denom >= 0
orig(arg) != null
this.numer < this.denom
this.numer < arg.denom
this.numer < return.denom
arg.numer != return.numer
arg.denom != return.numer
(arg.denom == 0) ==> (return.denom == 0)
(return.denom == 0) ==> (arg.denom == 0)
return.numer != return.denom
===========================================================================
PolyCalc.RatNum.sub(PolyCalc.RatNum):::EXIT;condition="not(orig((this.denom != 0)&&(this.numer < 0)))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.denom >= 0
arg.denom >= 0
return != null
return.denom >= 0
orig(arg) != null
(this.denom == 0) ==> (return.denom == 0)
(arg.denom == 0) ==> (return.denom == 0)
===========================================================================
PolyCalc.RatNum.sub(PolyCalc.RatNum):::EXIT;condition="(this.denom == 0)||(this.numer > 0)"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.denom >= 0
arg.denom >= 0
return != null
return.denom >= 0
(this.numer == 0) ==> (this.denom == 0)
(this.numer == 0) ==> (arg.denom == 0)
(this.numer == 0) ==> (return.numer == 0)
(this.numer == 0) ==> (return.denom == 0)
(this.denom == 0) ==> (return.denom == 0)
(arg.denom == 0) ==> (return.denom == 0)
===========================================================================
PolyCalc.RatNum.sub(PolyCalc.RatNum):::EXIT;condition="not((this.denom == 0)||(this.numer > 0))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.numer <= 0
this.denom >= 1
arg.denom >= 0
return != null
return.denom >= 0
this.numer < this.denom
this.numer <= arg.denom
this.numer <= return.denom
(arg.denom == 0) ==> (return.denom == 0)
(return.denom == 0) ==> (arg.denom == 0)
===========================================================================
PolyCalc.RatNum.sub(PolyCalc.RatNum):::EXIT;condition="orig((this.denom == 0)||(this.numer > 0))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.denom >= 0
arg.denom >= 0
return != null
return.denom >= 0
orig(arg) != null
(this.numer == 0) ==> (this.denom == 0)
(this.numer == 0) ==> (arg.denom == 0)
(this.numer == 0) ==> (return.numer == 0)
(this.numer == 0) ==> (return.denom == 0)
(this.denom == 0) ==> (return.denom == 0)
(arg.denom == 0) ==> (return.denom == 0)
===========================================================================
PolyCalc.RatNum.sub(PolyCalc.RatNum):::EXIT;condition="not(orig((this.denom == 0)||(this.numer > 0)))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.numer <= 0
this.denom >= 1
arg.denom >= 0
return != null
return.denom >= 0
orig(arg) != null
this.numer < this.denom
this.numer <= arg.denom
this.numer <= return.denom
(arg.denom == 0) ==> (return.denom == 0)
(return.denom == 0) ==> (arg.denom == 0)
===========================================================================
PolyCalc.RatNum.sub(PolyCalc.RatNum):::EXIT;condition="orig(rn.isNaN())"
this.numer == orig(this.numer)
this.denom == return.denom
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.denom == 0
arg.denom >= 0
return != null
orig(arg) != null
(this.numer == 0) ==> (arg.denom == 0)
(this.numer == 0) ==> (return.numer == 0)
this.denom <= arg.denom
(arg.denom == 0) ==> (return.numer == 0)
(return.numer == 0) ==> (arg.denom == 0)
return.numer == (this.numer * arg.denom)
===========================================================================
PolyCalc.RatNum.sub(PolyCalc.RatNum):::EXIT;condition="not(orig(rn.isNaN()))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.denom >= 1
arg.denom >= 0
return != null
return.denom >= 0
orig(arg) != null
(arg.denom == 0) ==> (return.denom == 0)
(return.denom == 0) ==> (arg.denom == 0)
===========================================================================
PolyCalc.RatNum.sub(PolyCalc.RatNum):::EXIT;condition="rn.isNaN()"
this.numer == orig(this.numer)
this.denom == return.denom
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.denom == 0
arg.denom >= 0
return != null
(this.numer == 0) ==> (arg.denom == 0)
(this.numer == 0) ==> (return.numer == 0)
this.denom <= arg.denom
(arg.denom == 0) ==> (return.numer == 0)
(return.numer == 0) ==> (arg.denom == 0)
return.numer == (this.numer * arg.denom)
===========================================================================
PolyCalc.RatNum.sub(PolyCalc.RatNum):::EXIT;condition="not(rn.isNaN())"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.denom >= 1
arg.denom >= 0
return != null
return.denom >= 0
(arg.denom == 0) ==> (return.denom == 0)
(return.denom == 0) ==> (arg.denom == 0)
===========================================================================
PolyCalc.RatNum.sub(PolyCalc.RatNum):::EXIT;condition="isNaN()"
this.numer == orig(this.numer)
this.denom == return.denom
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.denom == 0
arg.denom >= 0
return != null
(this.numer == 0) ==> (arg.denom == 0)
(this.numer == 0) ==> (return.numer == 0)
this.denom <= arg.denom
(arg.denom == 0) ==> (return.numer == 0)
(return.numer == 0) ==> (arg.denom == 0)
return.numer == (this.numer * arg.denom)
===========================================================================
PolyCalc.RatNum.sub(PolyCalc.RatNum):::EXIT;condition="not(isNaN())"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.denom >= 1
arg.denom >= 0
return != null
return.denom >= 0
(arg.denom == 0) ==> (return.denom == 0)
(return.denom == 0) ==> (arg.denom == 0)
===========================================================================
PolyCalc.RatNum.sub(PolyCalc.RatNum):::EXIT;condition="orig(isNaN())"
this.numer == orig(this.numer)
this.denom == return.denom
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.denom == 0
arg.denom >= 0
return != null
orig(arg) != null
(this.numer == 0) ==> (arg.denom == 0)
(this.numer == 0) ==> (return.numer == 0)
this.denom <= arg.denom
(arg.denom == 0) ==> (return.numer == 0)
(return.numer == 0) ==> (arg.denom == 0)
return.numer == (this.numer * arg.denom)
===========================================================================
PolyCalc.RatNum.sub(PolyCalc.RatNum):::EXIT;condition="not(orig(isNaN()))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.denom >= 1
arg.denom >= 0
return != null
return.denom >= 0
orig(arg) != null
(arg.denom == 0) ==> (return.denom == 0)
(return.denom == 0) ==> (arg.denom == 0)
===========================================================================
PolyCalc.RatNum.sub(PolyCalc.RatNum):::EXIT;condition="denom != 1"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.denom >= 0
arg.denom >= 0
return != null
return.denom >= 0
(this.numer == 0) ==> (this.denom == 0)
(this.numer == 0) ==> (arg.denom == 0)
(this.numer == 0) ==> (return.numer == 0)
(this.numer == 0) ==> (return.denom == 0)
(this.denom == 0) ==> (return.denom == 0)
(arg.denom == 0) ==> (return.denom == 0)
===========================================================================
PolyCalc.RatNum.sub(PolyCalc.RatNum):::EXIT;condition="not(denom != 1)"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == return.denom
arg.denom == orig(arg.denom)
this.denom == 1
arg.denom >= 0
return != null
===========================================================================
PolyCalc.RatNum.sub(PolyCalc.RatNum):::EXIT;condition="orig(denom != 1)"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == orig(arg.denom)
this.denom >= 0
arg.denom >= 0
return != null
return.denom >= 0
orig(arg) != null
(this.numer == 0) ==> (this.denom == 0)
(this.numer == 0) ==> (arg.denom == 0)
(this.numer == 0) ==> (return.numer == 0)
(this.numer == 0) ==> (return.denom == 0)
(this.denom == 0) ==> (return.denom == 0)
(arg.denom == 0) ==> (return.denom == 0)
===========================================================================
PolyCalc.RatNum.sub(PolyCalc.RatNum):::EXIT;condition="not(orig(denom != 1))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
arg.numer == orig(arg.numer)
arg.denom == return.denom
arg.denom == orig(arg.denom)
this.denom == 1
arg.denom >= 0
return != null
orig(arg) != null
===========================================================================
PolyCalc.RatNum.toString():::ENTER
(this.denom == 0)  ==>  (this has only one value)
(this.denom == 0)  ==>  (this.denom is a pointer)
(this.denom == 0)  ==>  (this.numer == 1)
(this.numer one of { -10, -1 })  ==>  (this.denom == 1)
(this.numer one of { -10, -1, 0 })  ==>  (this.denom == 1)
===========================================================================
PolyCalc.RatNum.toString():::ENTER;condition="not(denom < 0)"
===========================================================================
PolyCalc.RatNum.toString():::ENTER;condition="(denom == 0)"
this has only one value
this.numer == 1
this.denom == 0
===========================================================================
PolyCalc.RatNum.toString():::ENTER;condition="not((denom == 0))"
this.denom >= 1
===========================================================================
PolyCalc.RatNum.toString():::ENTER;condition="(this.denom != 0)&&(this.numer < 0)"
this.numer one of { -10, -1 }
this.denom == 1
===========================================================================
PolyCalc.RatNum.toString():::ENTER;condition="not((this.denom != 0)&&(this.numer < 0))"
this.numer >= 0
===========================================================================
PolyCalc.RatNum.toString():::ENTER;condition="(this.denom == 0)||(this.numer > 0)"
this.numer >= 1
===========================================================================
PolyCalc.RatNum.toString():::ENTER;condition="not((this.denom == 0)||(this.numer > 0))"
this.numer one of { -10, -1, 0 }
this.denom == 1
===========================================================================
PolyCalc.RatNum.toString():::ENTER;condition="rn.isNaN()"
this has only one value
this.numer == 1
this.denom == 0
===========================================================================
PolyCalc.RatNum.toString():::ENTER;condition="not(rn.isNaN())"
this.denom >= 1
===========================================================================
PolyCalc.RatNum.toString():::ENTER;condition="isNaN()"
this has only one value
this.numer == 1
this.denom == 0
===========================================================================
PolyCalc.RatNum.toString():::ENTER;condition="not(isNaN())"
this.denom >= 1
===========================================================================
PolyCalc.RatNum.toString():::ENTER;condition="denom != 1"
this.numer one of { 1, 3 }
this.numer == 1  (mod 2)
===========================================================================
PolyCalc.RatNum.toString():::ENTER;condition="not(denom != 1)"
this.denom == 1
===========================================================================
PolyCalc.RatNum.toString():::ENTER;condition="arg.isNaN()"
this has only one value
this.numer == 1
this.denom == 0
===========================================================================
PolyCalc.RatNum.toString():::ENTER;condition="not(arg.isNaN())"
this.denom >= 1
===========================================================================
PolyCalc.RatNum.toString():::EXIT
this.numer == orig(this.numer)
this.denom == orig(this.denom)
(this.denom == 0)  ==>  (orig(this) has only one value)
(this.denom == 0)  ==>  (return has only one value)
(this.denom == 0)  ==>  (return.toString == "RatNum<numer:1 denom:0>")
(this.denom == 0)  ==>  (this.denom is a pointer)
(this.denom == 0)  ==>  (this.numer == 1)
(this.numer one of { -10, -1 })  ==>  (return.toString one of { "RatNum<numer:-1 denom:1>", "RatNum<numer:-10 denom:1>" })
(this.numer one of { -10, -1 })  ==>  (this.denom == 1)
(this.numer one of { -10, -1, 0 })  ==>  (return.toString one of { "RatNum<numer:-1 denom:1>", "RatNum<numer:-10 denom:1>", "RatNum<numer:0 denom:1>" })
(this.numer one of { -10, -1, 0 })  ==>  (this.denom == 1)
return != null
return.toString is printable
===========================================================================
PolyCalc.RatNum.toString():::EXIT;condition="not(denom < 0)"
===========================================================================
PolyCalc.RatNum.toString():::EXIT;condition="(denom == 0)"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.numer == 1
this.denom == 0
return has only one value
return.toString == "RatNum<numer:1 denom:0>"
===========================================================================
PolyCalc.RatNum.toString():::EXIT;condition="not((denom == 0))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom >= 1
return != null
return.toString is printable
===========================================================================
PolyCalc.RatNum.toString():::EXIT;condition="orig((denom == 0))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.numer == 1
this.denom == 0
return has only one value
return.toString == "RatNum<numer:1 denom:0>"
orig(this) has only one value
===========================================================================
PolyCalc.RatNum.toString():::EXIT;condition="not(orig((denom == 0)))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom >= 1
return != null
return.toString is printable
===========================================================================
PolyCalc.RatNum.toString():::EXIT;condition="(this.denom != 0)&&(this.numer < 0)"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.numer one of { -10, -1 }
this.denom == 1
return.toString one of { "RatNum<numer:-1 denom:1>", "RatNum<numer:-10 denom:1>" }
return.toString is printable
===========================================================================
PolyCalc.RatNum.toString():::EXIT;condition="not((this.denom != 0)&&(this.numer < 0))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.numer >= 0
return != null
return.toString is printable
===========================================================================
PolyCalc.RatNum.toString():::EXIT;condition="orig((this.denom != 0)&&(this.numer < 0))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.numer one of { -10, -1 }
this.denom == 1
return.toString one of { "RatNum<numer:-1 denom:1>", "RatNum<numer:-10 denom:1>" }
return.toString is printable
===========================================================================
PolyCalc.RatNum.toString():::EXIT;condition="not(orig((this.denom != 0)&&(this.numer < 0)))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.numer >= 0
return != null
return.toString is printable
===========================================================================
PolyCalc.RatNum.toString():::EXIT;condition="(this.denom == 0)||(this.numer > 0)"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.numer >= 1
return != null
return.toString is printable
===========================================================================
PolyCalc.RatNum.toString():::EXIT;condition="not((this.denom == 0)||(this.numer > 0))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.numer one of { -10, -1, 0 }
this.denom == 1
return != null
return.toString one of { "RatNum<numer:-1 denom:1>", "RatNum<numer:-10 denom:1>", "RatNum<numer:0 denom:1>" }
return.toString is printable
===========================================================================
PolyCalc.RatNum.toString():::EXIT;condition="orig((this.denom == 0)||(this.numer > 0))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.numer >= 1
return != null
return.toString is printable
===========================================================================
PolyCalc.RatNum.toString():::EXIT;condition="not(orig((this.denom == 0)||(this.numer > 0)))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.numer one of { -10, -1, 0 }
this.denom == 1
return != null
return.toString one of { "RatNum<numer:-1 denom:1>", "RatNum<numer:-10 denom:1>", "RatNum<numer:0 denom:1>" }
return.toString is printable
===========================================================================
PolyCalc.RatNum.toString():::EXIT;condition="orig(rn.isNaN())"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.numer == 1
this.denom == 0
return has only one value
return.toString == "RatNum<numer:1 denom:0>"
orig(this) has only one value
===========================================================================
PolyCalc.RatNum.toString():::EXIT;condition="not(orig(rn.isNaN()))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom >= 1
return != null
return.toString is printable
===========================================================================
PolyCalc.RatNum.toString():::EXIT;condition="rn.isNaN()"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.numer == 1
this.denom == 0
return has only one value
return.toString == "RatNum<numer:1 denom:0>"
===========================================================================
PolyCalc.RatNum.toString():::EXIT;condition="not(rn.isNaN())"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom >= 1
return != null
return.toString is printable
===========================================================================
PolyCalc.RatNum.toString():::EXIT;condition="isNaN()"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.numer == 1
this.denom == 0
return has only one value
return.toString == "RatNum<numer:1 denom:0>"
===========================================================================
PolyCalc.RatNum.toString():::EXIT;condition="not(isNaN())"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom >= 1
return != null
return.toString is printable
===========================================================================
PolyCalc.RatNum.toString():::EXIT;condition="orig(isNaN())"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.numer == 1
this.denom == 0
return has only one value
return.toString == "RatNum<numer:1 denom:0>"
orig(this) has only one value
===========================================================================
PolyCalc.RatNum.toString():::EXIT;condition="not(orig(isNaN()))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom >= 1
return != null
return.toString is printable
===========================================================================
PolyCalc.RatNum.toString():::EXIT;condition="denom != 1"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.numer one of { 1, 3 }
this.numer == 1  (mod 2)
return != null
return.toString is printable
===========================================================================
PolyCalc.RatNum.toString():::EXIT;condition="not(denom != 1)"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom == 1
return != null
return.toString is printable
===========================================================================
PolyCalc.RatNum.toString():::EXIT;condition="orig(denom != 1)"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.numer one of { 1, 3 }
this.numer == 1  (mod 2)
return != null
return.toString is printable
===========================================================================
PolyCalc.RatNum.toString():::EXIT;condition="not(orig(denom != 1))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom == 1
return != null
return.toString is printable
===========================================================================
PolyCalc.RatNum.toString():::EXIT;condition="arg.isNaN()"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.numer == 1
this.denom == 0
return has only one value
return.toString == "RatNum<numer:1 denom:0>"
===========================================================================
PolyCalc.RatNum.toString():::EXIT;condition="not(arg.isNaN())"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom >= 1
return != null
return.toString is printable
===========================================================================
PolyCalc.RatNum.toString():::EXIT;condition="orig(arg.isNaN())"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.numer == 1
this.denom == 0
return has only one value
return.toString == "RatNum<numer:1 denom:0>"
orig(this) has only one value
===========================================================================
PolyCalc.RatNum.toString():::EXIT;condition="not(orig(arg.isNaN()))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom >= 1
return != null
return.toString is printable
===========================================================================
PolyCalc.RatNum.unparse():::ENTER
(this.denom == 0)  ==>  (this.denom is a pointer)
===========================================================================
PolyCalc.RatNum.unparse():::ENTER;condition="not(denom < 0)"
===========================================================================
PolyCalc.RatNum.unparse():::ENTER;condition="(denom == 0)"
this.denom == 0
===========================================================================
PolyCalc.RatNum.unparse():::ENTER;condition="not((denom == 0))"
this.denom >= 1
===========================================================================
PolyCalc.RatNum.unparse():::ENTER;condition="(this.denom != 0)&&(this.numer < 0)"
this.numer <= -1
this.denom >= 1
this.numer < this.denom
===========================================================================
PolyCalc.RatNum.unparse():::ENTER;condition="not((this.denom != 0)&&(this.numer < 0))"
this.denom >= 0
===========================================================================
PolyCalc.RatNum.unparse():::ENTER;condition="(this.denom == 0)||(this.numer > 0)"
this.denom >= 0
(this.numer == 0) ==> (this.denom == 0)
===========================================================================
PolyCalc.RatNum.unparse():::ENTER;condition="not((this.denom == 0)||(this.numer > 0))"
this.numer <= 0
this.denom >= 1
this.numer < this.denom
===========================================================================
PolyCalc.RatNum.unparse():::ENTER;condition="rn.isNaN()"
this.denom == 0
===========================================================================
PolyCalc.RatNum.unparse():::ENTER;condition="not(rn.isNaN())"
this.denom >= 1
===========================================================================
PolyCalc.RatNum.unparse():::ENTER;condition="isNaN()"
this.denom == 0
===========================================================================
PolyCalc.RatNum.unparse():::ENTER;condition="not(isNaN())"
this.denom >= 1
===========================================================================
PolyCalc.RatNum.unparse():::EXIT133
this.denom == 0
return has only one value
return.toString == "NaN"
===========================================================================
PolyCalc.RatNum.unparse():::EXIT133;condition="not(denom < 0)"
===========================================================================
PolyCalc.RatNum.unparse():::EXIT133;condition="(denom == 0)"
===========================================================================
PolyCalc.RatNum.unparse():::EXIT133;condition="orig((denom == 0))"
===========================================================================
PolyCalc.RatNum.unparse():::EXIT133;condition="not((this.denom != 0)&&(this.numer < 0))"
this.denom == 0
return has only one value
return.toString == "NaN"
===========================================================================
PolyCalc.RatNum.unparse():::EXIT133;condition="not(orig((this.denom != 0)&&(this.numer < 0)))"
this.denom == 0
return has only one value
return.toString == "NaN"
===========================================================================
PolyCalc.RatNum.unparse():::EXIT133;condition="(this.denom == 0)||(this.numer > 0)"
this.denom == 0
return has only one value
return.toString == "NaN"
===========================================================================
PolyCalc.RatNum.unparse():::EXIT133;condition="orig((this.denom == 0)||(this.numer > 0))"
this.denom == 0
return has only one value
return.toString == "NaN"
===========================================================================
PolyCalc.RatNum.unparse():::EXIT133;condition="orig(rn.isNaN())"
===========================================================================
PolyCalc.RatNum.unparse():::EXIT133;condition="rn.isNaN()"
===========================================================================
PolyCalc.RatNum.unparse():::EXIT133;condition="isNaN()"
===========================================================================
PolyCalc.RatNum.unparse():::EXIT133;condition="orig(isNaN())"
===========================================================================
PolyCalc.RatNum.unparse():::EXIT133;condition="denom != 1"
this.denom == 0
return has only one value
return.toString == "NaN"
===========================================================================
PolyCalc.RatNum.unparse():::EXIT133;condition="orig(denom != 1)"
this.denom == 0
return has only one value
return.toString == "NaN"
===========================================================================
PolyCalc.RatNum.unparse():::EXIT135
(this.numer <= -1)  ==>  (this.numer < this.denom)
this.numer != 0
this.denom >= 2
this.numer != this.denom
===========================================================================
PolyCalc.RatNum.unparse():::EXIT135;condition="not(denom < 0)"
===========================================================================
PolyCalc.RatNum.unparse():::EXIT135;condition="not((denom == 0))"
this.numer != 0
this.denom >= 2
this.numer != this.denom
===========================================================================
PolyCalc.RatNum.unparse():::EXIT135;condition="not(orig((denom == 0)))"
this.numer != 0
this.denom >= 2
this.numer != this.denom
===========================================================================
PolyCalc.RatNum.unparse():::EXIT135;condition="(this.denom != 0)&&(this.numer < 0)"
this.denom >= 2
===========================================================================
PolyCalc.RatNum.unparse():::EXIT135;condition="not((this.denom != 0)&&(this.numer < 0))"
this.numer >= 1
this.denom >= 2
this.numer != this.denom
===========================================================================
PolyCalc.RatNum.unparse():::EXIT135;condition="orig((this.denom != 0)&&(this.numer < 0))"
this.denom >= 2
===========================================================================
PolyCalc.RatNum.unparse():::EXIT135;condition="not(orig((this.denom != 0)&&(this.numer < 0)))"
this.numer >= 1
this.denom >= 2
this.numer != this.denom
===========================================================================
PolyCalc.RatNum.unparse():::EXIT135;condition="(this.denom == 0)||(this.numer > 0)"
this.numer >= 1
this.denom >= 2
this.numer != this.denom
===========================================================================
PolyCalc.RatNum.unparse():::EXIT135;condition="not((this.denom == 0)||(this.numer > 0))"
this.numer <= -1
this.denom >= 2
===========================================================================
PolyCalc.RatNum.unparse():::EXIT135;condition="orig((this.denom == 0)||(this.numer > 0))"
this.numer >= 1
this.denom >= 2
this.numer != this.denom
===========================================================================
PolyCalc.RatNum.unparse():::EXIT135;condition="not(orig((this.denom == 0)||(this.numer > 0)))"
this.numer <= -1
this.denom >= 2
===========================================================================
PolyCalc.RatNum.unparse():::EXIT135;condition="not(orig(rn.isNaN()))"
this.numer != 0
this.denom >= 2
this.numer != this.denom
===========================================================================
PolyCalc.RatNum.unparse():::EXIT135;condition="not(rn.isNaN())"
this.numer != 0
this.denom >= 2
this.numer != this.denom
===========================================================================
PolyCalc.RatNum.unparse():::EXIT135;condition="not(isNaN())"
this.numer != 0
this.denom >= 2
this.numer != this.denom
===========================================================================
PolyCalc.RatNum.unparse():::EXIT135;condition="not(orig(isNaN()))"
this.numer != 0
this.denom >= 2
this.numer != this.denom
===========================================================================
PolyCalc.RatNum.unparse():::EXIT135;condition="denom != 1"
this.numer != 0
this.denom >= 2
this.numer != this.denom
===========================================================================
PolyCalc.RatNum.unparse():::EXIT135;condition="orig(denom != 1)"
this.numer != 0
this.denom >= 2
this.numer != this.denom
===========================================================================
PolyCalc.RatNum.unparse():::EXIT137
(this.numer >= 1)  <==>  (this.numer >= this.denom)
this.denom == 1
===========================================================================
PolyCalc.RatNum.unparse():::EXIT137;condition="not(denom < 0)"
===========================================================================
PolyCalc.RatNum.unparse():::EXIT137;condition="not((denom == 0))"
this.denom == 1
===========================================================================
PolyCalc.RatNum.unparse():::EXIT137;condition="not(orig((denom == 0)))"
this.denom == 1
===========================================================================
PolyCalc.RatNum.unparse():::EXIT137;condition="(this.denom != 0)&&(this.numer < 0)"
this.denom == 1
===========================================================================
PolyCalc.RatNum.unparse():::EXIT137;condition="not((this.denom != 0)&&(this.numer < 0))"
this.numer >= 0
this.denom == 1
===========================================================================
PolyCalc.RatNum.unparse():::EXIT137;condition="orig((this.denom != 0)&&(this.numer < 0))"
this.denom == 1
===========================================================================
PolyCalc.RatNum.unparse():::EXIT137;condition="not(orig((this.denom != 0)&&(this.numer < 0)))"
this.numer >= 0
this.denom == 1
===========================================================================
PolyCalc.RatNum.unparse():::EXIT137;condition="(this.denom == 0)||(this.numer > 0)"
this.numer >= 1
this.denom == 1
this.numer >= this.denom
===========================================================================
PolyCalc.RatNum.unparse():::EXIT137;condition="not((this.denom == 0)||(this.numer > 0))"
this.denom == 1
===========================================================================
PolyCalc.RatNum.unparse():::EXIT137;condition="orig((this.denom == 0)||(this.numer > 0))"
this.numer >= 1
this.denom == 1
this.numer >= this.denom
===========================================================================
PolyCalc.RatNum.unparse():::EXIT137;condition="not(orig((this.denom == 0)||(this.numer > 0)))"
this.denom == 1
===========================================================================
PolyCalc.RatNum.unparse():::EXIT137;condition="not(orig(rn.isNaN()))"
this.denom == 1
===========================================================================
PolyCalc.RatNum.unparse():::EXIT137;condition="not(rn.isNaN())"
this.denom == 1
===========================================================================
PolyCalc.RatNum.unparse():::EXIT137;condition="not(isNaN())"
this.denom == 1
===========================================================================
PolyCalc.RatNum.unparse():::EXIT137;condition="not(orig(isNaN()))"
this.denom == 1
===========================================================================
PolyCalc.RatNum.unparse():::EXIT137;condition="not(denom != 1)"
===========================================================================
PolyCalc.RatNum.unparse():::EXIT137;condition="not(orig(denom != 1))"
===========================================================================
PolyCalc.RatNum.unparse():::EXIT
this.numer == orig(this.numer)
this.denom == orig(this.denom)
(this.denom == 0)  ==>  (return has only one value)
(this.denom == 0)  ==>  (return.toString == "NaN")
(this.denom == 0)  ==>  (this.denom is a pointer)
return != null
return.toString is printable
===========================================================================
PolyCalc.RatNum.unparse():::EXIT;condition="not(denom < 0)"
===========================================================================
PolyCalc.RatNum.unparse():::EXIT;condition="(denom == 0)"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom == 0
return has only one value
return != null
return.toString == "NaN"
===========================================================================
PolyCalc.RatNum.unparse():::EXIT;condition="not((denom == 0))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom >= 1
return != null
return.toString is printable
===========================================================================
PolyCalc.RatNum.unparse():::EXIT;condition="orig((denom == 0))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom == 0
return has only one value
return != null
return.toString == "NaN"
===========================================================================
PolyCalc.RatNum.unparse():::EXIT;condition="not(orig((denom == 0)))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom >= 1
return != null
return.toString is printable
===========================================================================
PolyCalc.RatNum.unparse():::EXIT;condition="(this.denom != 0)&&(this.numer < 0)"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.numer <= -1
this.denom >= 1
return != null
return.toString is printable
this.numer < this.denom
===========================================================================
PolyCalc.RatNum.unparse():::EXIT;condition="not((this.denom != 0)&&(this.numer < 0))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom >= 0
return != null
return.toString is printable
===========================================================================
PolyCalc.RatNum.unparse():::EXIT;condition="orig((this.denom != 0)&&(this.numer < 0))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.numer <= -1
this.denom >= 1
return != null
return.toString is printable
this.numer < this.denom
===========================================================================
PolyCalc.RatNum.unparse():::EXIT;condition="not(orig((this.denom != 0)&&(this.numer < 0)))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom >= 0
return != null
return.toString is printable
===========================================================================
PolyCalc.RatNum.unparse():::EXIT;condition="(this.denom == 0)||(this.numer > 0)"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom >= 0
return != null
return.toString is printable
(this.numer == 0) ==> (this.denom == 0)
===========================================================================
PolyCalc.RatNum.unparse():::EXIT;condition="not((this.denom == 0)||(this.numer > 0))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.numer <= 0
this.denom >= 1
return != null
return.toString is printable
this.numer < this.denom
===========================================================================
PolyCalc.RatNum.unparse():::EXIT;condition="orig((this.denom == 0)||(this.numer > 0))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom >= 0
return != null
return.toString is printable
(this.numer == 0) ==> (this.denom == 0)
===========================================================================
PolyCalc.RatNum.unparse():::EXIT;condition="not(orig((this.denom == 0)||(this.numer > 0)))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.numer <= 0
this.denom >= 1
return != null
return.toString is printable
this.numer < this.denom
===========================================================================
PolyCalc.RatNum.unparse():::EXIT;condition="orig(rn.isNaN())"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom == 0
return has only one value
return != null
return.toString == "NaN"
===========================================================================
PolyCalc.RatNum.unparse():::EXIT;condition="not(orig(rn.isNaN()))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom >= 1
return != null
return.toString is printable
===========================================================================
PolyCalc.RatNum.unparse():::EXIT;condition="rn.isNaN()"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom == 0
return has only one value
return != null
return.toString == "NaN"
===========================================================================
PolyCalc.RatNum.unparse():::EXIT;condition="not(rn.isNaN())"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom >= 1
return != null
return.toString is printable
===========================================================================
PolyCalc.RatNum.unparse():::EXIT;condition="isNaN()"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom == 0
return has only one value
return != null
return.toString == "NaN"
===========================================================================
PolyCalc.RatNum.unparse():::EXIT;condition="not(isNaN())"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom >= 1
return != null
return.toString is printable
===========================================================================
PolyCalc.RatNum.unparse():::EXIT;condition="orig(isNaN())"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom == 0
return has only one value
return != null
return.toString == "NaN"
===========================================================================
PolyCalc.RatNum.unparse():::EXIT;condition="not(orig(isNaN()))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom >= 1
return != null
return.toString is printable
===========================================================================
PolyCalc.RatNum.unparse():::EXIT;condition="denom != 1"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom >= 0
return != null
return.toString is printable
(this.numer == 0) ==> (this.denom == 0)
===========================================================================
PolyCalc.RatNum.unparse():::EXIT;condition="not(denom != 1)"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom == 1
return != null
return.toString is printable
===========================================================================
PolyCalc.RatNum.unparse():::EXIT;condition="orig(denom != 1)"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom >= 0
return != null
return.toString is printable
(this.numer == 0) ==> (this.denom == 0)
===========================================================================
PolyCalc.RatNum.unparse():::EXIT;condition="not(orig(denom != 1))"
this.numer == orig(this.numer)
this.denom == orig(this.denom)
this.denom == 1
return != null
return.toString is printable
