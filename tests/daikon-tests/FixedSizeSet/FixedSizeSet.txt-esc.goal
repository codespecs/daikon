===========================================================================
six170.FixedSizeSet:::OBJECT
    Variables: this this.bits this.bits[] size(this.bits[]) size(this.bits[])-1
this.bits != null
this.bits.length == 8
===========================================================================
six170.FixedSizeSet.FixedSizeSet():::EXIT
    Variables: this this.bits this.bits[] size(this.bits[]) size(this.bits[])-1
warning: method daikon.inv.unary.sequence.OneOfSequence.format(OutputFormat:ESC/Java) needs to be implemented: this.bits[] == [0, 0, 0, 0, 0, 0, 0, 0]
(\forall int i; (0 <= i && i <= this.bits.length-1) ==> (this.bits[i] == false))
===========================================================================
six170.FixedSizeSet.add(int):::ENTER
    Variables: this this.bits this.bits[] n size(this.bits[]) size(this.bits[])-1 this.bits[n] this.bits[n-1] this.bits[n..] this.bits[n+1..] this.bits[0..n] this.bits[0..n-1]
n >= 0
(n & this.bits.length) == 0
n <= this.bits.length-1
this.bits.length-1 == (n | this.bits.length-1)
===========================================================================
six170.FixedSizeSet.add(int):::EXIT
    Variables: this this.bits this.bits[] n orig(this) orig(this.bits) orig(this.bits[]) orig(n) size(this.bits[]) size(this.bits[])-1 orig(size(this.bits[])) orig(size(this.bits[]))-1 this.bits[n] this.bits[n-1] this.bits[n..] this.bits[n+1..] this.bits[0..n] this.bits[0..n-1] this.bits[orig(n)] this.bits[orig(n)-1] this.bits[orig(n)..] this.bits[orig(n)+1..] this.bits[0..orig(n)] this.bits[0..orig(n)-1] orig(this.bits[post(n)]) orig(this.bits[post(n)-1]) orig(this.bits[post(n)..]) orig(this.bits[post(n)+1..]) orig(this.bits[0..post(n)]) orig(this.bits[0..post(n)-1]) orig(this.bits[n]) orig(this.bits[n-1]) orig(this.bits[n..]) orig(this.bits[n+1..]) orig(this.bits[0..n]) orig(this.bits[0..n-1])
      Modified variables: this.bits[]
      Modified primitive arguments: this.bits[n] this.bits[n-1] this.bits[n..] this.bits[0..n]
      Unmodified variables: this this.bits n size(this.bits[]) this.bits[n+1..] this.bits[0..n-1]
modifies this.bits[*]
warning: method daikon.inv.binary.twoSequence.SeqSeqIntEqual.format(OutputFormat:ESC/Java) needs to be implemented: this.bits[orig(n)+1..] == orig(this.bits[post(n)+1..])
warning: method daikon.inv.binary.twoSequence.SeqSeqIntEqual.format(OutputFormat:ESC/Java) needs to be implemented: this.bits[orig(n)+1..] == orig(this.bits[n+1..])
warning: method daikon.inv.binary.twoSequence.SeqSeqIntEqual.format(OutputFormat:ESC/Java) needs to be implemented: this.bits[0..orig(n)-1] == orig(this.bits[0..post(n)-1])
warning: method daikon.inv.binary.twoSequence.SeqSeqIntEqual.format(OutputFormat:ESC/Java) needs to be implemented: this.bits[0..orig(n)-1] == orig(this.bits[0..n-1])
this.bits[\old(n)] == true
(\old(n) & this.bits.length) == 0
\old(n) <= this.bits.length-1
this.bits.length-1 == (\old(n) | this.bits.length-1)
===========================================================================
six170.FixedSizeSet.contains(int):::ENTER
    Variables: this this.bits this.bits[] n size(this.bits[]) size(this.bits[])-1 this.bits[n] this.bits[n-1] this.bits[n..] this.bits[n+1..] this.bits[0..n] this.bits[0..n-1]
n >= 0
(n & this.bits.length) == 0
n <= this.bits.length-1
this.bits.length-1 == (n | this.bits.length-1)
===========================================================================
six170.FixedSizeSet.contains(int):::EXIT
    Variables: this this.bits this.bits[] n return orig(this) orig(this.bits) orig(this.bits[]) orig(n) size(this.bits[]) size(this.bits[])-1 orig(size(this.bits[])) orig(size(this.bits[]))-1 this.bits[n] this.bits[n-1] this.bits[n..] this.bits[n+1..] this.bits[0..n] this.bits[0..n-1] this.bits[orig(n)] this.bits[orig(n)-1] this.bits[orig(n)..] this.bits[orig(n)+1..] this.bits[0..orig(n)] this.bits[0..orig(n)-1] orig(this.bits[post(n)]) orig(this.bits[post(n)-1]) orig(this.bits[post(n)..]) orig(this.bits[post(n)+1..]) orig(this.bits[0..post(n)]) orig(this.bits[0..post(n)-1]) orig(this.bits[n]) orig(this.bits[n-1]) orig(this.bits[n..]) orig(this.bits[n+1..]) orig(this.bits[0..n]) orig(this.bits[0..n-1])
      Modified primitive arguments: this.bits[n-1]
      Unmodified variables: this this.bits this.bits[] n size(this.bits[]) this.bits[n] this.bits[n..] this.bits[n+1..] this.bits[0..n] this.bits[0..n-1]
\result == this.bits[\old(n)]
\result == \old(this.bits[\new(n)])
\result == \old(this.bits[n])
(\result == true)  ==>  (\old(this) != null)
(\result == true)  ==>  (this.bits != null)
(\old(n) & this.bits.length) == 0
\old(n) <= this.bits.length-1
this.bits.length-1 == (\old(n) | this.bits.length-1)
===========================================================================
six170.FixedSizeSet.intersect(six170.FixedSizeSet):::ENTER
    Variables: this this.bits this.bits[] other other.bits other.bits[] size(this.bits[]) size(this.bits[])-1 size(other.bits[]) size(other.bits[])-1
other != null
other.bits != null
other.bits.length == 8
===========================================================================
six170.FixedSizeSet.intersect(six170.FixedSizeSet):::EXIT
    Variables: this this.bits this.bits[] other other.bits other.bits[] orig(this) orig(this.bits) orig(this.bits[]) orig(other) orig(other.bits) orig(other.bits[]) size(this.bits[]) size(this.bits[])-1 size(other.bits[]) size(other.bits[])-1 orig(size(this.bits[])) orig(size(this.bits[]))-1 orig(size(other.bits[])) orig(size(other.bits[]))-1
      Modified variables: this.bits[]
      Unmodified variables: this this.bits other other.bits other.bits[] size(this.bits[]) size(other.bits[])
modifies this.bits[*]
other.bits != null
other.bits.length == 8
warning: method daikon.inv.binary.twoSequence.SubSet.format_esc() needs to be implemented: this.bits[] is a subset of orig(this.bits[])
===========================================================================
six170.FixedSizeSet.remove(int):::ENTER
    Variables: this this.bits this.bits[] n size(this.bits[]) size(this.bits[])-1 this.bits[n] this.bits[n-1] this.bits[n..] this.bits[n+1..] this.bits[0..n] this.bits[0..n-1]
this != null
this.bits != null
n >= 0
(n & this.bits.length) == 0
n <= this.bits.length-1
this.bits.length-1 == (n | this.bits.length-1)
===========================================================================
six170.FixedSizeSet.remove(int):::EXIT
    Variables: this this.bits this.bits[] n orig(this) orig(this.bits) orig(this.bits[]) orig(n) size(this.bits[]) size(this.bits[])-1 orig(size(this.bits[])) orig(size(this.bits[]))-1 this.bits[n] this.bits[n-1] this.bits[n..] this.bits[n+1..] this.bits[0..n] this.bits[0..n-1] this.bits[orig(n)] this.bits[orig(n)-1] this.bits[orig(n)..] this.bits[orig(n)+1..] this.bits[0..orig(n)] this.bits[0..orig(n)-1] orig(this.bits[post(n)]) orig(this.bits[post(n)-1]) orig(this.bits[post(n)..]) orig(this.bits[post(n)+1..]) orig(this.bits[0..post(n)]) orig(this.bits[0..post(n)-1]) orig(this.bits[n]) orig(this.bits[n-1]) orig(this.bits[n..]) orig(this.bits[n+1..]) orig(this.bits[0..n]) orig(this.bits[0..n-1])
      Modified variables: this.bits[]
      Modified primitive arguments: this.bits[n] this.bits[n-1] this.bits[n..] this.bits[0..n]
      Unmodified variables: this this.bits n size(this.bits[]) this.bits[n+1..] this.bits[0..n-1]
modifies this.bits[*]
warning: method daikon.inv.binary.twoSequence.SeqSeqIntEqual.format(OutputFormat:ESC/Java) needs to be implemented: this.bits[orig(n)+1..] == orig(this.bits[post(n)+1..])
warning: method daikon.inv.binary.twoSequence.SeqSeqIntEqual.format(OutputFormat:ESC/Java) needs to be implemented: this.bits[orig(n)+1..] == orig(this.bits[n+1..])
warning: method daikon.inv.binary.twoSequence.SeqSeqIntEqual.format(OutputFormat:ESC/Java) needs to be implemented: this.bits[0..orig(n)-1] == orig(this.bits[0..post(n)-1])
warning: method daikon.inv.binary.twoSequence.SeqSeqIntEqual.format(OutputFormat:ESC/Java) needs to be implemented: this.bits[0..orig(n)-1] == orig(this.bits[0..n-1])
this.bits != null
this.bits[\old(n)] == false
(\old(n) & this.bits.length) == 0
\old(n) <= this.bits.length-1
this.bits.length-1 == (\old(n) | this.bits.length-1)
===========================================================================
six170.FixedSizeSet.union(six170.FixedSizeSet):::ENTER
    Variables: this this.bits this.bits[] other other.bits other.bits[] size(this.bits[]) size(this.bits[])-1 size(other.bits[]) size(other.bits[])-1
other != null
other.bits != null
other.bits.length == 8
===========================================================================
six170.FixedSizeSet.union(six170.FixedSizeSet):::EXIT
    Variables: this this.bits this.bits[] other other.bits other.bits[] orig(this) orig(this.bits) orig(this.bits[]) orig(other) orig(other.bits) orig(other.bits[]) size(this.bits[]) size(this.bits[])-1 size(other.bits[]) size(other.bits[])-1 orig(size(this.bits[])) orig(size(this.bits[]))-1 orig(size(other.bits[])) orig(size(other.bits[]))-1
      Modified variables: this.bits[]
      Unmodified variables: this this.bits other other.bits other.bits[] size(this.bits[]) size(other.bits[])
modifies this.bits[*]
other.bits != null
other.bits.length == 8
warning: method daikon.inv.binary.twoSequence.SubSet.format_esc() needs to be implemented: this.bits[] is a subset of orig(this.bits[])
