package six170;

// Taken from 6.170 Recitation 5, Spring 2001
// Author: Jeremy Nimmer
// Change from a bitwise rep to a boolean array

/**
 * A FixedSizeSet is a mutable set of integers drawn from the range [0..7]
 * @specfield elements : subset of { n : integer | 0 <= n <= 7 }
 */
public class FixedSizeSet {

  /*@ invariant this.bits != null; */
  /*@ invariant daikon.Quant.size(this.bits) == 8; */
  /*@ spec_public */ private boolean[] bits;

  /*@
  @ public normal_behavior // Generated by Daikon
  @ ensures daikon.Quant.eltsEqual(this.bits, false);
  @*/
  // Rep Invariant:
  //   bits != null && bits.length == 8

  // Abstraction Function:  a = AF(t)
  //   a.elements = { n | bits[n] }

  /**
   * @effects Creates a new, empty FixedSizeSet (this.elements_post = {})
   */
  public FixedSizeSet() {
    this.bits = new boolean[8]; 
  }

  /*@
  @ public normal_behavior // Generated by Daikon
  @ requires n >= 0;
  @ requires (n & daikon.Quant.size(this.bits)) == 0;
  @ requires n <= daikon.Quant.size(this.bits)-1;
  @ requires daikon.Quant.size(this.bits)-1 == (n | daikon.Quant.size(this.bits)-1);
  @ ensures this.bits == \old(this.bits);
  @ ensures daikon.Quant.size(this.bits) == \old(daikon.Quant.size(this.bits));
  @ ensures daikon.Quant.pairwiseEqual(daikon.Quant.slice(this.bits, \old(n)+1, daikon.Quant.size(this.bits)), \old(daikon.Quant.slice(this.bits, n+1, daikon.Quant.size(this.bits))));
  @ ensures daikon.Quant.pairwiseEqual(daikon.Quant.slice(this.bits, 0, \old(n)-1), \old(daikon.Quant.slice(this.bits, 0, n-1)));
  @ ensures daikon.Quant.getElement_boolean(this.bits, \old(n)) == true;
  @ ensures (\old(n) & daikon.Quant.size(this.bits)) == 0;
  @ ensures \old(n) <= daikon.Quant.size(this.bits)-1;
  @ ensures daikon.Quant.size(this.bits)-1 == (\old(n) | daikon.Quant.size(this.bits)-1);
  @*/
  /**
   * @requires 0 <= n <= 7
   * @effects this.elements_post = this.elements U { n }
   */
  public void add(int n) {
    bits[n] = true;
  }

  /*@
  @ public normal_behavior // Generated by Daikon
  @ requires this != null;
  @ requires this.bits != null;
  @ requires n >= 0;
  @ requires (n & daikon.Quant.size(this.bits)) == 0;
  @ requires n <= daikon.Quant.size(this.bits)-1;
  @ requires daikon.Quant.size(this.bits)-1 == (n | daikon.Quant.size(this.bits)-1);
  @ ensures this.bits == \old(this.bits);
  @ ensures daikon.Quant.size(this.bits) == \old(daikon.Quant.size(this.bits));
  @ ensures daikon.Quant.pairwiseEqual(daikon.Quant.slice(this.bits, \old(n)+1, daikon.Quant.size(this.bits)), \old(daikon.Quant.slice(this.bits, n+1, daikon.Quant.size(this.bits))));
  @ ensures daikon.Quant.pairwiseEqual(daikon.Quant.slice(this.bits, 0, \old(n)-1), \old(daikon.Quant.slice(this.bits, 0, n-1)));
  @ ensures this.bits != null;
  @ ensures daikon.Quant.getElement_boolean(this.bits, \old(n)) == false;
  @ ensures (\old(n) & daikon.Quant.size(this.bits)) == 0;
  @ ensures \old(n) <= daikon.Quant.size(this.bits)-1;
  @ ensures daikon.Quant.size(this.bits)-1 == (\old(n) | daikon.Quant.size(this.bits)-1);
  @*/
  /**
   * @requires 0 <= n <= 7
   * @effects this.elements_post = this.elements - { n }
   */
  public void remove(int n) {
    bits[n] = false;
  }

  /*@
  @ public normal_behavior // Generated by Daikon
  @ requires n >= 0;
  @ requires (n & daikon.Quant.size(this.bits)) == 0;
  @ requires n <= daikon.Quant.size(this.bits)-1;
  @ requires daikon.Quant.size(this.bits)-1 == (n | daikon.Quant.size(this.bits)-1);
  @ ensures this.bits == \old(this.bits);
  @ ensures daikon.Quant.pairwiseEqual(this.bits, \old(this.bits));
  @ ensures \result == daikon.Quant.getElement_boolean(this.bits, \old(n));
  @ ensures \result == \old(daikon.Quant.getElement_boolean(this.bits, n));
  @ ensures (\result == true)  ==>  (\old(this) != null);
  @ ensures (\result == true)  ==>  (this.bits != null);
  @ ensures (\old(n) & daikon.Quant.size(this.bits)) == 0;
  @ ensures \old(n) <= daikon.Quant.size(this.bits)-1;
  @ ensures daikon.Quant.size(this.bits)-1 == (\old(n) | daikon.Quant.size(this.bits)-1);
  @*/
  /**
   * @requires 0 <= n <= 7
   * @returns true iff n in this.elements
   */
  public boolean contains(int n) {
    return bits[n];
  }

  /*@
  @ public normal_behavior // Generated by Daikon
  @ requires other != null;
  @ requires other.bits != null;
  @ requires daikon.Quant.size(other.bits) == 8;
  @ ensures this.bits == \old(this.bits);
  @ ensures other.bits == \old(other.bits);
  @ ensures daikon.Quant.pairwiseEqual(other.bits, \old(other.bits));
  @ ensures daikon.Quant.size(this.bits) == \old(daikon.Quant.size(this.bits));
  @ ensures other.bits != null;
  @ ensures daikon.Quant.size(other.bits) == 8;
  @ ensures daikon.Quant.subsetOf(this.bits, \old(this.bits));
  @*/
  /**
   * @requires other != null
   * @modifies this
   * @effects this.elements_post = this.elements ^ other.elements
   */
  public void intersect(FixedSizeSet other) {
    for (int i=0; i<bits.length; i++) {
      if (! other.bits[i])
	bits[i] = false;
    }
  }

  /*@
  @ public normal_behavior // Generated by Daikon
  @ requires other != null;
  @ requires other.bits != null;
  @ requires daikon.Quant.size(other.bits) == 8;
  @ ensures this.bits == \old(this.bits);
  @ ensures other.bits == \old(other.bits);
  @ ensures daikon.Quant.pairwiseEqual(other.bits, \old(other.bits));
  @ ensures daikon.Quant.size(this.bits) == \old(daikon.Quant.size(this.bits));
  @ ensures other.bits != null;
  @ ensures daikon.Quant.size(other.bits) == 8;
  @ ensures daikon.Quant.subsetOf(this.bits, \old(this.bits));
  @*/
  /**
   * @requires other != null
   * @modifies this
   * @effects this.elements_post = this.elements U other.elements
   */
  public void union(FixedSizeSet other) {
    for (int i=0; i<bits.length; i++) {
      if (other.bits[i])
	bits[i] = true;
    }
  }

}
