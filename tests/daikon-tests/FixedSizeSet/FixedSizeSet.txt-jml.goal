===========================================================================
six170.FixedSizeSet:::OBJECT
    Variables: this this.bits this.bits[] size(this.bits[]) size(this.bits[])-1
this.bits != null
daikon.Quant.size(this.bits) == 8
===========================================================================
six170.FixedSizeSet.FixedSizeSet():::EXIT
    Variables: this this.bits this.bits[] size(this.bits[]) size(this.bits[])-1
("oneOf.java.jpp: SEQUENCE unimplemented" != null)
daikon.Quant.eltsEqual(this.bits, false)
===========================================================================
six170.FixedSizeSet.add(int):::ENTER
    Variables: this this.bits this.bits[] n size(this.bits[]) size(this.bits[])-1 this.bits[n] this.bits[n-1] this.bits[n..] this.bits[n+1..] this.bits[0..n] this.bits[0..n-1]
n >= 0
(n & daikon.Quant.size(this.bits)) == 0
n <= daikon.Quant.size(this.bits)-1
daikon.Quant.size(this.bits)-1 == (n | daikon.Quant.size(this.bits)-1)
===========================================================================
six170.FixedSizeSet.add(int):::EXIT
    Variables: this this.bits this.bits[] n orig(this) orig(this.bits) orig(this.bits[]) orig(n) size(this.bits[]) size(this.bits[])-1 orig(size(this.bits[])) orig(size(this.bits[]))-1 this.bits[n] this.bits[n-1] this.bits[n..] this.bits[n+1..] this.bits[0..n] this.bits[0..n-1] this.bits[orig(n)] this.bits[orig(n)-1] this.bits[orig(n)..] this.bits[orig(n)+1..] this.bits[0..orig(n)] this.bits[0..orig(n)-1] orig(this.bits[post(n)]) orig(this.bits[post(n)-1]) orig(this.bits[post(n)..]) orig(this.bits[post(n)+1..]) orig(this.bits[0..post(n)]) orig(this.bits[0..post(n)-1]) orig(this.bits[n]) orig(this.bits[n-1]) orig(this.bits[n..]) orig(this.bits[n+1..]) orig(this.bits[0..n]) orig(this.bits[0..n-1])
assignable this.bits[*]
this.bits == \old(this.bits)
daikon.Quant.size(this.bits) == \old(daikon.Quant.size(this.bits))
daikon.Quant.pairwiseEqual(daikon.Quant.slice(this.bits, \old(n)+1, daikon.Quant.size(this.bits)), \old(daikon.Quant.slice(this.bits, \new(n)+1, daikon.Quant.size(this.bits))))
daikon.Quant.pairwiseEqual(daikon.Quant.slice(this.bits, \old(n)+1, daikon.Quant.size(this.bits)), \old(daikon.Quant.slice(this.bits, n+1, daikon.Quant.size(this.bits))))
daikon.Quant.pairwiseEqual(daikon.Quant.slice(this.bits, 0, \old(n)-1), \old(daikon.Quant.slice(this.bits, 0, \new(n)-1)))
daikon.Quant.pairwiseEqual(daikon.Quant.slice(this.bits, 0, \old(n)-1), \old(daikon.Quant.slice(this.bits, 0, n-1)))
daikon.Quant.getElement_boolean(this.bits, \old(n)) == true
(\old(n) & daikon.Quant.size(this.bits)) == 0
\old(n) <= daikon.Quant.size(this.bits)-1
daikon.Quant.size(this.bits)-1 == (\old(n) | daikon.Quant.size(this.bits)-1)
===========================================================================
six170.FixedSizeSet.contains(int):::ENTER
    Variables: this this.bits this.bits[] n size(this.bits[]) size(this.bits[])-1 this.bits[n] this.bits[n-1] this.bits[n..] this.bits[n+1..] this.bits[0..n] this.bits[0..n-1]
n >= 0
(n & daikon.Quant.size(this.bits)) == 0
n <= daikon.Quant.size(this.bits)-1
daikon.Quant.size(this.bits)-1 == (n | daikon.Quant.size(this.bits)-1)
===========================================================================
six170.FixedSizeSet.contains(int):::EXIT
    Variables: this this.bits this.bits[] n return orig(this) orig(this.bits) orig(this.bits[]) orig(n) size(this.bits[]) size(this.bits[])-1 orig(size(this.bits[])) orig(size(this.bits[]))-1 this.bits[n] this.bits[n-1] this.bits[n..] this.bits[n+1..] this.bits[0..n] this.bits[0..n-1] this.bits[orig(n)] this.bits[orig(n)-1] this.bits[orig(n)..] this.bits[orig(n)+1..] this.bits[0..orig(n)] this.bits[0..orig(n)-1] orig(this.bits[post(n)]) orig(this.bits[post(n)-1]) orig(this.bits[post(n)..]) orig(this.bits[post(n)+1..]) orig(this.bits[0..post(n)]) orig(this.bits[0..post(n)-1]) orig(this.bits[n]) orig(this.bits[n-1]) orig(this.bits[n..]) orig(this.bits[n+1..]) orig(this.bits[0..n]) orig(this.bits[0..n-1])
this.bits == \old(this.bits)
daikon.Quant.pairwiseEqual(this.bits, \old(this.bits))
\result == daikon.Quant.getElement_boolean(this.bits, \old(n))
\result == \old(daikon.Quant.getElement_boolean(this.bits, \new(n)))
\result == \old(daikon.Quant.getElement_boolean(this.bits, n))
(\result == true)  ==>  (\old(this) != null)
(\result == true)  ==>  (this.bits != null)
(\old(n) & daikon.Quant.size(this.bits)) == 0
\old(n) <= daikon.Quant.size(this.bits)-1
daikon.Quant.size(this.bits)-1 == (\old(n) | daikon.Quant.size(this.bits)-1)
===========================================================================
six170.FixedSizeSet.intersect(six170.FixedSizeSet):::ENTER
    Variables: this this.bits this.bits[] other other.bits other.bits[] size(this.bits[]) size(this.bits[])-1 size(other.bits[]) size(other.bits[])-1
other != null
other.bits != null
daikon.Quant.size(other.bits) == 8
===========================================================================
six170.FixedSizeSet.intersect(six170.FixedSizeSet):::EXIT
    Variables: this this.bits this.bits[] other other.bits other.bits[] orig(this) orig(this.bits) orig(this.bits[]) orig(other) orig(other.bits) orig(other.bits[]) size(this.bits[]) size(this.bits[])-1 size(other.bits[]) size(other.bits[])-1 orig(size(this.bits[])) orig(size(this.bits[]))-1 orig(size(other.bits[])) orig(size(other.bits[]))-1
assignable this.bits[*]
this.bits == \old(this.bits)
other.bits == \old(other.bits)
daikon.Quant.pairwiseEqual(other.bits, \old(other.bits))
daikon.Quant.size(this.bits) == \old(daikon.Quant.size(this.bits))
other.bits != null
daikon.Quant.size(other.bits) == 8
daikon.Quant.subsetOf(this.bits, \old(this.bits))
===========================================================================
six170.FixedSizeSet.remove(int):::ENTER
    Variables: this this.bits this.bits[] n size(this.bits[]) size(this.bits[])-1 this.bits[n] this.bits[n-1] this.bits[n..] this.bits[n+1..] this.bits[0..n] this.bits[0..n-1]
this != null
this.bits != null
n >= 0
(n & daikon.Quant.size(this.bits)) == 0
n <= daikon.Quant.size(this.bits)-1
daikon.Quant.size(this.bits)-1 == (n | daikon.Quant.size(this.bits)-1)
===========================================================================
six170.FixedSizeSet.remove(int):::EXIT
    Variables: this this.bits this.bits[] n orig(this) orig(this.bits) orig(this.bits[]) orig(n) size(this.bits[]) size(this.bits[])-1 orig(size(this.bits[])) orig(size(this.bits[]))-1 this.bits[n] this.bits[n-1] this.bits[n..] this.bits[n+1..] this.bits[0..n] this.bits[0..n-1] this.bits[orig(n)] this.bits[orig(n)-1] this.bits[orig(n)..] this.bits[orig(n)+1..] this.bits[0..orig(n)] this.bits[0..orig(n)-1] orig(this.bits[post(n)]) orig(this.bits[post(n)-1]) orig(this.bits[post(n)..]) orig(this.bits[post(n)+1..]) orig(this.bits[0..post(n)]) orig(this.bits[0..post(n)-1]) orig(this.bits[n]) orig(this.bits[n-1]) orig(this.bits[n..]) orig(this.bits[n+1..]) orig(this.bits[0..n]) orig(this.bits[0..n-1])
assignable this.bits[*]
this.bits == \old(this.bits)
daikon.Quant.size(this.bits) == \old(daikon.Quant.size(this.bits))
daikon.Quant.pairwiseEqual(daikon.Quant.slice(this.bits, \old(n)+1, daikon.Quant.size(this.bits)), \old(daikon.Quant.slice(this.bits, \new(n)+1, daikon.Quant.size(this.bits))))
daikon.Quant.pairwiseEqual(daikon.Quant.slice(this.bits, \old(n)+1, daikon.Quant.size(this.bits)), \old(daikon.Quant.slice(this.bits, n+1, daikon.Quant.size(this.bits))))
daikon.Quant.pairwiseEqual(daikon.Quant.slice(this.bits, 0, \old(n)-1), \old(daikon.Quant.slice(this.bits, 0, \new(n)-1)))
daikon.Quant.pairwiseEqual(daikon.Quant.slice(this.bits, 0, \old(n)-1), \old(daikon.Quant.slice(this.bits, 0, n-1)))
this.bits != null
daikon.Quant.getElement_boolean(this.bits, \old(n)) == false
(\old(n) & daikon.Quant.size(this.bits)) == 0
\old(n) <= daikon.Quant.size(this.bits)-1
daikon.Quant.size(this.bits)-1 == (\old(n) | daikon.Quant.size(this.bits)-1)
===========================================================================
six170.FixedSizeSet.union(six170.FixedSizeSet):::ENTER
    Variables: this this.bits this.bits[] other other.bits other.bits[] size(this.bits[]) size(this.bits[])-1 size(other.bits[]) size(other.bits[])-1
other != null
other.bits != null
daikon.Quant.size(other.bits) == 8
===========================================================================
six170.FixedSizeSet.union(six170.FixedSizeSet):::EXIT
    Variables: this this.bits this.bits[] other other.bits other.bits[] orig(this) orig(this.bits) orig(this.bits[]) orig(other) orig(other.bits) orig(other.bits[]) size(this.bits[]) size(this.bits[])-1 size(other.bits[]) size(other.bits[])-1 orig(size(this.bits[])) orig(size(this.bits[]))-1 orig(size(other.bits[])) orig(size(other.bits[]))-1
assignable this.bits[*]
this.bits == \old(this.bits)
other.bits == \old(other.bits)
daikon.Quant.pairwiseEqual(other.bits, \old(other.bits))
daikon.Quant.size(this.bits) == \old(daikon.Quant.size(this.bits))
other.bits != null
daikon.Quant.size(other.bits) == 8
daikon.Quant.subsetOf(this.bits, \old(this.bits))
