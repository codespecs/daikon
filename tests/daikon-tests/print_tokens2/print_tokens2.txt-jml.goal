===========================================================================
..get_char():::ENTER
    Variables: ::buffer fp fp[] size(fp[]) size(fp[])-1
warning: method daikon.inv.unary.string.PrintableString.format(OutputFormat:JML) needs to be implemented: ::buffer is printable
fp != null
fp != null
===========================================================================
..get_char():::EXIT
    Variables: ::buffer fp fp[] return orig(::buffer) orig(fp) orig(fp[]) size(fp[]) size(fp[])-1 orig(size(fp[])) orig(size(fp[]))-1 fp[return] fp[return-1] fp[return..] fp[return+1..] fp[0..return] fp[0..return-1] orig(fp[post(return)]) orig(fp[post(return)-1]) orig(fp[post(return)..]) orig(fp[post(return)+1..]) orig(fp[0..post(return)]) orig(fp[0..post(return)-1])
assignable fp[*]
::buffer.equals(\old(::buffer))
warning: method daikon.inv.unary.string.PrintableString.format(OutputFormat:JML) needs to be implemented: ::buffer is printable
return != 0
===========================================================================
..get_token():::ENTER
    Variables: ::buffer tp tp[] size(tp[]) size(tp[])-1
warning: method daikon.inv.unary.string.PrintableString.format(OutputFormat:JML) needs to be implemented: ::buffer is printable
tp != null
tp != null
===========================================================================
..get_token():::EXIT
    Variables: ::buffer tp tp[] return orig(::buffer) orig(tp) orig(tp[]) size(tp[]) size(tp[])-1 orig(size(tp[])) orig(size(tp[]))-1
assignable ::buffer, tp[*]
::buffer.equals(return)
===========================================================================
..is_eof_token():::ENTER
    Variables: ::buffer tok
===========================================================================
..is_eof_token():::EXIT
    Variables: ::buffer tok return orig(::buffer) orig(tok)
::buffer.equals(\old(::buffer))
return == 0 || return == 1
===========================================================================
..open_character_stream():::ENTER
    Variables: ::buffer fname
::buffer.equals("")
===========================================================================
..open_character_stream():::EXIT
    Variables: ::buffer fname return return[] orig(::buffer) orig(fname) size(return[]) size(return[])-1
::buffer.equals(\old(::buffer))
::buffer.equals("")
return != null
===========================================================================
..open_token_stream():::ENTER
    Variables: ::buffer fname
::buffer.equals(fname)
::buffer.equals("")
===========================================================================
..open_token_stream():::EXIT
    Variables: ::buffer fname return return[] orig(::buffer) orig(fname) size(return[]) size(return[])-1
::buffer.equals(\old(::buffer))
::buffer.equals(\old(fname))
::buffer.equals("")
return != null
===========================================================================
..print_token():::ENTER
    Variables: ::buffer tok
::buffer.equals(tok)
===========================================================================
..print_token():::EXIT
    Variables: ::buffer tok return orig(::buffer) orig(tok)
::buffer.equals(\old(::buffer))
::buffer.equals(\old(tok))
===========================================================================
print_tokens2.c.is_char_constant():::ENTER
    Variables: ::buffer str
::buffer.equals(str)
===========================================================================
print_tokens2.c.is_char_constant():::EXIT
    Variables: ::buffer str return orig(::buffer) orig(str)
::buffer.equals(\old(::buffer))
::buffer.equals(\old(str))
return == 0
===========================================================================
print_tokens2.c.is_comment():::ENTER
    Variables: ::buffer ident
::buffer.equals(ident)
===========================================================================
print_tokens2.c.is_comment():::EXIT
    Variables: ::buffer ident return orig(::buffer) orig(ident)
::buffer.equals(\old(::buffer))
::buffer.equals(\old(ident))
return == 0 || return == 1
===========================================================================
print_tokens2.c.is_identifier():::ENTER
    Variables: ::buffer str
::buffer.equals(str)
===========================================================================
print_tokens2.c.is_identifier():::EXIT
    Variables: ::buffer str return orig(::buffer) orig(str)
::buffer.equals(\old(::buffer))
::buffer.equals(\old(str))
return == 0 || return == 1
===========================================================================
print_tokens2.c.is_keyword():::ENTER
    Variables: ::buffer str
::buffer.equals(str)
===========================================================================
print_tokens2.c.is_keyword():::EXIT
    Variables: ::buffer str return orig(::buffer) orig(str)
::buffer.equals(\old(::buffer))
::buffer.equals(\old(str))
return == 0 || return == 1
===========================================================================
print_tokens2.c.is_num_constant():::ENTER
    Variables: ::buffer str
::buffer.equals(str)
===========================================================================
print_tokens2.c.is_num_constant():::EXIT
    Variables: ::buffer str return orig(::buffer) orig(str)
::buffer.equals(\old(::buffer))
::buffer.equals(\old(str))
return == 0 || return == 1
===========================================================================
print_tokens2.c.is_spec_symbol():::ENTER
    Variables: ::buffer str
===========================================================================
print_tokens2.c.is_spec_symbol():::EXIT
    Variables: ::buffer str return orig(::buffer) orig(str)
::buffer.equals(\old(::buffer))
return == 0 || return == 1
===========================================================================
print_tokens2.c.is_str_constant():::ENTER
    Variables: ::buffer str
::buffer.equals(str)
===========================================================================
print_tokens2.c.is_str_constant():::EXIT
    Variables: ::buffer str return orig(::buffer) orig(str)
::buffer.equals(\old(::buffer))
::buffer.equals(\old(str))
return == 0 || return == 1
===========================================================================
print_tokens2.c.is_token_end():::ENTER
    Variables: ::buffer str_com_id ch
warning: method daikon.inv.unary.string.PrintableString.format(OutputFormat:JML) needs to be implemented: ::buffer is printable
str_com_id == 0 || str_com_id == 1 || str_com_id == 2
str_com_id < ch
===========================================================================
print_tokens2.c.is_token_end():::EXIT
    Variables: ::buffer str_com_id ch return orig(::buffer) orig(str_com_id) orig(ch)
::buffer.equals(\old(::buffer))
warning: method daikon.inv.unary.string.PrintableString.format(OutputFormat:JML) needs to be implemented: ::buffer is printable
return == 0 || return == 1
(return & \old(ch)) == 0
return < \old(ch)
===========================================================================
print_tokens2.c.print_spec_symbol():::ENTER
    Variables: ::buffer str
::buffer.equals(str)
::buffer.equals("'") || ::buffer.equals(")") || ::buffer.equals("`")
warning: method daikon.inv.unary.string.PrintableString.format(OutputFormat:JML) needs to be implemented: ::buffer is printable
===========================================================================
print_tokens2.c.print_spec_symbol():::EXIT
    Variables: ::buffer str orig(::buffer) orig(str)
::buffer.equals(\old(::buffer))
::buffer.equals(\old(str))
::buffer.equals("'") || ::buffer.equals(")") || ::buffer.equals("`")
warning: method daikon.inv.unary.string.PrintableString.format(OutputFormat:JML) needs to be implemented: ::buffer is printable
===========================================================================
print_tokens2.c.token_type():::ENTER
    Variables: ::buffer tok
::buffer.equals(tok)
===========================================================================
print_tokens2.c.token_type():::EXIT
    Variables: ::buffer tok return orig(::buffer) orig(tok)
::buffer.equals(\old(::buffer))
::buffer.equals(\old(tok))
return >= 1
