package misc;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;

public class Purity {
	/*@ invariant this.value == this.getValue(); */
	/*@ invariant this.shift == this.getShift(); */
	/*@ invariant this.shift == this.retrieve(this.list1); */
	/*@ invariant this.shift == this.retrieve(this.list2); */
	/*@ invariant this.heavy == this.isHeavy(); */
	/*@ invariant this.sum(this.getNum()) == this.sum(this.getJWrap()); */
	/*@ invariant daikon.Quant.size(this.list1) == daikon.Quant.size(this.list2); */
	/*@ invariant this.shift == 0 || this.shift == 5 || this.shift == 10; */
	/*@ invariant this.list1 != null; */
	/*@ invariant daikon.Quant.noDups(this.list1); */
	/*@ invariant daikon.Quant.eltsNotEqual(this.list1, null); */
	/*@ invariant this.list2 != null; */
	/*@ invariant daikon.Quant.noDups(this.list2); */
	/*@ invariant daikon.Quant.eltsNotEqual(this.list2, null); */
	/*@ invariant this.list2.getClass().getName() == java.util.ArrayList.class.getName(); */
	/*@ invariant this.getNum() != null; */
	/*@ invariant this.getNum().getClass().getName() == java.lang.Integer.class.getName(); */
	/*@ invariant this.getJWrap() != null; */
	/*@ invariant this.sum(this.getNum()) % 2 == 0; */
	/*@ invariant daikon.Quant.size(this.list1) == 11; */
	/*@ invariant (!(this.scale(this.value) == 0)) || (this.value == 0); */
	/*@ invariant (!(this.value == 0)) || (this.scale(this.value) == 0); */
	/*@ invariant this.value <= this.scale(this.shift); */
	/*@ invariant (!(this.sum(this.getNum()) == 0)) || (this.value == 0); */
	/*@ invariant (!(this.value == 0)) || (this.sum(this.getNum()) == 0); */
	/*@ invariant 2 * this.value - this.sum(this.getNum()) == 0; */
	/*@ invariant this.shift <= daikon.Quant.size(this.list1)-1; */
	/*@ invariant this.list2.getClass().getName() != this.getNum().getClass().getName(); */
	/*@ invariant (!(this.scale(this.value) == 0)) || (this.sum(this.getNum()) == 0); */
	/*@ invariant (!(this.sum(this.getNum()) == 0)) || (this.scale(this.value) == 0); */
	/*@ invariant this.sum(this.getNum()) != daikon.Quant.size(this.list1); */
	/*@ spec_public */ private int value;
	/*@ spec_public */ private int shift;
	/*@ spec_public */ private boolean heavy;
	/*@ spec_public */ private LinkedList<Number> list1;
	/*@ spec_public */ private List<Number> list2;
	
	/*@
	@ public normal_behavior // Generated by Daikon
	@ requires shift == 0 || shift == 5 || shift == 10;
	@ requires shift % 5 == 0;
	@ ensures this.value == \old(value);
	@ ensures this.shift == \old(shift);
	@ ensures this.shift % 5 == 0;
	@*/
	public Purity(int value, int shift) {
		this.value = value;
		this.shift = shift;
		this.heavy = shift >= 5;
		list1 = new LinkedList<Number>();
		list2 = new ArrayList<Number>();
		for (int j = 0; j < 11; j++) {
			list1.add(new Integer(j));
			list2.add(new Integer(j));
		}
	}
	
	/*@
	@ public normal_behavior // Generated by Daikon
	@ requires this.shift % 5 == 0;
	@ ensures this.value == \result;
	@ ensures this.shift == \old(this.shift);
	@ ensures this.shift == \old(this.getShift());
	@ ensures this.shift == \old(this.retrieve(this.list1));
	@ ensures this.shift == \old(this.retrieve(this.list2));
	@ ensures this.heavy == \old(this.heavy);
	@ ensures this.heavy == \old(this.isHeavy());
	@ ensures this.list1 == \old(this.list1);
	@ ensures daikon.Quant.pairwiseEqual(this.list1, \old(this.list1));
	@ ensures this.list2 == \old(this.list2);
	@ ensures daikon.Quant.pairwiseEqual(this.list2, \old(this.list2));
	@ ensures this.getValue() == \result;
	@ ensures this.sum(this.getNum()) == \old(this.sum(this.getJWrap()));
	@ ensures \result == \old(this.value);
	@ ensures \result == \old(this.getValue());
	@ ensures daikon.Quant.size(this.list1) == \old(daikon.Quant.size(this.list2));
	@ ensures this.shift % 5 == 0;
	@ ensures this.list2.getClass().getName() == \old(this.list2.getClass().getName());
	@ ensures this.getNum().getClass().getName() == \old(this.getNum().getClass().getName());
	@ ensures (!(\result == 0)) || (this.scale(this.value) == 0);
	@ ensures (!(this.scale(this.value) == 0)) || (\result == 0);
	@ ensures this.scale(this.shift) >= \result;
	@ ensures (!(\result == 0)) || (this.sum(this.getNum()) == 0);
	@ ensures (!(this.sum(this.getNum()) == 0)) || (\result == 0);
	@*/
	public int getValue() {
		return value;
	}
	
	/*@
	@ public normal_behavior // Generated by Daikon
	@ requires this.shift % 5 == 0;
	@ ensures this.value == \old(this.value);
	@ ensures this.value == \old(this.getValue());
	@ ensures this.shift == \result;
	@ ensures this.heavy == \old(this.heavy);
	@ ensures this.heavy == \old(this.isHeavy());
	@ ensures this.list1 == \old(this.list1);
	@ ensures daikon.Quant.pairwiseEqual(this.list1, \old(this.list1));
	@ ensures this.list2 == \old(this.list2);
	@ ensures daikon.Quant.pairwiseEqual(this.list2, \old(this.list2));
	@ ensures this.getShift() == \result;
	@ ensures this.sum(this.getNum()) == \old(this.sum(this.getJWrap()));
	@ ensures this.retrieve(this.list1) == \result;
	@ ensures this.retrieve(this.list2) == \result;
	@ ensures \result == \old(this.shift);
	@ ensures \result == \old(this.getShift());
	@ ensures \result == \old(this.retrieve(this.list1));
	@ ensures \result == \old(this.retrieve(this.list2));
	@ ensures daikon.Quant.size(this.list1) == \old(daikon.Quant.size(this.list2));
	@ ensures \result == 0 || \result == 5 || \result == 10;
	@ ensures \result % 5 == 0;
	@ ensures this.list2.getClass().getName() == \old(this.list2.getClass().getName());
	@ ensures this.getNum().getClass().getName() == \old(this.getNum().getClass().getName());
	@ ensures \result <= daikon.Quant.size(this.list1)-1;
	@*/
	public int getShift() {
		return shift;
	}
	
	/*@
	@ public normal_behavior // Generated by Daikon
	@ ensures this.value == \old(this.value);
	@ ensures this.value == \old(this.getValue());
	@ ensures this.shift == \old(this.shift);
	@ ensures this.shift == \old(this.getShift());
	@ ensures this.shift == \old(this.retrieve(this.list1));
	@ ensures this.shift == \old(this.retrieve(this.list2));
	@ ensures this.heavy == \result;
	@ ensures this.list1 == \old(this.list1);
	@ ensures daikon.Quant.pairwiseEqual(this.list1, \old(this.list1));
	@ ensures this.list2 == \old(this.list2);
	@ ensures daikon.Quant.pairwiseEqual(this.list2, \old(this.list2));
	@ ensures this.isHeavy() == \result;
	@ ensures this.sum(this.getNum()) == \old(this.sum(this.getJWrap()));
	@ ensures \result == \old(this.heavy);
	@ ensures \result == \old(this.isHeavy());
	@ ensures daikon.Quant.size(this.list1) == \old(daikon.Quant.size(this.list2));
	@ ensures (this.shift == 0)  <==>  (\result == false);
	@ ensures (this.shift == 0)  <==>  (this.value == this.scale(this.shift));
	@ ensures (this.shift == 0)  ==>  ((!(this.scale(this.shift) == 0)) || (this.sum(this.getNum()) == 0));
	@ ensures (this.shift == 0)  ==>  ((!(this.sum(this.getNum()) == 0)) || (this.scale(this.shift) == 0));
	@ ensures (this.shift == 0)  ==>  (2 * this.scale(this.shift) - this.sum(this.getNum()) == 0);
	@ ensures (this.shift == 0)  ==>  (2 * this.scale(this.value) - this.sum(this.getNum()) == 0);
	@ ensures (this.shift == 0)  ==>  (daikon.Quant.eltsEqual(daikon.Quant.slice(this.list1, 0, this.shift), daikon.Quant.getElement_Object(this.list1, this.shift)));
	@ ensures (this.shift == 0)  ==>  (daikon.Quant.eltsEqual(daikon.Quant.slice(this.list2, 0, this.shift), daikon.Quant.getElement_Object(this.list2, this.shift)));
	@ ensures (this.shift == 0)  ==>  (this.shift < daikon.Quant.size(this.list1)-1);
	@ ensures (this.shift == 0)  ==>  (this.shift is a pointer);
	@ ensures (this.shift == 0)  ==>  (this.value == this.scale(this.value));
	@ ensures (this.shift == 5 || this.shift == 10)  <==>  (\result == true);
	@ ensures (this.shift == 5 || this.shift == 10)  <==>  (this.value < this.scale(this.shift));
	@ ensures (this.shift == 5 || this.shift == 10)  ==>  (30 * this.shift - 2 * this.scale(this.shift) + this.sum(this.getNum()) - 100 == 0);
	@ ensures (this.shift == 5 || this.shift == 10)  ==>  (this.scale(this.value) != daikon.Quant.size(this.list1)-1);
	@ ensures (this.shift == 5 || this.shift == 10)  ==>  (this.shift != this.scale(this.value));
	@ ensures (this.shift == 5 || this.shift == 10)  ==>  (this.shift % 5 == 0);
	@ ensures (this.shift == 5 || this.shift == 10)  ==>  (this.value + 15 * this.shift - this.scale(this.shift) - 50 == 0);
	@ ensures this.list2.getClass().getName() == \old(this.list2.getClass().getName());
	@ ensures this.getNum().getClass().getName() == \old(this.getNum().getClass().getName());
	@*/
	public boolean isHeavy() {
		return heavy;
	}
	
	/*@
	@ public normal_behavior // Generated by Daikon
	@ requires this.shift % 5 == 0;
	@ ensures this.value == \old(this.value);
	@ ensures this.value == \old(this.getValue());
	@ ensures this.shift == \old(this.shift);
	@ ensures this.shift == \old(this.getShift());
	@ ensures this.shift == \old(this.retrieve(this.list1));
	@ ensures this.shift == \old(this.retrieve(this.list2));
	@ ensures this.heavy == \old(this.heavy);
	@ ensures this.heavy == \old(this.isHeavy());
	@ ensures this.list1 == \old(this.list1);
	@ ensures daikon.Quant.pairwiseEqual(this.list1, \old(this.list1));
	@ ensures this.list2 == \old(this.list2);
	@ ensures daikon.Quant.pairwiseEqual(this.list2, \old(this.list2));
	@ ensures this.sum(this.getNum()) == \old(this.sum(this.getJWrap()));
	@ ensures daikon.Quant.size(this.list1) == \old(daikon.Quant.size(this.list2));
	@ ensures this.shift % 5 == 0;
	@ ensures \result != null;
	@ ensures \result.getClass().getName() == java.lang.Integer.class.getName();
	@ ensures this.list2.getClass().getName() != \result.getClass().getName();
	@ ensures this.list2.getClass().getName() == \old(this.list2.getClass().getName());
	@ ensures this.getNum().getClass().getName() == \result.getClass().getName();
	@ ensures \result.getClass().getName() == \old(this.getNum().getClass().getName());
	@*/
	public Number getNum() {
		return (Number) new Integer(value);
	}
	
	/*@
	@ public normal_behavior // Generated by Daikon
	@ requires this.shift % 5 == 0;
	@ ensures this.value == \old(this.value);
	@ ensures this.value == \old(this.getValue());
	@ ensures this.shift == \old(this.shift);
	@ ensures this.shift == \old(this.getShift());
	@ ensures this.shift == \old(this.retrieve(this.list1));
	@ ensures this.shift == \old(this.retrieve(this.list2));
	@ ensures this.heavy == \old(this.heavy);
	@ ensures this.heavy == \old(this.isHeavy());
	@ ensures this.list1 == \old(this.list1);
	@ ensures daikon.Quant.pairwiseEqual(this.list1, \old(this.list1));
	@ ensures this.list2 == \old(this.list2);
	@ ensures daikon.Quant.pairwiseEqual(this.list2, \old(this.list2));
	@ ensures this.sum(this.getNum()) == \old(this.sum(this.getJWrap()));
	@ ensures daikon.Quant.size(this.list1) == \old(daikon.Quant.size(this.list2));
	@ ensures this.shift % 5 == 0;
	@ ensures \result != null;
	@ ensures this.list2.getClass().getName() == \old(this.list2.getClass().getName());
	@ ensures this.getNum().getClass().getName() == \old(this.getNum().getClass().getName());
	@*/
	public Integer getJWrap() {
		return new Integer(value);
	}
	
	/*@
	@ public normal_behavior // Generated by Daikon
	@ requires this.value == scale;
	@ requires this.shift % 5 == 0;
	@ ensures this.value == \old(this.value);
	@ ensures this.value == \old(this.getValue());
	@ ensures this.value == \old(scale);
	@ ensures this.shift == \old(this.shift);
	@ ensures this.shift == \old(this.getShift());
	@ ensures this.shift == \old(this.retrieve(this.list1));
	@ ensures this.shift == \old(this.retrieve(this.list2));
	@ ensures this.heavy == \old(this.heavy);
	@ ensures this.heavy == \old(this.isHeavy());
	@ ensures this.list1 == \old(this.list1);
	@ ensures daikon.Quant.pairwiseEqual(this.list1, \old(this.list1));
	@ ensures this.list2 == \old(this.list2);
	@ ensures daikon.Quant.pairwiseEqual(this.list2, \old(this.list2));
	@ ensures this.scale(this.value) == \result;
	@ ensures this.scale(this.getValue()) == \result;
	@ ensures this.sum(this.getNum()) == \old(this.sum(this.getJWrap()));
	@ ensures \result == \old(this.scale(this.value));
	@ ensures \result == \old(this.scale(this.getValue()));
	@ ensures daikon.Quant.size(this.list1) == \old(daikon.Quant.size(this.list2));
	@ ensures this.shift % 5 == 0;
	@ ensures (!(\result == 0)) || (this.value == 0);
	@ ensures (!(this.value == 0)) || (\result == 0);
	@ ensures this.list2.getClass().getName() == \old(this.list2.getClass().getName());
	@ ensures this.getNum().getClass().getName() == \old(this.getNum().getClass().getName());
	@ ensures (!(\result == 0)) || (this.sum(this.getNum()) == 0);
	@ ensures (!(this.sum(this.getNum()) == 0)) || (\result == 0);
	@*/
	public int scale(int scale) {
		return value + shift * scale;
	}
	
	/*@
	@ public normal_behavior // Generated by Daikon
	@ requires this.shift % 5 == 0;
	@ requires n != null;
	@ requires this.getNum().getClass().getName() == n.getClass().getName();
	@ ensures this.value == \old(this.value);
	@ ensures this.value == \old(this.getValue());
	@ ensures this.shift == \old(this.shift);
	@ ensures this.shift == \old(this.getShift());
	@ ensures this.shift == \old(this.retrieve(this.list1));
	@ ensures this.shift == \old(this.retrieve(this.list2));
	@ ensures this.heavy == \old(this.heavy);
	@ ensures this.heavy == \old(this.isHeavy());
	@ ensures this.list1 == \old(this.list1);
	@ ensures daikon.Quant.pairwiseEqual(this.list1, \old(this.list1));
	@ ensures this.list2 == \old(this.list2);
	@ ensures daikon.Quant.pairwiseEqual(this.list2, \old(this.list2));
	@ ensures this.sum(this.getNum()) == \result;
	@ ensures this.sum(this.getJWrap()) == \result;
	@ ensures \result == \old(this.sum(this.getNum()));
	@ ensures \result == \old(this.sum(this.getJWrap()));
	@ ensures daikon.Quant.size(this.list1) == \old(daikon.Quant.size(this.list2));
	@ ensures this.shift % 5 == 0;
	@ ensures \result % 2 == 0;
	@ ensures (!(\result == 0)) || (this.value == 0);
	@ ensures (!(this.value == 0)) || (\result == 0);
	@ ensures 2 * this.value - \result == 0;
	@ ensures this.list2.getClass().getName() == \old(this.list2.getClass().getName());
	@ ensures this.getNum().getClass().getName() == \old(this.getNum().getClass().getName());
	@ ensures this.getNum().getClass().getName() == \old(n.getClass().getName());
	@ ensures (!(\result == 0)) || (this.scale(this.value) == 0);
	@ ensures (!(this.scale(this.value) == 0)) || (\result == 0);
	@ ensures \result != daikon.Quant.size(this.list1);
	@*/
	public int sum(Number n) {
		return value + n.intValue();
	}
	
	/*@
	@ public normal_behavior // Generated by Daikon
	@ requires this.shift % 5 == 0;
	@ requires l != null;
	@ requires daikon.Quant.noDups(l);
	@ requires daikon.Quant.eltsNotEqual(l, null);
	@ requires daikon.Quant.size(l) == 20;
	@ requires this.shift < daikon.Quant.size(l)-1;
	@ requires this.list2.getClass().getName() == l.getClass().getName();
	@ requires this.sum(this.getNum()) != daikon.Quant.size(l)-1;
	@ ensures this.value == \old(this.value);
	@ ensures this.value == \old(this.getValue());
	@ ensures this.shift == \result;
	@ ensures this.heavy == \old(this.heavy);
	@ ensures this.heavy == \old(this.isHeavy());
	@ ensures this.list1 == \old(this.list1);
	@ ensures daikon.Quant.pairwiseEqual(this.list1, \old(this.list1));
	@ ensures this.list2 == \old(this.list2);
	@ ensures daikon.Quant.pairwiseEqual(this.list2, \old(this.list2));
	@ ensures this.getShift() == \result;
	@ ensures this.sum(this.getNum()) == \old(this.sum(this.getJWrap()));
	@ ensures this.retrieve(this.list1) == \result;
	@ ensures this.retrieve(this.list2) == \result;
	@ ensures daikon.Quant.pairwiseEqual(l, \old(l));
	@ ensures \result == \old(this.shift);
	@ ensures \result == \old(this.getShift());
	@ ensures \result == \old(this.retrieve(this.list1));
	@ ensures \result == \old(this.retrieve(this.list2));
	@ ensures daikon.Quant.size(this.list1) == \old(daikon.Quant.size(this.list2));
	@ ensures daikon.Quant.noDups(l);
	@ ensures daikon.Quant.eltsNotEqual(l, null);
	@ ensures \result == 0 || \result == 5 || \result == 10;
	@ ensures \result % 5 == 0;
	@ ensures this.list2.getClass().getName() == \old(this.list2.getClass().getName());
	@ ensures this.list2.getClass().getName() == \old(l.getClass().getName());
	@ ensures this.getNum().getClass().getName() == \old(this.getNum().getClass().getName());
	@ ensures this.sum(this.getNum()) != daikon.Quant.size(l)-1;
	@ ensures \result <= daikon.Quant.size(this.list1)-1;
	@ ensures \result < daikon.Quant.size(l)-1;
	@*/
	public int retrieve(List<Number> l) {
		return l.get(shift).intValue();
	}
}
