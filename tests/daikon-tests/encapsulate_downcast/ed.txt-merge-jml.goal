package misc;

import java.util.*;

class Person {

    /*@ invariant this._name != null; */
    /*@ invariant this._height >= 0; */
    /*@ spec_public */ private String _name;
    /*@ spec_public */ private int _height;
    /*@ spec_public */ private int _weight;

    /*@
    @ public normal_behavior // Generated by Daikon
    @ requires name != null;
    @ requires height >= 0;
    @ ensures this._name == \old(name);
    @ ensures this._height == \old(height);
    @ ensures this._weight == \old(weight);
    @ ensures name.toString().equals(\old(name.toString()));
    @*/
    public Person(String name, int height, int weight) {
	_name = name;
	_height = height;
	_weight = weight;
    }

    /*@
    @ public normal_behavior // Generated by Daikon
    @ requires true;
    @*/
    public String getName() {
	return _name;
    }
}

public class EncapsulateDowncast {

    /*@ spec_public */ static final int CASES = 64;
    /*@ spec_public */ static final int SEED = 327;

    /*@ spec_public */ static Random random = new Random(SEED);
    /*@ spec_public */ static Random random2 = new Random(SEED);

    /*@
    @ private normal_behavior // Generated by Daikon
    @ requires list != null;
    @ requires daikon.Quant.noDups(list);
    @ requires daikon.Quant.eltsNotEqual(list, null);
    @ ensures misc.EncapsulateDowncast.random == \old(misc.EncapsulateDowncast.random);
    @ ensures misc.EncapsulateDowncast.random2 == \old(misc.EncapsulateDowncast.random2);
    @ ensures daikon.Quant.pairwiseEqual(list, \old(list));
    @ ensures daikon.Quant.noDups(list);
    @ ensures daikon.Quant.eltsNotEqual(list, null);
    @*/
    static void showLastPerson(Vector list) {
	    Person last = (Person)list.lastElement();
            // Reduce output, for test suite
	    // System.out.println("The last person in the list: " + last.getName());
    }

    /*@
    @ public normal_behavior // Generated by Daikon
    @ requires argv != null;
    @ requires argv.getClass().getName() == java.lang.String[].class.getName();
    @ requires daikon.Quant.pairwiseEqual(daikon.Quant.collectObject(argv, "toString()"), new String[] {  });
    @ ensures misc.EncapsulateDowncast.random == \old(misc.EncapsulateDowncast.random);
    @ ensures misc.EncapsulateDowncast.random2 == \old(misc.EncapsulateDowncast.random2);
    @ ensures daikon.Quant.pairwiseEqual(argv, \old(argv));
    @ ensures daikon.Quant.pairwiseEqual(daikon.Quant.collectObject(argv, "toString()"), new String[] {  });
    @*/
    public static void main(String argv[]) {
	for (int i = 0;
	     i < CASES;
	     i++) {
	    Vector list = new Vector();
	    for (int j = 0;
		 j <= random.nextInt(CASES);
		 j++) {
		String name = "name" + j;
		int height = random.nextInt(12);
		int weight = random2.nextInt(100) + 100;
		Person person = new Person(name, height, weight);
		list.addElement(person);
	    }
	    showLastPerson(list);
	}
    }
}
