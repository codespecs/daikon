===========================================================================
DataStructures.StackAr:::OBJECT
this.theArray != null
this.theArray.getClass().getName() == java.lang.Object[].class
this.topOfStack >= -1
this.theArray[this.topOfStack+1..] elements == null
this.theArray[0..this.topOfStack] elements != null
this.topOfStack <= size(this.theArray[])-1
===========================================================================
DataStructures.StackAr.pop():::ENTER
this.topOfStack >= 0
this.theArray[0..this.topOfStack] contains no duplicates
===========================================================================
DataStructures.StackAr.pop():::EXIT
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
size(this.theArray[]) == orig(size(this.theArray[]))
this.theArray[0..this.topOfStack] == orig(this.theArray[0..post(this.topOfStack)])
this.theArray[0..this.topOfStack] == orig(this.theArray[0..this.topOfStack-1])
this.theArray[orig(this.topOfStack)+1..] == orig(this.theArray[this.topOfStack+1..])
this.theArray[orig(this.topOfStack)] == null
this.theArray[0..orig(this.topOfStack)] contains no duplicates
this.topOfStack - orig(this.topOfStack) + 1 == 0
this.topOfStack < size(this.theArray[])-1
orig(this.topOfStack) <= size(this.theArray[])-1
this.theArray[this.topOfStack+1..] elements == this.theArray[orig(this.topOfStack)]
===========================================================================
DataStructures.StackAr.push(java.lang.Object):::ENTER
x != null
this.theArray.getClass().getName() != x.getClass().getName()
this.topOfStack < size(this.theArray[])-1
===========================================================================
DataStructures.StackAr.push(java.lang.Object):::EXIT
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
orig(x) == this.theArray[this.topOfStack]
size(this.theArray[]) == orig(size(this.theArray[]))
this.theArray[this.topOfStack+1..] == orig(this.theArray[post(this.topOfStack)+1..])
this.theArray[0..this.topOfStack-1] == orig(this.theArray[0..post(this.topOfStack)-1])
this.theArray[0..this.topOfStack-1] == orig(this.theArray[0..this.topOfStack])
this.topOfStack >= 0
orig(this.theArray[post(this.topOfStack)..]) elements == null
this.theArray.getClass().getName() != orig(x.getClass().getName())
orig(x.getClass().getName()) in this.theArray[].getClass().getName()
this.topOfStack - orig(this.topOfStack) - 1 == 0
(size(this.theArray[])-1 == 0) ==> (this.topOfStack == 0)
orig(this.topOfStack) < size(this.theArray[])-1
orig(this.theArray[post(this.topOfStack)..]) elements == orig(this.theArray[post(this.topOfStack)])
===========================================================================
DataStructures.StackArTester:::CLASS
DataStructures.StackArTester.s != null
DataStructures.StackArTester.s.theArray != null
DataStructures.StackArTester.s.theArray.getClass().getName() == java.lang.Object[].class
DataStructures.StackArTester.s.topOfStack >= -1
DataStructures.StackArTester.rnd has only one value
DataStructures.StackArTester.rnd != null
DataStructures.StackArTester.s.theArray[DataStructures.StackArTester.s.topOfStack+1..] elements == null
DataStructures.StackArTester.s.theArray[0..DataStructures.StackArTester.s.topOfStack] contains no duplicates
DataStructures.StackArTester.s.theArray[0..DataStructures.StackArTester.s.topOfStack] elements != null
DataStructures.StackArTester.s.topOfStack <= size(DataStructures.StackArTester.s.theArray[])-1
===========================================================================
DataStructures.StackArTester.push():::ENTER
DataStructures.StackArTester.s.topOfStack < size(DataStructures.StackArTester.s.theArray[])-1
===========================================================================
DataStructures.StackArTester.push():::EXIT
DataStructures.StackArTester.s == orig(DataStructures.StackArTester.s)
DataStructures.StackArTester.s.theArray == orig(DataStructures.StackArTester.s.theArray)
DataStructures.StackArTester.s.theArray.getClass().getName() == orig(DataStructures.StackArTester.s.theArray.getClass().getName())
DataStructures.StackArTester.rnd == orig(DataStructures.StackArTester.rnd)
size(DataStructures.StackArTester.s.theArray[]) == orig(size(DataStructures.StackArTester.s.theArray[]))
DataStructures.StackArTester.s.theArray[DataStructures.StackArTester.s.topOfStack+1..] == orig(DataStructures.StackArTester.s.theArray[post(DataStructures.StackArTester.s.topOfStack)+1..])
DataStructures.StackArTester.s.theArray[0..DataStructures.StackArTester.s.topOfStack-1] == orig(DataStructures.StackArTester.s.theArray[0..post(DataStructures.StackArTester.s.topOfStack)-1])
DataStructures.StackArTester.s.theArray[0..DataStructures.StackArTester.s.topOfStack-1] == orig(DataStructures.StackArTester.s.theArray[0..DataStructures.StackArTester.s.topOfStack])
DataStructures.StackArTester.s.topOfStack >= 0
orig(DataStructures.StackArTester.s.theArray[post(DataStructures.StackArTester.s.topOfStack)..]) elements == null
orig(DataStructures.StackArTester.s.theArray[0..post(DataStructures.StackArTester.s.topOfStack)]) contains no duplicates
DataStructures.StackArTester.s.topOfStack - orig(DataStructures.StackArTester.s.topOfStack) - 1 == 0
(size(DataStructures.StackArTester.s.theArray[])-1 == 0) ==> (DataStructures.StackArTester.s.topOfStack == 0)
orig(DataStructures.StackArTester.s.topOfStack) < size(DataStructures.StackArTester.s.theArray[])-1
orig(DataStructures.StackArTester.s.theArray[post(DataStructures.StackArTester.s.topOfStack)..]) elements == orig(DataStructures.StackArTester.s.theArray[post(DataStructures.StackArTester.s.topOfStack)])
