===========================================================================
DataStructures.MyInteger:::OBJECT
this.value == 0
===========================================================================
DataStructures.MyInteger.MyInteger(int):::ENTER
x == 0
===========================================================================
DataStructures.MyInteger.MyInteger(int):::EXIT
this.value == orig(x)
===========================================================================
DataStructures.Overflow:::OBJECT
this has only one value
===========================================================================
DataStructures.Overflow.Overflow():::EXIT
===========================================================================
DataStructures.StackAr:::OBJECT
this.theArray != null
this.theArray.getClass().getName() == java.lang.Object[].class
this.topOfStack >= -1
this.theArray[this.topOfStack+1..] elements == null
this.theArray[0..this.topOfStack] elements != null
this.topOfStack <= size(this.theArray[])-1
===========================================================================
DataStructures.StackAr.StackAr(int):::ENTER
capacity >= 0
===========================================================================
DataStructures.StackAr.StackAr(int):::EXIT
orig(capacity) == size(this.theArray[])
this.theArray[] elements == null
this.theArray[].getClass().getName() elements == null
this.topOfStack == -1
this.theArray[0..this.topOfStack] == []
===========================================================================
DataStructures.StackAr.isEmpty():::ENTER
===========================================================================
DataStructures.StackAr.isEmpty():::EXIT
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.theArray[] == orig(this.theArray[])
this.topOfStack == orig(this.topOfStack)
(this.topOfStack == -1)  <==>  (return == true)
(this.topOfStack == -1)  ==>  (this.theArray[0..this.topOfStack] == [])
(this.topOfStack == -1)  ==>  (this.theArray[] elements == null)
(this.topOfStack == -1)  ==>  (this.theArray[].getClass().getName() elements == null)
(this.topOfStack >= 0)  <==>  (return == false)
(this.topOfStack >= 0)  ==>  ((size(this.theArray[])-1 == 0) ==> (this.topOfStack == 0))
===========================================================================
DataStructures.StackAr.isEmpty():::EXIT;condition="return == true"
this.theArray[] elements == null
this.theArray[].getClass().getName() elements == null
this.topOfStack == -1
return == true
this.theArray[0..this.topOfStack] == []
===========================================================================
DataStructures.StackAr.isEmpty():::EXIT;condition="not(return == true)"
this.topOfStack >= 0
return == false
(size(this.theArray[])-1 == 0) ==> (this.topOfStack == 0)
===========================================================================
DataStructures.StackAr.isFull():::ENTER
===========================================================================
DataStructures.StackAr.isFull():::EXIT
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.theArray[] == orig(this.theArray[])
this.topOfStack == orig(this.topOfStack)
(return == false)  <==>  (this.theArray[this.topOfStack+1..] elements == null)
(return == false)  <==>  (this.topOfStack < size(this.theArray[])-1)
(return == true)  <==>  (this.topOfStack == size(this.theArray[])-1)
(return == true)  ==>  (this.theArray[] elements != null)
(return == true)  ==>  (this.theArray[this.topOfStack+1..] == [])
===========================================================================
DataStructures.StackAr.isFull():::EXIT;condition="return == true"
this.topOfStack == size(this.theArray[])-1
this.topOfStack == orig(size(this.theArray[]))-1
this.theArray[] elements != null
return == true
this.theArray[this.topOfStack+1..] == []
===========================================================================
DataStructures.StackAr.isFull():::EXIT;condition="not(return == true)"
return == false
this.topOfStack < size(this.theArray[])-1
===========================================================================
DataStructures.StackAr.makeEmpty():::ENTER
(this.topOfStack == 0) ==> (size(this.theArray[])-1 == 0)
===========================================================================
DataStructures.StackAr.makeEmpty():::EXIT
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
size(this.theArray[]) == orig(size(this.theArray[]))
this.theArray[orig(this.topOfStack)+1..] == orig(this.theArray[this.topOfStack+1..])
this.theArray[] elements == null
this.theArray[].getClass().getName() elements == null
this.topOfStack == -1
this.theArray[0..this.topOfStack] == []
this.topOfStack <= orig(this.topOfStack)
(orig(this.topOfStack) == 0) ==> (size(this.theArray[])-1 == 0)
orig(this.topOfStack) <= size(this.theArray[])-1
===========================================================================
DataStructures.StackAr.pop():::ENTER
this.topOfStack >= 0
this.theArray[0..this.topOfStack] contains no duplicates
===========================================================================
DataStructures.StackAr.pop():::EXIT
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
size(this.theArray[]) == orig(size(this.theArray[]))
this.theArray[0..this.topOfStack] == orig(this.theArray[0..post(this.topOfStack)])
this.theArray[0..this.topOfStack] == orig(this.theArray[0..this.topOfStack-1])
this.theArray[orig(this.topOfStack)+1..] == orig(this.theArray[this.topOfStack+1..])
this.theArray[orig(this.topOfStack)] == null
this.theArray[0..orig(this.topOfStack)] contains no duplicates
this.topOfStack - orig(this.topOfStack) + 1 == 0
this.topOfStack < size(this.theArray[])-1
orig(this.topOfStack) <= size(this.theArray[])-1
this.theArray[this.topOfStack+1..] elements == this.theArray[orig(this.topOfStack)]
===========================================================================
DataStructures.StackAr.push(java.lang.Object):::ENTER
x != null
this.theArray.getClass().getName() != x.getClass().getName()
this.topOfStack < size(this.theArray[])-1
===========================================================================
DataStructures.StackAr.push(java.lang.Object):::EXIT
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
orig(x) == this.theArray[this.topOfStack]
size(this.theArray[]) == orig(size(this.theArray[]))
this.theArray[this.topOfStack+1..] == orig(this.theArray[post(this.topOfStack)+1..])
this.theArray[0..this.topOfStack-1] == orig(this.theArray[0..post(this.topOfStack)-1])
this.theArray[0..this.topOfStack-1] == orig(this.theArray[0..this.topOfStack])
this.topOfStack >= 0
orig(this.theArray[post(this.topOfStack)..]) elements == null
this.theArray.getClass().getName() != orig(x.getClass().getName())
orig(x.getClass().getName()) in this.theArray[].getClass().getName()
this.topOfStack - orig(this.topOfStack) - 1 == 0
(size(this.theArray[])-1 == 0) ==> (this.topOfStack == 0)
orig(this.topOfStack) < size(this.theArray[])-1
orig(this.theArray[post(this.topOfStack)..]) elements == orig(this.theArray[post(this.topOfStack)])
===========================================================================
DataStructures.StackAr.top():::ENTER
===========================================================================
DataStructures.StackAr.top():::EXIT74
this.theArray[] elements == null
this.theArray[].getClass().getName() elements == null
this.topOfStack == -1
return == null
this.theArray[0..this.topOfStack] == []
this.theArray[] elements == return
===========================================================================
DataStructures.StackAr.top():::EXIT75
return == this.theArray[this.topOfStack]
return == this.theArray[orig(this.topOfStack)]
return == orig(this.theArray[post(this.topOfStack)])
return == orig(this.theArray[this.topOfStack])
this.topOfStack >= 0
(size(this.theArray[])-1 == 0) ==> (this.topOfStack == 0)
===========================================================================
DataStructures.StackAr.top():::EXIT
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.theArray[] == orig(this.theArray[])
this.topOfStack == orig(this.topOfStack)
(this.topOfStack == -1)  <==>  (return == null)
(this.topOfStack == -1)  ==>  (this.theArray[0..this.topOfStack] == [])
(this.topOfStack == -1)  ==>  (this.theArray[] elements == null)
(this.topOfStack == -1)  ==>  (this.theArray[] elements == return)
(this.topOfStack == -1)  ==>  (this.theArray[].getClass().getName() elements == null)
(this.topOfStack == -1)  ==>  (this.theArray[this.topOfStack+1..] elements == return)
(this.topOfStack >= 0)  ==>  ((size(this.theArray[])-1 == 0) ==> (this.topOfStack == 0))
(this.topOfStack >= 0)  ==>  (return == orig(this.theArray[post(this.topOfStack)]))
(this.topOfStack >= 0)  ==>  (return == orig(this.theArray[this.topOfStack]))
(this.topOfStack >= 0)  ==>  (return == this.theArray[orig(this.topOfStack)])
(this.topOfStack >= 0)  ==>  (return == this.theArray[this.topOfStack])
(this.topOfStack >= 0)  ==>  (return.getClass().getName() in this.theArray[].getClass().getName())
(this.topOfStack >= 0)  ==>  (this.theArray.getClass().getName() != return.getClass().getName())
this.theArray.getClass().getName() != return.getClass().getName()
return.getClass().getName() in this.theArray[].getClass().getName()
===========================================================================
DataStructures.StackAr.topAndPop():::ENTER
this.theArray[0..this.topOfStack] contains no duplicates
===========================================================================
DataStructures.StackAr.topAndPop():::EXIT108
this.theArray[] == orig(this.theArray[])
this.topOfStack == orig(this.topOfStack)
this.theArray[] elements == null
this.theArray[].getClass().getName() elements == null
this.topOfStack == -1
return == null
this.theArray[0..this.topOfStack] == []
this.theArray[] elements == return
===========================================================================
DataStructures.StackAr.topAndPop():::EXIT111
return == orig(this.theArray[this.topOfStack])
this.theArray[0..this.topOfStack] == orig(this.theArray[0..this.topOfStack-1])
orig(this.topOfStack) >= 0
this.theArray[orig(this.topOfStack)] == null
this.topOfStack - orig(this.topOfStack) + 1 == 0
this.topOfStack < size(this.theArray[])-1
(size(this.theArray[])-1 == 0) ==> (orig(this.topOfStack) == 0)
this.theArray[this.topOfStack+1..] elements == this.theArray[orig(this.topOfStack)]
===========================================================================
DataStructures.StackAr.topAndPop():::EXIT
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
size(this.theArray[]) == orig(size(this.theArray[]))
this.theArray[0..this.topOfStack] == orig(this.theArray[0..post(this.topOfStack)])
this.theArray[orig(this.topOfStack)+1..] == orig(this.theArray[this.topOfStack+1..])
(orig(this.topOfStack) >= 0)  ==>  ((size(this.theArray[])-1 == 0) ==> (orig(this.topOfStack) == 0))
(orig(this.topOfStack) >= 0)  ==>  (return == orig(this.theArray[this.topOfStack]))
(orig(this.topOfStack) >= 0)  ==>  (return.getClass().getName() in orig(this.theArray[].getClass().getName()))
(orig(this.topOfStack) >= 0)  ==>  (this.theArray.getClass().getName() != return.getClass().getName())
(orig(this.topOfStack) >= 0)  ==>  (this.theArray[0..this.topOfStack] == orig(this.theArray[0..this.topOfStack-1]))
(orig(this.topOfStack) >= 0)  ==>  (this.theArray[orig(this.topOfStack)..] elements == null)
(orig(this.topOfStack) >= 0)  ==>  (this.theArray[orig(this.topOfStack)..] elements == this.theArray[orig(this.topOfStack)])
(orig(this.topOfStack) >= 0)  ==>  (this.theArray[orig(this.topOfStack)] == null)
(orig(this.topOfStack) >= 0)  ==>  (this.theArray[this.topOfStack+1..] elements == this.theArray[orig(this.topOfStack)])
(orig(this.topOfStack) >= 0)  ==>  (this.topOfStack - orig(this.topOfStack) + 1 == 0)
(orig(this.topOfStack) >= 0)  ==>  (this.topOfStack < size(this.theArray[])-1)
(return == null)  <==>  (orig(this.topOfStack) == -1)
(return == null)  <==>  (this.topOfStack == orig(this.topOfStack))
(return == null)  ==>  (orig(this.theArray[0..this.topOfStack]) == [])
(return == null)  ==>  (orig(this.theArray[]) elements == null)
(return == null)  ==>  (orig(this.theArray[]) elements == return)
(return == null)  ==>  (orig(this.theArray[].getClass().getName()) elements == null)
(return == null)  ==>  (orig(this.theArray[post(this.topOfStack)+1..]) elements == null)
(return == null)  ==>  (orig(this.theArray[post(this.topOfStack)+1..]) elements == return)
(return == null)  ==>  (this.theArray[0..orig(this.topOfStack)] == [])
(return == null)  ==>  (this.theArray[0..this.topOfStack] == [])
(return == null)  ==>  (this.theArray[] == orig(this.theArray[]))
(return == null)  ==>  (this.theArray[] elements == null)
(return == null)  ==>  (this.theArray[] elements == return)
(return == null)  ==>  (this.theArray[].getClass().getName() elements == null)
(return == null)  ==>  (this.theArray[orig(this.topOfStack)+1..] elements == return)
(return == null)  ==>  (this.theArray[this.topOfStack+1..] elements == return)
(return == null)  ==>  (this.topOfStack == -1)
this.theArray[0..orig(this.topOfStack)] contains no duplicates
this.theArray.getClass().getName() != return.getClass().getName()
this.topOfStack <= orig(this.topOfStack)
return.getClass().getName() in orig(this.theArray[].getClass().getName())
orig(this.topOfStack) <= size(this.theArray[])-1
===========================================================================
DataStructures.StackArTester:::CLASS
DataStructures.StackArTester.s != null
DataStructures.StackArTester.s.theArray != null
DataStructures.StackArTester.s.theArray.getClass().getName() == java.lang.Object[].class
DataStructures.StackArTester.s.topOfStack >= -1
DataStructures.StackArTester.rnd has only one value
DataStructures.StackArTester.rnd != null
DataStructures.StackArTester.s.theArray[DataStructures.StackArTester.s.topOfStack+1..] elements == null
DataStructures.StackArTester.s.theArray[0..DataStructures.StackArTester.s.topOfStack] elements != null
DataStructures.StackArTester.s.topOfStack <= size(DataStructures.StackArTester.s.theArray[])-1
===========================================================================
DataStructures.StackArTester.createItem(int):::ENTER
phase >= 0
DataStructures.StackArTester.s.theArray[0..DataStructures.StackArTester.s.topOfStack] contains no duplicates
DataStructures.StackArTester.s.topOfStack < size(DataStructures.StackArTester.s.theArray[])-1
phase <= size(DataStructures.StackArTester.s.theArray[])
phase != size(DataStructures.StackArTester.s.theArray[])-1
===========================================================================
DataStructures.StackArTester.createItem(int):::EXIT20
return.getClass().getName() == DataStructures.MyInteger.class
orig(phase) == 0
size(DataStructures.StackArTester.s.theArray[]) one of { 2, 10, 20 }
DataStructures.StackArTester.s.theArray[0..orig(phase)-1] == []
orig(phase) < size(DataStructures.StackArTester.s.theArray[])-1
DataStructures.StackArTester.s.theArray[0..orig(phase)] elements == DataStructures.StackArTester.s.theArray[orig(phase)]
orig(phase) == (DataStructures.StackArTester.s.topOfStack / size(DataStructures.StackArTester.s.theArray[]))
orig(phase) == (DataStructures.StackArTester.s.topOfStack / size(DataStructures.StackArTester.s.theArray[])-1)
===========================================================================
DataStructures.StackArTester.createItem(int):::EXIT22
return.getClass().getName() == java.lang.Object.class
orig(phase) == 1
DataStructures.StackArTester.s.theArray[0..orig(phase)-1] elements == DataStructures.StackArTester.s.theArray[orig(phase)-1]
===========================================================================
DataStructures.StackArTester.createItem(int):::EXIT24
return.getClass().getName() == DataStructures.MyInteger.class
orig(phase) == 2
size(DataStructures.StackArTester.s.theArray[]) one of { 2, 10, 20 }
===========================================================================
DataStructures.StackArTester.createItem(int):::EXIT26
return.getClass().getName() == java.lang.Object.class
orig(phase) == 3
size(DataStructures.StackArTester.s.theArray[]) one of { 3, 10, 20 }
(size(DataStructures.StackArTester.s.theArray[]) >> size(DataStructures.StackArTester.s.theArray[])-1 == 0)
===========================================================================
DataStructures.StackArTester.createItem(int):::EXIT
DataStructures.StackArTester.s == orig(DataStructures.StackArTester.s)
DataStructures.StackArTester.s.theArray == orig(DataStructures.StackArTester.s.theArray)
DataStructures.StackArTester.s.theArray.getClass().getName() == orig(DataStructures.StackArTester.s.theArray.getClass().getName())
DataStructures.StackArTester.s.theArray[] == orig(DataStructures.StackArTester.s.theArray[])
DataStructures.StackArTester.s.topOfStack == orig(DataStructures.StackArTester.s.topOfStack)
DataStructures.StackArTester.rnd == orig(DataStructures.StackArTester.rnd)
return != null
DataStructures.StackArTester.s.theArray[0..DataStructures.StackArTester.s.topOfStack] contains no duplicates
DataStructures.StackArTester.s.theArray.getClass().getName() != return.getClass().getName()
DataStructures.StackArTester.s.topOfStack < size(DataStructures.StackArTester.s.theArray[])-1
orig(phase) <= size(DataStructures.StackArTester.s.theArray[])
orig(phase) != size(DataStructures.StackArTester.s.theArray[])-1
===========================================================================
DataStructures.StackArTester.doNew(int):::ENTER
DataStructures.StackArTester.s.theArray[] elements == null
DataStructures.StackArTester.s.theArray[].getClass().getName() elements == null
DataStructures.StackArTester.s.topOfStack == -1
size >= 0
DataStructures.StackArTester.s.theArray[0..DataStructures.StackArTester.s.topOfStack] == []
DataStructures.StackArTester.s.topOfStack < size
size != size(DataStructures.StackArTester.s.theArray[])-1
===========================================================================
DataStructures.StackArTester.doNew(int):::EXIT
DataStructures.StackArTester.s.theArray.getClass().getName() == orig(DataStructures.StackArTester.s.theArray.getClass().getName())
DataStructures.StackArTester.s.topOfStack == orig(DataStructures.StackArTester.s.topOfStack)
DataStructures.StackArTester.rnd == orig(DataStructures.StackArTester.rnd)
orig(size) == size(DataStructures.StackArTester.s.theArray[])
DataStructures.StackArTester.s.theArray[] elements == null
DataStructures.StackArTester.s.theArray[].getClass().getName() elements == null
DataStructures.StackArTester.s.topOfStack == -1
DataStructures.StackArTester.s.theArray[0..DataStructures.StackArTester.s.topOfStack] == []
DataStructures.StackArTester.s.topOfStack <= orig(size(DataStructures.StackArTester.s.theArray[]))-1
===========================================================================
DataStructures.StackArTester.fill(int):::ENTER
DataStructures.StackArTester.s.theArray[] elements == null
DataStructures.StackArTester.s.theArray[].getClass().getName() elements == null
DataStructures.StackArTester.s.topOfStack == -1
DataStructures.StackArTester.s.theArray[0..DataStructures.StackArTester.s.topOfStack] == []
DataStructures.StackArTester.s.topOfStack < n
(n == 0) ==> (size(DataStructures.StackArTester.s.theArray[]) == 0)
n >= size(DataStructures.StackArTester.s.theArray[])
===========================================================================
DataStructures.StackArTester.fill(int):::EXIT
DataStructures.StackArTester.s.theArray.getClass().getName() == orig(DataStructures.StackArTester.s.theArray.getClass().getName())
DataStructures.StackArTester.s.topOfStack == orig(DataStructures.StackArTester.s.topOfStack)
DataStructures.StackArTester.rnd == orig(DataStructures.StackArTester.rnd)
orig(n) == size(DataStructures.StackArTester.s.theArray[])
DataStructures.StackArTester.s.theArray[] elements == null
DataStructures.StackArTester.s.theArray[].getClass().getName() elements == null
DataStructures.StackArTester.s.topOfStack == -1
DataStructures.StackArTester.s.theArray[0..DataStructures.StackArTester.s.topOfStack] == []
orig(DataStructures.StackArTester.s.theArray[]) is a subsequence of DataStructures.StackArTester.s.theArray[]
DataStructures.StackArTester.s.topOfStack <= orig(size(DataStructures.StackArTester.s.theArray[]))-1
(size(DataStructures.StackArTester.s.theArray[])-1 == 0) ==> (orig(size(DataStructures.StackArTester.s.theArray[])) == 0)
size(DataStructures.StackArTester.s.theArray[])-1 >= orig(size(DataStructures.StackArTester.s.theArray[]))-1
===========================================================================
DataStructures.StackArTester.main(java.lang.String[]):::ENTER
DataStructures.StackArTester.s.topOfStack == size(DataStructures.StackArTester.s.theArray[])-1
DataStructures.StackArTester.s.topOfStack == size(args[])-1
DataStructures.StackArTester.s has only one value
DataStructures.StackArTester.s.theArray has only one value
DataStructures.StackArTester.s.theArray[] == []
DataStructures.StackArTester.s.theArray[].getClass().getName() == []
args has only one value
args.getClass().getName() == java.lang.String[].class
args[] == []
args[].toString == []
DataStructures.StackArTester.s.theArray[] is the reverse of args[]
===========================================================================
DataStructures.StackArTester.main(java.lang.String[]):::EXIT
DataStructures.StackArTester.s.theArray.getClass().getName() == orig(DataStructures.StackArTester.s.theArray.getClass().getName())
DataStructures.StackArTester.s.topOfStack == orig(DataStructures.StackArTester.s.topOfStack)
DataStructures.StackArTester.s.topOfStack == size(args[])-1
DataStructures.StackArTester.s.topOfStack == orig(size(DataStructures.StackArTester.s.theArray[]))-1
DataStructures.StackArTester.s.topOfStack == orig(size(args[]))-1
DataStructures.StackArTester.rnd == orig(DataStructures.StackArTester.rnd)
args[] == orig(args[])
DataStructures.StackArTester.s has only one value
DataStructures.StackArTester.s.theArray has only one value
DataStructures.StackArTester.s.theArray[] contains only nulls and has only one value, of length 20
DataStructures.StackArTester.s.theArray[] elements == null
DataStructures.StackArTester.s.theArray[].getClass().getName() == [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
DataStructures.StackArTester.s.theArray[].getClass().getName() elements == null
args[] == []
args[].toString == []
size(DataStructures.StackArTester.s.theArray[]) == 20
args[] is the reverse of orig(DataStructures.StackArTester.s.theArray[])
===========================================================================
DataStructures.StackArTester.observe():::ENTER
===========================================================================
DataStructures.StackArTester.observe():::EXIT
DataStructures.StackArTester.s == orig(DataStructures.StackArTester.s)
DataStructures.StackArTester.s.theArray == orig(DataStructures.StackArTester.s.theArray)
DataStructures.StackArTester.s.theArray.getClass().getName() == orig(DataStructures.StackArTester.s.theArray.getClass().getName())
DataStructures.StackArTester.s.theArray[] == orig(DataStructures.StackArTester.s.theArray[])
DataStructures.StackArTester.s.topOfStack == orig(DataStructures.StackArTester.s.topOfStack)
DataStructures.StackArTester.rnd == orig(DataStructures.StackArTester.rnd)
===========================================================================
DataStructures.StackArTester.push():::ENTER
DataStructures.StackArTester.s.theArray[0..DataStructures.StackArTester.s.topOfStack] contains no duplicates
DataStructures.StackArTester.s.topOfStack < size(DataStructures.StackArTester.s.theArray[])-1
===========================================================================
DataStructures.StackArTester.push():::EXIT
DataStructures.StackArTester.s == orig(DataStructures.StackArTester.s)
DataStructures.StackArTester.s.theArray == orig(DataStructures.StackArTester.s.theArray)
DataStructures.StackArTester.s.theArray.getClass().getName() == orig(DataStructures.StackArTester.s.theArray.getClass().getName())
DataStructures.StackArTester.rnd == orig(DataStructures.StackArTester.rnd)
size(DataStructures.StackArTester.s.theArray[]) == orig(size(DataStructures.StackArTester.s.theArray[]))
DataStructures.StackArTester.s.theArray[DataStructures.StackArTester.s.topOfStack+1..] == orig(DataStructures.StackArTester.s.theArray[post(DataStructures.StackArTester.s.topOfStack)+1..])
DataStructures.StackArTester.s.theArray[0..DataStructures.StackArTester.s.topOfStack-1] == orig(DataStructures.StackArTester.s.theArray[0..post(DataStructures.StackArTester.s.topOfStack)-1])
DataStructures.StackArTester.s.theArray[0..DataStructures.StackArTester.s.topOfStack-1] == orig(DataStructures.StackArTester.s.theArray[0..DataStructures.StackArTester.s.topOfStack])
DataStructures.StackArTester.s.topOfStack >= 0
DataStructures.StackArTester.s.theArray[0..DataStructures.StackArTester.s.topOfStack] contains no duplicates
orig(DataStructures.StackArTester.s.theArray[post(DataStructures.StackArTester.s.topOfStack)..]) elements == null
orig(DataStructures.StackArTester.s.theArray[0..post(DataStructures.StackArTester.s.topOfStack)]) contains no duplicates
DataStructures.StackArTester.s.topOfStack - orig(DataStructures.StackArTester.s.topOfStack) - 1 == 0
(size(DataStructures.StackArTester.s.theArray[])-1 == 0) ==> (DataStructures.StackArTester.s.topOfStack == 0)
orig(DataStructures.StackArTester.s.topOfStack) < size(DataStructures.StackArTester.s.theArray[])-1
orig(DataStructures.StackArTester.s.theArray[post(DataStructures.StackArTester.s.topOfStack)..]) elements == orig(DataStructures.StackArTester.s.theArray[post(DataStructures.StackArTester.s.topOfStack)])
===========================================================================
DataStructures.StackArTester.topOrPop():::ENTER
DataStructures.StackArTester.s.theArray[0..DataStructures.StackArTester.s.topOfStack] contains no duplicates
===========================================================================
DataStructures.StackArTester.topOrPop():::EXIT
DataStructures.StackArTester.s == orig(DataStructures.StackArTester.s)
DataStructures.StackArTester.s.theArray == orig(DataStructures.StackArTester.s.theArray)
DataStructures.StackArTester.s.theArray.getClass().getName() == orig(DataStructures.StackArTester.s.theArray.getClass().getName())
DataStructures.StackArTester.rnd == orig(DataStructures.StackArTester.rnd)
size(DataStructures.StackArTester.s.theArray[]) == orig(size(DataStructures.StackArTester.s.theArray[]))
DataStructures.StackArTester.s.theArray[0..DataStructures.StackArTester.s.topOfStack] == orig(DataStructures.StackArTester.s.theArray[0..post(DataStructures.StackArTester.s.topOfStack)])
DataStructures.StackArTester.s.theArray[orig(DataStructures.StackArTester.s.topOfStack)+1..] == orig(DataStructures.StackArTester.s.theArray[DataStructures.StackArTester.s.topOfStack+1..])
DataStructures.StackArTester.s.theArray[0..orig(DataStructures.StackArTester.s.topOfStack)] contains no duplicates
DataStructures.StackArTester.s.topOfStack <= orig(DataStructures.StackArTester.s.topOfStack)
orig(DataStructures.StackArTester.s.topOfStack) <= size(DataStructures.StackArTester.s.theArray[])-1
