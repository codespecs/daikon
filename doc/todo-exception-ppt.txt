Appendix A - Supporting Exception exits in the Daikon PPT Hierarchy

Goals:
 * Create more complete specifications, such as "exsures" clauses.
 * Create more accurate preconditions, since presently all entries
   associated with exceptional exit are ignored.
 * Separate "expected" exceptions that don't necessarily indicate undesired
   behavior (while running a test suite) from "unexpected" exceptions that
   indicate a code failure.  (This is related to the above.)
 * Perhaps, get output even when there is never an
   exit (a tail call to another routine, and eventually System.exit() is
   called without any return having occurred.


Mike's proposal:

  Add new program points for exceptional exit.

  Technique:

  The general idea is to add a new exit point for each declared Exception,
  plus one for undeclared Exceptions/Errors/Throwables.

  There will be three types of procedure exit:
   * possibly many from return statements
   * possibly many resulting from throwing different declared exceptions
   * exactly one for throwing an undeclared exception (e.g., Error,
     RuntimeException, Throwable)

  What does the hierarchy look like?  For example, when combining exit points
  into a single aggregate exit point, how should the new exceptional program
  points factor in?  Undeclared exceptions should not be combined with normal
  returns, but how should declared exceptions be handled?  Should there be 2
  or 3 top-level exit points, and if 2, with what should declared exceptions
  be combined (probably the normal returns)?  These decisions affect what
  preconditions (and other invariants) are inferred for the routine.  I lean
  somewhat toward:

                      exit
                  /          \
         normalexit          declexception
        /    |    \           /         \
    exit1  exit2  exit3    declexc1  declexc2    error

  with the error point completely unrelated to any other point in the
  hierarchy.  But I haven't fully thought this through yet, so I welcome
  comments.


Jeff's Proposal:

  It seems to me that the issue we are interested in with exceptions is
  whether or not the 'normal' invariants are violated as a result of an
  exception.  Are the invariants of an object not correctly set because
  of error exit?  Does an error exit indicate that an intended
  precondition was violated?

  It is not clear to me that we can make the assumption that declaring
  an exception implies that the invariants are maintained and the
  preconditions are ok and that not declaring it implies otherwise.

  Also, it seems that perhaps daikon can answer these questions and that
  would be an interesting result in and of itself.

  With the hierarchy as you have proposed, we exclude non-declared
  errors from the combined exit point (and thus from the enter point and
  object/class points).  We include declared errors at the combined exit
  point and its parents.

  It seems like it would be nice if we could easily see how the
  invariants differ at each level dependeng on whether or not error
  results were included.  That might nicely highlight unexpected
  results.  For example, if someone declares an exception, but not does
  not properly fix the invariants.  Consider an alternative hierarchy:

                Combined Object
                  /         \
        normal-Object        Declexc-obj
             |                    |
             |   Combined Enter   |
             |   /          \     |
        normalenter          declexc-enter
             |                    |
             |    combined exit   |
             |    /       \       |
         normalexit     declexception
        /    |    \        /       \
    exit1  exit2  exit3  declexc1  declexc2    error

  At each level we combine the error paths with the non-error paths.  If
  the invariants match (eg, normal-enter and declared-exception-enter
  have the same invariants), then everything would merge to the combined
  point (and probably nothing would need to be printed at the two
  contributing points).

  I think the two versions of the hierarchy would look very similar when
  the invariants were the same.  But when there were different
  invariants, (ie, error side is different from non-error side), these
  would be pointed out.  From the point of view of providing interesting
  information I think this would be good.  It also seems that this might
  be interesting for tools as well (eg, Carlos' error classifications).
  One could argue that any difference between the two trees is possibly
  indicative of a bug.

  This approach is more work.  We would need to create exception
  versions of each existing program point.  The creation of the
  hierarchy would have to be changed as well.  I don't think bottom up
  processing has to be changed significantly though.  I believe it
  should handle without any trouble having multiple parents for a child.
  There are also memory implications (because we need to create more
  program points).  But there are similar memory implications in the
  first hierarchy as well (there are a minimum of twice as many exit
  points).

  I'm not sure this is worth the extra effort, but it seems like it
  might be worth considering.

  Its also possible to extend this approach to non-declared exceptions
  as well. I tend to think this is not worth it.  Though it could indicate
  places where someone was assumming that that invariants were maintained and
  they were not.


Appendix B - Supporting exceptional exit points in a front end


Technique:

The general idea is to add a new exit point for each declared Exception,
plus one for undeclared Exceptions/Errors/Throwables.

There will be three types of procedure exit:
 * possibly many from return statements
 * possibly many resulting from throwing different declared exceptions
 * exactly one for throwing an undeclared exception (e.g., Error,
   RuntimeException, Throwable)


Implementation:

If a method declares that it throws DeclaredEx1, DeclaredEx2, and
DeclaredEx3, then transform it as follows.  The exceptions must be
ordered from most specific to most general, lest latter ones have no chance
of getting caught.

This code:

  int foo() throws DeclaredEx1, DeclaredEx2, DeclaredEx3 {
    body
  }

is transformed into one of the following:

  int foo() throws DeclaredEx1, DeclaredEx2, DeclaredEx3 {
    try {
      body              // includes instrumentation for normal entry and exit
    } catch (DeclaredEx1 e1) {
      print exceptional exit program point
      throw e1;         // rethrow
    } catch (DeclaredEx2 e2) {
      print exceptional exit program point
      throw e2;         // rethrow
    } catch (DeclaredEx3 e3) {
      print exceptional exit program point
      throw e3;         // rethrow
    } catch (RuntimeException e4) {
      print exceptional exit program point
      throw e4;         // rethrow
    } catch (Error e5) {
      print exceptional exit program point
      throw e5;         // rethrow
    }
  }

A challenge is that this transformation must be done in bytecode, and
with as little code duplication as possible..

Also, note that the existing DynComp tool may already do something like
this catching and rethrowing of exceptions.  See the various comments about
cleaning up the tag stack on an exception exit from a method, such as in
dcomp/DCRuntime.java .
