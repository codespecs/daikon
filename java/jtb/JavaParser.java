package jtb;

/* Generated By:JavaCC: Do not edit this line. JavaParser.java */
import java.io.*;
import jtb.syntaxtree.*;
import java.util.Vector;


public class JavaParser implements JavaParserConstants {
   int global_modifiers;
   static public final class ModifierSet
   {
      public static final int PUBLIC = 0x0001;
      public static final int PROTECTED = 0x0002;
      public static final int PRIVATE = 0x0004;
      public static final int ABSTRACT = 0x0008;
      public static final int STATIC = 0x0010;
      public static final int FINAL = 0x0020;
      public static final int SYNCHRONIZED = 0x0040;
      public static final int NATIVE = 0x0080;
      public static final int TRANSIENT = 0x0100;
      public static final int VOLATILE = 0x0200;
      public static final int STRICTFP = 0x1000;
      public boolean isPublic(int modifiers)
      {
         return (modifiers & PUBLIC) != 0;
      }
      public boolean isProtected(int modifiers)
      {
         return (modifiers & PROTECTED) != 0;
      }
      public boolean isPrivate(int modifiers)
      {
         return (modifiers & PRIVATE) != 0;
      }
      public boolean isStatic(int modifiers)
      {
         return (modifiers & STATIC) != 0;
      }
      public boolean isAbstract(int modifiers)
      {
         return (modifiers & ABSTRACT) != 0;
      }
      public boolean isFinal(int modifiers)
      {
         return (modifiers & FINAL) != 0;
      }
      public boolean isNative(int modifiers)
      {
         return (modifiers & NATIVE) != 0;
      }
      public boolean isStrictfp(int modifiers)
      {
         return (modifiers & STRICTFP) != 0;
      }
      public boolean isSynchronized(int modifiers)
      {
         return (modifiers & SYNCHRONIZED) != 0;
      }
      public boolean isTransient(int modifiers)
      {
         return (modifiers & TRANSIENT) != 0;
      }
      public boolean isVolatile(int modifiers)
      {
         return (modifiers & VOLATILE) != 0;
      }
      static int removeModifier(int modifiers,int mod)
      {
         return modifiers & ~mod;
      }
   }
   public JavaParser(String fileName)
   {
      this(System.in);
      try
      {
         ReInit(new FileInputStream(new File(fileName)));
      }
      catch (Exception e)
      {
         e.printStackTrace();
      }
   }
   public static void main(String args[])
   {
      JavaParser parser;
      if ( args.length == 0 )
      {
         System.out.println("Java Parser Version 1.1:  Reading from standard input . . .");
         parser = new JavaParser(System.in);
      }
      else
         if ( args.length == 1 )
         {
            System.out.println("Java Parser Version 1.1:  Reading from file " + args[0]+ " . . .");
            try
            {
               parser = new JavaParser(new java.io.FileInputStream(args[0]));
            }
            catch (java.io.FileNotFoundException e)
            {
               System.out.println("Java Parser Version 1.1:  File " + args[0]+ " not found.");
               return;
            }
         }
         else
         {
            System.out.println("Java Parser Version 1.1:  Usage is one of:");
            System.out.println("         java JavaParser < inputfile");
            System.out.println("OR");
            System.out.println("         java JavaParser inputfile");
            return;
         }
      try
      {
         parser.CompilationUnit();
         System.out.println("Java Parser Version 1.1:  Java program parsed successfully.");
      }
      catch (ParseException e)
      {
         System.out.println(e.getMessage());
         System.out.println("Java Parser Version 1.1:  Encountered errors during parse.");
      }
   }

  final public CompilationUnit CompilationUnit() throws ParseException {
   NodeOptional n0 = new NodeOptional();
   PackageDeclaration n1;
   NodeListOptional n2 = new NodeListOptional();
   ImportDeclaration n3;
   NodeListOptional n4 = new NodeListOptional();
   TypeDeclaration n5;
   NodeOptional n6 = new NodeOptional();
   NodeToken n7;
   Token n8;
   NodeOptional n9 = new NodeOptional();
   NodeToken n10;
   Token n11;
   NodeToken n12;
   Token n13;
    if (jj_2_1(2147483647)) {
      n1 = PackageDeclaration();
        n0.addNode(n1);
    } else {
      ;
    }
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IMPORT:
        ;
        break;
      default:
        break label_1;
      }
      n3 = ImportDeclaration();
        n2.addNode(n3);
    }
     n2.nodes.trimToSize();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case CLASS:
      case ENUM:
      case FINAL:
      case INTERFACE:
      case NATIVE:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case STATIC:
      case STRICTFP:
      case SYNCHRONIZED:
      case TRANSIENT:
      case VOLATILE:
      case SEMICOLON:
      case AT:
        ;
        break;
      default:
        break label_2;
      }
      n5 = TypeDeclaration();
        n4.addNode(n5);
    }
     n4.nodes.trimToSize();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 127:
      n8 = jj_consume_token(127);
                      n7 = JTBToolkit.makeNodeToken(n8);
        n6.addNode(n7);
      break;
    default:
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STUFF_TO_IGNORE:
      n11 = jj_consume_token(STUFF_TO_IGNORE);
                                  n10 = JTBToolkit.makeNodeToken(n11);
        n9.addNode(n10);
      break;
    default:
      ;
    }
    n13 = jj_consume_token(0);
      n13.beginColumn++; n13.endColumn++;
      n12 = JTBToolkit.makeNodeToken(n13);
     {if (true) return new CompilationUnit(n0,n2,n4,n6,n9,n12);}
    throw new Error("Missing return statement in function");
  }

  final public PackageDeclaration PackageDeclaration() throws ParseException {
   Modifiers n0;
   NodeToken n1;
   Token n2;
   Name n3;
   NodeToken n4;
   Token n5;
    n0 = Modifiers();
    n2 = jj_consume_token(PACKAGE);
                  n1 = JTBToolkit.makeNodeToken(n2);
    n3 = Name();
    n5 = jj_consume_token(SEMICOLON);
            n4 = JTBToolkit.makeNodeToken(n5);
     {if (true) return new PackageDeclaration(n0,n1,n3,n4);}
    throw new Error("Missing return statement in function");
  }

  final public ImportDeclaration ImportDeclaration() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeToken n3;
   Token n4;
   Name n5;
   NodeOptional n6 = new NodeOptional();
   NodeSequence n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
   NodeToken n12;
   Token n13;
    n1 = jj_consume_token(IMPORT);
                 n0 = JTBToolkit.makeNodeToken(n1);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STATIC:
      n4 = jj_consume_token(STATIC);
                    n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      break;
    default:
      ;
    }
    n5 = Name();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOT:
        n7 = new NodeSequence(2);
      n9 = jj_consume_token(DOT);
               n8 = JTBToolkit.makeNodeToken(n9);
        n7.addNode(n8);
      n11 = jj_consume_token(STAR);
                n10 = JTBToolkit.makeNodeToken(n11);
        n7.addNode(n10);
        n6.addNode(n7);
      break;
    default:
      ;
    }
    n13 = jj_consume_token(SEMICOLON);
             n12 = JTBToolkit.makeNodeToken(n13);
     {if (true) return new ImportDeclaration(n0,n2,n5,n6,n12);}
    throw new Error("Missing return statement in function");
  }

  final public Modifiers Modifiers() throws ParseException {
   NodeListOptional n0 = new NodeListOptional();
   NodeChoice n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
   NodeToken n12;
   Token n13;
   NodeToken n14;
   Token n15;
   NodeToken n16;
   Token n17;
   NodeToken n18;
   Token n19;
   NodeToken n20;
   Token n21;
   NodeToken n22;
   Token n23;
   Annotation n24;

   int modifiers = 0;
    label_3:
    while (true) {
      if (jj_2_2(2)) {
        ;
      } else {
        break label_3;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PUBLIC:
        n3 = jj_consume_token(PUBLIC);
                          n2 = JTBToolkit.makeNodeToken(n3);
               modifiers |= ModifierSet.PUBLIC;
              n1 = new NodeChoice(n2, 0);
        break;
      case STATIC:
        n5 = jj_consume_token(STATIC);
                          n4 = JTBToolkit.makeNodeToken(n5);
               modifiers |= ModifierSet.STATIC;
              n1 = new NodeChoice(n4, 1);
        break;
      case PROTECTED:
        n7 = jj_consume_token(PROTECTED);
                             n6 = JTBToolkit.makeNodeToken(n7);
               modifiers |= ModifierSet.PROTECTED;
              n1 = new NodeChoice(n6, 2);
        break;
      case PRIVATE:
        n9 = jj_consume_token(PRIVATE);
                           n8 = JTBToolkit.makeNodeToken(n9);
               modifiers |= ModifierSet.PRIVATE;
              n1 = new NodeChoice(n8, 3);
        break;
      case FINAL:
        n11 = jj_consume_token(FINAL);
                          n10 = JTBToolkit.makeNodeToken(n11);
               modifiers |= ModifierSet.FINAL;
              n1 = new NodeChoice(n10, 4);
        break;
      case ABSTRACT:
        n13 = jj_consume_token(ABSTRACT);
                             n12 = JTBToolkit.makeNodeToken(n13);
               modifiers |= ModifierSet.ABSTRACT;
              n1 = new NodeChoice(n12, 5);
        break;
      case SYNCHRONIZED:
        n15 = jj_consume_token(SYNCHRONIZED);
                                 n14 = JTBToolkit.makeNodeToken(n15);
               modifiers |= ModifierSet.SYNCHRONIZED;
              n1 = new NodeChoice(n14, 6);
        break;
      case NATIVE:
        n17 = jj_consume_token(NATIVE);
                           n16 = JTBToolkit.makeNodeToken(n17);
               modifiers |= ModifierSet.NATIVE;
              n1 = new NodeChoice(n16, 7);
        break;
      case TRANSIENT:
        n19 = jj_consume_token(TRANSIENT);
                              n18 = JTBToolkit.makeNodeToken(n19);
               modifiers |= ModifierSet.TRANSIENT;
              n1 = new NodeChoice(n18, 8);
        break;
      case VOLATILE:
        n21 = jj_consume_token(VOLATILE);
                             n20 = JTBToolkit.makeNodeToken(n21);
               modifiers |= ModifierSet.VOLATILE;
              n1 = new NodeChoice(n20, 9);
        break;
      case STRICTFP:
        n23 = jj_consume_token(STRICTFP);
                             n22 = JTBToolkit.makeNodeToken(n23);
               modifiers |= ModifierSet.STRICTFP;
              n1 = new NodeChoice(n22, 10);
        break;
      case AT:
        n24 = Annotation();
              n1 = new NodeChoice(n24, 11);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
        n0.addNode(n1);
    }
     n0.nodes.trimToSize();
      global_modifiers = modifiers;
     {if (true) return new Modifiers(n0);}
    throw new Error("Missing return statement in function");
  }

  final public TypeDeclaration TypeDeclaration() throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeSequence n3;
   Modifiers n4;
   NodeChoice n5;
   ClassOrInterfaceDeclaration n6;
   EnumDeclaration n7;
   AnnotationTypeDeclaration n8;

   int modifiers;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMICOLON:
      n2 = jj_consume_token(SEMICOLON);
               n1 = JTBToolkit.makeNodeToken(n2);
        n0 = new NodeChoice(n1, 0);
      break;
    case ABSTRACT:
    case CLASS:
    case ENUM:
    case FINAL:
    case INTERFACE:
    case NATIVE:
    case PRIVATE:
    case PROTECTED:
    case PUBLIC:
    case STATIC:
    case STRICTFP:
    case SYNCHRONIZED:
    case TRANSIENT:
    case VOLATILE:
    case AT:
        n3 = new NodeSequence(3);
      n4 = Modifiers();
        n3.addNode(n4);
         modifiers = global_modifiers;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CLASS:
      case INTERFACE:
        n6 = ClassOrInterfaceDeclaration(modifiers);
              n5 = new NodeChoice(n6, 0);
        break;
      case ENUM:
        n7 = EnumDeclaration(modifiers);
              n5 = new NodeChoice(n7, 1);
        break;
      case AT:
        n8 = AnnotationTypeDeclaration(modifiers);
              n5 = new NodeChoice(n8, 2);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
        n3.addNode(n5);
        n0 = new NodeChoice(n3, 1);
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new TypeDeclaration(n0);}
    throw new Error("Missing return statement in function");
  }

  final public ClassOrInterfaceDeclaration ClassOrInterfaceDeclaration(int modifiers) throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeOptional n7 = new NodeOptional();
   TypeParameters n8;
   NodeOptional n9 = new NodeOptional();
   ExtendsList n10;
   NodeOptional n11 = new NodeOptional();
   ImplementsList n12;
   ClassOrInterfaceBody n13;

   boolean isInterface = false;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CLASS:
      n2 = jj_consume_token(CLASS);
                      n1 = JTBToolkit.makeNodeToken(n2);
           n0 = new NodeChoice(n1, 0);
      break;
    case INTERFACE:
      n4 = jj_consume_token(INTERFACE);
                          n3 = JTBToolkit.makeNodeToken(n4);
            isInterface = true;
           n0 = new NodeChoice(n3, 1);
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
    n6 = jj_consume_token(IDENTIFIER);
                     n5 = JTBToolkit.makeNodeToken(n6);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LT:
      n8 = TypeParameters();
        n7.addNode(n8);
      break;
    default:
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EXTENDS:
      n10 = ExtendsList(isInterface);
        n9.addNode(n10);
      break;
    default:
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IMPLEMENTS:
      n12 = ImplementsList(isInterface);
        n11.addNode(n12);
      break;
    default:
      ;
    }
    n13 = ClassOrInterfaceBody(isInterface);
     {if (true) return new ClassOrInterfaceDeclaration(n0,n5,n7,n9,n11,n13);}
    throw new Error("Missing return statement in function");
  }

  final public ExtendsList ExtendsList(boolean isInterface) throws ParseException {
   NodeToken n0;
   Token n1;
   ClassOrInterfaceType n2;
   NodeListOptional n3 = new NodeListOptional();
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   ClassOrInterfaceType n7;

   boolean extendsMoreThanOne = false;
    n1 = jj_consume_token(EXTENDS);
                  n0 = JTBToolkit.makeNodeToken(n1);
    n2 = ClassOrInterfaceType();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        break label_4;
      }
        n4 = new NodeSequence(3);
      n6 = jj_consume_token(COMMA);
               n5 = JTBToolkit.makeNodeToken(n6);
        n4.addNode(n5);
      n7 = ClassOrInterfaceType();
        n4.addNode(n7);
         extendsMoreThanOne = true;
        n3.addNode(n4);
    }
     n3.nodes.trimToSize();
      if ( extendsMoreThanOne && !isInterface )
         {if (true) throw new ParseException("A class cannot extend more than one other class");}
     {if (true) return new ExtendsList(n0,n2,n3);}
    throw new Error("Missing return statement in function");
  }

  final public ImplementsList ImplementsList(boolean isInterface) throws ParseException {
   NodeToken n0;
   Token n1;
   ClassOrInterfaceType n2;
   NodeListOptional n3 = new NodeListOptional();
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   ClassOrInterfaceType n7;
    n1 = jj_consume_token(IMPLEMENTS);
                     n0 = JTBToolkit.makeNodeToken(n1);
    n2 = ClassOrInterfaceType();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        break label_5;
      }
        n4 = new NodeSequence(2);
      n6 = jj_consume_token(COMMA);
               n5 = JTBToolkit.makeNodeToken(n6);
        n4.addNode(n5);
      n7 = ClassOrInterfaceType();
        n4.addNode(n7);
        n3.addNode(n4);
    }
     n3.nodes.trimToSize();
      if ( isInterface )
         {if (true) throw new ParseException("An interface cannot implement other interfaces");}
     {if (true) return new ImplementsList(n0,n2,n3);}
    throw new Error("Missing return statement in function");
  }

  final public EnumDeclaration EnumDeclaration(int modifiers) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeOptional n4 = new NodeOptional();
   ImplementsList n5;
   EnumBody n6;
    n1 = jj_consume_token(ENUM);
               n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(IDENTIFIER);
                     n2 = JTBToolkit.makeNodeToken(n3);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IMPLEMENTS:
      n5 = ImplementsList(false);
        n4.addNode(n5);
      break;
    default:
      ;
    }
    n6 = EnumBody();
     {if (true) return new EnumDeclaration(n0,n2,n4,n6);}
    throw new Error("Missing return statement in function");
  }

  final public EnumBody EnumBody() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeSequence n3;
   EnumConstant n4;
   NodeListOptional n5;
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   EnumConstant n9;
   NodeOptional n10 = new NodeOptional();
   NodeToken n11;
   Token n12;
   NodeOptional n13 = new NodeOptional();
   NodeSequence n14;
   NodeToken n15;
   Token n16;
   NodeListOptional n17;
   ClassOrInterfaceBodyDeclaration n18;
   NodeToken n19;
   Token n20;
    n1 = jj_consume_token(LBRACE);
            n0 = JTBToolkit.makeNodeToken(n1);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ABSTRACT:
    case FINAL:
    case NATIVE:
    case PRIVATE:
    case PROTECTED:
    case PUBLIC:
    case STATIC:
    case STRICTFP:
    case SYNCHRONIZED:
    case TRANSIENT:
    case VOLATILE:
    case IDENTIFIER:
    case AT:
        n5 = new NodeListOptional();
        n3 = new NodeSequence(2);
      n4 = EnumConstant();
        n3.addNode(n4);
      label_6:
      while (true) {
        if (jj_2_3(2)) {
          ;
        } else {
          break label_6;
        }
           n6 = new NodeSequence(2);
        n8 = jj_consume_token(COMMA);
                  n7 = JTBToolkit.makeNodeToken(n8);
           n6.addNode(n7);
        n9 = EnumConstant();
           n6.addNode(n9);
           n5.addNode(n6);
      }
        n5.nodes.trimToSize();
        n3.addNode(n5);
        n2.addNode(n3);
      break;
    default:
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      n12 = jj_consume_token(COMMA);
                n11 = JTBToolkit.makeNodeToken(n12);
        n10.addNode(n11);
      break;
    default:
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMICOLON:
        n17 = new NodeListOptional();
        n14 = new NodeSequence(2);
      n16 = jj_consume_token(SEMICOLON);
                n15 = JTBToolkit.makeNodeToken(n16);
        n14.addNode(n15);
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ABSTRACT:
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case CLASS:
        case DOUBLE:
        case ENUM:
        case FINAL:
        case FLOAT:
        case INT:
        case INTERFACE:
        case LONG:
        case NATIVE:
        case PRIVATE:
        case PROTECTED:
        case PUBLIC:
        case SHORT:
        case STATIC:
        case STRICTFP:
        case SYNCHRONIZED:
        case TRANSIENT:
        case VOID:
        case VOLATILE:
        case IDENTIFIER:
        case LBRACE:
        case SEMICOLON:
        case AT:
        case LT:
          ;
          break;
        default:
          break label_7;
        }
        n18 = ClassOrInterfaceBodyDeclaration(false);
           n17.addNode(n18);
      }
        n17.nodes.trimToSize();
        n14.addNode(n17);
        n13.addNode(n14);
      break;
    default:
      ;
    }
    n20 = jj_consume_token(RBRACE);
             n19 = JTBToolkit.makeNodeToken(n20);
     {if (true) return new EnumBody(n0,n2,n10,n13,n19);}
    throw new Error("Missing return statement in function");
  }

  final public EnumConstant EnumConstant() throws ParseException {
   Modifiers n0;
   NodeToken n1;
   Token n2;
   NodeOptional n3 = new NodeOptional();
   Arguments n4;
   NodeOptional n5 = new NodeOptional();
   ClassOrInterfaceBody n6;
    n0 = Modifiers();
    n2 = jj_consume_token(IDENTIFIER);
                     n1 = JTBToolkit.makeNodeToken(n2);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
      n4 = Arguments();
        n3.addNode(n4);
      break;
    default:
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACE:
      n6 = ClassOrInterfaceBody(false);
        n5.addNode(n6);
      break;
    default:
      ;
    }
     {if (true) return new EnumConstant(n0,n1,n3,n5);}
    throw new Error("Missing return statement in function");
  }

  final public TypeParameters TypeParameters() throws ParseException {
   NodeToken n0;
   Token n1;
   TypeParameter n2;
   NodeListOptional n3 = new NodeListOptional();
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   TypeParameter n7;
   NodeToken n8;
   Token n9;
    n1 = jj_consume_token(LT);
            n0 = JTBToolkit.makeNodeToken(n1);
    n2 = TypeParameter();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        break label_8;
      }
        n4 = new NodeSequence(2);
      n6 = jj_consume_token(COMMA);
               n5 = JTBToolkit.makeNodeToken(n6);
        n4.addNode(n5);
      n7 = TypeParameter();
        n4.addNode(n7);
        n3.addNode(n4);
    }
     n3.nodes.trimToSize();
    n9 = jj_consume_token(GT);
            n8 = JTBToolkit.makeNodeToken(n9);
     {if (true) return new TypeParameters(n0,n2,n3,n8);}
    throw new Error("Missing return statement in function");
  }

  final public TypeParameter TypeParameter() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   TypeBound n3;
    n1 = jj_consume_token(IDENTIFIER);
                     n0 = JTBToolkit.makeNodeToken(n1);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EXTENDS:
      n3 = TypeBound();
        n2.addNode(n3);
      break;
    default:
      ;
    }
     {if (true) return new TypeParameter(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  final public TypeBound TypeBound() throws ParseException {
   NodeToken n0;
   Token n1;
   ClassOrInterfaceType n2;
   NodeListOptional n3 = new NodeListOptional();
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   ClassOrInterfaceType n7;
    n1 = jj_consume_token(EXTENDS);
                  n0 = JTBToolkit.makeNodeToken(n1);
    n2 = ClassOrInterfaceType();
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_AND:
        ;
        break;
      default:
        break label_9;
      }
        n4 = new NodeSequence(2);
      n6 = jj_consume_token(BIT_AND);
               n5 = JTBToolkit.makeNodeToken(n6);
        n4.addNode(n5);
      n7 = ClassOrInterfaceType();
        n4.addNode(n7);
        n3.addNode(n4);
    }
     n3.nodes.trimToSize();
     {if (true) return new TypeBound(n0,n2,n3);}
    throw new Error("Missing return statement in function");
  }

  final public ClassOrInterfaceBody ClassOrInterfaceBody(boolean isInterface) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeListOptional n2 = new NodeListOptional();
   ClassOrInterfaceBodyDeclaration n3;
   NodeToken n4;
   Token n5;
    n1 = jj_consume_token(LBRACE);
            n0 = JTBToolkit.makeNodeToken(n1);
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case CLASS:
      case DOUBLE:
      case ENUM:
      case FINAL:
      case FLOAT:
      case INT:
      case INTERFACE:
      case LONG:
      case NATIVE:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case SHORT:
      case STATIC:
      case STRICTFP:
      case SYNCHRONIZED:
      case TRANSIENT:
      case VOID:
      case VOLATILE:
      case IDENTIFIER:
      case LBRACE:
      case SEMICOLON:
      case AT:
      case LT:
        ;
        break;
      default:
        break label_10;
      }
      n3 = ClassOrInterfaceBodyDeclaration(isInterface);
        n2.addNode(n3);
    }
     n2.nodes.trimToSize();
    n5 = jj_consume_token(RBRACE);
            n4 = JTBToolkit.makeNodeToken(n5);
     {if (true) return new ClassOrInterfaceBody(n0,n2,n4);}
    throw new Error("Missing return statement in function");
  }

  final public ClassOrInterfaceBodyDeclaration ClassOrInterfaceBodyDeclaration(boolean isInterface) throws ParseException {
   NodeChoice n0;
   Initializer n1;
   NodeSequence n2;
   Modifiers n3;
   NodeChoice n4;
   ClassOrInterfaceDeclaration n5;
   EnumDeclaration n6;
   ConstructorDeclaration n7;
   FieldDeclaration n8;
   MethodDeclaration n9;
   AnnotationTypeDeclaration n10;
   NodeToken n11;
   Token n12;

   boolean isNestedInterface = false;int modifiers;
    if (jj_2_6(2)) {
      n1 = Initializer();
         if ( isInterface )
            {if (true) throw new ParseException("An interface cannot have initializers");}
        n0 = new NodeChoice(n1, 0);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case CLASS:
      case DOUBLE:
      case ENUM:
      case FINAL:
      case FLOAT:
      case INT:
      case INTERFACE:
      case LONG:
      case NATIVE:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case SHORT:
      case STATIC:
      case STRICTFP:
      case SYNCHRONIZED:
      case TRANSIENT:
      case VOID:
      case VOLATILE:
      case IDENTIFIER:
      case AT:
      case LT:
        n2 = new NodeSequence(3);
        n3 = Modifiers();
        n2.addNode(n3);
         modifiers = global_modifiers;
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CLASS:
        case INTERFACE:
          n5 = ClassOrInterfaceDeclaration(modifiers);
              n4 = new NodeChoice(n5, 0);
          break;
        case ENUM:
          n6 = EnumDeclaration(modifiers);
              n4 = new NodeChoice(n6, 1);
          break;
        default:
          if (jj_2_4(2147483647)) {
            n7 = ConstructorDeclaration();
              n4 = new NodeChoice(n7, 2);
          } else if (jj_2_5(2147483647)) {
            n8 = FieldDeclaration(modifiers);
              n4 = new NodeChoice(n8, 3);
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case BOOLEAN:
            case BYTE:
            case CHAR:
            case DOUBLE:
            case FLOAT:
            case INT:
            case LONG:
            case SHORT:
            case VOID:
            case IDENTIFIER:
            case LT:
              n9 = MethodDeclaration(modifiers);
              n4 = new NodeChoice(n9, 4);
              break;
            case AT:
              n10 = AnnotationTypeDeclaration(modifiers);
              n4 = new NodeChoice(n10, 5);
              break;
            default:
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        }
        n2.addNode(n4);
        n0 = new NodeChoice(n2, 1);
        break;
      case SEMICOLON:
        n12 = jj_consume_token(SEMICOLON);
                n11 = JTBToolkit.makeNodeToken(n12);
        n0 = new NodeChoice(n11, 2);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
     {if (true) return new ClassOrInterfaceBodyDeclaration(n0);}
    throw new Error("Missing return statement in function");
  }

  final public FieldDeclaration FieldDeclaration(int modifiers) throws ParseException {
   Type n0;
   VariableDeclarator n1;
   NodeListOptional n2 = new NodeListOptional();
   NodeSequence n3;
   NodeToken n4;
   Token n5;
   VariableDeclarator n6;
   NodeToken n7;
   Token n8;
    n0 = Type();
    n1 = VariableDeclarator();
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        break label_11;
      }
        n3 = new NodeSequence(2);
      n5 = jj_consume_token(COMMA);
               n4 = JTBToolkit.makeNodeToken(n5);
        n3.addNode(n4);
      n6 = VariableDeclarator();
        n3.addNode(n6);
        n2.addNode(n3);
    }
     n2.nodes.trimToSize();
    n8 = jj_consume_token(SEMICOLON);
            n7 = JTBToolkit.makeNodeToken(n8);
     {if (true) return new FieldDeclaration(n0,n1,n2,n7);}
    throw new Error("Missing return statement in function");
  }

  final public VariableDeclarator VariableDeclarator() throws ParseException {
   VariableDeclaratorId n0;
   NodeOptional n1 = new NodeOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   VariableInitializer n5;
    n0 = VariableDeclaratorId();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
        n2 = new NodeSequence(2);
      n4 = jj_consume_token(ASSIGN);
               n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      n5 = VariableInitializer();
        n2.addNode(n5);
        n1.addNode(n2);
      break;
    default:
      ;
    }
     {if (true) return new VariableDeclarator(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public VariableDeclaratorId VariableDeclaratorId() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeListOptional n2 = new NodeListOptional();
   NodeSequence n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
    n1 = jj_consume_token(IDENTIFIER);
                     n0 = JTBToolkit.makeNodeToken(n1);
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
        ;
        break;
      default:
        break label_12;
      }
        n3 = new NodeSequence(2);
      n5 = jj_consume_token(LBRACKET);
               n4 = JTBToolkit.makeNodeToken(n5);
        n3.addNode(n4);
      n7 = jj_consume_token(RBRACKET);
               n6 = JTBToolkit.makeNodeToken(n7);
        n3.addNode(n6);
        n2.addNode(n3);
    }
     n2.nodes.trimToSize();
     {if (true) return new VariableDeclaratorId(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  final public VariableInitializer VariableInitializer() throws ParseException {
   NodeChoice n0;
   ArrayInitializer n1;
   Expression n2;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACE:
      n1 = ArrayInitializer();
        n0 = new NodeChoice(n1, 0);
      break;
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FALSE:
    case FLOAT:
    case INT:
    case LONG:
    case NEW:
    case NULL:
    case SHORT:
    case SUPER:
    case THIS:
    case TRUE:
    case VOID:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case BANG:
    case TILDE:
    case INCR:
    case DECR:
    case PLUS:
    case MINUS:
      n2 = Expression();
        n0 = new NodeChoice(n2, 1);
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new VariableInitializer(n0);}
    throw new Error("Missing return statement in function");
  }

  final public ArrayInitializer ArrayInitializer() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeSequence n3;
   VariableInitializer n4;
   NodeListOptional n5;
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   VariableInitializer n9;
   NodeOptional n10 = new NodeOptional();
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
    n1 = jj_consume_token(LBRACE);
            n0 = JTBToolkit.makeNodeToken(n1);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FALSE:
    case FLOAT:
    case INT:
    case LONG:
    case NEW:
    case NULL:
    case SHORT:
    case SUPER:
    case THIS:
    case TRUE:
    case VOID:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case LBRACE:
    case BANG:
    case TILDE:
    case INCR:
    case DECR:
    case PLUS:
    case MINUS:
        n5 = new NodeListOptional();
        n3 = new NodeSequence(2);
      n4 = VariableInitializer();
        n3.addNode(n4);
      label_13:
      while (true) {
        if (jj_2_7(2)) {
          ;
        } else {
          break label_13;
        }
           n6 = new NodeSequence(2);
        n8 = jj_consume_token(COMMA);
                  n7 = JTBToolkit.makeNodeToken(n8);
           n6.addNode(n7);
        n9 = VariableInitializer();
           n6.addNode(n9);
           n5.addNode(n6);
      }
        n5.nodes.trimToSize();
        n3.addNode(n5);
        n2.addNode(n3);
      break;
    default:
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      n12 = jj_consume_token(COMMA);
                n11 = JTBToolkit.makeNodeToken(n12);
        n10.addNode(n11);
      break;
    default:
      ;
    }
    n14 = jj_consume_token(RBRACE);
             n13 = JTBToolkit.makeNodeToken(n14);
     {if (true) return new ArrayInitializer(n0,n2,n10,n13);}
    throw new Error("Missing return statement in function");
  }

  final public MethodDeclaration MethodDeclaration(int modifiers) throws ParseException {
   NodeOptional n0 = new NodeOptional();
   TypeParameters n1;
   ResultType n2;
   MethodDeclarator n3;
   NodeOptional n4 = new NodeOptional();
   NodeSequence n5;
   NodeToken n6;
   Token n7;
   NameList n8;
   NodeChoice n9;
   Block n10;
   NodeToken n11;
   Token n12;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LT:
      n1 = TypeParameters();
        n0.addNode(n1);
      break;
    default:
      ;
    }
    n2 = ResultType();
    n3 = MethodDeclarator();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case THROWS:
        n5 = new NodeSequence(2);
      n7 = jj_consume_token(THROWS);
                    n6 = JTBToolkit.makeNodeToken(n7);
        n5.addNode(n6);
      n8 = NameList();
        n5.addNode(n8);
        n4.addNode(n5);
      break;
    default:
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACE:
      n10 = Block();
           n9 = new NodeChoice(n10, 0);
      break;
    case SEMICOLON:
      n12 = jj_consume_token(SEMICOLON);
                   n11 = JTBToolkit.makeNodeToken(n12);
           n9 = new NodeChoice(n11, 1);
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new MethodDeclaration(n0,n2,n3,n4,n9);}
    throw new Error("Missing return statement in function");
  }

  final public MethodDeclarator MethodDeclarator() throws ParseException {
   NodeToken n0;
   Token n1;
   FormalParameters n2;
   NodeListOptional n3 = new NodeListOptional();
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
    n1 = jj_consume_token(IDENTIFIER);
                     n0 = JTBToolkit.makeNodeToken(n1);
    n2 = FormalParameters();
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
        ;
        break;
      default:
        break label_14;
      }
        n4 = new NodeSequence(2);
      n6 = jj_consume_token(LBRACKET);
               n5 = JTBToolkit.makeNodeToken(n6);
        n4.addNode(n5);
      n8 = jj_consume_token(RBRACKET);
               n7 = JTBToolkit.makeNodeToken(n8);
        n4.addNode(n7);
        n3.addNode(n4);
    }
     n3.nodes.trimToSize();
     {if (true) return new MethodDeclarator(n0,n2,n3);}
    throw new Error("Missing return statement in function");
  }

  final public FormalParameters FormalParameters() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeSequence n3;
   FormalParameter n4;
   NodeListOptional n5;
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   FormalParameter n9;
   NodeToken n10;
   Token n11;
    n1 = jj_consume_token(LPAREN);
            n0 = JTBToolkit.makeNodeToken(n1);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ABSTRACT:
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FINAL:
    case FLOAT:
    case INT:
    case LONG:
    case NATIVE:
    case PRIVATE:
    case PROTECTED:
    case PUBLIC:
    case SHORT:
    case STATIC:
    case STRICTFP:
    case SYNCHRONIZED:
    case TRANSIENT:
    case VOLATILE:
    case IDENTIFIER:
    case AT:
        n5 = new NodeListOptional();
        n3 = new NodeSequence(2);
      n4 = FormalParameter();
        n3.addNode(n4);
      label_15:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          break label_15;
        }
           n6 = new NodeSequence(2);
        n8 = jj_consume_token(COMMA);
                  n7 = JTBToolkit.makeNodeToken(n8);
           n6.addNode(n7);
        n9 = FormalParameter();
           n6.addNode(n9);
           n5.addNode(n6);
      }
        n5.nodes.trimToSize();
        n3.addNode(n5);
        n2.addNode(n3);
      break;
    default:
      ;
    }
    n11 = jj_consume_token(RPAREN);
             n10 = JTBToolkit.makeNodeToken(n11);
     {if (true) return new FormalParameters(n0,n2,n10);}
    throw new Error("Missing return statement in function");
  }

  final public FormalParameter FormalParameter() throws ParseException {
   Modifiers n0;
   NodeOptional n1 = new NodeOptional();
   NodeChoice n2;
   NodeToken n3;
   Token n4;
   Annotation n5;
   Type n6;
   NodeOptional n7 = new NodeOptional();
   NodeToken n8;
   Token n9;
   VariableDeclaratorId n10;
    n0 = Modifiers();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FINAL:
    case AT:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FINAL:
        n4 = jj_consume_token(FINAL);
                      n3 = JTBToolkit.makeNodeToken(n4);
           n2 = new NodeChoice(n3, 0);
        break;
      case AT:
        n5 = Annotation();
           n2 = new NodeChoice(n5, 1);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
        n1.addNode(n2);
      break;
    default:
      ;
    }
    n6 = Type();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELLIPSIS:
      n9 = jj_consume_token(ELLIPSIS);
                 n8 = JTBToolkit.makeNodeToken(n9);
        n7.addNode(n8);
      break;
    default:
      ;
    }
    n10 = VariableDeclaratorId();
     {if (true) return new FormalParameter(n0,n1,n6,n7,n10);}
    throw new Error("Missing return statement in function");
  }

  final public ConstructorDeclaration ConstructorDeclaration() throws ParseException {
   NodeOptional n0 = new NodeOptional();
   TypeParameters n1;
   NodeToken n2;
   Token n3;
   FormalParameters n4;
   NodeOptional n5 = new NodeOptional();
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   NameList n9;
   NodeToken n10;
   Token n11;
   NodeOptional n12 = new NodeOptional();
   ExplicitConstructorInvocation n13;
   NodeListOptional n14 = new NodeListOptional();
   BlockStatement n15;
   NodeToken n16;
   Token n17;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LT:
      n1 = TypeParameters();
        n0.addNode(n1);
      break;
    default:
      ;
    }
    n3 = jj_consume_token(IDENTIFIER);
                     n2 = JTBToolkit.makeNodeToken(n3);
    n4 = FormalParameters();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case THROWS:
        n6 = new NodeSequence(2);
      n8 = jj_consume_token(THROWS);
                    n7 = JTBToolkit.makeNodeToken(n8);
        n6.addNode(n7);
      n9 = NameList();
        n6.addNode(n9);
        n5.addNode(n6);
      break;
    default:
      ;
    }
    n11 = jj_consume_token(LBRACE);
             n10 = JTBToolkit.makeNodeToken(n11);
    if (jj_2_8(2147483647)) {
      n13 = ExplicitConstructorInvocation();
        n12.addNode(n13);
    } else {
      ;
    }
    label_16:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case ASSERT:
      case BOOLEAN:
      case BREAK:
      case BYTE:
      case CHAR:
      case CLASS:
      case CONTINUE:
      case DO:
      case DOUBLE:
      case FALSE:
      case FINAL:
      case FLOAT:
      case FOR:
      case IF:
      case INT:
      case INTERFACE:
      case LONG:
      case NATIVE:
      case NEW:
      case NULL:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case RETURN:
      case SHORT:
      case STATIC:
      case STRICTFP:
      case SUPER:
      case SWITCH:
      case SYNCHRONIZED:
      case THIS:
      case THROW:
      case TRANSIENT:
      case TRUE:
      case TRY:
      case VOID:
      case VOLATILE:
      case WHILE:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case LBRACE:
      case SEMICOLON:
      case AT:
      case INCR:
      case DECR:
        ;
        break;
      default:
        break label_16;
      }
      n15 = BlockStatement();
        n14.addNode(n15);
    }
     n14.nodes.trimToSize();
    n17 = jj_consume_token(RBRACE);
             n16 = JTBToolkit.makeNodeToken(n17);
     {if (true) return new ConstructorDeclaration(n0,n2,n4,n5,n10,n12,n14,n16);}
    throw new Error("Missing return statement in function");
  }

  final public ExplicitConstructorInvocation ExplicitConstructorInvocation() throws ParseException {
   NodeChoice n0;
   NodeSequence n1;
   NodeOptional n2 = new NodeOptional();
   TypeArguments n3;
   NodeChoice n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   Arguments n9;
   NodeToken n10;
   Token n11;
   NodeSequence n12;
   PrimaryExpression n13;
   NodeToken n14;
   Token n15;
   NodeOptional n16 = new NodeOptional();
   TypeArguments n17;
   NodeToken n18;
   Token n19;
   Arguments n20;
   NodeToken n21;
   Token n22;
    if (jj_2_9(3)) {
        n1 = new NodeSequence(5);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LT:
        n3 = TypeArguments();
           n2.addNode(n3);
        break;
      default:
        ;
      }
        n1.addNode(n2);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case THIS:
        n6 = jj_consume_token(THIS);
                        n5 = JTBToolkit.makeNodeToken(n6);
              n4 = new NodeChoice(n5, 0);
        break;
      case SUPER:
        n8 = jj_consume_token(SUPER);
                         n7 = JTBToolkit.makeNodeToken(n8);
              n4 = new NodeChoice(n7, 1);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
        n1.addNode(n4);
      n9 = Arguments();
        n1.addNode(n9);
      n11 = jj_consume_token(SEMICOLON);
                n10 = JTBToolkit.makeNodeToken(n11);
        n1.addNode(n10);
        n0 = new NodeChoice(n1, 0);
    } else if (jj_2_10(3)) {
        n12 = new NodeSequence(7);
      n13 = PrimaryExpression();
        n12.addNode(n13);
      n15 = jj_consume_token(DOT);
                n14 = JTBToolkit.makeNodeToken(n15);
        n12.addNode(n14);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LT:
        n17 = TypeArguments();
           n16.addNode(n17);
        break;
      default:
        ;
      }
        n12.addNode(n16);
      n19 = jj_consume_token(SUPER);
                    n18 = JTBToolkit.makeNodeToken(n19);
        n12.addNode(n18);
      n20 = Arguments();
        n12.addNode(n20);
      n22 = jj_consume_token(SEMICOLON);
                n21 = JTBToolkit.makeNodeToken(n22);
        n12.addNode(n21);
        n0 = new NodeChoice(n12, 1);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new ExplicitConstructorInvocation(n0);}
    throw new Error("Missing return statement in function");
  }

  final public Initializer Initializer() throws ParseException {
   NodeOptional n0 = new NodeOptional();
   NodeToken n1;
   Token n2;
   Block n3;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STATIC:
      n2 = jj_consume_token(STATIC);
                    n1 = JTBToolkit.makeNodeToken(n2);
        n0.addNode(n1);
      break;
    default:
      ;
    }
    n3 = Block();
     {if (true) return new Initializer(n0,n3);}
    throw new Error("Missing return statement in function");
  }

  final public Type Type() throws ParseException {
   NodeChoice n0;
   ReferenceType n1;
   PrimitiveType n2;
    if (jj_2_11(2)) {
      n1 = ReferenceType();
        n0 = new NodeChoice(n1, 0);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FLOAT:
      case INT:
      case LONG:
      case SHORT:
        n2 = PrimitiveType();
        n0 = new NodeChoice(n2, 1);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
     {if (true) return new Type(n0);}
    throw new Error("Missing return statement in function");
  }

  final public ReferenceType ReferenceType() throws ParseException {
   NodeChoice n0;
   NodeSequence n1;
   PrimitiveType n2;
   NodeList n3 = new NodeList();
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeSequence n9;
   NodeSequence n10;
   ClassOrInterfaceType n11;
   NodeListOptional n12 = new NodeListOptional();
   NodeSequence n13;
   NodeToken n14;
   Token n15;
   NodeToken n16;
   Token n17;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FLOAT:
    case INT:
    case LONG:
    case SHORT:
        n1 = new NodeSequence(2);
      n2 = PrimitiveType();
        n1.addNode(n2);
      label_17:
      while (true) {
           n4 = new NodeSequence(2);
        n6 = jj_consume_token(LBRACKET);
                  n5 = JTBToolkit.makeNodeToken(n6);
           n4.addNode(n5);
        n8 = jj_consume_token(RBRACKET);
                  n7 = JTBToolkit.makeNodeToken(n8);
           n4.addNode(n7);
           n3.addNode(n4);
        if (jj_2_12(2)) {
          ;
        } else {
          break label_17;
        }
      }
        n3.nodes.trimToSize();
        n1.addNode(n3);
        n0 = new NodeChoice(n1, 0);
      break;
    case IDENTIFIER:
        n9 = new NodeSequence(2);
           n10 = new NodeSequence(1);
      n11 = ClassOrInterfaceType();
           n10.addNode(n11);
        n9.addNode(n10);
      label_18:
      while (true) {
        if (jj_2_13(2)) {
          ;
        } else {
          break label_18;
        }
           n13 = new NodeSequence(2);
        n15 = jj_consume_token(LBRACKET);
                   n14 = JTBToolkit.makeNodeToken(n15);
           n13.addNode(n14);
        n17 = jj_consume_token(RBRACKET);
                   n16 = JTBToolkit.makeNodeToken(n17);
           n13.addNode(n16);
           n12.addNode(n13);
      }
        n12.nodes.trimToSize();
        n9.addNode(n12);
        n0 = new NodeChoice(n9, 1);
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new ReferenceType(n0);}
    throw new Error("Missing return statement in function");
  }

  final public ClassOrInterfaceType ClassOrInterfaceType() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   TypeArguments n3;
   NodeListOptional n4 = new NodeListOptional();
   NodeSequence n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   NodeOptional n10;
   TypeArguments n11;
    n1 = jj_consume_token(IDENTIFIER);
                     n0 = JTBToolkit.makeNodeToken(n1);
    if (jj_2_14(2)) {
      n3 = TypeArguments();
        n2.addNode(n3);
    } else {
      ;
    }
    label_19:
    while (true) {
      if (jj_2_15(2)) {
        ;
      } else {
        break label_19;
      }
        n10 = new NodeOptional();
        n5 = new NodeSequence(3);
      n7 = jj_consume_token(DOT);
               n6 = JTBToolkit.makeNodeToken(n7);
        n5.addNode(n6);
      n9 = jj_consume_token(IDENTIFIER);
                        n8 = JTBToolkit.makeNodeToken(n9);
        n5.addNode(n8);
      if (jj_2_16(2)) {
        n11 = TypeArguments();
           n10.addNode(n11);
      } else {
        ;
      }
        n5.addNode(n10);
        n4.addNode(n5);
    }
     n4.nodes.trimToSize();
     {if (true) return new ClassOrInterfaceType(n0,n2,n4);}
    throw new Error("Missing return statement in function");
  }

  final public TypeArguments TypeArguments() throws ParseException {
   NodeToken n0;
   Token n1;
   TypeArgument n2;
   NodeListOptional n3 = new NodeListOptional();
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   TypeArgument n7;
   NodeToken n8;
   Token n9;
    n1 = jj_consume_token(LT);
            n0 = JTBToolkit.makeNodeToken(n1);
    n2 = TypeArgument();
    label_20:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        break label_20;
      }
        n4 = new NodeSequence(2);
      n6 = jj_consume_token(COMMA);
               n5 = JTBToolkit.makeNodeToken(n6);
        n4.addNode(n5);
      n7 = TypeArgument();
        n4.addNode(n7);
        n3.addNode(n4);
    }
     n3.nodes.trimToSize();
    n9 = jj_consume_token(GT);
            n8 = JTBToolkit.makeNodeToken(n9);
     {if (true) return new TypeArguments(n0,n2,n3,n8);}
    throw new Error("Missing return statement in function");
  }

  final public TypeArgument TypeArgument() throws ParseException {
   NodeChoice n0;
   ReferenceType n1;
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   NodeOptional n5 = new NodeOptional();
   WildcardBounds n6;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FLOAT:
    case INT:
    case LONG:
    case SHORT:
    case IDENTIFIER:
      n1 = ReferenceType();
        n0 = new NodeChoice(n1, 0);
      break;
    case HOOK:
        n2 = new NodeSequence(2);
      n4 = jj_consume_token(HOOK);
               n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EXTENDS:
      case SUPER:
        n6 = WildcardBounds();
           n5.addNode(n6);
        break;
      default:
        ;
      }
        n2.addNode(n5);
        n0 = new NodeChoice(n2, 1);
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new TypeArgument(n0);}
    throw new Error("Missing return statement in function");
  }

  final public WildcardBounds WildcardBounds() throws ParseException {
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   ReferenceType n4;
   NodeSequence n5;
   NodeToken n6;
   Token n7;
   ReferenceType n8;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EXTENDS:
        n1 = new NodeSequence(2);
      n3 = jj_consume_token(EXTENDS);
                     n2 = JTBToolkit.makeNodeToken(n3);
        n1.addNode(n2);
      n4 = ReferenceType();
        n1.addNode(n4);
        n0 = new NodeChoice(n1, 0);
      break;
    case SUPER:
        n5 = new NodeSequence(2);
      n7 = jj_consume_token(SUPER);
                   n6 = JTBToolkit.makeNodeToken(n7);
        n5.addNode(n6);
      n8 = ReferenceType();
        n5.addNode(n8);
        n0 = new NodeChoice(n5, 1);
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new WildcardBounds(n0);}
    throw new Error("Missing return statement in function");
  }

  final public PrimitiveType PrimitiveType() throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
   NodeToken n15;
   Token n16;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
      n2 = jj_consume_token(BOOLEAN);
                     n1 = JTBToolkit.makeNodeToken(n2);
        n0 = new NodeChoice(n1, 0);
      break;
    case CHAR:
      n4 = jj_consume_token(CHAR);
                  n3 = JTBToolkit.makeNodeToken(n4);
        n0 = new NodeChoice(n3, 1);
      break;
    case BYTE:
      n6 = jj_consume_token(BYTE);
                  n5 = JTBToolkit.makeNodeToken(n6);
        n0 = new NodeChoice(n5, 2);
      break;
    case SHORT:
      n8 = jj_consume_token(SHORT);
                   n7 = JTBToolkit.makeNodeToken(n8);
        n0 = new NodeChoice(n7, 3);
      break;
    case INT:
      n10 = jj_consume_token(INT);
                  n9 = JTBToolkit.makeNodeToken(n10);
        n0 = new NodeChoice(n9, 4);
      break;
    case LONG:
      n12 = jj_consume_token(LONG);
                   n11 = JTBToolkit.makeNodeToken(n12);
        n0 = new NodeChoice(n11, 5);
      break;
    case FLOAT:
      n14 = jj_consume_token(FLOAT);
                    n13 = JTBToolkit.makeNodeToken(n14);
        n0 = new NodeChoice(n13, 6);
      break;
    case DOUBLE:
      n16 = jj_consume_token(DOUBLE);
                     n15 = JTBToolkit.makeNodeToken(n16);
        n0 = new NodeChoice(n15, 7);
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new PrimitiveType(n0);}
    throw new Error("Missing return statement in function");
  }

  final public ResultType ResultType() throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   Type n3;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VOID:
      n2 = jj_consume_token(VOID);
                  n1 = JTBToolkit.makeNodeToken(n2);
        n0 = new NodeChoice(n1, 0);
      break;
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FLOAT:
    case INT:
    case LONG:
    case SHORT:
    case IDENTIFIER:
      n3 = Type();
        n0 = new NodeChoice(n3, 1);
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new ResultType(n0);}
    throw new Error("Missing return statement in function");
  }

  final public Name Name() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeListOptional n2 = new NodeListOptional();
   NodeSequence n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
    n1 = jj_consume_token(IDENTIFIER);
                     n0 = JTBToolkit.makeNodeToken(n1);
    label_21:
    while (true) {
      if (jj_2_17(2)) {
        ;
      } else {
        break label_21;
      }
        n3 = new NodeSequence(2);
      n5 = jj_consume_token(DOT);
               n4 = JTBToolkit.makeNodeToken(n5);
        n3.addNode(n4);
      n7 = jj_consume_token(IDENTIFIER);
                        n6 = JTBToolkit.makeNodeToken(n7);
        n3.addNode(n6);
        n2.addNode(n3);
    }
     n2.nodes.trimToSize();
     {if (true) return new Name(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  final public NameList NameList() throws ParseException {
   Name n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   Name n5;
    n0 = Name();
    label_22:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        break label_22;
      }
        n2 = new NodeSequence(2);
      n4 = jj_consume_token(COMMA);
               n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      n5 = Name();
        n2.addNode(n5);
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new NameList(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public Expression Expression() throws ParseException {
   ConditionalExpression n0;
   NodeOptional n1 = new NodeOptional();
   NodeSequence n2;
   AssignmentOperator n3;
   Expression n4;
    n0 = ConditionalExpression();
    if (jj_2_18(2)) {
        n2 = new NodeSequence(2);
      n3 = AssignmentOperator();
        n2.addNode(n3);
      n4 = Expression();
        n2.addNode(n4);
        n1.addNode(n2);
    } else {
      ;
    }
     {if (true) return new Expression(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public AssignmentOperator AssignmentOperator() throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
   NodeToken n15;
   Token n16;
   NodeToken n17;
   Token n18;
   NodeToken n19;
   Token n20;
   NodeToken n21;
   Token n22;
   NodeToken n23;
   Token n24;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      n2 = jj_consume_token(ASSIGN);
               n1 = JTBToolkit.makeNodeToken(n2);
        n0 = new NodeChoice(n1, 0);
      break;
    case STARASSIGN:
      n4 = jj_consume_token(STARASSIGN);
                n3 = JTBToolkit.makeNodeToken(n4);
        n0 = new NodeChoice(n3, 1);
      break;
    case SLASHASSIGN:
      n6 = jj_consume_token(SLASHASSIGN);
                n5 = JTBToolkit.makeNodeToken(n6);
        n0 = new NodeChoice(n5, 2);
      break;
    case REMASSIGN:
      n8 = jj_consume_token(REMASSIGN);
                n7 = JTBToolkit.makeNodeToken(n8);
        n0 = new NodeChoice(n7, 3);
      break;
    case PLUSASSIGN:
      n10 = jj_consume_token(PLUSASSIGN);
                 n9 = JTBToolkit.makeNodeToken(n10);
        n0 = new NodeChoice(n9, 4);
      break;
    case MINUSASSIGN:
      n12 = jj_consume_token(MINUSASSIGN);
                 n11 = JTBToolkit.makeNodeToken(n12);
        n0 = new NodeChoice(n11, 5);
      break;
    case LSHIFTASSIGN:
      n14 = jj_consume_token(LSHIFTASSIGN);
                  n13 = JTBToolkit.makeNodeToken(n14);
        n0 = new NodeChoice(n13, 6);
      break;
    case RSIGNEDSHIFTASSIGN:
      n16 = jj_consume_token(RSIGNEDSHIFTASSIGN);
                  n15 = JTBToolkit.makeNodeToken(n16);
        n0 = new NodeChoice(n15, 7);
      break;
    case RUNSIGNEDSHIFTASSIGN:
      n18 = jj_consume_token(RUNSIGNEDSHIFTASSIGN);
                   n17 = JTBToolkit.makeNodeToken(n18);
        n0 = new NodeChoice(n17, 8);
      break;
    case ANDASSIGN:
      n20 = jj_consume_token(ANDASSIGN);
                 n19 = JTBToolkit.makeNodeToken(n20);
        n0 = new NodeChoice(n19, 9);
      break;
    case XORASSIGN:
      n22 = jj_consume_token(XORASSIGN);
                 n21 = JTBToolkit.makeNodeToken(n22);
        n0 = new NodeChoice(n21, 10);
      break;
    case ORASSIGN:
      n24 = jj_consume_token(ORASSIGN);
                 n23 = JTBToolkit.makeNodeToken(n24);
        n0 = new NodeChoice(n23, 11);
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new AssignmentOperator(n0);}
    throw new Error("Missing return statement in function");
  }

  final public ConditionalExpression ConditionalExpression() throws ParseException {
   ConditionalOrExpression n0;
   NodeOptional n1 = new NodeOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   Expression n5;
   NodeToken n6;
   Token n7;
   Expression n8;
    n0 = ConditionalOrExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case HOOK:
        n2 = new NodeSequence(4);
      n4 = jj_consume_token(HOOK);
               n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      n5 = Expression();
        n2.addNode(n5);
      n7 = jj_consume_token(COLON);
               n6 = JTBToolkit.makeNodeToken(n7);
        n2.addNode(n6);
      n8 = Expression();
        n2.addNode(n8);
        n1.addNode(n2);
      break;
    default:
      ;
    }
     {if (true) return new ConditionalExpression(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public ConditionalOrExpression ConditionalOrExpression() throws ParseException {
   ConditionalAndExpression n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   ConditionalAndExpression n5;
    n0 = ConditionalAndExpression();
    label_23:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SC_OR:
        ;
        break;
      default:
        break label_23;
      }
        n2 = new NodeSequence(2);
      n4 = jj_consume_token(SC_OR);
                n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      n5 = ConditionalAndExpression();
        n2.addNode(n5);
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new ConditionalOrExpression(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public ConditionalAndExpression ConditionalAndExpression() throws ParseException {
   InclusiveOrExpression n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   InclusiveOrExpression n5;
    n0 = InclusiveOrExpression();
    label_24:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SC_AND:
        ;
        break;
      default:
        break label_24;
      }
        n2 = new NodeSequence(2);
      n4 = jj_consume_token(SC_AND);
                n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      n5 = InclusiveOrExpression();
        n2.addNode(n5);
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new ConditionalAndExpression(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public InclusiveOrExpression InclusiveOrExpression() throws ParseException {
   ExclusiveOrExpression n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   ExclusiveOrExpression n5;
    n0 = ExclusiveOrExpression();
    label_25:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_OR:
        ;
        break;
      default:
        break label_25;
      }
        n2 = new NodeSequence(2);
      n4 = jj_consume_token(BIT_OR);
               n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      n5 = ExclusiveOrExpression();
        n2.addNode(n5);
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new InclusiveOrExpression(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public ExclusiveOrExpression ExclusiveOrExpression() throws ParseException {
   AndExpression n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   AndExpression n5;
    n0 = AndExpression();
    label_26:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case XOR:
        ;
        break;
      default:
        break label_26;
      }
        n2 = new NodeSequence(2);
      n4 = jj_consume_token(XOR);
               n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      n5 = AndExpression();
        n2.addNode(n5);
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new ExclusiveOrExpression(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public AndExpression AndExpression() throws ParseException {
   EqualityExpression n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   EqualityExpression n5;
    n0 = EqualityExpression();
    label_27:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_AND:
        ;
        break;
      default:
        break label_27;
      }
        n2 = new NodeSequence(2);
      n4 = jj_consume_token(BIT_AND);
               n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      n5 = EqualityExpression();
        n2.addNode(n5);
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new AndExpression(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public EqualityExpression EqualityExpression() throws ParseException {
   InstanceOfExpression n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeChoice n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   InstanceOfExpression n8;
    n0 = InstanceOfExpression();
    label_28:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
      case NE:
        ;
        break;
      default:
        break label_28;
      }
        n2 = new NodeSequence(2);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
        n5 = jj_consume_token(EQ);
                      n4 = JTBToolkit.makeNodeToken(n5);
              n3 = new NodeChoice(n4, 0);
        break;
      case NE:
        n7 = jj_consume_token(NE);
                      n6 = JTBToolkit.makeNodeToken(n7);
              n3 = new NodeChoice(n6, 1);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
        n2.addNode(n3);
      n8 = InstanceOfExpression();
        n2.addNode(n8);
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new EqualityExpression(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public InstanceOfExpression InstanceOfExpression() throws ParseException {
   RelationalExpression n0;
   NodeOptional n1 = new NodeOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   Type n5;
    n0 = RelationalExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INSTANCEOF:
        n2 = new NodeSequence(2);
      n4 = jj_consume_token(INSTANCEOF);
                        n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      n5 = Type();
        n2.addNode(n5);
        n1.addNode(n2);
      break;
    default:
      ;
    }
     {if (true) return new InstanceOfExpression(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public RelationalExpression RelationalExpression() throws ParseException {
   ShiftExpression n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeChoice n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
   ShiftExpression n12;
    n0 = ShiftExpression();
    label_29:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LT:
      case LE:
      case GE:
      case GT:
        ;
        break;
      default:
        break label_29;
      }
        n2 = new NodeSequence(2);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LT:
        n5 = jj_consume_token(LT);
                     n4 = JTBToolkit.makeNodeToken(n5);
              n3 = new NodeChoice(n4, 0);
        break;
      case GT:
        n7 = jj_consume_token(GT);
                     n6 = JTBToolkit.makeNodeToken(n7);
              n3 = new NodeChoice(n6, 1);
        break;
      case LE:
        n9 = jj_consume_token(LE);
                      n8 = JTBToolkit.makeNodeToken(n9);
              n3 = new NodeChoice(n8, 2);
        break;
      case GE:
        n11 = jj_consume_token(GE);
                       n10 = JTBToolkit.makeNodeToken(n11);
              n3 = new NodeChoice(n10, 3);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
        n2.addNode(n3);
      n12 = ShiftExpression();
        n2.addNode(n12);
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new RelationalExpression(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public ShiftExpression ShiftExpression() throws ParseException {
   AdditiveExpression n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeChoice n3;
   NodeToken n4;
   Token n5;
   RSIGNEDSHIFT n6;
   RUNSIGNEDSHIFT n7;
   AdditiveExpression n8;
    n0 = AdditiveExpression();
    label_30:
    while (true) {
      if (jj_2_19(1)) {
        ;
      } else {
        break label_30;
      }
        n2 = new NodeSequence(2);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LSHIFT:
        n5 = jj_consume_token(LSHIFT);
                      n4 = JTBToolkit.makeNodeToken(n5);
              n3 = new NodeChoice(n4, 0);
        break;
      default:
        if (jj_2_20(1)) {
          n6 = RSIGNEDSHIFT();
              n3 = new NodeChoice(n6, 1);
        } else if (jj_2_21(1)) {
          n7 = RUNSIGNEDSHIFT();
              n3 = new NodeChoice(n7, 2);
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
        n2.addNode(n3);
      n8 = AdditiveExpression();
        n2.addNode(n8);
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new ShiftExpression(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public AdditiveExpression AdditiveExpression() throws ParseException {
   MultiplicativeExpression n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeChoice n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   MultiplicativeExpression n8;
    n0 = MultiplicativeExpression();
    label_31:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        break label_31;
      }
        n2 = new NodeSequence(2);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        n5 = jj_consume_token(PLUS);
                     n4 = JTBToolkit.makeNodeToken(n5);
              n3 = new NodeChoice(n4, 0);
        break;
      case MINUS:
        n7 = jj_consume_token(MINUS);
                     n6 = JTBToolkit.makeNodeToken(n7);
              n3 = new NodeChoice(n6, 1);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
        n2.addNode(n3);
      n8 = MultiplicativeExpression();
        n2.addNode(n8);
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new AdditiveExpression(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public MultiplicativeExpression MultiplicativeExpression() throws ParseException {
   UnaryExpression n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeChoice n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   UnaryExpression n10;
    n0 = UnaryExpression();
    label_32:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
      case SLASH:
      case REM:
        ;
        break;
      default:
        break label_32;
      }
        n2 = new NodeSequence(2);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
        n5 = jj_consume_token(STAR);
                     n4 = JTBToolkit.makeNodeToken(n5);
              n3 = new NodeChoice(n4, 0);
        break;
      case SLASH:
        n7 = jj_consume_token(SLASH);
                     n6 = JTBToolkit.makeNodeToken(n7);
              n3 = new NodeChoice(n6, 1);
        break;
      case REM:
        n9 = jj_consume_token(REM);
                     n8 = JTBToolkit.makeNodeToken(n9);
              n3 = new NodeChoice(n8, 2);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
        n2.addNode(n3);
      n10 = UnaryExpression();
        n2.addNode(n10);
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new MultiplicativeExpression(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public UnaryExpression UnaryExpression() throws ParseException {
   NodeChoice n0;
   NodeSequence n1;
   NodeChoice n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   UnaryExpression n7;
   PreIncrementExpression n8;
   PreDecrementExpression n9;
   UnaryExpressionNotPlusMinus n10;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
    case MINUS:
        n1 = new NodeSequence(2);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        n4 = jj_consume_token(PLUS);
                     n3 = JTBToolkit.makeNodeToken(n4);
              n2 = new NodeChoice(n3, 0);
        break;
      case MINUS:
        n6 = jj_consume_token(MINUS);
                     n5 = JTBToolkit.makeNodeToken(n6);
              n2 = new NodeChoice(n5, 1);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
        n1.addNode(n2);
      n7 = UnaryExpression();
        n1.addNode(n7);
        n0 = new NodeChoice(n1, 0);
      break;
    case INCR:
      n8 = PreIncrementExpression();
        n0 = new NodeChoice(n8, 1);
      break;
    case DECR:
      n9 = PreDecrementExpression();
        n0 = new NodeChoice(n9, 2);
      break;
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FALSE:
    case FLOAT:
    case INT:
    case LONG:
    case NEW:
    case NULL:
    case SHORT:
    case SUPER:
    case THIS:
    case TRUE:
    case VOID:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case BANG:
    case TILDE:
      n10 = UnaryExpressionNotPlusMinus();
        n0 = new NodeChoice(n10, 3);
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new UnaryExpression(n0);}
    throw new Error("Missing return statement in function");
  }

  final public PreIncrementExpression PreIncrementExpression() throws ParseException {
   NodeToken n0;
   Token n1;
   PrimaryExpression n2;
    n1 = jj_consume_token(INCR);
             n0 = JTBToolkit.makeNodeToken(n1);
    n2 = PrimaryExpression();
     {if (true) return new PreIncrementExpression(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  final public PreDecrementExpression PreDecrementExpression() throws ParseException {
   NodeToken n0;
   Token n1;
   PrimaryExpression n2;
    n1 = jj_consume_token(DECR);
             n0 = JTBToolkit.makeNodeToken(n1);
    n2 = PrimaryExpression();
     {if (true) return new PreDecrementExpression(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  final public UnaryExpressionNotPlusMinus UnaryExpressionNotPlusMinus() throws ParseException {
   NodeChoice n0;
   NodeSequence n1;
   NodeChoice n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   UnaryExpression n7;
   CastExpression n8;
   PostfixExpression n9;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BANG:
    case TILDE:
        n1 = new NodeSequence(2);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TILDE:
        n4 = jj_consume_token(TILDE);
                     n3 = JTBToolkit.makeNodeToken(n4);
              n2 = new NodeChoice(n3, 0);
        break;
      case BANG:
        n6 = jj_consume_token(BANG);
                     n5 = JTBToolkit.makeNodeToken(n6);
              n2 = new NodeChoice(n5, 1);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
        n1.addNode(n2);
      n7 = UnaryExpression();
        n1.addNode(n7);
        n0 = new NodeChoice(n1, 0);
      break;
    default:
      if (jj_2_22(2147483647)) {
        n8 = CastExpression();
        n0 = new NodeChoice(n8, 1);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FALSE:
        case FLOAT:
        case INT:
        case LONG:
        case NEW:
        case NULL:
        case SHORT:
        case SUPER:
        case THIS:
        case TRUE:
        case VOID:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
          n9 = PostfixExpression();
        n0 = new NodeChoice(n9, 2);
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
     {if (true) return new UnaryExpressionNotPlusMinus(n0);}
    throw new Error("Missing return statement in function");
  }

  final public CastLookahead CastLookahead() throws ParseException {
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   PrimitiveType n4;
   NodeSequence n5;
   NodeToken n6;
   Token n7;
   Type n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeSequence n13;
   NodeToken n14;
   Token n15;
   Type n16;
   NodeToken n17;
   Token n18;
   NodeChoice n19;
   NodeToken n20;
   Token n21;
   NodeToken n22;
   Token n23;
   NodeToken n24;
   Token n25;
   NodeToken n26;
   Token n27;
   NodeToken n28;
   Token n29;
   NodeToken n30;
   Token n31;
   NodeToken n32;
   Token n33;
   Literal n34;
    if (jj_2_23(2)) {
        n1 = new NodeSequence(3);
      n3 = jj_consume_token(LPAREN);
               n2 = JTBToolkit.makeNodeToken(n3);
        n1.addNode(n2);
      n4 = PrimitiveType();
        n1.addNode(n4);
        n0 = new NodeChoice(n1, 0);
    } else if (jj_2_24(2147483647)) {
        n5 = new NodeSequence(5);
      n7 = jj_consume_token(LPAREN);
               n6 = JTBToolkit.makeNodeToken(n7);
        n5.addNode(n6);
      n8 = Type();
        n5.addNode(n8);
      n10 = jj_consume_token(LBRACKET);
                n9 = JTBToolkit.makeNodeToken(n10);
        n5.addNode(n9);
      n12 = jj_consume_token(RBRACKET);
                n11 = JTBToolkit.makeNodeToken(n12);
        n5.addNode(n11);
        n0 = new NodeChoice(n5, 1);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
        n13 = new NodeSequence(4);
        n15 = jj_consume_token(LPAREN);
                n14 = JTBToolkit.makeNodeToken(n15);
        n13.addNode(n14);
        n16 = Type();
        n13.addNode(n16);
        n18 = jj_consume_token(RPAREN);
                n17 = JTBToolkit.makeNodeToken(n18);
        n13.addNode(n17);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TILDE:
          n21 = jj_consume_token(TILDE);
                      n20 = JTBToolkit.makeNodeToken(n21);
              n19 = new NodeChoice(n20, 0);
          break;
        case BANG:
          n23 = jj_consume_token(BANG);
                      n22 = JTBToolkit.makeNodeToken(n23);
              n19 = new NodeChoice(n22, 1);
          break;
        case LPAREN:
          n25 = jj_consume_token(LPAREN);
                      n24 = JTBToolkit.makeNodeToken(n25);
              n19 = new NodeChoice(n24, 2);
          break;
        case IDENTIFIER:
          n27 = jj_consume_token(IDENTIFIER);
                               n26 = JTBToolkit.makeNodeToken(n27);
              n19 = new NodeChoice(n26, 3);
          break;
        case THIS:
          n29 = jj_consume_token(THIS);
                         n28 = JTBToolkit.makeNodeToken(n29);
              n19 = new NodeChoice(n28, 4);
          break;
        case SUPER:
          n31 = jj_consume_token(SUPER);
                          n30 = JTBToolkit.makeNodeToken(n31);
              n19 = new NodeChoice(n30, 5);
          break;
        case NEW:
          n33 = jj_consume_token(NEW);
                        n32 = JTBToolkit.makeNodeToken(n33);
              n19 = new NodeChoice(n32, 6);
          break;
        case FALSE:
        case NULL:
        case TRUE:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
          n34 = Literal();
              n19 = new NodeChoice(n34, 7);
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
        n13.addNode(n19);
        n0 = new NodeChoice(n13, 2);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
     {if (true) return new CastLookahead(n0);}
    throw new Error("Missing return statement in function");
  }

  final public PostfixExpression PostfixExpression() throws ParseException {
   PrimaryExpression n0;
   NodeOptional n1 = new NodeOptional();
   NodeChoice n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
    n0 = PrimaryExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INCR:
    case DECR:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INCR:
        n4 = jj_consume_token(INCR);
                   n3 = JTBToolkit.makeNodeToken(n4);
           n2 = new NodeChoice(n3, 0);
        break;
      case DECR:
        n6 = jj_consume_token(DECR);
                   n5 = JTBToolkit.makeNodeToken(n6);
           n2 = new NodeChoice(n5, 1);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
        n1.addNode(n2);
      break;
    default:
      ;
    }
     {if (true) return new PostfixExpression(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public CastExpression CastExpression() throws ParseException {
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   Type n4;
   NodeToken n5;
   Token n6;
   UnaryExpression n7;
   NodeSequence n8;
   NodeToken n9;
   Token n10;
   Type n11;
   NodeToken n12;
   Token n13;
   UnaryExpressionNotPlusMinus n14;
    if (jj_2_25(2147483647)) {
        n1 = new NodeSequence(5);
      n3 = jj_consume_token(LPAREN);
               n2 = JTBToolkit.makeNodeToken(n3);
        n1.addNode(n2);
      n4 = Type();
        n1.addNode(n4);
      n6 = jj_consume_token(RPAREN);
               n5 = JTBToolkit.makeNodeToken(n6);
        n1.addNode(n5);
      n7 = UnaryExpression();
        n1.addNode(n7);
        n0 = new NodeChoice(n1, 0);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
        n8 = new NodeSequence(4);
        n10 = jj_consume_token(LPAREN);
                n9 = JTBToolkit.makeNodeToken(n10);
        n8.addNode(n9);
        n11 = Type();
        n8.addNode(n11);
        n13 = jj_consume_token(RPAREN);
                n12 = JTBToolkit.makeNodeToken(n13);
        n8.addNode(n12);
        n14 = UnaryExpressionNotPlusMinus();
        n8.addNode(n14);
        n0 = new NodeChoice(n8, 1);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
     {if (true) return new CastExpression(n0);}
    throw new Error("Missing return statement in function");
  }

  final public PrimaryExpression PrimaryExpression() throws ParseException {
   PrimaryPrefix n0;
   NodeListOptional n1 = new NodeListOptional();
   PrimarySuffix n2;
    n0 = PrimaryPrefix();
    label_33:
    while (true) {
      if (jj_2_26(2)) {
        ;
      } else {
        break label_33;
      }
      n2 = PrimarySuffix();
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new PrimaryExpression(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public MemberSelector MemberSelector() throws ParseException {
   NodeToken n0;
   Token n1;
   TypeArguments n2;
   NodeToken n3;
   Token n4;
    n1 = jj_consume_token(DOT);
            n0 = JTBToolkit.makeNodeToken(n1);
    n2 = TypeArguments();
    n4 = jj_consume_token(IDENTIFIER);
                     n3 = JTBToolkit.makeNodeToken(n4);
     {if (true) return new MemberSelector(n0,n2,n3);}
    throw new Error("Missing return statement in function");
  }

  final public PrimaryPrefix PrimaryPrefix() throws ParseException {
   NodeChoice n0;
   Literal n1;
   NodeSequence n2;
   NodeListOptional n3 = new NodeListOptional();
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeSequence n11;
   NodeToken n12;
   Token n13;
   NodeToken n14;
   Token n15;
   NodeToken n16;
   Token n17;
   NodeSequence n18;
   ClassOrInterfaceType n19;
   NodeToken n20;
   Token n21;
   NodeToken n22;
   Token n23;
   NodeToken n24;
   Token n25;
   NodeToken n26;
   Token n27;
   NodeSequence n28;
   NodeToken n29;
   Token n30;
   Expression n31;
   NodeToken n32;
   Token n33;
   AllocationExpression n34;
   NodeSequence n35;
   ResultType n36;
   NodeToken n37;
   Token n38;
   NodeToken n39;
   Token n40;
   Name n41;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FALSE:
    case NULL:
    case TRUE:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
      n1 = Literal();
        n0 = new NodeChoice(n1, 0);
      break;
    default:
      if (jj_2_27(2147483647)) {
        n2 = new NodeSequence(3);
        label_34:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IDENTIFIER:
            ;
            break;
          default:
            break label_34;
          }
           n4 = new NodeSequence(2);
          n6 = jj_consume_token(IDENTIFIER);
                           n5 = JTBToolkit.makeNodeToken(n6);
           n4.addNode(n5);
          n8 = jj_consume_token(DOT);
                  n7 = JTBToolkit.makeNodeToken(n8);
           n4.addNode(n7);
           n3.addNode(n4);
        }
        n3.nodes.trimToSize();
        n2.addNode(n3);
        n10 = jj_consume_token(THIS);
                   n9 = JTBToolkit.makeNodeToken(n10);
        n2.addNode(n9);
        n0 = new NodeChoice(n2, 1);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SUPER:
        n11 = new NodeSequence(3);
          n13 = jj_consume_token(SUPER);
                    n12 = JTBToolkit.makeNodeToken(n13);
        n11.addNode(n12);
          n15 = jj_consume_token(DOT);
                n14 = JTBToolkit.makeNodeToken(n15);
        n11.addNode(n14);
          n17 = jj_consume_token(IDENTIFIER);
                         n16 = JTBToolkit.makeNodeToken(n17);
        n11.addNode(n16);
        n0 = new NodeChoice(n11, 2);
          break;
        default:
          if (jj_2_28(2147483647)) {
        n18 = new NodeSequence(6);
            n19 = ClassOrInterfaceType();
        n18.addNode(n19);
            n21 = jj_consume_token(DOT);
                n20 = JTBToolkit.makeNodeToken(n21);
        n18.addNode(n20);
            n23 = jj_consume_token(SUPER);
                    n22 = JTBToolkit.makeNodeToken(n23);
        n18.addNode(n22);
            n25 = jj_consume_token(DOT);
                n24 = JTBToolkit.makeNodeToken(n25);
        n18.addNode(n24);
            n27 = jj_consume_token(IDENTIFIER);
                         n26 = JTBToolkit.makeNodeToken(n27);
        n18.addNode(n26);
        n0 = new NodeChoice(n18, 3);
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case LPAREN:
        n28 = new NodeSequence(3);
              n30 = jj_consume_token(LPAREN);
                n29 = JTBToolkit.makeNodeToken(n30);
        n28.addNode(n29);
              n31 = Expression();
        n28.addNode(n31);
              n33 = jj_consume_token(RPAREN);
                n32 = JTBToolkit.makeNodeToken(n33);
        n28.addNode(n32);
        n0 = new NodeChoice(n28, 4);
              break;
            case NEW:
              n34 = AllocationExpression();
        n0 = new NodeChoice(n34, 5);
              break;
            default:
              if (jj_2_29(2147483647)) {
        n35 = new NodeSequence(4);
                n36 = ResultType();
        n35.addNode(n36);
                n38 = jj_consume_token(DOT);
                n37 = JTBToolkit.makeNodeToken(n38);
        n35.addNode(n37);
                n40 = jj_consume_token(CLASS);
                    n39 = JTBToolkit.makeNodeToken(n40);
        n35.addNode(n39);
        n0 = new NodeChoice(n35, 6);
              } else {
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case IDENTIFIER:
                  n41 = Name();
        n0 = new NodeChoice(n41, 7);
                  break;
                default:
                  jj_consume_token(-1);
                  throw new ParseException();
                }
              }
            }
          }
        }
      }
    }
     {if (true) return new PrimaryPrefix(n0);}
    throw new Error("Missing return statement in function");
  }

  final public PrimarySuffix PrimarySuffix() throws ParseException {
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeSequence n11;
   NodeToken n12;
   Token n13;
   AllocationExpression n14;
   MemberSelector n15;
   NodeSequence n16;
   NodeToken n17;
   Token n18;
   Expression n19;
   NodeToken n20;
   Token n21;
   NodeSequence n22;
   NodeToken n23;
   Token n24;
   NodeToken n25;
   Token n26;
   Arguments n27;
    if (jj_2_30(2147483647)) {
        n1 = new NodeSequence(3);
      n3 = jj_consume_token(DOT);
               n2 = JTBToolkit.makeNodeToken(n3);
        n1.addNode(n2);
      n5 = jj_consume_token(SUPER);
                   n4 = JTBToolkit.makeNodeToken(n5);
        n1.addNode(n4);
        n0 = new NodeChoice(n1, 0);
    } else if (jj_2_31(2147483647)) {
        n6 = new NodeSequence(3);
      n8 = jj_consume_token(DOT);
               n7 = JTBToolkit.makeNodeToken(n8);
        n6.addNode(n7);
      n10 = jj_consume_token(THIS);
                   n9 = JTBToolkit.makeNodeToken(n10);
        n6.addNode(n9);
        n0 = new NodeChoice(n6, 1);
    } else if (jj_2_32(2)) {
        n11 = new NodeSequence(3);
      n13 = jj_consume_token(DOT);
                n12 = JTBToolkit.makeNodeToken(n13);
        n11.addNode(n12);
      n14 = AllocationExpression();
        n11.addNode(n14);
        n0 = new NodeChoice(n11, 2);
    } else if (jj_2_33(3)) {
      n15 = MemberSelector();
        n0 = new NodeChoice(n15, 3);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
        n16 = new NodeSequence(3);
        n18 = jj_consume_token(LBRACKET);
                n17 = JTBToolkit.makeNodeToken(n18);
        n16.addNode(n17);
        n19 = Expression();
        n16.addNode(n19);
        n21 = jj_consume_token(RBRACKET);
                n20 = JTBToolkit.makeNodeToken(n21);
        n16.addNode(n20);
        n0 = new NodeChoice(n16, 4);
        break;
      case DOT:
        n22 = new NodeSequence(2);
        n24 = jj_consume_token(DOT);
                n23 = JTBToolkit.makeNodeToken(n24);
        n22.addNode(n23);
        n26 = jj_consume_token(IDENTIFIER);
                         n25 = JTBToolkit.makeNodeToken(n26);
        n22.addNode(n25);
        n0 = new NodeChoice(n22, 5);
        break;
      case LPAREN:
        n27 = Arguments();
        n0 = new NodeChoice(n27, 6);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
     {if (true) return new PrimarySuffix(n0);}
    throw new Error("Missing return statement in function");
  }

  final public Literal Literal() throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   BooleanLiteral n9;
   NullLiteral n10;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
      n2 = jj_consume_token(INTEGER_LITERAL);
                             n1 = JTBToolkit.makeNodeToken(n2);
        n0 = new NodeChoice(n1, 0);
      break;
    case FLOATING_POINT_LITERAL:
      n4 = jj_consume_token(FLOATING_POINT_LITERAL);
                                    n3 = JTBToolkit.makeNodeToken(n4);
        n0 = new NodeChoice(n3, 1);
      break;
    case CHARACTER_LITERAL:
      n6 = jj_consume_token(CHARACTER_LITERAL);
                               n5 = JTBToolkit.makeNodeToken(n6);
        n0 = new NodeChoice(n5, 2);
      break;
    case STRING_LITERAL:
      n8 = jj_consume_token(STRING_LITERAL);
                            n7 = JTBToolkit.makeNodeToken(n8);
        n0 = new NodeChoice(n7, 3);
      break;
    case FALSE:
    case TRUE:
      n9 = BooleanLiteral();
        n0 = new NodeChoice(n9, 4);
      break;
    case NULL:
      n10 = NullLiteral();
        n0 = new NodeChoice(n10, 5);
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new Literal(n0);}
    throw new Error("Missing return statement in function");
  }

  final public BooleanLiteral BooleanLiteral() throws ParseException {
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
      n2 = jj_consume_token(TRUE);
                  n1 = JTBToolkit.makeNodeToken(n2);
        n0 = new NodeChoice(n1, 0);
      break;
    case FALSE:
      n4 = jj_consume_token(FALSE);
                   n3 = JTBToolkit.makeNodeToken(n4);
        n0 = new NodeChoice(n3, 1);
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new BooleanLiteral(n0);}
    throw new Error("Missing return statement in function");
  }

  final public NullLiteral NullLiteral() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(NULL);
               n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new NullLiteral(n0);}
    throw new Error("Missing return statement in function");
  }

  final public Arguments Arguments() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   ArgumentList n3;
   NodeToken n4;
   Token n5;
    n1 = jj_consume_token(LPAREN);
            n0 = JTBToolkit.makeNodeToken(n1);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FALSE:
    case FLOAT:
    case INT:
    case LONG:
    case NEW:
    case NULL:
    case SHORT:
    case SUPER:
    case THIS:
    case TRUE:
    case VOID:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case BANG:
    case TILDE:
    case INCR:
    case DECR:
    case PLUS:
    case MINUS:
      n3 = ArgumentList();
        n2.addNode(n3);
      break;
    default:
      ;
    }
    n5 = jj_consume_token(RPAREN);
            n4 = JTBToolkit.makeNodeToken(n5);
     {if (true) return new Arguments(n0,n2,n4);}
    throw new Error("Missing return statement in function");
  }

  final public ArgumentList ArgumentList() throws ParseException {
   Expression n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   Expression n5;
    n0 = Expression();
    label_35:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        break label_35;
      }
        n2 = new NodeSequence(2);
      n4 = jj_consume_token(COMMA);
               n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      n5 = Expression();
        n2.addNode(n5);
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new ArgumentList(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public AllocationExpression AllocationExpression() throws ParseException {
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   PrimitiveType n4;
   ArrayDimsAndInits n5;
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   ClassOrInterfaceType n9;
   NodeOptional n10 = new NodeOptional();
   NodeChoice n11;
   TypeArguments n12;
   NodeSequence n13;
   NodeToken n14;
   Token n15;
   NodeToken n16;
   Token n17;
   NodeChoice n18;
   ArrayDimsAndInits n19;
   NodeSequence n20;
   Arguments n21;
   NodeOptional n22 = new NodeOptional();
   ClassOrInterfaceBody n23;
    if (jj_2_35(2)) {
        n1 = new NodeSequence(4);
      n3 = jj_consume_token(NEW);
                 n2 = JTBToolkit.makeNodeToken(n3);
        n1.addNode(n2);
      n4 = PrimitiveType();
        n1.addNode(n4);
      n5 = ArrayDimsAndInits();
        n1.addNode(n5);
        n0 = new NodeChoice(n1, 0);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NEW:
        n6 = new NodeSequence(4);
        n8 = jj_consume_token(NEW);
                 n7 = JTBToolkit.makeNodeToken(n8);
        n6.addNode(n7);
        n9 = ClassOrInterfaceType();
        n6.addNode(n9);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LT:
          if (jj_2_34(2)) {
            n12 = TypeArguments();
              n11 = new NodeChoice(n12, 0);
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case LT:
              n13 = new NodeSequence(2);
              n15 = jj_consume_token(LT);
                      n14 = JTBToolkit.makeNodeToken(n15);
              n13.addNode(n14);
              n17 = jj_consume_token(GT);
                      n16 = JTBToolkit.makeNodeToken(n17);
              n13.addNode(n16);
              n11 = new NodeChoice(n13, 1);
              break;
            default:
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
           n10.addNode(n11);
          break;
        default:
          ;
        }
        n6.addNode(n10);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACKET:
          n19 = ArrayDimsAndInits();
              n18 = new NodeChoice(n19, 0);
          break;
        case LPAREN:
              n20 = new NodeSequence(2);
          n21 = Arguments();
              n20.addNode(n21);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LBRACE:
            n23 = ClassOrInterfaceBody(false);
                 n22.addNode(n23);
            break;
          default:
            ;
          }
              n20.addNode(n22);
              n18 = new NodeChoice(n20, 1);
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
        n6.addNode(n18);
        n0 = new NodeChoice(n6, 1);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
     {if (true) return new AllocationExpression(n0);}
    throw new Error("Missing return statement in function");
  }

  final public ArrayDimsAndInits ArrayDimsAndInits() throws ParseException {
   NodeChoice n0;
   NodeSequence n1;
   NodeList n2 = new NodeList();
   NodeSequence n3;
   NodeToken n4;
   Token n5;
   Expression n6;
   NodeToken n7;
   Token n8;
   NodeListOptional n9 = new NodeListOptional();
   NodeSequence n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
   NodeSequence n15;
   NodeList n16 = new NodeList();
   NodeSequence n17;
   NodeToken n18;
   Token n19;
   NodeToken n20;
   Token n21;
   ArrayInitializer n22;
    if (jj_2_38(2)) {
        n1 = new NodeSequence(3);
      label_36:
      while (true) {
           n3 = new NodeSequence(3);
        n5 = jj_consume_token(LBRACKET);
                  n4 = JTBToolkit.makeNodeToken(n5);
           n3.addNode(n4);
        n6 = Expression();
           n3.addNode(n6);
        n8 = jj_consume_token(RBRACKET);
                  n7 = JTBToolkit.makeNodeToken(n8);
           n3.addNode(n7);
           n2.addNode(n3);
        if (jj_2_36(2)) {
          ;
        } else {
          break label_36;
        }
      }
        n2.nodes.trimToSize();
        n1.addNode(n2);
      label_37:
      while (true) {
        if (jj_2_37(2)) {
          ;
        } else {
          break label_37;
        }
           n10 = new NodeSequence(2);
        n12 = jj_consume_token(LBRACKET);
                   n11 = JTBToolkit.makeNodeToken(n12);
           n10.addNode(n11);
        n14 = jj_consume_token(RBRACKET);
                   n13 = JTBToolkit.makeNodeToken(n14);
           n10.addNode(n13);
           n9.addNode(n10);
      }
        n9.nodes.trimToSize();
        n1.addNode(n9);
        n0 = new NodeChoice(n1, 0);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
        n15 = new NodeSequence(2);
        label_38:
        while (true) {
           n17 = new NodeSequence(2);
          n19 = jj_consume_token(LBRACKET);
                   n18 = JTBToolkit.makeNodeToken(n19);
           n17.addNode(n18);
          n21 = jj_consume_token(RBRACKET);
                   n20 = JTBToolkit.makeNodeToken(n21);
           n17.addNode(n20);
           n16.addNode(n17);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LBRACKET:
            ;
            break;
          default:
            break label_38;
          }
        }
        n16.nodes.trimToSize();
        n15.addNode(n16);
        n22 = ArrayInitializer();
        n15.addNode(n22);
        n0 = new NodeChoice(n15, 1);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
     {if (true) return new ArrayDimsAndInits(n0);}
    throw new Error("Missing return statement in function");
  }

  final public Statement Statement() throws ParseException {
   NodeChoice n0;
   LabeledStatement n1;
   AssertStatement n2;
   Block n3;
   EmptyStatement n4;
   NodeSequence n5;
   StatementExpression n6;
   NodeToken n7;
   Token n8;
   SwitchStatement n9;
   IfStatement n10;
   WhileStatement n11;
   DoStatement n12;
   ForStatement n13;
   BreakStatement n14;
   ContinueStatement n15;
   ReturnStatement n16;
   ThrowStatement n17;
   SynchronizedStatement n18;
   TryStatement n19;
    if (jj_2_39(2)) {
      n1 = LabeledStatement();
        n0 = new NodeChoice(n1, 0);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSERT:
        n2 = AssertStatement();
        n0 = new NodeChoice(n2, 1);
        break;
      case LBRACE:
        n3 = Block();
        n0 = new NodeChoice(n3, 2);
        break;
      case SEMICOLON:
        n4 = EmptyStatement();
        n0 = new NodeChoice(n4, 3);
        break;
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FALSE:
      case FLOAT:
      case INT:
      case LONG:
      case NEW:
      case NULL:
      case SHORT:
      case SUPER:
      case THIS:
      case TRUE:
      case VOID:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case INCR:
      case DECR:
        n5 = new NodeSequence(2);
        n6 = StatementExpression();
        n5.addNode(n6);
        n8 = jj_consume_token(SEMICOLON);
               n7 = JTBToolkit.makeNodeToken(n8);
        n5.addNode(n7);
        n0 = new NodeChoice(n5, 4);
        break;
      case SWITCH:
        n9 = SwitchStatement();
        n0 = new NodeChoice(n9, 5);
        break;
      case IF:
        n10 = IfStatement();
        n0 = new NodeChoice(n10, 6);
        break;
      case WHILE:
        n11 = WhileStatement();
        n0 = new NodeChoice(n11, 7);
        break;
      case DO:
        n12 = DoStatement();
        n0 = new NodeChoice(n12, 8);
        break;
      case FOR:
        n13 = ForStatement();
        n0 = new NodeChoice(n13, 9);
        break;
      case BREAK:
        n14 = BreakStatement();
        n0 = new NodeChoice(n14, 10);
        break;
      case CONTINUE:
        n15 = ContinueStatement();
        n0 = new NodeChoice(n15, 11);
        break;
      case RETURN:
        n16 = ReturnStatement();
        n0 = new NodeChoice(n16, 12);
        break;
      case THROW:
        n17 = ThrowStatement();
        n0 = new NodeChoice(n17, 13);
        break;
      case SYNCHRONIZED:
        n18 = SynchronizedStatement();
        n0 = new NodeChoice(n18, 14);
        break;
      case TRY:
        n19 = TryStatement();
        n0 = new NodeChoice(n19, 15);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
     {if (true) return new Statement(n0);}
    throw new Error("Missing return statement in function");
  }

  final public AssertStatement AssertStatement() throws ParseException {
   NodeToken n0;
   Token n1;
   Expression n2;
   NodeOptional n3 = new NodeOptional();
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   Expression n7;
   NodeToken n8;
   Token n9;
    n1 = jj_consume_token(ASSERT);
                 n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Expression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COLON:
        n4 = new NodeSequence(2);
      n6 = jj_consume_token(COLON);
               n5 = JTBToolkit.makeNodeToken(n6);
        n4.addNode(n5);
      n7 = Expression();
        n4.addNode(n7);
        n3.addNode(n4);
      break;
    default:
      ;
    }
    n9 = jj_consume_token(SEMICOLON);
            n8 = JTBToolkit.makeNodeToken(n9);
     {if (true) return new AssertStatement(n0,n2,n3,n8);}
    throw new Error("Missing return statement in function");
  }

  final public LabeledStatement LabeledStatement() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Statement n4;
    n1 = jj_consume_token(IDENTIFIER);
                     n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(COLON);
            n2 = JTBToolkit.makeNodeToken(n3);
    n4 = Statement();
     {if (true) return new LabeledStatement(n0,n2,n4);}
    throw new Error("Missing return statement in function");
  }

  final public Block Block() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeListOptional n2 = new NodeListOptional();
   BlockStatement n3;
   NodeToken n4;
   Token n5;
    n1 = jj_consume_token(LBRACE);
            n0 = JTBToolkit.makeNodeToken(n1);
    label_39:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case ASSERT:
      case BOOLEAN:
      case BREAK:
      case BYTE:
      case CHAR:
      case CLASS:
      case CONTINUE:
      case DO:
      case DOUBLE:
      case FALSE:
      case FINAL:
      case FLOAT:
      case FOR:
      case IF:
      case INT:
      case INTERFACE:
      case LONG:
      case NATIVE:
      case NEW:
      case NULL:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case RETURN:
      case SHORT:
      case STATIC:
      case STRICTFP:
      case SUPER:
      case SWITCH:
      case SYNCHRONIZED:
      case THIS:
      case THROW:
      case TRANSIENT:
      case TRUE:
      case TRY:
      case VOID:
      case VOLATILE:
      case WHILE:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case LBRACE:
      case SEMICOLON:
      case AT:
      case INCR:
      case DECR:
        ;
        break;
      default:
        break label_39;
      }
      n3 = BlockStatement();
        n2.addNode(n3);
    }
     n2.nodes.trimToSize();
    n5 = jj_consume_token(RBRACE);
            n4 = JTBToolkit.makeNodeToken(n5);
     {if (true) return new Block(n0,n2,n4);}
    throw new Error("Missing return statement in function");
  }

  final public BlockStatement BlockStatement() throws ParseException {
   NodeChoice n0;
   NodeSequence n1;
   LocalVariableDeclaration n2;
   NodeToken n3;
   Token n4;
   Statement n5;
   ClassOrInterfaceDeclaration n6;
    if (jj_2_40(2147483647)) {
        n1 = new NodeSequence(3);
      n2 = LocalVariableDeclaration();
        n1.addNode(n2);
      n4 = jj_consume_token(SEMICOLON);
               n3 = JTBToolkit.makeNodeToken(n4);
        n1.addNode(n3);
        n0 = new NodeChoice(n1, 0);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSERT:
      case BOOLEAN:
      case BREAK:
      case BYTE:
      case CHAR:
      case CONTINUE:
      case DO:
      case DOUBLE:
      case FALSE:
      case FLOAT:
      case FOR:
      case IF:
      case INT:
      case LONG:
      case NEW:
      case NULL:
      case RETURN:
      case SHORT:
      case SUPER:
      case SWITCH:
      case SYNCHRONIZED:
      case THIS:
      case THROW:
      case TRUE:
      case TRY:
      case VOID:
      case WHILE:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case LBRACE:
      case SEMICOLON:
      case INCR:
      case DECR:
        n5 = Statement();
        n0 = new NodeChoice(n5, 1);
        break;
      case CLASS:
      case INTERFACE:
        n6 = ClassOrInterfaceDeclaration(0);
        n0 = new NodeChoice(n6, 2);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
     {if (true) return new BlockStatement(n0);}
    throw new Error("Missing return statement in function");
  }

  final public LocalVariableDeclaration LocalVariableDeclaration() throws ParseException {
   Modifiers n0;
   Type n1;
   VariableDeclarator n2;
   NodeListOptional n3 = new NodeListOptional();
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   VariableDeclarator n7;
    n0 = Modifiers();
    n1 = Type();
    n2 = VariableDeclarator();
    label_40:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        break label_40;
      }
        n4 = new NodeSequence(2);
      n6 = jj_consume_token(COMMA);
               n5 = JTBToolkit.makeNodeToken(n6);
        n4.addNode(n5);
      n7 = VariableDeclarator();
        n4.addNode(n7);
        n3.addNode(n4);
    }
     n3.nodes.trimToSize();
     {if (true) return new LocalVariableDeclaration(n0,n1,n2,n3);}
    throw new Error("Missing return statement in function");
  }

  final public EmptyStatement EmptyStatement() throws ParseException {
   NodeToken n0;
   Token n1;
    n1 = jj_consume_token(SEMICOLON);
            n0 = JTBToolkit.makeNodeToken(n1);
     {if (true) return new EmptyStatement(n0);}
    throw new Error("Missing return statement in function");
  }

  final public StatementExpression StatementExpression() throws ParseException {
   NodeChoice n0;
   PreIncrementExpression n1;
   PreDecrementExpression n2;
   NodeSequence n3;
   PrimaryExpression n4;
   NodeOptional n5 = new NodeOptional();
   NodeChoice n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeSequence n11;
   AssignmentOperator n12;
   Expression n13;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INCR:
      n1 = PreIncrementExpression();
        n0 = new NodeChoice(n1, 0);
      break;
    case DECR:
      n2 = PreDecrementExpression();
        n0 = new NodeChoice(n2, 1);
      break;
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FALSE:
    case FLOAT:
    case INT:
    case LONG:
    case NEW:
    case NULL:
    case SHORT:
    case SUPER:
    case THIS:
    case TRUE:
    case VOID:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case LPAREN:
        n3 = new NodeSequence(2);
      n4 = PrimaryExpression();
        n3.addNode(n4);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSIGN:
      case INCR:
      case DECR:
      case PLUSASSIGN:
      case MINUSASSIGN:
      case STARASSIGN:
      case SLASHASSIGN:
      case ANDASSIGN:
      case ORASSIGN:
      case XORASSIGN:
      case REMASSIGN:
      case LSHIFTASSIGN:
      case RSIGNEDSHIFTASSIGN:
      case RUNSIGNEDSHIFTASSIGN:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INCR:
          n8 = jj_consume_token(INCR);
                      n7 = JTBToolkit.makeNodeToken(n8);
              n6 = new NodeChoice(n7, 0);
          break;
        case DECR:
          n10 = jj_consume_token(DECR);
                       n9 = JTBToolkit.makeNodeToken(n10);
              n6 = new NodeChoice(n9, 1);
          break;
        case ASSIGN:
        case PLUSASSIGN:
        case MINUSASSIGN:
        case STARASSIGN:
        case SLASHASSIGN:
        case ANDASSIGN:
        case ORASSIGN:
        case XORASSIGN:
        case REMASSIGN:
        case LSHIFTASSIGN:
        case RSIGNEDSHIFTASSIGN:
        case RUNSIGNEDSHIFTASSIGN:
              n11 = new NodeSequence(2);
          n12 = AssignmentOperator();
              n11.addNode(n12);
          n13 = Expression();
              n11.addNode(n13);
              n6 = new NodeChoice(n11, 2);
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
           n5.addNode(n6);
        break;
      default:
        ;
      }
        n3.addNode(n5);
        n0 = new NodeChoice(n3, 2);
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new StatementExpression(n0);}
    throw new Error("Missing return statement in function");
  }

  final public SwitchStatement SwitchStatement() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Expression n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeListOptional n9 = new NodeListOptional();
   NodeSequence n10;
   SwitchLabel n11;
   NodeListOptional n12;
   BlockStatement n13;
   NodeToken n14;
   Token n15;
    n1 = jj_consume_token(SWITCH);
                 n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(LPAREN);
            n2 = JTBToolkit.makeNodeToken(n3);
    n4 = Expression();
    n6 = jj_consume_token(RPAREN);
            n5 = JTBToolkit.makeNodeToken(n6);
    n8 = jj_consume_token(LBRACE);
            n7 = JTBToolkit.makeNodeToken(n8);
    label_41:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CASE:
      case _DEFAULT:
        ;
        break;
      default:
        break label_41;
      }
        n12 = new NodeListOptional();
        n10 = new NodeSequence(2);
      n11 = SwitchLabel();
        n10.addNode(n11);
      label_42:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ABSTRACT:
        case ASSERT:
        case BOOLEAN:
        case BREAK:
        case BYTE:
        case CHAR:
        case CLASS:
        case CONTINUE:
        case DO:
        case DOUBLE:
        case FALSE:
        case FINAL:
        case FLOAT:
        case FOR:
        case IF:
        case INT:
        case INTERFACE:
        case LONG:
        case NATIVE:
        case NEW:
        case NULL:
        case PRIVATE:
        case PROTECTED:
        case PUBLIC:
        case RETURN:
        case SHORT:
        case STATIC:
        case STRICTFP:
        case SUPER:
        case SWITCH:
        case SYNCHRONIZED:
        case THIS:
        case THROW:
        case TRANSIENT:
        case TRUE:
        case TRY:
        case VOID:
        case VOLATILE:
        case WHILE:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
        case LBRACE:
        case SEMICOLON:
        case AT:
        case INCR:
        case DECR:
          ;
          break;
        default:
          break label_42;
        }
        n13 = BlockStatement();
           n12.addNode(n13);
      }
        n12.nodes.trimToSize();
        n10.addNode(n12);
        n9.addNode(n10);
    }
     n9.nodes.trimToSize();
    n15 = jj_consume_token(RBRACE);
             n14 = JTBToolkit.makeNodeToken(n15);
     {if (true) return new SwitchStatement(n0,n2,n4,n5,n7,n9,n14);}
    throw new Error("Missing return statement in function");
  }

  final public SwitchLabel SwitchLabel() throws ParseException {
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   Expression n4;
   NodeToken n5;
   Token n6;
   NodeSequence n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CASE:
        n1 = new NodeSequence(3);
      n3 = jj_consume_token(CASE);
                  n2 = JTBToolkit.makeNodeToken(n3);
        n1.addNode(n2);
      n4 = Expression();
        n1.addNode(n4);
      n6 = jj_consume_token(COLON);
               n5 = JTBToolkit.makeNodeToken(n6);
        n1.addNode(n5);
        n0 = new NodeChoice(n1, 0);
      break;
    case _DEFAULT:
        n7 = new NodeSequence(2);
      n9 = jj_consume_token(_DEFAULT);
                     n8 = JTBToolkit.makeNodeToken(n9);
        n7.addNode(n8);
      n11 = jj_consume_token(COLON);
                n10 = JTBToolkit.makeNodeToken(n11);
        n7.addNode(n10);
        n0 = new NodeChoice(n7, 1);
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new SwitchLabel(n0);}
    throw new Error("Missing return statement in function");
  }

  final public IfStatement IfStatement() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Expression n4;
   NodeToken n5;
   Token n6;
   Statement n7;
   NodeOptional n8 = new NodeOptional();
   NodeSequence n9;
   NodeToken n10;
   Token n11;
   Statement n12;
    n1 = jj_consume_token(IF);
             n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(LPAREN);
            n2 = JTBToolkit.makeNodeToken(n3);
    n4 = Expression();
    n6 = jj_consume_token(RPAREN);
            n5 = JTBToolkit.makeNodeToken(n6);
    n7 = Statement();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
        n9 = new NodeSequence(2);
      n11 = jj_consume_token(ELSE);
                   n10 = JTBToolkit.makeNodeToken(n11);
        n9.addNode(n10);
      n12 = Statement();
        n9.addNode(n12);
        n8.addNode(n9);
      break;
    default:
      ;
    }
     {if (true) return new IfStatement(n0,n2,n4,n5,n7,n8);}
    throw new Error("Missing return statement in function");
  }

  final public WhileStatement WhileStatement() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Expression n4;
   NodeToken n5;
   Token n6;
   Statement n7;
    n1 = jj_consume_token(WHILE);
                n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(LPAREN);
            n2 = JTBToolkit.makeNodeToken(n3);
    n4 = Expression();
    n6 = jj_consume_token(RPAREN);
            n5 = JTBToolkit.makeNodeToken(n6);
    n7 = Statement();
     {if (true) return new WhileStatement(n0,n2,n4,n5,n7);}
    throw new Error("Missing return statement in function");
  }

  final public DoStatement DoStatement() throws ParseException {
   NodeToken n0;
   Token n1;
   Statement n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   Expression n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
    n1 = jj_consume_token(DO);
             n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Statement();
    n4 = jj_consume_token(WHILE);
                n3 = JTBToolkit.makeNodeToken(n4);
    n6 = jj_consume_token(LPAREN);
            n5 = JTBToolkit.makeNodeToken(n6);
    n7 = Expression();
    n9 = jj_consume_token(RPAREN);
            n8 = JTBToolkit.makeNodeToken(n9);
    n11 = jj_consume_token(SEMICOLON);
             n10 = JTBToolkit.makeNodeToken(n11);
     {if (true) return new DoStatement(n0,n2,n3,n5,n7,n8,n10);}
    throw new Error("Missing return statement in function");
  }

  final public ForStatement ForStatement() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeChoice n4;
   NodeSequence n5;
   Modifiers n6;
   Type n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
   Expression n12;
   NodeSequence n13;
   NodeOptional n14 = new NodeOptional();
   ForInit n15;
   NodeToken n16;
   Token n17;
   NodeOptional n18 = new NodeOptional();
   Expression n19;
   NodeToken n20;
   Token n21;
   NodeOptional n22 = new NodeOptional();
   ForUpdate n23;
   NodeToken n24;
   Token n25;
   Statement n26;
    n1 = jj_consume_token(FOR);
              n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(LPAREN);
            n2 = JTBToolkit.makeNodeToken(n3);
    if (jj_2_41(2147483647)) {
           n5 = new NodeSequence(6);
      n6 = Modifiers();
           n5.addNode(n6);
      n7 = Type();
           n5.addNode(n7);
      n9 = jj_consume_token(IDENTIFIER);
                           n8 = JTBToolkit.makeNodeToken(n9);
           n5.addNode(n8);
      n11 = jj_consume_token(COLON);
                   n10 = JTBToolkit.makeNodeToken(n11);
           n5.addNode(n10);
      n12 = Expression();
           n5.addNode(n12);
           n4 = new NodeChoice(n5, 0);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FALSE:
      case FINAL:
      case FLOAT:
      case INT:
      case LONG:
      case NATIVE:
      case NEW:
      case NULL:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case SHORT:
      case STATIC:
      case STRICTFP:
      case SUPER:
      case SYNCHRONIZED:
      case THIS:
      case TRANSIENT:
      case TRUE:
      case VOID:
      case VOLATILE:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case SEMICOLON:
      case AT:
      case INCR:
      case DECR:
           n13 = new NodeSequence(5);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ABSTRACT:
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FALSE:
        case FINAL:
        case FLOAT:
        case INT:
        case LONG:
        case NATIVE:
        case NEW:
        case NULL:
        case PRIVATE:
        case PROTECTED:
        case PUBLIC:
        case SHORT:
        case STATIC:
        case STRICTFP:
        case SUPER:
        case SYNCHRONIZED:
        case THIS:
        case TRANSIENT:
        case TRUE:
        case VOID:
        case VOLATILE:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
        case AT:
        case INCR:
        case DECR:
          n15 = ForInit();
              n14.addNode(n15);
          break;
        default:
          ;
        }
           n13.addNode(n14);
        n17 = jj_consume_token(SEMICOLON);
                   n16 = JTBToolkit.makeNodeToken(n17);
           n13.addNode(n16);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FALSE:
        case FLOAT:
        case INT:
        case LONG:
        case NEW:
        case NULL:
        case SHORT:
        case SUPER:
        case THIS:
        case TRUE:
        case VOID:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
        case BANG:
        case TILDE:
        case INCR:
        case DECR:
        case PLUS:
        case MINUS:
          n19 = Expression();
              n18.addNode(n19);
          break;
        default:
          ;
        }
           n13.addNode(n18);
        n21 = jj_consume_token(SEMICOLON);
                   n20 = JTBToolkit.makeNodeToken(n21);
           n13.addNode(n20);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FALSE:
        case FLOAT:
        case INT:
        case LONG:
        case NEW:
        case NULL:
        case SHORT:
        case SUPER:
        case THIS:
        case TRUE:
        case VOID:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
        case INCR:
        case DECR:
          n23 = ForUpdate();
              n22.addNode(n23);
          break;
        default:
          ;
        }
           n13.addNode(n22);
           n4 = new NodeChoice(n13, 1);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    n25 = jj_consume_token(RPAREN);
             n24 = JTBToolkit.makeNodeToken(n25);
    n26 = Statement();
     {if (true) return new ForStatement(n0,n2,n4,n24,n26);}
    throw new Error("Missing return statement in function");
  }

  final public ForInit ForInit() throws ParseException {
   NodeChoice n0;
   LocalVariableDeclaration n1;
   StatementExpressionList n2;
    if (jj_2_42(2147483647)) {
      n1 = LocalVariableDeclaration();
        n0 = new NodeChoice(n1, 0);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FALSE:
      case FLOAT:
      case INT:
      case LONG:
      case NEW:
      case NULL:
      case SHORT:
      case SUPER:
      case THIS:
      case TRUE:
      case VOID:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case INCR:
      case DECR:
        n2 = StatementExpressionList();
        n0 = new NodeChoice(n2, 1);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
     {if (true) return new ForInit(n0);}
    throw new Error("Missing return statement in function");
  }

  final public StatementExpressionList StatementExpressionList() throws ParseException {
   StatementExpression n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   StatementExpression n5;
    n0 = StatementExpression();
    label_43:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        break label_43;
      }
        n2 = new NodeSequence(2);
      n4 = jj_consume_token(COMMA);
               n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      n5 = StatementExpression();
        n2.addNode(n5);
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new StatementExpressionList(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public ForUpdate ForUpdate() throws ParseException {
   StatementExpressionList n0;
    n0 = StatementExpressionList();
     {if (true) return new ForUpdate(n0);}
    throw new Error("Missing return statement in function");
  }

  final public BreakStatement BreakStatement() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
    n1 = jj_consume_token(BREAK);
                n0 = JTBToolkit.makeNodeToken(n1);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      n4 = jj_consume_token(IDENTIFIER);
                        n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      break;
    default:
      ;
    }
    n6 = jj_consume_token(SEMICOLON);
            n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new BreakStatement(n0,n2,n5);}
    throw new Error("Missing return statement in function");
  }

  final public ContinueStatement ContinueStatement() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
    n1 = jj_consume_token(CONTINUE);
                   n0 = JTBToolkit.makeNodeToken(n1);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      n4 = jj_consume_token(IDENTIFIER);
                        n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      break;
    default:
      ;
    }
    n6 = jj_consume_token(SEMICOLON);
            n5 = JTBToolkit.makeNodeToken(n6);
     {if (true) return new ContinueStatement(n0,n2,n5);}
    throw new Error("Missing return statement in function");
  }

  final public ReturnStatement ReturnStatement() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   Expression n3;
   NodeToken n4;
   Token n5;
    n1 = jj_consume_token(RETURN);
                 n0 = JTBToolkit.makeNodeToken(n1);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FALSE:
    case FLOAT:
    case INT:
    case LONG:
    case NEW:
    case NULL:
    case SHORT:
    case SUPER:
    case THIS:
    case TRUE:
    case VOID:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case BANG:
    case TILDE:
    case INCR:
    case DECR:
    case PLUS:
    case MINUS:
      n3 = Expression();
        n2.addNode(n3);
      break;
    default:
      ;
    }
    n5 = jj_consume_token(SEMICOLON);
            n4 = JTBToolkit.makeNodeToken(n5);
     {if (true) return new ReturnStatement(n0,n2,n4);}
    throw new Error("Missing return statement in function");
  }

  final public ThrowStatement ThrowStatement() throws ParseException {
   NodeToken n0;
   Token n1;
   Expression n2;
   NodeToken n3;
   Token n4;
    n1 = jj_consume_token(THROW);
                n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Expression();
    n4 = jj_consume_token(SEMICOLON);
            n3 = JTBToolkit.makeNodeToken(n4);
     {if (true) return new ThrowStatement(n0,n2,n3);}
    throw new Error("Missing return statement in function");
  }

  final public SynchronizedStatement SynchronizedStatement() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Expression n4;
   NodeToken n5;
   Token n6;
   Block n7;
    n1 = jj_consume_token(SYNCHRONIZED);
                       n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(LPAREN);
            n2 = JTBToolkit.makeNodeToken(n3);
    n4 = Expression();
    n6 = jj_consume_token(RPAREN);
            n5 = JTBToolkit.makeNodeToken(n6);
    n7 = Block();
     {if (true) return new SynchronizedStatement(n0,n2,n4,n5,n7);}
    throw new Error("Missing return statement in function");
  }

  final public TryStatement TryStatement() throws ParseException {
   NodeToken n0;
   Token n1;
   Block n2;
   NodeListOptional n3 = new NodeListOptional();
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   FormalParameter n9;
   NodeToken n10;
   Token n11;
   Block n12;
   NodeOptional n13 = new NodeOptional();
   NodeSequence n14;
   NodeToken n15;
   Token n16;
   Block n17;
    n1 = jj_consume_token(TRY);
              n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Block();
    label_44:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CATCH:
        ;
        break;
      default:
        break label_44;
      }
        n4 = new NodeSequence(5);
      n6 = jj_consume_token(CATCH);
                   n5 = JTBToolkit.makeNodeToken(n6);
        n4.addNode(n5);
      n8 = jj_consume_token(LPAREN);
               n7 = JTBToolkit.makeNodeToken(n8);
        n4.addNode(n7);
      n9 = FormalParameter();
        n4.addNode(n9);
      n11 = jj_consume_token(RPAREN);
                n10 = JTBToolkit.makeNodeToken(n11);
        n4.addNode(n10);
      n12 = Block();
        n4.addNode(n12);
        n3.addNode(n4);
    }
     n3.nodes.trimToSize();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FINALLY:
        n14 = new NodeSequence(2);
      n16 = jj_consume_token(FINALLY);
                      n15 = JTBToolkit.makeNodeToken(n16);
        n14.addNode(n15);
      n17 = Block();
        n14.addNode(n17);
        n13.addNode(n14);
      break;
    default:
      ;
    }
     {if (true) return new TryStatement(n0,n2,n3,n13);}
    throw new Error("Missing return statement in function");
  }

  final public RUNSIGNEDSHIFT RUNSIGNEDSHIFT() throws ParseException {
   NodeSequence n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
    if (getToken(1).kind == GT && ((Token.GTToken)getToken(1)).realKind == RUNSIGNEDSHIFT) {

    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
        n0 = new NodeSequence(4);
    n2 = jj_consume_token(GT);
               n1 = JTBToolkit.makeNodeToken(n2);
        n0.addNode(n1);
    n4 = jj_consume_token(GT);
               n3 = JTBToolkit.makeNodeToken(n4);
        n0.addNode(n3);
    n6 = jj_consume_token(GT);
               n5 = JTBToolkit.makeNodeToken(n6);
        n0.addNode(n5);
     {if (true) return new RUNSIGNEDSHIFT(n0);}
    throw new Error("Missing return statement in function");
  }

  final public RSIGNEDSHIFT RSIGNEDSHIFT() throws ParseException {
   NodeSequence n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
    if (getToken(1).kind == GT && ((Token.GTToken)getToken(1)).realKind == RSIGNEDSHIFT) {

    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
        n0 = new NodeSequence(3);
    n2 = jj_consume_token(GT);
               n1 = JTBToolkit.makeNodeToken(n2);
        n0.addNode(n1);
    n4 = jj_consume_token(GT);
               n3 = JTBToolkit.makeNodeToken(n4);
        n0.addNode(n3);
     {if (true) return new RSIGNEDSHIFT(n0);}
    throw new Error("Missing return statement in function");
  }

  final public Annotation Annotation() throws ParseException {
   NodeChoice n0;
   NormalAnnotation n1;
   SingleMemberAnnotation n2;
   MarkerAnnotation n3;
    if (jj_2_43(2147483647)) {
      n1 = NormalAnnotation();
        n0 = new NodeChoice(n1, 0);
    } else if (jj_2_44(2147483647)) {
      n2 = SingleMemberAnnotation();
        n0 = new NodeChoice(n2, 1);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AT:
        n3 = MarkerAnnotation();
        n0 = new NodeChoice(n3, 2);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
     {if (true) return new Annotation(n0);}
    throw new Error("Missing return statement in function");
  }

  final public NormalAnnotation NormalAnnotation() throws ParseException {
   NodeToken n0;
   Token n1;
   Name n2;
   NodeToken n3;
   Token n4;
   NodeOptional n5 = new NodeOptional();
   MemberValuePairs n6;
   NodeToken n7;
   Token n8;
    n1 = jj_consume_token(AT);
            n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Name();
    n4 = jj_consume_token(LPAREN);
            n3 = JTBToolkit.makeNodeToken(n4);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      n6 = MemberValuePairs();
        n5.addNode(n6);
      break;
    default:
      ;
    }
    n8 = jj_consume_token(RPAREN);
            n7 = JTBToolkit.makeNodeToken(n8);
     {if (true) return new NormalAnnotation(n0,n2,n3,n5,n7);}
    throw new Error("Missing return statement in function");
  }

  final public MarkerAnnotation MarkerAnnotation() throws ParseException {
   NodeToken n0;
   Token n1;
   Name n2;
    n1 = jj_consume_token(AT);
            n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Name();
     {if (true) return new MarkerAnnotation(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  final public SingleMemberAnnotation SingleMemberAnnotation() throws ParseException {
   NodeToken n0;
   Token n1;
   Name n2;
   NodeToken n3;
   Token n4;
   MemberValue n5;
   NodeToken n6;
   Token n7;
    n1 = jj_consume_token(AT);
            n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Name();
    n4 = jj_consume_token(LPAREN);
            n3 = JTBToolkit.makeNodeToken(n4);
    n5 = MemberValue();
    n7 = jj_consume_token(RPAREN);
            n6 = JTBToolkit.makeNodeToken(n7);
     {if (true) return new SingleMemberAnnotation(n0,n2,n3,n5,n6);}
    throw new Error("Missing return statement in function");
  }

  final public MemberValuePairs MemberValuePairs() throws ParseException {
   MemberValuePair n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   MemberValuePair n5;
    n0 = MemberValuePair();
    label_45:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        break label_45;
      }
        n2 = new NodeSequence(2);
      n4 = jj_consume_token(COMMA);
               n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      n5 = MemberValuePair();
        n2.addNode(n5);
        n1.addNode(n2);
    }
     n1.nodes.trimToSize();
     {if (true) return new MemberValuePairs(n0,n1);}
    throw new Error("Missing return statement in function");
  }

  final public MemberValuePair MemberValuePair() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   MemberValue n4;
    n1 = jj_consume_token(IDENTIFIER);
                     n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(ASSIGN);
            n2 = JTBToolkit.makeNodeToken(n3);
    n4 = MemberValue();
     {if (true) return new MemberValuePair(n0,n2,n4);}
    throw new Error("Missing return statement in function");
  }

  final public MemberValue MemberValue() throws ParseException {
   NodeChoice n0;
   Annotation n1;
   MemberValueArrayInitializer n2;
   ConditionalExpression n3;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AT:
      n1 = Annotation();
        n0 = new NodeChoice(n1, 0);
      break;
    case LBRACE:
      n2 = MemberValueArrayInitializer();
        n0 = new NodeChoice(n2, 1);
      break;
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FALSE:
    case FLOAT:
    case INT:
    case LONG:
    case NEW:
    case NULL:
    case SHORT:
    case SUPER:
    case THIS:
    case TRUE:
    case VOID:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case BANG:
    case TILDE:
    case INCR:
    case DECR:
    case PLUS:
    case MINUS:
      n3 = ConditionalExpression();
        n0 = new NodeChoice(n3, 2);
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new MemberValue(n0);}
    throw new Error("Missing return statement in function");
  }

  final public MemberValueArrayInitializer MemberValueArrayInitializer() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeSequence n3;
   MemberValue n4;
   NodeListOptional n5;
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   MemberValue n9;
   NodeOptional n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
    n1 = jj_consume_token(LBRACE);
            n0 = JTBToolkit.makeNodeToken(n1);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FALSE:
    case FLOAT:
    case INT:
    case LONG:
    case NEW:
    case NULL:
    case SHORT:
    case SUPER:
    case THIS:
    case TRUE:
    case VOID:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case LBRACE:
    case AT:
    case BANG:
    case TILDE:
    case INCR:
    case DECR:
    case PLUS:
    case MINUS:
        n5 = new NodeListOptional();
        n10 = new NodeOptional();
        n3 = new NodeSequence(3);
      n4 = MemberValue();
        n3.addNode(n4);
      label_46:
      while (true) {
        if (jj_2_45(2)) {
          ;
        } else {
          break label_46;
        }
           n6 = new NodeSequence(2);
        n8 = jj_consume_token(COMMA);
                  n7 = JTBToolkit.makeNodeToken(n8);
           n6.addNode(n7);
        n9 = MemberValue();
           n6.addNode(n9);
           n5.addNode(n6);
      }
        n5.nodes.trimToSize();
        n3.addNode(n5);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        n12 = jj_consume_token(COMMA);
                   n11 = JTBToolkit.makeNodeToken(n12);
           n10.addNode(n11);
        break;
      default:
        ;
      }
        n3.addNode(n10);
        n2.addNode(n3);
      break;
    default:
      ;
    }
    n14 = jj_consume_token(RBRACE);
             n13 = JTBToolkit.makeNodeToken(n14);
     {if (true) return new MemberValueArrayInitializer(n0,n2,n13);}
    throw new Error("Missing return statement in function");
  }

  final public AnnotationTypeDeclaration AnnotationTypeDeclaration(int modifiers) throws ParseException {
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   AnnotationTypeBody n6;
    n1 = jj_consume_token(AT);
            n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(INTERFACE);
                    n2 = JTBToolkit.makeNodeToken(n3);
    n5 = jj_consume_token(IDENTIFIER);
                     n4 = JTBToolkit.makeNodeToken(n5);
    n6 = AnnotationTypeBody();
     {if (true) return new AnnotationTypeDeclaration(n0,n2,n4,n6);}
    throw new Error("Missing return statement in function");
  }

  final public AnnotationTypeBody AnnotationTypeBody() throws ParseException {
   NodeToken n0;
   Token n1;
   NodeListOptional n2 = new NodeListOptional();
   AnnotationTypeMemberDeclaration n3;
   NodeToken n4;
   Token n5;
    n1 = jj_consume_token(LBRACE);
            n0 = JTBToolkit.makeNodeToken(n1);
    label_47:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case CLASS:
      case DOUBLE:
      case ENUM:
      case FINAL:
      case FLOAT:
      case INT:
      case INTERFACE:
      case LONG:
      case NATIVE:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case SHORT:
      case STATIC:
      case STRICTFP:
      case SYNCHRONIZED:
      case TRANSIENT:
      case VOLATILE:
      case IDENTIFIER:
      case SEMICOLON:
      case AT:
        ;
        break;
      default:
        break label_47;
      }
      n3 = AnnotationTypeMemberDeclaration();
        n2.addNode(n3);
    }
     n2.nodes.trimToSize();
    n5 = jj_consume_token(RBRACE);
            n4 = JTBToolkit.makeNodeToken(n5);
     {if (true) return new AnnotationTypeBody(n0,n2,n4);}
    throw new Error("Missing return statement in function");
  }

  final public AnnotationTypeMemberDeclaration AnnotationTypeMemberDeclaration() throws ParseException {
   NodeChoice n0;
   NodeSequence n1;
   Modifiers n2;
   NodeChoice n3;
   NodeSequence n4;
   Type n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
   NodeOptional n12 = new NodeOptional();
   DefaultValue n13;
   NodeToken n14;
   Token n15;
   ClassOrInterfaceDeclaration n16;
   EnumDeclaration n17;
   AnnotationTypeDeclaration n18;
   FieldDeclaration n19;
   NodeSequence n20;
   NodeToken n21;
   Token n22;

   int modifiers;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ABSTRACT:
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case CLASS:
    case DOUBLE:
    case ENUM:
    case FINAL:
    case FLOAT:
    case INT:
    case INTERFACE:
    case LONG:
    case NATIVE:
    case PRIVATE:
    case PROTECTED:
    case PUBLIC:
    case SHORT:
    case STATIC:
    case STRICTFP:
    case SYNCHRONIZED:
    case TRANSIENT:
    case VOLATILE:
    case IDENTIFIER:
    case AT:
        n1 = new NodeSequence(3);
      n2 = Modifiers();
        n1.addNode(n2);
         modifiers = global_modifiers;
      if (jj_2_46(2147483647)) {
              n4 = new NodeSequence(7);
        n5 = Type();
              n4.addNode(n5);
        n7 = jj_consume_token(IDENTIFIER);
                              n6 = JTBToolkit.makeNodeToken(n7);
              n4.addNode(n6);
        n9 = jj_consume_token(LPAREN);
                     n8 = JTBToolkit.makeNodeToken(n9);
              n4.addNode(n8);
        n11 = jj_consume_token(RPAREN);
                      n10 = JTBToolkit.makeNodeToken(n11);
              n4.addNode(n10);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case _DEFAULT:
          n13 = DefaultValue();
                 n12.addNode(n13);
          break;
        default:
          ;
        }
              n4.addNode(n12);
        n15 = jj_consume_token(SEMICOLON);
                      n14 = JTBToolkit.makeNodeToken(n15);
              n4.addNode(n14);
              n3 = new NodeChoice(n4, 0);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CLASS:
        case INTERFACE:
          n16 = ClassOrInterfaceDeclaration(modifiers);
              n3 = new NodeChoice(n16, 1);
          break;
        case ENUM:
          n17 = EnumDeclaration(modifiers);
              n3 = new NodeChoice(n17, 2);
          break;
        case AT:
          n18 = AnnotationTypeDeclaration(modifiers);
              n3 = new NodeChoice(n18, 3);
          break;
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FLOAT:
        case INT:
        case LONG:
        case SHORT:
        case IDENTIFIER:
          n19 = FieldDeclaration(modifiers);
              n3 = new NodeChoice(n19, 4);
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
        n1.addNode(n3);
        n0 = new NodeChoice(n1, 0);
      break;
    case SEMICOLON:
           n20 = new NodeSequence(1);
      n22 = jj_consume_token(SEMICOLON);
                   n21 = JTBToolkit.makeNodeToken(n22);
           n20.addNode(n21);
        n0 = new NodeChoice(n20, 1);
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new AnnotationTypeMemberDeclaration(n0);}
    throw new Error("Missing return statement in function");
  }

  final public DefaultValue DefaultValue() throws ParseException {
   NodeToken n0;
   Token n1;
   MemberValue n2;
    n1 = jj_consume_token(_DEFAULT);
                  n0 = JTBToolkit.makeNodeToken(n1);
    n2 = MemberValue();
     {if (true) return new DefaultValue(n0,n2);}
    throw new Error("Missing return statement in function");
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_33(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_34(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_35(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_36(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_36(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_37(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_37(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_38(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_38(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_39(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_39(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_40(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_40(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_41(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_41(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_42(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_42(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_43(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_43(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_44(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_44(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_45(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_45(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_2_46(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_46(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  final private boolean jj_3R_375() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_97() {
    if (jj_scan_token(STATIC)) return true;
    return false;
  }

  final private boolean jj_3_21() {
    if (jj_3R_80()) return true;
    return false;
  }

  final private boolean jj_3R_322() {
    if (jj_scan_token(IMPLEMENTS)) return true;
    if (jj_3R_85()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_339()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_20() {
    if (jj_3R_79()) return true;
    return false;
  }

  final private boolean jj_3R_243() {
    if (jj_scan_token(BREAK)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_375()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_65() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_97()) jj_scanpos = xsp;
    if (jj_3R_98()) return true;
    return false;
  }

  final private boolean jj_3R_78() {
    if (jj_scan_token(LSHIFT)) return true;
    return false;
  }

  final private boolean jj_3_19() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_78()) {
    jj_scanpos = xsp;
    if (jj_3_20()) {
    jj_scanpos = xsp;
    if (jj_3_21()) return true;
    }
    }
    if (jj_3R_271()) return true;
    return false;
  }

  final private boolean jj_3R_268() {
    if (jj_3R_271()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_19()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_197() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_77()) return true;
    return false;
  }

  final private boolean jj_3R_396() {
    if (jj_3R_399()) return true;
    return false;
  }

  final private boolean jj_3R_73() {
    if (jj_3R_75()) return true;
    return false;
  }

  final private boolean jj_3R_150() {
    if (jj_3R_77()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_197()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_10() {
    if (jj_3R_72()) return true;
    if (jj_scan_token(DOT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_73()) jj_scanpos = xsp;
    if (jj_scan_token(SUPER)) return true;
    if (jj_3R_71()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_338() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_85()) return true;
    return false;
  }

  final private boolean jj_3R_400() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_237()) return true;
    return false;
  }

  final private boolean jj_3R_70() {
    if (jj_scan_token(SUPER)) return true;
    return false;
  }

  final private boolean jj_3R_294() {
    if (jj_scan_token(GE)) return true;
    return false;
  }

  final private boolean jj_3R_399() {
    if (jj_3R_237()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_400()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_321() {
    if (jj_scan_token(EXTENDS)) return true;
    if (jj_3R_85()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_338()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_101() {
    if (jj_3R_150()) return true;
    return false;
  }

  final private boolean jj_3R_69() {
    if (jj_scan_token(THIS)) return true;
    return false;
  }

  final private boolean jj_3R_293() {
    if (jj_scan_token(LE)) return true;
    return false;
  }

  final private boolean jj_3R_292() {
    if (jj_scan_token(GT)) return true;
    return false;
  }

  final private boolean jj_3R_71() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_101()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_291() {
    if (jj_scan_token(LT)) return true;
    return false;
  }

  final private boolean jj_3R_68() {
    if (jj_3R_75()) return true;
    return false;
  }

  final private boolean jj_3_42() {
    if (jj_3R_90()) return true;
    if (jj_3R_63()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_398() {
    if (jj_3R_399()) return true;
    return false;
  }

  final private boolean jj_3_9() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_68()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_69()) {
    jj_scanpos = xsp;
    if (jj_3R_70()) return true;
    }
    if (jj_3R_71()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_284() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_291()) {
    jj_scanpos = xsp;
    if (jj_3R_292()) {
    jj_scanpos = xsp;
    if (jj_3R_293()) {
    jj_scanpos = xsp;
    if (jj_3R_294()) return true;
    }
    }
    }
    if (jj_3R_268()) return true;
    return false;
  }

  final private boolean jj_3R_301() {
    if (jj_3R_322()) return true;
    return false;
  }

  final private boolean jj_3R_397() {
    if (jj_3R_194()) return true;
    return false;
  }

  final private boolean jj_3R_67() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3_10()) return true;
    }
    return false;
  }

  final private boolean jj_3R_263() {
    if (jj_3R_268()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_284()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_200() {
    if (jj_scan_token(NULL)) return true;
    return false;
  }

  final private boolean jj_3R_300() {
    if (jj_3R_321()) return true;
    return false;
  }

  final private boolean jj_3R_395() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_397()) {
    jj_scanpos = xsp;
    if (jj_3R_398()) return true;
    }
    return false;
  }

  final private boolean jj_3R_299() {
    if (jj_3R_95()) return true;
    return false;
  }

  final private boolean jj_3R_229() {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  final private boolean jj_3R_225() {
    if (jj_scan_token(INTERFACE)) return true;
    return false;
  }

  final private boolean jj_3R_228() {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  final private boolean jj_3R_387() {
    if (jj_3R_396()) return true;
    return false;
  }

  final private boolean jj_3R_224() {
    if (jj_scan_token(CLASS)) return true;
    return false;
  }

  final private boolean jj_3R_199() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_228()) {
    jj_scanpos = xsp;
    if (jj_3R_229()) return true;
    }
    return false;
  }

  final private boolean jj_3R_386() {
    if (jj_3R_77()) return true;
    return false;
  }

  final private boolean jj_3R_196() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_224()) {
    jj_scanpos = xsp;
    if (jj_3R_225()) return true;
    }
    if (jj_scan_token(IDENTIFIER)) return true;
    xsp = jj_scanpos;
    if (jj_3R_299()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_300()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_301()) jj_scanpos = xsp;
    if (jj_3R_261()) return true;
    return false;
  }

  final private boolean jj_3R_274() {
    if (jj_scan_token(INSTANCEOF)) return true;
    if (jj_3R_63()) return true;
    return false;
  }

  final private boolean jj_3_8() {
    if (jj_3R_67()) return true;
    return false;
  }

  final private boolean jj_3R_385() {
    if (jj_3R_395()) return true;
    return false;
  }

  final private boolean jj_3R_258() {
    if (jj_3R_263()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_274()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_308() {
    if (jj_3R_175()) return true;
    return false;
  }

  final private boolean jj_3R_190() {
    if (jj_3R_200()) return true;
    return false;
  }

  final private boolean jj_3R_374() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_385()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    xsp = jj_scanpos;
    if (jj_3R_386()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    xsp = jj_scanpos;
    if (jj_3R_387()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_189() {
    if (jj_3R_199()) return true;
    return false;
  }

  final private boolean jj_3R_307() {
    if (jj_3R_67()) return true;
    return false;
  }

  final private boolean jj_3_41() {
    if (jj_3R_90()) return true;
    if (jj_3R_63()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  final private boolean jj_3R_188() {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_187() {
    if (jj_scan_token(CHARACTER_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_186() {
    if (jj_scan_token(FLOATING_POINT_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_306() {
    if (jj_scan_token(THROWS)) return true;
    if (jj_3R_327()) return true;
    return false;
  }

  final private boolean jj_3R_373() {
    if (jj_3R_90()) return true;
    if (jj_3R_63()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_77()) return true;
    return false;
  }

  final private boolean jj_3R_185() {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_276() {
    if (jj_scan_token(NE)) return true;
    return false;
  }

  final private boolean jj_3R_304() {
    if (jj_3R_95()) return true;
    return false;
  }

  final private boolean jj_3R_275() {
    if (jj_scan_token(EQ)) return true;
    return false;
  }

  final private boolean jj_3R_176() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_185()) {
    jj_scanpos = xsp;
    if (jj_3R_186()) {
    jj_scanpos = xsp;
    if (jj_3R_187()) {
    jj_scanpos = xsp;
    if (jj_3R_188()) {
    jj_scanpos = xsp;
    if (jj_3R_189()) {
    jj_scanpos = xsp;
    if (jj_3R_190()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_287() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_304()) jj_scanpos = xsp;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_3R_305()) return true;
    xsp = jj_scanpos;
    if (jj_3R_306()) jj_scanpos = xsp;
    if (jj_scan_token(LBRACE)) return true;
    xsp = jj_scanpos;
    if (jj_3R_307()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_308()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  final private boolean jj_3R_242() {
    if (jj_scan_token(FOR)) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_373()) {
    jj_scanpos = xsp;
    if (jj_3R_374()) return true;
    }
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_195()) return true;
    return false;
  }

  final private boolean jj_3R_270() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_275()) {
    jj_scanpos = xsp;
    if (jj_3R_276()) return true;
    }
    if (jj_3R_258()) return true;
    return false;
  }

  final private boolean jj_3R_251() {
    if (jj_3R_258()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_270()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_135() {
    if (jj_3R_71()) return true;
    return false;
  }

  final private boolean jj_3R_134() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_356() {
    if (jj_scan_token(ELLIPSIS)) return true;
    return false;
  }

  final private boolean jj_3R_363() {
    if (jj_3R_94()) return true;
    return false;
  }

  final private boolean jj_3R_133() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_77()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  final private boolean jj_3R_267() {
    if (jj_scan_token(BIT_AND)) return true;
    if (jj_3R_251()) return true;
    return false;
  }

  final private boolean jj_3R_362() {
    if (jj_scan_token(FINAL)) return true;
    return false;
  }

  final private boolean jj_3_33() {
    if (jj_3R_88()) return true;
    return false;
  }

  final private boolean jj_3R_233() {
    if (jj_3R_251()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_267()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_355() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_362()) {
    jj_scanpos = xsp;
    if (jj_3R_363()) return true;
    }
    return false;
  }

  final private boolean jj_3R_60() {
    if (jj_3R_94()) return true;
    return false;
  }

  final private boolean jj_3_31() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(THIS)) return true;
    return false;
  }

  final private boolean jj_3R_341() {
    if (jj_3R_90()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_355()) jj_scanpos = xsp;
    if (jj_3R_63()) return true;
    xsp = jj_scanpos;
    if (jj_3R_356()) jj_scanpos = xsp;
    if (jj_3R_328()) return true;
    return false;
  }

  final private boolean jj_3_32() {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_87()) return true;
    return false;
  }

  final private boolean jj_3R_241() {
    if (jj_scan_token(DO)) return true;
    if (jj_3R_195()) return true;
    if (jj_scan_token(WHILE)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_77()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_59() {
    if (jj_scan_token(STRICTFP)) return true;
    return false;
  }

  final private boolean jj_3_30() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(SUPER)) return true;
    return false;
  }

  final private boolean jj_3R_132() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(THIS)) return true;
    return false;
  }

  final private boolean jj_3R_58() {
    if (jj_scan_token(VOLATILE)) return true;
    return false;
  }

  final private boolean jj_3R_262() {
    if (jj_scan_token(XOR)) return true;
    if (jj_3R_233()) return true;
    return false;
  }

  final private boolean jj_3R_131() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(SUPER)) return true;
    return false;
  }

  final private boolean jj_3R_206() {
    if (jj_3R_233()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_262()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_83() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_131()) {
    jj_scanpos = xsp;
    if (jj_3R_132()) {
    jj_scanpos = xsp;
    if (jj_3_32()) {
    jj_scanpos = xsp;
    if (jj_3_33()) {
    jj_scanpos = xsp;
    if (jj_3R_133()) {
    jj_scanpos = xsp;
    if (jj_3R_134()) {
    jj_scanpos = xsp;
    if (jj_3R_135()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_57() {
    if (jj_scan_token(TRANSIENT)) return true;
    return false;
  }

  final private boolean jj_3R_342() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_341()) return true;
    return false;
  }

  final private boolean jj_3R_240() {
    if (jj_scan_token(WHILE)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_77()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_195()) return true;
    return false;
  }

  final private boolean jj_3R_56() {
    if (jj_scan_token(NATIVE)) return true;
    return false;
  }

  final private boolean jj_3R_326() {
    if (jj_3R_341()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_342()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_55() {
    if (jj_scan_token(SYNCHRONIZED)) return true;
    return false;
  }

  final private boolean jj_3R_305() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_326()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_257() {
    if (jj_scan_token(BIT_OR)) return true;
    if (jj_3R_206()) return true;
    return false;
  }

  final private boolean jj_3R_54() {
    if (jj_scan_token(ABSTRACT)) return true;
    return false;
  }

  final private boolean jj_3R_191() {
    if (jj_3R_206()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_257()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_372() {
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_195()) return true;
    return false;
  }

  final private boolean jj_3R_380() {
    if (jj_scan_token(_DEFAULT)) return true;
    if (jj_3R_93()) return true;
    return false;
  }

  final private boolean jj_3R_53() {
    if (jj_scan_token(FINAL)) return true;
    return false;
  }

  final private boolean jj_3_29() {
    if (jj_3R_86()) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(CLASS)) return true;
    return false;
  }

  final private boolean jj_3R_158() {
    if (jj_3R_91()) return true;
    return false;
  }

  final private boolean jj_3R_239() {
    if (jj_scan_token(IF)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_77()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_195()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_372()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_52() {
    if (jj_scan_token(PRIVATE)) return true;
    return false;
  }

  final private boolean jj_3R_330() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  final private boolean jj_3R_249() {
    if (jj_scan_token(SC_AND)) return true;
    if (jj_3R_191()) return true;
    return false;
  }

  final private boolean jj_3R_157() {
    if (jj_3R_86()) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(CLASS)) return true;
    return false;
  }

  final private boolean jj_3R_358() {
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_51() {
    if (jj_scan_token(PROTECTED)) return true;
    return false;
  }

  final private boolean jj_3R_156() {
    if (jj_3R_87()) return true;
    return false;
  }

  final private boolean jj_3R_368() {
    if (jj_3R_288()) return true;
    return false;
  }

  final private boolean jj_3R_178() {
    if (jj_3R_191()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_249()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_312() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_3R_305()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_330()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_367() {
    if (jj_3R_290()) return true;
    return false;
  }

  final private boolean jj_3R_366() {
    if (jj_3R_286()) return true;
    return false;
  }

  final private boolean jj_3R_50() {
    if (jj_scan_token(STATIC)) return true;
    return false;
  }

  final private boolean jj_3R_155() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_77()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_365() {
    if (jj_3R_196()) return true;
    return false;
  }

  final private boolean jj_3_28() {
    if (jj_3R_85()) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(SUPER)) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_369() {
    if (jj_3R_380()) return true;
    return false;
  }

  final private boolean jj_3R_49() {
    if (jj_scan_token(PUBLIC)) return true;
    return false;
  }

  final private boolean jj_3R_394() {
    if (jj_scan_token(_DEFAULT)) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  final private boolean jj_3_46() {
    if (jj_3R_63()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_315() {
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_230() {
    if (jj_scan_token(SC_OR)) return true;
    if (jj_3R_178()) return true;
    return false;
  }

  final private boolean jj_3R_314() {
    if (jj_3R_98()) return true;
    return false;
  }

  final private boolean jj_3R_154() {
    if (jj_3R_85()) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(SUPER)) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3_2() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_49()) {
    jj_scanpos = xsp;
    if (jj_3R_50()) {
    jj_scanpos = xsp;
    if (jj_3R_51()) {
    jj_scanpos = xsp;
    if (jj_3R_52()) {
    jj_scanpos = xsp;
    if (jj_3R_53()) {
    jj_scanpos = xsp;
    if (jj_3R_54()) {
    jj_scanpos = xsp;
    if (jj_3R_55()) {
    jj_scanpos = xsp;
    if (jj_3R_56()) {
    jj_scanpos = xsp;
    if (jj_3R_57()) {
    jj_scanpos = xsp;
    if (jj_3R_58()) {
    jj_scanpos = xsp;
    if (jj_3R_59()) {
    jj_scanpos = xsp;
    if (jj_3R_60()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_393() {
    if (jj_scan_token(CASE)) return true;
    if (jj_3R_77()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  final private boolean jj_3R_161() {
    if (jj_3R_178()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_230()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_90() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_2()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_383() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_393()) {
    jj_scanpos = xsp;
    if (jj_3R_394()) return true;
    }
    return false;
  }

  final private boolean jj_3R_364() {
    if (jj_3R_63()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(RPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_369()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_153() {
    if (jj_scan_token(SUPER)) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_313() {
    if (jj_scan_token(THROWS)) return true;
    if (jj_3R_327()) return true;
    return false;
  }

  final private boolean jj_3R_84() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  final private boolean jj_3_27() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_84()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(THIS)) return true;
    return false;
  }

  final private boolean jj_3R_311() {
    if (jj_3R_95()) return true;
    return false;
  }

  final private boolean jj_3R_177() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  final private boolean jj_3R_357() {
    if (jj_3R_90()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_364()) {
    jj_scanpos = xsp;
    if (jj_3R_365()) {
    jj_scanpos = xsp;
    if (jj_3R_366()) {
    jj_scanpos = xsp;
    if (jj_3R_367()) {
    jj_scanpos = xsp;
    if (jj_3R_368()) return true;
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_289() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_311()) jj_scanpos = xsp;
    if (jj_3R_86()) return true;
    if (jj_3R_312()) return true;
    xsp = jj_scanpos;
    if (jj_3R_313()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_314()) {
    jj_scanpos = xsp;
    if (jj_3R_315()) return true;
    }
    return false;
  }

  final private boolean jj_3R_152() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_177()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(THIS)) return true;
    return false;
  }

  final private boolean jj_3R_345() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_357()) {
    jj_scanpos = xsp;
    if (jj_3R_358()) return true;
    }
    return false;
  }

  final private boolean jj_3R_201() {
    if (jj_scan_token(HOOK)) return true;
    if (jj_3R_77()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_77()) return true;
    return false;
  }

  final private boolean jj_3R_151() {
    if (jj_3R_176()) return true;
    return false;
  }

  final private boolean jj_3R_384() {
    if (jj_3R_175()) return true;
    return false;
  }

  final private boolean jj_3R_102() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_151()) {
    jj_scanpos = xsp;
    if (jj_3R_152()) {
    jj_scanpos = xsp;
    if (jj_3R_153()) {
    jj_scanpos = xsp;
    if (jj_3R_154()) {
    jj_scanpos = xsp;
    if (jj_3R_155()) {
    jj_scanpos = xsp;
    if (jj_3R_156()) {
    jj_scanpos = xsp;
    if (jj_3R_157()) {
    jj_scanpos = xsp;
    if (jj_3R_158()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_118() {
    if (jj_3R_161()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_201()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_371() {
    if (jj_3R_383()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_384()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_265() {
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  final private boolean jj_3R_238() {
    if (jj_scan_token(SWITCH)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_77()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_371()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  final private boolean jj_3R_117() {
    if (jj_scan_token(ORASSIGN)) return true;
    return false;
  }

  final private boolean jj_3R_116() {
    if (jj_scan_token(XORASSIGN)) return true;
    return false;
  }

  final private boolean jj_3_7() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_66()) return true;
    return false;
  }

  final private boolean jj_3R_115() {
    if (jj_scan_token(ANDASSIGN)) return true;
    return false;
  }

  final private boolean jj_3R_331() {
    if (jj_3R_345()) return true;
    return false;
  }

  final private boolean jj_3R_114() {
    if (jj_scan_token(RUNSIGNEDSHIFTASSIGN)) return true;
    return false;
  }

  final private boolean jj_3R_264() {
    if (jj_3R_66()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_7()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_113() {
    if (jj_scan_token(RSIGNEDSHIFTASSIGN)) return true;
    return false;
  }

  final private boolean jj_3R_316() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_331()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  final private boolean jj_3R_112() {
    if (jj_scan_token(LSHIFTASSIGN)) return true;
    return false;
  }

  final private boolean jj_3R_148() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_264()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_265()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  final private boolean jj_3R_111() {
    if (jj_scan_token(MINUSASSIGN)) return true;
    return false;
  }

  final private boolean jj_3R_110() {
    if (jj_scan_token(PLUSASSIGN)) return true;
    return false;
  }

  final private boolean jj_3R_109() {
    if (jj_scan_token(REMASSIGN)) return true;
    return false;
  }

  final private boolean jj_3R_392() {
    if (jj_3R_76()) return true;
    if (jj_3R_77()) return true;
    return false;
  }

  final private boolean jj_3R_108() {
    if (jj_scan_token(SLASHASSIGN)) return true;
    return false;
  }

  final private boolean jj_3R_391() {
    if (jj_scan_token(DECR)) return true;
    return false;
  }

  final private boolean jj_3R_107() {
    if (jj_scan_token(STARASSIGN)) return true;
    return false;
  }

  final private boolean jj_3R_390() {
    if (jj_scan_token(INCR)) return true;
    return false;
  }

  final private boolean jj_3R_106() {
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  final private boolean jj_3R_290() {
    if (jj_scan_token(AT)) return true;
    if (jj_scan_token(INTERFACE)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_3R_316()) return true;
    return false;
  }

  final private boolean jj_3R_382() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_390()) {
    jj_scanpos = xsp;
    if (jj_3R_391()) {
    jj_scanpos = xsp;
    if (jj_3R_392()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_88() {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_75()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_76() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_106()) {
    jj_scanpos = xsp;
    if (jj_3R_107()) {
    jj_scanpos = xsp;
    if (jj_3R_108()) {
    jj_scanpos = xsp;
    if (jj_3R_109()) {
    jj_scanpos = xsp;
    if (jj_3R_110()) {
    jj_scanpos = xsp;
    if (jj_3R_111()) {
    jj_scanpos = xsp;
    if (jj_3R_112()) {
    jj_scanpos = xsp;
    if (jj_3R_113()) {
    jj_scanpos = xsp;
    if (jj_3R_114()) {
    jj_scanpos = xsp;
    if (jj_3R_115()) {
    jj_scanpos = xsp;
    if (jj_3R_116()) {
    jj_scanpos = xsp;
    if (jj_3R_117()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_100() {
    if (jj_3R_77()) return true;
    return false;
  }

  final private boolean jj_3R_255() {
    if (jj_3R_72()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_382()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_99() {
    if (jj_3R_148()) return true;
    return false;
  }

  final private boolean jj_3R_254() {
    if (jj_3R_260()) return true;
    return false;
  }

  final private boolean jj_3R_253() {
    if (jj_3R_259()) return true;
    return false;
  }

  final private boolean jj_3R_66() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_99()) {
    jj_scanpos = xsp;
    if (jj_3R_100()) return true;
    }
    return false;
  }

  final private boolean jj_3_26() {
    if (jj_3R_83()) return true;
    return false;
  }

  final private boolean jj_3R_237() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_253()) {
    jj_scanpos = xsp;
    if (jj_3R_254()) {
    jj_scanpos = xsp;
    if (jj_3R_255()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_252() {
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  final private boolean jj_3R_72() {
    if (jj_3R_102()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_26()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_48() {
    if (jj_3R_94()) return true;
    return false;
  }

  final private boolean jj_3_1() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_48()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(PACKAGE)) return true;
    return false;
  }

  final private boolean jj_3_45() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_93()) return true;
    return false;
  }

  final private boolean jj_3R_344() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  final private boolean jj_3R_328() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_344()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_234() {
    if (jj_3R_93()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_45()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_252()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_18() {
    if (jj_3R_76()) return true;
    if (jj_3R_77()) return true;
    return false;
  }

  final private boolean jj_3R_236() {
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_170() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_234()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  final private boolean jj_3R_360() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_63()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_320()) return true;
    return false;
  }

  final private boolean jj_3_25() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_82()) return true;
    return false;
  }

  final private boolean jj_3R_77() {
    if (jj_3R_118()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_18()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_359() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_63()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_285()) return true;
    return false;
  }

  final private boolean jj_3R_361() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_309()) return true;
    return false;
  }

  final private boolean jj_3R_351() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_359()) {
    jj_scanpos = xsp;
    if (jj_3R_360()) return true;
    }
    return false;
  }

  final private boolean jj_3R_329() {
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_66()) return true;
    return false;
  }

  final private boolean jj_3R_309() {
    if (jj_3R_328()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_329()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_194() {
    if (jj_3R_90()) return true;
    if (jj_3R_63()) return true;
    if (jj_3R_309()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_361()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_343() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_91()) return true;
    return false;
  }

  final private boolean jj_3R_141() {
    if (jj_3R_118()) return true;
    return false;
  }

  final private boolean jj_3R_140() {
    if (jj_3R_170()) return true;
    return false;
  }

  final private boolean jj_3R_327() {
    if (jj_3R_91()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_343()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_139() {
    if (jj_3R_94()) return true;
    return false;
  }

  final private boolean jj_3R_93() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_139()) {
    jj_scanpos = xsp;
    if (jj_3R_140()) {
    jj_scanpos = xsp;
    if (jj_3R_141()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_389() {
    if (jj_scan_token(DECR)) return true;
    return false;
  }

  final private boolean jj_3R_183() {
    if (jj_3R_196()) return true;
    return false;
  }

  final private boolean jj_3_40() {
    if (jj_3R_90()) return true;
    if (jj_3R_63()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_388() {
    if (jj_scan_token(INCR)) return true;
    return false;
  }

  final private boolean jj_3R_310() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_309()) return true;
    return false;
  }

  final private boolean jj_3R_182() {
    if (jj_3R_195()) return true;
    return false;
  }

  final private boolean jj_3R_64() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  final private boolean jj_3R_381() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_388()) {
    jj_scanpos = xsp;
    if (jj_3R_389()) return true;
    }
    return false;
  }

  final private boolean jj_3R_288() {
    if (jj_3R_63()) return true;
    if (jj_3R_309()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_310()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3_17() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_207() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_93()) return true;
    return false;
  }

  final private boolean jj_3R_352() {
    if (jj_3R_72()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_381()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_181() {
    if (jj_3R_194()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_91() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_17()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_175() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_181()) {
    jj_scanpos = xsp;
    if (jj_3R_182()) {
    jj_scanpos = xsp;
    if (jj_3R_183()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3_5() {
    if (jj_3R_63()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_64()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_scan_token(86)) {
    jj_scanpos = xsp;
    if (jj_scan_token(89)) {
    jj_scanpos = xsp;
    if (jj_scan_token(85)) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_273() {
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_169() {
    if (jj_3R_176()) return true;
    return false;
  }

  final private boolean jj_3R_62() {
    if (jj_3R_95()) return true;
    return false;
  }

  final private boolean jj_3R_283() {
    if (jj_3R_290()) return true;
    return false;
  }

  final private boolean jj_3_4() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_62()) jj_scanpos = xsp;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_168() {
    if (jj_scan_token(NEW)) return true;
    return false;
  }

  final private boolean jj_3R_208() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_207()) return true;
    return false;
  }

  final private boolean jj_3R_282() {
    if (jj_3R_289()) return true;
    return false;
  }

  final private boolean jj_3R_137() {
    if (jj_3R_63()) return true;
    return false;
  }

  final private boolean jj_3R_167() {
    if (jj_scan_token(SUPER)) return true;
    return false;
  }

  final private boolean jj_3R_147() {
    if (jj_3R_175()) return true;
    return false;
  }

  final private boolean jj_3R_192() {
    if (jj_3R_207()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_208()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_281() {
    if (jj_3R_288()) return true;
    return false;
  }

  final private boolean jj_3R_136() {
    if (jj_scan_token(VOID)) return true;
    return false;
  }

  final private boolean jj_3R_166() {
    if (jj_scan_token(THIS)) return true;
    return false;
  }

  final private boolean jj_3R_165() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_98() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_147()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  final private boolean jj_3R_280() {
    if (jj_3R_287()) return true;
    return false;
  }

  final private boolean jj_3R_86() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_136()) {
    jj_scanpos = xsp;
    if (jj_3R_137()) return true;
    }
    return false;
  }

  final private boolean jj_3R_164() {
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_279() {
    if (jj_3R_286()) return true;
    return false;
  }

  final private boolean jj_3R_163() {
    if (jj_scan_token(BANG)) return true;
    return false;
  }

  final private boolean jj_3R_278() {
    if (jj_3R_196()) return true;
    return false;
  }

  final private boolean jj_3R_162() {
    if (jj_scan_token(TILDE)) return true;
    return false;
  }

  final private boolean jj_3R_130() {
    if (jj_scan_token(DOUBLE)) return true;
    return false;
  }

  final private boolean jj_3R_172() {
    if (jj_scan_token(AT)) return true;
    if (jj_3R_91()) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_93()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_129() {
    if (jj_scan_token(FLOAT)) return true;
    return false;
  }

  final private boolean jj_3R_89() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_195()) return true;
    return false;
  }

  final private boolean jj_3R_128() {
    if (jj_scan_token(LONG)) return true;
    return false;
  }

  final private boolean jj_3R_272() {
    if (jj_3R_90()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_278()) {
    jj_scanpos = xsp;
    if (jj_3R_279()) {
    jj_scanpos = xsp;
    if (jj_3R_280()) {
    jj_scanpos = xsp;
    if (jj_3R_281()) {
    jj_scanpos = xsp;
    if (jj_3R_282()) {
    jj_scanpos = xsp;
    if (jj_3R_283()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_127() {
    if (jj_scan_token(INT)) return true;
    return false;
  }

  final private boolean jj_3R_122() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_63()) return true;
    if (jj_scan_token(RPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_162()) {
    jj_scanpos = xsp;
    if (jj_3R_163()) {
    jj_scanpos = xsp;
    if (jj_3R_164()) {
    jj_scanpos = xsp;
    if (jj_3R_165()) {
    jj_scanpos = xsp;
    if (jj_3R_166()) {
    jj_scanpos = xsp;
    if (jj_3R_167()) {
    jj_scanpos = xsp;
    if (jj_3R_168()) {
    jj_scanpos = xsp;
    if (jj_3R_169()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3_24() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_63()) return true;
    if (jj_scan_token(LBRACKET)) return true;
    return false;
  }

  final private boolean jj_3R_126() {
    if (jj_scan_token(SHORT)) return true;
    return false;
  }

  final private boolean jj_3R_125() {
    if (jj_scan_token(BYTE)) return true;
    return false;
  }

  final private boolean jj_3_6() {
    if (jj_3R_65()) return true;
    return false;
  }

  final private boolean jj_3R_124() {
    if (jj_scan_token(CHAR)) return true;
    return false;
  }

  final private boolean jj_3R_123() {
    if (jj_scan_token(BOOLEAN)) return true;
    return false;
  }

  final private boolean jj_3R_121() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_63()) return true;
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  final private boolean jj_3R_269() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_6()) {
    jj_scanpos = xsp;
    if (jj_3R_272()) {
    jj_scanpos = xsp;
    if (jj_3R_273()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_173() {
    if (jj_scan_token(AT)) return true;
    if (jj_3R_91()) return true;
    return false;
  }

  final private boolean jj_3R_370() {
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_77()) return true;
    return false;
  }

  final private boolean jj_3R_82() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_123()) {
    jj_scanpos = xsp;
    if (jj_3R_124()) {
    jj_scanpos = xsp;
    if (jj_3R_125()) {
    jj_scanpos = xsp;
    if (jj_3R_126()) {
    jj_scanpos = xsp;
    if (jj_3R_127()) {
    jj_scanpos = xsp;
    if (jj_3R_128()) {
    jj_scanpos = xsp;
    if (jj_3R_129()) {
    jj_scanpos = xsp;
    if (jj_3R_130()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3_23() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_82()) return true;
    return false;
  }

  final private boolean jj_3R_235() {
    if (jj_scan_token(ASSERT)) return true;
    if (jj_3R_77()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_370()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_81() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_23()) {
    jj_scanpos = xsp;
    if (jj_3R_121()) {
    jj_scanpos = xsp;
    if (jj_3R_122()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_179() {
    if (jj_3R_192()) return true;
    return false;
  }

  final private boolean jj_3R_92() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  final private boolean jj_3R_171() {
    if (jj_scan_token(AT)) return true;
    if (jj_3R_91()) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_179()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_266() {
    if (jj_3R_269()) return true;
    return false;
  }

  final private boolean jj_3R_223() {
    if (jj_3R_248()) return true;
    return false;
  }

  final private boolean jj_3R_261() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_266()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  final private boolean jj_3R_222() {
    if (jj_3R_247()) return true;
    return false;
  }

  final private boolean jj_3R_227() {
    if (jj_scan_token(SUPER)) return true;
    if (jj_3R_74()) return true;
    return false;
  }

  final private boolean jj_3R_221() {
    if (jj_3R_246()) return true;
    return false;
  }

  final private boolean jj_3_44() {
    if (jj_scan_token(AT)) return true;
    if (jj_3R_91()) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_220() {
    if (jj_3R_245()) return true;
    return false;
  }

  final private boolean jj_3_43() {
    if (jj_scan_token(AT)) return true;
    if (jj_3R_91()) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_92()) {
    jj_scanpos = xsp;
    if (jj_scan_token(80)) return true;
    }
    return false;
  }

  final private boolean jj_3R_219() {
    if (jj_3R_244()) return true;
    return false;
  }

  final private boolean jj_3R_144() {
    if (jj_3R_173()) return true;
    return false;
  }

  final private boolean jj_3R_226() {
    if (jj_scan_token(EXTENDS)) return true;
    if (jj_3R_74()) return true;
    return false;
  }

  final private boolean jj_3R_218() {
    if (jj_3R_243()) return true;
    return false;
  }

  final private boolean jj_3R_143() {
    if (jj_3R_172()) return true;
    return false;
  }

  final private boolean jj_3R_198() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_226()) {
    jj_scanpos = xsp;
    if (jj_3R_227()) return true;
    }
    return false;
  }

  final private boolean jj_3R_217() {
    if (jj_3R_242()) return true;
    return false;
  }

  final private boolean jj_3R_142() {
    if (jj_3R_171()) return true;
    return false;
  }

  final private boolean jj_3R_216() {
    if (jj_3R_241()) return true;
    return false;
  }

  final private boolean jj_3_22() {
    if (jj_3R_81()) return true;
    return false;
  }

  final private boolean jj_3R_193() {
    if (jj_scan_token(BIT_AND)) return true;
    if (jj_3R_85()) return true;
    return false;
  }

  final private boolean jj_3R_215() {
    if (jj_3R_240()) return true;
    return false;
  }

  final private boolean jj_3R_94() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_142()) {
    jj_scanpos = xsp;
    if (jj_3R_143()) {
    jj_scanpos = xsp;
    if (jj_3R_144()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_214() {
    if (jj_3R_239()) return true;
    return false;
  }

  final private boolean jj_3R_337() {
    if (jj_3R_352()) return true;
    return false;
  }

  final private boolean jj_3R_180() {
    if (jj_scan_token(EXTENDS)) return true;
    if (jj_3R_85()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_193()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_213() {
    if (jj_3R_238()) return true;
    return false;
  }

  final private boolean jj_3R_336() {
    if (jj_3R_351()) return true;
    return false;
  }

  final private boolean jj_3R_119() {
    return false;
  }

  final private boolean jj_3R_350() {
    if (jj_scan_token(BANG)) return true;
    return false;
  }

  final private boolean jj_3R_184() {
    if (jj_3R_198()) return true;
    return false;
  }

  final private boolean jj_3R_212() {
    if (jj_3R_237()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_349() {
    if (jj_scan_token(TILDE)) return true;
    return false;
  }

  final private boolean jj_3R_211() {
    if (jj_3R_236()) return true;
    return false;
  }

  final private boolean jj_3R_160() {
    if (jj_scan_token(HOOK)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_184()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_210() {
    if (jj_3R_98()) return true;
    return false;
  }

  final private boolean jj_3R_159() {
    if (jj_3R_74()) return true;
    return false;
  }

  final private boolean jj_3R_209() {
    if (jj_3R_235()) return true;
    return false;
  }

  final private boolean jj_3R_174() {
    if (jj_3R_180()) return true;
    return false;
  }

  final private boolean jj_3R_79() {
    Token xsp;
    xsp = jj_scanpos;
    lookingAhead = true;
    jj_semLA = getToken(1).kind == GT && ((Token.GTToken)getToken(1)).realKind == RSIGNEDSHIFT;
    lookingAhead = false;
    if (!jj_semLA || jj_3R_119()) return true;
    if (jj_scan_token(GT)) return true;
    if (jj_scan_token(GT)) return true;
    return false;
  }

  final private boolean jj_3R_335() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_349()) {
    jj_scanpos = xsp;
    if (jj_3R_350()) return true;
    }
    if (jj_3R_285()) return true;
    return false;
  }

  final private boolean jj_3R_105() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_159()) {
    jj_scanpos = xsp;
    if (jj_3R_160()) return true;
    }
    return false;
  }

  final private boolean jj_3_39() {
    if (jj_3R_89()) return true;
    return false;
  }

  final private boolean jj_3R_320() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_335()) {
    jj_scanpos = xsp;
    if (jj_3R_336()) {
    jj_scanpos = xsp;
    if (jj_3R_337()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_145() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_174()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_195() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_39()) {
    jj_scanpos = xsp;
    if (jj_3R_209()) {
    jj_scanpos = xsp;
    if (jj_3R_210()) {
    jj_scanpos = xsp;
    if (jj_3R_211()) {
    jj_scanpos = xsp;
    if (jj_3R_212()) {
    jj_scanpos = xsp;
    if (jj_3R_213()) {
    jj_scanpos = xsp;
    if (jj_3R_214()) {
    jj_scanpos = xsp;
    if (jj_3R_215()) {
    jj_scanpos = xsp;
    if (jj_3R_216()) {
    jj_scanpos = xsp;
    if (jj_3R_217()) {
    jj_scanpos = xsp;
    if (jj_3R_218()) {
    jj_scanpos = xsp;
    if (jj_3R_219()) {
    jj_scanpos = xsp;
    if (jj_3R_220()) {
    jj_scanpos = xsp;
    if (jj_3R_221()) {
    jj_scanpos = xsp;
    if (jj_3R_222()) {
    jj_scanpos = xsp;
    if (jj_3R_223()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_120() {
    return false;
  }

  final private boolean jj_3R_146() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_145()) return true;
    return false;
  }

  final private boolean jj_3R_149() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_105()) return true;
    return false;
  }

  final private boolean jj_3R_80() {
    Token xsp;
    xsp = jj_scanpos;
    lookingAhead = true;
    jj_semLA = getToken(1).kind == GT && ((Token.GTToken)getToken(1)).realKind == RUNSIGNEDSHIFT;
    lookingAhead = false;
    if (!jj_semLA || jj_3R_120()) return true;
    if (jj_scan_token(GT)) return true;
    if (jj_scan_token(GT)) return true;
    if (jj_scan_token(GT)) return true;
    return false;
  }

  final private boolean jj_3R_260() {
    if (jj_scan_token(DECR)) return true;
    if (jj_3R_72()) return true;
    return false;
  }

  final private boolean jj_3R_95() {
    if (jj_scan_token(LT)) return true;
    if (jj_3R_145()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_146()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(GT)) return true;
    return false;
  }

  final private boolean jj_3R_75() {
    if (jj_scan_token(LT)) return true;
    if (jj_3R_105()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_149()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(GT)) return true;
    return false;
  }

  final private boolean jj_3R_259() {
    if (jj_scan_token(INCR)) return true;
    if (jj_3R_72()) return true;
    return false;
  }

  final private boolean jj_3R_250() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  final private boolean jj_3R_379() {
    if (jj_scan_token(FINALLY)) return true;
    if (jj_3R_98()) return true;
    return false;
  }

  final private boolean jj_3R_231() {
    Token xsp;
    if (jj_3R_250()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_250()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_148()) return true;
    return false;
  }

  final private boolean jj_3R_354() {
    if (jj_3R_261()) return true;
    return false;
  }

  final private boolean jj_3_16() {
    if (jj_3R_75()) return true;
    return false;
  }

  final private boolean jj_3R_353() {
    if (jj_3R_71()) return true;
    return false;
  }

  final private boolean jj_3R_298() {
    if (jj_3R_320()) return true;
    return false;
  }

  final private boolean jj_3R_297() {
    if (jj_3R_260()) return true;
    return false;
  }

  final private boolean jj_3_37() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  final private boolean jj_3R_296() {
    if (jj_3R_259()) return true;
    return false;
  }

  final private boolean jj_3R_61() {
    if (jj_3R_90()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_353()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_354()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_378() {
    if (jj_scan_token(CATCH)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_341()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_98()) return true;
    return false;
  }

  final private boolean jj_3R_319() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  final private boolean jj_3_15() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_16()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_318() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  final private boolean jj_3R_248() {
    if (jj_scan_token(TRY)) return true;
    if (jj_3R_98()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_378()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_379()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_14() {
    if (jj_3R_75()) return true;
    return false;
  }

  final private boolean jj_3_36() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_77()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  final private boolean jj_3R_85() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_14()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_15()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_295() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_318()) {
    jj_scanpos = xsp;
    if (jj_3R_319()) return true;
    }
    if (jj_3R_285()) return true;
    return false;
  }

  final private boolean jj_3_38() {
    Token xsp;
    if (jj_3_36()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_36()) { jj_scanpos = xsp; break; }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_37()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_340() {
    if (jj_3R_269()) return true;
    return false;
  }

  final private boolean jj_3R_285() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_295()) {
    jj_scanpos = xsp;
    if (jj_3R_296()) {
    jj_scanpos = xsp;
    if (jj_3R_297()) {
    jj_scanpos = xsp;
    if (jj_3R_298()) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_202() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_38()) {
    jj_scanpos = xsp;
    if (jj_3R_231()) return true;
    }
    return false;
  }

  final private boolean jj_3R_325() {
    if (jj_scan_token(SEMICOLON)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_340()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_324() {
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  final private boolean jj_3R_247() {
    if (jj_scan_token(SYNCHRONIZED)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_77()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_98()) return true;
    return false;
  }

  final private boolean jj_3_3() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_61()) return true;
    return false;
  }

  final private boolean jj_3_13() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  final private boolean jj_3R_348() {
    if (jj_scan_token(REM)) return true;
    return false;
  }

  final private boolean jj_3R_347() {
    if (jj_scan_token(SLASH)) return true;
    return false;
  }

  final private boolean jj_3R_346() {
    if (jj_scan_token(STAR)) return true;
    return false;
  }

  final private boolean jj_3R_323() {
    if (jj_3R_61()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_3()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_256() {
    if (jj_3R_261()) return true;
    return false;
  }

  final private boolean jj_3R_303() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_323()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_324()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_325()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  final private boolean jj_3R_104() {
    if (jj_3R_85()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_13()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_332() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_346()) {
    jj_scanpos = xsp;
    if (jj_3R_347()) {
    jj_scanpos = xsp;
    if (jj_3R_348()) return true;
    }
    }
    if (jj_3R_285()) return true;
    return false;
  }

  final private boolean jj_3R_205() {
    if (jj_3R_71()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_256()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_246() {
    if (jj_scan_token(THROW)) return true;
    if (jj_3R_77()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_204() {
    if (jj_3R_202()) return true;
    return false;
  }

  final private boolean jj_3_12() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  final private boolean jj_3R_277() {
    if (jj_3R_285()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_332()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_103() {
    if (jj_3R_82()) return true;
    Token xsp;
    if (jj_3_12()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_12()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_74() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_103()) {
    jj_scanpos = xsp;
    if (jj_3R_104()) return true;
    }
    return false;
  }

  final private boolean jj_3R_232() {
    if (jj_scan_token(LT)) return true;
    if (jj_scan_token(GT)) return true;
    return false;
  }

  final private boolean jj_3R_377() {
    if (jj_3R_77()) return true;
    return false;
  }

  final private boolean jj_3_34() {
    if (jj_3R_75()) return true;
    return false;
  }

  final private boolean jj_3R_203() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_34()) {
    jj_scanpos = xsp;
    if (jj_3R_232()) return true;
    }
    return false;
  }

  final private boolean jj_3R_245() {
    if (jj_scan_token(RETURN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_377()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_334() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  final private boolean jj_3R_302() {
    if (jj_3R_322()) return true;
    return false;
  }

  final private boolean jj_3R_333() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  final private boolean jj_3R_138() {
    if (jj_scan_token(NEW)) return true;
    if (jj_3R_85()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_203()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_204()) {
    jj_scanpos = xsp;
    if (jj_3R_205()) return true;
    }
    return false;
  }

  final private boolean jj_3R_286() {
    if (jj_scan_token(ENUM)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_302()) jj_scanpos = xsp;
    if (jj_3R_303()) return true;
    return false;
  }

  final private boolean jj_3R_317() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_333()) {
    jj_scanpos = xsp;
    if (jj_3R_334()) return true;
    }
    if (jj_3R_277()) return true;
    return false;
  }

  final private boolean jj_3R_376() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3_35() {
    if (jj_scan_token(NEW)) return true;
    if (jj_3R_82()) return true;
    if (jj_3R_202()) return true;
    return false;
  }

  final private boolean jj_3R_96() {
    if (jj_3R_82()) return true;
    return false;
  }

  final private boolean jj_3R_271() {
    if (jj_3R_277()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_317()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_244() {
    if (jj_scan_token(CONTINUE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_376()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_87() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_35()) {
    jj_scanpos = xsp;
    if (jj_3R_138()) return true;
    }
    return false;
  }

  final private boolean jj_3_11() {
    if (jj_3R_74()) return true;
    return false;
  }

  final private boolean jj_3R_63() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_11()) {
    jj_scanpos = xsp;
    if (jj_3R_96()) return true;
    }
    return false;
  }

  final private boolean jj_3R_339() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_85()) return true;
    return false;
  }

  public JavaParserTokenManager token_source;
  JavaCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;

  public JavaParser(java.io.InputStream stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new JavaParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
  }

  public void ReInit(java.io.InputStream stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
  }

  public JavaParser(java.io.Reader stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new JavaParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
  }

  public JavaParser(JavaParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
  }

  public void ReInit(JavaParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;

    // System.out.println("token: " + token.image);

    if (token.kind == kind) {
      return token;
    }

    // Throwable stack = new Throwable("PARSE FAIL lasttok: " + oldToken.image + " curtok: " + token.image);
    // stack.fillInStackTrace();
    // stack.printStackTrace(System.out);

    token = oldToken;
    throw generateParseException();
  }

  // Added by hand to remove serialize warning.  (markro)
  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  public ParseException generateParseException() {
    Token errortok = token.next;
    int line = errortok.beginLine, column = errortok.beginColumn;
    String mess = (errortok.kind == 0) ? tokenImage[0] : errortok.image;
    return new ParseException("Parse error at line " + line + ", column " + column + ".  Encountered: " + mess);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

}

class JTBToolkit {
   static NodeToken makeNodeToken(Token t) {
      NodeToken node = new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn);

      if ( t.specialToken == null )
         return node;

      // Modified by hand to remove rawtypes warning.  (markro)
      // Vector temp = new Vector();
      Vector<NodeToken> temp = new Vector<NodeToken>();

      Token orig = t;

      while ( t.specialToken != null ) {
         t = t.specialToken;
         temp.addElement(new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn));
      }

      // Reverse the special token list
      for ( int i = temp.size() - 1; i >= 0; --i ) {
         // Modified by hand to remove unchecked warning.  (markro)
         // node.addSpecial((NodeToken)temp.elementAt(i));
         node.addSpecial(temp.elementAt(i));
      }

      node.trimSpecials();
      return node;
   }
}
