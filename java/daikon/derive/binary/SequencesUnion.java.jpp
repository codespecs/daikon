#if 0
Do not attempt to compile this file with a Java compiler such as javac.
You first need to preprocess it with cpp, the C preprocessor.
The correct way to build the system is to run 'make'.
#endif

#if !(defined(SCALAR) || defined(STRING) || defined(FLOAT))
  #error "One of SCALAR, FLOAT, or STRING must be defined"
#endif

#if defined(SCALAR)
  #undef SCALAR
  #define SCALAR long
  #define SCALARSEQUENCESUNION SequenceScalarUnion
  #define INTERN(v) Intern.internedLong(v)
#elif defined(FLOAT)
  #define SCALAR double
  #define SCALARSEQUENCESUNION SequenceFloatUnion
  #define INTERN(v) Intern.internedDouble(v)
#elif defined(STRING)
  #define SCALAR @Interned String
  #define SCALARSEQUENCESUNION SequenceStringUnion
  #if 0
    // In this particular case, the string is already interned
  #endif
  #define INTERN(v) v
#else
  #error "One of SCALAR, FLOAT, or STRING must be defined"
#endif

// ***** This file is automatically generated from SequencesUnion.java.jpp

package daikon.derive.binary;

import org.checkerframework.dataflow.qual.SideEffectFree;
import org.checkerframework.dataflow.qual.Pure;
import org.checkerframework.checker.interning.qual.Interned;
import daikon.*;
import daikon.derive.*;
import org.plumelib.util.ArraysPlume;
import org.plumelib.util.Intern;

/**
 * Represents the setwise union of two base variables, each of which is a collection. This variable
 * contains every element that is in either of the base variables, but this variable contains no
 * duplicate elements. Elements are in order of first appearance in the base variables (base1
 * first).
 */
public final class SCALARSEQUENCESUNION extends BinaryDerivation {
  // We are Serializable, so we specify a version to allow changes to
  // method signatures without breaking serialization.  If you add or
  // remove fields, you should change this number to the current date.
  static final long serialVersionUID = 20020122L;

  // Variables starting with dkconfig_ should only be set via the
  // daikon.config.Configuration interface.
  /** Boolean. True iff SCALARSEQUENCESUNION derived variables should be generated. */
  public static boolean dkconfig_enabled = false;

  SCALARSEQUENCESUNION(VarInfo vi1, VarInfo vi2) {
    super(vi1, vi2);
  }

  @Override
  public ValueAndModified computeValueAndModifiedImpl(ValueTuple full_vt) {
    int mod1 = base1.getModified(full_vt);
    if (mod1 == ValueTuple.MISSING_NONSENSICAL) {
      return ValueAndModified.MISSING_NONSENSICAL;
    }
    int mod2 = base2.getModified(full_vt);
    if (mod2 == ValueTuple.MISSING_NONSENSICAL) {
      return ValueAndModified.MISSING_NONSENSICAL;
    }
    Object val1 = base1.getValue(full_vt);
    if (val1 == null) {
      return ValueAndModified.MISSING_NONSENSICAL;
    }
    SCALAR[] val1_array = (SCALAR[]) val1;
    Object val2 = base2.getValue(full_vt);
    if (val2 == null) {
      return ValueAndModified.MISSING_NONSENSICAL;
    }
    SCALAR[] val2_array = (SCALAR[]) val2;

    SCALAR[] tmp = new SCALAR[val1_array.length + val2_array.length];
    int size = 0;
    for (int i = 0; i < val1_array.length; i++) {
      SCALAR v = val1_array[i];
      if ((size == 0) || (ArraysPlume.indexOf(ArraysPlume.subarray(tmp, 0, size), v) == -1)) {
        tmp[size++] = v;
      }
    }
    for (int i = 0; i < val2_array.length; i++) {
      SCALAR v = val2_array[i];
      if ((size == 0) || (ArraysPlume.indexOf(ArraysPlume.subarray(tmp, 0, size), v) == -1)) {
        tmp[size++] = v;
      }
    }

    SCALAR[] union = ArraysPlume.subarray(tmp, 0, size);
    union = Intern.intern(union);

    int mod =
        (((mod1 == ValueTuple.UNMODIFIED) && (mod2 == ValueTuple.UNMODIFIED))
         ? ValueTuple.UNMODIFIED
         : ValueTuple.MODIFIED);
    return new ValueAndModified(union, mod);
  }

  @Override
  protected VarInfo makeVarInfo() {
    return VarInfo.make_function("union", base1, base2);
  }

  @Pure
  @Override
  public boolean isSameFormula(Derivation other) {
    return (other instanceof SCALARSEQUENCESUNION);
  }

  /** Returns the ESC name. */
  @SideEffectFree
  @Override
  public String esc_name(String index) {
    return String.format("union(%s,%s)", var1().esc_name(), var2().esc_name());
  }
}
