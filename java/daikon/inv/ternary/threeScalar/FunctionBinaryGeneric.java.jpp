#if 0
// This file defines the FunctionBinary class for the specified FUNCTION
// and PERMUTATION.  FUNCTION is the name of the inner class that defines
// the function (eg, LogicalOr).  PERMUTATION defines the order of the
// arguments.  It must be one of xyz, yzx, zxy, xzy, yxz, zyx).  Both
// are #defines that must be defined before including this file.
// This file is used by FunctionBinary.java.jpp
#endif

#if (PERMUTATION == PERM_XYZ)
  #define PERM_NAME _xyz
  #define resultvar x
  #define arg1   y
  #define arg2   z
  #define result_index 0
  #define arg1_index   1
  #define arg2_index   2
#elif (PERMUTATION == PERM_YXZ)
  #define PERM_NAME _yxz
  #define resultvar y
  #define arg1   x
  #define arg2   z
  #define result_index 1
  #define arg1_index   0
  #define arg2_index   2
#elif (PERMUTATION == PERM_ZXY)
  #define PERM_NAME _zxy
  #define resultvar z
  #define arg1   x
  #define arg2   y
  #define result_index 2
  #define arg1_index   0
  #define arg2_index   1
#elif (PERMUTATION == PERM_XZY)
  #define PERM_NAME _xzy
  #define resultvar x
  #define arg1   z
  #define arg2   y
  #define result_index 0
  #define arg1_index   2
  #define arg2_index   1
#elif (PERMUTATION == PERM_YZX)
  #define PERM_NAME _yzx
  #define resultvar y
  #define arg1   z
  #define arg2   x
  #define result_index 1
  #define arg1_index   2
  #define arg2_index   0
#elif (PERMUTATION == PERM_ZYX)
  #define PERM_NAME _zyx
  #define resultvar z
  #define arg1   y
  #define arg2   x
  #define result_index 2
  #define arg1_index   1
  #define arg2_index   0
#else
  #error "PERMUTATION not properly defined"
#endif

/**
 * Represents the invariant {@code resultvar = FUNCTION(arg1, arg2)} over three PRIMITIVE
 * scalars. EXTRA_INV_DOC
 */
public static class CNAME(FUNCTION,PERM_NAME) extends CLASSNAME {
  // We are Serializable, so we specify a version to allow changes to
  // method signatures without breaking serialization.  If you add or
  // remove fields, you should change this number to the current date.
  static final long serialVersionUID = 20031030L;

  #ifdef ARG1_BOUND
    // arg1 must be between arg1_bound[0] and arg1_bound[1] inclusive
    static int[] arg1_bound = ARG1_BOUND;
  #endif

  #ifdef ARG2_BOUND
    // arg2 must be between arg2_bound[0] and arg2_bound[1] inclusive
    static int[] arg2_bound = ARG2_BOUND;
  #endif

  private static @Prototype CNAME(FUNCTION,PERM_NAME) proto = new @Prototype CNAME(FUNCTION,PERM_NAME) ();

  /** Returns the prototype invariant for CNAME(FUNCTION,PERM_NAME) */
  public static @Prototype CNAME(FUNCTION,PERM_NAME) get_proto() {
    return proto;
  }

  /** instantiate an invariant on the specified slice */
  @Override
  protected CNAME(FUNCTION,PERM_NAME) instantiate_dyn(@Prototype CNAME(FUNCTION,PERM_NAME) this, PptSlice slice) {
    return new CNAME(FUNCTION,PERM_NAME) (slice);
  }

  private CNAME(FUNCTION,PERM_NAME) (PptSlice slice) {
    super(slice);
  }

  public @Prototype CNAME(FUNCTION,PERM_NAME) () {
    super();
  }

  private static String[] method_name = new String[] METHOD_NAME;

  @Override
  public String[] get_method_name(@GuardSatisfied CNAME(FUNCTION,PERM_NAME) this) {
    return method_name;
  }

  private static int function_id = -1;

  @Override
  public int get_function_id() {
    return function_id;
  }

  @Override
  public void set_function_id(int function_id) {
    assert CNAME(FUNCTION,PERM_NAME).function_id == -1;
    CNAME(FUNCTION,PERM_NAME).function_id = function_id;
  }

  private static int var_order = PERMUTATION;

  @Override
  public int get_var_order(@GuardSatisfied CNAME(FUNCTION,PERM_NAME) this) {
    return var_order;
  }

  @Pure
  @Override
  public boolean is_symmetric() {
    #ifdef SYMMETRIC
      return true;
    #else
      return false;
    #endif
  }

  @Override
  public PRIMITIVE func(PRIMITIVE arg1, PRIMITIVE arg2) {
    #ifdef ARG1_BOUND
      if ((arg1 < arg1_bound[0]) || (arg1 > arg1_bound[1])) {
        throw new ArithmeticException("arg1 (" + arg1 + ") out of range "
                                       + arg1_bound[0] + ".." + arg1_bound[1]);
      }
    #endif

    #ifdef ARG2_BOUND
      if ((arg2 < arg2_bound[0]) || (arg2 > arg2_bound[1])) {
        throw new ArithmeticException("arg2 (" + arg2 + ") out of range "
                                       + arg2_bound[0] + ".." + arg2_bound[1]);
      }
    #endif

    #ifdef BOOLEAN_ARGS
      if ((arg1 < 0) || (arg1 > 1)) {
        throw new ArithmeticException("arg1 (" + arg1 + ") is not boolean ");
      }
      if ((arg2 < 0) || (arg2 > 1)) {
        throw new ArithmeticException("arg2 (" + arg2 + ") is not boolean ");
      }
    #endif

    return (FUNC(arg1, arg2));
  }

  @Override
  public InvariantStatus check_modified(PRIMITIVE x, PRIMITIVE y,
                                      PRIMITIVE z, int count) {
    return (check_ordered(resultvar, arg1, arg2, count));
  }

  @Override
  public InvariantStatus add_modified(PRIMITIVE x, PRIMITIVE y,
                                      PRIMITIVE z, int count) {
    if (Debug.logDetail()) {
      log("result=%s, arg1=%s, arg2=%s", resultvar, arg1, arg2);
    }
    return (add_ordered(resultvar, arg1, arg2, count));
  }

  @Pure
  @Override
  public boolean is ## FUNCTION() {
    return true;
  }

  #ifdef EXACT
  @Pure
  @Override
  public boolean isExact() {
    return true;
  }
  #endif

  /** Returns a list of non-instantiating suppressions for this invariant. */
  @Pure
  @Override
  public @Nullable NISuppressionSet get_ni_suppressions() {
    if (NIS.dkconfig_enabled && dkconfig_enabled) {
      return suppressions;
    } else {
      return null;
    }
  }

  /** definition of this invariant (the suppressee) */
  private static NISuppressee suppressee = new NISuppressee(CNAME(FUNCTION,PERM_NAME).class, 3);

  // suppressor definitions (used below)
  private static NISuppressor result_eq_arg1 =
      new NISuppressor(result_index, arg1_index, EQUALITY.class);
  private static NISuppressor result_eq_arg2 =
      new NISuppressor(result_index, arg2_index, EQUALITY.class);
  private static NISuppressor arg1_eq_arg2 =
      new NISuppressor(arg1_index, arg2_index, EQUALITY.class);

  private static NISuppressor result_lt_arg1 =
      new NISuppressor(result_index, arg1_index, LESS_THAN.class);
  private static NISuppressor result_lt_arg2 =
      new NISuppressor(result_index, arg2_index, LESS_THAN.class);
  private static NISuppressor arg1_lt_arg2 =
      new NISuppressor(arg1_index, arg2_index, LESS_THAN.class);
  private static NISuppressor arg2_lt_arg1 =
      new NISuppressor(arg2_index, arg1_index, LESS_THAN.class);

  private static NISuppressor result_le_arg1 =
      new NISuppressor(result_index, arg1_index, LESS_EQUAL.class);
  private static NISuppressor result_le_arg2 =
      new NISuppressor(result_index, arg2_index, LESS_EQUAL.class);
  private static NISuppressor arg1_le_arg2 =
      new NISuppressor(arg1_index, arg2_index, LESS_EQUAL.class);
  private static NISuppressor arg2_le_arg1 =
      new NISuppressor(arg2_index, arg1_index, LESS_EQUAL.class);

  private static NISuppressor result_track0_arg1 =
      new NISuppressor(result_index, arg1_index, TRACK_0.class);
  private static NISuppressor result_track0_arg2 =
      new NISuppressor(result_index, arg2_index, TRACK_0.class);
  private static NISuppressor arg1_track0_arg2 =
      new NISuppressor(arg1_index, arg2_index, TRACK_0.class);
  private static NISuppressor arg1_track0_result =
      new NISuppressor(arg1_index, result_index, TRACK_0.class);
  private static NISuppressor arg2_track0_result =
      new NISuppressor(arg2_index, result_index, TRACK_0.class);
  private static NISuppressor arg2_track0_arg1 =
      new NISuppressor(arg2_index, arg1_index, TRACK_0.class);

  private static NISuppressor result_eq_1 =
      new NISuppressor(result_index, EQUAL_ONE.class);
  private static NISuppressor arg1_eq_1 =
      new NISuppressor(arg1_index, EQUAL_ONE.class);
  private static NISuppressor arg2_eq_1 =
      new NISuppressor(arg2_index, EQUAL_ONE.class);

  private static NISuppressor result_eq_0 =
      new NISuppressor(result_index, EQUAL_ZERO.class);
  private static NISuppressor arg1_eq_0 =
      new NISuppressor(arg1_index, EQUAL_ZERO.class);
  private static NISuppressor arg2_eq_0 =
      new NISuppressor(arg2_index, EQUAL_ZERO.class);

  private static NISuppressor result_ne_0 =
      new NISuppressor(result_index, NONZERO.class);
  private static NISuppressor arg1_ne_0 =
      new NISuppressor(arg1_index, NONZERO.class);
  private static NISuppressor arg2_ne_0 =
      new NISuppressor(arg2_index, NONZERO.class);

  private static NISuppressor result_ge_0 =
      new NISuppressor(result_index, GTE_0.class);
  private static NISuppressor arg1_ge_0 =
      new NISuppressor(arg1_index, GTE_0.class);
  private static NISuppressor arg2_ge_0 =
      new NISuppressor(arg2_index, GTE_0.class);

  private static NISuppressor result_ge_64 =
      new NISuppressor(result_index, GTE_64.class);
  private static NISuppressor arg1_ge_64 =
      new NISuppressor(arg1_index, GTE_64.class);
  private static NISuppressor arg2_ge_64 =
      new NISuppressor(arg2_index, GTE_64.class);

#if defined (TYPELONG)
  private static NISuppressor result_boolean =
      new NISuppressor(result_index, BOOLEAN.class);
  private static NISuppressor arg1_boolean =
      new NISuppressor(arg1_index, BOOLEAN.class);
  private static NISuppressor arg2_boolean =
      new NISuppressor(arg2_index, BOOLEAN.class);

  private static NISuppressor result_even =
      new NISuppressor(result_index, EVEN.class);
  private static NISuppressor arg1_even =
      new NISuppressor(arg1_index, EVEN.class);
  private static NISuppressor arg2_even =
      new NISuppressor(arg2_index, EVEN.class);

  private static NISuppressor result_power2 =
      new NISuppressor(result_index, POWER2.class);
  private static NISuppressor arg1_power2 =
      new NISuppressor(arg1_index, POWER2.class);
  private static NISuppressor arg2_power2 =
      new NISuppressor(arg2_index, POWER2.class);

  private static NISuppressor result_and0_arg1 =
      new NISuppressor(result_index, arg1_index, BW_AND_0.class);
  private static NISuppressor result_and0_arg2 =
      new NISuppressor(result_index, arg2_index, BW_AND_0.class);
  private static NISuppressor arg1_and0_arg2 =
      new NISuppressor(arg1_index, arg2_index, BW_AND_0.class);

  // The arguments to bitwise subset are backwards from what one
  // might expect.  The second argument is a subset of the first
  // argument
  private static NISuppressor arg1_bw_subset_arg2 =
      new NISuppressor(arg2_index, arg1_index, BW_SUBSET.class);
  private static NISuppressor arg2_bw_subset_arg1 =
      new NISuppressor(arg1_index, arg2_index, BW_SUBSET.class);

  private static NISuppressor result_shift0_arg1 =
      new NISuppressor(result_index, arg1_index, SHIFT_0.class);
  private static NISuppressor result_shift0_arg2 =
      new NISuppressor(result_index, arg2_index, SHIFT_0.class);
  private static NISuppressor arg1_shift0_arg2 =
      new NISuppressor(arg1_index, arg2_index, SHIFT_0.class);

  private static NISuppressor arg2_divides_arg1 =
      new NISuppressor(arg1_index, arg2_index, DIVIDES.class);
  private static NISuppressor arg1_divides_arg2 =
      new NISuppressor(arg2_index, arg1_index, DIVIDES.class);

  private static NISuppressor arg2_valid_shift =
      new NISuppressor(arg2_index, BOUND0_63.class);
#endif

  #if FTYPE == FTYPE_Division

    private static NISuppressionSet suppressions =
      new NISuppressionSet(
          new NISuppression[] {

          #if defined (TYPELONG)
            // (r == 0) && (arg1 < arg2) && (arg1 >= 0) && (arg2 != 0) ==> r = arg1 / arg2
            new NISuppression(result_eq_0, arg1_lt_arg2, arg1_ge_0, arg2_ne_0, suppressee),
          #endif

            // (arg1 == arg2) && (arg2 != 0) && (r == 1)
            new NISuppression(arg1_eq_arg2, arg2_ne_0, result_eq_1, suppressee),

            // (r == arg1) && (arg2 == 1) ==> r = arg1 / arg2
            new NISuppression(result_eq_arg1, arg2_eq_1, suppressee),
          });

  #elif FTYPE == FTYPE_Mod

    private static NISuppressionSet suppressions =
      new NISuppressionSet(
          new NISuppression[] {
            // anything mod 0 is undefined
            // (r == arg1) && (arg1 < arg2) && (arg2 != 0) && (r >= 0) ==> r = arg1 % arg2
            new NISuppression(result_eq_arg1, arg1_lt_arg2, arg2_ne_0, result_ge_0, suppressee),

            // (r == 0) && ((arg1 % arg2) == 0)
            new NISuppression(result_eq_0, arg2_divides_arg1, suppressee),

            // These are unnecessary as the divides invariant handles these
            // nicely.
            // (r == 0) && (arg2 == 1)      ==> r = arg1 % arg2
            // new NISuppression (result_eq_0, arg2_eq_1, suppressee),

            // (r == 0) && (arg1 == arg2)
            // new NISuppression (result_eq_0, arg1_eq_arg2, suppressee),
          });

  #elif FTYPE == FTYPE_Multiply

    private static NISuppressionSet suppressions =
      new NISuppressionSet(
          new NISuppression[] {

            // (r == 0) && (arg1 == 0) ==> r = arg1 * arg2
            new NISuppression(result_eq_0, arg1_eq_0, suppressee),

            // (r == 0) && (arg2 == 0) ==> r = arg1 * arg2
            new NISuppression(result_eq_0, arg2_eq_0, suppressee),

            // (r == arg1) && (arg2 == 1) ==> r = arg1 * arg2
            new NISuppression(result_eq_arg1, arg2_eq_1, suppressee),

            // (r == arg2) && (arg1 == 1) ==> r = arg1 * arg2
            new NISuppression(result_eq_arg2, arg1_eq_1, suppressee),

          #if defined (TYPELONG)
            // (r == arg1) && (arg2 boolean) && (arg2==0 ==> arg1==0)
            // x = x * 0 is true if x == 0
            // x = x * 1 is true for all x
            new NISuppression(arg2_boolean, arg2_track0_arg1, result_eq_arg1,
                               suppressee),

            // (r == arg2) && (arg1 boolean) && (arg1==0 ==> arg2=0)
            new NISuppression(result_eq_arg2, arg1_track0_arg2, arg1_boolean,
                               suppressee),
          #endif
          });

  #elif FTYPE == FTYPE_Power

    // Note that any suppression that doesn't limit arg2 to valid exponents
    // (>= 0), must check for valid exponents as well (so that the invariant
    // is correctly destroyed on invalid exponents)
    //
    // Note also that pow(0,0) == 1 and pow(0,x), where (x > 0), == 0
    // Another interesting artificat of pow is that for any even base, any
    // exponent >= 64 will yield a result of 0.  For example, pow(10,256) == 0
    // (at least for integers)

    private static NISuppressionSet suppressions =
      new NISuppressionSet(
          new NISuppression[] {

            // (r == 1) && (arg2 == 0) ==> r = pow (arg1, arg2)
            new NISuppression(result_eq_1, arg2_eq_0, suppressee),

            // (r == 1) && (arg1 == 1) && (arg2 >= 0)   ==> r = pow (arg1, arg2)
            new NISuppression(result_eq_1, arg1_eq_1, arg2_ge_0, suppressee),

            // (r == 0) && (arg1 == 0) && (arg2 > 0)
            new NISuppression(result_eq_0, arg1_eq_0, arg2_ne_0, arg2_ge_0,
                              suppressee),

            // (r == arg1) && (arg2 == 1)    ==> r = pow (arg1, arg2)
            new NISuppression(result_eq_arg1, arg2_eq_1, suppressee),

          #if defined (TYPELONG)
            // (r == 0) && (arg1 even) && (arg2 >= 64)
            // with each multiply there is one more zero in the result and since
            // a long has 64 bits in it, it becomes zero at that point
            new NISuppression(result_eq_0, arg1_even, arg2_ge_64, suppressee),

            // (r == 1) && (arg1 boolean) && (arg1==0 <==> arg2==0) && (arg2 >= 0)
            // 1 = pow (0, arg2) true iff (arg2 == 0)
            // 1 = pow (1, arg2) true when arg2 valid exponent
            new NISuppression(arg1_track0_arg2, arg2_ge_0, arg1_boolean,
                               result_eq_1, suppressee),

            // (r == arg1) && (r boolean) && (arg2 > 0)
            // 0 = pow (0, arg2) true when arg2 != 0
            // 1 = pow (1, arg2) true when arg2 valid exponent
            new NISuppression(result_eq_arg1, result_boolean, arg2_ne_0,
                               arg2_ge_0, suppressee),

          #endif
          });

  #elif FTYPE == FTYPE_Minimum

    private static NISuppressionSet suppressions =
      new NISuppressionSet(
          new NISuppression[] {

            // (resultvar == arg1) && (arg1 <= arg2) ==> r = min(arg1, arg2)
            new NISuppression(result_eq_arg1, arg1_le_arg2, suppressee),

            // (resultvar == arg2) && (arg2 <= arg1) ==> r = min(arg1, arg2)
            new NISuppression(result_eq_arg2, arg2_le_arg1, suppressee),

          #if defined (TYPELONG)
            // (resultvar boolean) && (arg1=0 <==> r=0) && (arg2 == 1)
            // 0 = min (arg1, 1), true when (arg1 == 0)
            // 1 = min (arg1, 1), true when (arg1 > 0)
            new NISuppression(result_track0_arg1, arg1_track0_result,
                               result_boolean, arg1_ge_0, arg2_eq_1, suppressee),

            // (resultvar boolean) && (arg2=0 <==> r=0) && (arg1 == 1)
            new NISuppression(result_track0_arg2, arg2_track0_result,
                               result_boolean, arg2_ge_0, arg1_eq_1, suppressee),
          #endif
          });

  #elif FTYPE == FTYPE_Maximum

    private static NISuppressionSet suppressions =
      new NISuppressionSet(
          new NISuppression[] {

            // (r == arg1) && (arg2 <= arg1) ==> r = max(arg1, arg2)
            new NISuppression(result_eq_arg1, arg2_le_arg1, suppressee),

            // (r == arg2) && (arg1 <= arg2) ==> r = max(arg1, arg2)
            new NISuppression(result_eq_arg2, arg1_le_arg2, suppressee),

          });

  #elif FTYPE == FTYPE_RshiftUnsigned

    private static NISuppressionSet suppressions =
        new NISuppressionSet(
          new NISuppression[] {

            // (r == arg1) && (arg2 == 0) ==> r = arg1 >>> arg2
            new NISuppression(result_eq_arg1, arg2_eq_0, suppressee),

            // (r == 0) && (arg1 == 0) && (arg2 valid shift) ==> r = arg1 >>> arg2
            // new NISuppression (result_eq_0, arg1_eq_0, arg2_valid_shift, suppressee),

            // (r == 0) && ((arg1 >> arg2) == 0)
            new NISuppression(result_eq_0, arg1_shift0_arg2, suppressee),

            // (r == 0) && (arg2 >= arg1) && (arg1 >= 0) && (arg2 valid shift)
            // This suppression really ought to have 2**arg2 >= arg1, but we
            // don't have that suppression.  This still might catch a lot of these.
            // new NISuppression (result_eq_0, arg1_le_arg2, arg1_ge_0,
            //                   arg2_valid_shift, suppressee),
          });

  #elif FTYPE == FTYPE_RshiftSigned

    private static NISuppressionSet suppressions =
        new NISuppressionSet(
          new NISuppression[] {

            // (r == arg1) && (arg2 == 0) ==> r = arg1 >>> arg2
            new NISuppression(result_eq_arg1, arg2_eq_0, suppressee),

            // (r == 0) && (arg1 == 0) && (0 <= arg2 <= 63)   ==> r = arg1 >>> arg2
            // new NISuppression (result_eq_0, arg1_eq_0, arg2_valid_shift, suppressee),

            // (r == 0) && ((arg1 >> arg2) == 0)
            new NISuppression(result_eq_0, arg1_shift0_arg2, suppressee),

            // (r == 0) && (arg2 >= arg1) && (arg1 >= 0) && (arg2 valid shift)
            // This suppression really ought to have 2**arg2 >= arg1, but we
            // don't have that invariant.  This still might catch a lot of these.
            // new NISuppression (result_eq_0, arg1_le_arg2, arg1_ge_0,
            //                   arg2_valid_shift, suppressee),
          });

  #elif FTYPE == FTYPE_Lshift

    private static NISuppressionSet suppressions =
        new NISuppressionSet(
          new NISuppression[] {

            // (r == arg1) && (arg2 == 0) ==> r = arg1 << arg2
            new NISuppression(result_eq_arg1, arg2_eq_0, suppressee),

            // (r == 0) && (arg1 == 0) && (0 <= arg2 <= 63)   ==> r = arg1 << arg2
            new NISuppression(result_eq_0, arg1_eq_0, arg2_valid_shift,
                               suppressee),

          });

  #elif FTYPE == FTYPE_BitwiseXor

    private static NISuppressionSet suppressions =
        new NISuppressionSet(
          new NISuppression[] {

            // (r == 0) && (arg1 == arg2) ==> r = arg1 ^ arg2
            new NISuppression(result_eq_0, arg1_eq_arg2, suppressee),

            // (r == arg1) && (arg2 == 0) ==> r = arg1 ^ arg2
            new NISuppression(result_eq_arg1, arg2_eq_0, suppressee),

            // (r == arg2) && (arg1 == 0) ==> r = arg1 ^ arg2
            new NISuppression(result_eq_arg2, arg1_eq_0, suppressee),

          });

  #elif FTYPE == FTYPE_BitwiseAnd

    private static NISuppressionSet suppressions =
        new NISuppressionSet(
          new NISuppression[] {

            // (r == arg1) && (arg1 == arg2) && (r == arg2) ==> r = arg1 &  arg2
            new NISuppression(result_eq_arg1, arg1_eq_arg2, result_eq_arg2,
                               suppressee),

            // (r == arg1) && (arg1 bitwise subset arg2)
            new NISuppression(result_eq_arg1, arg1_bw_subset_arg2, suppressee),

            // (r == arg2) && (arg2 bitwise subset arg1)
            new NISuppression(result_eq_arg2, arg2_bw_subset_arg1, suppressee),

            // (r == 0) && (arg1 & arg2 == 0) ==> r = arg1 & arg2
            new NISuppression(result_eq_0, arg1_and0_arg2, suppressee),

            // All of these are subsummed by the prior one
            // (r == 0) && (arg1 == 0) ==> r = arg1 & arg2
            // new NISuppression (result_eq_0, arg1_eq_0, suppressee),

            // (r == 0) && (arg2 == 0) ==> r = arg1 & arg2
            // new NISuppression (result_eq_0, arg2_eq_0, suppressee),

            // (r == 0) && (arg1 boolean) && (arg2 is even)
            // new NISuppression (result_eq_0, arg1_boolean, arg2_even, suppressee),

            // (r == 0) && (arg2 boolean) && (arg1 is even)
            // new NISuppression (result_eq_0, arg2_boolean, arg1_even, suppressee),

            // (r == 0) && (arg2 > arg1) && (arg2 power2) && (arg1 >= 0)
            // new NISuppression (result_eq_0, arg1_lt_arg2, arg2_power2, arg1_ge_0,
            //                   suppressee),

            // (r == 0) && (arg1 > arg2) && (arg1 power2) && (arg2 >= 0)
            // new NISuppression (result_eq_0, arg2_lt_arg1, arg1_power2, arg2_ge_0,
            //                   suppressee),

            // (r == arg1) && (r boolean) && (arg2 == 1)
            new NISuppression(result_eq_arg1, result_boolean, arg2_eq_1,
                               suppressee),

            // (r == arg2) && (r boolean) && (arg1 == 1)
            new NISuppression(result_eq_arg2, result_boolean, arg1_eq_1,
                               suppressee),

          });

  #elif FTYPE == FTYPE_BitwiseOr

    private static NISuppressionSet suppressions =
        new NISuppressionSet(
          new NISuppression[] {

            // (r == arg1) && (arg2 bitwise subset arg1)
            new NISuppression(result_eq_arg1, arg2_bw_subset_arg1, suppressee),

            // (r == arg2) && (arg1 bitwise subset arg2)
            new NISuppression(result_eq_arg2, arg1_bw_subset_arg2, suppressee),

            // All of the below are subsummed by the two above
            // (r == arg1) && (arg1 == arg2) ==> r = arg1 | arg2
            // new NISuppression (result_eq_arg1, arg1_eq_arg2, suppressee),

            // (r == arg1) && (arg2 == 0) ==> r = arg1 | arg2
            // new NISuppression (result_eq_arg1, arg2_eq_0, suppressee),

            // (r == arg2) && (arg1 == 0) ==> r = arg1 | arg2
            // new NISuppression (result_eq_arg2, arg1_eq_0, suppressee),

            // (r == 1) && (arg1 == 1) && (arg2 boolean)
            // new NISuppression (result_eq_1, arg1_eq_1, arg2_boolean, suppressee),

            // (r == 1) && (arg2 == 1) && (arg1 boolean)
            // new NISuppression (result_eq_1, arg2_eq_1, arg1_boolean, suppressee),

          });

  #elif FTYPE == FTYPE_Gcd

    // gcd (0, y) == y
    // gcd (0, 0) == 0
    // gcd (1, y) == 1

    private static NISuppressionSet suppressions =
        new NISuppressionSet(
          new NISuppression[] {

            // (r == arg1) && (arg1 == arg2) && (r == arg2) && (r >= 0)
            //    ==> r = Gcd (arg1, arg2)
            new NISuppression(result_eq_arg1, arg1_eq_arg2, result_eq_arg2,
                               result_ge_0, suppressee),

            // (r == arg1) && (arg2 == 0) && (r >= 0) ==> r = gcd (arg1, arg2)
            new NISuppression(result_eq_arg1, result_ge_0, arg2_eq_0, suppressee),

            // (r == arg2) && (arg1 == 0) && (r >= 0) ==> r = gcd (arg1, arg2)
            new NISuppression(result_eq_arg2, result_ge_0, arg1_eq_0, suppressee),

            // (r == 1) && (arg2 == 1)        ==> r = gcd (arg1, art2)
            new NISuppression(result_eq_1, arg2_eq_1, suppressee),

            // (r == 1) && (arg1 == 1)        ==> r = gcd (arg1, art2)
            new NISuppression(result_eq_1, arg1_eq_1, suppressee),

            // (r == arg1) && (arg1 divides arg2) && (r >= 0)
            new NISuppression(result_eq_arg1, arg1_divides_arg2, result_ge_0, suppressee),

            // (r == arg2) && (arg2 divides arg1) && (r >= 0)
            new NISuppression(result_eq_arg2, arg2_divides_arg1, result_ge_0, suppressee),

            // (r == arg2) && (arg2 boolean) && (arg2==0 ==> arg1==0)
            // 0 = gcd (arg1, 0) true when (arg1 == 0)
            // 1 = gcd (arg1, 1) always true
            new NISuppression(result_eq_arg2, arg2_track0_arg1, arg2_boolean,
                               suppressee),

            // (r == arg1) && (arg1 boolean) && (arg1==0 ==> arg2==0)
            // 0 = gcd (0, arg2), true if (arg2 == 0)
            // 1 = gcd (1, arg2), always true
            new NISuppression(result_eq_arg1, arg1_boolean, arg1_track0_arg2,
                               suppressee),

          });

  #elif FTYPE == FTYPE_LogicalAnd

    private static NISuppressionSet suppressions =
        new NISuppressionSet(
          new NISuppression[] {

            // (r == arg1) && (arg1 == arg2) && (r == arg2) && (r is boolean)
            //    ==> r = arg1 && arg2
            new NISuppression(result_eq_arg1, arg1_eq_arg2, result_eq_arg2,
                               result_boolean, suppressee),

            // (r == 0) && (arg1 == 0) && (arg2 is boolean) ==> r = arg1 && arg2
            new NISuppression(result_eq_0, arg1_eq_0, arg2_boolean, suppressee),

            // (r == 0) && (arg2 == 0) && (arg1 is boolean) ==> r = arg1 && arg2
            new NISuppression(result_eq_0, arg2_eq_0, arg1_boolean, suppressee),

            // (r == 0) && (arg1 == 0) && (arg2 boolean) ==> r = arg1 && arg2
            new NISuppression(result_eq_0, arg1_eq_0, arg2_boolean, suppressee),

            // (r == 0) && (arg2 == 0) && (arg1 boolean) ==> r = arg1 && arg2
            new NISuppression(result_eq_0, arg2_eq_0, arg1_boolean, suppressee),

            // (r == arg1) && (r boolean) && (arg2 == 1)
            new NISuppression(result_eq_arg1, result_boolean, arg2_eq_1,
                               suppressee),

            // (r == arg2) && (r boolean) && (arg1 == 1)
            new NISuppression(result_eq_arg2, result_boolean, arg1_eq_1,
                               suppressee),

          });

  #elif FTYPE == FTYPE_LogicalOr

    private static NISuppressionSet suppressions =
        new NISuppressionSet(
          new NISuppression[] {

            // Note that
            // x == y && y == z does NOT imply x == z because of possibly
            // missing values.  For example:
            //
            //  Sample    X         Y           Z
            //    1       1         1           missing
            //    2       0         missing     1
            //    3       missing   0           0
            //
            //  The best solution seems to be to include all three
            //  equalities for the suppression

            // (r == arg1) && (arg1 == arg2) && (r == arg2) && (r is boolean)
            //    ==> r = arg1 | arg2
            new NISuppression(result_eq_arg1, arg1_eq_arg2, result_eq_arg2,
                               result_boolean, suppressee),

            // (r == arg1) && (arg2 == 0) && (r is boolean) ==> r = arg1 | arg2
            new NISuppression(result_eq_arg1, result_boolean, arg2_eq_0,
                               suppressee),

            // (r == arg2) && (arg1 == 0) && (r is boolean) ==> r = arg1 | arg2
            new NISuppression(result_eq_arg2, result_boolean, arg1_eq_0,
                               suppressee),

            // (r == 1) && (arg1 == 1) && (arg2 boolean)
            new NISuppression(result_eq_1, arg1_eq_1, arg2_boolean, suppressee),

            // (r == 1) && (arg2 == 1) && (arg1 boolean)
            new NISuppression(result_eq_1, arg2_eq_1, arg1_boolean, suppressee),

          });

  #elif FTYPE == FTYPE_LogicalXor

    private static NISuppressionSet suppressions =
        new NISuppressionSet(
          new NISuppression[] {

            // (r == 0) && (arg1 == arg2) && (arg1 boolean) ==> r = arg1 ^ arg2
            new NISuppression(arg1_eq_arg2, arg1_boolean, result_eq_0,
                               suppressee),

            // (r == arg1) && (arg2 == 0) && (resultvar boolean) ==> r = arg1 ^ arg2
            new NISuppression(result_eq_arg1, result_boolean, arg2_eq_0,
                               suppressee),

            // (r == arg2) && (arg1 == 0) && (resultvar boolean)==> r = arg1 ^ arg2
            new NISuppression(result_eq_arg2, result_boolean, arg1_eq_0,
                               suppressee),

          });

  #endif

  // Create a suppression factory for functionBinary
  #if defined(EQUALITY_MIN_MAX_SUPPRESS)
    #define FACTORY_INVCLASS  CLASSNAME
    #define FACTORY_CNT       3
    #define FACTORY1          equality_suppress_repeated_arg
    #define FACTORY1_INV_CNT  1
    #define FACTORY1_VAR_INFO {new VarInfo[2]}
    #define FACTORY2          equality_suppress_distinct_args
    #define FACTORY2_INV_CNT  2
    #define FACTORY2_VAR_INFO {new VarInfo[2], new VarInfo[2]}
    #define FACTORY3          equality_suppress_min_max
    #define FACTORY3_INV_CNT  2
    #define FACTORY3_VAR_INFO {new VarInfo[2], new VarInfo[2]}
    #include "daikon/inv/suppressionFactory.java.jpp"
  #elif defined(EQUALITY_SUPPRESS)
    #define FACTORY_INVCLASS  CLASSNAME
    #define FACTORY_CNT       2
    #define FACTORY1          equality_suppress_repeated_arg
    #define FACTORY1_INV_CNT  1
    #define FACTORY1_VAR_INFO {new VarInfo[2]}
    #define FACTORY2          equality_suppress_distinct_args
    #define FACTORY2_INV_CNT  2
    #define FACTORY2_VAR_INFO {new VarInfo[2], new VarInfo[2]}
    #undef FACTORY3
    #include "daikon/inv/suppressionFactory.java.jpp"
  #endif

}

#undef PERMUTATION
#undef PERM_NAME
#undef resultvar
#undef arg1
#undef arg2
#undef result_index
#undef arg1_index
#undef arg2_index
