#if 0
Do not attempt to compile this file with a Java compiler such as javac.
You first need to preprocess it with cpp, the C preprocessor.
The correct way to build the system is to run 'make'.
#endif

#if !(defined(TYPELONG) || defined(TYPEDOUBLE))
  #error "TYPELONG or TYPEDOUBLE must be defined"
#endif

#if defined(TYPELONG)
  #define CLASSNAME EltwiseIntComparison
  #define SUPERCLASS SingleScalarSequence
#elif defined(TYPEDOUBLE)
  #define CLASSNAME EltwiseFloatComparison
  #define SUPERCLASS SingleFloatSequence
#endif

// ***** This file is automatically generated from EltwiseIntComparison.java.jpp

package daikon.inv.unary.sequence;

import daikon.*;
import typequals.prototype.qual.NonPrototype;
import typequals.prototype.qual.Prototype;

/**
 * Abstract base class defined so that the different types of EltwiseIntComparison (and separately
 * EltwiseFloatComparison), at the current moment those are ==, !=, &lt;, &le;, &gt;, &ge; can have
 * a common superclass which is needed for actions like the isExclusiveFormula method. It is also
 * used to force the definition of the hasSeenNonTrivialSample function for each type of
 * EltwiseIntComparison.
 */

public abstract class CLASSNAME extends SUPERCLASS {
  // We are Serializable, so we specify a version to allow changes to
  // method signatures without breaking serialization.  If you add or
  // remove fields, you should change this number to the current date.
  static final long serialVersionUID = 20030109L;

  public abstract boolean hasSeenNonTrivialSample();

  protected CLASSNAME(PptSlice ppt) {
    super(ppt);
  }

  protected @Prototype CLASSNAME() {
    super();
  }
}
