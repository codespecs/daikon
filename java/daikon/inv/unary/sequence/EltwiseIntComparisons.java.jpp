#if 0
Do not attempt to compile this file with a Java compiler such as javac.
You first need to preprocess it with cpp, the C preprocessor.
The correct way to build the system is to run 'make'.
#endif

#if !(defined(EQUAL) || defined(LESSTHAN) || defined(LESSEQUAL) || defined(GREATERTHAN) || defined(GREATEREQUAL) || defined(EQUALFLOAT) || defined(LESSTHANFLOAT) || defined(LESSEQUALFLOAT) || defined(GREATERTHANFLOAT) || defined(GREATEREQUALFLOAT))
  #error "EQUAL, LESSTHAN, LESSEQUAL, GREATERTHAN, GREATEREQUAL, EQUALFLOAT, LESSTHANFLOAT, LESSEQUALFLOAT, GREATERTHANFLOAT, or GREATEREQUALFLOAT must be defined"
#endif

#if defined(EQUAL) || defined(LESSTHAN) || defined(LESSEQUAL) || defined(GREATERTHAN) || defined(GREATEREQUAL)
  #define TYPELONG
#else
  #define TYPEDOUBLE
#endif

#if defined(TYPELONG)
  #define SUPERCLASS EltwiseIntComparison
  #define PRIMITIVE long
  #define ELTONEOF EltOneOf
  #define VALUE_SET ValueSet.ValueSetScalarArray
#elif defined(TYPEDOUBLE)
  #define SUPERCLASS EltwiseFloatComparison
  #define PRIMITIVE double
  #define ELTONEOF EltOneOfFloat
  #define VALUE_SET ValueSet.ValueSetFloatArray
#endif

#define EQUALCLASS EltwiseIntEqual
#define LESSTHANCLASS EltwiseIntLessThan
#define LESSEQUALCLASS EltwiseIntLessEqual
#define GREATERTHANCLASS EltwiseIntGreaterThan
#define GREATEREQUALCLASS EltwiseIntGreaterEqual

#define EQUALFLOATCLASS EltwiseFloatEqual
#define LESSTHANFLOATCLASS EltwiseFloatLessThan
#define LESSEQUALFLOATCLASS EltwiseFloatLessEqual
#define GREATERTHANFLOATCLASS EltwiseFloatGreaterThan
#define GREATEREQUALFLOATCLASS EltwiseFloatGreaterEqual

#if defined(EQUAL)
  #define CLASSNAME EQUALCLASS
  #define CLASSSTRING "EltwiseIntEqual"
  #define COMPARATOR(a,b) ((a) == (b))
  #define COMPARATORhtml ==
  #define COMPARATORstring ==
  #define COMPARATORSTRING "=="
  #define COMPARATORSTRINGQUANT "eltwiseEqual"
  #define INVERSECOMPARATORSTRING "!="
#elif defined(LESSTHAN)
  #define CLASSNAME LESSTHANCLASS
  #define CLASSSTRING "EltwiseIntLessThan"
  #define COMPARATOR(a,b) ((a) < (b))
  #define COMPARATORhtml &lt;
  #define COMPARATORstring <
  #define COMPARATORSTRING "<"
  #define COMPARATORSTRINGQUANT "eltwiseLT"
  #define INVERSECOMPARATORSTRING ">="
#elif defined(LESSEQUAL)
  #define CLASSNAME LESSEQUALCLASS
  #define CLASSSTRING "EltwiseIntLessEqual"
  #define COMPARATOR(a,b) ((a) <= (b))
  #define COMPARATORhtml &le;
  #define COMPARATORstring <=
  #define COMPARATORSTRING "<="
  #define COMPARATORSTRINGQUANT "eltwiseLTE"
  #define INVERSECOMPARATORSTRING ">"
#elif defined(GREATERTHAN)
  #define CLASSNAME GREATERTHANCLASS
  #define CLASSSTRING "EltwiseIntGreaterThan"
  #define COMPARATOR(a,b) ((a) > (b))
  #define COMPARATORhtml &gt;
  #define COMPARATORstring >
  #define COMPARATORSTRING ">"
  #define COMPARATORSTRINGQUANT "eltwiseGT"
  #define INVERSECOMPARATORSTRING "<="
#elif defined(GREATEREQUAL)
  #define CLASSNAME GREATEREQUALCLASS
  #define CLASSSTRING "EltwiseIntGreaterEqual"
  #define COMPARATOR(a,b) ((a) >= (b))
  #define COMPARATORhtml &ge;
  #define COMPARATORstring >=
  #define COMPARATORSTRING ">="
  #define COMPARATORSTRINGQUANT "eltwiseGTE"
  #define INVERSECOMPARATORSTRING "<"
#elif defined(EQUALFLOAT)
  #define CLASSNAME EQUALFLOATCLASS
  #define CLASSSTRING "EltwiseFloatEqual"
  #define COMPARATOR(a,b) Global.fuzzy.eq(a,b)
  #define COMPARATORhtml ==
  #define COMPARATORstring ==
  #define COMPARATORSTRING "=="
  #define COMPARATORSTRINGQUANT "eltwiseEqual"
  #define INVERSECOMPARATORSTRING "!="
#elif defined(LESSTHANFLOAT)
  #define CLASSNAME LESSTHANFLOATCLASS
  #define CLASSSTRING "EltwiseFloatLessThan"
  #define COMPARATOR(a,b) Global.fuzzy.lt(a,b)
  #define COMPARATORhtml &lt;
  #define COMPARATORstring <
  #define COMPARATORSTRING "<"
  #define COMPARATORSTRINGQUANT "eltwiseLT"
  #define INVERSECOMPARATORSTRING ">="
#elif defined(LESSEQUALFLOAT)
  #define CLASSNAME LESSEQUALFLOATCLASS
  #define CLASSSTRING "EltwiseFloatLessEqual"
  #define COMPARATOR(a,b) Global.fuzzy.lte(a,b)
  #define COMPARATORhtml &le;
  #define COMPARATORstring <=
  #define COMPARATORSTRING "<="
  #define COMPARATORSTRINGQUANT "eltwiseLTE"
  #define INVERSECOMPARATORSTRING ">"
#elif defined(GREATERTHANFLOAT)
  #define CLASSNAME GREATERTHANFLOATCLASS
  #define CLASSSTRING "EltwiseFloatGreaterThan"
  #define COMPARATOR(a,b) Global.fuzzy.gt(a,b)
  #define COMPARATORhtml &gt;
  #define COMPARATORstring >
  #define COMPARATORSTRING ">"
  #define COMPARATORSTRINGQUANT "eltwiseGT"
  #define INVERSECOMPARATORSTRING "<="
#elif defined(GREATEREQUALFLOAT)
  #define CLASSNAME GREATEREQUALFLOATCLASS
  #define CLASSSTRING "EltwiseFloatGreaterEqual"
  #define COMPARATOR(a,b) Global.fuzzy.gte(a,b)
  #define COMPARATORhtml &ge;
  #define COMPARATORstring >=
  #define COMPARATORSTRING ">="
  #define COMPARATORSTRINGQUANT "eltwiseGTE"
  #define INVERSECOMPARATORSTRING "<"
#endif

// ***** This file is automatically generated from EltwiseIntComparisons.java.jpp

package daikon.inv.unary.sequence;

import daikon.*;
import daikon.Quantify.QuantFlags;
import daikon.derive.*;
import daikon.derive.binary.*;
import daikon.inv.*;
import java.util.*;
import org.checkerframework.checker.interning.qual.Interned;
import org.checkerframework.checker.lock.qual.GuardSatisfied;
import org.checkerframework.checker.nullness.qual.Nullable;
import org.checkerframework.dataflow.qual.Pure;
import org.checkerframework.dataflow.qual.SideEffectFree;
import org.plumelib.util.Intern;
import typequals.prototype.qual.NonPrototype;
import typequals.prototype.qual.Prototype;

#if defined(EQUAL) || defined(EQUALFLOAT)
  /**
   * Represents equality between adjacent elements (x[i], x[i+1]) of a PRIMITIVE sequence. Prints as
   * {@code x[] elements are equal}.
   */
#else
  /**
   * Represents the invariant COMPARATORhtml between adjacent elements
   * (x[i], x[i+1]) of a PRIMITIVE sequence. Prints as
   * {@code x[] sorted by COMPARATORstring}.
   */
#endif
public class CLASSNAME extends SUPERCLASS {
  // We are Serializable, so we specify a version to allow changes to
  // method signatures without breaking serialization.  If you add or
  // remove fields, you should change this number to the current date.
  static final long serialVersionUID = 20030822L;

  // Variables starting with dkconfig_ should only be set via the
  // daikon.config.Configuration interface.
  /** Boolean. True iff EltwiseIntComparison invariants should be considered. */
  public static boolean dkconfig_enabled = Invariant.invariantEnabledDefault;

  static final boolean debugEltwiseIntComparison = false;

  protected CLASSNAME(PptSlice ppt) {
    super(ppt);
  }

  protected @Prototype CLASSNAME() {
    super();
  }

  private static @Prototype CLASSNAME proto = new @Prototype CLASSNAME();

  /** Returns the prototype invariant for CLASSNAME */
  public static @Prototype CLASSNAME get_proto() {
    return proto;
  }

  /** returns whether or not this invariant is enabled */
  @Override
  public boolean enabled() {
    return dkconfig_enabled;
  }

  /** Non-equality CLASSNAME invariants are only valid on integral types. */
  @Override
  public boolean instantiate_ok(VarInfo[] vis) {

    if (!valid_types(vis)) {
      return false;
    }

    #if !defined(EQUAL) && defined(TYPELONG)
      if (!vis[0].type.baseIsIntegral()) {
        return false;
      }
    #endif

    return true;
  }

  /** Instantiate the invariant on the specified slice. */
  @Override
  protected CLASSNAME instantiate_dyn(@Prototype CLASSNAME this, PptSlice slice) {
    return new CLASSNAME(slice);
  }

  @SideEffectFree
  @Override
  public CLASSNAME clone(@GuardSatisfied CLASSNAME this) {
    CLASSNAME result = (CLASSNAME) super.clone();
    return result;
  }

  @Override
  public String repr(@GuardSatisfied CLASSNAME this) {
    return CLASSSTRING + varNames() + ": falsified=" + falsified;
  }

  @SideEffectFree
  @Override
  public String format_using(@GuardSatisfied CLASSNAME this, OutputFormat format) {
    if (format.isJavaFamily()) {
      return format_java_family(format);
    }

    if (format == OutputFormat.DAIKON) {
      return format_daikon();
    }
    if (format == OutputFormat.ESCJAVA) {
      return format_esc();
    }
    if (format == OutputFormat.CSHARPCONTRACT) {
      return format_csharp_contract();
    }
    if (format == OutputFormat.SIMPLIFY) {
      return format_simplify();
    }

    return format_unimplemented(format);
  }

  public String format_daikon(@GuardSatisfied CLASSNAME this) {
    if (debugEltwiseIntComparison) {
      System.out.println(repr());
    }
#if defined(EQUAL) || defined(FLOATEQUAL)
    return var().name() + " elements are equal";
#else
    return (var().name() + " sorted by " + COMPARATORSTRING);
#endif
  }

  public String format_esc(@GuardSatisfied CLASSNAME this) {
    String[] form = VarInfo.esc_quantify(false, var(), var());
    #if defined(EQUAL) || defined(EQUALFLOAT)
      return form[0] + "(" + form[1] + " " + COMPARATORSTRING + " " + form[2] + ")" + form[3];
    #else
      return form[0] + "((i+1 == j) ==> (" + form[1] + " " + COMPARATORSTRING + " " + form[2] + "))" + form[3];
    #endif
  }

  public String format_java_family(@GuardSatisfied CLASSNAME this, OutputFormat format) {
    return "daikon.Quant." + COMPARATORSTRINGQUANT + "(" + var().name_using(format) + ")";
  }

  public String format_csharp_contract(@GuardSatisfied CLASSNAME this) {
    String[] split = var().csharp_array_split();
    return "Contract.ForAll(0, " + split[0] + ".Count()-1, i => " + split[0] + "[i]" + split[1] + " " + COMPARATORSTRING + " " + split[0] + "[i+1]" + split[1] + ")";
  }

  public String format_simplify(@GuardSatisfied CLASSNAME this) {
    String[] form = VarInfo.simplify_quantify(QuantFlags.adjacent(),
                                               var(), var());
#if defined(EQUAL) || defined(EQUALFLOAT)
    String comparator = "EQ";
#else
    String comparator = COMPARATORSTRING;
#endif
    return form[0] + "(" + comparator + " " + form[1] + " " + form[2] + ")"
      + form[3];
  }

  @Override
  @SuppressWarnings("UnnecessaryParentheses")  // generated code, parentheses are sometimes needed
  public InvariantStatus check_modified(PRIMITIVE @Interned [] a, int count) {
    for (int i = 1; i < a.length; i++) {
      if (!COMPARATOR(a[i - 1], a[i])) {
        return InvariantStatus.FALSIFIED;
      }
    }
    return InvariantStatus.NO_CHANGE;
  }

  @Override
  public InvariantStatus add_modified(PRIMITIVE @Interned [] a, int count) {
    return check_modified(a, count);
  }

  // Perhaps check whether all the arrays of interest have length 0 or 1.

  @Override
  protected double computeConfidence() {
#if defined(EQUAL) || defined(EQUALFLOAT)
    if (ppt.num_samples() != 0) {
      return Invariant.CONFIDENCE_JUSTIFIED;
    } else {
      return Invariant.CONFIDENCE_UNJUSTIFIED;
    }
#else
    return 1 - Math.pow(.5, ppt.num_samples());
#endif
  }

  @Pure
  @Override
  public boolean isExact() {
#if defined(EQUAL) || defined(EQUALFLOAT)
    return true;
#else
    return false;
#endif
  }

  @Pure
  @Override
  public boolean isSameFormula(Invariant other) {
    return (other instanceof CLASSNAME);
  }

  // Not pretty... is there another way?
  // Also, reasonably complicated, need to ensure exact correctness, not sure if the
  // regression tests test this functionality

  @Pure
  @Override
  public boolean isExclusiveFormula(Invariant other) {
    // This whole approach is wrong in the case when the sequence can
    // ever consist of only one element.  For now, just forget
    // it. -SMcC
    if (true) {
      return false;
    }

    if (other instanceof SUPERCLASS) {
#if defined(EQUAL) || defined(EQUALFLOAT)
      return !((other instanceof EQUALCLASS) || (other instanceof EQUALFLOATCLASS)
               || (other instanceof LESSEQUALCLASS) || (other instanceof LESSEQUALFLOATCLASS)
               || (other instanceof GREATEREQUALCLASS) || (other instanceof GREATEREQUALFLOATCLASS));
#elif defined(LESSTHAN) || defined(LESSTHANFLOAT)
      return !((other instanceof LESSTHANCLASS) || (other instanceof LESSTHANFLOATCLASS)
               || (other instanceof LESSEQUALCLASS) || (other instanceof LESSEQUALFLOATCLASS));
#elif defined(LESSEQUAL) || defined(LESSEQUALFLOAT)
      return (other instanceof GREATERTHANCLASS) || (other instanceof GREATERTHANFLOATCLASS);
#elif defined(GREATERTHAN) || defined(GREATERTHANFLOAT)
      return !((other instanceof GREATERTHANCLASS) || (other instanceof GREATERTHANFLOATCLASS)
               || (other instanceof GREATEREQUALCLASS) || (other instanceof GREATEREQUALFLOATCLASS));
#else // defined(GREATEREQUAL) || defined(GREATEREQUALFLOATCLASS)
      return (other instanceof LESSTHANCLASS) || (other instanceof LESSTHANFLOATCLASS);
#endif
    }
    return false;
  }

  // Look up a previously instantiated invariant.
  public static @Nullable CLASSNAME find(PptSlice ppt) {
    assert ppt.arity() == 1;
    for (Invariant inv : ppt.invs) {
      if (inv instanceof CLASSNAME) {
        return (CLASSNAME) inv;
      }
    }
    return null;
  }

  // Copied from IntComparison.
  // public boolean isExclusiveFormula(Invariant other)
  // {
  //   if (other instanceof IntComparison) {
  //     return core.isExclusiveFormula(((IntComparison) other).core);
  //   }
  //   if (other instanceof IntNonEqual) {
  //     return isExact();
  //   }
  //   return false;
  // }

  /**
   * This function returns whether a sample has been seen by this Invariant that includes two or
   * more entries in an array. For a 0 or 1 element array a, a[] sorted by any binary operation is
   * "vacuously true" because no check is ever made since the binary operation requires two
   * operands. Thus although invariants of this type are true regarding 0 or 1 length arrays, they
   * are meaningless. This function is meant to be used in isObviousImplied() to prevent such
   * meaningless invariants from being printed.
   */
  @Override
  public boolean hasSeenNonTrivialSample() {
    VALUE_SET vs = (VALUE_SET) ppt.var_infos[0].get_value_set();
    return (vs.multi_arr_cnt() > 0);
  }

  @Pure
  @Override
  public @Nullable DiscardInfo isObviousDynamically(VarInfo[] vis) {
    DiscardInfo super_result = super.isObviousDynamically(vis);
    if (super_result != null) {
      return super_result;
    }

    if (!hasSeenNonTrivialSample()) {
      return new DiscardInfo(this, DiscardCode.obvious,
                             "No samples sequences of size >=2 were seen. Vacuously true.");
    }

    ELTONEOF eoo = ELTONEOF.find(ppt);
    if ((eoo != null) && eoo.enoughSamples() && (eoo.num_elts() == 1)) {
      return new DiscardInfo(this, DiscardCode.obvious, "The sequence contains all equal values.");
    }

#if defined(LESSEQUAL) || defined(LESSEQUALFLOAT) || defined(GREATEREQUAL) || defined(GREATEREQUALFLOAT)
    {
      // some relations imply others as follows: < -> <=, > -> >=
      // == -> <=, >=

      // This code lets through some implied invariants, here is how:
      // In the ESC, JML, Java modes of output, the invariants are guarded
      // before printing.  This guarding makes some of the invariants that
      // are searched for (example, NoDuplicates) unable to be found since it
      // won't find something of the form (a -> NoDuplicates).  This can
      // cause cases to exist, for example, the invariants (a -> b[] sorted
      // by !=), (a -> b[] has no duplicates) existing in the same ppt where
      // one is obviously implied by the other. I am not sure currently of
      // the best way with dealing with this, but I am going to allow these
      // other invariants to exist for now because they are not wrong, just
      // obvious.

      for (Invariant inv : ppt.invs) {
#if defined(LESSEQUAL) || defined(LESSEQUALFLOAT)
        if ((inv instanceof LESSTHANCLASS) || (inv instanceof LESSTHANFLOATCLASS)) {
          String discardString = "The invariant holds for < which implies <=.";
          return new DiscardInfo(this, DiscardCode.obvious, discardString);
        } else if ((inv instanceof EQUALCLASS) || (inv instanceof EQUALFLOATCLASS)) {
          String discardString = "The invariant holds for == which implies <=.";
          return new DiscardInfo(this, DiscardCode.obvious, discardString);
        }
#elif defined(GREATEREQUAL) || defined(GREATEREQUALFLOAT)
        if ((inv instanceof GREATERTHANCLASS) || (inv instanceof GREATERTHANFLOATCLASS)) {
          String discardString = "The invariant holds for > which implies >=.";
          return new DiscardInfo(this, DiscardCode.obvious, discardString);
        } else if ((inv instanceof EQUALCLASS) || (inv instanceof EQUALFLOATCLASS)) {
          String discardString = "The invariant holds for == which implies >=.";
          return new DiscardInfo(this, DiscardCode.obvious, discardString);
        }
#endif
      }

    }
#endif

    // sorted by (any operation) for an entire sequence -> sorted by that same
    // operation for a subsequence

    // also, sorted by < for entire -> sorted by <= for subsequence
    //       sorted by > for entire -> sorted by >= for subsequence

    Derivation deriv = vis[0].derived;

    if ((deriv instanceof SequenceScalarSubsequence) || (deriv instanceof SequenceFloatSubsequence)) {
      // Find the slice with the full sequence, check for an invariant of this type
      PptSlice sliceToCheck;

      if (deriv instanceof SequenceScalarSubsequence) {
        sliceToCheck = ppt.parent.findSlice(((SequenceScalarSubsequence)deriv).seqvar());
      } else {
        sliceToCheck = ppt.parent.findSlice(((SequenceFloatSubsequence)deriv).seqvar());
      }

      if (sliceToCheck != null) {
        for (Invariant inv : sliceToCheck.invs) {
#if defined(LESSEQUAL) || defined(LESSEQUALFLOAT)
          if ((inv instanceof LESSTHANCLASS) || (inv instanceof LESSTHANFLOATCLASS)) {
            String discardString = "This is a subsequence of a sequence for which the < invariant holds.";
            return new DiscardInfo(this, DiscardCode.obvious, discardString);
          }
#elif defined(GREATEREQUAL) || defined(GREATEREQUALFLOAT)
          if ((inv instanceof GREATERTHANCLASS) || (inv instanceof GREATERTHANFLOATCLASS)) {
             String discardString = "This is a subsequence of a sequence for which the > invariant holds.";
            return new DiscardInfo(this, DiscardCode.obvious, discardString);
          }
#endif
          if (inv.getClass().equals(getClass())) {
            String discardString = "This is a subsequence of a sequence for which the same invariant holds.";
            return new DiscardInfo(this, DiscardCode.obvious, discardString);
          }
        }
      }
    }

    return null;
  }
}
