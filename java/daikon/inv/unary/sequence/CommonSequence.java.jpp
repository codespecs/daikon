#if 0
Do not attempt to compile this file with a Java compiler such as javac.
You first need to preprocess it with cpp, the C preprocessor.
The correct way to build the system is to run 'make'.
#endif

#if !(defined(TYPEDOUBLE) || defined(TYPELONG))
  #error "TYPEDOUBLE or TYPELONG must be defined"
#endif

#if defined(TYPELONG)
  #define CLASSNAME CommonSequence
  #define SUPERCLASS SingleScalarSequence
  #define PRIMITIVE long
  #define CLASSSTRING "CommonSequence"
  #define INDEXOF ArraysPlume.indexOf
  #define TOSTRING_SIMPLIFY(x) simplify_format_long(x)
  #define BASE_IS_INTEGRAL baseIsIntegral()
#elif defined(TYPEDOUBLE)
  #define CLASSNAME CommonFloatSequence
  #define SUPERCLASS SingleFloatSequence
  #define PRIMITIVE double
  #define CLASSSTRING "CommonFloatSequence"
  #define INDEXOF Global.fuzzy.indexOf
  #define TOSTRING_SIMPLIFY(x) simplify_format_double(x)
  #define BASE_IS_INTEGRAL baseIsFloat()
#endif

// ***** This file is automatically generated from CommonSequence.java.jpp

package daikon.inv.unary.sequence;

import daikon.*;
import daikon.inv.*;
import java.util.Arrays;
import org.checkerframework.checker.interning.qual.Interned;
import org.checkerframework.checker.lock.qual.GuardSatisfied;
import org.checkerframework.checker.nullness.qual.MonotonicNonNull;
import org.checkerframework.dataflow.qual.Pure;
import org.checkerframework.dataflow.qual.SideEffectFree;
import org.plumelib.util.ArraysPlume;
import org.plumelib.util.Intern;
import typequals.prototype.qual.NonPrototype;
import typequals.prototype.qual.Prototype;

/**
 * Represents sequences of PRIMITIVE values that contain a common subset. Prints as
 * {@code {e1, e2, e3, ...} subset of x[]}.
 */

public class CLASSNAME extends SUPERCLASS {
  // We are Serializable, so we specify a version to allow changes to
  // method signatures without breaking serialization.  If you add or
  // remove fields, you should change this number to the current date.
  static final long serialVersionUID = 20030822L;

  // Variables starting with dkconfig_ should only be set via the
  // daikon.config.Configuration interface.
  /** Boolean. True iff CommonSequence invariants should be considered. */
  public static boolean dkconfig_enabled = false;

  /** Boolean. Set to true to consider common sequences over hashcodes (pointers). */
  public static boolean dkconfig_hashcode_seqs = false;

  static final boolean debugCommonSequence = false;

  private int elts = 0;

  /**
   * Null means no samples have been seen yet.
   * Empty array means intersection is empty.
   */
  private PRIMITIVE @MonotonicNonNull [] intersect = null;

  protected CLASSNAME(PptSlice ppt) {
    super(ppt);
  }

  protected @Prototype CLASSNAME() {
    super();
  }

  private static @Prototype CLASSNAME proto = new @Prototype CLASSNAME();

  /** Returns the prototype invariant for CLASSNAME */
  public static @Prototype CLASSNAME get_proto() {
    return proto;
  }

  /** returns whether or not this invariant is enabled */
  @Override
  public boolean enabled() {
    return dkconfig_enabled;
  }

  /** Sequences of hashcode values won't be consistent and are thus not printed by default. */
  @Override
  public boolean instantiate_ok(VarInfo[] vis) {

    if (!valid_types(vis)) {
      return false;
    }

    return (dkconfig_hashcode_seqs || vis[0].file_rep_type.BASE_IS_INTEGRAL);
  }

  /** instantiate an invariant on the specified slice */
  @Override
  protected CLASSNAME instantiate_dyn(@Prototype CLASSNAME this, PptSlice slice) {
    return new CLASSNAME(slice);
  }

  // this.intersect is read-only, so don't clone it
  // public Object clone();

  @Override
  public String repr(@GuardSatisfied CLASSNAME this) {
    return CLASSSTRING + " " + varNames() + ": elts=\"" + elts;
  }

  private String printIntersect(@GuardSatisfied CLASSNAME this) {
    if (intersect == null) {
      return "{}";
    }

    String result = "{";
    for (int i = 0; i < intersect.length; i++) {
      result += intersect[i];
      if (i != intersect.length - 1) {
        result += ", ";
      }
    }
    result += "}";
    return result;
  }

  @SideEffectFree
  @Override
  public String format_using(@GuardSatisfied CLASSNAME this, OutputFormat format) {
    if (format == OutputFormat.DAIKON) {
      return format_daikon();
    }
    if (format == OutputFormat.CSHARPCONTRACT) {
      return format_csharp_contract();
    }
    if (format == OutputFormat.SIMPLIFY) {
      return format_simplify();
    }

    return format_unimplemented(format);
  }

  public String format_daikon(@GuardSatisfied CLASSNAME this) {
    return (printIntersect() + " subset of " + var().name());
  }

  public String format_csharp_contract(@GuardSatisfied CLASSNAME this) {
    if (intersect == null) {
      return "()";
    }

    if (intersect.length == 1) {
      String collection = var().csharp_collection_string();
      return collection + ".Contains(" + intersect[0] + ")";
    }

    String exp = "(";
    for (int i = 0; i < intersect.length; i++) {
      exp += " " + intersect[i] + " ";
      if (i != intersect.length - 1) {
        exp += ",";
      }
    }
    exp += ")";

    String[] split = var().csharp_array_split();
    return "Contract.ForAll(" + split[0] + ", x => x" + split[1] + ".OneOf" + exp + ")";
  }

  private String format_simplify(@GuardSatisfied CLASSNAME this) {
    if (intersect == null || intersect.length == 0) {
      return "(AND)";
    }
    String[] name = var().simplifyNameAndBounds();
    if (name == null) {
      return format_unimplemented(OutputFormat.SIMPLIFY);
    }
    String idx;
    if (!name[0].equals("|i|")) {
      idx = "i";
    } else {
      idx = "j";
    }
    StringBuilder pre_buf = new StringBuilder("");
    StringBuilder end_buf = new StringBuilder("");
    for (int i = 0; i < intersect.length; i++) {
      pre_buf.append("(EXISTS ("+idx + i + ") (AND ");
      pre_buf.append("(>= "+idx + i + " " + name[1] + ") ");
      pre_buf.append("(<= "+idx + i + " " + name[2] + ") ");

      // Based on the class name, I originally wrote this method as if
      // the invariant represented a common subsequence between two
      // sequences (i.e. where the match was required to be in
      // order). In case an invariant like that is added in the
      // future, use the following:
//       if (i == 0)
//         pre_buf.append("(>= "+idx + i + " 0) ");
//       else if (i > 0)
//          pre_buf.append("(> "+idx + i + " "+idx+(i-1) +") ");
//       if (i == intersect.length - 1)
//         pre_buf.append("(< "+idx + i + " (select arrayLength " + name[0] + ")) ");
      pre_buf.append("(EQ (select (select elems " + name[0] + ") "+idx + i + ") "
                     + TOSTRING_SIMPLIFY(intersect[i]) + ")");
      if (i == intersect.length - 1) {
        pre_buf.append(" ");
      }
      end_buf.append("))");
    }
    pre_buf.append(end_buf);
    return pre_buf.toString();
  }

  @Override
  public InvariantStatus check_modified(PRIMITIVE @Interned [] a, int count) {
    if (a == null) {
      return InvariantStatus.FALSIFIED;
    } else if (intersect == null) {
      return InvariantStatus.NO_CHANGE;
    } else {
      for (int i = 0; i < a.length; i++) {
        if (INDEXOF(intersect, a[i]) != -1) {
          return InvariantStatus.NO_CHANGE;
        }
      }
      return InvariantStatus.FALSIFIED;
    }
  }

  @Override
  public InvariantStatus add_modified(PRIMITIVE @Interned [] a, int count) {
    // System.out.println ("common: " + Arrays.toString (a));
    if (a == null) {
      return InvariantStatus.FALSIFIED;
    } else if (intersect == null) {
      intersect = a;
      return InvariantStatus.NO_CHANGE;
    }

    PRIMITIVE[] tmp = new PRIMITIVE[intersect.length];
    int size = 0;
    for (int i = 0; i < a.length; i++) {
      // if (a[i] in intersect) && !(a[i] in tmp), add a[i] to tmp
      int ii = INDEXOF(intersect, a[i]);
      if ((ii != -1)
        && (INDEXOF(ArraysPlume.subarray(tmp,0,size), a[i]) == -1)) {
        // System.out.println ("adding " + intersect[ii] + " at " + size);

        // Carefully add the existing intersect value and not a[i].  These
        // are not necessarily the same when fuzzy floating point
        // comparisons are active.
        tmp[size++] = intersect[ii];
      }
    }
    if (size == 0) {
      return InvariantStatus.FALSIFIED;
    }

    intersect = ArraysPlume.subarray(tmp, 0, size);

    intersect = Intern.intern(intersect);
    elts++;
    return InvariantStatus.NO_CHANGE;
  }

  @Override
  protected double computeConfidence() {
    return 1 - Math.pow(.9, elts);
  }

  @Pure
  @Override
  public boolean isSameFormula(Invariant other) {
    assert other instanceof CLASSNAME;
    return true;
  }
}
