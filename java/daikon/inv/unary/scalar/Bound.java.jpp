#if 0
Do not attempt to compile this file with a Java compiler such as javac.
You first need to preprocess it with cpp, the C preprocessor.
The correct way to build the system is to run 'make'.
#endif

#if !(defined(LOWER) || defined(UPPER) || defined(ELTLOWER) || defined(ELTUPPER) || defined(LOWERFLOAT) || defined(UPPERFLOAT) || defined(ELTUPPERFLOAT) || defined(ELTLOWERFLOAT))
  #error "LOWER, UPPER, ELTLOWER, or ELTUPPER must be defined"
#endif

#if (defined(LOWERFLOAT) || defined(UPPERFLOAT) || defined(ELTUPPERFLOAT) || defined(ELTLOWERFLOAT))
  #define BASE_FLOAT
  #define ONEOFSCALAR OneOfFloat
  #define MEMBER MemberFloat
  #define SUBSEQUENCE SubSequenceFloat
  #define INT(x) x ## Float
  #define PRIMITIVE double
  #define NUMWRAPPER Double
  #define LONGVALUE doubleValue()
  #define BASE_IS_INTEGRAL baseIsFloat()
#else
  #define BASE_INT
  #define ONEOFSCALAR OneOfScalar
  #define MEMBER Member
  #define SUBSEQUENCE SubSequence
  #define INT(x) x
  #define PRIMITIVE long
  #define NUMWRAPPER Long
  #define LONGVALUE longValue()
  #define BASE_IS_INTEGRAL baseIsIntegral()
#endif

#if defined(LOWER) || defined(ELTLOWER) || defined(LOWERFLOAT) || defined(ELTLOWERFLOAT)
  #define LT <
  #define LTE <=
  #define GREATER greater
  #define GT >
  #define GTE >=
  #define MIN min
  #define MIN1 core.min1
  #define NUM_MIN1 core.num_min1
  #define MIN2 core.min2
  #define NUM_MIN2 core.num_min2
  #define MIN3 core.min3
  #define NUM_MIN3 core.num_min3
  #define VARINFOAUX_MINIMUM_VALUE VarInfoAux.MINIMUM_VALUE
  #define MAX max
  #if defined(BASE_INT)
    #define LONGMAX Long.MAX_VALUE
    #define LONGMIN Long.MIN_VALUE
  #else
    #define LONGMAX Double.MAX_VALUE
    #define LONGMIN Double.MIN_VALUE
  #endif
  #define SIGNADJUST
  #define MINSTR "min"
  #define MAXSTR "max"
  #define GTESTR ">="
  #define GTESTRDBC "GTE"
  #define LTESTR "<="
  #define LTESTRDBC "LTE"
  #define MAX1 core.max1
  #define LOWERBOUNDCORE INT(LowerBoundCore)
  #define ELTLOWERBOUND INT(EltLowerBound)
  #define MINELT min_elt
  #define MAXELT max_elt
  #if defined(LOWER)
    #define LOWERBOUND LowerBound
    #define LOWERBOUNDSTR "LowerBound"
    #define UPPERBOUND UpperBound
    #define ONEOF OneOfScalar
  #elif defined(LOWERFLOAT)
    #define LOWERBOUND LowerBoundFloat
    #define LOWERBOUNDSTR "LowerBoundFloat"
    #define UPPERBOUND UpperBoundFloat
    #define ONEOF OneOfFloat
  #elif defined(ELTLOWERFLOAT)
    #define LOWERBOUND EltLowerBoundFloat
    #define LOWERBOUNDSTR "EltLowerBoundFloat"
    #define UPPERBOUND EltUpperBoundFloat
    #define ONEOF EltOneOfFloat
  #else
    #define LOWERBOUND EltLowerBound
    #define LOWERBOUNDSTR "EltLowerBound"
    #define UPPERBOUND EltUpperBound
    #define ONEOF EltOneOf
  #endif
#elif defined(UPPER) || defined(ELTUPPER) || defined(UPPERFLOAT) || defined(ELTUPPERFLOAT)
  #define LT >
  #define LTE >=
  #define GREATER less
  #define GT <
  #define GTE <=
  #define MIN max
  #define MIN1 core.max1
  #define NUM_MIN1 core.num_max1
  #define MIN2 core.max2
  #define NUM_MIN2 core.num_max2
  #define MIN3 core.max3
  #define NUM_MIN3 core.num_max3
  #define VARINFOAUX_MINIMUM_VALUE VarInfoAux.MAXIMUM_VALUE
  #define MAX min
  #if defined(UPPER) || defined(ELTUPPER)
    #define LONGMAX Long.MIN_VALUE
    #define LONGMIN Long.MAX_VALUE
    #define LOWERBOUNDCORE UpperBoundCore
    #define ELTLOWERBOUND EltUpperBound
  #elif defined(UPPERFLOAT) || defined(ELTUPPERFLOAT)
    #define LONGMAX Double.MIN_VALUE
    #define LONGMIN Double.MAX_VALUE
    #define LOWERBOUNDCORE UpperBoundCoreFloat
    #define ELTLOWERBOUND EltUpperBoundFloat
  #endif
  #define SIGNADJUST -
  #define MINSTR "max"
  #define MAXSTR "min"
  #define GTESTR "<="
  #define GTESTRDBC "LTE"
  #define LTESTR ">="
  #define LTESTRDBC "GTE"
  #define MAX1 core.min1
  #define LOWERBOUNDCORE INT(UpperBoundCore)
  #define ELTLOWERBOUND INT(EltUpperBound)
  #define MINELT max_elt
  #define MAXELT min_elt
  #if defined(UPPER)
    #define LOWERBOUND UpperBound
    #define LOWERBOUNDSTR "UpperBound"
    #define UPPERBOUND LowerBound
    #define ONEOF OneOfScalar
  #elif defined(UPPERFLOAT)
    #define LOWERBOUND UpperBoundFloat
    #define LOWERBOUNDSTR "UpperBoundFloat"
    #define UPPERBOUND LowerBoundFloat
    #define ONEOF OneOfFloat
  #elif defined(ELTUPPERFLOAT)
    #define LOWERBOUND EltUpperBoundFloat
    #define LOWERBOUNDSTR "EltUpperBoundFloat"
    #define ONEOF EltOneOfFloat
    #define UPPERBOUND EltLowerBound
  #else
    #define LOWERBOUND EltUpperBound
    #define LOWERBOUNDSTR "EltUpperBound"
    #define UPPERBOUND EltLowerBound
    #define ONEOF EltOneOf
  #endif
#else
  #error "LOWER, UPPER, ELTLOWER, or ELTUPPER must be defined"
#endif

#if defined(LOWER) || defined(UPPER) || defined(LOWERFLOAT) || defined(UPPERFLOAT)
  #define IS_SCALAR
  #define SCALAR scalar
  #if defined(LOWER) || defined(UPPER)
    #define LONG long
    #define SINGLESCALAR SingleScalar
  #else
    #define LONG double
    #define SINGLESCALAR SingleFloat
  #endif
#else
  #define IS_ELT
  #define SCALAR sequence
  #if defined(ELTLOWER) || defined(ELTUPPER)
    #define LONG long @Interned []
    #define SINGLESCALAR SingleScalarSequence
  #elif defined(ELTLOWERFLOAT) || defined(ELTUPPERFLOAT)
    #define LONG double @Interned []
    #define SINGLESCALAR SingleFloatSequence
  #endif
#endif

// ***** This file is automatically generated from Bound.java.jpp

package daikon.inv.unary.SCALAR;

import daikon.*;
import daikon.inv.*;
#ifdef IS_SCALAR
  import daikon.inv.binary.sequenceScalar.*;
  import daikon.inv.unary.sequence.*;
#endif
#ifdef IS_ELT
  import daikon.inv.binary.twoSequence.*;
  import daikon.inv.unary.scalar.*;
#endif
import daikon.derive.unary.*;
import daikon.inv.unary.*;
import java.util.*;
import org.checkerframework.checker.interning.qual.Interned;
import org.checkerframework.checker.lock.qual.GuardSatisfied;
import org.checkerframework.checker.nullness.qual.Nullable;
import org.checkerframework.dataflow.qual.Pure;
import org.checkerframework.dataflow.qual.SideEffectFree;
import org.checkerframework.framework.qual.Unused;
import org.plumelib.util.Intern;
import typequals.prototype.qual.NonPrototype;
import typequals.prototype.qual.Prototype;

#if defined (IS_SCALAR)
  /**
   * Represents the invariant {@code x GTE c}, where {@code c} is a constant and
   * {@code x} is a LONG scalar.
   */
#else
  /**
   * Represents the invariant that each element of a sequence of PRIMITIVE values is GREATER than or
   * equal to a constant. Prints as {@code x[] elements GTE c}.
   */
#endif
// One reason not to combine LowerBound and UpperBound into a single range
// invariant is that they have separate justifications:  one may be
// justified when the other is not.
public class LOWERBOUND extends SINGLESCALAR {
  // We are Serializable, so we specify a version to allow changes to
  // method signatures without breaking serialization.  If you add or
  // remove fields, you should change this number to the current date.
  static final long serialVersionUID = 20030822L;

  // Variables starting with dkconfig_ should only be set via the
  // daikon.config.Configuration interface.
  /** Boolean. True iff LOWERBOUND invariants should be considered. */
  public static boolean dkconfig_enabled = Invariant.invariantEnabledDefault;
  /**
   * Long integer. Together with the corresponding {@code maximal_interesting} parameter,
   * specifies the range of the computed constant that is ``interesting'' --- the range that should
   * be reported. For instance, setting {@code minimal_interesting} to -1 and
   * {@code maximal_interesting} to 2 would only permit output of LOWERBOUND invariants whose
   * cutoff was one of (-1,0,1,2).
   */
  public static long dkconfig_minimal_interesting = -1;
  /**
   * Long integer. Together with the corresponding {@code minimal_interesting} parameter,
   * specifies the range of the computed constant that is ``interesting'' --- the range that should
   * be reported. For instance, setting {@code minimal_interesting} to -1 and
   * {@code maximal_interesting} to 2 would only permit output of LOWERBOUND invariants whose
   * cutoff was one of (-1,0,1,2).
   */
  public static long dkconfig_maximal_interesting = 2;

  @Unused(when=Prototype.class)
  private LOWERBOUNDCORE core;

  @SuppressWarnings("nullness") // circular initialization
  private LOWERBOUND(PptSlice slice) {
    super(slice);
    assert slice != null;
    core = new LOWERBOUNDCORE(this);
  }

  private @Prototype LOWERBOUND() {
    super();
    // do we need a core?
  }

  private static @Prototype LOWERBOUND proto = new @Prototype LOWERBOUND();

  /** Returns the prototype invariant for LOWERBOUND */
  public static @Prototype LOWERBOUND get_proto() {
    return proto;
  }

  /** returns whether or not this invariant is enabled */
  @Override
  public boolean enabled() {
    return dkconfig_enabled;
  }

  /** LOWERBOUND is only valid on integral types. */
  @Override
  public boolean instantiate_ok(VarInfo[] vis) {

    if (!valid_types(vis)) {
      return false;
    }

    return vis[0].file_rep_type.BASE_IS_INTEGRAL;
    }

  /** instantiate an invariant on the specified slice */
  @Override
  public LOWERBOUND instantiate_dyn(@Prototype LOWERBOUND this, PptSlice slice) {
    return new LOWERBOUND(slice);
  }

  @SideEffectFree
  @Override
  public LOWERBOUND clone(@GuardSatisfied LOWERBOUND this) {
    LOWERBOUND result = (LOWERBOUND) super.clone();
    result.core = core.clone();
    result.core.wrapper = result;
    return result;
  }

  public PRIMITIVE MIN() {
    return core.MIN();          // i.e., MIN1
  }

  @Override
  public String repr(@GuardSatisfied LOWERBOUND this) {
    return LOWERBOUNDSTR + varNames() + ": "
      + core.repr();
  }

#if (defined(LOWER) || defined(UPPER) || defined(LOWERFLOAT) || defined(UPPERFLOAT))
  @SideEffectFree
  @Override
  public String format_using(@GuardSatisfied LOWERBOUND this, OutputFormat format) {
    String name = var().name_using(format);
    PptTopLevel pptt = ppt.parent;

    if ((format == OutputFormat.DAIKON)
        || (format == OutputFormat.ESCJAVA)
        || format.isJavaFamily()
        || (format == OutputFormat.CSHARPCONTRACT)) {

      if (PrintInvariants.dkconfig_static_const_infer) {
        for (VarInfo vi : pptt.var_infos) {
          // Check is static constant, and variables are comparable
          if (vi.isStaticConstant() && VarComparability.comparable(vi, var())) {
            // If variable is a double, then use fuzzy comparison
            if (vi.rep_type == ProglangType.DOUBLE) {
              Double constantVal = (Double)vi.constantValue();
              if (Global.fuzzy.eq(constantVal, MIN1) || (Double.isNaN(constantVal) && Double.isNaN(MIN1))) {
                return name + " " + GTESTR + " " + vi.name();
              }
            }
            // Otherwise just use the equals method
            else {
              Object constantVal = vi.constantValue();
              if (constantVal.equals(MIN1)) {
                return name + " " + GTESTR + " " + vi.name();
              }
            }
          }
        }
      }

      return name + " " + GTESTR + " " + MIN1;
    }

    if (format == OutputFormat.SIMPLIFY) {
#ifdef BASE_FLOAT
      return "(" + GTESTR + " " + name + " " + simplify_format_double(MIN1) + ")";
#else
      return "(" + GTESTR + " " + name + " " + simplify_format_long(MIN1) + ")";
#endif
    }

    return format_unimplemented(format);
  }
#else

  @SideEffectFree
  @Override
  public String format_using(@GuardSatisfied LOWERBOUND this, OutputFormat format) {

    if (format.isJavaFamily()) {
      return format_java_family(format);
    }

    if (format == OutputFormat.DAIKON) {
      return format_daikon();
    } else if (format == OutputFormat.SIMPLIFY) {
      return format_simplify();
    } else if (format == OutputFormat.ESCJAVA) {
      return format_esc();
    } else if (format == OutputFormat.CSHARPCONTRACT) {
      return format_csharp_contract();
    }

    return format_unimplemented(format);
  }
  // ELTLOWEr || ELTUPPEr
  public String format_daikon(@GuardSatisfied LOWERBOUND this) {
    PptTopLevel pptt = ppt.parent;
    String name = var().name();

    if (PrintInvariants.dkconfig_static_const_infer) {
      for (VarInfo vi : pptt.var_infos) {
        if (vi.isStaticConstant() && VarComparability.comparable(vi, var())) {
          // If variable is a double, then use fuzzy comparison
          if (vi.rep_type == ProglangType.DOUBLE) {
            Double constantVal = (Double)vi.constantValue();
            if (Global.fuzzy.eq(constantVal, MIN1) || (Double.isNaN(constantVal) && Double.isNaN(MIN1))) {
              return name + " " + GTESTR + " " + vi.name();
            }
          }
          // Otherwise just use the equals method
          else {
            Object constantVal = vi.constantValue();
            if (constantVal.equals(MIN1)) {
              return name + " " + GTESTR + " " + vi.name();
            }
          }
        }
      }
    }

    return var().name() + " elements " + GTESTR + " " + MIN1;
  }

  public String format_esc(@GuardSatisfied LOWERBOUND this) {
    PptTopLevel pptt = ppt.parent;

    if (PrintInvariants.dkconfig_static_const_infer) {
      for (VarInfo vi : pptt.var_infos) {
        if (vi.isStaticConstant() && VarComparability.comparable(vi, var())) {
          // If variable is a double, then use fuzzy comparison
          if (vi.rep_type == ProglangType.DOUBLE) {
            Double constantVal = (Double)vi.constantValue();
            if (Global.fuzzy.eq(constantVal, MIN1) || (Double.isNaN(constantVal) && Double.isNaN(MIN1))) {
#ifdef IS_ELT
              String[] form = VarInfo.esc_quantify(var());
              return form[0] + "(" + form[1] + " " + GTESTR + " " + vi.name() + ")" + form[2];
#else
              String varname = var().esc_name();
              return varname + " " + GTESTR + " " + vi.name();
#endif
            }
          }
          // Otherwise just use the equals method
            else {
            Object constantVal = vi.constantValue();
            if (constantVal.equals(MIN1)) {
#ifdef IS_ELT
              String[] form = VarInfo.esc_quantify(var());
              return form[0] + "(" + form[1] + " " + GTESTR + " " + vi.name() + ")" + form[2];
#else
              String varname = var().esc_name();
              return varname + " " + GTESTR + " " + vi.name();
#endif
            }
          }
        }
      }
    }
#ifdef IS_ELT
    String[] form = VarInfo.esc_quantify(var());
    return form[0] + "(" + form[1] + " " + GTESTR + " " + MIN1 + ")" + form[2];
#else
    String varname = var().esc_name();
    return varname + " " + GTESTR + " " + MIN1;
#endif
  }

  public String format_csharp_contract(@GuardSatisfied LOWERBOUND this) {
    PptTopLevel pptt = ppt.parent;

    if (PrintInvariants.dkconfig_static_const_infer) {
      for (VarInfo vi : pptt.var_infos) {
        if (vi.isStaticConstant() && VarComparability.comparable(vi, var())) {
          // If variable is a double, then use fuzzy comparison
          if (vi.rep_type == ProglangType.DOUBLE) {
            Double constantVal = (Double)vi.constantValue();
            if (Global.fuzzy.eq(constantVal, MIN1) || (Double.isNaN(constantVal) && Double.isNaN(MIN1))) {
             #if defined(IS_ELT)
              String[] split = var().csharp_array_split();
              return "Contract.ForAll(" + split[0] + ", x => x" + split[1] + " " + GTESTR + " " + vi.name() + ")";
             #else
              String varname = var().chsarp_name();
              return varname + " " + GTESTR + " " + vi.name();
             #endif
            }
          }
          // Otherwise just use the equals method
          else {
            Object constantVal = vi.constantValue();
            if (constantVal.equals(MIN1)) {
             #if defined(IS_ELT)
              String[] split = var().csharp_array_split();
              return "Contract.ForAll(" + split[0] + ", x => x" + split[1] + " " + GTESTR + " " + vi.name() + ")";
             #else
              String varname = var().chsarp_name();
              return varname + " " + GTESTR + " " + vi.name();
             #endif
            }
          }
        }
      }
    }

   #if defined(IS_ELT)
    String[] split = var().csharp_array_split();
    return "Contract.ForAll(" + split[0] + ", x => x" + split[1] + " " + GTESTR + " " + MIN1+ ")";
   #else
    String varname = var().chsarp_name();
    return varname + " " + GTESTR + " " + MIN1;
#endif
  }

  public String format_java_family(@GuardSatisfied LOWERBOUND this, OutputFormat format) {
    PptTopLevel pptt = ppt.parent;

    if (PrintInvariants.dkconfig_static_const_infer) {
      for (VarInfo vi : pptt.var_infos) {
        if (vi.isStaticConstant() && VarComparability.comparable(vi, var())) {
          // If variable is a double, then use fuzzy comparison
          if (vi.rep_type == ProglangType.DOUBLE) {
            Double constantVal = (Double)vi.constantValue();
            if (Global.fuzzy.eq(constantVal, MIN1) || (Double.isNaN(constantVal) && Double.isNaN(MIN1))) {
#ifdef IS_ELT
              return "daikon.Quant.elts" + GTESTRDBC + "(" + var().name_using(format) + ", " + vi.name() + ")";
#else
              String varname = var().name_using(format);
              return varname + " " + GTESTR + " " + vi.name();
#endif
            }
          }
          // Otherwise just use the equals method
          else {
            Object constantVal = vi.constantValue();
            if (constantVal.equals(MIN1)) {
#ifdef IS_ELT
              return "daikon.Quant.elts" + GTESTRDBC + "(" + var().name_using(format) + ", " + vi.name() + ")";
#else
              String varname = var().name_using(format);
              return varname + " " + GTESTR + " " + vi.name();
#endif
            }
          }
        }
      }
    }
#ifdef IS_ELT
    return
      "daikon.Quant.elts" + GTESTRDBC + "(" + var().name_using(format) + ", " + MIN1 + ")";
#else
    String varname = var().name_using(format);
    return varname + " " + GTESTR + " " + MIN1;
#endif
  }

  public String format_simplify(@GuardSatisfied LOWERBOUND this) {
#ifdef BASE_FLOAT
    String value = simplify_format_double(MIN1);
#else
    String value = simplify_format_long(MIN1);
#endif
#ifdef IS_ELT
    String[] form = VarInfo.simplify_quantify(var());
    return form[0] + "(" + GTESTR + " " + form[1] + " " + value + ")"
      + form[2];
#else
    String varname = var().simplify_name();
    return "(" + GTESTR + " " + varname + " " + value + ")";
#endif
  }

#endif

  @Override
  public InvariantStatus add_modified(LONG value, int count) {
    // System.out.println(LOWERBOUNDSTR + varNames() + ": "
    //              + "add(" + value + ", " + modified + ", " + count + ")");
#ifndef IS_ELT
    return core.add_modified(value, count);
#else
    boolean changed = false;
    InvariantStatus status = InvariantStatus.NO_CHANGE;
    for (int i = 0; i < value.length; i++) {
      if (!changed && core.wouldChange(value[i])) {
        changed = true;
        status = InvariantStatus.WEAKENED;
      }
      if (core.add_modified(value[i], count) ==
          InvariantStatus.FALSIFIED) {
        return InvariantStatus.FALSIFIED;
      }
    }
    return status;
#endif
  }

  @Override
  public InvariantStatus check_modified(LONG value, int count) {
#ifndef IS_ELT
    return core.check(value);
#else
    for (int i = 0; i < value.length; i++) {
      if (core.check(value[i]) == InvariantStatus.WEAKENED) {
        return InvariantStatus.WEAKENED;
      }
    }
    return InvariantStatus.NO_CHANGE;
#endif
  }

  @Override
  public boolean enoughSamples(@GuardSatisfied LOWERBOUND this) {
    return core.enoughSamples();
  }

  @Override
  protected double computeConfidence() {
    return core.computeConfidence();
  }

  @Pure
  @Override
  public boolean isExact() {
    return core.isExact();
  }

  @Pure
  @Override
  public boolean isSameFormula(Invariant other) {
    return core.isSameFormula(((LOWERBOUND) other).core);
  }

  @Override
  public boolean hasUninterestingConstant() {
    // If the constant bound is not in some small range of interesting
    // values (by default {-1, 0, 1, 2}), call it uninteresting.
    if ((MIN1 < dkconfig_minimal_interesting)
        || (MIN1 > dkconfig_maximal_interesting)) {
      return true;
    }
#if defined(BASE_FLOAT)
    else if (MIN1 != (int)MIN1) {
      // Non-integer bounds are uninteresting even if small.
      return true;
    }
#endif
    return false;
  }

  @Pure
  @Override
  public @Nullable DiscardInfo isObviousStatically(VarInfo[] vis) {
    VarInfo var = vis[0];
    if ((var.derived instanceof SequenceLength)
         && (((SequenceLength) var.derived).shift != 0)) {
      return new DiscardInfo(this, DiscardCode.obvious, "Bounds are preferrable over sequence lengths with no shift");
    }

    #if defined(LOWER) || defined(LOWERFLOAT) || defined(UPPER) || defined(UPPERFLOAT)
    if (var.aux.hasValue(VARINFOAUX_MINIMUM_VALUE)) {
      int minVal = var.aux.getInt(VARINFOAUX_MINIMUM_VALUE);
      if (minVal == MIN1) {
        return new DiscardInfo(this, DiscardCode.obvious,
          var.name() + " GTE " + MIN1 + " is already known");
      }
    }
    #endif

    return super.isObviousStatically(vis);
  }

  @Pure
  @Override
  public @Nullable DiscardInfo isObviousDynamically(VarInfo[] vis) {
    DiscardInfo super_result = super.isObviousDynamically(vis);
    if (super_result != null) {
      return super_result;
    }

    PptTopLevel pptt = ppt.parent;

    // This check always lets invariants pass through (even if it is not within
    // the default range of (-1 to 2) if it matches a static constant
    // As noted below, this check really doesn't belong here, but should be
    // moved to hasUninterestingConstant() whenever that is implemented
    if (PrintInvariants.dkconfig_static_const_infer) {
      if (core.matchConstant()) {
        return null;
      }
    }

    // if the value is not in some range (like -1,0,1,2) then say that it is obvious
    if ((MIN1 < dkconfig_minimal_interesting)
        || (MIN1 > dkconfig_maximal_interesting)) {
      // XXX This check doesn't really belong here. However It
      // shouldn't get removed until hasUninterestingConstant() is
      // suitable to be turned on everywhere by default. -SMcC
      // if the value is not in some range (like -1,0,1,2) then say that
      // it is obvious
      String discardString = "";
      if (MIN1 < dkconfig_minimal_interesting) {
        discardString = "MIN1="+MIN1+" is less than dkconfig_minimal_interesting=="
          + dkconfig_minimal_interesting;
      } else {
        discardString = "MIN1="+MIN1+" is greater than dkconfig_maximal_interesting=="+
          dkconfig_maximal_interesting;
      }
      return new DiscardInfo(this, DiscardCode.obvious, discardString);
    }
    ONEOF oo = ONEOF.find(ppt);
    if ((oo != null) && oo.enoughSamples() && oo.num_elts() > 0) {
      assert oo.var().isCanonical();
      // We could also use MIN1 == oo.MINELT(), since the LowerBound
      // will never have a MIN1 that does not appear in the OneOf.
      if (MIN1 LTE oo.MINELT()) {
        String varName = vis[0].name();
        String discardString = varName + LTESTR + MIN1 + " is implied by " + varName + LTESTR + oo.MINELT();
        log("%s", discardString);
        return new DiscardInfo(this, DiscardCode.obvious, discardString);
      }
    }

    // NOT: "VarInfo v = var();" because we want to operate not on this
    // object's own variables, but on the variables that were passed in.
    VarInfo v = vis[0];
#if 0
    Test was: #if (defined(ELTLOWER) || defined(ELTUPPER) || defined(ELTLOWERFLOAT) || defined(ELTUPPERFLOAT))
#endif
#ifdef IS_ELT
    // Look for the same property over a supersequence of this one.
    for (Iterator<Invariant> inv_itor = pptt.invariants_iterator(); inv_itor.hasNext(); ) {
      Invariant inv = inv_itor.next();
      if (inv == this) {
        continue;
      }
      if (inv instanceof LOWERBOUND) {
        LOWERBOUND other = (LOWERBOUND) inv;
        if (isSameFormula(other)
            && SUBSEQUENCE.isObviousSubSequenceDynamically(this, v, other.var())) {
          String varName = v.name();
          String otherName = other.var().name();
          String discardString = varName + " is a subsequence of " + otherName + " for which the invariant holds.";
          log("%s", discardString);
          return new DiscardInfo(this, DiscardCode.obvious, discardString);
        }
      }
    }
#endif

#if defined(LOWER) || defined(LOWERFLOAT)
    if (v.isDerived() && (v.derived instanceof SequenceLength)) {
      // Invariants with over sequence lengths with vshift != 0 are
      // now no longer even instantiated.  However, the commented-out
      // assertion below would break reading old .inv files, so we'll
      // still do the check at runtime for the moment.
      int vshift = ((SequenceLength) v.derived).shift;
      // assert vshift == 0;
      if (vshift == 0 && MIN1 == 0) {
        // "size(a[]) >= 0" is obvious.
        return new DiscardInfo(this, DiscardCode.obvious, v.name()+" >=0 is obvious");
      }
    }
#endif

    // For each sequence variable, if this is an obvious member/subsequence, and
    // it has the same invariant, then this one is obvious.
    for (int i = 0; i < pptt.var_infos.length; i++) {
      VarInfo vi = pptt.var_infos[i];
#ifndef IS_ELT
      if (MEMBER.isObviousMember(v, vi))
#else
      if (SUBSEQUENCE.isObviousSubSequenceDynamically(this, v, vi))
#endif
      {
        PptSlice1 other_slice = pptt.findSlice(vi);
        if (other_slice != null) {
          ELTLOWERBOUND eb = ELTLOWERBOUND.find(other_slice);
          if ((eb != null)
              && eb.enoughSamples()
              && eb.MIN() == MIN()) {
            String otherName = other_slice.var_infos[0].name();
            String varName = v.name();
            String discardString = varName+" is a subsequence of "+otherName+" for which the invariant holds.";
            log("%s", discardString);
            return new DiscardInfo(this, DiscardCode.obvious, discardString);
          }
        }
      }
    }

    return null;
  }

  @Pure
  @Override
  public boolean isExclusiveFormula(Invariant other) {
#ifdef IS_ELT
    // N.B. "x[] elements >= 200" is not mutually exclusive with "x[]
    // elements <= 100"; they could both be true if x[] were always empty.
#else
    if (other instanceof UPPERBOUND) {
      if (MIN() GT ((UPPERBOUND) other).MAX()) {
        return true;
      }
    }
#endif
    if (other instanceof ONEOFSCALAR) {
      return other.isExclusiveFormula(this);
    }
    return false;
  }

  // Look up a previously instantiated invariant.
  public static @Nullable LOWERBOUND find(PptSlice ppt) {
    assert ppt.arity() == 1;
    for (Invariant inv : ppt.invs) {
      if (inv instanceof LOWERBOUND) {
        return (LOWERBOUND) inv;
      }
    }
    return null;
  }

  /**
   * Bound can merge different formulas from lower points to create a single formula at an upper
   * point. See merge() below.
   */
  @Override
  public boolean mergeFormulasOk() {
    return true;
  }

  /**
   * Merge the invariants in invs to form a new invariant. Each must be a LOWERBOUND invariant. This
   * code finds all of the min/max values in each invariant, applies them to a new parent invariant
   * and returns the merged invariant (if any).
   *
   * @param invs list of invariants to merge. The invariants must all be of the same type and should
   *     come from the children of parent_ppt. They should also all be permuted to match the
   *     variable order in parent_ppt.
   * @param parent_ppt slice that will contain the new invariant
   */
  @Override
  public @Nullable Invariant merge(List<Invariant> invs, PptSlice parent_ppt) {

    // Create the initial parent invariant from the first child
    LOWERBOUND first = (LOWERBOUND) invs.get(0);
    LOWERBOUND result= first.clone();
    result.ppt = parent_ppt;

    // Loop through the rest of the child invariants
    for (int i = 1; i < invs.size(); i++ ) {
      LOWERBOUND lb = (LOWERBOUND) invs.get(i);
      result.core.add(lb.core);
    }

    result.log("Merged '%s' from %s child invariants", result.format(),invs.size());
    return result;
  }
}
