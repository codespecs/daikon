#if 0
// Do not attempt to compile this file with a Java compiler such as javac.
// You first need to preprocess it with cpp, the C preprocessor.
// The correct way to build the system is to run 'make'.
#endif

#if 0
// This file is the source for all scalar (integer), float, and string
// simple two variable comparisons.  One of the defines immediately
// below must be defined in the Makefile to specify which version
// should be built.  For example: scalar equals, float equals, scalar
// less than, etc.
#endif

#if !(defined(EQUAL) || defined(NONEQUAL) || defined(LESSTHAN) || defined(LESSEQUAL) || defined(GREATERTHAN) || defined(GREATEREQUAL) || defined(EQUALFLOAT) || defined(NONEQUALFLOAT) || defined(LESSTHANFLOAT) || defined(LESSEQUALFLOAT) || defined(GREATERTHANFLOAT) || defined(GREATEREQUALFLOAT) || defined(EQUALSTRING) || defined(NONEQUALSTRING) || defined(LESSTHANSTRING) || defined(LESSEQUALSTRING) || defined(GREATERTHANSTRING) || defined(GREATEREQUALSTRING))
  #error "EQUAL, NONEQUAL, LESSTHAN, LESSEQUAL, GREATERTHAN, GREATEREQUAL, EQUALFLOAT, NONEQUALFLOAT, LESSTHANFLOAT, LESSEQUALFLOAT, GREATERTHANFLOAT, or GREATEREQUALFLOAT must be defined"
#endif

#if (defined(EQUAL) || defined(NONEQUAL) || defined(LESSTHAN) \
    || defined(LESSEQUAL) || defined(GREATERTHAN) || defined(GREATEREQUAL))
  #define PRIMITIVE long
  #define PRIMITIVENONCOMMENT long
  #define IS_NUMERIC 1
  #define IS_INT 1
  #define ISTYPE isIntegral()
  #define SUPERCLASS TwoScalar
  #define MEMBER Member
  #define INT(x) Int ## x
  #define LINEARBINARY LinearBinary
  #define SEQSEQINTEQUAL SeqSeqIntEqual
  #define SEQ_SUBSCRIPT SequenceScalarSubscript
  #define NO_DUPS NoDuplicates
  #define INT_TYPE long
  #define ONEOF OneOfScalar
  #define LOWERBOUND LowerBound
  #define UPPERBOUND UpperBound
  #define LESS_THAN_CLASS IntLessThan
  #define GREATER_THAN_CLASS IntGreaterThan
  #define EQUAL_CLASS IntEqual
#elif (defined (EQUALFLOAT) || defined(NONEQUALFLOAT) \
    || defined(LESSTHANFLOAT) || defined(LESSEQUALFLOAT) \
    || defined(GREATERTHANFLOAT) || defined(GREATEREQUALFLOAT))
  #define IS_NUMERIC 1
  #define IS_FLOAT 1
  #define PRIMITIVE double
  #define PRIMITIVENONCOMMENT double
  #define ISTYPE isFloat()
  #define SUPERCLASS TwoFloat
  #define MEMBER Member
  #define INT(x) Float ## x
  #define LINEARBINARY LinearBinaryFloat
  #define SEQSEQINTEQUAL SeqSeqFloatEqual
  #define SEQ_SUBSCRIPT SequenceFloatSubscript
  #define NO_DUPS NoDuplicatesFloat
  #define INT_TYPE double
  #define ONEOF OneOfFloat
  #define LOWERBOUND LowerBoundFloat
  #define UPPERBOUND UpperBoundFloat
  #define LESS_THAN_CLASS FloatLessThan
  #define GREATER_THAN_CLASS FloatGreaterThan
  #define EQUAL_CLASS FloatEqual
#else
  #define IS_STRING 1
  #define PRIMITIVE /*@Interned*/ String
  #define PRIMITIVENONCOMMENT String
  #define ISTYPE isString()
  #define SUPERCLASS TwoString
  #define MEMBER MemberString
  #define INT(x) String ## x
  #define SEQSEQINTEQUAL SeqSeqStringEqual
  #define SEQ_SUBSCRIPT SequenceStringSubscript
  #define INT_TYPE /*@Interned*/ String
  #define ONEOF OneOfString
  #define LESS_THAN_CLASS StringLessThan
  #define GREATER_THAN_CLASS StringGreaterThan
  #define EQUAL_CLASS StringEqual
#endif

#if defined(EQUAL)
  #define INTEQUAL IntEqual
  #define INTEQUALstring "IntEqual"
  #define EQUALS(a,b) (a == b)
  #define EQUALShtml ==
  #define EQUALSstring "=="
  #define INVEQUALSstring "=="
  #define PAIRWISE_COMPARE PairwiseIntEqual
  #define DEBUGINTEQUAL debugIntEqual
  #define SEQINTEQUAL seqIntEqual
#elif defined(EQUALFLOAT)
  #define INTEQUAL FloatEqual
  #define INTEQUALstring "FloatEqual"
  #define EQUALS(a,b) (Global.fuzzy.eq (a, b))
  #define EQUALShtml ==
  #define EQUALSstring "=="
  #define INVEQUALSstring "=="
  #define PAIRWISE_COMPARE PairwiseFloatEqual
  #define DEBUGINTEQUAL debugIntEqual
  #define SEQINTEQUAL seqIntEqual
#elif defined (EQUALSTRING)
  #define INTEQUAL StringEqual
  #define INTEQUALstring "StringEqual"
  #define EQUALS(a,b) ((a != null) && (b != null) && (a == b))
  #define EQUALShtml ==
  #define EQUALSstring "=="
  #define INVEQUALSstring "=="
#if 0
  // #define PAIRWISE_COMPARE PairwiseStringEqual
#endif
  #define DEBUGINTEQUAL debugStringEqual
  #define SEQINTEQUAL seqStringEqual

#elif defined(NONEQUAL)
  #define INTEQUAL IntNonEqual
  #define INTEQUALstring "IntNonEqual"
  #define EQUALS(a,b) (a != b)
  #define EQUALShtml !=
  #define EQUALSstring "!="
  #define INVEQUALSstring "!="
  #define DEBUGINTEQUAL debugIntNonEqual
  #define SEQINTEQUAL seqIntNonEqual
#elif defined(NONEQUALFLOAT)
  #define INTEQUAL FloatNonEqual
  #define INTEQUALstring "FloatNonEqual"
  #define EQUALS(a,b) (Global.fuzzy.ne (a, b))
  #define EQUALShtml !=
  #define EQUALSstring "!="
  #define INVEQUALSstring "!="
  #define DEBUGINTEQUAL debugIntNonEqual
  #define SEQINTEQUAL seqIntNonEqual
#elif defined (NONEQUALSTRING)
  #define INTEQUAL StringNonEqual
  #define INTEQUALstring "StringNonEqual"
  #define EQUALS(a,b) (a != b)
  #define EQUALShtml !=
  #define EQUALSstring "!="
  #define INVEQUALSstring "!="
  #define DEBUGINTEQUAL debugStringNonEqual
  #define SEQINTEQUAL seqIntStringEqual

#elif defined(LESSTHAN)
  #define INTEQUAL IntLessThan
  #define INTEQUAL_SWAP IntGreaterThan
  #define INTEQUALstring "IntLessThan"
  #define EQUALS(a,b) (a < b)
  #define EQUALShtml &lt;
  #define EQUALSstring "<"
  #define INVEQUALSstring ">"
  #define PAIRWISE_COMPARE PairwiseIntLessThan
  #define DEBUGINTEQUAL debugIntLessThan
  #define SEQINTEQUAL seqIntLessThan
#elif defined(LESSTHANFLOAT)
  #define INTEQUAL FloatLessThan
  #define INTEQUAL_SWAP FloatGreaterThan
  #define INTEQUALstring "FloatLessThan"
  #define EQUALS(a,b) (Global.fuzzy.lt (a, b))
  #define EQUALShtml &lt;
  #define EQUALSstring "<"
  #define INVEQUALSstring ">"
  #define PAIRWISE_COMPARE PairwiseFloatLessThan
  #define DEBUGINTEQUAL debugIntLessThan
  #define SEQINTEQUAL seqIntLessThan
#elif defined(LESSTHANSTRING)
  #define INTEQUAL StringLessThan
  #define INTEQUAL_SWAP StringGreaterThan
  #define INTEQUALstring "StringLessThan"
  #define EQUALS(a,b) ((a != null) && (b != null) && (a.compareTo (b) < 0))
  #define EQUALShtml &lt;
  #define EQUALSstring "<"
  #define INVEQUALSstring ">"
#if 0
  // #define PAIRWISE_COMPARE PairwiseStringLessThan
#endif
  #define DEBUGINTEQUAL debugStringLessThan
  #define SEQINTEQUAL seqStringLessThan

#elif defined(LESSEQUAL)
  #define INTEQUAL IntLessEqual
  #define INTEQUAL_SWAP IntGreaterEqual
  #define INTEQUALstring "IntLessEqual"
  #define EQUALS(a,b) (a <= b)
  #define EQUALShtml &le;
  #define EQUALSstring "<="
  #define INVEQUALSstring ">="
  #define PAIRWISE_COMPARE PairwiseIntLessEqual
  #define DEBUGINTEQUAL debugIntLessEqual
  #define SEQINTEQUAL seqIntLessEqual
#elif defined(LESSEQUALFLOAT)
  #define INTEQUAL FloatLessEqual
  #define INTEQUAL_SWAP FloatGreaterEqual
  #define INTEQUALstring "FloatLessEqual"
  #define EQUALS(a,b) (Global.fuzzy.lte (a, b))
  #define EQUALShtml &le;
  #define EQUALSstring "<="
  #define INVEQUALSstring ">="
  #define PAIRWISE_COMPARE PairwiseFloatLessEqual
  #define DEBUGINTEQUAL debugIntLessEqual
  #define SEQINTEQUAL seqIntLessEqual
#elif defined(LESSEQUALSTRING)
  #define INTEQUAL StringLessEqual
  #define INTEQUAL_SWAP StringGreaterEqual
  #define INTEQUALstring "StringLessEqual"
  #define EQUALS(a,b) ((a != null) && (b != null) && (a.compareTo (b) <= 0))
  #define EQUALShtml &le;
  #define EQUALSstring "<="
  #define INVEQUALSstring ">="
#if 0
  // #define PAIRWISE_COMPARE PairwiseStringLessEqual
#endif
  #define DEBUGINTEQUAL debugStringLessEqual
  #define SEQINTEQUAL seqStringLessEqual

#elif defined(GREATERTHAN)
  #define INTEQUAL IntGreaterThan
  #define INTEQUAL_SWAP IntLessThan
  #define INTEQUALstring "IntGreaterThan"
  #define EQUALS(a,b) (a > b)
  #define EQUALShtml &gt;
  #define EQUALSstring ">"
  #define INVEQUALSstring "<"
  #define PAIRWISE_COMPARE PairwiseIntGreaterThan
  #define DEBUGINTEQUAL debugIntGreaterThan
  #define SEQINTEQUAL seqIntGreaterThan
#elif defined(GREATERTHANFLOAT)
  #define INTEQUAL FloatGreaterThan
  #define INTEQUAL_SWAP FloatLessThan
  #define INTEQUALstring "FloatGreaterThan"
  #define EQUALS(a,b) (Global.fuzzy.gt (a, b))
  #define EQUALShtml &gt;
  #define EQUALSstring ">"
  #define INVEQUALSstring "<"
  #define PAIRWISE_COMPARE PairwiseFloatGreaterThan
  #define DEBUGINTEQUAL debugIntGreaterThan
  #define SEQINTEQUAL seqIntGreaterThan
#elif defined(GREATERTHANSTRING)
  #define INTEQUAL StringGreaterThan
  #define INTEQUAL_SWAP StringLessThan
  #define INTEQUALstring "StringGreaterThan"
  #define EQUALS(a,b) ((a != null) && (b != null) && (a.compareTo(b) > 0))
  #define EQUALShtml &gt;
  #define EQUALSstring ">"
  #define INVEQUALSstring "<"
#if 0
  // #define PAIRWISE_COMPARE PairwiseStringGreaterThan
#endif
  #define DEBUGINTEQUAL debugStringGreaterThan
  #define SEQINTEQUAL seqStringGreaterThan

#elif defined(GREATEREQUAL)
  #define INTEQUAL IntGreaterEqual
  #define INTEQUAL_SWAP IntLessEqual
  #define INTEQUALstring "IntGreaterEqual"
  #define EQUALS(a,b) (a >= b)
  #define EQUALShtml &ge;
  #define EQUALSstring ">="
  #define INVEQUALSstring "<="
  #define PAIRWISE_COMPARE PairwiseIntGreaterEqual
  #define DEBUGINTEQUAL debugIntGreaterEqual
  #define SEQINTEQUAL seqIntGreaterEqual
#elif defined(GREATEREQUALFLOAT)
  #define INTEQUAL FloatGreaterEqual
  #define INTEQUAL_SWAP FloatLessEqual
  #define INTEQUALstring "FloatGreaterEqual"
  #define EQUALS(a,b) (Global.fuzzy.gte (a, b))
  #define EQUALShtml &ge;
  #define EQUALSstring ">="
  #define NONEQUALSstring "<="
  #define INVEQUALSstring "<="
  #define PAIRWISE_COMPARE PairwiseFloatGreaterEqual
  #define DEBUGINTEQUAL debugIntGreaterEqual
  #define SEQINTEQUAL seqIntGreaterEqual
#elif defined(GREATEREQUALSTRING)
  #define INTEQUAL StringGreaterEqual
  #define INTEQUAL_SWAP StringLessEqual
  #define INTEQUALstring "StringGreaterEqual"
  #define EQUALS(a,b) ((a != null) && (b != null) && (a.compareTo (b) >= 0))
  #define EQUALShtml &ge;
  #define EQUALSstring ">="
  #define NONEQUALSstring "<="
  #define INVEQUALSstring "<="
#if 0
  // #define PAIRWISE_COMPARE PairwiseStringGreaterEqual
#endif
  #define DEBUGINTEQUAL debugStringGreaterEqual
  #define SEQINTEQUAL seqStringGreaterEqual
#else
  #error "EQUAL, NONEQUAL, LESSTHAN, LESSEQUAL, GREATERTHAN, or GREATEREQUAL must be defined"
#endif

#if defined (EQUAL) || defined (EQUALFLOAT) || defined (EQUALSTRING)
  #define EQUAL_OP 1
#elif defined (NONEQUAL) || defined (NONEQUALFLOAT) || defined (NONEQUALSTRING)
  #define NONEQUAL_OP 1
#elif defined(LESSTHAN) || defined(LESSTHANFLOAT) || defined(LESSTHANSTRING)
  #define LESSTHAN_OP 1
#elif defined(LESSEQUAL) || defined(LESSEQUALFLOAT) || defined(LESSEQUALSTRING)
  #define LESSEQUAL_OP 1
#elif defined(GREATERTHAN) || defined(GREATERTHANFLOAT) \
    || defined(GREATERTHANSTRING)
  #define GREATERTHAN_OP 1
#elif defined(GREATEREQUAL) || defined (GREATEREQUALFLOAT) \
    || defined(GREATEREQUALSTRING)
  #define GREATEREQUAL_OP 1
#else
  #error "Unexpected op"
#endif

#if (defined(LESSTHAN) || defined(LESSEQUAL))
  #define LOWER_BD LowerBound
  #define UPPER_BD UpperBound
  #define LB_MIN min()
  #define UB_MAX max()
#elif (defined(LESSTHANFLOAT) || defined(LESSEQUALFLOAT))
  #define LOWER_BD LowerBoundFloat
  #define UPPER_BD UpperBoundFloat
  #define LB_MIN min()
  #define UB_MAX max()
#elif (defined(GREATERTHAN) || defined(GREATEREQUAL))
  #define LOWER_BD UpperBound
  #define UPPER_BD LowerBound
  #define LB_MIN max()
  #define UB_MAX min()
#elif (defined(GREATERTHANFLOAT) || defined(GREATEREQUALFLOAT))
  #define LOWER_BD UpperBoundFloat
  #define UPPER_BD LowerBoundFloat
  #define LB_MIN max()
  #define UB_MAX min()
#endif

#if (defined(EQUAL) || defined(EQUALFLOAT))
  #define IMPLEMENTSCOMPARISON implements Comparison
#else
  #define IMPLEMENTSCOMPARISON
#endif

// ***** This file is automatically generated from IntComparisons.java.jpp

#if defined (IS_STRING)
package daikon.inv.binary.twoString;
#else
package daikon.inv.binary.twoScalar;
#endif

import daikon.*;
import daikon.inv.*;
import daikon.inv.unary.string.*;
import daikon.inv.unary.scalar.*;
import daikon.inv.unary.sequence.*;
import daikon.inv.binary.twoScalar.*;
import daikon.inv.binary.twoSequence.*;
import daikon.derive.unary.*;
import daikon.derive.binary.*;
import daikon.suppress.*;

import plume.*;
import java.util.logging.Logger;
import java.util.logging.Level;
import java.util.*;

/*>>>
import org.checkerframework.checker.interning.qual.*;
import org.checkerframework.checker.lock.qual.*;
import org.checkerframework.checker.nullness.qual.*;
import org.checkerframework.dataflow.qual.*;
import typequals.*;
*/

/**
 * Represents an invariant of EQUALShtml between two PRIMITIVENONCOMMENT scalars.
 * Prints as <code>x EQUALShtml y</code>.
 */
public final class INTEQUAL
  extends SUPERCLASS IMPLEMENTSCOMPARISON {

  // We are Serializable, so we specify a version to allow changes to
  // method signatures without breaking serialization.  If you add or
  // remove fields, you should change this number to the current date.
  static final long serialVersionUID = 20030822L;

  // Variables starting with dkconfig_ should only be set via the
  // daikon.config.Configuration interface.
  /**
   * Boolean.  True iff INTEQUAL invariants should be considered.
   */
  public static boolean dkconfig_enabled = Invariant.invariantEnabledDefault;

  public static final Logger debug
    = Logger.getLogger("daikon.inv.binary.twoScalar." + INTEQUALstring);

#if (defined(NONEQUAL))
  /**
   * Boolean.  True iff INTEQUAL invariants should be considered.
   */
  public static boolean dkconfig_integral_only = true;
#endif

  protected INTEQUAL(PptSlice ppt) {
   super(ppt);
  }

  protected /*@Prototype*/ INTEQUAL() {
   super();
  }

  private static /*@Prototype*/ INTEQUAL proto = new /*@Prototype*/ INTEQUAL ();

  /** Returns the prototype invariant for INTEQUAL */
  public static /*@Prototype*/ INTEQUAL get_proto() {
    return proto;
  }

  /** Returns whether or not this invariant is enabled */
  public boolean enabled() {
    return dkconfig_enabled;
  }

  /** Returns whether or not the specified var types are valid for INTEQUAL */
  public boolean instantiate_ok (VarInfo[] vis) {

    if (!valid_types (vis)) {
      return false;
    }

    #if defined (IS_INT)
      #if defined (EQUAL)
        return true;
      #elif defined (NONEQUAL)
        if (dkconfig_integral_only) {
          return (vis[0].file_rep_type.isIntegral()
                  && vis[1].file_rep_type.isIntegral());
        }
        return true;
      #else
        return (vis[0].file_rep_type.isIntegral()
                && vis[1].file_rep_type.isIntegral());
      #endif
    #elif defined (IS_STRING)
      #if defined (EQUALSTRING) || defined (NONEQUALSTRING)
        boolean result = (! (vis[0].has_typeof() ^ vis[0].has_typeof()));
        return result;
      #else
        boolean result = (! (vis[0].has_typeof() || vis[0].has_typeof()));
        // System.out.printf(INTEQUALstring + ".instantiate_ok(");
        // for (VarInfo vi : vis) {
        //   System.out.printf("%s ", vi.name());
        // }
        // System.out.printf(") => %s%n", result);
        return result;
      #endif
    #else
      return true;
    #endif

#if !(defined(EQUAL) || defined(EQUALFLOAT))
  #if 0
    // [This comment describes the absence of certain code, so it
    // doesn't really belong in any of the generated files]

    // It messes things up to avoid instantiating a comparison between
    // "a" and "b" here, if they're going to turn out to be equal,
    // because we get lots of duplicate invariants that differ only in
    // containing a or b. Plus, to boot, you also get a LinearBinary
    // invariant with a=1 and b=0 that prints as "a == b", defeating
    // the original purpose of suppressing a stupid-looking invariant.
  #endif

  #if 0
    // JHP: This code is also removed because these sorts of static checks
    // can't be reliability performed with equality sets (just because
    // the leader is size-1 doesn't imply that each member is size-1

    { // Tests involving sequence lengths.
      SequenceLength sl1 = null;
      if (var1.isDerived() && (var1.derived instanceof SequenceLength)) {
        sl1 = (SequenceLength) var1.derived;
      }
      SequenceLength sl2 = null;
      if (var2.isDerived() && (var2.derived instanceof SequenceLength)) {
        sl2 = (SequenceLength) var2.derived;
      }

      // Avoid "size(a)-1 cmp size(b)-1"; use "size(a) cmp size(b)" instead.
      if ((sl1 != null) && (sl2 != null) &&
          ((sl1.shift == sl2.shift) && (sl1.shift != 0) || (sl2.shift != 0))) {
        // "size(a)-1 cmp size(b)-1"; should just use "size(a) cmp size(b)"
        Debug.log (debug, INTEQUAL.class, ppt,
               "Not instantiating, compare of form size(a)-1 op size(b)-1"
               + " var1= " + var1.name() + " var2= " + var2.name());
        return null;
      }
    }
  #endif
#endif

#if 0
    // JHP: this needs to be looked and moved to static obvious

    boolean only_eq = false;
    boolean obvious_lt = false;
    boolean obvious_gt = false;
    boolean obvious_le = false;
    boolean obvious_ge = false;

    // Commented out temporarily (October 24, 2001).
    if (false && (seqvar1 != null) && (seqvar2 != null)) {
      Derivation deriv1 = var1.derived;
      Derivation deriv2 = var2.derived;
      boolean min1 = (deriv1 instanceof SequenceMin);
      boolean max1 = (deriv1 instanceof SequenceMax);
      boolean min2 = (deriv2 instanceof SequenceMin);
      boolean max2 = (deriv2 instanceof SequenceMax);
      VarInfo super1 = seqvar1.isDerivedSubSequenceOf();
      VarInfo super2 = seqvar2.isDerivedSubSequenceOf();

      if (debug.isLoggable(Level.FINE)) {
        debug.fine (INTEQUALstring + ".instantiate: "
                            + "min1=" + min1
                            + ", max1=" + max1
                            + ", min2=" + min2
                            + ", max2=" + max2
                            + ", super1=" + super1
                            + ", super2=" + super2
                            + ", iom(var2, seqvar1)=" + MEMBER.isObviousMember(var2, seqvar1)
                            + ", iom(var1, seqvar2)=" + MEMBER.isObviousMember(var1, seqvar2));
      }
      if (seqvar1 == seqvar2) {
        // Both variables are derived from the same sequence.  The
        // invariant is obvious as soon as it's nonequal, because "all
        // elements equal" will be reported elsewhere.
        if (min1 || max2) {
          obvious_lt = true;
        } else if (max1 || min2) {
          obvious_gt = true;
        }
      } else if ((min1 || max1) && MEMBER.isObviousMember(var2, seqvar1)) {
        if (min1) {
          obvious_le = true;
        } else if (max1) {
          obvious_ge = true;
        }
      } else if ((min2 || max2) && MEMBER.isObviousMember(var1, seqvar2)) {
        if (min2) {
          obvious_ge = true;
        } else if (max2) {
          obvious_le = true;
        }
      } else if (((min1 && max2) || (max1 && min2))
                 && (super1 != null) && (super2 != null) && (super1 == super2)
                 && VarInfo.seqs_overlap(seqvar1, seqvar2)) {
        // If the sequences overlap, then clearly the min of either is no
        // greater than the max of the other.
        if (min1 && max2) {
          obvious_le = true;
          // System.out.println("obvious_le: " + var1.name + " " + var2.name);
        } else if (max1 && min2) {
          obvious_ge = true;
          // System.out.println("obvious_ge: " + var1.name + " " + var2.name);
        }
      }
    }
#endif

  }

  /** Instantiate an invariant on the specified slice */
  protected INTEQUAL instantiate_dyn (/*>>> @Prototype INTEQUAL this,*/ PptSlice slice) {
    #if defined (NONEQUAL)
    // System.out.printf ("Instantiating non-equal on %s and %s%n",
    //                     slice.var_infos[0], slice.var_infos[1]);
    #endif
    return new INTEQUAL (slice);
  }

#ifdef EQUAL_OP
  /*@Pure*/
  public boolean is_equality_inv() {
    return true;
  }
#endif

  protected Invariant resurrect_done_swapped() {
    #if defined (EQUAL_OP) || defined (NONEQUAL_OP)
      // we don't care if things swap; we have symmetry
      return this;
    #else
      // we have no non-static member data, so we only need care about our type
      // As of now, the constructor chain is side-effect free;
      // let's hope it stays that way.
      INTEQUAL_SWAP result = new INTEQUAL_SWAP(ppt);
      return result;
    #endif
  }

#if (defined(EQUAL_OP) || defined(NONEQUAL_OP))
  /*@Pure*/
  public boolean is_symmetric() {
    return true;
  }

#else

  /**
   * Returns the class that corresponds to this class with its variable
   * order swapped.
   */
  public static Class<? extends Invariant> swap_class () {
    return INTEQUAL_SWAP.class;
  }
#endif


  // JHP: this should be removed in favor of checks in PptTopLevel
  // such as is_equal, is_lessequal, etc.
  // Look up a previously instantiated INTEQUAL relationship.
  // Should this implementation be made more efficient?
  public static /*@Nullable*/ INTEQUAL find(PptSlice ppt) {
    assert ppt.arity() == 2;
    for (Invariant inv : ppt.invs) {
      if (inv instanceof INTEQUAL) {
        return (INTEQUAL) inv;
      }
    }

    // If the invariant is suppressed, create it
    if ((suppressions != null) && suppressions.suppressed (ppt)) {
      INTEQUAL inv = proto.instantiate_dyn (ppt);
      // System.out.printf ("%s is suppressed in ppt %s%n", inv.format(), ppt.name());
      return inv;
    }

    return null;
  }

  public String repr(/*>>>@GuardSatisfied INTEQUAL this*/) {
    return INTEQUALstring + varNames();
  }

  /*@SideEffectFree*/
  public String format_using(/*>>>@GuardSatisfied INTEQUAL this,*/ OutputFormat format) {

    String var1name = var1().name_using(format);
    String var2name = var2().name_using(format);

    if ((format == OutputFormat.DAIKON)
        || (format == OutputFormat.ESCJAVA)) {
      String comparator = EQUALSstring;
      return var1name + " " + comparator + " " + var2name;
    }

    if (format == OutputFormat.CSHARPCONTRACT) {
      #if defined(EQUALSTRING)
        assert var1().has_typeof() == var2().has_typeof();
        if (var1().has_typeof()) {
          return var1name + " == " + var2name;
        } else {
          return var1name + ".Equals(" + var2name + ")";
        }
      #elif defined(NONEQUALSTRING)
        assert var1().has_typeof() == var2().has_typeof();
        if (var1().has_typeof()) {
          return var1name + " != " + var2name;
        } else {
          return "!" + var1name + ".Equals(" + var2name + ")";
        }
      #elif defined (LESSTHANSTRING)
        return var1name + ".CompareTo(" + var2name +") < 0";
      #elif defined (LESSEQUALSTRING)
        return var1name + ".CompareTo(" + var2name +") <= 0";
      #elif defined (GREATERTHANSTRING)
        return var1name + ".CompareTo(" + var2name +") > 0";
      #elif defined (GREATEREQUALSTRING)
        return var1name + ".CompareTo(" + var2name +") >= 0";
      // Integer and float cases:
      #else
        String comparator = EQUALSstring;
        return var1name + " " + comparator + " " + var2name;
      #endif
    }

    if (format.isJavaFamily()) {
      #if defined(EQUALFLOAT)
        return Invariant.formatFuzzy("eq", var1(), var2(), format);
      #elif defined(NONEQUALFLOAT)
        return Invariant.formatFuzzy("ne", var1(), var2(), format);
      #elif defined(LESSTHANFLOAT)
        return Invariant.formatFuzzy("lt", var1(), var2(), format);
      #elif defined(LESSEQUALFLOAT)
        return Invariant.formatFuzzy("lte", var1(), var2(), format);
      #elif defined(GREATERTHANFLOAT)
        return Invariant.formatFuzzy("gt", var1(), var2(), format);
      #elif defined(GREATEREQUALFLOAT)
        return Invariant.formatFuzzy("gte", var1(), var2(), format);
      #elif defined(EQUALSTRING)
        assert var1().has_typeof() == var2().has_typeof();
        if (var1().has_typeof()) {
          return var1name + " == " + var2name;
        } else {
          return var1name + ".equals(" + var2name + ")";
        }
      #elif defined(NONEQUALSTRING)
        assert var1().has_typeof() == var2().has_typeof();
        if (var1().has_typeof()) {
          return var1name + " != " + var2name;
        } else {
          return "!" + var1name + ".equals(" + var2name + ")";
        }
      #elif defined (LESSTHANSTRING)
        return var1name + ".compareTo(" + var2name +") < 0";
      #elif defined (LESSEQUALSTRING)
        return var1name + ".compareTo(" + var2name +") <= 0";
      #elif defined (GREATERTHANSTRING)
        return var1name + ".compareTo(" + var2name +") > 0";
      #elif defined (GREATEREQUALSTRING)
        return var1name + ".compareTo(" + var2name +") >= 0";
      #else
        if ((var1name.indexOf("daikon.Quant.collectObject") != -1)
            ||
            (var2name.indexOf("daikon.Quant.collectObject") != -1)) {
          return "(warning: it is meaningless to compare hashcodes for values "
            + "obtained through daikon.Quant.collect... methods:"
            + var1name + " " + EQUALSstring + " " + var2name + ")";
        }
        return var1name + " " + EQUALSstring + " " + var2name;
      #endif
    }

    if (format == OutputFormat.SIMPLIFY) {
      #if defined(EQUAL_OP)
        String comparator = "EQ";
      #elif defined(NONEQUAL_OP)
        String comparator = "NEQ";
      #else
        String comparator = EQUALSstring;
      #endif
      return "(" + comparator
        + " " + var1().simplifyFixup(var1name)
        + " " + var2().simplifyFixup(var2name) + ")";
    }

    return format_unimplemented(format);
  }

  public InvariantStatus check_modified(PRIMITIVE v1, PRIMITIVE v2, int count) {
    if (!(EQUALS(v1, v2))) {
      return InvariantStatus.FALSIFIED;
    }
    return InvariantStatus.NO_CHANGE;
  }

  public InvariantStatus add_modified(PRIMITIVE v1, PRIMITIVE v2, int count) {
    if (logDetail() || debug.isLoggable(Level.FINE)) {
      log (debug, "add_modified (" + v1 + ", " + v2 + ",  "
           + "ppt.num_values = " + ppt.num_values() + ")");
    }
    if ((logOn() || debug.isLoggable(Level.FINE)) &&
        check_modified(v1, v2, count) == InvariantStatus.FALSIFIED)
      log (debug, "destroy in add_modified (" + v1 + ", " + v2 + ",  "
           + count + ")");

    return check_modified(v1, v2, count);
  }

  // This is very tricky, because whether two variables are equal should
  // presumably be transitive, but it's not guaranteed to be so when using
  // this method and not dropping out all variables whose values are ever
  // missing.
  protected double computeConfidence() {
    // Should perhaps check number of samples and be unjustified if too few
    // samples.

    #if defined(EQUAL_OP)
      // We MUST check if we have seen samples; otherwise we get
      // undesired transitivity with missing values.
      if (ppt.num_samples() == 0) {
        return Invariant.CONFIDENCE_UNJUSTIFIED;
      }

      // It's an equality invariant.  I ought to use the actual ranges somehow.
      // Actually, I can't even use this .5 test because it can make
      // equality non-transitive.
      // return Math.pow(.5, num_values());
      return Invariant.CONFIDENCE_JUSTIFIED;
    #else
      // // The reason for this multiplication is that there might be only a
      // // very few possible values.  Example:  towers of hanoi has only 6
      // // possible (pegA, pegB) pairs.
      // return 1 - (Math.pow(.5, ppt.num_values())
      //             * Math.pow(.99, ppt.num_mod_samples()));
      return 1 - Math.pow(.5, ppt.num_samples());
    #endif
  }

#if defined(EQUAL_OP)
  public boolean enoughSamples(/*>>>@GuardSatisfied INTEQUAL this*/) {
    return (ppt.num_samples() > 0);
  }
#endif

  // For Comparison interface
  public double eq_confidence() {
    if (isExact()) {
      return getConfidence();
    } else {
      return Invariant.CONFIDENCE_NEVER;
    }
  }

  /*@Pure*/
  public boolean isExact() {
    #if defined(EQUAL_OP)
      return true;
    #else
      return false;
    #endif
  }

  // // Temporary, for debugging
  // public void destroy() {
  //   if (debug.isLoggable(Level.FINE)) {
  //     System.out.println(INTEQUALstring + ".destroy(" + ppt.name() + ")");
  //     System.out.println(repr());
  //     (new Error()).printStackTrace();
  //   }
  //   super.destroy();
  // }

  public InvariantStatus add(/*@Interned*/ Object v1, /*@Interned*/ Object v2, int mod_index, int count) {
    if (debug.isLoggable(Level.FINE)) {
      debug.fine(INTEQUALstring + ppt.varNames() + ".add("
                 + v1 + "," + v2
                 + ", mod_index=" + mod_index + ")"
                 + ", count=" + count + ")");
    }
    return super.add(v1, v2, mod_index, count);
  }

  /*@Pure*/
  public boolean isSameFormula(Invariant other) {
    return true;
  }

  /*@Pure*/
  public boolean isExclusiveFormula(Invariant other) {

    // Also ought to check against LinearBinary, etc.
    #if defined(EQUAL_OP)
      if ((other instanceof INT(LessThan))
        || (other instanceof INT(GreaterThan))
        || (other instanceof INT(NonEqual)))
      return true;
    #endif

    #if defined(NONEQUAL_OP)
      if (other instanceof INT(Equal)) {
        return true;
      }
    #endif

    #if defined(LESSTHAN_OP)
        if ((other instanceof INT(Equal))
            || (other instanceof INT(GreaterEqual))
            || (other instanceof INT(GreaterThan)))
          return true;
    #endif

    #if defined(GREATERTHAN_OP)
      if ((other instanceof INT(LessThan))
          || (other instanceof INT(LessEqual))
          || (other instanceof INT(Equal)))
        return true;
    #endif

    #if defined(LESSEQUAL_OP)
      if (other instanceof INT(GreaterThan)) {
        return true;
      }
    #endif

    #if defined(GREATEREQUAL_OP)
      if (other instanceof INT(LessThan)) {
        return true;
      }
    #endif

    return false;
  }

  @Override
  public /*@Nullable*/ DiscardInfo isObviousStatically(VarInfo[] vis) {
    final VarInfo var1 = vis[0];
    final VarInfo var2 = vis[1];

    #if defined(EQUAL_OP)
    // If A.minvalue==A.maxvalue==B.minvalue==B.maxvalue, then
    // there's nothing to see here.
    if (var1.aux.hasValue(VarInfoAux.MINIMUM_VALUE)
        && var1.aux.hasValue(VarInfoAux.MAXIMUM_VALUE)
        && var2.aux.hasValue(VarInfoAux.MINIMUM_VALUE)
        && var2.aux.hasValue(VarInfoAux.MAXIMUM_VALUE))
    {
      @SuppressWarnings("keyfor")   // needs EnsuresQualifier
      int minA = var1.aux.getInt(VarInfoAux.MINIMUM_VALUE),
          maxA = var1.aux.getInt(VarInfoAux.MAXIMUM_VALUE),
          minB = var2.aux.getInt(VarInfoAux.MINIMUM_VALUE),
          maxB = var2.aux.getInt(VarInfoAux.MAXIMUM_VALUE);

      if (minA == maxA && maxA == minB && minB == maxB) {
        return new DiscardInfo(this,
          DiscardCode.obvious,
          var1.name() + " == " + var2.name() + " is already known");
      }
    }
    #endif

    #if defined(LESSTHAN_OP) || defined(LESSEQUAL_OP) || defined(NONEQUAL_OP)
    if (var1.aux.hasValue(VarInfoAux.MAXIMUM_VALUE)
        && var2.aux.hasValue(VarInfoAux.MINIMUM_VALUE))
    {
      @SuppressWarnings("keyfor")   // needs EnsuresQualifier
      int maxA = var1.aux.getInt(VarInfoAux.MAXIMUM_VALUE),
          minB = var2.aux.getInt(VarInfoAux.MINIMUM_VALUE);

      #if defined(LESSTHAN_OP)
      #define DISCARD_OP <
      #elif defined(LESSEQUAL_OP)
      #define DISCARD_OP <=
      #elif defined(NONEQUAL_OP)
      #define DISCARD_OP <
      #endif
      if (maxA DISCARD_OP minB) {
        return new DiscardInfo(this,
          DiscardCode.obvious,
          var1.name() + " DISCARD_OP " + var2.name() + " is already known");
      }
    }
    #endif

    #if defined(GREATERTHAN_OP) || defined(GREATEREQUAL_OP) || defined(NONEQUAL_OP)
    if (var1.aux.hasValue(VarInfoAux.MINIMUM_VALUE)
        && var2.aux.hasValue(VarInfoAux.MAXIMUM_VALUE))
    {
      @SuppressWarnings("keyfor")   // needs EnsuresQualifier
      int maxB = var2.aux.getInt(VarInfoAux.MAXIMUM_VALUE),
          minA = var1.aux.getInt(VarInfoAux.MINIMUM_VALUE);

      #if defined(GREATERTHAN_OP)
      #define DISCARD_OP >
      #elif defined(GREATEREQUAL_OP)
      #define DISCARD_OP >=
      #elif defined(NONEQUAL_OP)
      #define DISCARD_OP >
      #endif
      if (minA DISCARD_OP maxB) {
        return new DiscardInfo(this,
          DiscardCode.obvious,
          var1.name() + " DISCARD_OP " + var2.name() + " is already known");
      }
    }
    #endif

    return super.isObviousStatically(vis);
  }

#if (defined(EQUAL_OP))
  /**
   *  Since this invariant can be a postProcessed equality, we have to
   *  handle isObvious especially to avoid circular isObvious
   *  relations.  We only check if this.ppt.var_infos imply
   *  obviousness rather than the cartesian product on the equality
   *  set.
   */
  /*@Pure*/
  public /*@Nullable*/ DiscardInfo isObviousStatically_SomeInEquality() {
    if (var1().equalitySet == var2().equalitySet) {
      return isObviousStatically(this.ppt.var_infos);
    } else {
      return super.isObviousStatically_SomeInEquality();
    }
  }

  /**
   *  Since this invariant can be a postProcessed equality, we have to
   *  handle isObvious especially to avoid circular isObvious
   *  relations.  We only check if this.ppt.var_infos imply
   *  obviousness rather than the cartesian product on the equality
   *  set.
   */
  /*@Pure*/
  public /*@Nullable*/ DiscardInfo isObviousDynamically_SomeInEquality() {
    if (var1().equalitySet == var2().equalitySet) {
      return isObviousDynamically(this.ppt.var_infos);
    } else {
      return super.isObviousDynamically_SomeInEquality();
    }
  }
#endif

  /*@Pure*/
  public /*@Nullable*/ DiscardInfo isObviousDynamically(VarInfo[] vis) {

    // JHP: We might consider adding a check over bounds.   If
    // x < c and y > c then we know that x < y.  Similarly for
    // x > c and y < c.  We could also substitute oneof for
    // one or both of the bound checks.

    DiscardInfo super_result = super.isObviousDynamically(vis);
    if (super_result != null) {
      return super_result;
    }

    #if defined (IS_NUMERIC)
    VarInfo var1 = vis[0];
    VarInfo var2 = vis[1];
    #endif

    #if 0
    // If arithmetic equal
    #endif
    #if (defined(EQUAL) || defined(EQUALFLOAT))
      // a+c=b+c is implied, because a=b must have also been reported.
      if (var1.is_add() && var2.is_add()
          && (var1.get_add_amount() == var2.get_add_amount()))
        return new DiscardInfo(this, DiscardCode.obvious,
          "Invariants of the form a+c==b+c are implied " +
          "since a==b is reported.");
    #endif

    DiscardInfo di = null;

    #if defined(PAIRWISE_COMPARE)
      // Check for the same invariant over enclosing arrays
      di = pairwise_implies (vis);
      if (di != null) {
        return di;
      }
    #endif

    #if defined(EQUAL_OP)
      // Check for size(A[]) == Size(B[]) where A[] == B[]
      di = array_eq_implies (vis);
      if (di != null) {
        return di;
      }
    #endif

    #if defined(NONEQUAL_OP) && defined(NO_DUPS)
      // (A[] no dups) ^ (i != j) ==> a[i] != a[j]
      di = no_dups_implies (vis);
      if (di != null) {
        return di;
      }
    #endif

    #if defined (IS_NUMERIC)

      #if defined (LESSTHAN_OP) || defined (GREATERTHAN_OP)
        // Check for a linear binary that implies > or <
        di = lb_implies (vis);
        if (di != null) {
          return di;
        }
      #endif

    { // Sequence length tests
      SequenceLength sl1 = null;
      if (var1.isDerived() && (var1.derived instanceof SequenceLength)) {
        sl1 = (SequenceLength) var1.derived;
      }
      SequenceLength sl2 = null;
      if (var2.isDerived() && (var2.derived instanceof SequenceLength)) {
        sl2 = (SequenceLength) var2.derived;
      }

      // "size(a)-1 cmp size(b)-1" is never even instantiated;
      // use "size(a) cmp size(b)" instead.

      // This might never get invoked, as equality is printed out specially.
      VarInfo s1 = (sl1 == null) ? null : sl1.base;
      VarInfo s2 = (sl2 == null) ? null : sl2.base;
      if ((s1 != null) && (s2 != null)
          && (s1.equalitySet == s2.equalitySet)) {
        // lengths of equal arrays being compared
        String n1 = var1.name();
        String n2 = var2.name();
        return new DiscardInfo(this, DiscardCode.obvious, n1 + " and  " + n2
                            + " are equal arrays, so equal size is implied");
      }

      #if defined(LESSTHAN_OP)
        if ((sl2 != null) && (sl2.shift == 0)) {
          // "x < size(a)"
          // ("x <= size(a)-1" or "x < size(a)-1" would be more informative)
          String discardString = "Invariants of the form x < size(a) "
                               + "suppressed since x <= size(a)-1 or "
                               + "x < size(a)-1 is preferred";
          return new DiscardInfo(this, DiscardCode.obvious, discardString);
        } else if ((sl1 != null) && (sl1.shift == -1)) {
          // "size(a)-1 < x"  ("size(a) <= x" would be more informative)
          String discardString = "Invariants of the form size(a)-1 < x are "
                               + "suppressed since size(a) <= x is preferred";
          return new DiscardInfo(this, DiscardCode.obvious, discardString);
        }
      #elif defined(GREATERTHAN_OP)
        if ((sl1 != null) && (sl1.shift == 0)) {
          // "size(a) > x"  ("size(a) >= x" would be more informative)
          String discardString = "Invariants of the form size(a)-1 > x are "
                               + "suppressed since size(a) >= x is preferred";
          return new DiscardInfo(this, DiscardCode.obvious, discardString);
        } else if ((sl2 != null) && (sl2.shift == -1)) {
          // "x > size(a)-1"  ("x >= size(a)" would be more informative)
          String discardString = "Invariants of the form x > size(a)-1 are "
                               + "suppressed sinec x >= size(a) is preferred";
          return new DiscardInfo(this, DiscardCode.obvious, discardString);
        }
      #endif
    }
    #endif

    return null;
  } // isObviousDynamically

#if defined(IS_NUMERIC) && (defined(LESSTHAN_OP) || defined(GREATERTHAN_OP))
  /**
   * Checks to see if there is a linear binary relationship between the
   * variables that implies &gt; or &lt;
   * <pre>
   *  a * x + b * y + c == 0
   *
   *  (y = (-a/b)*x + (-c/b) ^ (-a/b == 1) ^ (-c/b &gt; 0) &rArr; y &gt; x
   *  (y = (-a/b)*x + (-c/b) ^ (-a/b == 1) ^ (-c/b &lt; 0) &rArr; y &lt; x
   * </pre>
   *
   *
   * Returns null if this is not true.  Appropriate DiscardInfo otherwise.
   */
   //old
   //   *  (y = ax + b) ^ (a == 1) ^ (b > 0) ==> y > x
   //   *  (y = ax + b) ^ (a == 1) ^ (b < 0) ==> y < x

  private /*@Nullable*/ DiscardInfo lb_implies (VarInfo[] vis) {

    // Look for a linear binary invariant over the same variables
    LINEARBINARY lb = (LINEARBINARY) ppt.parent.find_inv_by_class
                                                    (vis, LINEARBINARY.class);
    if ((lb == null) || !lb.isActive()) {
      return null;
    }

    // Only 'a == 1' implies a less than or greater than relationship
    if (-lb.core.a/lb.core.b != 1.0) {
      return null;
    }

    // The b coefficient determines less than or greater than
    if (EQUALS(-lb.core.c/lb.core.b, 0)) {
      return null;
    }

    return new DiscardInfo (this, DiscardCode.obvious, "implied by "
                            + lb.format());
  }
#endif

#if defined(PAIRWISE_COMPARE)
  /**
   * If both variables are subscripts and the underlying arrays have the
   * same invariant, then this invariant is implied:
   *
   *     (x[] op y[]) ^ (i == j) &rArr; (x[i] op y[j])
   */
  private /*@Nullable*/ DiscardInfo pairwise_implies (VarInfo[] vis) {

    VarInfo v1 = vis[0];
    VarInfo v2 = vis[1];

    // Make sure v1 and v2 are SEQ_SUBSCRIPT with the same shift
    if (!v1.isDerived() || !(v1.derived instanceof SEQ_SUBSCRIPT)) {
      return null;
    }
    if (!v2.isDerived() || !(v2.derived instanceof SEQ_SUBSCRIPT)) {
      return null;
    }
    @SuppressWarnings("nullness") // checker bug in flow
    /*@NonNull*/ SEQ_SUBSCRIPT der1 = (SEQ_SUBSCRIPT) v1.derived;
    @SuppressWarnings("nullness") // checker bug in flow
    /*@NonNull*/ SEQ_SUBSCRIPT der2 = (SEQ_SUBSCRIPT) v2.derived;
    if  (der1.index_shift != der2.index_shift)
      return null;

    // Make sure that the indices are equal
    if (!ppt.parent.is_equal (der1.sclvar().canonicalRep(),
                              der2.sclvar().canonicalRep())) {
      return null;
    }

    // See if the same relationship holds over the arrays
    Invariant proto = PAIRWISE_COMPARE.get_proto();
    DiscardInfo di = ppt.parent.check_implied_canonical (this,
                                der1.seqvar(), der2.seqvar(), proto);
    return di;
  }
#endif

#if defined(EQUAL_OP)
  /**
   * If the equality is between two array size variables, check to see if
   * the underlying arrays are equal:
   *
   *   (x[] = y[]) &rArr; size(x[]) = size(y[])
   */
  private /*@Nullable*/ DiscardInfo array_eq_implies (VarInfo[] vis) {

    // Make sure v1 and v2 are size(array) with the same shift
    VarInfo v1 = vis[0];
    if (!v1.isDerived() || !(v1.derived instanceof SequenceLength)) {
      return null;
    }
    VarInfo v2 = vis[1];
    if (!v2.isDerived() || !(v2.derived instanceof SequenceLength)) {
      return null;
    }
    assert v1.derived != null : "@AssumeAssertion(nullness): checker bug: flow";
    assert v2.derived != null : "@AssumeAssertion(nullness): checker bug: flow";
    if (!v1.derived.isSameFormula (v2.derived)) {
      return null;
    }

    VarInfo seqvar1 = v1.derived.getBase(0);
    VarInfo seqvar2 = v2.derived.getBase(0);
    if (ppt.parent.is_equal (seqvar1, seqvar2)) {
      return new DiscardInfo (this, DiscardCode.obvious, "Implied by " +
                              seqvar1 + " == " + seqvar2 + " and "
                              + var1() + " == " + v1 + " and "
                              + var2() + " == " + v2);
    }

    return null;
  }
#endif

#if defined(NONEQUAL_OP) && defined(NO_DUPS)
  /**
   * Suppress NonEqual invariants where both variables are subscripts
   * from the same array and the array has no duplicates:
   *
   *    (A[] has no dups) ^ (i != j) &rArr; a[i] != a[j]
   */
  private /*@Nullable*/ DiscardInfo no_dups_implies (VarInfo[] vis) {

    // Make sure v1 and v2 are SEQ_SUBSCRIPT from the same array
    VarInfo v1 = vis[0];
    VarInfo v2 = vis[1];
    if (!v1.isDerived() || !(v1.derived instanceof SEQ_SUBSCRIPT)) {
      return null;
    }
    if (!v2.isDerived() || !(v2.derived instanceof SEQ_SUBSCRIPT)) {
      return null;
    }
    @SuppressWarnings("nullness") // checker bug: flow
    /*@NonNull*/ SEQ_SUBSCRIPT der1 = (SEQ_SUBSCRIPT) v1.derived;
    @SuppressWarnings("nullness") // checker bug: flow
    /*@NonNull*/ SEQ_SUBSCRIPT der2 = (SEQ_SUBSCRIPT) v2.derived;

    // The sequence vars must be equal (or the same)
    if (!ppt.parent.is_equal (der1.seqvar().canonicalRep(),
                              der2.seqvar().canonicalRep()))
      return null;

    // The subscripts must be non_equal
    DiscardInfo di1 = ppt.parent.check_implied_canonical (this, der1.sclvar(),
                                        der2.sclvar(), IntNonEqual.get_proto());
    if (di1 == null) {
      return null;
    }

    // The array must have no-dups
    DiscardInfo di2 = ppt.parent.check_implied_canonical (this, der1.seqvar(),
                                                          NO_DUPS.get_proto());
    if (di2 == null) {
      return null;
    }

    return new DiscardInfo (this, DiscardCode.obvious, di1.discardString()
                            + " and " + di2.discardString());
  }
#endif

  /** NI suppressions, initialized in get_ni_suppressions() */
  private static /*@Nullable*/ NISuppressionSet suppressions = null;

#if defined(GREATEREQUAL_OP) || defined(LESSEQUAL_OP) || defined(NONEQUAL_OP)
  /** Returns the non-instantiating suppressions for this invariant. */
  /*@Pure*/
  public /*@NonNull*/ NISuppressionSet get_ni_suppressions() {
    if (suppressions == null) {
      #if defined(GREATEREQUAL_OP) || defined(LESSEQUAL_OP) || defined(NONEQUAL_OP)
        NISuppressee suppressee = new NISuppressee (INTEQUAL.class, 2);
      #endif

      // suppressor definitions (used in suppressions below)
      #if defined(GREATEREQUAL_OP) || defined(LESSEQUAL_OP)
      NISuppressor v1_eq_v2 = new NISuppressor (0, 1, EQUAL_CLASS.class);
      #endif
      #if defined(GREATEREQUAL_OP) || defined(NONEQUAL_OP)
      NISuppressor v1_gt_v2 = new NISuppressor (0, 1, GREATER_THAN_CLASS.class);
      #endif
      #if defined(LESSEQUAL_OP) || defined(NONEQUAL_OP)
      NISuppressor v1_lt_v2 = new NISuppressor (0, 1, LESS_THAN_CLASS.class);
      #endif

      suppressions = new NISuppressionSet (new NISuppression[] {
        #if defined(GREATEREQUAL_OP)
          // v1 == v2 => v1 >= v2
          new NISuppression (v1_eq_v2, suppressee),
          // v1 > v2 => v1 >= v2
          new NISuppression (v1_gt_v2, suppressee),
        #elif defined(LESSEQUAL_OP)
          // v1 == v2 => v1 <= v2
          new NISuppression (v1_eq_v2, suppressee),
          // v1 < v2 => v1 <= v2
          new NISuppression (v1_lt_v2, suppressee),
        #elif defined(NONEQUAL_OP)
          // v1 < v2 => v1 != v2
          new NISuppression (v1_lt_v2, suppressee),
          // v1 > v2 => v1 != v2
          new NISuppression (v1_gt_v2, suppressee),
        #endif
        });
    }
    return suppressions;
  }
#else
  /** Returns the non-instantiating suppressions for this invariant. */
  /*@Pure*/
  public /*@Nullable*/ NISuppressionSet get_ni_suppressions() {
    return null;
  }
#endif

}
