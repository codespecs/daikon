#if 0
  // Do not attempt to compile this file with a Java compiler such as javac.
  // You first need to preprocess it with cpp, the C preprocessor.
  // The correct way to build the system is to run 'make'.
#endif

#if !(defined(EQUAL) || defined(LESSTHAN) || defined(LESSEQUAL) || defined(GREATERTHAN) || defined(GREATEREQUAL) || defined(EQUALFLOAT) || defined(LESSTHANFLOAT) || defined(LESSEQUALFLOAT) || defined(GREATERTHANFLOAT) || defined(GREATEREQUALFLOAT))
  #error "EQUAL, LESSTHAN, LESSEQUAL, GREATERTHAN, GREATEREQUAL, EQUALFLOAT, LESSTHANFLOAT, LESSEQUALFLOAT, GREATERTHANFLOAT, or GREATEREQUALFLOAT must be defined"
#endif

#if (defined(EQUAL) || defined(LESSTHAN) || defined(LESSEQUAL) || defined(GREATERTHAN) || defined(GREATEREQUAL))
  #define SUPERCLASS SequenceScalar
  #define PRIMITIVE long
  #define IS_INT 1
  #define PROGLANGTYPESCALAR INT
  #define PROGLANGTYPEARRAY INT_ARRAY
  #define ELTONEOF EltOneOf
  #define SUBSEQUENCE SubSequence
  #define EQUAL_CLASS SeqIntEqual
  #define LESS_THAN_CLASS SeqIntLessThan
  #define GREATER_THAN_CLASS SeqIntGreaterThan
  #define VALUE_SET ValueSet.ValueSetScalarArray
#elif (defined(EQUALFLOAT) || defined(LESSTHANFLOAT) || defined(LESSEQUALFLOAT) || defined(GREATERTHANFLOAT) || defined(GREATEREQUALFLOAT))
  #define SUPERCLASS SequenceFloat
  #define PRIMITIVE double
  #define IS_FLOAT 1
  #define PROGLANGTYPESCALAR DOUBLE
  #define PROGLANGTYPEARRAY DOUBLE_ARRAY
  #define ELTONEOF EltOneOfFloat
  #define SUBSEQUENCE SubSequenceFloat
  #define EQUAL_CLASS SeqFloatEqual
  #define LESS_THAN_CLASS SeqFloatLessThan
  #define GREATER_THAN_CLASS SeqFloatGreaterThan
  #define VALUE_SET ValueSet.ValueSetFloatArray
#endif

#if defined(EQUAL)
  #define SEQINTEQUAL SeqIntEqual
  #define SEQINTEQUALstring "SeqIntEqual"
  #define EQUALS(a,b) (a == b)
  #define EQUALShtml ==
  #define EQUALSstring "=="
  #define EQUALSstringDBC "eltsEqual"
  #define EQUALSSIMPLIFYstring "EQ"
#elif defined(EQUALFLOAT)
  #define SEQINTEQUAL SeqFloatEqual
  #define SEQINTEQUALstring "SeqFloatEqual"
  #define EQUALS(a,b) (Global.fuzzy.eq (a, b))
  #define EQUALShtml
  #define EQUALSstring "=="
  #define EQUALSstringDBC "eltsEqual"
  #define EQUALSSIMPLIFYstring "EQ"
#elif defined(LESSTHAN)
  #define SEQINTEQUAL SeqIntLessThan
  #define SEQINTEQUALstring "SeqIntLessThan"
  #define EQUALS(a,b) (a < b)
  #define EQUALShtml &lt;
  #define EQUALSstring "<"
  #define EQUALSstringDBC "eltsLT"
  #define EQUALSSIMPLIFYstring "<"
#elif defined(LESSTHANFLOAT)
  #define SEQINTEQUAL SeqFloatLessThan
  #define SEQINTEQUALstring "SeqFloatLessThan"
  #define EQUALS(a,b) (Global.fuzzy.lt (a, b))
  #define EQUALShtml &lt;
  #define EQUALSstring "<"
  #define EQUALSstringDBC "eltsLT"
  #define EQUALSSIMPLIFYstring "<"
#elif defined(LESSEQUAL)
  #define SEQINTEQUAL SeqIntLessEqual
  #define SEQINTEQUALstring "SeqIntLessEqual"
  #define EQUALS(a,b) (a <= b)
  #define EQUALShtml &le;
  #define EQUALSstring "<="
  #define EQUALSstringDBC "eltsLTE"
  #define EQUALSSIMPLIFYstring "<="
#elif defined(LESSEQUALFLOAT)
  #define SEQINTEQUAL SeqFloatLessEqual
  #define SEQINTEQUALstring "SeqFloatLessEqual"
  #define EQUALS(a,b) (Global.fuzzy.lte (a, b))
  #define EQUALShtml &le;
  #define EQUALSstring "<="
  #define EQUALSstringDBC "eltsLTE"
  #define EQUALSSIMPLIFYstring "<="
#elif defined(GREATERTHAN)
  #define SEQINTEQUAL SeqIntGreaterThan
  #define SEQINTEQUALstring "SeqIntGreaterThan"
  #define EQUALS(a,b) (a > b)
  #define EQUALShtml &gt;
  #define EQUALSstring ">"
  #define EQUALSstringDBC "eltsGT"
  #define EQUALSSIMPLIFYstring ">"
#elif defined(GREATERTHANFLOAT)
  #define SEQINTEQUAL SeqFloatGreaterThan
  #define SEQINTEQUALstring "SeqFloatGreaterThan"
  #define EQUALS(a,b) (Global.fuzzy.gt (a, b))
  #define EQUALShtml &gt;
  #define EQUALSstring ">"
  #define EQUALSstringDBC "eltsGT"
  #define EQUALSSIMPLIFYstring ">"
#elif defined(GREATEREQUAL)
  #define SEQINTEQUAL SeqIntGreaterEqual
  #define SEQINTEQUALstring "SeqIntGreaterEqual"
  #define EQUALS(a,b) (a >= b)
  #define EQUALShtml &ge;
  #define EQUALSstring ">="
  #define EQUALSstringDBC "eltsGTE"
  #define EQUALSSIMPLIFYstring ">="
#elif defined(GREATEREQUALFLOAT)
  #define SEQINTEQUAL SeqFloatGreaterEqual
  #define SEQINTEQUALstring "SeqFloatGreaterEqual"
  #define EQUALS(a,b) (Global.fuzzy.gte (a, b))
  #define EQUALShtml &ge;
  #define EQUALSstring ">="
  #define EQUALSstringDBC "eltsGTE"
  #define EQUALSSIMPLIFYstring ">="
#else
  #error "EQUAL, LESSTHAN, LESSEQUAL, GREATERTHAN, GREATEREQUAL, EQUALFLOAT, LESSTHANFLOAT, LESSEQUALFLOAT, GREATERTHANFLOAT, or GREATEREQUALFLOAT must be defined"
#endif

// ***** This file is automatically generated from SeqIntComparison.java.jpp

package daikon.inv.binary.sequenceScalar;

import daikon.*;
import daikon.derive.unary.*;
import daikon.inv.*;
import daikon.inv.unary.sequence.*;
import daikon.inv.binary.twoSequence.*;
import daikon.suppress.*;

import plume.*;

import java.util.*;
import java.util.logging.Logger;

/*>>>
import org.checkerframework.checker.interning.qual.*;
import org.checkerframework.checker.lock.qual.*;
import org.checkerframework.checker.nullness.qual.*;
import org.checkerframework.dataflow.qual.*;
import typequals.*;
*/


/**
 * Represents an invariant between a PRIMITIVE scalar and a
 * a sequence of PRIMITIVE values.
 * Prints as <code>x[] elements EQUALShtml y</code> where <code>x</code> is a
 * PRIMITIVE sequence and <code>y</code> is a PRIMITIVE scalar.
 */
public final class SEQINTEQUAL
  extends SUPERCLASS
{
  // We are Serializable, so we specify a version to allow changes to
  // method signatures without breaking serialization.  If you add or
  // remove fields, you should change this number to the current date.
  static final long serialVersionUID = 20030822L;

  // Variables starting with dkconfig_ should only be set via the
  // daikon.config.Configuration interface.
  /**
   * Boolean.  True iff SEQINTEQUAL invariants should be considered.
   */
  public static boolean dkconfig_enabled = Invariant.invariantEnabledDefault;

  public static final Logger debug
    = Logger.getLogger("daikon.inv.binary.sequenceScalar." + SEQINTEQUALstring);

  static boolean debugSeqIntComparison = false;

  protected SEQINTEQUAL(PptSlice ppt) {
    super(ppt);
  }

  protected /*@Prototype*/ SEQINTEQUAL() {
    super();
  }

  private static /*@Prototype*/ SEQINTEQUAL proto = new /*@Prototype*/ SEQINTEQUAL ();

  /** Returns the prototype invariant for SEQINTEQUAL */
  public static /*@Prototype*/ SEQINTEQUAL get_proto () {
    return proto;
  }

  /** Returns whether or not this invariant is enabled */
  public boolean enabled() {
    return dkconfig_enabled;
  }

  /** Non-equal SeqIntComparison is only valid on integral types */
  public boolean instantiate_ok (VarInfo[] vis) {

    if (!valid_types (vis)) {
      return false;
    }

    VarInfo seqvar;
    VarInfo sclvar;
    if (vis[0].rep_type == ProglangType.PROGLANGTYPEARRAY) {
      seqvar = vis[0];
      sclvar = vis[1];
    } else {
      seqvar = vis[1];
      sclvar = vis[0];
    }

    assert sclvar.rep_type == ProglangType.PROGLANGTYPESCALAR;
    assert seqvar.rep_type == ProglangType.PROGLANGTYPEARRAY;

    #if !defined(EQUAL) && defined(IS_INT)
      if (!seqvar.type.elementIsIntegral()) {
        return false;
      }
    #endif

    return true;
  }

  /** instantiates the invariant on the specified slice */
  protected SEQINTEQUAL instantiate_dyn (/*>>> @Prototype SEQINTEQUAL this,*/ PptSlice slice) {
    return new SEQINTEQUAL (slice);
  }

  /**
   * Checks to see if the comparison is obvious statically.  Makes the
   * following checks:
   * <pre>
   *    max(A[]) op A[]
   *    min(A[]) op A[]
   * </pre>
   *
   * JHP: Note that these are not strict implications, these are merely
   * uninteresting comparisons (except when op is GreaterEqual for max
   * and LessEqual for min).
   */
  /*@Pure*/
  public /*@Nullable*/ DiscardInfo isObviousStatically(VarInfo[] vis) {

    SequenceMin seqmin = null;
    SequenceMax seqmax = null;
    VarInfo sclseq = null;
    VarInfo sclvar = sclvar(vis);
    if (sclvar.derived instanceof SequenceMin) {
      seqmin = (SequenceMin) sclvar.derived;
      sclseq = seqmin.base;
    } else if (sclvar.derived instanceof SequenceMax) {
      seqmax = (SequenceMax) sclvar.derived;
      sclseq = seqmax.base;
    }
    if (seqvar(vis) == sclseq) {
      return new DiscardInfo (this, DiscardCode.obvious,
                              sclvar(vis).name() + " is min/max ");
    }
    return null;
  }

  /*@SideEffectFree*/
  public SEQINTEQUAL clone(/*>>>@GuardSatisfied SEQINTEQUAL this*/) {
    SEQINTEQUAL result = (SEQINTEQUAL) super.clone();
    return result;
  }

  public String repr(/*>>>@GuardSatisfied SEQINTEQUAL this*/) {
    return SEQINTEQUALstring + varNames() + ": "
      + ",falsified=" + falsified;
  }

  /*@SideEffectFree*/
  public String format_using(/*>>>@GuardSatisfied SEQINTEQUAL this,*/ OutputFormat format) {

    if (format.isJavaFamily()) return format_java_family(format);

    if (format == OutputFormat.DAIKON) return format_daikon();
    if (format == OutputFormat.ESCJAVA) return format_esc();
    if (format == OutputFormat.SIMPLIFY) return format_simplify();
    if (format == OutputFormat.CSHARPCONTRACT) return format_csharp_contract();

    return format_unimplemented(format);
  }

  public String format_daikon(/*>>>@GuardSatisfied SEQINTEQUAL this*/) {
    return seqvar().name() + " elements " + EQUALSstring + " " + sclvar().name();
  }

  public String format_esc(/*>>>@GuardSatisfied SEQINTEQUAL this*/) {
    String[] form = VarInfo.esc_quantify (seqvar(), sclvar());
    return form[0] + "(" + form[1] + " " + EQUALSstring + " " + form[2] + ")"
      + form[3];
  }

  public String format_simplify(/*>>>@GuardSatisfied SEQINTEQUAL this*/) {
    String[] form = VarInfo.simplify_quantify (seqvar(), sclvar());
    return form[0] + "(" + EQUALSSIMPLIFYstring + " " + form[1] + " "
      + form[2] + ")" + form[3];
  }

  public String format_java_family(/*>>>@GuardSatisfied SEQINTEQUAL this,*/ OutputFormat format) {
    return "daikon.Quant." + EQUALSstringDBC + "("
      + seqvar().name_using(format) + ", " + sclvar().name_using(format) + ")";
  }

  public String format_csharp_contract(/*>>>@GuardSatisfied SEQINTEQUAL this*/) {
    String[] split = seqvar().csharp_array_split();
    return "Contract.ForAll(" + split[0] + ", x => x" + split[1] + " " + EQUALSstring + " " + sclvar().csharp_name() + ")";
  }

  public InvariantStatus check_modified(PRIMITIVE /*@Interned*/ [] a, PRIMITIVE x, int count) {
    /*if (logDetail() || debug.isLoggable(Level.FINE))
      log(debug,"(" + EQUALSstring + " " + ArraysMDE.toString(a)
      + " " + x);*/
    for (int i=0; i<a.length; i++) {
      #if (!defined(EQUAL) && !defined(EQUALFLOAT))
        // assert seqvar().type.elementIsIntegral();
      #endif
      if (!EQUALS(a[i], x)) {
        return InvariantStatus.FALSIFIED;
      }
    }
    return InvariantStatus.NO_CHANGE;
  }

  public InvariantStatus add_modified(PRIMITIVE /*@Interned*/ [] a, PRIMITIVE x, int count) {
    return check_modified(a, x, count);
  }

  protected double computeConfidence() {

    // If there are no samples over our variables, its unjustified
    if (ppt.num_samples() == 0) {
      return CONFIDENCE_UNJUSTIFIED;
    }

    // If the array never has any elements, its unjustified
    VALUE_SET vs = (VALUE_SET) seqvar().get_value_set();
    if (vs.elem_cnt() == 0) {
      return CONFIDENCE_UNJUSTIFIED;
    }
    #if (defined(EQUAL) || defined(EQUALFLOAT))
      // It's an equality invariant.  I ought to use the actual ranges somehow.
      // Actually, I can't even use this .5 test because it can make
      // equality non-transitive.
      // return Math.pow(.5, ppt.num_samples());
      return Invariant.CONFIDENCE_JUSTIFIED;
    #else
      // return 1 - Math.pow(.5, vs.elem_cnt());
      return 1 - Math.pow(.5, ppt.num_samples());
    #endif
  }

  /*@Pure*/
  public boolean isExact() {
    #if (defined(EQUAL) || defined(EQUALFLOAT))
      return true;
    #else
      return false;
    #endif
  }

  /*@Pure*/
  public boolean isSameFormula(Invariant other) {
    return true;
  }

  /*@Pure*/
  public boolean isExclusiveFormula(Invariant other) {
    return false;
  }

  // Look up a previously instantiated invariant.
  public static /*@Nullable*/ SEQINTEQUAL find(PptSlice ppt) {
    assert ppt.arity() == 2;
    for (Invariant inv : ppt.invs) {
      if (inv instanceof SEQINTEQUAL) {
        return (SEQINTEQUAL) inv;
      }
    }
    return null;
  }

  /**
   * Checks to see if this is obvious over the specified variables.
   * Implements the following checks:
   * <pre>
   *  (x op B[]) ^ (B[] subsequence A[]) &rArr; (x op A[])
   *  (A[] == [])                        &rArr; (x op A[])
   * </pre>
   */
  /*@Pure*/
  public /*@Nullable*/ DiscardInfo isObviousDynamically(VarInfo[] vis) {

    DiscardInfo super_result = super.isObviousDynamically(vis);
    if (super_result != null) {
      return super_result;
    }

    VarInfo seqvar = seqvar(vis);
    VarInfo sclvar = sclvar(vis);
    //Debug.log (getClass(), ppt, vis, "Considering  over" + seqvar.name()
    //           + " and " + sclvar.name());

    // Look for the same property over a supersequence of this one.  This
    // doesn't need to explicitly ignore oher members of the equality set
    // because those members won't have any invariants over them.
    PptTopLevel pptt = ppt.parent;
    for (Iterator<Invariant> inv_itor = pptt.invariants_iterator(); inv_itor.hasNext(); ) {
      Invariant inv = inv_itor.next();
      if (inv == this) {
        continue;
      }
      if (inv instanceof SEQINTEQUAL) {
        SEQINTEQUAL other = (SEQINTEQUAL) inv;
        // System.out.printf ("considering %s seqvar=%s, other=%s%n", other.format(),
        // seqvar().name(), other.seqvar().name());
        if (pptt.is_subsequence (seqvar(), other.seqvar())
            && (sclvar(vis) == other.sclvar())) {
          // System.out.println ("is subsequence");
          return new DiscardInfo(this, DiscardCode.obvious, seqvar().name()
                                 + " is a subsequence of "
                                 + other.seqvar().name() + " and "
                                 + other.format() + " holds");
        }
      }
    }

    // JHP: handled in confidence test now
    // (A[] == []) ==> A[] op x
    if (false) {
      if (pptt.is_empty (seqvar)) {
        return new DiscardInfo (this, DiscardCode.obvious, "The sequence "
                                + seqvar.name() + " is always empty");
      }
    }

    if (isExact()) {
      return null;
    }

    // JHP: these presume that this invariant is true and should thus be
    // moved to uninteresting or removed.
    if (sclvar.isDerived() && (sclvar.derived instanceof SequenceLength)) {
      // Sequence length tests
      SequenceLength scl_seqlen = (SequenceLength) sclvar.derived;

      #if (defined(LESSTHAN) || defined(LESSTHANFLOAT))
      if ((scl_seqlen != null) && (scl_seqlen.shift == 0)) {
        // "x < size(a)"  ("x <= size(a)-1" would be more informative)
        return new DiscardInfo(this, DiscardCode.obvious, "An Invariant of the form x <= size(a)-1 would be more informative");
      }
      #elif (defined(GREATERTHAN) || defined(GREATERTHANFLOAT))
      if ((scl_seqlen != null) && (scl_seqlen.shift == -1)) {
        // "x > size(a)-1"  ("x >= size(a)" would be more informative)
        return new DiscardInfo(this, DiscardCode.obvious, "An Invariant of the form x >= size(a) would be more informative");
      }
      #endif
    }

    // JHP: this presumes that this invariant is true and should thus be
    // moved to uninteresting or removed.
    {
      PptSlice1 seqslice = pptt.findSlice(seqvar);
      if (seqslice != null) {
        ELTONEOF eoo = ELTONEOF.find(seqslice);
        if ((eoo != null) && eoo.enoughSamples() && (eoo.num_elts() == 1)) {
          return new DiscardInfo(this, DiscardCode.obvious, "Obvious implied by " + eoo.format());
        }
      }
    }

    return null;
  }

  /**
   * Returns a list of non-instantiating suppressions for this invariant.
   */
  /*@Pure*/
  public /*@Nullable*/ NISuppressionSet get_ni_suppressions() {
    return suppressions;
  }

  /** definition of this invariant (the suppressee) */
  private static NISuppressee suppressee
    = new NISuppressee (SEQINTEQUAL.class, 2);

  // suppressor definitions (used in suppressions below)
  private static NISuppressor v1_eq_v2
    = new NISuppressor (0, 1, EQUAL_CLASS.class);
  private static NISuppressor v1_gt_v2
    = new NISuppressor (0, 1, GREATER_THAN_CLASS.class);
  private static NISuppressor v1_lt_v2
    = new NISuppressor (0, 1, LESS_THAN_CLASS.class);

  // NI Suppressions for each type of comparison
  #if defined(GREATEREQUAL) || defined(GREATEREQUALFLOAT)
    private static NISuppressionSet suppressions =
      new NISuppressionSet (new NISuppression[] {

        // v1 == v2 => v1 >= v2
        new NISuppression (v1_eq_v2, suppressee),

        // v1 > v2 => v1 >= v2
        new NISuppression (v1_gt_v2, suppressee),

      });
  #elif defined(LESSEQUAL) || defined(LESSEQUALFLOAT)
    private static NISuppressionSet suppressions =
      new NISuppressionSet (new NISuppression[] {

        // v1 == v2 => v1 <= v2
        new NISuppression (v1_eq_v2, suppressee),

        // v1 < v2 => v1 <= v2
        new NISuppression (v1_lt_v2, suppressee),

      });
  #else
    private static /*@Nullable*/ NISuppressionSet suppressions = null;
  #endif

}
