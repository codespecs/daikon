#if 0
Do not attempt to compile this file with a Java compiler such as javac.
You first need to preprocess it with cpp, the C preprocessor.
The correct way to build the system is to run 'make'.
#endif

#if !(defined(EQUAL) || defined(EQUALFLOAT) || defined(EQUALSTRING) || defined(LESSTHAN) || defined(LESSTHANFLOAT) || defined(LESSTHANSTRING) || defined(GREATERTHAN) || defined(GREATERTHANFLOAT) || defined(GREATERTHANSTRING) || defined(LESSEQUAL) || defined(LESSEQUALFLOAT) || defined(LESSEQUALSTRING) || defined(GREATEREQUAL) || defined(GREATEREQUALFLOAT) || defined(GREATEREQUALSTRING))
  #error "EQUAL, EQUALFLOAT, EQUALSTRING, LESSTHAN, LESSTHANFLOAT, LESSTHANSTRING, GREATERTHAN, GREATERTHANFLOAT, GREATERTHANSTRING, LESSEQUAL, LESSEQUALFLOAT, LESSEQUALSTRING, GREATEREQUAL, GREATEREQUALFLOAT, or GREATEREQUALSTRING must be defined"
#endif

#if (defined(EQUAL) || defined(LESSTHAN) || defined(GREATERTHAN) || defined(LESSEQUAL) || defined(GREATEREQUAL))
  #define SUPERCLASS TwoSequence
  #define PRIMITIVE long
  #define NUMERIC
  #define IS_INT
  #define ARRAYCOMPARATOR new ArraysPlume.LongArrayComparatorLexical()
  #define ELEM_MATCH_COMPARE(v1, v2) (ArraysPlume.isSubset(v1, v2) && \
                                      ArraysPlume.isSubset(v2, v1))
  #define SUBSEQUENCE SubSequence
  #define BASE_IS_TYPE baseIsIntegral()
  #define BASE_IS_SCALAR baseIsScalar()
  #define SEQ_SUBSEQUENCE SequenceScalarSubsequence
  #define PAIRWISECOMP_EQ PairwiseIntEqual
  #define PAIRWISECOMP_LT PairwiseIntLessThan
  #define PAIRWISECOMP_GT PairwiseIntGreaterThan
  #define PAIRWISECOMP_LE PairwiseIntLessEqual
  #define PAIRWISECOMP_GE PairwiseIntGreaterEqual
  #define SEQSEQ_EQ       SeqSeqIntEqual
  #define SEQSEQ_LT       SeqSeqIntLessThan
  #define SEQSEQ_GT       SeqSeqIntGreaterThan
  #define SEQSEQ_LE       SeqSeqIntLessEqual
  #define SEQSEQ_GE       SeqSeqIntGreaterEqual
#elif (defined(EQUALFLOAT) || defined(LESSTHANFLOAT) || defined(GREATERTHANFLOAT) || defined(LESSEQUALFLOAT) || defined(GREATEREQUALFLOAT))
  #define SUPERCLASS TwoSequenceFloat
  #define PRIMITIVE double
  #define NUMERIC
  #define IS_FLOAT
  #define ARRAYCOMPARATOR Global.fuzzy.new DoubleArrayComparatorLexical()
  #define ELEM_MATCH_COMPARE(v1, v2) Global.fuzzy.isElemMatch(v1, v2)
  #define SUBSEQUENCE SubSequenceFloat
  #define BASE_IS_TYPE baseIsFloat()
  #define BASE_IS_SCALAR baseIsFloat()
  #define SEQ_SUBSEQUENCE SequenceFloatSubsequence
  #define PAIRWISECOMP_EQ PairwiseFloatEqual
  #define PAIRWISECOMP_LT PairwiseFloatLessThan
  #define PAIRWISECOMP_GT PairwiseFloatGreaterThan
  #define PAIRWISECOMP_LE PairwiseFloatLessEqual
  #define PAIRWISECOMP_GE PairwiseFloatGreaterEqual
  #define SEQSEQ_EQ       SeqSeqFloatEqual
  #define SEQSEQ_LT       SeqSeqFloatLessThan
  #define SEQSEQ_GT       SeqSeqFloatGreaterThan
  #define SEQSEQ_LE       SeqSeqFloatLessEqual
  #define SEQSEQ_GE       SeqSeqFloatGreaterEqual
#elif (defined(EQUALSTRING) || defined(LESSTHANSTRING) || defined(GREATERTHANSTRING) || defined(LESSEQUALSTRING) || defined(GREATEREQUALSTRING))
  #define SUPERCLASS TwoSequenceString
  #define PRIMITIVE String
  #define IS_STRING
  #define ARRAYCOMPARATOR new ArraysPlume.StringArrayComparatorLexical()
  #define ELEM_MATCH_COMPARE(v1, v2) (ArraysPlume.isSubset(v1, v2) && \
                                      ArraysPlume.isSubset(v2, v1))
  #define SUBSEQUENCE SubSequenceString
  #define BASE_IS_TYPE baseIsString()
  #define BASE_IS_SCALAR baseIsString()
  #define SEQ_SUBSEQUENCE SequenceStringSubsequence
  #if 0
  // #define PAIRWISECOMP_EQ PairwiseStringEqual
  // #define PAIRWISECOMP_LT PairwiseStringLessThan
  // #define PAIRWISECOMP_GT PairwiseStringGreaterThan
  // #define PAIRWISECOMP_LE PairwiseStringLessEqual
  // #define PAIRWISECOMP_GE PairwiseStringGreaterEqual
  #endif
  #define SEQCOMPAR_EQ SeqSeqStringEqual
  #define SEQCOMPAR_LT SeqSeqStringLessThan
  #define SEQCOMPAR_GT SeqSeqStringGreaterThan
  #define SEQCOMPAR_LE SeqSeqStringLessEqual
  #define SEQCOMPAR_GE SeqSeqStringGreaterEqual
#endif

#if defined(EQUAL)
  #define SEQSEQINTEQUAL SeqSeqIntEqual
  #define SEQSEQINTEQUALstring "SeqSeqIntEqual"
  #define COMPAREQUALS(a,b) (a == b)
  #define EQUALShtml ==
  #define EQUALScode ==
  #define EQUALSstring "=="
  #define EQUALSstringDBC "pairwiseEqual"
  #define PAIRWISEINTEQUAL PairwiseIntEqual
#elif defined(EQUALFLOAT)
  #define SEQSEQINTEQUAL SeqSeqFloatEqual
  #define SEQSEQINTEQUALstring "SeqSeqFloatEqual"
  #define COMPAREQUALS(a,b) (a == b)
  #define EQUALShtml ==
  #define EQUALScode ==
  #define EQUALSstring "=="
  #define EQUALSstringDBC "pairwiseEqual"
  #define PAIRWISEINTEQUAL PairwiseFloatEqual
#elif defined(EQUALSTRING)
  #define SEQSEQINTEQUAL SeqSeqStringEqual
  #define SEQSEQINTEQUALstring "SeqSeqStringEqual"
  #define COMPAREQUALS(a,b) (a == b)
  #define EQUALShtml ==
  #define EQUALScode ==
  #define EQUALSstring "=="
  #define EQUALSstringDBC "pairwiseEqual"
  // #define PAIRWISEINTEQUAL PairwiseStringEqual
#elif defined(LESSTHAN)
  #define SEQSEQINTEQUAL SeqSeqIntLessThan
  #define SEQSEQINTEQUALstring "SeqSeqIntLessThan"
  #define SEQCOMPAR_SWAP SeqSeqIntGreaterThan
  #define COMPAREQUALS(a,b) (a < b)
  #define EQUALShtml &lt;
  #define EQUALScode <
  #define EQUALSstring "<"
  #define EQUALSstringDBC "lexLT"
  #define PAIRWISEINTEQUAL PairwiseIntLessThan
#elif defined(LESSTHANFLOAT)
  #define SEQSEQINTEQUAL SeqSeqFloatLessThan
  #define SEQSEQINTEQUALstring "SeqSeqFloatLessThan"
  #define SEQCOMPAR_SWAP SeqSeqFloatGreaterThan
  #define COMPAREQUALS(a,b) (a < b)
  #define EQUALShtml &lt;
  #define EQUALScode <
  #define EQUALSstring "<"
  #define EQUALSstringDBC "lexLT"
  #define PAIRWISEINTEQUAL PairwiseFloatLessThan
#elif defined(LESSTHANSTRING)
  #define SEQSEQINTEQUAL SeqSeqStringLessThan
  #define SEQSEQINTEQUALstring "SeqSeqStringLessThan"
  #define SEQCOMPAR_SWAP SeqSeqStringGreaterThan
  #define COMPAREQUALS(a,b) (a < b)
  #define EQUALShtml &lt;
  #define EQUALScode <
  #define EQUALSstring "<"
  #define EQUALSstringDBC "lexLT"
  // #define PAIRWISEINTEQUAL PairwiseStringLessThan
#elif defined(GREATERTHAN)
  #define SEQSEQINTEQUAL SeqSeqIntGreaterThan
  #define SEQSEQINTEQUALstring "SeqSeqIntGreaterThan"
  #define SEQCOMPAR_SWAP SeqSeqIntLessThan
  #define COMPAREQUALS(a,b) (a > b)
  #define EQUALShtml &gt;
  #define EQUALScode >
  #define EQUALSstring ">"
  #define EQUALSstringDBC "lexGT"
  #define PAIRWISEINTEQUAL PairwiseIntGreaterThan
#elif defined(GREATERTHANFLOAT)
  #define SEQSEQINTEQUAL SeqSeqFloatGreaterThan
  #define SEQSEQINTEQUALstring "SeqSeqFloatGreaterThan"
  #define SEQCOMPAR_SWAP SeqSeqFloatLessThan
  #define COMPAREQUALS(a,b) (a > b)
  #define EQUALShtml &gt;
  #define EQUALScode >
  #define EQUALSstring ">"
  #define EQUALSstringDBC "lexGT"
  #define PAIRWISEINTEQUAL PairwiseFloatGreaterThan
#elif defined(GREATERTHANSTRING)
  #define SEQSEQINTEQUAL SeqSeqStringGreaterThan
  #define SEQSEQINTEQUALstring "SeqSeqStringGreaterThan"
  #define SEQCOMPAR_SWAP SeqSeqStringLessThan
  #define COMPAREQUALS(a,b) (a > b)
  #define EQUALShtml &gt;
  #define EQUALScode >
  #define EQUALSstring ">"
  #define EQUALSstringDBC "lexGT"
  // #define PAIRWISEINTEQUAL PairwiseStringGreaterThan
#elif defined(LESSEQUAL)
  #define SEQSEQINTEQUAL SeqSeqIntLessEqual
  #define SEQSEQINTEQUALstring "SeqSeqIntLessEqual"
  #define SEQCOMPAR_SWAP SeqSeqIntGreaterEqual
  #define COMPAREQUALS(a,b) (a <= b)
  #define EQUALShtml &le;
  #define EQUALScode <=
  #define EQUALSstring "<="
  #define EQUALSstringDBC "lexLTE"
  #define PAIRWISEINTEQUAL PairwiseIntLessEqual
#elif defined(LESSEQUALFLOAT)
  #define SEQSEQINTEQUAL SeqSeqFloatLessEqual
  #define SEQSEQINTEQUALstring "SeqSeqFloatLessEqual"
  #define SEQCOMPAR_SWAP SeqSeqFloatGreaterEqual
  #define COMPAREQUALS(a,b) (a <= b)
  #define EQUALShtml &le;
  #define EQUALScode <=
  #define EQUALSstring "<="
  #define EQUALSstringDBC "lexLTE"
  #define PAIRWISEINTEQUAL PairwiseFloatLessEqual
#elif defined(LESSEQUALSTRING)
  #define SEQSEQINTEQUAL SeqSeqStringLessEqual
  #define SEQSEQINTEQUALstring "SeqSeqStringLessEqual"
  #define SEQCOMPAR_SWAP SeqSeqStringGreaterEqual
  #define COMPAREQUALS(a,b) (a <= b)
  #define EQUALShtml &le;
  #define EQUALScode <=
  #define EQUALSstring "<="
  #define EQUALSstringDBC "lexLTE"
  // #define PAIRWISEINTEQUAL PairwiseStringLessEqual
#elif defined(GREATEREQUAL)
  #define SEQSEQINTEQUAL SeqSeqIntGreaterEqual
  #define SEQSEQINTEQUALstring "SeqSeqIntGreaterEqual"
  #define SEQCOMPAR_SWAP SeqSeqIntLessEqual
  #define COMPAREQUALS(a,b) (a >= b)
  #define EQUALShtml &ge;
  #define EQUALScode >=
  #define EQUALSstring ">="
  #define EQUALSstringDBC "lexGTE"
  #define PAIRWISEINTEQUAL PairwiseIntGreaterEqual
#elif defined(GREATEREQUALFLOAT)
  #define SEQSEQINTEQUAL SeqSeqFloatGreaterEqual
  #define SEQSEQINTEQUALstring "SeqSeqFloatGreaterEqual"
  #define SEQCOMPAR_SWAP SeqSeqFloatLessEqual
  #define COMPAREQUALS(a,b) (a >= b)
  #define EQUALShtml &ge;
  #define EQUALScode >=
  #define EQUALSstring ">="
  #define EQUALSstringDBC "lexGTE"
  #define PAIRWISEINTEQUAL PairwiseFloatGreaterEqual
#elif defined(GREATEREQUALSTRING)
  #define SEQSEQINTEQUAL SeqSeqStringGreaterEqual
  #define SEQSEQINTEQUALstring "SeqSeqStringGreaterEqual"
  #define SEQCOMPAR_SWAP SeqSeqStringLessEqual
  #define COMPAREQUALS(a,b) (a >= b)
  #define EQUALShtml &ge;
  #define EQUALScode >=
  #define EQUALSstring ">="
  #define EQUALSstringDBC "lexGTE"
  // #define PAIRWISEINTEQUAL PairwiseStringGreaterEqual
#endif

#if defined (EQUAL) || defined(EQUALFLOAT) || defined (EQUALSTRING)
  #define EQUAL_OP
#elif defined (LESSTHAN) || defined (LESSTHANFLOAT) || defined (LESSTHANSTRING)
  #define LESSTHAN_OP
#elif defined (GREATERTHAN) || defined (GREATERTHANFLOAT) || defined (GREATERTHANSTRING)
  #define GREATERTHAN_OP
#elif defined (LESSEQUAL) || defined (LESSEQUALFLOAT) || defined(LESSEQUALSTRING)
  #define LESSEQUAL_OP
#elif defined (GREATEREQUAL) || defined (GREATEREQUALFLOAT) || defined(GREATEREQUALSTRING)
  #define GREATEREQUAL_OP
#endif

// ***** This file is automatically generated from SeqComparison.java.jpp

package daikon.inv.binary.twoSequence;

import daikon.*;
import daikon.Quantify.QuantFlags;
import daikon.derive.binary.*;
import daikon.inv.*;
import daikon.suppress.*;
import java.util.*;
import java.util.logging.Logger;
import org.checkerframework.checker.interning.qual.Interned;
import org.checkerframework.checker.lock.qual.GuardSatisfied;
import org.checkerframework.checker.nullness.qual.Nullable;
import org.checkerframework.dataflow.qual.Pure;
import org.checkerframework.dataflow.qual.SideEffectFree;
import org.plumelib.util.ArraysPlume;
import org.plumelib.util.Intern;
import typequals.prototype.qual.NonPrototype;
import typequals.prototype.qual.Prototype;

/**
 * Represents invariants between two sequences of PRIMITIVE values. If order matters for each
 * variable (which it does by default), then the sequences are compared lexically. Prints as
 * {@code x[] EQUALScode y[] lexically}.
 *
#if (defined(EQUAL) || defined(EQUALFLOAT) || defined(EQUALSTRING))
 * <p>If order doesn't matter for each variable, then the sequences are compared to see if they are
 * set equivalent. Prints as {@code x[] == y[]}.
 *
#endif
 * <p>If the auxiliary information (e.g., order matters) doesn't match between two variables, then
 * this invariant cannot apply to those variables.
 */
public class SEQSEQINTEQUAL extends SUPERCLASS
#if defined (EQUAL) || defined(EQUALFLOAT) || defined (EQUALSTRING)
  implements EqualityComparison
#endif
{
  // We are Serializable, so we specify a version to allow changes to
  // method signatures without breaking serialization.  If you add or
  // remove fields, you should change this number to the current date.
  static final long serialVersionUID = 20030822L;

  // Variables starting with dkconfig_ should only be set via the
  // daikon.config.Configuration interface.
  /** Boolean. True iff SEQSEQINTEQUAL invariants should be considered. */
  public static boolean dkconfig_enabled = Invariant.invariantEnabledDefault;

  /** Debugging logger. */
  static final Logger debug = Logger.getLogger("daikon.inv.binary.twoSequence." + SEQSEQINTEQUALstring);

  static Comparator<PRIMITIVE[]> comparator = ARRAYCOMPARATOR;

  boolean orderMatters;

  protected SEQSEQINTEQUAL(PptSlice ppt, boolean order) {
    super(ppt);
    orderMatters = order;
  }

  protected @Prototype SEQSEQINTEQUAL(boolean order) {
    super();
    orderMatters = order;
  }

  #if !(defined(EQUAL) || defined(EQUALFLOAT) || defined(EQUALSTRING))
  protected SEQSEQINTEQUAL(SEQCOMPAR_SWAP seq_swap) {
    super(seq_swap.ppt);
    orderMatters = seq_swap.orderMatters;
  }

  #endif

  private static @Prototype SEQSEQINTEQUAL proto = new @Prototype SEQSEQINTEQUAL(true);

  /** Returns the prototype invariant for SEQSEQINTEQUAL */
  public static @Prototype SEQSEQINTEQUAL get_proto() {
    return proto;
  }

  /** Returns whether or not this invariant is enabled. */
  @Override
  public boolean enabled() {
    return dkconfig_enabled;
  }

  /** Non-Equal SeqComparison is only valid on integral types. */
  @Override
  public boolean instantiate_ok(VarInfo[] vis) {

    if (!valid_types(vis)) {
      return false;
    }

    #if !(defined(EQUAL) || defined(EQUALFLOAT) || defined(EQUALSTRING))
      VarInfo var1 = vis[0];
      VarInfo var2 = vis[1];
      ProglangType type1 = var1.type;
      ProglangType type2 = var2.type;

      // This intentonally checks dimensions(), not pseudoDimensions.
      boolean only_eq =
        (!((type1.dimensions() == 1)
           && type1.BASE_IS_TYPE
           && (type2.dimensions() == 1)
           && type2.BASE_IS_TYPE));
      if (only_eq) {
        return false;
      }

      // non equality comparisons don't make sense if the arrays aren't ordered
      if (!var1.aux.hasOrder() || !var2.aux.hasOrder()) {
        return false;
      }

    #endif

    return true;
  }

  /** Instantiates the invariant on the specified slice. */
  @Override
  protected SEQSEQINTEQUAL instantiate_dyn(@Prototype SEQSEQINTEQUAL this, PptSlice slice) {
    boolean has_order = slice.var_infos[0].aux.hasOrder() && slice.var_infos[1].aux.hasOrder();
    return new SEQSEQINTEQUAL(slice, has_order);
  }

  @Override
  protected Invariant resurrect_done_swapped() {
    #if (defined(EQUAL) || defined(EQUALFLOAT) || defined(EQUALSTRING))
    return this;
    #else
    return new SEQCOMPAR_SWAP(this);
    #endif
  }

  @Override
  public String repr(@GuardSatisfied SEQSEQINTEQUAL this) {
    return SEQSEQINTEQUALstring + varNames() + ": ,orderMatters=" + orderMatters
      + ",enoughSamples=" + enoughSamples()
      ;
  }

  @SideEffectFree
  @Override
  public String format_using(@GuardSatisfied SEQSEQINTEQUAL this, OutputFormat format) {
    // System.out.println("Calling " + SEQSEQINTEQUALstring + ".format for: " + repr());

    if (format == OutputFormat.SIMPLIFY) {
      return format_simplify();
    }

    if (format == OutputFormat.DAIKON) {
      String name1 = var1().name_using(format);
      String name2 = var2().name_using(format);
      #if (! (defined(EQUAL) || defined(EQUALFLOAT) || defined(EQUALSTRING)))
      String lexically = (var1().aux.hasOrder() ? " (lexically)" : "");
      return name1 + " " + EQUALSstring + " " + name2 + lexically;
      #else
      return name1 + " " + EQUALSstring + " " + name2;
      #endif
    }

    if (format == OutputFormat.CSHARPCONTRACT) {
      #if (! (defined(EQUAL) || defined(EQUALFLOAT) || defined(EQUALSTRING)))
      if (var1().aux.hasOrder()) {
        String name1 = var1().csharp_collection_string();
        String name2 = var2().csharp_collection_string();
        String dbc = "L" + EQUALSstringDBC.substring(1);
        return name1 + "." + dbc + "(" + name2 + ")";
      } else {
        return "\"SeqComparison.java.jpp: sequence comparison does not apply to unordered collections unimplemented\" != null)"; // interned
      }
      #else

      String[] split1 = var1().csharp_array_split();
      String[] split2 = var2().csharp_array_split();
      // Pairwise equal.
      return "Contract.ForAll(0, " + split1[0] + ".Count(), i => " + split1[0] + "[i]" + split1[1] + ".Equals(" + split2[0] + "[i]" + split2[1] + "))";
      #endif

    }

    if (format.isJavaFamily()) {
      String name1 = var1().name_using(format);
      String name2 = var2().name_using(format);
      #if (! (defined(EQUAL) || defined(EQUALFLOAT) || defined(EQUALSTRING)))
      return "daikon.Quant."
        + (var1().aux.hasOrder() ? EQUALSstringDBC : "setEqual" )
        + "("
        + name1
        + ", "
        + name2
        + ")";
      #else
      return "daikon.Quant." + EQUALSstringDBC + "(" + name1 + ", " + name2 + ")";
      #endif
    }

    return format_unimplemented(format);
  }

  public String format_simplify(@GuardSatisfied SEQSEQINTEQUAL this) {
    if (Invariant.dkconfig_simplify_define_predicates) {
      return format_simplify_defined();
    } else {
      return format_simplify_explicit();
    }
  }

  private String format_simplify_defined(@GuardSatisfied SEQSEQINTEQUAL this) {
    String[] var1_name = var1().simplifyNameAndBounds();
    String[] var2_name = var2().simplifyNameAndBounds();
    if (var1_name == null || var2_name == null) {
      return String.format("%s.format_simplify_defined(%s): var1_name=%s, var2_name=%s, for %s",
                           getClass().getSimpleName(), this,
                           Arrays.toString(var1_name), Arrays.toString(var2_name), format());
    }
    return "(|lexical-" + EQUALSstring + "| "
      + var1_name[0] + " " + var1_name[1] + " " + var1_name[2] + " "
      + var2_name[0] + " " + var2_name[1] + " " + var2_name[2] + ")";
  }

  private String format_simplify_explicit(@GuardSatisfied SEQSEQINTEQUAL this) {
    #if (defined(EQUAL) || defined(EQUALSTRING) || defined(EQUALFLOAT))
      // A simple case: if two sequences are lexically equal iff they
      // are elementwise equal.
      String[] form = VarInfo.simplify_quantify(QuantFlags.element_wise(),
                                                 var1(), var2());
      return form[0]
        + "(EQ " + form[1] + " " + form[2] + ")" + form[3];
    #else
      String classname = this.getClass().toString().substring(6);
      return "warning: method " + classname
        + ".format_simplify_explicit() needs to be implemented: " + format();
    #endif
  }

  @Override
  public InvariantStatus check_modified(
      PRIMITIVE @Interned [] v1, PRIMITIVE @Interned [] v2, int count) {
    /// This does not do the right thing; I really want to avoid comparisons
    /// if one is missing, but not if one is zero-length.
    // // Don't make comparisons with empty arrays.
    // if ((v1.length == 0) || (v2.length == 0)) {
    //   return;
    // }

    int comparison = 0;
    if (orderMatters) {
      // Standard element wise comparison
       comparison = comparator.compare(v1, v2);
    } else {
      // Do a double subset comparison
      comparison = ELEM_MATCH_COMPARE(v1, v2) ? 0 : -1;
    }

    if (!COMPAREQUALS(comparison,0) ) {
      return InvariantStatus.FALSIFIED;
    }
    return InvariantStatus.NO_CHANGE;
  }

  @Override
  public InvariantStatus add_modified(PRIMITIVE @Interned [] v1, PRIMITIVE @Interned [] v2, int count) {
    if (logDetail()) {
      log("add_modified (%s, %s)", Arrays.toString(v1), Arrays.toString(v2));
    }
        return check_modified(v1, v2, count);
  }

  @Override
  protected double computeConfidence() {
#if (defined(EQUAL) || defined(EQUALFLOAT) || defined(EQUALSTRING))
    // It's an equality invariant
    if (ppt.num_samples() == 0) {
      return Invariant.CONFIDENCE_UNJUSTIFIED;
    } else {
      return Invariant.CONFIDENCE_JUSTIFIED;
    }
#else
    return 1 - Math.pow(.5, ppt.num_values());
#endif
  }

#if (defined(EQUAL) || defined(EQUALFLOAT) || defined(EQUALSTRING))
  // For Comparison interface
  @Override
  public double eq_confidence() {
      return getConfidence();
  }
#endif

  @Pure
  @Override
  public boolean isSameFormula(Invariant o) {
    return true;
  }

  @Pure
  @Override
  public boolean isExclusiveFormula(Invariant o) {
    return false;
  }

  /**
   * Since this invariant can be a postProcessed equality, we have to handle isObvious especially to
   * avoid circular isObvious relations.
   */
  @Pure
  @Override
  public @Nullable DiscardInfo isObviousStatically_SomeInEquality() {
    if (var1().equalitySet == var2().equalitySet) {
      return isObviousStatically(this.ppt.var_infos);
    } else {
      return super.isObviousStatically_SomeInEquality();
    }
  }

  /**
   * Since this invariant can be a postProcessed equality, we have to handle isObvious especially to
   * avoid circular isObvious relations.
   */
  @Pure
  @Override
  public @Nullable DiscardInfo isObviousDynamically_SomeInEquality() {
    if (logOn()) {
      log("Considering dynamically_someInEquality");
    }
    if (var1().equalitySet == var2().equalitySet) {
      return isObviousDynamically(this.ppt.var_infos);
    } else {
      return super.isObviousDynamically_SomeInEquality();
    }
  }

  @Pure
  @Override
  public @Nullable DiscardInfo isObviousStatically(VarInfo[] vis) {
    #ifdef NUMERIC
      VarInfo var1 = vis[0];
      VarInfo var2 = vis[1];
      DiscardInfo di;
      di = SUBSEQUENCE.isObviousSubSequence(this, var1, var2);
      if (di == null) {
        di = SUBSEQUENCE.isObviousSubSequence(this, var2, var1);
      }
      if (di != null) {
        return di;
      }
    #endif
    return super.isObviousStatically(vis);
  }

  @Pure
  @Override
  public @Nullable DiscardInfo isObviousDynamically(VarInfo[] vis) {
    DiscardInfo super_result = super.isObviousDynamically(vis);
    if (super_result != null) {
      return super_result;
    }
    assert ppt != null;

    #ifdef NUMERIC

      Debug debug = new Debug(getClass(), ppt, vis);

      if (logOn()) {
        debug.log("Checking IsObviousDynamically");
      }

      // Check to see if the same Pairwise invariant exists
      DiscardInfo di = new DiscardInfo(this, DiscardCode.obvious, "");
      if (ppt.parent.check_implied(di, vis[0], vis[1], PAIRWISEINTEQUAL.get_proto())) {
        di.add_implied_vis(vis);
        return di;
      }

      // If either variable is a subsequence and the original arrays
      // are related elementwise this isn't interesting
      VarInfo v1 = vis[0];
      VarInfo v2 = vis[1];
      VarInfo arr1 = v1;
      VarInfo arr2 = v2;
      if (v1.derived instanceof SEQ_SUBSEQUENCE) {
        arr1 = ((SEQ_SUBSEQUENCE) v1.derived).seqvar();
      }
      if (v2.derived instanceof SEQ_SUBSEQUENCE) {
        arr2 = ((SEQ_SUBSEQUENCE) v2.derived).seqvar();
      }
      if (!isEqual() && ((arr1 != v1) || (arr2 != v2))) {
        VarInfo[] avis = new VarInfo [] {arr1, arr2};
        PptSlice slice = this.ppt.parent.findSlice_unordered(avis);
        if (slice != null) {
          PAIRWISECOMP_EQ picEQ = PAIRWISECOMP_EQ.find(slice);
          if (picEQ != null) {
            return new DiscardInfo(this, DiscardCode.obvious, "Implied by " + picEQ.format());
          }
          PAIRWISECOMP_LT picLT = PAIRWISECOMP_LT.find(slice);
          if (picLT != null) {
            return new DiscardInfo(this, DiscardCode.obvious, "Implied by " + picLT.format());
          }
          PAIRWISECOMP_GT picGT = PAIRWISECOMP_GT.find(slice);
          if (picGT != null) {
            return new DiscardInfo(this, DiscardCode.obvious, "Implied by " + picGT.format());
          }
          PAIRWISECOMP_LE picLE = PAIRWISECOMP_LE.find(slice);
          if (picLE != null) {
            return new DiscardInfo(this, DiscardCode.obvious, "Implied by " + picLE.format());
          }
          PAIRWISECOMP_GE picGE = PAIRWISECOMP_GE.find(slice);
          if (picGE != null) {
            return new DiscardInfo(this, DiscardCode.obvious, "Implied by " + picGE.format());
          }
        }
      }

      // Similarly, if either variable is a subsequence and the original
      // arrays are related lexically this isn't interesting
      if ((arr1 != v1) || (arr2 != v2)) {
        if (arr1 == arr2) {
          debug.log("Obvious Dynamic- subsequence from same array");
          return new DiscardInfo(this, DiscardCode.obvious, "Supersequences are related lexically");
        }
        VarInfo[] avis = {arr1, arr2};
        debug.log("looking for " + avis[0].name() + " " + avis[1].name());
        PptSlice slice = this.ppt.parent.findSlice_unordered(avis);
        debug.log("Found ppt " + slice);
        if (slice != null) {
          for (Invariant inv : slice.invs) {
            debug.log("-- invariant " + inv.format());
          }
          Invariant inv;
          inv = SEQSEQ_EQ.find(slice);
          if (inv != null) {
            if (logOn()) {
              debug.log("Obvious Dynamic from " + inv.format() + "(" + inv.getClass() + ")");
            }
            return new DiscardInfo(this, DiscardCode.obvious, "Implied by " + inv.format());
          }
          inv = SEQSEQ_LT.find(slice);
          if (inv != null) {
            if (logOn()) {
              debug.log("Obvious Dynamic from " + inv.format() + "(" + inv.getClass() + ")");
            }
            return new DiscardInfo(this, DiscardCode.obvious, "Implied by " + inv.format());
          }
          inv = SEQSEQ_GT.find(slice);
          if (inv != null) {
            if (logOn()) {
              debug.log("Obvious Dynamic from " + inv.format() + "(" + inv.getClass() + ")");
            }
            return new DiscardInfo(this, DiscardCode.obvious, "Implied by " + inv.format());
          }
          inv = SEQSEQ_LE.find(slice);
          if (inv != null) {
            if (logOn()) {
              debug.log("Obvious Dynamic from " + inv.format() + "(" + inv.getClass() + ")");
            }
            return new DiscardInfo(this, DiscardCode.obvious, "Implied by " + inv.format());
          }
          inv = SEQSEQ_GE.find(slice);
          if (inv != null) {
            if (logOn()) {
              debug.log("Obvious Dynamic from " + inv.format() + "(" + inv.getClass() + ")");
            }
            return new DiscardInfo(this, DiscardCode.obvious, "Implied by " + inv.format());
          }
        }
      }

      // Check to see if these variables are obviously related
      if (v1.isDerived() || v2.isDerived()) {
        if (SUBSEQUENCE.isObviousSubSequenceDynamically(this, v1, v2)
          || SUBSEQUENCE.isObviousSubSequenceDynamically(this, v2, v1)) {
          if (logOn()) {
            debug.log("Obvious SubSequence Dynamically");
          }
          assert ppt != null;
          return new DiscardInfo(
              this,
              DiscardCode.obvious,
              "Both vars are derived and one is a subsequence of the other");
        }
      }

    #endif
    return null;
  }

  @Override
  public void repCheck() {
    super.repCheck();
    /*
      This code is no longer needed now that the can_be_x's are gone
    if (!(this.can_be_eq || this.can_be_lt || this.can_be_gt)
        && ppt.num_samples() != 0) {
      System.err.println(this.repr());
      System.err.println(this.ppt.num_samples());
      throw new Error();
    }
    */
  }

  @Pure
  public boolean isEqual() {
    #if (defined(EQUAL) || defined(EQUALFLOAT) || defined(EQUALSTRING))
    return true;
    #else
    return false;
    #endif
  }

  // Look up a previously instantiated invariant.
  public static @Nullable SEQSEQINTEQUAL find(PptSlice ppt) {
    assert ppt.arity() == 2;
    for (Invariant inv : ppt.invs) {
      if (inv instanceof SEQSEQINTEQUAL) {
        return (SEQSEQINTEQUAL) inv;
      }
    }
    return null;
  }

  /** Returns a list of non-instantiating suppressions for this invariant. */
  @Pure
  @Override
  public @Nullable NISuppressionSet get_ni_suppressions() {
    return suppressions;
  }

  #if defined(PAIRWISEINTEQUAL)
    /** Definition of this invariant (the suppressee) */
    private static NISuppressee suppressee = new NISuppressee(SEQSEQINTEQUAL.class, 2);

    // Suppressor definitions (used in suppressions below)
    private static NISuppressor v1_pw_v2 = new NISuppressor(0, 1, PAIRWISEINTEQUAL.class);

    private static NISuppressionSet suppressions =
      new NISuppressionSet(
          new NISuppression[] {
            // pairwise => lexical
            new NISuppression(v1_pw_v2, suppressee),
          });
  #else
    private static @Nullable NISuppressionSet suppressions = null;
  #endif
}
