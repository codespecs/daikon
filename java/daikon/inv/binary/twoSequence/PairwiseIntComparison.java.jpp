#if 0
Do not attempt to compile this file with a Java compiler such as javac.
You first need to preprocess it with cpp, the C preprocessor.
The correct way to build the system is to run 'make'.
#endif

#if !(defined(EQUAL) || defined(LESSTHAN) || defined(LESSEQUAL) || defined(GREATERTHAN) || defined(GREATEREQUAL) || defined(EQUALFLOAT) || defined(LESSTHANFLOAT) || defined(LESSEQUALFLOAT) || defined(GREATERTHANFLOAT) || defined(GREATEREQUALFLOAT) || defined(EQUALSTRING) || defined(LESSTHANSTRING) || defined(LESSEQUALSTRING) || defined(GREATERTHANSTRING) || defined(GREATEREQUALSTRING))
  #error "EQUAL, LESSTHAN, LESSEQUAL, GREATERTHAN, GREATEREQUAL, EQUALFLOAT, LESSTHANFLOAT, LESSEQUALFLOAT, GREATERTHANFLOAT, GREATEREQUALFLOAT, EQUALSTRING, LESSTHANStRING, LESSEQUALSTRING GREATERTHANSTRING, or GREATEREQUALSTRING must be defined"
#endif

#if (defined(EQUAL) || defined(LESSTHAN) || defined(LESSEQUAL) || defined(GREATERTHAN) || defined(GREATEREQUAL))
  #define SUPERCLASS TwoSequence
  #define PRIMITIVE long
  #define ELEMENTISTYPE elementIsIntegral()
  #define BASE_IS_SCALAR baseIsScalar()
  #define SUBSEQUENCE SubSequence
  #define SEQ_SUBSEQUENCE SequenceScalarSubsequence
  #define EQUAL_CLASS PairwiseIntEqual
  #define GREATER_THAN_CLASS PairwiseIntGreaterThan
  #define LESS_THAN_CLASS PairwiseIntLessThan
#elif (defined(EQUALFLOAT) || defined(LESSTHANFLOAT) || defined(LESSEQUALFLOAT) || defined(GREATERTHANFLOAT) || defined(GREATEREQUALFLOAT))
  #define SUPERCLASS TwoSequenceFloat
  #define PRIMITIVE double
  #define ELEMENTISTYPE elementIsFloat()
  #define BASE_IS_SCALAR baseIsFloat()
  #define SUBSEQUENCE SubSequenceFloat
  #define SEQ_SUBSEQUENCE SequenceFloatSubsequence
  #define EQUAL_CLASS PairwiseFloatEqual
  #define GREATER_THAN_CLASS PairwiseFloatGreaterThan
  #define LESS_THAN_CLASS PairwiseFloatLessThan
  #elif (defined(EQUALSTRING) || defined(LESSTHANSTRING) || defined(LESSEQUALSTRING) || defined(GREATERTHANSTRING) || defined(GREATEREQUALSTRING))
  #define SUPERCLASS TwoSequenceString
  #define PRIMITIVE String
  #define ELEMENTISTYPE elementIsString()
  #define BASE_IS_SCALAR baseIsString()
  #define SUBSEQUENCE SubSequenceString
  #define SEQ_SUBSEQUENCE SequenceStringSubsequence
  #define EQUAL_CLASS PairwiseStringEqual
  #define GREATER_THAN_CLASS PairwiseStringGreaterThan
  #define LESS_THAN_CLASS PairwiseStringLessThan

#endif

#if defined(EQUAL)
  #define PAIRWISEINTEQUAL PairwiseIntEqual
  #define PAIRWISEINTEQUALstring "PairwiseIntEqual"
  #define EQUALS(a,b) (a == b)
  #define EQUALShtml ==
  #define EQUALSstring "=="
  #define EQUALSstringDBC "pairwiseEqual"
  #define EQUALSSIMPLIFYstring "EQ"
#elif defined(EQUALFLOAT)
  #define PAIRWISEINTEQUAL PairwiseFloatEqual
  #define PAIRWISEINTEQUALstring "PairwiseFloatEqual"
  #define EQUALS(a,b) (Global.fuzzy.eq (a, b))
  #define EQUALShtml ==
  #define EQUALSstring "=="
  #define EQUALSstringDBC "pairwiseEqual"
  #define EQUALSSIMPLIFYstring "EQ"
#elif defined(EQUALSTRING)
  #define PAIRWISEINTEQUAL PairwiseStringEqual
  #define PAIRWISEINTEQUALstring "PairwiseStringEqual"
  #define EQUALS(a,b) (a != null && b!= null && a.equals(b))
  #define EQUALShtml ==
  #define EQUALSstring "=="
  #define EQUALSstringDBC "pairwiseEqual"
  #define EQUALSSIMPLIFYstring "EQ"
#elif defined(LESSTHAN)
  #define PAIRWISEINTEQUAL PairwiseIntLessThan
  #define PAIRWISEINTEQUAL_SWAP PairwiseIntGreaterThan
  #define PAIRWISEINTEQUALstring "PairwiseIntLessThan"
  #define EQUALS(a,b) (a < b)
  #define EQUALShtml &lt;
  #define EQUALSstring "<"
  #define EQUALSstringDBC "pairwiseLT"
  #define EQUALSSIMPLIFYstring "<"
#elif defined(LESSTHANFLOAT)
  #define PAIRWISEINTEQUAL PairwiseFloatLessThan
  #define PAIRWISEINTEQUAL_SWAP PairwiseFloatGreaterThan
  #define PAIRWISEINTEQUALstring "PairwiseFloatLessThan"
  #define EQUALS(a,b) (Global.fuzzy.lt (a, b))
  #define EQUALShtml &lt;
  #define EQUALSstring "<"
  #define EQUALSstringDBC "pairwiseLT"
  #define EQUALSSIMPLIFYstring "<"
#elif defined(LESSTHANSTRING)
  #define PAIRWISEINTEQUAL PairwiseStringLessThan
  #define PAIRWISEINTEQUAL_SWAP PairwiseStringGreaterThan
  #define PAIRWISEINTEQUALstring "PairwiseStringLessThan"
  #define EQUALS(a,b) (a != null && b != null && a.compareTo(b) < 0)
  #define EQUALShtml &lt;
  #define EQUALSstring "<"
  #define EQUALSstringDBC "pairwiseLT"
  #define EQUALSSIMPLIFYstring "<"
#elif defined(LESSEQUAL)
  #define PAIRWISEINTEQUAL PairwiseIntLessEqual
  #define PAIRWISEINTEQUAL_SWAP PairwiseIntGreaterEqual
  #define PAIRWISELT_SUPP PairwiseIntLessThan
  #define PAIRWISEEQ_SUPP PairwiseIntEqual
  #define PAIRWISEINTEQUALstring "PairwiseIntLessEqual"
  #define EQUALS(a,b) (a <= b)
  #define EQUALShtml &le;
  #define EQUALSstring "<="
  #define EQUALSstringDBC "pairwiseLTE"
  #define EQUALSSIMPLIFYstring "<="
#elif defined(LESSEQUALFLOAT)
  #define PAIRWISEINTEQUAL PairwiseFloatLessEqual
  #define PAIRWISEINTEQUAL_SWAP PairwiseFloatGreaterEqual
  #define PAIRWISELT_SUPP PairwiseFloatLessThan
  #define PAIRWISEEQ_SUPP PairwiseFloatEqual
  #define PAIRWISEINTEQUALstring "PairwiseFloatLessEqual"
  #define EQUALS(a,b) (Global.fuzzy.lte (a, b))
  #define EQUALShtml &le;
  #define EQUALSstring "<="
  #define EQUALSstringDBC "pairwiseLTE"
  #define EQUALSSIMPLIFYstring "<="
#elif defined(LESSEQUALSTRING)
  #define PAIRWISEINTEQUAL PairwiseStringLessEqual
  #define PAIRWISEINTEQUAL_SWAP PairwiseStringGreaterEqual
  #define PAIRWISELT_SUPP PairwiseStringLessThan
  #define PAIRWISEEQ_SUPP PairwiseStringEqual
  #define PAIRWISEINTEQUALstring "PairwiseStringLessEqual"
  #define EQUALS(a,b) (a != null && b != null && a.compareTo (b) <= 0)
  #define EQUALShtml &le;
  #define EQUALSstring "<="
  #define EQUALSstringDBC "pairwiseLTE"
  #define EQUALSSIMPLIFYstring "<="
#elif defined(GREATERTHAN)
  #define PAIRWISEINTEQUAL PairwiseIntGreaterThan
  #define PAIRWISEINTEQUAL_SWAP PairwiseIntLessThan
  #define PAIRWISEINTEQUALstring "PairwiseIntGreaterThan"
  #define EQUALS(a,b) (a > b)
  #define EQUALShtml &gt;
  #define EQUALSstring ">"
  #define EQUALSstringDBC "pairwiseGT"
  #define EQUALSSIMPLIFYstring ">"
#elif defined(GREATERTHANFLOAT)
  #define PAIRWISEINTEQUAL PairwiseFloatGreaterThan
  #define PAIRWISEINTEQUAL_SWAP PairwiseFloatLessThan
  #define PAIRWISEINTEQUALstring "PairwiseFloatGreaterThan"
  #define EQUALS(a,b) (Global.fuzzy.gt (a, b))
  #define EQUALShtml &gt;
  #define EQUALSstring ">"
  #define EQUALSstringDBC "pairwiseGT"
  #define EQUALSSIMPLIFYstring ">"
#elif defined(GREATERTHANSTRING)
  #define PAIRWISEINTEQUAL PairwiseStringGreaterThan
  #define PAIRWISEINTEQUAL_SWAP PairwiseStringLessThan
  #define PAIRWISEINTEQUALstring "PairwiseStringGreaterThan"
  #define EQUALS(a,b) (a != null && b != null && a.compareTo(b) > 0)
  #define EQUALShtml &gt;
  #define EQUALSstring ">"
  #define EQUALSstringDBC "pairwiseGT"
  #define EQUALSSIMPLIFYstring ">"
#elif defined(GREATEREQUAL)
  #define PAIRWISEINTEQUAL PairwiseIntGreaterEqual
  #define PAIRWISEINTEQUAL_SWAP PairwiseIntLessEqual
  #define PAIRWISELT_SUPP PairwiseIntGreaterThan
  #define PAIRWISEEQ_SUPP PairwiseIntEqual
  #define PAIRWISEINTEQUALstring "PairwiseIntGreaterEqual"
  #define EQUALS(a,b) (a >= b)
  #define EQUALShtml &ge;
  #define EQUALSstring ">="
  #define EQUALSstringDBC "pairwiseGTE"
  #define EQUALSSIMPLIFYstring ">="
#elif defined(GREATEREQUALFLOAT)
  #define PAIRWISEINTEQUAL PairwiseFloatGreaterEqual
  #define PAIRWISEINTEQUAL_SWAP PairwiseFloatLessEqual
  #define PAIRWISELT_SUPP PairwiseFloatGreaterThan
  #define PAIRWISEEQ_SUPP PairwiseFloatEqual
  #define PAIRWISEINTEQUALstring "PairwiseFloatGreaterEqual"
  #define EQUALS(a,b) (Global.fuzzy.gte (a, b))
  #define EQUALShtml &ge;
  #define EQUALSstring ">="
  #define EQUALSstringDBC "pairwiseGTE"
  #define EQUALSSIMPLIFYstring ">="
#elif defined(GREATEREQUALSTRING)
  #define PAIRWISEINTEQUAL PairwiseStringGreaterEqual
  #define PAIRWISEINTEQUAL_SWAP PairwiseStringLessEqual
  #define PAIRWISELT_SUPP PairwiseStringGreaterThan
  #define PAIRWISEEQ_SUPP PairwiseStringEqual
  #define PAIRWISEINTEQUALstring "PairwiseStringGreaterEqual"
  #define EQUALS(a,b) (a != null && b != null && a.compareTo(b) >= 0)
  #define EQUALShtml &ge;
  #define EQUALSstring ">="
  #define EQUALSstringDBC "pairwiseGTE"
  #define EQUALSSIMPLIFYstring ">="
#else
  #error "EQUAL, LESSTHAN, LESSEQUAL, GREATERTHAN, GREATEREQUAL, EQUALFLOAT, LESSTHANFLOAT, LESSEQUALFLOAT, GREATERTHANFLOAT, GREATEREQUALFLOAT, EQUALSTRING, LESSTHANStRING, LESSEQUALSTRING GREATERTHANSTRING, or GREATEREQUALSTRING must be defined"
#endif

// ***** This file is automatically generated from PairwiseIntComparison.java.jpp

package daikon.inv.binary.twoSequence;

import daikon.*;
import daikon.inv.*;
import daikon.inv.binary.twoScalar.*;
import daikon.derive.binary.*;
import daikon.suppress.*;
import daikon.Quantify.QuantFlags;

import plume.ArraysMDE;
import java.util.Iterator;
import java.util.logging.Logger;
import java.util.logging.Level;

/*>>>
import org.checkerframework.checker.interning.qual.*;
import org.checkerframework.checker.lock.qual.*;
import org.checkerframework.checker.nullness.qual.*;
import org.checkerframework.dataflow.qual.*;
import typequals.*;
*/

/**
 * Represents an invariant between corresponding elements of two
 * sequences of PRIMITIVE values.  The length of the sequences must match for
 * the invariant to hold.  A comparison is made over each
 * <code>(x[i], y[i])</code> pair.
 * Thus, <code>x[0]</code> is compared to <code>y[0]</code>,
 * <code>x[1]</code> to <code>y[1]</code>, and so forth.
 * Prints as <code>x[] EQUALShtml y[]</code>.
 */

public class PAIRWISEINTEQUAL
  extends SUPERCLASS
{
  // We are Serializable, so we specify a version to allow changes to
  // method signatures without breaking serialization.  If you add or
  // remove fields, you should change this number to the current date.
  static final long serialVersionUID = 20030822L;

  /** Debug tracer. */
  public static final Logger debug =
    Logger.getLogger("daikon.inv.binary.twoSequence." + PAIRWISEINTEQUALstring);

  // Variables starting with dkconfig_ should only be set via the
  // daikon.config.Configuration interface.
  /**
   * Boolean.  True iff PairwiseIntComparison invariants should be considered.
   */
  public static boolean dkconfig_enabled = Invariant.invariantEnabledDefault;

  static final boolean debugPairwiseIntComparison = false;

  protected PAIRWISEINTEQUAL(PptSlice ppt) {
    super(ppt);
  }

  protected /*@Prototype*/ PAIRWISEINTEQUAL() {
    super();
  }

  private static /*@Prototype*/ PAIRWISEINTEQUAL proto = new /*@Prototype*/ PAIRWISEINTEQUAL ();

  /** Returns the prototype invariant for PAIRWISEINTEQUAL */
  public static /*@Prototype*/ PAIRWISEINTEQUAL get_proto() {
    return proto;
  }

  /** Returns whether or not this invariant is enabled */
  public boolean enabled() {
    return dkconfig_enabled;
  }

  /** PAIRWISEINTEQUAL is only valid on integral types */
  public boolean instantiate_ok (VarInfo[] vis) {

    if (!valid_types (vis)) {
      return false;
    }

    #if !(defined(EQUAL) || defined(EQUALFLOAT) || defined(EQUALSTRING))
      if (!(vis[0].type.ELEMENTISTYPE && vis[1].type.ELEMENTISTYPE)) {
        return false;
      }
    #endif

    return true;
  }

  /** instantiates the invariant on the specified slice */
  protected PAIRWISEINTEQUAL instantiate_dyn (/*>>> @Prototype PAIRWISEINTEQUAL this,*/ PptSlice slice) {
    PAIRWISEINTEQUAL inv = new PAIRWISEINTEQUAL(slice);
    if (logOn()) {
      inv.log ("instantiate");
    }
    return inv;
  }

  #if !(defined(EQUAL) || defined(EQUALFLOAT) || defined(EQUALSTRING))
  protected PAIRWISEINTEQUAL(PAIRWISEINTEQUAL_SWAP swapped_pic) {
    super(swapped_pic.ppt);
    if (logOn()) {
      log ("Instantiated from resurrect_done_swapped");
    }
  }
  #endif


  /*@Pure*/
  public /*@Nullable*/ DiscardInfo isObviousStatically (VarInfo[] vis) {
    VarInfo var1 = vis[0];
    VarInfo var2 = vis[1];

    DiscardInfo di = null;
    di = SubSequence.isObviousSubSequence(this, var1, var2);
    if (di == null) {
      di = SubSequence.isObviousSubSequence(this, var2, var1);
    }
    if (di != null) {
      Global.implied_noninstantiated_invariants++;
      return di;
    }

    // Don't instantiate if the variables can't have order
    if (!var1.aux.hasOrder() ||
        !var2.aux.hasOrder()) {
      if (debug.isLoggable(Level.FINE)) {
        debug.fine ("Not instantitating for because order has no meaning: " +
                     var1.name() + " and " + var2.name());
      }
      return new DiscardInfo(this, DiscardCode.obvious, "Obvious statically since order has no meaning");
    }

    return super.isObviousStatically (vis);
  }

  /*@Pure*/
  public /*@Nullable*/ DiscardInfo isObviousDynamically (VarInfo[] vis) {
    DiscardInfo super_result = super.isObviousDynamically(vis);
    if (super_result != null) {
      return super_result;
    }

    // Subsequence invariants are implied by the same invariant over
    // the supersequence
    DiscardInfo di = superseq_implies (vis);
    if (di != null) {
      return di;
    }

    return null;

    }

  /**
   * Checks to see if the same invariant exists over supersequences of
   * these variables:
   *
   * <pre>
   *    (A[] op B[]) ^ (i == j)  &rArr; A[i..] op B[j..]
   *    (A[] op B[]) ^ (i == j)  &rArr; A[..i] op B[..j]
   * </pre>
   */
  private /*@Nullable*/ DiscardInfo superseq_implies (VarInfo[] vis) {

    // Make sure the variables are SEQ_SUBSEQUENCE with the same start/end
    VarInfo v1 = vis[0];
    VarInfo v2 = vis[1];
    if (!v1.isDerived() || !(v1.derived instanceof SEQ_SUBSEQUENCE)) {
      return null;
    }
    if (!v2.isDerived() || !(v2.derived instanceof SEQ_SUBSEQUENCE)) {
      return null;
    }
    @SuppressWarnings("nullness") // checker bug: flow
    /*@NonNull*/ SEQ_SUBSEQUENCE der1 = (SEQ_SUBSEQUENCE) v1.derived;
    @SuppressWarnings("nullness") // checker bug: flow
    /*@NonNull*/ SEQ_SUBSEQUENCE der2 = (SEQ_SUBSEQUENCE) v2.derived;
    if ((der1.from_start != der2.from_start)
        || (der1.index_shift != der2.index_shift))
      return null;

    // Make sure the subscripts are equal
    DiscardInfo di = new DiscardInfo (this, DiscardCode.obvious, "");
    if (!ppt.parent.check_implied_canonical (di, der1.sclvar(), der2.sclvar(),
                                             IntEqual.get_proto()))
      return null;

    // See if the super-sequences have the same invariant
    if (!ppt.parent.check_implied_canonical (di, der1.seqvar(), der2.seqvar(),
                                             PAIRWISEINTEQUAL.get_proto()))
      return null;

    // Add in the vis variables to di reason (if they are different)
    di.add_implied_vis (vis);
    return di;
  }

  protected Invariant resurrect_done_swapped() {
    #if (defined(EQUAL) || defined(EQUALFLOAT) || defined(EQUALSTRING))
      return this;
    #else
      return new PAIRWISEINTEQUAL_SWAP(this);
    #endif
  }

  #if (defined(EQUAL) || defined(EQUALFLOAT) || defined(EQUALSTRING))
    /*@Pure*/
    public boolean is_symmetric() {
    return true;
  }

#else

  /**
   * Returns the class that corresponds to this class with its variable
   * order swapped.
   */
  public static Class<PAIRWISEINTEQUAL_SWAP> swap_class () {
    return PAIRWISEINTEQUAL_SWAP.class;
  }
#endif

  public String repr(/*>>>@GuardSatisfied PAIRWISEINTEQUAL this*/) {
    return PAIRWISEINTEQUALstring + varNames() + ": ";
  }

  public String getComparator() {
    return EQUALSstring;
  }

  /*@SideEffectFree*/
  public String format_using(/*>>>@GuardSatisfied PAIRWISEINTEQUAL this,*/ OutputFormat format) {

    if (format.isJavaFamily()) return format_java_family(format);

    if (format == OutputFormat.DAIKON) return format_daikon();
    if (format == OutputFormat.ESCJAVA) return format_esc();
    if (format == OutputFormat.SIMPLIFY) return format_simplify();
    if (format == OutputFormat.CSHARPCONTRACT) return format_csharp();

    return format_unimplemented(format);
  }

  public String format_daikon(/*>>>@GuardSatisfied PAIRWISEINTEQUAL this*/) {
    return var1().name() + " " + EQUALSstring + " " + var2().name()
      + " (elementwise)";
  }

  public String format_esc(/*>>>@GuardSatisfied PAIRWISEINTEQUAL this*/) {
    String[] form = VarInfo.esc_quantify (var1(), var2());
    return form[0] + "(" + form[1] + " " + EQUALSstring + " " + form[2] + ")" + form[3];
  }

  public String format_simplify(/*>>>@GuardSatisfied PAIRWISEINTEQUAL this*/) {
    String[] form = VarInfo.simplify_quantify (QuantFlags.element_wise(),
                                               var1(), var2());
    return form[0] + "(" + EQUALSSIMPLIFYstring + " " + form[1] + " " + form[2] + ")" + form[3];
  }

  public String format_java_family(/*>>>@GuardSatisfied PAIRWISEINTEQUAL this,*/ OutputFormat format) {
    return "daikon.Quant." + EQUALSstringDBC + "(" + var1().name_using(format)
      + ", " + var2().name_using(format) + ")";
  }

  public String format_csharp(/*>>>@GuardSatisfied PAIRWISEINTEQUAL this*/) {

    String[] split1 = var1().csharp_array_split();
    String[] split2 = var2().csharp_array_split();

    String equals_str;
    String end_str;
    #if defined(EQUALSTRING)
    equals_str = ".Equals(";
    end_str = ")";
    #else
    equals_str = " " + EQUALSstring + " ";
    end_str = "";
    #endif
    return "Contract.ForAll(0, " + split1[0] + ".Count(), i => " +  split1[0] + "[i]"  + split1[1] + equals_str + split2[0] + "[i]" + split2[1] + end_str + ")";
  }

  public InvariantStatus check_modified(PRIMITIVE /*@Interned*/ [] a1, PRIMITIVE /*@Interned*/ [] a2, int count) {
    assert a1 != null && a2 != null
      : var1() + " " + var2() + " " + FileIO.get_linenum();
    if (a1.length != a2.length || a1.length == 0 || a2.length == 0) {
      // destroyAndFlow();
      return InvariantStatus.FALSIFIED;
    }


    int len = a1.length;
    // int len = Math.min(a1.length, a2.length);

    for (int i=0; i<len; i++) {
      PRIMITIVE v1 = a1[i];
      PRIMITIVE v2 = a2[i];
      if (! EQUALS(v1, v2) ) {
        //  destroyAndFlow();
        return InvariantStatus.FALSIFIED;
      }
    }
    return InvariantStatus.NO_CHANGE;
  }

    public InvariantStatus add_modified(PRIMITIVE /*@Interned*/ [] a1, PRIMITIVE /*@Interned*/ [] a2,
                                        int count) {
      if (logDetail()) {
        log (debug, "saw add_modified (" + ArraysMDE.toString(a1) +
             ", " + ArraysMDE.toString(a2) + ")");
      }
      return check_modified(a1, a2, count);
    }


  protected double computeConfidence() {
    // num_elt_values() would be more appropriate
    // int num_values = ((PptSlice2) ppt).num_elt_values();
    int num_values = ppt.num_samples();
    if (num_values == 0) {
      return Invariant.CONFIDENCE_UNJUSTIFIED;
    } else {
#if (defined(EQUAL) || defined(EQUALFLOAT) || defined(EQUALSTRING))
      // It's an equality invariant
      return Invariant.CONFIDENCE_JUSTIFIED;
#else
      return 1 - Math.pow(.5, num_values);
#endif
    }
  }

  /*@Pure*/
  public boolean isSameFormula(Invariant other) {
    return true;
  }

  /*@Pure*/
  public boolean isExclusiveFormula(Invariant other) {
    return false;
  }

  // Look up a previously instantiated invariant.
  public static /*@Nullable*/ PAIRWISEINTEQUAL find(PptSlice ppt) {
    assert ppt.arity() == 2;
    for (Invariant inv : ppt.invs) {
      if (inv instanceof PAIRWISEINTEQUAL) {
        return (PAIRWISEINTEQUAL) inv;
      }
    }
    return null;
  }

  /**
   * Returns a list of non-instantiating suppressions for this invariant.
   */
  /*@Pure*/
  public /*@Nullable*/ NISuppressionSet get_ni_suppressions() {
    return suppressions;
  }

  /** Definition of this invariant (the suppressee) */
  private static NISuppressee suppressee
    = new NISuppressee (PAIRWISEINTEQUAL.class, 2);

  // Suppressor definitions (used in suppressions below)
  private static NISuppressor
    v1_eq_v2 = new NISuppressor (0, 1, EQUAL_CLASS.class),
    v1_gt_v2 = new NISuppressor (0, 1, GREATER_THAN_CLASS.class),
    v1_lt_v2 = new NISuppressor (0, 1, LESS_THAN_CLASS.class);

  #if defined(GREATEREQUAL) || defined(GREATEREQUALFLOAT) || defined (GREATEREQUALSTRING)
    private static NISuppressionSet suppressions =
      new NISuppressionSet (new NISuppression[] {

        // v1 == v2 => v1 >= v2
        new NISuppression (v1_eq_v2, suppressee),

        // v1 > v2 => v1 >= v2
        new NISuppression (v1_gt_v2, suppressee),

      });
  #elif defined(LESSEQUAL) || defined(LESSEQUALFLOAT) || defined(LESSEQUALSTRING)
    private static NISuppressionSet suppressions =
      new NISuppressionSet (new NISuppression[] {

        // v1 == v2 => v1 <= v2
        new NISuppression (v1_eq_v2, suppressee),

        // v1 < v2 => v1 <= v2
        new NISuppression (v1_lt_v2, suppressee),

      });
  #else
    private static /*@Nullable*/ NISuppressionSet suppressions = null;
  #endif

}
