import daikon.*;
import daikon.inv.*;
import daikon.split.*;

public final class DataStructures_QueueAr_dequeue_28 extends Splitter {

  public String condition() {
    return "orig(isEmpty())";
  }

  VarInfo orig_this_currentSize_varinfo; // orig(this.currentSize)

  static DummyInvariant dummyInvFactory;
  DummyInvariant dummyInv;

  public DataStructures_QueueAr_dequeue_28() { }
  public DataStructures_QueueAr_dequeue_28(Ppt ppt) {
    orig_this_currentSize_varinfo = ppt.find_var_by_name("orig(this.currentSize)");
  }

  public Splitter instantiateSplitter(Ppt ppt) {
    return new DataStructures_QueueAr_dequeue_28(ppt);
  }

  public boolean valid() {
    return (orig_this_currentSize_varinfo != null);
  }

  public boolean test(ValueTuple vt) {
    /* writeTestBody: 1 declarations */
    long orig_this_currentSize = orig_this_currentSize_varinfo.getIntValue(vt);
    return(orig_this_currentSize==0);
  }

  public String repr() {
    return "DataStructures_QueueAr_dequeue_28: "
      + "orig_this_currentSize_varinfo = " + orig_this_currentSize_varinfo.repr() + " "
      ;
  }

  public void makeDummyInvariantFactory(DummyInvariant inv) {
    dummyInvFactory = inv;
  }

  public void instantiateDummy(PptTopLevel ppt) {
    dummyInv = null;
    VarInfo orig_this_currentSize_vi = ppt.find_var_by_name("orig(this.currentSize)");
    if (orig_this_currentSize_vi != null) {
      dummyInv = dummyInvFactory.instantiate(ppt, new VarInfo[] {orig_this_currentSize_vi});
    }
  }

  public DummyInvariant getDummyInvariant() {
    return dummyInv;
  }

  public int[] getIntArray(long[] longArray) {
    int[] intArray = new int[longArray.length];
    for (int i = 0; i < intArray.length; i++) {
      intArray[i] = (int) longArray[i];
    }
    return intArray;
  }

}
