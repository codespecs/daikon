import daikon.*;
import daikon.inv.*;
import daikon.split.*;

public final class Math__BigFloat_bdiv__37 extends Splitter {

  public String condition() {
    return "orig($p) != 0 && return._p == 0";
  }

  VarInfo daikonreturn__p_varinfo; // return._p
  VarInfo orig_$p_varinfo; // orig($p)

  static DummyInvariant dummyInvFactory;
  DummyInvariant dummyInv;

  public Math__BigFloat_bdiv__37() { }
  public Math__BigFloat_bdiv__37(Ppt ppt) {
    daikonreturn__p_varinfo = ppt.find_var_by_name("return._p");
    orig_$p_varinfo = ppt.find_var_by_name("orig($p)");
  }

  public Splitter instantiateSplitter(Ppt ppt) {
    return new Math__BigFloat_bdiv__37(ppt);
  }

  public boolean valid() {
    return (daikonreturn__p_varinfo != null) && (orig_$p_varinfo != null);
  }

  public boolean test(ValueTuple vt) {
    /* writeTestBody: 2 declarations */
    long daikonreturn__p = daikonreturn__p_varinfo.getIntValue(vt);
    long orig_$p = orig_$p_varinfo.getIntValue(vt);
    return(orig_$p!=0&&daikonreturn__p==0);
  }

  public String repr() {
    return "Math__BigFloat_bdiv__37: "
      + "daikonreturn__p_varinfo = " + daikonreturn__p_varinfo.repr() + " "
      + "orig_$p_varinfo = " + orig_$p_varinfo.repr() + " "
      ;
  }

  public void makeDummyInvariantFactory(DummyInvariant inv) {
    dummyInvFactory = inv;
  }

  public void instantiateDummy(PptTopLevel ppt) {
    dummyInv = null;
    VarInfo daikonreturn__p_vi = ppt.find_var_by_name("return._p");
    VarInfo orig_$p_vi = ppt.find_var_by_name("orig($p)");
    if (daikonreturn__p_vi != null && orig_$p_vi != null) {
      dummyInv = dummyInvFactory.instantiate(ppt, new VarInfo[] {daikonreturn__p_vi, orig_$p_vi});
    }
  }

  public DummyInvariant getDummyInvariant() {
    return dummyInv;
  }

  public int[] getIntArray(long[] longArray) {
    int[] intArray = new int[longArray.length];
    for (int i = 0; i < intArray.length; i++) {
      intArray[i] = (int) longArray[i];
    }
    return intArray;
  }

}
