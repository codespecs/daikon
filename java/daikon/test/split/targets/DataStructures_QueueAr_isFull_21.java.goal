import daikon.*;
import daikon.inv.*;
import daikon.split.*;

public final class DataStructures_QueueAr_isFull_21 extends Splitter {

  public String condition() {
    return "currentSize == theArray.length";
  }

  VarInfo this_currentSize_varinfo; // this.currentSize

  static DummyInvariant dummyInvFactory;
  DummyInvariant dummyInv;

  public DataStructures_QueueAr_isFull_21() { }
  public DataStructures_QueueAr_isFull_21(Ppt ppt) {
    this_currentSize_varinfo = ppt.find_var_by_name("this.currentSize");
  }

  public Splitter instantiateSplitter(Ppt ppt) {
    return new DataStructures_QueueAr_isFull_21(ppt);
  }

  public boolean valid() {
    return (this_currentSize_varinfo != null);
  }

  public boolean test(ValueTuple vt) {
    /* writeTestBody: 1 declarations */
    long this_currentSize = this_currentSize_varinfo.getIntValue(vt);
    return(this_currentSize==this_theArray.length);
  }

  public String repr() {
    return "DataStructures_QueueAr_isFull_21: "
      + "this_currentSize_varinfo = " + this_currentSize_varinfo.repr() + " "
      ;
  }

  public void makeDummyInvariantFactory(DummyInvariant inv) {
    dummyInvFactory = inv;
  }

  public void instantiateDummy(PptTopLevel ppt) {
    dummyInv = null;
    VarInfo this_currentSize_vi = ppt.find_var_by_name("this.currentSize");
    if (this_currentSize_vi != null) {
      dummyInv = dummyInvFactory.instantiate(ppt, new VarInfo[] {this_currentSize_vi});
    }
  }

  public DummyInvariant getDummyInvariant() {
    return dummyInv;
  }

  public int[] getIntArray(long[] longArray) {
    int[] intArray = new int[longArray.length];
    for (int i = 0; i < intArray.length; i++) {
      intArray[i] = (int) longArray[i];
    }
    return intArray;
  }

}
