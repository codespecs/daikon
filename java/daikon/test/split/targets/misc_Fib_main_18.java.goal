import daikon.*;
import daikon.inv.*;
import daikon.split.*;

public final class misc_Fib_main_18 extends Splitter {

  public String condition() {
    return "i < STEPS";
  }

  VarInfo misc_Fib_STEPS_varinfo; // misc.Fib.STEPS

  static DummyInvariant dummyInvFactory;
  DummyInvariant dummyInv;

  public misc_Fib_main_18() { }
  public misc_Fib_main_18(Ppt ppt) {
    misc_Fib_STEPS_varinfo = ppt.find_var_by_name("misc.Fib.STEPS");
  }

  public Splitter instantiateSplitter(Ppt ppt) {
    return new misc_Fib_main_18(ppt);
  }

  public boolean valid() {
    return (misc_Fib_STEPS_varinfo != null);
  }

  public boolean test(ValueTuple vt) {
    /* writeTestBody: 1 declarations */
    long misc_Fib_STEPS = misc_Fib_STEPS_varinfo.getIntValue(vt);
    return(i<misc_Fib_STEPS);
  }

  public String repr() {
    return "misc_Fib_main_18: "
      + "misc_Fib_STEPS_varinfo = " + misc_Fib_STEPS_varinfo.repr() + " "
      ;
  }

  public void makeDummyInvariantFactory(DummyInvariant inv) {
    dummyInvFactory = inv;
  }

  public void instantiateDummy(PptTopLevel ppt) {
    dummyInv = null;
    VarInfo misc_Fib_STEPS_vi = ppt.find_var_by_name("misc.Fib.STEPS");
    if (misc_Fib_STEPS_vi != null) {
      dummyInv = dummyInvFactory.instantiate(ppt, new VarInfo[] {misc_Fib_STEPS_vi});
    }
  }

  public DummyInvariant getDummyInvariant() {
    return dummyInv;
  }

  public int[] getIntArray(long[] longArray) {
    int[] intArray = new int[longArray.length];
    for (int i = 0; i < intArray.length; i++) {
      intArray[i] = (int) longArray[i];
    }
    return intArray;
  }

}
