import daikon.*;
import daikon.inv.*;
import daikon.split.*;

public final class Math__BigFloat_bmul__41 extends Splitter {

  public String condition() {
    return "(orig($x.sign).equals(\"+\") || orig($x.sign).equals(\"-\")) && (orig($y.sign).equals(\"+\") || orig($y.sign).equals(\"-\"))";
  }

  VarInfo orig_$x_sign_varinfo; // orig($x.sign)
  VarInfo orig_$y_sign_varinfo; // orig($y.sign)

  static DummyInvariant dummyInvFactory;
  DummyInvariant dummyInv;

  public Math__BigFloat_bmul__41() { }
  public Math__BigFloat_bmul__41(Ppt ppt) {
    orig_$x_sign_varinfo = ppt.find_var_by_name("orig($x.sign)");
    orig_$y_sign_varinfo = ppt.find_var_by_name("orig($y.sign)");
  }

  public Splitter instantiateSplitter(Ppt ppt) {
    return new Math__BigFloat_bmul__41(ppt);
  }

  public boolean valid() {
    return (orig_$x_sign_varinfo != null) && (orig_$y_sign_varinfo != null);
  }

  public boolean test(ValueTuple vt) {
    /* writeTestBody: 2 declarations */
    String orig_$x_sign = orig_$x_sign_varinfo.getStringValue(vt);
    String orig_$y_sign = orig_$y_sign_varinfo.getStringValue(vt);
    return((orig_$x_sign.equals("+")||orig_$x_sign.equals("-"))&&(orig_$y_sign.equals("+")||orig_$y_sign.equals("-")));
  }

  public String repr() {
    return "Math__BigFloat_bmul__41: "
      + "orig_$x_sign_varinfo = " + orig_$x_sign_varinfo.repr() + " "
      + "orig_$y_sign_varinfo = " + orig_$y_sign_varinfo.repr() + " "
      ;
  }

  public void makeDummyInvariantFactory(DummyInvariant inv) {
    dummyInvFactory = inv;
  }

  public void instantiateDummy(PptTopLevel ppt) {
    dummyInv = null;
    VarInfo orig_$x_sign_vi = ppt.find_var_by_name("orig($x.sign)");
    VarInfo orig_$y_sign_vi = ppt.find_var_by_name("orig($y.sign)");
    if (orig_$x_sign_vi != null && orig_$y_sign_vi != null) {
      dummyInv = dummyInvFactory.instantiate(ppt, new VarInfo[] {orig_$x_sign_vi, orig_$y_sign_vi});
    }
  }

  public DummyInvariant getDummyInvariant() {
    return dummyInv;
  }

  public int[] getIntArray(long[] longArray) {
    int[] intArray = new int[longArray.length];
    for (int i = 0; i < intArray.length; i++) {
      intArray[i] = (int) longArray[i];
    }
    return intArray;
  }

}
