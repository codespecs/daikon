import daikon.*;
import daikon.inv.*;
import daikon.split.*;

public final class Math__BigFloat_bdiv__36 extends Splitter {

  public String condition() {
    return "!$x._p.is_defined";
  }

  VarInfo $x__p_is_defined_varinfo; // $x._p.is_defined

  static DummyInvariant dummyInvFactory;
  DummyInvariant dummyInv;

  public Math__BigFloat_bdiv__36() { }
  public Math__BigFloat_bdiv__36(Ppt ppt) {
    $x__p_is_defined_varinfo = ppt.find_var_by_name("$x._p.is_defined");
  }

  public Splitter instantiateSplitter(Ppt ppt) {
    return new Math__BigFloat_bdiv__36(ppt);
  }

  public boolean valid() {
    return ($x__p_is_defined_varinfo != null);
  }

  public boolean test(ValueTuple vt) {
    /* writeTestBody: 1 declarations */
    boolean $x__p_is_defined = $x__p_is_defined_varinfo.getIntValue(vt) > 0;
    return(!$x__p_is_defined);
  }

  public String repr() {
    return "Math__BigFloat_bdiv__36: "
      + "$x__p_is_defined_varinfo = " + $x__p_is_defined_varinfo.repr() + " "
      ;
  }

  public void makeDummyInvariantFactory(DummyInvariant inv) {
    dummyInvFactory = inv;
  }

  public void instantiateDummy(PptTopLevel ppt) {
    dummyInv = null;
    VarInfo $x__p_is_defined_vi = ppt.find_var_by_name("$x._p.is_defined");
    if ($x__p_is_defined_vi != null) {
      dummyInv = dummyInvFactory.instantiate(ppt, new VarInfo[] {$x__p_is_defined_vi});
    }
  }

  public DummyInvariant getDummyInvariant() {
    return dummyInv;
  }

  public int[] getIntArray(long[] longArray) {
    int[] intArray = new int[longArray.length];
    for (int i = 0; i < intArray.length; i++) {
      intArray[i] = (int) longArray[i];
    }
    return intArray;
  }

}
