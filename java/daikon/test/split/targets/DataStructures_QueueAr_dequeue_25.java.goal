import daikon.*;
import daikon.inv.*;
import daikon.split.*;

public final class DataStructures_QueueAr_dequeue_25 extends Splitter {

  public String condition() {
    return "++front == theArray.length";
  }

  VarInfo this_front_varinfo; // this.front

  static DummyInvariant dummyInvFactory;
  DummyInvariant dummyInv;

  public DataStructures_QueueAr_dequeue_25() { }
  public DataStructures_QueueAr_dequeue_25(Ppt ppt) {
    this_front_varinfo = ppt.find_var_by_name("this.front");
  }

  public Splitter instantiateSplitter(Ppt ppt) {
    return new DataStructures_QueueAr_dequeue_25(ppt);
  }

  public boolean valid() {
    return (this_front_varinfo != null);
  }

  public boolean test(ValueTuple vt) {
    /* writeTestBody: 1 declarations */
    long this_front = this_front_varinfo.getIntValue(vt);
    return(++this_front==this_theArray.length);
  }

  public String repr() {
    return "DataStructures_QueueAr_dequeue_25: "
      + "this_front_varinfo = " + this_front_varinfo.repr() + " "
      ;
  }

  public void makeDummyInvariantFactory(DummyInvariant inv) {
    dummyInvFactory = inv;
  }

  public void instantiateDummy(PptTopLevel ppt) {
    dummyInv = null;
    VarInfo this_front_vi = ppt.find_var_by_name("this.front");
    if (this_front_vi != null) {
      dummyInv = dummyInvFactory.instantiate(ppt, new VarInfo[] {this_front_vi});
    }
  }

  public DummyInvariant getDummyInvariant() {
    return dummyInv;
  }

  public int[] getIntArray(long[] longArray) {
    int[] intArray = new int[longArray.length];
    for (int i = 0; i < intArray.length; i++) {
      intArray[i] = (int) longArray[i];
    }
    return intArray;
  }

}
