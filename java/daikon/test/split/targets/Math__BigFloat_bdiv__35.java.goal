import daikon.*;
import daikon.inv.*;
import daikon.split.*;

public final class Math__BigFloat_bdiv__35 extends Splitter {

  public String condition() {
    return "orig($y._p) == 0 && orig($x._p) == 0 && $x._p.is_defined";
  }

  VarInfo $x__p_is_defined_varinfo; // $x._p.is_defined
  VarInfo orig_$x__p_varinfo; // orig($x._p)
  VarInfo orig_$y__p_varinfo; // orig($y._p)

  static DummyInvariant dummyInvFactory;
  DummyInvariant dummyInv;

  public Math__BigFloat_bdiv__35() { }
  public Math__BigFloat_bdiv__35(Ppt ppt) {
    $x__p_is_defined_varinfo = ppt.find_var_by_name("$x._p.is_defined");
    orig_$x__p_varinfo = ppt.find_var_by_name("orig($x._p)");
    orig_$y__p_varinfo = ppt.find_var_by_name("orig($y._p)");
  }

  public Splitter instantiateSplitter(Ppt ppt) {
    return new Math__BigFloat_bdiv__35(ppt);
  }

  public boolean valid() {
    return ($x__p_is_defined_varinfo != null) && (orig_$x__p_varinfo != null) && (orig_$y__p_varinfo != null);
  }

  public boolean test(ValueTuple vt) {
    /* writeTestBody: 3 declarations */
    boolean $x__p_is_defined = $x__p_is_defined_varinfo.getIntValue(vt) > 0;
    long orig_$x__p = orig_$x__p_varinfo.getIntValue(vt);
    long orig_$y__p = orig_$y__p_varinfo.getIntValue(vt);
    return(orig_$y__p==0&&orig_$x__p==0&&$x__p_is_defined);
  }

  public String repr() {
    return "Math__BigFloat_bdiv__35: "
      + "$x__p_is_defined_varinfo = " + $x__p_is_defined_varinfo.repr() + " "
      + "orig_$x__p_varinfo = " + orig_$x__p_varinfo.repr() + " "
      + "orig_$y__p_varinfo = " + orig_$y__p_varinfo.repr() + " "
      ;
  }

  public void makeDummyInvariantFactory(DummyInvariant inv) {
    dummyInvFactory = inv;
  }

  public void instantiateDummy(PptTopLevel ppt) {
    dummyInv = null;
    VarInfo $x__p_is_defined_vi = ppt.find_var_by_name("$x._p.is_defined");
    VarInfo orig_$x__p_vi = ppt.find_var_by_name("orig($x._p)");
    VarInfo orig_$y__p_vi = ppt.find_var_by_name("orig($y._p)");
    if ($x__p_is_defined_vi != null && orig_$x__p_vi != null && orig_$y__p_vi != null) {
      dummyInv = dummyInvFactory.instantiate(ppt, new VarInfo[] {$x__p_is_defined_vi, orig_$x__p_vi, orig_$y__p_vi});
    }
  }

  public DummyInvariant getDummyInvariant() {
    return dummyInv;
  }

  public int[] getIntArray(long[] longArray) {
    int[] intArray = new int[longArray.length];
    for (int i = 0; i < intArray.length; i++) {
      intArray[i] = (int) longArray[i];
    }
    return intArray;
  }

}
