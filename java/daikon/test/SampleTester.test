# Commands:
#
#  decl: <decls file>
#  ppt: <ppt name from decl file>
#  vars: <var1> <var2> <var3> ...
#  data: <val1> <val2> <val3> ...
#  assert: inv (<format>, <var1>, <var2>, <var3>)
#  assert: show_invs (<var1>, <var2>, <var3>)
#  assert: constant (<var1>, <var2>, <var3> ...)


################################################################################
# The basic of approach of testing LinearTernary was the following:
# 1. Add points that form a line to make sure a line is calculated when enough
# points are seen.
# 2. Add an additional point to make sure the line is maintained
# 3. Add an additional point to make sure the line is broken and a plane forms.
# 4. Add an additional point to make sure the plane is maintained.
# 5. Add an additional point to make sure the plane is broken.
#
# The approach is tested on the following three cases:
# 1. two constant values and one variable
#
#  the problem with two constant values and one var is that it does consist of
#   a linearBinary and a constant, but the linearBinary does not contain nonzero
#   coefficients for both x and y and consequently, the plane has some zero
#   coefficients so they're considered falsified
#
# 2. one constant value and two variables
# 3. three variables
#
#
################################################################################


# Test LinearTernary based on two constant values and one var (different)

decl: daikon/test/SampleTester.decls
ppt: foo.f():::EXIT35
  vars: x y z
  data: - - 4
  data: 6 4 5
  data: 6 4 20
  data: 6 4 3
  data: 6 4 2
  data: 6 4 7
# should form a line
# has to do (x, x, z) instead of (x, y, z) because of equality sets, not broken
# yet
  assert: inv(daikon.inv.ternary.threeScalar.LinearTernary, x, x, z);
  data: 6 4 12
# should still be a line
  assert: show_invs(x,x,z)
  assert: inv(daikon.inv.ternary.threeScalar.LinearTernary, x, x, z);
  data: 1 5 9
# should break the line and form a plane
  assert: show_invs(x,y,z)
###################
# the following does not work as planned because of zero coefficients
###################
# assert: inv(daikon.inv.ternary.threeScalar.LinearTernary, x, y, z);
# data: 6 4 15
# should still be a plane
# assert: show_invs(x,y,z)
# assert: inv(daikon.inv.ternary.threeScalar.LinearTernary, x, y, z);
# should break the plane
# data: 0 0 0
# assert: !inv(daikon.inv.ternary.threeScalar.LinearTernary, x, y, z);




# Test LinearTernary based on two constant values and one var (same)
decl: daikon/test/SampleTester.decls
ppt: foo.f():::EXIT35
  vars: x y z
  data: - - 4
  data: 6 6 5
  data: 6 6 20
  data: 6 6 3
  data: 6 6 2
  data: 6 6 7
# should form a line
  assert: inv(daikon.inv.ternary.threeScalar.LinearTernary, x, x, z);
  data: 6 6 12
# should still be a line
assert: show_invs(x,x,z)
  assert: inv(daikon.inv.ternary.threeScalar.LinearTernary, x, x, z);
  data: 1 5 100
# should break the line and form a plane
assert: show_invs(x,y,z)
###################
# the following does not work as planned because of zero coefficients
###################
# assert: inv(daikon.inv.ternary.threeScalar.LinearTernary, x, y, z);
# data: 6 6 15
# should still be a plane
# assert: show_invs(x,y,z)
# assert: inv(daikon.inv.ternary.threeScalar.LinearTernary, x, y, z);
# should break the plane
# data: 0 0 0
# assert: !inv(daikon.inv.ternary.threeScalar.LinearTernary, x, y, z);








# Test LinearTernary based on one constant value and two
# vars (same)

decl: daikon/test/SampleTester.decls
ppt: foo.f():::EXIT35
  vars: x y z
  data: 1 1 -
  data: 1 1 20
  data: 20 20 20
  data: 2 2 20
  data: 3 3 20
  data: 5 5 20
  data: 9 9 20
  data: 11 11 20
  data: 4 4 20
# should form a line
  assert: inv(daikon.inv.ternary.threeScalar.LinearTernary, x, x, z);
  data: 6 6 20
# should still be a line
   assert: inv(daikon.inv.ternary.threeScalar.LinearTernary, x, x, z);
  data: 6 5 6
# should break the line and form a plane
  assert: show_invs(x,y,z)
  assert: inv(daikon.inv.ternary.threeScalar.LinearTernary, x, y, z);
  data: 8 8 20
# should still be a plane
  assert: show_invs(x,y,z)
  assert: inv(daikon.inv.ternary.threeScalar.LinearTernary, x, y, z);
# should break the plane
#  data: 0 0 0
#  assert: !inv(daikon.inv.ternary.threeScalar.LinearTernary, x, y, z);




# Test LinearTernary based on one constant value and two
# vars (different)

decl: daikon/test/SampleTester.decls
ppt: foo.f():::EXIT35
  vars: x y z
  data: 1 2 -
  data: 1 2 20
  data: 10 20 20
  data: 2 4 20
  data: 3 6 20
  data: 5 10 20
# should form a line
  assert: inv(daikon.inv.ternary.threeScalar.LinearTernary, x, x, z);
  data: 6 12 20
# should still be a line
  assert: inv(daikon.inv.ternary.threeScalar.LinearTernary, x, x, z);
  data: 3 8 10
# should break the line and form a plane
  assert: show_invs(x,y,z)
  assert: inv(daikon.inv.ternary.threeScalar.LinearTernary, x, y, z);
  data: 8 16 20
# should still be a plane
  assert: show_invs(x,y,z)
  assert: inv(daikon.inv.ternary.threeScalar.LinearTernary, x, y, z);
# should break the plane
  data: 0 0 0
  assert: !inv(daikon.inv.ternary.threeScalar.LinearTernary, x, y, z);







# Test LinearTernary based on three vars (same)
decl: daikon/test/SampleTester.decls
ppt: foo.f():::EXIT35
  vars: x y z
  data: - - 4
  data: 6 6 -
  data: 0 0 0
  data: 20 20 20
  data: 9 9 9
  data: 2 2 2
# should form a line
  assert: inv(daikon.inv.ternary.threeScalar.LinearTernary, x, x, z);
  data: 7 7 7
# should still be a line
  assert: inv(daikon.inv.ternary.threeScalar.LinearTernary, x, x, z);
  data: 2 3 1
# should break the line and form a plane
  assert: show_invs(x,y,z)
  assert: inv(daikon.inv.ternary.threeScalar.LinearTernary, x, y, z);
  data: 15 15 15
# should still be a plane
 assert: show_invs(x,y,z)
  assert: inv(daikon.inv.ternary.threeScalar.LinearTernary, x, y, z);
# should break the plane
  data: 2 3 2
  assert: !inv(daikon.inv.ternary.threeScalar.LinearTernary, x, y, z);
