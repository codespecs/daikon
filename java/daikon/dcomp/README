There are three versions of DCRuntime.java; the master one (in this directory) that contains
the actual DynComp runtime code, and two small, derivative versions with the same public
methods: one in ../dcomp-dummy and one in ../dcomp-transfer. This README explains why this
is the case and, should it be necessary, how to modify the derivative versions.

Post Java 8 there are increased security checks when loading JDK classes. In particular, the
core classes contained in the java.base module may not reference anything outside of
java.base. This means that for JDK 11 we cannot pre-instrument classes in the same manner as
was done for Java 8 as this would introduce external references to the DynComp runtime.

However, we can get around this restriction in the following manner: We to create a shadow
DynComp runtime called java.lang.DCRuntime that contains all the public methods of
daikon.dcomp.DCRuntime, but the method bodies contain only a return statement.  When we
pre-instrument java.base we do two things differently from the JDK 8 case: we change all
references to daikon.dcomp.DCRuntime to refer to java.lang.DCRuntime instead, and we add
the dummy java.lang.DCRuntime to our java.base replacement jar. This allows us to pass the
security test when a class from java.base is loaded. Then, during DynComp startup, this
dummy version is replaced with the version in dcomp-transfer where each method calls the
corresponding method in daikon.dcomp.DCRuntime.

We do not anticipate that the two derivative versions will ever need to be modified.  This
would only happen if it was decided to add an additional public method to DCRuntime that
was to be called from instrumented code. This would require changes to DCInstrument to
add calls to this new runtime method from instrumented code. The new method would need to be
added to the master DCRuntime in this directory and the two derivative versions of DCRuntime
would need to be modified as well. Here are the steps to do so:

 1) go to the daikon/dcomp-transfer directory
 2) rename DCRuntime.java to DCRuntime.java.temp and delete DCRuntime.class (if present)
 3) go to the daikon/dcomp-dummy directory
 4) edit DCRuntime.java.dummy to add the new dummy method
    (method body is just a return statement)
 5) copy DCRuntime.java.dummy to DCRuntime.java
 6) run 'make' which will create DCRuntime.class (as well as doing other parts of the build)
 7) rename DCRuntime.class to DCRuntime.class.dummy
 8) delete DCRuntime.java
 9) go to the daikon/dcomp-transfer directory
10) rename DCRuntime.java.temp back to DCRuntime.java
11) edit DCRuntime.java to add the new transfer method
    (method body is a call to matching new method in daikon.dcomp.DCRuntime)
12) run 'make' which will create DCRuntime.class (as well as repeating other parts of the build)

At this point, everything should be ready to proceed with a normal build of DynComp.
Note that the file daikon/dcomp-dummy/DCRuntime.class.dummy is used later in the build process
during the construction of dcomp_rt.jar.

