import typequals.prototype.qual.Prototype;

package java.lang;

class Object {
//     Object();
    Class<?> getClass(@Prototype Object this);
//     int hashCode();
//     boolean equals(Object arg0);
//     protected Object clone() throws CloneNotSupportedException;
//     String toString();
//     void notify();
//     void notifyAll();
//     void wait(long arg0) throws InterruptedException;
//     void wait(long arg0, int arg1) throws InterruptedException;
//     void wait() throws InterruptedException;
//     protected void finalize() throws Throwable;
}


package java.lang;

class String implements Serializable, Comparable<String>, CharSequence {
//     Comparator<String> CASE_INSENSITIVE_ORDER;
//     String();
//     String(String arg0);
//     String(char[] arg0);
//     String(char[] arg0, int arg1, int arg2);
//     String(int[] arg0, int arg1, int arg2);
//     String(byte[] arg0, int arg1, int arg2, int arg3);
//     String(byte[] arg0, int arg1);
//     String(byte[] arg0, int arg1, int arg2, String arg3) throws UnsupportedEncodingException;
//     String(byte[] arg0, int arg1, int arg2, Charset arg3);
//     String(byte[] arg0, String arg1) throws UnsupportedEncodingException;
//     String(byte[] arg0, Charset arg1);
//     String(byte[] arg0, int arg1, int arg2);
//     String(byte[] arg0);
//     String(StringBuffer arg0);
//     String(StringBuilder arg0);
//     int length();
//     boolean isEmpty();
//     char charAt(int arg0);
//     int codePointAt(int arg0);
//     int codePointBefore(int arg0);
//     int codePointCount(int arg0, int arg1);
//     int offsetByCodePoints(int arg0, int arg1);
//     void getChars(int arg0, int arg1, char[] arg2, int arg3);
//     void getBytes(int arg0, int arg1, byte[] arg2, int arg3);
//     byte[] getBytes(String arg0) throws UnsupportedEncodingException;
//     byte[] getBytes(Charset arg0);
//     byte[] getBytes();
//     boolean equals(Object arg0);
//     boolean contentEquals(StringBuffer arg0);
//     boolean contentEquals(CharSequence arg0);
//     boolean equalsIgnoreCase(String arg0);
//     int compareTo(String arg0);
//     int compareToIgnoreCase(String arg0);
//     boolean regionMatches(int arg0, String arg1, int arg2, int arg3);
//     boolean regionMatches(boolean arg0, int arg1, String arg2, int arg3, int arg4);
//     boolean startsWith(String arg0, int arg1);
//     boolean startsWith(String arg0);
//     boolean endsWith(String arg0);
//     int hashCode();
//     int indexOf(int arg0);
//     int indexOf(int arg0, int arg1);
//     int lastIndexOf(int arg0);
//     int lastIndexOf(int arg0, int arg1);
//     int indexOf(String arg0);
//     int indexOf(String arg0, int arg1);
//     int lastIndexOf(String arg0);
//     int lastIndexOf(String arg0, int arg1);
//     String substring(int arg0);
//     String substring(int arg0, int arg1);
//     CharSequence subSequence(int arg0, int arg1);
//     String concat(String arg0);
//     String replace(char arg0, char arg1);
//     boolean matches(String arg0);
//     boolean contains(CharSequence arg0);
//     String replaceFirst(String arg0, String arg1);
//     String replaceAll(String arg0, String arg1);
//     String replace(CharSequence arg0, CharSequence arg1);
//     String[] split(String arg0, int arg1);
//     String[] split(String arg0);
//     String toLowerCase(Locale arg0);
//     String toLowerCase();
//     String toUpperCase(Locale arg0);
//     String toUpperCase();
//     String trim();
//     String toString();
//     char[] toCharArray();
    String format(String arg0, @Prototype Object[] arg1);
    String format(Locale arg0, String arg1, @Prototype Object[] arg2);
//     String valueOf(Object arg0);
//     String valueOf(char[] arg0);
//     String valueOf(char[] arg0, int arg1, int arg2);
//     String copyValueOf(char[] arg0, int arg1, int arg2);
//     String copyValueOf(char[] arg0);
//     String valueOf(boolean arg0);
//     String valueOf(char arg0);
//     String valueOf(int arg0);
//     String valueOf(long arg0);
//     String valueOf(float arg0);
//     String valueOf(double arg0);
//     String intern();
}
