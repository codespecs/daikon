The easiest way to build and run Daikon is to put daikon.jar on your classpath.
This directory contains dependences that are put in daikon.jar.
All .jar files in this directory should contain Java 8 bytecodes,
so that Daikon will run under Java 8.

bcel-util-all-0.0.9.jar : https://github.com/plume-lib/bcel-util
To create, run:
git clone https://github.com/plume-lib/bcel-util && \
(cd bcel-util && \
./gradlew shadowJar && \
cp build/libs/bcel-util-all-0.0.9.jar ..) && \
\rm -rf bcel-util

commons-exec-1.3.jar : https://commons.apache.org/proper/commons-exec/

daikon-util.jar : Just like plume-util-*.jar, but with package
changed to daikon.util.  To create, run:
(mkdir -p ~/java && \
cd ~/java && \
git clone https://github.com/pantsbuild/jarjar && \
cd jarjar && \
./pants doc test ::) && \
java \
-cp $HOME/java/jarjar/dist/jarjar.jar \
org.pantsbuild.jarjar.Main \
process daikon-util-rules.txt plume-util-*.jar daikon-util.jar

java-getopt-1.0.14.jar : https://search.maven.org/#search%7Cga%7C1%7Cg%3A%22org.checkerframework.annotatedlib%22%20a%3A%22java-getopt%22

junit-4.12.jar : https://github.com/junit-team/junit4/wiki/Download-and-Install

options-all-0.3.1.jar : https://github.com/plume-lib/options
To create, run:
git clone https://github.com/plume-lib/options && \
(cd options && \
./gradlew shadowJar && \
cp build/libs/bcel-util-all-0.0.9.jar ..) && \
\rm -rf options

plume-util-0.1.1.jar : https://search.maven.org/#search%7Cga%7C1%7Cplume-util
When you update this, remake daikon-util.jar (see above).

require-javadoc-0.1.0.jar : https://repo.maven.apache.org/maven2/org/plumelib/require-javadoc/
  wget https://repo.maven.apache.org/maven2/org/plumelib/require-javadoc/0.1.0/require-javadoc-0.1.0.jar

signature-util: https://repo.maven.apache.org/maven2/org/plumelib/signature-util/
  wget https://repo.maven.apache.org/maven2/org/plumelib/signature-util/0.0.2/signature-util-0.0.2.jar

---------------------------------------------------------------------------

Motivation for daikon-util.jar:
The daikon.util classes are used only by the run-time support for
instrumentation tools (that is, anything that might run in the same JVM as
a target program), namely Chicory and DynComp.  All other parts of Daikon
use plume-lib.
Suppose that both DynComp and the target program both used plume-lib.
If DynComp instrumented plume-lib, then an infinite recursion would
result; if DynComp did not instrument plume-lib, then DynComp would
miss some computations of the target program.  Thus, DynComp needs to
be completely separate from the target program -- they should share no
code.  To enable DynComp to work properly on a program that uses
plume-lib, DynComp must not use plume-lib.  Therefore, DynComp uses a
renamed version of plume-lib that is not used by any other program,
including Daikon itself.  DynComp can instrument the plume package,
but it does not instrument daikon.util.
