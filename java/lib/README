The easiest way to build and run Daikon is to put daikon.jar on your classpath.
This directory contains dependences that are put in daikon.jar.
All .jar files in this directory should contain Java 7 bytecodes,
so that Daikon will run under Java 7.

bcel-util-all-0.0.4.jar : https://search.maven.org/#search%7Cga%7C1%7Cbcel-util

commons-exec-1.3.jar : https://commons.apache.org/proper/commons-exec/

daikon-util.jar : Just like plume-util-*.jar, but with package
changed to daikon.util.  To create, run:
(mkdir -p ~/java && \
cd ~/java && \
git clone https://github.com/pantsbuild/jarjar && \
cd jarjar && \
./pants doc test ::) && \
java \
-cp $HOME/java/jarjar/dist/jarjar.jar \
org.pantsbuild.jarjar.Main \
process daikon-util-rules.txt plume-util-*.jar daikon-util.jar

java-getopt.jar : http://www.urbanophile.com/arenn/coding/download.html
- GNU getopt 1.0.8 command-line option parser
- Is distributed with Java files alongside .class files in the .jar file.
  The Java files must be stripped from the .jar, otherwise the jikes
  compiler tries to compile the Java files inside the .jar file.
  [TODO: If this is not a problem with javac, there is no more need to
  repackage the jar file and we can use the original one.]
  1. Download java-getopt-1.0.8.jar
  2. "jar xf java-getopt-1.0.8.jar"
  3. "cd gnu"
  4. "rm `find . -name *.java`"
  5. "cd .."
  6. "jar cf java-getopt.jar gnu/"

junit-4.12.jar : https://github.com/junit-team/junit4/wiki/Download-and-Install

options-all-0.3.1.jar : https://github.com/plume-lib/options
- using JDK 7, uncomment and run shadowJar task

plume-util-0.0.1.jar : https://search.maven.org/#search%7Cga%7C1%7Cbcel-util
When you update this, remake daikon-util.jar (see above).

---------------------------------------------------------------------------

Motivation for daikon-util.jar:
The daikon.util classes are used only by the run-time support for
instrumentation tools (that is, anything that might run in the same JVM as
a target program), namely Chicory and DynComp.  All other parts of Daikon
use plume-lib.
Suppose that both DynComp and the target program both used plume-lib.
If DynComp instrumented plume-lib, then an infinite recursion would
result; if DynComp did not instrument plume-lib, then DynComp would
miss some computations of the target program.  Thus, DynComp needs to
be completely separate from the target program -- they should share no
code.  To enable DynComp to work properly on a program that uses
plume-lib, DynComp must not use plume-lib.  Therefore, DynComp uses a
renamed version of plume-lib that is not used by any other program,
including Daikon itself.  DynComp can instrument the plume package,
but it does not instrument daikon.util.
