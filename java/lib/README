The easiest way to build and run Daikon is to put daikon.jar on your classpath.
This directory contains dependences that are put in daikon.jar.
All .jar files in this directory should contain Java 8 bytecodes,
so that Daikon will run under Java 8.

bcel-6.3.1.jar
  wget https://repo.maven.apache.org/maven2/org/checkerframework/annotatedlib/bcel/6.3.1/bcel-6.3.1.jar

bcel-util-1.1.5.jar : https://repo.maven.apache.org/maven2/org/plumelib/bcel-util/
  wget https://repo.maven.apache.org/maven2/org/plumelib/bcel-util/1.1.5/bcel-util-1.1.5.jar

chceker-qual.jar
  wget https://search.maven.org/remotecontent?filepath=org/checkerframework/checker-qual/2.10.1/checker-qual-2.10.1.jar -O checker-qual.jar

checker-framework/
  ... TODO: document how to update

commons-exec-1.3.jar : https://commons.apache.org/proper/commons-exec/

daikon-util.jar : Just like plume-util-*.jar, but in package daikon.util.
To create, run from this directory:
mkdir -p ~/java && \
(cd ~/java && \
(git clone https://github.com/pantsbuild/jarjar jarjar-pantsbuild > /dev/null 2>&1 \
  || (cd jarjar-pantsbuild && git pull)) && \
cd jarjar-pantsbuild && \
./pants doc test ::) && \
rm -f daikon-util.jar && \
java \
-cp $HOME/java/jarjar-pantsbuild/dist/jarjar.jar \
org.pantsbuild.jarjar.Main \
process daikon-util-rules.txt plume-util-*.jar daikon-util.jar

java-getopt-1.0.14.0.1.jar : https://search.maven.org/#search%7Cga%7C1%7Cg%3A%22org.checkerframework.annotatedlib%22%20a%3A%22java-getopt%22
  wget https://repo.maven.apache.org/maven2/org/checkerframework/annotatedlib/java-getopt/1.0.14.0.1/java-getopt-1.0.14.0.1.jar

junit-4.12.jar : https://github.com/junit-team/junit4/releases

options-1.0.2.jar : https://search.maven.org/#search%7Cga%7C1%7Coptions
  wget https://repo.maven.apache.org/maven2/org/plumelib/options/1.0.2/options-1.0.2.jar

plume-util-1.0.10.jar : https://search.maven.org/#search%7Cga%7C1%7Cplume-util
  wget https://repo.maven.apache.org/maven2/org/plumelib/plume-util/1.0.10/plume-util-1.0.10.jar
When you update this, remove the old one daikon-util.jar then remake it (see above).

reflection-util-0.0.4.jar : https://repo.maven.apache.org/maven2/org/plumelib/reflection-util/
  wget https://repo.maven.apache.org/maven2/org/plumelib/reflection-util/0.0.4/reflection-util-0.0.4.jar

require-javadoc-0.1.2.jar : https://repo.maven.apache.org/maven2/org/plumelib/require-javadoc/
  wget https://repo.maven.apache.org/maven2/org/plumelib/require-javadoc/0.1.2/require-javadoc-0.1.2.jar

---------------------------------------------------------------------------

Motivation for daikon-util.jar:
The daikon.util classes are used only by the run-time support for
instrumentation tools (that is, anything that might run in the same JVM as
a target program), namely Chicory and DynComp.  All other parts of Daikon
use plume-lib.
Suppose that both DynComp and the target program both used plume-lib.
If DynComp instrumented plume-lib, then an infinite recursion would
result; if DynComp did not instrument plume-lib, then DynComp would
miss some computations of the target program.  Thus, DynComp needs to
be completely separate from the target program -- they should share no
code.  To enable DynComp to work properly on a program that uses
plume-lib, DynComp must not use plume-lib.  Therefore, DynComp uses a
renamed version of plume-lib that is not used by any other program,
including Daikon itself.  DynComp can instrument the plume package,
but it does not instrument daikon.util.
